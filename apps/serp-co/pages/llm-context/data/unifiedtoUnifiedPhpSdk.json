[
  {
    "owner": "unified-to",
    "repo": "unified-php-sdk",
    "content": "TITLE: Authentication example with API key\nDESCRIPTION: This PHP code demonstrates how to initialize the Unified API PHP SDK with an API key for authentication. It initializes the SDK with the API key in the setSecurity method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to create a Unified connection using the PHP SDK. It requires the `vendor/autoload.php` file for dependency loading. The snippet initializes the SDK with an API key, defines a `Shared\\Connection` object with categories, integration type, and permissions, and then sends a request to create the connection. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Shared\\Connection(\n    categories: [\n        Shared\\PropertyConnectionCategories::Metadata,\n    ],\n    integrationType: '<value>',\n    permissions: [\n        Shared\\PropertyConnectionPermissions::MartechListRead,\n    ],\n);\n\n$response = $sdk->unified->createUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unified.to Webhook in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new webhook subscription using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `CreateUnifiedWebhookRequest` object with the necessary webhook parameters (connection ID, event, and object type), and then calls the `createUnifiedWebhook` method. The example also includes basic error handling and response processing.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateUnifiedWebhookRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Created,\n        objectType: Shared\\ObjectType::HrisPayslip,\n    ),\n);\n\n$response = $sdk->webhook->createUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Accounting Account in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with an accounting account and connection ID, and then calls the createAccountingAccount method. The response is then handled to process the created account.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HRIS Group using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new HRIS group using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the group details and connection ID, and then sends the request to the API. The response is then handled to process the newly created group. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisGroupRequest(\n    hrisGroup: new Shared\\HrisGroup(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->createHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Accounting Invoice in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting invoice using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with an accounting invoice and connection ID, and then calls the createAccountingInvoice method. The response is then handled to process the created invoice.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingInvoiceRequest(\n    accountingInvoice: new Shared\\AccountingInvoice(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Subscription with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a webhook subscription using the Unified PHP SDK. It shows how to create a `Webhook` object with parameters like `connectionId`, `event`, and `objectType` and pass it within a `UpdateUnifiedWebhookRequest`. The snippet includes basic response handling to process the updated webhook information.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUnifiedWebhookRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Created,\n        objectType: Shared\\ObjectType::PaymentLink,\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->webhook->updateUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching CRM Contact using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a CRM contact using the Unified PHP SDK. It initializes the SDK, sets the API key, and creates a request object with the necessary parameters (connectionId, id, and a CrmContact object). It then calls the `patchCrmContact` method to update the contact.  Requires the Unified PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Candidate using Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to create an ATS candidate using the Unified.to PHP SDK. It initializes the SDK, creates a `CreateAtsCandidateRequest` object, and calls the `createAtsCandidate` method. It requires the `vendor/autoload.php` file and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The `atsCandidate` parameter is of type `Shared\\AtsCandidate` and `connectionId` is string.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/candidate/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsCandidateRequest(\n    atsCandidate: new Shared\\AtsCandidate(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->candidate->createAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Accounting Contact using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting contact using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `PatchAccountingContactRequest` object, providing `connectionId` and `id`, and calls `patchAccountingContact`. The response is checked for validity. The snippet requires the Unified.to PHP SDK installed with Composer, and valid API key and resource IDs.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingContactRequest(\n    accountingContact: new Shared\\AccountingContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to update a Unified connection using the PHP SDK. It initializes the SDK with an API key, creates a request object with updated connection parameters (categories, integration type, permissions), and then calls the `updateUnifiedConnection` method. The response, which can be a Connection object, is then handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/connection/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUnifiedConnectionRequest(\n    connection: new Shared\\Connection(\n        categories: [\n            Shared\\PropertyConnectionCategories::Scim,\n        ],\n        integrationType: '<value>',\n        permissions: [\n            Shared\\PropertyConnectionPermissions::CalendarRecordingWrite,\n        ],\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->connection->updateUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Uc Contact with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a contact using the Unified.to PHP SDK. It initializes the SDK, sets the API key for security, and then calls the createUcContact method with a request object containing the contact details and connection ID. It requires the Unified_to SDK and the Models/Operations and Models/Shared namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateUcContactRequest(\n    ucContact: new Shared\\UcContact(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->uc->createUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Pull Request with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a pull request using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connection ID, pull request ID, and the updated pull request data), and calls the `updateRepoPullrequest` method. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pullrequest/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoPullrequestRequest(\n    repoPullrequest: new Shared\\RepoPullrequest(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pullrequest->updateRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to create a unified connection using the Unified PHP SDK. It requires the `vendor/autoload.php` file and defines a new `Connection` object with categories, integration type, and permissions, then uses the SDK to send a create request. It depends on the Unified PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/connection/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Shared\\Connection(\n    categories: [\n        Shared\\PropertyConnectionCategories::Metadata,\n    ],\n    integrationType: '<value>',\n    permissions: [\n        Shared\\PropertyConnectionPermissions::MartechListRead,\n    ],\n);\n\n$response = $sdk->connection->createUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Taxrate with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting taxrate using the Unified.to PHP SDK. It initializes the SDK, constructs a request with the necessary parameters (accounting taxrate object and connection ID), and sends the request to the `createAccountingTaxrate` method. Finally, it handles the response to process the created accounting taxrate, ensuring proper error handling via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingTaxrateRequest(\n    accountingTaxrate: new Shared\\AccountingTaxrate(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Integration Auth URL with PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve an authorization URL for a specified integration using the PHP SDK.  It requires setting up the SDK with an API key and creating a request object with the integration type and workspace ID. The response contains the authorization URL.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/integration/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedIntegrationAuthRequest(\n    integrationType: '<value>',\n    workspaceId: '<id>',\n);\n\n$response = $sdk->integration->getUnifiedIntegrationAuth(\n    request: $request\n);\n\nif ($response->res !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Deal with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a CRM deal using the Unified.to PHP SDK.  It configures the SDK with an API key, constructs a request object with the deal data and connection ID, and invokes the createCrmDeal method. This code requires the Unified.to PHP SDK to be installed, typically via Composer, and depends on the specific models for requests and responses.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmDealRequest(\n    crmDeal: new Shared\\CrmDeal(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->createCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Lead using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a CRM lead using the Unified.to PHP SDK. It initializes the SDK, defines the request with connection ID and lead data, and then calls the createCrmLead method. The response is then handled to process the created lead.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lead/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmLeadRequest(\n    crmLead: new Shared\\CrmLead(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->lead->createCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Candidate with the Unified PHP SDK\nDESCRIPTION: Demonstrates creating a new candidate using the Unified PHP SDK's `createAtsCandidate` method. The snippet illustrates the process of including the autoloader, defining the namespaces, initializing the SDK with security credentials (API key), constructing the request with candidate details and a connection ID, and then calling the API method. The response is checked for successful creation, and the response object is handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsCandidateRequest(\n    atsCandidate: new Shared\\AtsCandidate(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Unified.to Webhooks in PHP\nDESCRIPTION: This code snippet shows how to retrieve a list of all registered webhooks using the Unified.to PHP SDK. It initializes the SDK, creates a `ListUnifiedWebhooksRequest` object, and calls the `listUnifiedWebhooks` method. The snippet then demonstrates how to process the response and handle potential errors.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedWebhooksRequest();\n\n$response = $sdk->webhook->listUnifiedWebhooks(\n    request: $request\n);\n\nif ($response->webhooks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Connections - Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all connections using the Unified PHP SDK. It initializes the SDK with an API key and then makes a request to list the connections.  The response contains a list of connections, which can be used for managing integrations.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedConnectionsRequest();\n\n$response = $sdk->unified->listUnifiedConnections(\n    request: $request\n);\n\nif ($response->connections !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching SCIM Users (PHP)\nDESCRIPTION: This code snippet demonstrates how to update a user using the PATCH method with the Unified.to PHP SDK and the SCIM protocol. It initializes the SDK, sets up a `PatchScimUsersRequest` including a `ScimUser`, `connectionId`, and `id`, and calls `patchScimUsers`. The security API key is needed to authorize the request.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/user/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchScimUsersRequest(\n    scimUser: new Shared\\ScimUser(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->user->patchScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Transaction with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create an accounting transaction using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and the accounting transaction data, and then calls the `createAccountingTransaction` method.  It requires the Unified.to PHP SDK to be installed via composer. The code outputs a newly created AccountingTransaction.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/transaction/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingTransactionRequest(\n    accountingTransaction: new Shared\\AccountingTransaction(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->transaction->createAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Activity with the Unified PHP SDK\nDESCRIPTION: Demonstrates how to create a new activity using the Unified PHP SDK's `createAtsActivity` method. It requires including the autoloader, defining necessary namespaces, initializing the SDK with an API key, constructing a request object with the activity details and connection ID, and then calling the `createAtsActivity` method. The response object is then checked for a successful activity creation, and the response is handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsActivityRequest(\n    atsActivity: new Shared\\AtsActivity(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Contact using PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a CRM contact using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID and contact details, and calls the createCrmContact method.  The response is handled to process the created contact.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->contact->createCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Order using Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting order using the Unified PHP SDK. It requires the 'vendor/autoload.php' file and uses the Operations and Shared models. The code initializes the SDK, sets the API key, creates a request object with the necessary parameters (connectionId, id, and AccountingOrder), and calls the updateAccountingOrder method. It then handles the response if the accountingOrder is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/order/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingOrderRequest(\n    accountingOrder: new Shared\\AccountingOrder(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->order->updateAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Accounting Contact in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting contact using the Unified.to PHP SDK.  It initializes the SDK with an API key, creates a request object with an accounting contact and connection ID, and then calls the createAccountingContact method. The response is then handled to process the created contact.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingContactRequest(\n    accountingContact: new Shared\\AccountingContact(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create ATS Application in PHP\nDESCRIPTION: This snippet demonstrates how to create a new ATS application using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and sets up the SDK with an API key and creates a request object with connection ID and AtsApplication object. The `createAtsApplication` function is then called on the application object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/application/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsApplicationRequest(\n    atsApplication: new Shared\\AtsApplication(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->application->createAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List CRM Contacts with Unified.to in PHP\nDESCRIPTION: This example demonstrates how to list all CRM contacts using the Unified.to PHP SDK.  It includes initializing the SDK with an API key, building a `ListCrmContactsRequest` object that specifies the connection ID, then calling `listCrmContacts` function. The code checks if the `crmContacts` are null before handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmContactsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->listCrmContacts(\n    request: $request\n);\n\nif ($response->crmContacts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unified Webhook in PHP\nDESCRIPTION: This code snippet shows how to create a Unified webhook subscription using the PHP SDK. It requires the `vendor/autoload.php` file for dependency loading. The snippet initializes the SDK, defines a `Shared\\Webhook` object with connection ID, event, and object type, wraps the webhook object in a `CreateUnifiedWebhookRequest`, and then sends the request to create the webhook. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateUnifiedWebhookRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Created,\n        objectType: Shared\\ObjectType::HrisPayslip,\n    ),\n);\n\n$response = $sdk->unified->createUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Contact with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a CRM contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates an UpdateCrmContactRequest object with the required parameters (connectionId, id, crmContact), and then calls the updateCrmContact method on the CRM API. The snippet handles the response and includes error handling. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->updateCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Inventory with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update commerce inventory using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and CommerceInventory data), and then calls the updateCommerceInventory method. It also shows basic error handling and response processing.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/inventory/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceInventoryRequest(\n    commerceInventory: new Shared\\CommerceInventory(\n        available: 9360.02,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->inventory->updateCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Calendar Link in PHP\nDESCRIPTION: This code snippet demonstrates how to create a calendar link using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the URL for the link, and sends the request. The example also shows how to handle the response when the calendar link creation is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCalendarLinkRequest(\n    calendarLink: new Shared\\CalendarLink(\n        url: 'https://sturdy-begonia.biz/',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->createCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LMS Course (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve an LMS course using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID and course ID, and then calls the `getLmsCourse` method on the `lms` service.  It requires the Unified API PHP SDK to be installed. The response contains LMS course details if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsCourseRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->getLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Company with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a CRM company using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the necessary parameters (connectionId and a Shared\\CrmCompany object), and calls the createCrmCompany method on the company service. The response is then handled to process the created CRM company data. Requires `vendor/autoload.php` and uses `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmCompanyRequest(\n    crmCompany: new Shared\\CrmCompany(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->company->createCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SCIM Group with PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a SCIM group using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK with an API key and then creates a `CreateScimGroupsRequest` object with the group's display name and connection ID, which is then used to call the `createScimGroups` method. Finally, it handles the response if the `scimGroup` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateScimGroupsRequest(\n    scimGroup: new Shared\\ScimGroup(\n        displayName: 'Bert89',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->scim->createScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Passthroughs in PHP\nDESCRIPTION: This snippet demonstrates how to use the Unified PHP SDK to list passthrough endpoints. It initializes the SDK, sets the security key, creates a request object, and calls the `listPassthroughs` method. The connection ID and path are required parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPassthroughsRequest(\n    connectionId: '<id>',\n    path: '/selinux',\n);\n\n$response = $sdk->passthrough->listPassthroughs(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Contact using PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an accounting contact using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID and contact details, and then calls the createAccountingContact method. The response is then handled to process the created contact.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingContactRequest(\n    accountingContact: new Shared\\AccountingContact(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->contact->createAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List CRM Contacts Example PHP\nDESCRIPTION: This snippet demonstrates how to list all CRM contacts using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a ListCrmContactsRequest object with a connection ID, calls the listCrmContacts method, and handles the response. The snippet requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmContactsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->contact->listCrmContacts(\n    request: $request\n);\n\nif ($response->crmContacts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Account using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `CreateAccountingAccountRequest` object with the necessary parameters (including the `AccountingAccount` model and connection ID), and then calls the `createAccountingAccount` method on the `account` service. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/account/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->account->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Order in PHP\nDESCRIPTION: This code snippet demonstrates how to update specific fields of an accounting order using the Unified.to PHP SDK. It involves setting up the SDK with an API key and creating a `PatchAccountingOrderRequest` object. The request includes the `connectionId`, the `id` of the order to be updated, and an `AccountingOrder` object containing the fields to be patched. The `patchAccountingOrder` method on the `order` service is then called, and the response is handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/order/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingOrderRequest(\n    accountingOrder: new Shared\\AccountingOrder(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->order->patchAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create GenAI Prompt with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a GenAI prompt using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It sets up the SDK with an API key, creates a request object with a `GenaiPrompt` and a connection ID, and then calls the `createGenaiPrompt` method to send the request and handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/prompt/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateGenaiPromptRequest(\n    genaiPrompt: new Shared\\GenaiPrompt(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->prompt->createGenaiPrompt(\n    request: $request\n);\n\nif ($response->genaiPrompt !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Item using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a commerce item using the Unified API PHP SDK. It requires the Unified SDK to be installed and configured with an API key. The snippet constructs a request object containing the updated commerce item data, connection ID, and item ID, then calls the `updateCommerceItem` function. The response is then handled to process the returned commerce item, if any.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/item/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceItemRequest(\n    commerceItem: new Shared\\CommerceItem(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->item->updateCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Application with the Unified PHP SDK\nDESCRIPTION: Demonstrates how to create a new application using the Unified PHP SDK's `createAtsApplication` method. The example showcases including the autoloader, defining the required namespaces, creating the SDK instance with the API key, building the request with application details and connection ID, and finally, calling the method. The response is checked for a non-null application and is then handled based on the returned result.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsApplicationRequest(\n    atsApplication: new Shared\\AtsApplication(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update LMS Course Example in PHP\nDESCRIPTION: This code demonstrates how to update an LMS course using the Unified PHP SDK. It initializes the SDK, creates a request object with the updated course details and connection ID, and then calls the `updateLmsCourse` method. The example requires the Unified PHP SDK to be installed via Composer and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/course/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsCourseRequest(\n    lmsCourse: new Shared\\LmsCourse(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->course->updateLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create HRIS Location using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a HRIS location using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the HRIS location details and connection ID, and then calls the `createHrisLocation` method. Error handling is done via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisLocationRequest(\n    hrisLocation: new Shared\\HrisLocation(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->createHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repository with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new repository using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `CreateRepoRepositoryRequest` and `RepoRepository` models for defining the request payload. The `name` parameter within the `RepoRepository` model specifies the name of the new repository to be created, and the `connectionId` parameter specifies the connection to use. Replace `<YOUR_API_KEY_HERE>` with your actual API key and `<id>` and `<value>` with appropriate values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repository/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoRepositoryRequest(\n    repoRepository: new Shared\\RepoRepository(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->repository->createRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a CRM Company with PHP\nDESCRIPTION: This snippet demonstrates how to update a CRM company using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object with the updated company data, connection ID, and company ID, and then calls the patchCrmCompany method. The response is then checked for the updated CRM company.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmCompanyRequest(\n    crmCompany: new Shared\\CrmCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Accounting Account using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `PatchAccountingAccountRequest` object with required parameters like `connectionId` and `id`, and then calls the `patchAccountingAccount` method on the `accounting` service.  The response is then checked to ensure it's not null. The snippet depends on the Unified.to PHP SDK being installed via Composer and requires an API key and valid IDs.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Account using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting account using the Unified API PHP SDK. It initializes the SDK, creates a request object, and calls the `updateAccountingAccount` method. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The API key must be set. It handles the response if the `accountingAccount` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/account/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->account->updateAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Location PHP\nDESCRIPTION: This code snippet illustrates how to update a commerce location using the Unified.to PHP SDK. It initializes the SDK, constructs an `UpdateCommerceLocationRequest` object, and calls the `updateCommerceLocation` method. The `name` property is set inside the `CommerceLocation` object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceLocationRequest(\n    commerceLocation: new Shared\\CommerceLocation(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->updateCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Transaction with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting transaction using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateAccountingTransactionRequest` object with the necessary parameters, and then calls the `updateAccountingTransaction` method. The response is then checked to handle success or failure. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingTransactionRequest(\n    accountingTransaction: new Shared\\AccountingTransaction(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Orders in PHP\nDESCRIPTION: This code snippet demonstrates how to list all accounting orders using the Unified.to PHP SDK. The SDK is configured with an API key, and a `ListAccountingOrdersRequest` object is created with the `connectionId`. The `listAccountingOrders` method is called on the `order` service, and the response containing the list of accounting orders is handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/order/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingOrdersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->order->listAccountingOrders(\n    request: $request\n);\n\nif ($response->accountingOrders !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Calendar Event in PHP\nDESCRIPTION: This code snippet demonstrates how to create a calendar event using the Unified.to PHP SDK. It initializes the SDK, creates a request object containing the event details such as start and end times and the event subject, and sends the request to create the event. The example also shows how to handle a successful response where the event is created.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCalendarEventRequest(\n    calendarEvent: new Shared\\CalendarEvent(\n        endAt: '<value>',\n        startAt: '<value>',\n        subject: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->createCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Integration Auth URL - Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an authorization URL for a specified integration using the Unified PHP SDK. It requires setting the API key as security and then building a request object with the integration type and workspace ID. The response contains the authorization URL, which can be used to initiate the authorization flow and create a new connection upon successful authorization.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedIntegrationAuthRequest(\n    integrationType: '<value>',\n    workspaceId: '<id>',\n);\n\n$response = $sdk->unified->getUnifiedIntegrationAuth(\n    request: $request\n);\n\nif ($response->res !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Marketing Member using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a marketing member using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a marketing member and connection ID, and calls the createMartechMember method. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMartechMemberRequest(\n    marketingMember: new Shared\\MarketingMember(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->martech->createMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unified API PHP SDK with Composer\nDESCRIPTION: This command installs the Unified API PHP SDK as a dependency using Composer.  It adds the unified/unified-to package to the project's composer.json file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require \"unified/unified-to\"\n```\n\n----------------------------------------\n\nTITLE: Get Payment Link PHP\nDESCRIPTION: This code snippet retrieves a specific payment link using the Unified.to PHP SDK. The `connectionId` and `id` are essential parameters for locating the payment link. The SDK is instantiated with an API key for secure access.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->getPaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Integration Auth URL in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve an authorization URL for a specific integration using the `getUnifiedIntegrationAuth` method. It initializes the Unified SDK, sets the API key, and creates a request object with the integration type and workspace ID. Upon successful authorization, a new connection is established.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/auth/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedIntegrationAuthRequest(\n    integrationType: '<value>',\n    workspaceId: '<id>',\n);\n\n$response = $sdk->auth->getUnifiedIntegrationAuth(\n    request: $request\n);\n\nif ($response->res !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a CRM Lead using Unified.to PHP SDK\nDESCRIPTION: This example updates a CRM lead partially using the patchCrmLead method in the Unified.to PHP SDK. It configures the SDK with credentials, sets up a request with connection ID, lead ID, and partial lead data, and then calls the patchCrmLead function. Finally, the updated lead data in the response is handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lead/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmLeadRequest(\n    crmLead: new Shared\\CrmLead(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lead->patchCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Order with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting order using the Unified.to PHP SDK.  It initializes the SDK, constructs a request with the necessary parameters (accounting order object and connection ID), and sends the request to the `createAccountingOrder` method. Finally, it handles the response to process the created accounting order, ensuring proper error handling via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingOrderRequest(\n    accountingOrder: new Shared\\AccountingOrder(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Invoice using Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting invoice using the Unified PHP SDK. It requires the `vendor/autoload.php` file and uses the `Unified_to` namespace. The example constructs a request object with necessary parameters and calls the `updateAccountingInvoice` method. An API key is required for authorization.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/invoice/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingInvoiceRequest(\n    accountingInvoice: new Shared\\AccountingInvoice(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->invoice->updateAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Calendar Calendar in PHP\nDESCRIPTION: This code snippet demonstrates how to update a calendar using the Unified API PHP SDK. It initializes the SDK, creates an `UpdateCalendarCalendarRequest` object with the updated calendar details and connection/calendar IDs, and then calls the `updateCalendarCalendar` method on the calendar service. The response is then checked to handle successful updates.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCalendarCalendarRequest(\n    calendarCalendar: new Shared\\CalendarCalendar(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->updateCalendarCalendar(\n    request: $request\n);\n\nif ($response->calendarCalendar !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Ticketing Ticket using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, sets the security key, creates a request object with the connection and ticket IDs, and calls the `getTicketingTicket` method. The snippet expects a connection ID and a ticket ID as parameters and handles the response if the ticketing ticket is successfully retrieved.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTicketingTicketRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->getTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update ATS Job with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to use the Unified PHP SDK to update an ATS job. It initializes the SDK with an API key, creates a request object with the necessary parameters (connection ID, job ID, and AtsJob object), and then calls the `updateAtsJob` method. The response is then checked for a valid AtsJob object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/job/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsJobRequest(\n    atsJob: new Shared\\AtsJob(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->job->updateAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Messaging Channel in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a messaging channel using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified_to` and `Models\\Operations` namespaces. The code initializes the SDK with an API key and creates a `GetMessagingChannelRequest` with a connection ID and an ID. The function returns an error if the messaging channel is null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMessagingChannelRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->messaging->getMessagingChannel(\n    request: $request\n);\n\nif ($response->messagingChannel !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accounting Invoice in PHP\nDESCRIPTION: This snippet retrieves an accounting invoice using its ID and connection ID with the Unified.to PHP SDK. It initializes the SDK with an API key, prepares a request containing the connection ID and invoice ID, and calls the getAccountingInvoice function. The result is a GetAccountingInvoiceResponse object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/invoice/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingInvoiceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->invoice->getAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Commerce Inventory in PHP\nDESCRIPTION: This snippet demonstrates how to create a commerce inventory using the Unified API's PHP SDK. It initializes the SDK, creates a `CreateCommerceInventoryRequest` with the available inventory count, and uses the `createCommerceInventory` method. It includes error handling by checking if the returned `commerceInventory` object is null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceInventoryRequest(\n    commerceInventory: new Shared\\CommerceInventory(\n        available: 5165.08,\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->createCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Messaging Message in PHP\nDESCRIPTION: This snippet demonstrates how to create a messaging message using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified_to`, `Models\\Operations`, and `Models\\Shared` namespaces. The code initializes the SDK with an API key and creates a `CreateMessagingMessageRequest` with a `MessagingMessage` object and a connection ID. The function returns an error if the messaging message is null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMessagingMessageRequest(\n    messagingMessage: new Shared\\MessagingMessage(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->messaging->createMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ATS Candidate in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific candidate from an Applicant Tracking System (ATS) using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary connection and candidate IDs, and then calls the `getAtsCandidate` method. The response is then checked to see if an `atsCandidate` exists and handles it accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsCandidateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update HRIS Employee with Unified.to PHP SDK\nDESCRIPTION: This snippet updates an employee using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK with an API key, creates a request object with the employee data and connection/employee IDs, and then sends the request to the `updateHrisEmployee` method. Finally, it handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisEmployeeRequest(\n    hrisEmployee: new Shared\\HrisEmployee(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->updateHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accounting Contact with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates retrieving an accounting contact using the Unified.to PHP SDK. It involves initializing the SDK with an API key, constructing a GetAccountingContactRequest object with the connection and contact IDs, sending the request, and subsequently handling the response. The `vendor/autoload.php` file must be included for dependency resolution.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Task Task Example in PHP\nDESCRIPTION: This code snippet demonstrates how to update a task itself using the Unified PHP SDK. It sets up the SDK with authentication, creates a request object with the task details to update (connectionId, id, and TaskTask data), and then sends the request to the `patchTaskTask` method of the `task` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTaskTaskRequest(\n    taskTask: new Shared\\TaskTask(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->patchTaskTask(\n    request: $request\n);\n\nif ($response->taskTask !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Repo Repository using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with repository details (including name), connection ID, and ID. Then it calls the `updateRepoRepository` method and handles the response. Requires `vendor/autoload.php`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoRepositoryRequest(\n    repoRepository: new Shared\\RepoRepository(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->updateRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Locations with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list commerce locations using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listCommerceLocations` method. The response is then handled to process the retrieved commerce locations. It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceLocationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->listCommerceLocations(\n    request: $request\n);\n\nif ($response->commerceLocations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Pipeline Example (PHP)\nDESCRIPTION: This code snippet demonstrates how to update a CRM pipeline using the Unified PHP SDK. It initializes the SDK, creates an `UpdateCrmPipelineRequest` object with the updated pipeline details, and calls the `updateCrmPipeline` method on the `crm` service. The code then checks if the `crmPipeline` property of the response is not null, indicating a successful update. The API key needs to be set in the SDK builder, and `connectionId` and `id` must be replaced with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmPipelineRequest(\n    crmPipeline: new Shared\\CrmPipeline(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->updateCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Deal using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a CRM deal using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetCrmDealRequest` object with the necessary parameters (connectionId and id), and then calls the `getCrmDeal` method. Finally, it checks if the response contains a CRM deal and handles the response accordingly. Requires 'vendor/autoload.php' for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmDealRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->getCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Instructors using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all LMS instructors using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listLmsInstructors` method. The response is then checked for LMS instructors, and if present, it includes a placeholder for handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsInstructorsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->listLmsInstructors(\n    request: $request\n);\n\nif ($response->lmsInstructors !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Integration Login URL in PHP\nDESCRIPTION: This code snippet shows how to obtain an authentication URL for a specific integration using the `getUnifiedIntegrationLogin` method.  Similar to the auth flow, it initializes the SDK, sets the API key, and constructs a request object. A successful authentication returns the user's name and email within a JWT parameter.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/auth/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedIntegrationLoginRequest(\n    integrationType: '<value>',\n    workspaceId: '<id>',\n);\n\n$response = $sdk->auth->getUnifiedIntegrationLogin(\n    request: $request\n);\n\nif ($response->res !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Martech Member with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a martech member using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing a `MarketingMember` object within a `CreateMartechMemberRequest`.  The `connectionId` must be provided to specify the connection. The response contains the created `MarketingMember` object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/member/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMartechMemberRequest(\n    marketingMember: new Shared\\MarketingMember(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->member->createMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create CRM Event with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a CRM event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a CRM event and connection ID, and then calls the createCrmEvent method. The response is then handled to process the created CRM event. It requires the Unified.to SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmEventRequest(\n    crmEvent: new Shared\\CrmEvent(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->event->createCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Pipeline using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a CRM pipeline using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and pipeline IDs, and then calls the `removeCrmPipeline` method. It includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmPipelineRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->removeCrmPipeline(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Event with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific CRM event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetCrmEventRequest` object with the necessary connection and event IDs, and then calls the `getCrmEvent` method on the `crm` service. The example includes basic error handling by checking if the `crmEvent` property of the response is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->getCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching CRM Pipeline with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a CRM pipeline using the Unified.to PHP SDK's patch method. It initializes the SDK, creates a request object with the connectionId, pipeline id, and CrmPipeline object, then calls the patchCrmPipeline method.  It requires the Unified.to PHP SDK and the 'vendor/autoload.php' file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pipeline/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmPipelineRequest(\n    crmPipeline: new Shared\\CrmPipeline(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pipeline->patchCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a unified connection by its ID using the Unified PHP SDK. It requires the `vendor/autoload.php` file and the `GetUnifiedConnectionRequest` model. It depends on the Unified PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/connection/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedConnectionRequest(\n    id: '<id>',\n);\n\n$response = $sdk->connection->getUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Employees with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list HRIS employees using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK, sets the API key, creates a `ListHrisEmployeesRequest` object, and calls the `listHrisEmployees` method on the `hris` object to retrieve the employee data. The `connectionId` parameter in the request specifies the ID of the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisEmployeesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisEmployees(\n    request: $request\n);\n\nif ($response->hrisEmployees !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Deal with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a CRM deal using the Unified.to PHP SDK. It initializes the SDK with an API key, creates an UpdateCrmDealRequest object with the required parameters (connectionId, id, crmDeal), and then calls the updateCrmDeal method on the CRM API. The snippet handles the response and includes error handling. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmDealRequest(\n    crmDeal: new Shared\\CrmDeal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->updateCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Metadatas with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all metadata entries for a given connectionId using the Unified.to PHP SDK. The code initializes the SDK with an API key, creates a request object with the connectionId, and calls the listMetadataMetadatas method. It expects the Unified.to PHP SDK to be installed and properly configured to function correctly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/metadata/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMetadataMetadatasRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->metadata->listMetadataMetadatas(\n    request: $request\n);\n\nif ($response->metadataMetadatas !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Event with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a CRM event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates an UpdateCrmEventRequest object with the required parameters (connectionId, id, crmEvent), and then calls the updateCrmEvent method on the CRM API. The snippet handles the response and includes error handling. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmEventRequest(\n    crmEvent: new Shared\\CrmEvent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->updateCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List CRM Deals with Unified.to in PHP\nDESCRIPTION: This snippet illustrates how to list all CRM deals using the Unified.to PHP SDK. The example showcases initializing the SDK with an API key, creating a `ListCrmDealsRequest` object which specifies the connection ID, and calling the `listCrmDeals` method. The code includes null check to determine successful retrieval.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmDealsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->listCrmDeals(\n    request: $request\n);\n\nif ($response->crmDeals !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LMS Course in PHP\nDESCRIPTION: This snippet demonstrates how to create a new LMS course using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK with an API key, constructs a `CreateLmsCourseRequest` object, and calls the `createLmsCourse` method on the `course` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/course/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsCourseRequest(\n    lmsCourse: new Shared\\LmsCourse(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->course->createLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching CRM Event using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a CRM event using the Unified PHP SDK. It initializes the SDK, sets the API key, and creates a request object with the necessary parameters (connectionId, id, and a CrmEvent object). It then calls the `patchCrmEvent` method to update the event. Requires the Unified PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmEventRequest(\n    crmEvent: new Shared\\CrmEvent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Contact using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a CRM contact using the Unified.to PHP SDK. It initializes the SDK, creates a request object including connection and contact IDs, and the `CrmContact` object for the update. The `updateCrmContact` method is then called to execute the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->updateCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LMS Course in PHP\nDESCRIPTION: This snippet demonstrates how to create a new course using the Unified.to PHP SDK. It initializes the SDK, creates a request object with course details (name), and sends the request to the createLmsCourse endpoint. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsCourseRequest(\n    lmsCourse: new Shared\\LmsCourse(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->createLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Payment - Unified.to PHP\nDESCRIPTION: This code snippet demonstrates updating a payment using the Unified.to PHP SDK. It initializes the SDK, creates a `PatchPaymentPaymentRequest`, and calls the `patchPaymentPayment` method. The response is handled if the `paymentPayment` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPaymentPaymentRequest(\n    paymentPayment: new Shared\\PaymentPayment(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->patchPaymentPayment(\n    request: $request\n);\n\nif ($response->paymentPayment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Project with Unified.to API (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a task project using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `CreateTaskProjectRequest` object, and then calls the `createTaskProject` method on the `task` service. The request includes the `connectionId` and a `TaskProject` object.  It requires the Unified PHP SDK installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTaskProjectRequest(\n    taskProject: new Shared\\TaskProject(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->task->createTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Jobs with Unified.to in PHP\nDESCRIPTION: This example demonstrates how to list all ATS jobs associated with a connection using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListAtsJobsRequest` object with the connection ID, calls the `listAtsJobs` method, and then handles the response by checking if an `atsJobs` object is returned.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/job/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsJobsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->job->listAtsJobs(\n    request: $request\n);\n\nif ($response->atsJobs !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch ATS Application in PHP\nDESCRIPTION: This snippet demonstrates how to update an ATS application by patching specific fields using the Unified.to PHP SDK.  It initializes the SDK with an API key, creates a request object containing the connection ID, application ID, and an `AtsApplication` object with the updated fields, and then calls the `patchAtsApplication` function.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/application/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsApplicationRequest(\n    atsApplication: new Shared\\AtsApplication(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->application->patchAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Accounts using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list accounting accounts using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listAccountingAccounts` method. The example handles a successful response where accounting accounts are returned.  It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingAccountsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingAccounts(\n    request: $request\n);\n\nif ($response->accountingAccounts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Payment Payment in PHP\nDESCRIPTION: This snippet demonstrates how to create a payment using the Unified.to PHP SDK.  It requires setting up the SDK with an API key and providing a connection ID and a PaymentPayment object within the request.  The response contains the created payment or an error.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePaymentPaymentRequest(\n    paymentPayment: new Shared\\PaymentPayment(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->createPaymentPayment(\n    request: $request\n);\n\nif ($response->paymentPayment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Employees with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all employees using the Unified.to PHP SDK. It initializes the SDK, constructs a `ListHrisEmployeesRequest` with the `connectionId`, and calls the `listHrisEmployees` method. It relies on the `vendor/autoload.php` file and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/employee/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisEmployeesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->employee->listHrisEmployees(\n    request: $request\n);\n\nif ($response->hrisEmployees !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Commerce Item in PHP\nDESCRIPTION: This code snippet demonstrates how to create a commerce item using the Unified PHP SDK. It requires the `vendor/autoload.php` file for dependency management and uses the `Unified_to`, `Unified_to\\Models\\Operations`, and `Unified_to\\Models\\Shared` namespaces. The snippet initializes the SDK with an API key, constructs a `CreateCommerceItemRequest` object with the necessary parameters (`commerceItem` and `connectionId`), and then calls the `createCommerceItem` method on the `item` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/item/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceItemRequest(\n    commerceItem: new Shared\\CommerceItem(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->item->createCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Pipelines with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all CRM pipelines using the Unified.to PHP SDK.  It initializes the SDK, creates a request object with the connectionId, and then calls the listCrmPipelines method. It requires the Unified.to PHP SDK and the 'vendor/autoload.php' file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pipeline/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmPipelinesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->pipeline->listCrmPipelines(\n    request: $request\n);\n\nif ($response->crmPipelines !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update HRIS Company in PHP\nDESCRIPTION: This code snippet demonstrates how to update an HRIS company using the Unified API PHP SDK. It requires the `unified-php-sdk` library and uses the `UpdateHrisCompany` method. It initializes the SDK with an API key, constructs the request object with the necessary parameters, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisCompanyRequest(\n    hrisCompany: new Shared\\HrisCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->updateHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Martech List with Unified.to in PHP\nDESCRIPTION: This code snippet shows how to update a marketing list using the Unified.to PHP SDK. It initializes the SDK with an API key and creates an `UpdateMartechListRequest` object. The request includes a `MarketingList` object and the `connectionId` and `id` of the list to be updated. The code then checks if the `marketingList` property is not null to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMartechListRequest(\n    marketingList: new Shared\\MarketingList(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->updateMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Commerce Location PHP\nDESCRIPTION: This code snippet demonstrates how to remove a commerce location using the Unified PHP SDK. The SDK is initialized with an API key, a request object is created with connection and location IDs, and the removeCommerceLocation method is called. The code checks for a successful response (status code 200) to handle the removal. Requires 'vendor/autoload.php'.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->removeCommerceLocation(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unified Connection in PHP\nDESCRIPTION: This code snippet shows how to remove a connection using the Unified API PHP SDK.  It initializes the SDK, creates a request object with the connection ID, and calls the `removeUnifiedConnection` method. The example validates for a 200 status code to determine operation success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveUnifiedConnectionRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->removeUnifiedConnection(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LMS Class in PHP\nDESCRIPTION: This snippet demonstrates how to create a new class using the Unified.to PHP SDK. It initializes the SDK, creates a request object with class details (course ID and name), and sends the request to the createLmsClass endpoint. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsClassRequest(\n    lmsClass: new Shared\\LmsClass(\n        courseId: '<id>',\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->createLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Transactions in PHP\nDESCRIPTION: This code snippet demonstrates how to list accounting transactions using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and calls the `listAccountingTransactions` function to retrieve the transactions.  It requires the Unified PHP SDK installed and the `vendor/autoload.php` file included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingTransactionsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingTransactions(\n    request: $request\n);\n\nif ($response->accountingTransactions !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Unified Integration Login URL in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve an authentication URL for a specified integration using the Unified PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. The snippet creates a `UnifiedTo` SDK instance, sets the API key, constructs a `GetUnifiedIntegrationLoginRequest` object with the integration type and workspace ID, and then calls the `getUnifiedIntegrationLogin` method on the login resource.  It then handles the response, checking for a non-null result.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/login/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedIntegrationLoginRequest(\n    integrationType: '<value>',\n    workspaceId: '<id>',\n);\n\n$response = $sdk->login->getUnifiedIntegrationLogin(\n    request: $request\n);\n\nif ($response->res !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Items with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list commerce items using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listCommerceItems` method. The response is then handled to process the retrieved commerce items. It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceItemsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->listCommerceItems(\n    request: $request\n);\n\nif ($response->commerceItems !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Document in PHP\nDESCRIPTION: This PHP snippet demonstrates how to update an ATS document using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and the AtsDocument object), and calls the `patchAtsDocument` method. The response is then checked, and you can handle the response if the atsDocument property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Transaction with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an existing accounting transaction using a patch request with the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID, transaction ID, and the updated transaction data, and calls `patchAccountingTransaction`. It requires the Unified.to PHP SDK to be installed via composer. The code partially updates an existing AccountingTransaction.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/transaction/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingTransactionRequest(\n    accountingTransaction: new Shared\\AccountingTransaction(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->transaction->patchAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Employee using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a HRIS employee using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and employee ID, and then calls the `getHrisEmployee` method. Error handling is done via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisEmployeeRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a KMS comment using the Unified.to PHP SDK. It initializes the SDK, creates a `UpdateKmsCommentRequest` object containing the updated `KmsComment`, connection ID, and comment ID. The `updateKmsComment` method is then called, and the response is checked for a non-null `kmsComment` to handle the success case.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        content: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->updateKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Unified.to Webhook by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve an existing webhook by its ID using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetUnifiedWebhookRequest` object with the webhook ID, and then calls the `getUnifiedWebhook` method. The snippet also showcases how to handle the response and includes basic error checking.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedWebhookRequest(\n    id: '<id>',\n);\n\n$response = $sdk->webhook->getUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Details with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a payment using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID and payment ID, and then calls the `getPaymentPayment` method. The response is then handled if the payment is found.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentPaymentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->getPaymentPayment(\n    request: $request\n);\n\nif ($response->paymentPayment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Activity with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new ATS activity using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object with activity details and a connection ID, then calls the `createAtsActivity` method. The response is then handled to process the created activity. Ensure `vendor/autoload.php` is properly set up for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/activity/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsActivityRequest(\n    atsActivity: new Shared\\AtsActivity(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->activity->createAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Unified.to Webhook in PHP\nDESCRIPTION: This code snippet demonstrates how to update an existing webhook subscription using the Unified.to PHP SDK's PATCH operation. It initializes the SDK, creates a `PatchUnifiedWebhookRequest` object with the updated webhook parameters (connection ID, event, and object type), and the ID of the webhook to patch.  The code then calls the `patchUnifiedWebhook` method and shows how to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedWebhookRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Deleted,\n        objectType: Shared\\ObjectType::CrmLead,\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->webhook->patchUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Task Projects using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all projects associated with tasks using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listTaskProjects` method. The response, which contains a list of task projects, is then handled inside an if statement.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTaskProjectsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->task->listTaskProjects(\n    request: $request\n);\n\nif ($response->taskProjects !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Organizations with Unified.to PHP SDK\nDESCRIPTION: This code snippet lists all accounting organizations using the Unified.to PHP SDK. It configures the SDK with an API key, creates a request object with the connection ID, and calls the `listAccountingOrganizations` method. The code then checks if the response contains accounting organizations to handle.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingOrganizationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->organization->listAccountingOrganizations(\n    request: $request\n);\n\nif ($response->accountingOrganizations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Locations with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list HRIS locations using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK, sets the API key, creates a `ListHrisLocationsRequest` object, and calls the `listHrisLocations` method on the `hris` object to retrieve the location data. The `connectionId` parameter in the request specifies the ID of the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisLocationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisLocations(\n    request: $request\n);\n\nif ($response->hrisLocations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Task Tasks using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all tasks using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listTaskTasks` method.  The result is then handled within an if statement.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTaskTasksRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->task->listTaskTasks(\n    request: $request\n);\n\nif ($response->taskTasks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Scorecard in PHP\nDESCRIPTION: This PHP snippet demonstrates how to update an ATS scorecard using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and the AtsScorecard object), and calls the `patchAtsScorecard` method. The response is then checked, and you can handle the response if the atsScorecard property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsScorecardRequest(\n    atsScorecard: new Shared\\AtsScorecard(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UC Contact using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a UC contact using the Unified.to PHP SDK. It initializes the SDK, creates a request object including connection and contact IDs, and the `UcContact` object for the update. The `updateUcContact` method is then called to execute the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUcContactRequest(\n    ucContact: new Shared\\UcContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->updateUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Account with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Unified PHP SDK, create a request object to create an accounting account, and handle the API response. It requires the `vendor/autoload.php` file to be present for autoloader and depends on the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The API key and connection ID need to be provided.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/USAGE.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Task Comment in PHP\nDESCRIPTION: This code snippet demonstrates how to update a task comment using the Unified API PHP SDK. It initializes the SDK, constructs a request object with the necessary parameters (taskComment, connectionId, and id), and then calls the `updateTaskComment` method on the `task` service. The response is then checked for a valid `taskComment` object to handle the updated comment data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(\n        taskId: '<id>',\n        text: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->updateTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Transaction with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific accounting transaction using its ID with the Unified.to PHP SDK. It initializes the SDK, creates a request object including the connection ID and the transaction ID, and then calls the `getAccountingTransaction` method.  It requires the Unified.to PHP SDK to be installed via composer. The code retrieves a specific AccountingTransaction identified by 'id'.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/transaction/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingTransactionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->transaction->getAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Student with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve a student by ID using the Unified.to PHP SDK. It requires `vendor/autoload.php` and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK, sets up a request object with the connectionId and the student's ID, and calls the `getLmsStudent` method. An API key is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/student/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsStudentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->student->getLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Integration Workspaces - Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list integration workspaces using the Unified PHP SDK.  It initializes the SDK with an API key, creates a request object specifying the workspace ID, and retrieves a list of integrations for the specified workspace. This operation does not require authentication.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedIntegrationWorkspacesRequest(\n    workspaceId: '<id>',\n);\n\n$response = $sdk->unified->listUnifiedIntegrationWorkspaces(\n    request: $request\n);\n\nif ($response->integrations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATS Activity with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve an existing ATS activity using the Unified.to PHP SDK. It initializes the SDK with an API key and creates a `GetAtsActivityRequest` object with the connection ID and activity ID. The `getAtsActivity` method is then called, and the response containing the activity details is processed. The example depends on autoloading from `vendor/autoload.php`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/activity/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsActivityRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->activity->getAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Contact Example PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific CRM contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a GetCrmContactRequest object with connection and contact IDs, calls the getCrmContact method, and handles the response. The snippet requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->getCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Students with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all students using the Unified.to PHP SDK. It requires `vendor/autoload.php` for dependency loading and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The SDK is initialized, a request object is created with the connectionId, and the `listLmsStudents` method is called. An API key is needed for the security context.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/student/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsStudentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->student->listLmsStudents(\n    request: $request\n);\n\nif ($response->lmsStudents !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Payment Subscription in PHP\nDESCRIPTION: This snippet demonstrates how to create a subscription using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing a connection ID and a PaymentSubscription object within the request. The response contains the created subscription or an error.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePaymentSubscriptionRequest(\n    paymentSubscription: new Shared\\PaymentSubscription(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->createPaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Taxrate with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting taxrate using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateAccountingTaxrateRequest` object with the necessary parameters, and then calls the `updateAccountingTaxrate` method. The response is then checked to handle success or failure. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingTaxrateRequest(\n    accountingTaxrate: new Shared\\AccountingTaxrate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Calendar in PHP\nDESCRIPTION: This code snippet demonstrates how to create a calendar using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary calendar details, and sends the request to create the calendar. The example shows how to handle a successful response where the calendar is created.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCalendarCalendarRequest(\n    calendarCalendar: new Shared\\CalendarCalendar(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->createCalendarCalendar(\n    request: $request\n);\n\nif ($response->calendarCalendar !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Accounting Invoice in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting invoice using the Unified.to PHP SDK. It requires the Unified.to SDK, specifying the API key, and providing a connection ID along with invoice data. The function returns a CreateAccountingInvoiceResponse object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/invoice/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingInvoiceRequest(\n    accountingInvoice: new Shared\\AccountingInvoice(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->invoice->createAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Leads using Unified.to PHP SDK\nDESCRIPTION: This code retrieves a list of CRM leads using the Unified.to PHP SDK. It initializes the SDK with API key, defines the request with the connection ID, and executes the listCrmLeads method. The response containing the list of leads is then processed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lead/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmLeadsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->lead->listCrmLeads(\n    request: $request\n);\n\nif ($response->crmLeads !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a CRM Contact with PHP\nDESCRIPTION: This snippet demonstrates how to update a CRM contact using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object with the updated contact data, connection ID, and contact ID, and then calls the patchCrmContact method. The response is then checked for the updated CRM contact.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Journal with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting journal using the Unified.to PHP SDK. It initializes the SDK, constructs a request with the necessary parameters (accounting journal object and connection ID), and sends the request to the `createAccountingJournal` method. Finally, it handles the response to process the created accounting journal, ensuring proper error handling via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Order in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve an accounting order using the Unified.to PHP SDK. It sets up the SDK with an API key and constructs a `GetAccountingOrderRequest` object with the `connectionId` and `id` of the order to retrieve. The `getAccountingOrder` method is called on the `order` service, and the response is handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/order/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingOrderRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->order->getAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Journals using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list accounting journals using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listAccountingJournals` method. The example handles a successful response where accounting journals are returned. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingJournalsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingJournals(\n    request: $request\n);\n\nif ($response->accountingJournals !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Martech Members with Unified API in PHP\nDESCRIPTION: This snippet shows how to list Martech members using the Unified API PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK, sets up the request object, and then calls the `listMartechMembers` method on the `martech` service.  It then handles the response based on the returned marketing members.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMartechMembersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->martech->listMartechMembers(\n    request: $request\n);\n\nif ($response->marketingMembers !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a KMS comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the comment content and connection ID, and then calls the `createKmsComment` method. The example requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        content: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->comment->createKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a KMS comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with comment content and connection ID, and then calls the createKmsComment method. It requires the Unified.to PHP SDK to be installed and configured with your API key. The expected output is a KMS comment object if the operation is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        content: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->kms->createKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accounting Order with Unified.to PHP SDK\nDESCRIPTION: This snippet outlines how to retrieve an accounting order using the Unified.to PHP SDK. It begins by initializing the SDK with an API key, then constructs a GetAccountingOrderRequest object using the connection and order IDs, sends the request, and subsequently processes the response. The `vendor/autoload.php` file is required for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingOrderRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Inventory with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a commerce inventory using the Unified PHP SDK. It initializes the SDK, sets the API key, constructs a request object with connection and inventory IDs, and calls the getCommerceInventory method. The retrieved inventory data is then handled in the response block.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceInventoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->getCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Refund Details with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a refund using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID and refund ID, and then calls the `getPaymentRefund` method. The response is then handled if the refund is found.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentRefundRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->getPaymentRefund(\n    request: $request\n);\n\nif ($response->paymentRefund !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Scorecard with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create an ATS Scorecard using the Unified API PHP SDK. It initializes the SDK, sets the security context, creates a request object with necessary parameters (connectionId, atsScorecard), and then calls the createAtsScorecard method. The response is handled by checking if the created atsScorecard is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsScorecardRequest(\n    atsScorecard: new Shared\\AtsScorecard(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LmsClass with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an LMS class using the Unified.to PHP SDK. It initializes the SDK, sets the API key, constructs a `CreateLmsClassRequest` object with the necessary parameters (including a `LmsClass` object with courseId and name), and calls the `createLmsClass` method on the `class` service. The response is then handled within the conditional block.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/class/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsClassRequest(\n    lmsClass: new Shared\\LmsClass(\n        courseId: '<id>',\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->class->createLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Martech List with Unified API in PHP\nDESCRIPTION: This snippet illustrates how to update (patch) a Martech list using the Unified API PHP SDK. It requires a `MarketingList` object to be instantiated with the desired updates.  It initializes the SDK, sets up the request object with the marketing list and IDs, and then calls the `patchMartechList` method on the `martech` service.  The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMartechListRequest(\n    marketingList: new Shared\\MarketingList(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->patchMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Storage Files with Unified.to PHP SDK\nDESCRIPTION: This snippet showcases how to retrieve a list of storage files using the Unified.to PHP SDK. It requires autoloading via `vendor/autoload.php`. A `ListStorageFilesRequest` is created with the `connectionId`. The security context is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/file/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListStorageFilesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->file->listStorageFiles(\n    request: $request\n);\n\nif ($response->storageFiles !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Payments with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list payment payments using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object, calls the `listPaymentPayments` method, and handles the response. The required dependency is the Unified.to PHP SDK, installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentPaymentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->listPaymentPayments(\n    request: $request\n);\n\nif ($response->paymentPayments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Application with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS application using the Unified.to PHP SDK. It initializes the SDK, creates a request object containing the application data, connection ID, and application ID. The code then calls the `patchAtsApplication` method to perform the update.  The snippet requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. Replace `<YOUR_API_KEY_HERE>` and `<id>` with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsApplicationRequest(\n    atsApplication: new Shared\\AtsApplication(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Company with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a CRM company using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connectionId and the ID of the desired company, and calls the getCrmCompany method. The response is then handled to access the retrieved CRM company data. Requires `vendor/autoload.php` and uses `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->getCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Commerce Inventory with Unified.to in PHP\nDESCRIPTION: This code snippet shows how to retrieve an existing commerce inventory record using the Unified.to PHP SDK. It depends on `vendor/autoload.php` and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The SDK is initialized with an API key, and a `GetCommerceInventoryRequest` object is created, specifying the `connectionId` and the `id` of the inventory to retrieve. The `getCommerceInventory` method on the `inventory` service is then called to fetch the inventory record.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/inventory/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceInventoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->inventory->getCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Accounting Invoice in PHP\nDESCRIPTION: This snippet shows how to remove an accounting invoice using the Unified.to PHP SDK. It initializes the SDK, creates a request with the connection ID and invoice ID, and then calls the removeAccountingInvoice method. A successful removal is indicated by a status code of 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/invoice/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingInvoiceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->invoice->removeAccountingInvoice(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Ticketing Ticket in PHP\nDESCRIPTION: This snippet shows how to retrieve a specific ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then retrieves a ticket by its ID using the `getTicketingTicket` method. It requires the `Unified/Unified_to` and `Unified/Unified_to/Models/Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticket/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTicketingTicketRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticket->getTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Subscriptions with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list payment subscriptions using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object, calls the `listPaymentSubscriptions` method, and handles the response. The required dependency is the Unified.to PHP SDK, installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentSubscriptionsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->listPaymentSubscriptions(\n    request: $request\n);\n\nif ($response->paymentSubscriptions !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Repo Pullrequest using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository pull request using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with pull request details, connection ID, and ID. Then it calls `updateRepoPullrequest` method and handles the response. Requires `vendor/autoload.php`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoPullrequestRequest(\n    repoPullrequest: new Shared\\RepoPullrequest(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->updateRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Calendar Events with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to list all calendar events using the Unified API and PHP SDK. It initializes the SDK, sets the security credentials, and calls the `listCalendarEvents` method with a request object containing the connection ID. It requires the `vendor/autoload.php` file and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarEventsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->listCalendarEvents(\n    request: $request\n);\n\nif ($response->calendarEvents !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Commerce Inventory with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to update a commerce inventory record using a PATCH request with the Unified.to PHP SDK. It relies on `vendor/autoload.php` for dependency management and utilizes the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The SDK is initialized with an API key, and a `PatchCommerceInventoryRequest` object is constructed, containing the partial inventory data to update (`available`), the `connectionId`, and the inventory `id`. The `patchCommerceInventory` method on the `inventory` service is then invoked with the request object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/inventory/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceInventoryRequest(\n    commerceInventory: new Shared\\CommerceInventory(\n        available: 615.23,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->inventory->patchCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Activities with Unified.to PHP SDK\nDESCRIPTION: This snippet explains how to list all ATS activities associated with a connection using the Unified.to PHP SDK.  It initializes the SDK with an API key and creates a `ListAtsActivitiesRequest` object with a connection ID. The `listAtsActivities` method retrieves a list of activities, which can then be processed. Ensure that `vendor/autoload.php` is included for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/activity/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsActivitiesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->activity->listAtsActivities(\n    request: $request\n);\n\nif ($response->atsActivities !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Martech Member with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates updating a marketing member using the Unified.to PHP SDK. It initializes the SDK using an API key and creates an `UpdateMartechMemberRequest` object. The request includes a `MarketingMember` object along with the `connectionId` and `id` of the member to be updated. The response is then handled by checking if the `marketingMember` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMartechMemberRequest(\n    marketingMember: new Shared\\MarketingMember(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->updateMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new student using the Unified.to PHP SDK. It requires the `vendor/autoload.php` for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The code initializes the SDK, sets up a request object with the necessary parameters (connectionId and LmsStudent object), and then calls the `createLmsStudent` method. An API key is needed for authentication.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/student/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsStudentRequest(\n    lmsStudent: new Shared\\LmsStudent(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->student->createLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Transaction with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting transaction using the Unified.to PHP SDK. It initializes the SDK, constructs a request with the necessary parameters (accounting transaction object and connection ID), and sends the request to the `createAccountingTransaction` method. Finally, it handles the response to process the created accounting transaction, ensuring proper error handling via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingTransactionRequest(\n    accountingTransaction: new Shared\\AccountingTransaction(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Invoice with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to remove an accounting invoice using the Unified.to PHP SDK.  It initializes the SDK with an API key, creates a request with connection and invoice IDs, and calls `removeAccountingInvoice`.  The success case (status code 200) is handled with a placeholder comment. Requires the Unified.to PHP SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingInvoiceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingInvoice(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Invoices using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list accounting invoices using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listAccountingInvoices` method. The example handles a successful response where accounting invoices are returned. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingInvoicesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingInvoices(\n    request: $request\n);\n\nif ($response->accountingInvoices !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create CRM Lead using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a CRM lead using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `CreateCrmLeadRequest` object with the necessary parameters (crmLead and connectionId), and then calls the `createCrmLead` method. Finally, it checks if the response contains a CRM lead and handles the response accordingly. Requires 'vendor/autoload.php' for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmLeadRequest(\n    crmLead: new Shared\\CrmLead(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->createCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Location with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a commerce location using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with connection and location IDs, and calls the getCommerceLocation method. It then handles the response and processes the location data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->getCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticketing Customer in PHP\nDESCRIPTION: This snippet demonstrates how to create a ticketing customer using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. An API key is required for authentication. The `connectionId` is used to specify the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTicketingCustomerRequest(\n    ticketingCustomer: new Shared\\TicketingCustomer(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticketing->createTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Uc Contact with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a contact using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then calls the getUcContact method with a request object containing the connection ID and contact ID. It requires the Unified_to SDK and the Models/Operations namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUcContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->uc->getUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List API Calls - Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all API calls using the Unified PHP SDK. It initializes the SDK with an API key and then makes a request to list the API calls. The response contains a list of API calls, which can be used for monitoring and debugging purposes.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedApicallsRequest();\n\n$response = $sdk->unified->listUnifiedApicalls(\n    request: $request\n);\n\nif ($response->apiCalls !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Task Comment Example in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a task comment using the Unified PHP SDK. The SDK is initialized with API key security, and a request is created with the connectionId and ID of the comment to be removed. The `removeTaskComment` method of the `task` service is then called.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTaskCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->removeTaskComment(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Accounting Journal using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to patch an accounting journal using the Unified.to PHP SDK. It initializes the SDK using an API key, constructs a `PatchAccountingJournalRequest` object with `connectionId` and `id`, and calls `patchAccountingJournal`. The snippet depends on the Unified.to PHP SDK installed via Composer, along with a valid API key and resource IDs. It checks the response to ensure it's valid.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Integrations with PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all integrations using the PHP SDK. It involves setting up the SDK with an API key and making a request to the `listUnifiedIntegrations` endpoint. The response includes a list of all available integrations.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/integration/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedIntegrationsRequest();\n\n$response = $sdk->integration->listUnifiedIntegrations(\n    request: $request\n);\n\nif ($response->integrations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Class using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an LMS class using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the LMS class data and connection ID and id, and calls the `patchLmsClass` method. The response is then checked for the updated LMS class, and if present, it includes a placeholder for handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsClassRequest(\n    lmsClass: new Shared\\LmsClass(\n        courseId: '<id>',\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->patchLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Calendar Link with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a calendar link using the Unified API PHP SDK. It initializes the SDK, constructs a `PatchCalendarLinkRequest` object with the required parameters, including the `connectionId`, `id`, and the `CalendarLink` object to be updated. The `patchCalendarLink` method is then called to perform the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCalendarLinkRequest(\n    calendarLink: new Shared\\CalendarLink(\n        url: 'https://curly-skyline.biz/',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->patchCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Device using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS device using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveHrisDeviceRequest` object with the connection ID and device ID, and then calls the `removeHrisDevice` method on the HRIS API.  Error handling checks for a successful status code of 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisDeviceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->removeHrisDevice(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Calendar Event with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a calendar event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with calendar event details and a connection ID, and then calls the createCalendarEvent method. The response is then handled to process the created calendar event. It requires the Unified.to SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCalendarEventRequest(\n    calendarEvent: new Shared\\CalendarEvent(\n        endAt: '<value>',\n        startAt: '<value>',\n        subject: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->event->createCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Lead with Unified.to in PHP\nDESCRIPTION: This snippet shows how to retrieve a specific CRM lead using the Unified.to PHP SDK. It initializes the SDK with API key, creates a `GetCrmLeadRequest` object with connection and lead IDs, and calls the `getCrmLead` method on the `crm` service.  The code includes basic response handling.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmLeadRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->getCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CRM Pipeline with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a CRM pipeline using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connectionId and pipeline id, and then calls the removeCrmPipeline method. It requires the Unified.to PHP SDK and the 'vendor/autoload.php' file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pipeline/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmPipelineRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pipeline->removeCrmPipeline(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Ticketing Note using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to update a ticketing note using the PATCH method via the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and the `Unified\\Unified_to` namespace. An API key is needed for authentication, and the request object should include the connectionId, the ID of the note to update, and the TicketingNote with the updated properties.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/note/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTicketingNoteRequest(\n    ticketingNote: new Shared\\TicketingNote(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->note->patchTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Links with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to list payment links using the Unified API PHP SDK. It initializes the SDK with an API key, constructs a request object with the connection ID, and calls the `listPaymentLinks` method. The response is then handled to process the list of payment links.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentLinksRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->link->listPaymentLinks(\n    request: $request\n);\n\nif ($response->paymentLinks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Repository with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a repository using the Unified.to PHP SDK. It requires `vendor/autoload.php` for dependency autoloading and employs the `RemoveRepoRepositoryRequest` model for the request definition. The `connectionId` and `id` parameters specify the connection and repository ID to be removed. Replace `<YOUR_API_KEY_HERE>` with your actual API key and `<id>` with appropriate IDs.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repository/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoRepositoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repository->removeRepoRepository(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a CRM Deal with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve a specific CRM deal by ID using the Unified.to PHP SDK. The code initializes the SDK with the API key, creates a GetCrmDealRequest object with the connection ID and deal ID, and then calls the getCrmDeal method. It requires the Unified.to PHP SDK. Parameters include connectionId and the id of the deal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/deal/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmDealRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->deal->getCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Messaging Message in PHP\nDESCRIPTION: Demonstrates how to remove a messaging message using the Unified.to PHP SDK. This example shows how to initialize the SDK, create a request object with the connection ID and the message ID to be removed, and call the `removeMessagingMessage` method. The example includes checking the status code to verify successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/message/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMessagingMessageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->message->removeMessagingMessage(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch KMS Comment using Unified.to PHP SDK\nDESCRIPTION: This snippet details how to update a specific KMS comment using the Unified.to PHP SDK. It starts by initializing the SDK and setting security credentials, followed by creating both a KMS comment object (with updated content) and a request object that includes the comment, connection ID, and comment ID. Finally, it calls the `patchKmsComment` method and verifies the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        content: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->patchKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Commerce Inventory PHP\nDESCRIPTION: This snippet demonstrates removing a commerce inventory using the Unified PHP SDK. It initializes the SDK, constructs a request object specifying the connection and inventory IDs, and invokes the removeCommerceInventory method. A successful status code (200) triggers response handling. The snippet requires the autoloader for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceInventoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->removeCommerceInventory(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Pipeline with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a CRM pipeline using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connectionId and pipeline id, and calls the getCrmPipeline method. It requires the Unified.to PHP SDK and the 'vendor/autoload.php' file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pipeline/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmPipelineRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pipeline->getCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove LMS Class using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an LMS class using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and class ID, sends the request to the `removeLmsClass` method, and handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsClassRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->removeLmsClass(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Storage File with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a storage file using the Unified PHP SDK. It initializes the SDK, creates a request object with required parameters (connectionId, id, storageFile) and then calls the `updateStorageFile` method on the storage client. The response, containing the updated storage file, is then handled within a conditional block.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/storage/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateStorageFileRequest(\n    storageFile: new Shared\\StorageFile(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->storage->updateStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Inventory using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a commerce inventory using the Unified API's PHP SDK. It initializes the SDK, creates a request object with the necessary parameters, including the available quantity, connectionId, and id, and then calls the `patchCommerceInventory` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceInventoryRequest(\n    commerceInventory: new Shared\\CommerceInventory(\n        available: 615.23,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->patchCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Accounting Transaction using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an accounting transaction using the Unified.to PHP SDK. It includes setting up the SDK, creating a request object, and handling the response. The API key should be replaced with an actual value for the code to function correctly. `vendor/autoload.php` must exist and be set up with the necessary dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingTransactionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Journal using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an accounting journal using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.  The `connectionId` and `accountingJournal` are required parameters within the request object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/journal/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->journal->createAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List ATS Applications Example in PHP\nDESCRIPTION: This snippet demonstrates how to list all applications from an ATS using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListAtsApplicationsRequest` object with the connection ID, and then calls the `listAtsApplications` method. The response is then checked for an array of applications and handled accordingly. Requires the `vendor/autoload.php` for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsApplicationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsApplications(\n    request: $request\n);\n\nif ($response->atsApplications !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Repo PullRequest with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a repository pull request using the Unified.to PHP SDK. It initializes the SDK, sets up the request with connection ID and pull request ID, and then calls the `removeRepoPullrequest` method. The example handles potential responses based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pullrequest/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoPullrequestRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pullrequest->removeRepoPullrequest(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ticketing Customer with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a ticketing customer using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (ticketingCustomer, connectionId, and id), and then calls the updateTicketingCustomer function.  It includes response handling by checking if ticketingCustomer is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTicketingCustomerRequest(\n    ticketingCustomer: new Shared\\TicketingCustomer(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->updateTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Ticketing Ticket with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a ticketing ticket using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and the updated ticket data), and then calls the `updateTicketingTicket` method on the `ticket` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticket/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTicketingTicketRequest(\n    ticketingTicket: new Shared\\TicketingTicket(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticket->updateTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Scorecard with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an ATS scorecard using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request to remove a scorecard using the connection and scorecard IDs, makes the API call, and handles the response based on the status code.  Dependencies include the Unified.to PHP SDK and autoload.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsScorecardRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsScorecard(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Links with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to list payment links using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID, and then calls the `listPaymentLinks` method. The response is then handled if the payment links are found.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentLinksRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->listPaymentLinks(\n    request: $request\n);\n\nif ($response->paymentLinks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Ticketing Customer in PHP\nDESCRIPTION: This snippet shows how to retrieve a specific ticketing customer using the Unified.to PHP SDK. It requires the `vendor/autoload.php` for autoloading, and utilizes the `Unified_to` and `Operations` namespaces. It initializes the SDK, sets the API key, creates a `GetTicketingCustomerRequest` object with the connection ID and customer ID, and calls the `getTicketingCustomer` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/customer/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTicketingCustomerRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->customer->getTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Accounting Contact Example in PHP\nDESCRIPTION: This snippet demonstrates how to update an accounting contact using the Unified.to PHP SDK. It requires the Unified_to library, including the Models\\Operations and Models\\Shared namespaces. It initializes the SDK, creates a request object with contact details and IDs, and then calls the patchAccountingContact method. An API key is needed for authentication.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingContactRequest(\n    accountingContact: new Shared\\AccountingContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->patchAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Item with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates retrieving a commerce item using the Unified PHP SDK. It sets up the SDK with an API key, creates a request object with connection and item IDs, and then calls the getCommerceItem method. The code handles the response to process the item data if it exists.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceItemRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->getCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accounting Journal with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates retrieving an accounting journal using the Unified.to PHP SDK. The process involves initializing the SDK with an API key, creating a GetAccountingJournalRequest object specifying the connection and journal IDs, dispatching the request, and handling the response. Ensure that the `vendor/autoload.php` file is included to resolve dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingJournalRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing KMS Comments with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list KMS comments using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID, and then calls the `listKmsComments` method. The example requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListKmsCommentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->comment->listKmsComments(\n    request: $request\n);\n\nif ($response->kmsComments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Journal with Unified PHP SDK\nDESCRIPTION: This code demonstrates how to update an accounting journal using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connection ID, journal ID, and journal data), and then calls the `updateAccountingJournal` method. The response is then handled within the conditional block.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/journal/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->journal->updateAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Interview in PHP\nDESCRIPTION: This PHP snippet demonstrates how to update an ATS interview using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and the AtsInterview object), and calls the `patchAtsInterview` method. The response is then checked, and you can handle the response if the atsInterview property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsInterviewRequest(\n    atsInterview: new Shared\\AtsInterview(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Metadata using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update metadata using the Unified API PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (metadata, connectionId, and id), and then calls the `updateMetadataMetadata` function.  The response is then checked for a valid `metadataMetadata` object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/metadata/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMetadataMetadataRequest(\n    metadataMetadata: new Shared\\MetadataMetadata(\n        name: '<value>',\n        objectType: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->metadata->updateMetadataMetadata(\n    request: $request\n);\n\nif ($response->metadataMetadata !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Marketing List using PHP SDK\nDESCRIPTION: This code snippet shows how to retrieve a marketing list using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID and an ID, and calls the getMartechList method. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMartechListRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->getMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get ATS Job Example in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific job from an ATS using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetAtsJobRequest` object with the connection ID and job ID, and then calls the `getAtsJob` method. The response is then checked for a job object and handled accordingly. Requires the `vendor/autoload.php` for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsJobRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Calendar Event with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to remove a calendar event using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID and the event ID. The `removeCalendarEvent` method is then called, and the response status code is checked. If the status code is 200, it indicates success, and the response is handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCalendarEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->removeCalendarEvent(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Martech Member with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to partially update a martech member using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing a `MarketingMember` object with updated fields, along with the `connectionId` and the `id` of the member within a `PatchMartechMemberRequest`.  Only specified fields in `MarketingMember` will be updated. The response contains the updated `MarketingMember` object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/member/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMartechMemberRequest(\n    marketingMember: new Shared\\MarketingMember(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->member->patchMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Payslips with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list HRIS payslips using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK, sets the API key, creates a `ListHrisPayslipsRequest` object, and calls the `listHrisPayslips` method on the `hris` object to retrieve the payslip data. The `connectionId` parameter in the request specifies the ID of the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisPayslipsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisPayslips(\n    request: $request\n);\n\nif ($response->hrisPayslips !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Payment Link in PHP\nDESCRIPTION: This snippet demonstrates how to create a payment link using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing a connection ID and a PaymentLink object within the request. The response contains the created payment link or an error.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePaymentLinkRequest(\n    paymentLink: new Shared\\PaymentLink(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->createPaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Ticketing Tickets in PHP\nDESCRIPTION: This snippet demonstrates how to list all ticketing tickets using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then retrieves a list of tickets using the `listTicketingTickets` method. It requires the `Unified/Unified_to` and `Unified/Unified_to/Models/Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticket/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTicketingTicketsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticket->listTicketingTickets(\n    request: $request\n);\n\nif ($response->ticketingTickets !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Job with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create an ATS Job using the Unified API PHP SDK. It initializes the SDK, sets the security context, creates a request object with necessary parameters (connectionId, atsJob), and then calls the createAtsJob method. The code handles the response by checking if the created atsJob is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsJobRequest(\n    atsJob: new Shared\\AtsJob(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Genai Prompt in PHP\nDESCRIPTION: This code snippet demonstrates how to create a Genai prompt using the Unified PHP SDK. It requires the `vendor/autoload.php` file and utilizes the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The snippet initializes the SDK, sets the API key, creates a request object with a `GenaiPrompt` and a `connectionId`, and then calls the `createGenaiPrompt` method on the `genai` service. It handles the response if it's not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/genai/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateGenaiPromptRequest(\n    genaiPrompt: new Shared\\GenaiPrompt(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->genai->createGenaiPrompt(\n    request: $request\n);\n\nif ($response->genaiPrompt !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Application with Unified API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update an ATS application using the Unified API client. It sets up the SDK, creates a request object with the necessary parameters, and then calls the `updateAtsApplication` method. Error handling is indicated within the conditional statement.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/application/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsApplicationRequest(\n    atsApplication: new Shared\\AtsApplication(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->application->updateAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Messaging Message (Patch) in PHP\nDESCRIPTION: Demonstrates how to partially update an existing messaging message using the `patchMessagingMessage` method of the Unified.to PHP SDK. The example creates a request object with the connection ID, message ID, and a MessagingMessage object containing the fields to be updated. It initializes the SDK, sets the API key, and handles the API response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/message/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMessagingMessageRequest(\n    messagingMessage: new Shared\\MessagingMessage(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->message->patchMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Ticketing Ticket in PHP\nDESCRIPTION: This snippet demonstrates how to update a ticketing ticket using the `patchTicketingTicket` method of the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK, creates a `PatchTicketingTicketRequest` object with the necessary parameters (including `connectionId`, `id`, and a `TicketingTicket` object), and calls the `patchTicketingTicket` method. Finally, it checks for a successful response and provides a placeholder to handle the response data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTicketingTicketRequest(\n    ticketingTicket: new Shared\\TicketingTicket(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->patchTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Accounting Organization using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an accounting organization using the Unified.to PHP SDK. It includes setting up the SDK, creating a request object, and handling the response. The API key should be replaced with an actual value for the code to function correctly. `vendor/autoload.php` must exist and be set up with the necessary dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingOrganizationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingOrganization(\n    request: $request\n);\n\nif ($response->accountingOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kms Space with Unified SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to update a Kms space using the Unified PHP SDK. It requires setting up the SDK with an API key, creating an `UpdateKmsSpaceRequest` object containing the updated `KmsSpace` data, connection ID, and space ID. Finally, it calls the `updateKmsSpace` method and handles the response. Requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/space/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateKmsSpaceRequest(\n    kmsSpace: new Shared\\KmsSpace(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->space->updateKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Classes (PHP)\nDESCRIPTION: This code snippet demonstrates how to list all LMS classes using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID, and then calls the `listLmsClasses` method on the `lms` service. It requires the Unified API PHP SDK to be installed. The response contains a list of LMS classes if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsClassesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->listLmsClasses(\n    request: $request\n);\n\nif ($response->lmsClasses !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LmsClasses with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to list all LMS classes using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a `ListLmsClassesRequest` object with the connection ID, and calls the `listLmsClasses` method on the `class` service. The response, containing a list of LMS classes, is then handled if it's not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/class/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsClassesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->class->listLmsClasses(\n    request: $request\n);\n\nif ($response->lmsClasses !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Instructor with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an instructor in an LMS using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The snippet constructs a request object with the LMS instructor details, connection ID, and instructor ID, then calls the `updateLmsInstructor` method on the LMS client.  Finally, it checks if the response contains an LMS Instructor.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsInstructorRequest(\n    lmsInstructor: new Shared\\LmsInstructor(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->updateLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Enrichment Companies with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve enrichment information for a company using the Unified API PHP SDK. It initializes the SDK, sets the security token, creates a request object, and calls the `listEnrichCompanies` method. The code handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListEnrichCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->company->listEnrichCompanies(\n    request: $request\n);\n\nif ($response->enrichCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Company with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a CRM company using the Unified.to PHP SDK. It initializes the SDK with an API key, creates an UpdateCrmCompanyRequest object with the required parameters (connectionId, id, crmCompany), and then calls the updateCrmCompany method on the CRM API. The snippet handles the response and includes error handling. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmCompanyRequest(\n    crmCompany: new Shared\\CrmCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->updateCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Employee with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new employee using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `CreateHrisEmployeeRequest` object, and calls the `createHrisEmployee` method on the `employee` service.  It requires the `vendor/autoload.php` file and the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/employee/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisEmployeeRequest(\n    hrisEmployee: new Shared\\HrisEmployee(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->employee->createHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a KMS comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with connection ID and comment ID, and then calls the getKmsComment method. It requires the Unified.to PHP SDK to be installed and configured with your API key. The expected output is a KMS comment object if the operation is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetKmsCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->getKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Messaging Message in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a messaging message using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified_to` and `Models\\Operations` namespaces. The code initializes the SDK with an API key and creates a `GetMessagingMessageRequest` with a connection ID and an ID. The function returns an error if the messaging message is null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMessagingMessageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->messaging->getMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Ticketing Customer in PHP\nDESCRIPTION: This snippet demonstrates how to update a ticketing customer using the `patchTicketingCustomer` method of the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK, creates a `PatchTicketingCustomerRequest` object with the necessary parameters (including `connectionId`, `id`, and a `TicketingCustomer` object), and calls the `patchTicketingCustomer` method. Finally, it checks for a successful response and provides a placeholder to handle the response data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTicketingCustomerRequest(\n    ticketingCustomer: new Shared\\TicketingCustomer(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->patchTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payouts with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all payment payouts using the `listPaymentPayouts` method of the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `ListPaymentPayoutsRequest` model for constructing the request with a connection ID. The API key needs to be configured using the `setSecurity` method during SDK initialization.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payout/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentPayoutsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payout->listPaymentPayouts(\n    request: $request\n);\n\nif ($response->paymentPayouts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repo PullRequest with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a repository pull request using the Unified.to PHP SDK. It initializes the SDK, sets up the request with a `RepoPullrequest` object and a connection ID, and then calls the `createRepoPullrequest` method. The example handles potential responses.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pullrequest/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoPullrequestRequest(\n    repoPullrequest: new Shared\\RepoPullrequest(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->pullrequest->createRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Accounting Order using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an accounting order using the Unified.to PHP SDK. It includes setting up the SDK, creating a request object, and handling the response. The API key should be replaced with an actual value for the code to function correctly. `vendor/autoload.php` must exist and be set up with the necessary dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingOrderRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Location using Unified.to SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to update a commerce location using the Unified.to SDK in PHP. It initializes the SDK, creates a request object including the commerce location with the new name, connection ID, and location ID, and then calls the `updateCommerceLocation` method. The example includes basic response handling to check if the location was updated successfully.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceLocationRequest(\n    commerceLocation: new Shared\\CommerceLocation(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->updateCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove LMS Instructor using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an LMS instructor using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and instructor ID, sends the request to the `removeLmsInstructor` method, and handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsInstructorRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->removeLmsInstructor(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Payment Subscription in Unified.to PHP\nDESCRIPTION: This snippet demonstrates how to create a payment subscription using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and a PaymentSubscription object), and then calls the `createPaymentSubscription` method to create the subscription. Requires the Unified.to SDK and the `vendor/autoload.php` file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/subscription/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePaymentSubscriptionRequest(\n    paymentSubscription: new Shared\\PaymentSubscription(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->subscription->createPaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Events with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to list CRM events using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID, and then calls the `listCrmEvents` method. Finally, it checks if the response contains any CRM events and handles the response accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmEventsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->event->listCrmEvents(\n    request: $request\n);\n\nif ($response->crmEvents !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Orders using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list accounting orders using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listAccountingOrders` method. The example handles a successful response where accounting orders are returned. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingOrdersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingOrders(\n    request: $request\n);\n\nif ($response->accountingOrders !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LMS Student in PHP\nDESCRIPTION: This snippet demonstrates how to create a new student using the Unified.to PHP SDK. It initializes the SDK, creates a request object, and sends the request to the createLmsStudent endpoint. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsStudentRequest(\n    lmsStudent: new Shared\\LmsStudent(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->createLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HRIS Employee using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new HRIS employee using the Unified.to PHP SDK.  It initializes the SDK, creates a request object with the employee details and connection ID, and then sends the request to the API. The response is then handled to process the newly created employee. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisEmployeeRequest(\n    hrisEmployee: new Shared\\HrisEmployee(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->createHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Event with Unified.to PHP SDK\nDESCRIPTION: This snippet showcases how to create a CRM event using the Unified.to PHP SDK. It initializes the SDK with the API key, builds a request object containing event details and a connection ID, and then calls the createCrmEvent method. The successful operation of this snippet relies on the Unified.to PHP SDK being installed and properly configured, as well as the correct use of the relevant data models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmEventRequest(\n    crmEvent: new Shared\\CrmEvent(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->createCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Commerce Location in PHP\nDESCRIPTION: This snippet provides an example of how to create a commerce location using the Unified API's PHP SDK. The SDK is initialized with an API key. A `CreateCommerceLocationRequest` object is created with the location name. The `createCommerceLocation` method is then invoked. Finally, the response is checked to verify whether the location has been created successfully.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceLocationRequest(\n    commerceLocation: new Shared\\CommerceLocation(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->createCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update HRIS Company with Unified.to PHP SDK\nDESCRIPTION: This snippet updates a company using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK with an API key, creates a request object with the company data and connection/company IDs, and then sends the request to the `updateHrisCompany` method. Finally, it handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisCompanyRequest(\n    hrisCompany: new Shared\\HrisCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->updateHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Company using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a CRM company using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetCrmCompanyRequest` object with the necessary parameters (connectionId and id), and then calls the `getCrmCompany` method. Finally, it checks if the response contains a CRM company and handles the response accordingly. Requires 'vendor/autoload.php' for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->getCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Course using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an LMS course using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the LMS course data, connection ID, and ID, and calls the `patchLmsCourse` method. The response is then checked for the updated LMS course, and if present, it includes a placeholder for handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsCourseRequest(\n    lmsCourse: new Shared\\LmsCourse(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->patchLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Connection with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update an existing connection using the Unified API PHP SDK. It initializes the SDK, constructs an update request with modified connection properties, and then executes the update operation. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUnifiedConnectionRequest(\n    connection: new Shared\\Connection(\n        categories: [\n            Shared\\PropertyConnectionCategories::Scim,\n        ],\n        integrationType: '<value>',\n        permissions: [\n            Shared\\PropertyConnectionPermissions::CalendarRecordingWrite,\n        ],\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->unified->updateUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Locations with Unified.to PHP SDK\nDESCRIPTION: Shows how to retrieve a list of commerce locations using the Unified.to PHP SDK.  This snippet requires the Unified.to SDK and utilizes the `Unified_to` and `Operations` namespaces. It configures the SDK with an API key and creates a `ListCommerceLocationsRequest` object, specifying the connection ID. The SDK then sends the request and handles the list of commerce locations in the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceLocationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->location->listCommerceLocations(\n    request: $request\n);\n\nif ($response->commerceLocations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Martech List in PHP\nDESCRIPTION: This snippet shows how to retrieve an existing Martech List using the Unified.to PHP SDK. It initializes the SDK, constructs a `GetMartechListRequest` with connection and list IDs, and then calls the `getMartechList` method.  The code requires `vendor/autoload.php` and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/list/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMartechListRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->list->getMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Messaging Message in PHP\nDESCRIPTION: Demonstrates how to create a new messaging message using the Unified.to PHP SDK. This example shows how to instantiate the SDK, create a request object with the necessary parameters (including the connection ID and a MessagingMessage object), and then call the `createMessagingMessage` method. The example also includes error handling for the API call.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/message/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMessagingMessageRequest(\n    messagingMessage: new Shared\\MessagingMessage(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->message->createMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Accounting Taxrate using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an accounting taxrate using the Unified.to PHP SDK. It includes setting up the SDK, creating a request object, and handling the response. The API key should be replaced with an actual value for the code to function correctly. `vendor/autoload.php` must exist and be set up with the necessary dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingTaxrateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching CRM Lead using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a CRM lead using the Unified PHP SDK. It initializes the SDK, sets the API key, and creates a request object with the necessary parameters (connectionId, id, and a CrmLead object). It then calls the `patchCrmLead` method to update the lead. Requires the Unified PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmLeadRequest(\n    crmLead: new Shared\\CrmLead(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Commerce Collection PHP\nDESCRIPTION: This snippet shows how to remove a commerce collection using the Unified PHP SDK. It initializes the SDK, creates a request object with connection and collection IDs, and calls the removeCommerceCollection method.  It handles a successful status code (200). Requires the 'vendor/autoload.php' file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceCollectionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->removeCommerceCollection(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Comment with Unified.to API (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a task comment using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `CreateTaskCommentRequest` object, and then calls the `createTaskComment` method on the `task` service. The request includes the `connectionId` and a `TaskComment` object with the `taskId` and `text` for the comment. It requires the Unified PHP SDK installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(\n        taskId: '<id>',\n        text: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->task->createTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching CRM Deal using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a CRM deal using the Unified PHP SDK. It initializes the SDK, sets the API key, and creates a request object with the necessary parameters (connectionId, id, and a CrmDeal object). It then calls the `patchCrmDeal` method to update the deal. Requires the Unified PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmDealRequest(\n    crmDeal: new Shared\\CrmDeal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LMS Course in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve an LMS course by its ID using the Unified.to PHP SDK. It requires the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK with an API key, constructs a `GetLmsCourseRequest` object with the connection ID and course ID, and calls the `getLmsCourse` method on the `course` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/course/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsCourseRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->course->getLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all repositories using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `ListRepoRepositoriesRequest` model.  The `connectionId` parameter within the `ListRepoRepositoriesRequest` model specifies the connection to retrieve repositories from. Replace `<YOUR_API_KEY_HERE>` with your actual API key and `<id>` with the connection ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repository/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoRepositoriesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->repository->listRepoRepositories(\n    request: $request\n);\n\nif ($response->repoRepositories !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Calendar Event in PHP\nDESCRIPTION: This code snippet demonstrates how to update a calendar event using the Unified API PHP SDK. It initializes the SDK, creates an `UpdateCalendarEventRequest` object with the updated event details and connection/event IDs, and then calls the `updateCalendarEvent` method on the calendar service. The response is then checked to handle successful updates.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCalendarEventRequest(\n    calendarEvent: new Shared\\CalendarEvent(\n        endAt: '<value>',\n        startAt: '<value>',\n        subject: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->updateCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Ticketing Note in PHP\nDESCRIPTION: This snippet demonstrates how to update a ticketing note using the `patchTicketingNote` method of the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK, creates a `PatchTicketingNoteRequest` object with the necessary parameters (including `connectionId`, `id`, and a `TicketingNote` object), and calls the `patchTicketingNote` method. Finally, it checks for a successful response and provides a placeholder to handle the response data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTicketingNoteRequest(\n    ticketingNote: new Shared\\TicketingNote(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->patchTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Messages in PHP\nDESCRIPTION: This snippet demonstrates how to list all messaging messages using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified_to` and `Models\\Operations` namespaces. The code initializes the SDK with an API key and creates a `ListMessagingMessagesRequest` with a connection ID. The function returns an error if the messaging messages are null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMessagingMessagesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->messaging->listMessagingMessages(\n    request: $request\n);\n\nif ($response->messagingMessages !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing SCIM Users with Unified PHP SDK\nDESCRIPTION: This example shows how to delete a SCIM user using the Unified PHP SDK.  It initializes the SDK, sets the security credentials, creates a `RemoveScimUsersRequest` object, and invokes the `removeScimUsers` method on the `scim` service, passing in the request. The connection ID and user ID must be provided.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveScimUsersRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->removeScimUsers(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing UC Calls with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list unified calls using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listUcCalls` method. The response is then checked, and if ucCalls are returned it can be handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/call/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUcCallsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->call->listUcCalls(\n    request: $request\n);\n\nif ($response->ucCalls !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve API Call by ID with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific API Call by its ID using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with the API Call ID, and then calls the `getUnifiedApicall` method. It requires the `vendor/autoload.php` file for autoloading dependencies and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/apicall/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedApicallRequest(\n    id: '<id>',\n);\n\n$response = $sdk->apicall->getUnifiedApicall(\n    request: $request\n);\n\nif ($response->apiCall !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Lead using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a CRM lead using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and lead IDs, and then calls the `removeCrmLead` method. It includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmLeadRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->removeCrmLead(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific metadata entry by its ID using the Unified.to PHP SDK. It sets up the SDK, creates a request object with the connectionId and the metadata id, and calls the getMetadataMetadata method.  The example shows basic usage and requires the Unified.to PHP SDK to be installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/metadata/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMetadataMetadataRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->metadata->getMetadataMetadata(\n    request: $request\n);\n\nif ($response->metadataMetadata !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Ticketing Tickets using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all ticketing tickets using the Unified.to PHP SDK. It initializes the SDK, sets the security key, creates a request object with the connection ID, and calls the `listTicketingTickets` method. The snippet expects a connection ID as a parameter and handles the response if the ticketing tickets are successfully retrieved.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTicketingTicketsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticketing->listTicketingTickets(\n    request: $request\n);\n\nif ($response->ticketingTickets !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Calendar Calendars with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list calendars using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID, calls the listCalendarCalendars method, and handles the response. The code requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarCalendarsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->listCalendarCalendars(\n    request: $request\n);\n\nif ($response->calendarCalendars !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Timeoff Records using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all timeoff records using the `listHrisTimeoffs` method of the Unified PHP SDK. It requires the `connectionId`. It initializes the SDK, creates a request object, calls the method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/timeoff/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisTimeoffsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->timeoff->listHrisTimeoffs(\n    request: $request\n);\n\nif ($response->hrisTimeoffs !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Ticketing Note with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a ticketing note using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and id), and then calls the removeTicketingNote function. It includes error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingNoteRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->removeTicketingNote(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Employee with Unified.to PHP SDK (Patch)\nDESCRIPTION: This code demonstrates how to partially update an employee's information using the `patchHrisEmployee` method of the Unified.to PHP SDK. It requires an API key for authentication, a connection ID, and the ID of the employee to be updated. It depends on the `vendor/autoload.php` file and the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/employee/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisEmployeeRequest(\n    hrisEmployee: new Shared\\HrisEmployee(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->employee->patchHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch UC Contact Example in PHP\nDESCRIPTION: This snippet illustrates updating a UC contact using the Unified.to PHP SDK. It requires the Unified_to library and utilizes the Models\\Operations and Models\\Shared namespaces. The example initializes the SDK with an API key, creates a request object with UC contact details and necessary IDs, and calls the patchUcContact method. Includes basic response handling.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUcContactRequest(\n    ucContact: new Shared\\UcContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->patchUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Timeoffs with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list HRIS timeoffs using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK, sets the API key, creates a `ListHrisTimeoffsRequest` object, and calls the `listHrisTimeoffs` method on the `hris` object to retrieve the timeoff data. The `connectionId` parameter in the request specifies the ID of the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisTimeoffsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisTimeoffs(\n    request: $request\n);\n\nif ($response->hrisTimeoffs !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Calendar Link in PHP\nDESCRIPTION: This code snippet demonstrates how to update a calendar link using the Unified API PHP SDK. It initializes the SDK, creates an `UpdateCalendarLinkRequest` object with the updated link details and connection/link IDs, and then calls the `updateCalendarLink` method on the calendar service. The response is then checked to handle successful updates.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCalendarLinkRequest(\n    calendarLink: new Shared\\CalendarLink(\n        url: 'https://quiet-coordination.name',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->updateCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Interview using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS interview using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and AtsInterview object), and calls the `updateAtsInterview` method.  It requires the `vendor/autoload.php` file for dependency management and expects a valid API key for authentication. The `AtsInterview` object within the request holds the updated interview details.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsInterviewRequest(\n    atsInterview: new Shared\\AtsInterview(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Jobs with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list ATS jobs using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a `ListAtsJobsRequest` object with the connection ID, calls the `listAtsJobs` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsJobsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsJobs(\n    request: $request\n);\n\nif ($response->atsJobs !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Repo Commit using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository commit using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary parameters (including the commit details, connection ID, and commit ID), and then calls the `updateRepoCommit` method. The response is then handled appropriately.  Requires the `vendor/autoload.php` file for autoloading dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->updateRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Link with Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a calendar link using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID, link ID, and the updated calendar link details, and then calls the `updateCalendarLink` method.  The API key should be replaced with a valid key. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCalendarLinkRequest(\n    calendarLink: new Shared\\CalendarLink(\n        url: 'https://quiet-coordination.name',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->updateCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Invoice with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting invoice using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateAccountingInvoiceRequest` object with the necessary parameters, and then calls the `updateAccountingInvoice` method. The response is then checked to handle success or failure. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingInvoiceRequest(\n    accountingInvoice: new Shared\\AccountingInvoice(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Ticketing Customer in PHP\nDESCRIPTION: This snippet demonstrates how to remove a ticketing customer using the `removeTicketingCustomer` method of the Unified.to PHP SDK. It requires the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK, creates a `RemoveTicketingCustomerRequest` object with the necessary parameters (including `connectionId` and `id`), and calls the `removeTicketingCustomer` method. Finally, it checks for a successful response (status code 200) and provides a placeholder to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingCustomerRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->removeTicketingCustomer(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Pull Request using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific pull request using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID and pull request ID, and then calls the `getRepoPullrequest` method.  It requires the `Unified\\Unified_to`, and `Unified\\Unified_to\\Models\\Operations` namespaces. The response is then handled based on whether `repoPullrequest` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoPullrequestRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->getRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a CRM Deal (PATCH) with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to partially update a CRM deal using the PATCH method in the Unified.to PHP SDK. It initializes the SDK, creates a PatchCrmDealRequest object containing the ID of the deal to update, the connection ID, and the CrmDeal object with updated fields, and then calls the patchCrmDeal method. The Unified.to PHP SDK needs to be installed. Parameters include the deal id, the connection id, and the partial CrmDeal object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/deal/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmDealRequest(\n    crmDeal: new Shared\\CrmDeal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->deal->patchCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Payment Subscription with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a payment subscription using the Unified API and its PHP SDK. It initializes the SDK, creates a request object with a PaymentSubscription object, connectionId, and id, and calls the updatePaymentSubscription method.  The code checks if a PaymentSubscription object is present in the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePaymentSubscriptionRequest(\n    paymentSubscription: new Shared\\PaymentSubscription(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->updatePaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Marketing List with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a marketing list using the Unified API PHP SDK. It requires the `Unified\\Unified_to` and related models. The `updateMartechList` function is called on the `list` object with a constructed request object, setting connection ID and list ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/list/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMartechListRequest(\n    marketingList: new Shared\\MarketingList(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->list->updateMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Task Project in PHP\nDESCRIPTION: This code snippet shows how to update a task's project using the Unified API PHP SDK. It involves setting up the SDK with authentication, creating a `UpdateTaskProjectRequest` object with the required details (taskProject, connectionId, and id), and calling the `updateTaskProject` method.  The code then checks if the response contains a valid `taskProject` object, indicating a successful update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTaskProjectRequest(\n    taskProject: new Shared\\TaskProject(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->updateTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Passthrough JSON in PHP\nDESCRIPTION: This snippet demonstrates how to use the Unified PHP SDK to create a passthrough endpoint using JSON data. It initializes the SDK, sets the security key, creates a request object, and calls the `createPassthroughJson` method. The connection ID and path are required parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePassthroughJsonRequest(\n    connectionId: '<id>',\n    path: '/opt/lib',\n);\n\n$response = $sdk->passthrough->createPassthroughJson(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Martech List with Unified API in PHP\nDESCRIPTION: This snippet shows how to remove a Martech list using the Unified API PHP SDK. It initializes the SDK, sets up the `RemoveMartechListRequest` with the connection ID and list ID, and then calls the `removeMartechList` method. It handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMartechListRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->removeMartechList(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Groups with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to list all HRIS groups using the Unified.to PHP SDK. It initializes the SDK, creates a `ListHrisGroupsRequest` with the connection ID, and calls the `listHrisGroups` method. The SDK initialization requires an API key for authentication.  The code expects the `vendor/autoload.php` file to have been included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisGroupsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->group->listHrisGroups(\n    request: $request\n);\n\nif ($response->hrisGroups !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Ticketing Notes using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all ticketing notes using the Unified.to PHP SDK. It initializes the SDK, sets the security key, creates a request object with the connection ID, and calls the `listTicketingNotes` method. The snippet expects a connection ID as a parameter and handles the response if the ticketing notes are successfully retrieved.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTicketingNotesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticketing->listTicketingNotes(\n    request: $request\n);\n\nif ($response->ticketingNotes !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Location using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS location using the Unified.to PHP SDK. It initializes the SDK, constructs a `RemoveHrisLocationRequest` object, and then calls the `removeHrisLocation` method. The connection and location id's are passed as parameters, and success is determined by checking for a `statusCode` of 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->removeHrisLocation(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Messaging Message in PHP\nDESCRIPTION: This snippet demonstrates how to fully update a messaging message using the `updateMessagingMessage` function. It requires the `Unified_to` SDK and specifies the API key and the necessary request parameters, including the connection ID, message ID, and a fully populated `MessagingMessage` object. It uses the `UpdateMessagingMessageRequest` object to define the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMessagingMessageRequest(\n    messagingMessage: new Shared\\MessagingMessage(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->messaging->updateMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Marketing List using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a marketing list using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a marketing list and connection ID, and then calls the createMartechList method. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMartechListRequest(\n    marketingList: new Shared\\MarketingList(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->martech->createMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Calendar Events with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list calendar events using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and then calls the listCalendarEvents method. The response is then handled to process the list of calendar events. It requires the Unified.to SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarEventsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->event->listCalendarEvents(\n    request: $request\n);\n\nif ($response->calendarEvents !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Messaging Message in PHP\nDESCRIPTION: Demonstrates how to retrieve a specific messaging message by ID using the Unified.to PHP SDK. This example initializes the SDK with an API key, constructs a request object with the connection ID and message ID, and then calls the `getMessagingMessage` method to fetch the message. The example includes handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/message/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMessagingMessageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->message->getMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Messaging Channels using PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all messaging channels using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file and the `ListMessagingChannelsRequest` model to specify the connection ID. Replace `<YOUR_API_KEY_HERE>` and `<id>` with your actual API key and connection ID, respectively.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/channel/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMessagingChannelsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->channel->listMessagingChannels(\n    request: $request\n);\n\nif ($response->messagingChannels !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Repo Branch in PHP\nDESCRIPTION: This snippet demonstrates how to create a new repository branch using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary branch details (name, repoId), and then calls the createRepoBranch method. It depends on the Unified.to PHP SDK being installed via Composer and requires a valid API key and connection ID. The response contains the created RepoBranch object, which can be handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/branch/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoBranchRequest(\n    repoBranch: new Shared\\RepoBranch(\n        name: '<value>',\n        repoId: '<id>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->branch->createRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HRIS Employee via Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an HRIS employee using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (including the employee ID and updated HRIS employee data), and then calls the `updateHrisEmployee` method. The response object is checked to handle the updated HRIS employee data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/employee/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisEmployeeRequest(\n    hrisEmployee: new Shared\\HrisEmployee(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->employee->updateHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Calendar in PHP\nDESCRIPTION: This code snippet shows how to retrieve a specific calendar using the Unified.to PHP SDK.  It initializes the SDK, creates a request object specifying the connection ID and the ID of the calendar to retrieve, and sends the request. The snippet also illustrates handling a successful response where the calendar is retrieved.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarCalendarRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->getCalendarCalendar(\n    request: $request\n);\n\nif ($response->calendarCalendar !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update HRIS Group with Unified.to PHP SDK\nDESCRIPTION: This snippet updates a group using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK with an API key, creates a request object with the group data and connection/group IDs, and then sends the request to the `updateHrisGroup` method. Finally, it handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisGroupRequest(\n    hrisGroup: new Shared\\HrisGroup(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->updateHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching SCIM Groups with Unified PHP SDK\nDESCRIPTION: This snippet updates a SCIM group using the Unified PHP SDK. It initializes the SDK, sets the security credentials, creates a `PatchScimGroupsRequest` object including a `ScimGroup` object to define the changes, and calls the `patchScimGroups` method.  It requires the connection ID and the ID of the group to update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchScimGroupsRequest(\n    scimGroup: new Shared\\ScimGroup(\n        displayName: 'Damon_Rutherford93',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->patchScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Candidates with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list ATS candidates using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a `ListAtsCandidatesRequest` object with the connection ID, calls the `listAtsCandidates` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsCandidatesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsCandidates(\n    request: $request\n);\n\nif ($response->atsCandidates !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Payment with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a payment using the Unified API and its PHP SDK. It initializes the SDK, creates a request object with a PaymentPayment, connectionId, and id, and then calls the updatePaymentPayment method. A check is performed to see if the response returns a PaymentPayment object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePaymentPaymentRequest(\n    paymentPayment: new Shared\\PaymentPayment(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->updatePaymentPayment(\n    request: $request\n);\n\nif ($response->paymentPayment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a KMS Space with Unified.to PHP SDK\nDESCRIPTION: This example demonstrates how to remove a KMS space using the Unified.to PHP SDK. The code initializes the SDK with API key credentials, sets up the request object `RemoveKmsSpaceRequest` and calls the `removeKmsSpace` method. This snippet checks the `statusCode` on the response to determine whether it's `200`, signalling a successful removal of the space. The `vendor/autoload.php` file is required to load the sdk and other dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveKmsSpaceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->removeKmsSpace(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Kms Space using Unified.to PHP SDK\nDESCRIPTION: This snippet details how to remove a Kms Space using the Unified.to PHP SDK. It initializes the SDK, creates a request containing the connection ID and space ID, and calls the `removeKmsSpace` method. The status code is checked to confirm the removal. Requires the Unified.to PHP SDK to be installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/space/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveKmsSpaceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->space->removeKmsSpace(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Martech Lists in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all Martech Lists associated with a connection using the Unified.to PHP SDK. It initializes the SDK, creates a `ListMartechListsRequest` with the connection ID, and then calls the `listMartechLists` method. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/list/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMartechListsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->list->listMartechLists(\n    request: $request\n);\n\nif ($response->marketingLists !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Link with Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a payment link using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID, link ID, and the updated payment link details, and then calls the `updatePaymentLink` method. The API key should be replaced with a valid key. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePaymentLinkRequest(\n    paymentLink: new Shared\\PaymentLink(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->updatePaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all organizations for a repository using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID, and then calls the `listRepoOrganizations` method. It requires the `Unified\\Unified_to`, and `Unified\\Unified_to\\Models\\Operations` namespaces. The response is then handled based on whether `repoOrganizations` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoOrganizationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->listRepoOrganizations(\n    request: $request\n);\n\nif ($response->repoOrganizations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HRIS Company with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an HRIS company using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connectionId and the ID of the desired company, and calls the getHrisCompany method. The response is then handled to access the retrieved HRIS company data. Requires `vendor/autoload.php` and uses `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->getHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch CRM Contact Example in PHP\nDESCRIPTION: This snippet shows how to update a CRM contact using the Unified.to PHP SDK. It requires the Unified_to library and uses the Models\\Operations and Models\\Shared namespaces. The code initializes the SDK with an API key, constructs a request object containing contact and ID information, and calls the patchCrmContact method. Handling of the response is also included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->patchCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update LMS Student Example in PHP\nDESCRIPTION: This code snippet demonstrates how to update an LMS student using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and LmsStudent data), and calls the updateLmsStudent method. The response is then checked to handle the updated student data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/student/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsStudentRequest(\n    lmsStudent: new Shared\\LmsStudent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->student->updateLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List CRM Companies with Unified.to in PHP\nDESCRIPTION: This snippet shows how to list CRM companies using the Unified.to PHP SDK. The SDK is initialized with an API key, a `ListCrmCompaniesRequest` object is created specifying the connection ID, and then the `listCrmCompanies` method is called. The example then checks to see if the `crmCompanies` property is not null before attempting to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->listCrmCompanies(\n    request: $request\n);\n\nif ($response->crmCompanies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Project with Unified.to API (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve a task project using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetTaskProjectRequest` object, and then calls the `getTaskProject` method on the `task` service. The request includes the `connectionId` and the `id` of the project to retrieve. It requires the Unified PHP SDK installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTaskProjectRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->getTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SCIM Users (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of users using the Unified.to PHP SDK and the SCIM protocol. It initializes the SDK, sets up a `ListScimUsersRequest` with a `connectionId`, and then calls the `listScimUsers` method. The security API key must be configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/user/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListScimUsersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->user->listScimUsers(\n    request: $request\n);\n\nif ($response->scimUsers !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Martech Member with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a member from a marketing list using the Unified.to PHP SDK. It requires setting up the SDK with an API key and creating a `RemoveMartechMemberRequest` object with the `connectionId` and `id` of the member to be removed. The snippet handles a successful response with status code 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMartechMemberRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->removeMartechMember(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Branches using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all branches for a repository using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID, and then calls the `listRepoBranches` method. It requires the `Unified\\Unified_to`, and `Unified\\Unified_to\\Models\\Operations` namespaces. The response is then handled based on whether `repoBranches` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoBranchesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->listRepoBranches(\n    request: $request\n);\n\nif ($response->repoBranches !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List ATS Activities Example in PHP\nDESCRIPTION: This snippet demonstrates how to list all activities from an ATS using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListAtsActivitiesRequest` object with the connection ID, and then calls the `listAtsActivities` method. The response is then checked for an array of activities and handled accordingly. Requires the `vendor/autoload.php` for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsActivitiesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsActivities(\n    request: $request\n);\n\nif ($response->atsActivities !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch HRIS Location using Unified API in PHP\nDESCRIPTION: This example demonstrates how to update a HRIS location object with the Unified API PHP SDK.  The process involves setting up the SDK, creating a request object for the `patchHrisLocation` operation, sending the request, and then a placeholder for processing the response.  The request requires an initialized `hrisLocation`, a `connectionId` and the specific location `id` to update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisLocationRequest(\n    hrisLocation: new Shared\\HrisLocation(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->patchHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ATS Document in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific document from an Applicant Tracking System (ATS) using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary connection and document IDs, and then calls the `getAtsDocument` method. The response is then checked to see if an `atsDocument` exists and handles it accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsDocumentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SCIM Group with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a SCIM group using the Unified.to PHP SDK.  It initializes the SDK, creates a request object including the connection ID and SCIM group information (display name), and invokes the `createScimGroups` method.  An API key must be set for security. The `vendor/autoload.php` file must be included to load dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateScimGroupsRequest(\n    scimGroup: new Shared\\ScimGroup(\n        displayName: 'Bert89',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->group->createScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Repo Repositories in PHP\nDESCRIPTION: This code snippet demonstrates how to list all repositories using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a ListRepoRepositoriesRequest object, and calls the listRepoRepositories method. The response is then checked for repoRepositories and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoRepositoriesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->listRepoRepositories(\n    request: $request\n);\n\nif ($response->repoRepositories !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commits using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all commits for a repository using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID, and then calls the `listRepoCommits` method. It requires the `Unified\\Unified_to`, and `Unified\\Unified_to\\Models\\Operations` namespaces. The response is then handled based on whether `repoCommits` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoCommitsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->listRepoCommits(\n    request: $request\n);\n\nif ($response->repoCommits !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Journal with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting journal using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateAccountingJournalRequest` object with the necessary parameters, and then calls the `updateAccountingJournal` method. The response is then checked to handle success or failure. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Document with PHP SDK\nDESCRIPTION: This code snippet demonstrates updating an ATS document using the Unified.to PHP SDK. It initializes the SDK, constructs a request including the updated document details and IDs, and makes the API call. Dependencies include the Unified.to PHP SDK, autoload, and the Shared and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Scorecards with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list ATS scorecards using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object for listing scorecards associated with a specific connection ID, and then calls the `listAtsScorecards` method.  The snippet requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations` namespaces. Replace `<YOUR_API_KEY_HERE>` and `<id>` with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsScorecardsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsScorecards(\n    request: $request\n);\n\nif ($response->atsScorecards !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Student with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a student in an LMS using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The snippet constructs a request object with the LMS student details, connection ID, and student ID, then calls the `updateLmsStudent` method on the LMS client. Finally, it checks if the response contains an LMS Student.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsStudentRequest(\n    lmsStudent: new Shared\\LmsStudent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->updateLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Storage File with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific storage file using its ID with the Unified.to PHP SDK. It depends on `vendor/autoload.php` for dependency management. A `GetStorageFileRequest` is instantiated, specifying the connection ID and the file ID to retrieve.  Security settings are a prerequisite.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/file/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetStorageFileRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->file->getStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Collection with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a commerce collection using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with connection and collection IDs, and then calls the getCommerceCollection method. The response is then handled to process the retrieved collection data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceCollectionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->getCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LMS Class (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve an LMS class using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID and class ID, and then calls the `getLmsClass` method on the `lms` service. It requires the Unified API PHP SDK to be installed. The response contains LMS class details if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsClassRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->getLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Events with PHP\nDESCRIPTION: This snippet demonstrates how to list CRM events using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the listCrmEvents method. The response is then checked for CRM events.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmEventsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->listCrmEvents(\n    request: $request\n);\n\nif ($response->crmEvents !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Page with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a KMS page using the Unified.to PHP SDK. It initializes the SDK, creates a request object with connection ID and page ID, and then calls the getKmsPage method. It requires the Unified.to PHP SDK to be installed and configured with your API key. The expected output is a KMS page object if the operation is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetKmsPageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->getKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kms Space using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new Kms Space using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary space details and connection ID, and then calls the `createKmsSpace` method on the `space` service. The response is then handled if the Kms Space is successfully created. Requires the Unified.to PHP SDK to be installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/space/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateKmsSpaceRequest(\n    kmsSpace: new Shared\\KmsSpace(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->space->createKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Application in PHP\nDESCRIPTION: This PHP snippet demonstrates how to remove an ATS application using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and id), and calls the `removeAtsApplication` method. The response's status code is then checked, and you can handle the response if the statusCode is 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsApplicationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsApplication(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Storage File in PHP\nDESCRIPTION: This code snippet demonstrates how to update a storage file using the PATCH method with the Unified.to PHP SDK.  It initializes the SDK, creates a `PatchStorageFileRequest` with the `storageFile`, `connectionId`, and `id`, and calls the `patchStorageFile` method.  The response contains the updated storage file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/storage/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchStorageFileRequest(\n    storageFile: new Shared\\StorageFile(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->storage->patchStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing AtsInterviews with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to list all AtsInterviews associated with a connection using the Unified.to PHP SDK. It sets up the SDK, creates a request with the required `connectionId`, and calls the `listAtsInterviews` method. The returned list of AtsInterview objects is then handled. Requires the Unified.to PHP SDK and `vendor/autoload.php` for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/interview/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsInterviewsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->interview->listAtsInterviews(\n    request: $request\n);\n\nif ($response->atsInterviews !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Activity with Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS activity using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object with necessary parameters (connection ID, activity ID, and the updated AtsActivity object), and then calls the `updateAtsActivity` method. Finally, it checks if the response contains an AtsActivity object and handles the response accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/activity/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsActivityRequest(\n    atsActivity: new Shared\\AtsActivity(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->activity->updateAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Commerce Collection with Unified.to in PHP\nDESCRIPTION: This snippet shows how to remove a commerce collection using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and collection ID, and then calls the `removeCommerceCollection` method.  It depends on the Unified.to PHP SDK and autoloading.  It expects a valid connection ID and collection ID as input and handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/collection/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceCollectionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->collection->removeCommerceCollection(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Webhook by ID - Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a webhook by its ID using the Unified PHP SDK. It initializes the SDK with an API key, creates a request object with the webhook ID, and then retrieves the webhook.  The response contains the webhook data, which can be used for further processing.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedWebhookRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->getUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Task using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific task using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID and task ID, and then calls the `getTaskTask` method. The response is then handled within an if statement.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTaskTaskRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->getTaskTask(\n    request: $request\n);\n\nif ($response->taskTask !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing GenAI Models with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list available GenAI models using the Unified PHP SDK. It requires setting up the SDK with an API key, creating a request object with the connection ID, and calling the `listGenaiModels` method. The response is then handled to process the returned GenAI models. Dependencies include the Unified PHP SDK and autoloading the necessary classes.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/model/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListGenaiModelsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->model->listGenaiModels(\n    request: $request\n);\n\nif ($response->genaiModels !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Kms Space using Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to retrieve a Kms Space by its ID using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object containing the connection ID and space ID, and then calls the `getKmsSpace` method on the `space` service. The retrieved Kms Space details are then handled if the retrieval is successful. Requires the Unified.to PHP SDK to be installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/space/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetKmsSpaceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->space->getKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Deal using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a CRM deal using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and deal IDs, and then calls the `removeCrmDeal` method. It includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmDealRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->removeCrmDeal(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Document with Unified.to PHP SDK\nDESCRIPTION: This code snippet illustrates how to update parts of an existing ATS document using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object including the connectionId, document ID, and the AtsDocument object containing the fields to be updated. Then patchAtsDocument method is called. Finally, it checks for a valid AtsDocument in the response and proceeds to handle it.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/document/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->document->patchAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accounting Invoice with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to fetch an accounting invoice using the Unified.to PHP SDK. It starts by initializing the SDK using an API key, then creates a GetAccountingInvoiceRequest object with the necessary connection and invoice IDs, dispatches the request, and finally processes the response. The `vendor/autoload.php` file is essential for loading dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingInvoiceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Metadata with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a metadata entry using the patch method of the Unified.to PHP SDK. It involves setting up the SDK with security credentials, constructing a request with partial metadata updates along with connection and metadata IDs, and calling the patchMetadataMetadata method. This example relies on the Unified.to PHP SDK being correctly installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/metadata/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMetadataMetadataRequest(\n    metadataMetadata: new Shared\\MetadataMetadata(\n        name: '<value>',\n        objectType: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->metadata->patchMetadataMetadata(\n    request: $request\n);\n\nif ($response->metadataMetadata !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Contacts using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list accounting contacts using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listAccountingContacts` method. The example handles a successful response where accounting contacts are returned. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingContactsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingContacts(\n    request: $request\n);\n\nif ($response->accountingContacts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Taxrates in PHP\nDESCRIPTION: This code snippet demonstrates how to list accounting tax rates using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and calls the `listAccountingTaxrates` function to retrieve the tax rates.  It requires the Unified PHP SDK installed and the `vendor/autoload.php` file included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingTaxratesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingTaxrates(\n    request: $request\n);\n\nif ($response->accountingTaxrates !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage File with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a storage file using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies.  A `CreateStorageFileRequest` object is created with the necessary parameters, including a `StorageFile` object. The security credentials must be initialized.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/file/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateStorageFileRequest(\n    storageFile: new Shared\\StorageFile(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->file->createStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Account with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, creates an UpdateAccountingAccountRequest object, including an AccountingAccount object from the Shared namespace, along with the connection ID and account ID. It then calls the updateAccountingAccount method. The response's accountingAccount property is checked to handle successful or failed updates.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Job using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS job using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and AtsJob object), and calls the `updateAtsJob` method.  It requires the `vendor/autoload.php` file for dependency management and expects a valid API key for authentication. The `AtsJob` object within the request holds the updated job details.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsJobRequest(\n    atsJob: new Shared\\AtsJob(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Application with PHP SDK\nDESCRIPTION: This code demonstrates how to update an ATS application using the Unified.to PHP SDK. The code initializes the SDK, constructs an update request with the application details and IDs, and calls the API to perform the update. Dependencies include the Unified.to PHP SDK, autoload, and the Shared and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsApplicationRequest(\n    atsApplication: new Shared\\AtsApplication(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Payment Subscription with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to remove a payment subscription using the Unified API and its PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and id), and calls the removePaymentSubscription method. The response status code is checked to handle the result.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemovePaymentSubscriptionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->removePaymentSubscription(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Commerce Inventory with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new commerce inventory record using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for dependency management and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The code initializes the SDK with an API key, constructs a `CreateCommerceInventoryRequest` object with inventory details, and then calls the `createCommerceInventory` method on the `inventory` service. The `available` property specifies the quantity available for the item. The connectionId parameter is needed to specify which connection the inventory should be created in.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/inventory/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceInventoryRequest(\n    commerceInventory: new Shared\\CommerceInventory(\n        available: 5165.08,\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->inventory->createCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LMS Student (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve an LMS student using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID and student ID, and then calls the `getLmsStudent` method on the `lms` service.  It requires the Unified API PHP SDK to be installed. The response contains LMS student details if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsStudentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->getLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Task Comments using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all comments for a task using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listTaskComments` method. The response, containing a list of task comments, is handled within an if statement.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTaskCommentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->task->listTaskComments(\n    request: $request\n);\n\nif ($response->taskComments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Companies with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list ATS companies using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a `ListAtsCompaniesRequest` object with the connection ID, calls the `listAtsCompanies` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsCompanies(\n    request: $request\n);\n\nif ($response->atsCompanies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Account with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an accounting account using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveAccountingAccountRequest` object, and calls the `removeAccountingAccount` method. The connection ID and account ID must be provided in the request. The example shows a check for a status code of 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingAccountRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingAccount(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Links with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list payment links using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object, calls the `listPaymentLinks` method, and handles the response.  The required dependency is the Unified.to PHP SDK, installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentLinksRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->listPaymentLinks(\n    request: $request\n);\n\nif ($response->paymentLinks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Location using Unified.to SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS location using the Unified.to SDK in PHP. It initializes the SDK, creates a request object with the connection ID and location ID, and then calls the `removeHrisLocation` method. The example includes basic error handling based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->removeHrisLocation(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Deals with Unified.to PHP SDK\nDESCRIPTION: This example demonstrates how to list all CRM deals for a given connection using the Unified.to PHP SDK. The code initializes the SDK, creates a ListCrmDealsRequest object with the connection ID, and calls the listCrmDeals method. The Unified.to PHP SDK is a prerequisite. The primary parameter is connectionId.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/deal/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmDealsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->deal->listCrmDeals(\n    request: $request\n);\n\nif ($response->crmDeals !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Repository using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific repository using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID and repository ID, and then calls the `getRepoRepository` method. It requires the `Unified\\Unified_to`, and `Unified\\Unified_to\\Models\\Operations` namespaces. The response is then handled based on whether `repoRepository` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoRepositoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->getRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Activity with PHP SDK\nDESCRIPTION: This code snippet shows how to update an ATS activity using the Unified.to PHP SDK. It initializes the SDK, creates a request object including the updated activity details and IDs, and calls the API to update the activity. Dependencies include the Unified.to PHP SDK, autoload, and the Shared and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsActivityRequest(\n    atsActivity: new Shared\\AtsActivity(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Accounts using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to list all accounting accounts using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `ListAccountingAccountsRequest` object with the connection ID, and calls the `listAccountingAccounts` method on the `account` service. It uses the `vendor/autoload.php` file for dependency autoloading and relies on the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/account/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingAccountsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->account->listAccountingAccounts(\n    request: $request\n);\n\nif ($response->accountingAccounts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Commerce Inventory with Unified.to in PHP\nDESCRIPTION: This code snippet illustrates how to remove a commerce inventory record using the Unified.to PHP SDK. It depends on `vendor/autoload.php` and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The SDK is initialized using an API key, and a `RemoveCommerceInventoryRequest` object is created, containing the `connectionId` and the inventory `id` to remove.  The `removeCommerceInventory` method on the `inventory` service is called to delete the specified record.  The example checks the response status code for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/inventory/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceInventoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->inventory->removeCommerceInventory(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to update a unified connection using the Unified PHP SDK's PATCH functionality. It requires the `vendor/autoload.php` file and uses the `PatchUnifiedConnectionRequest` model along with the `Connection` model. It depends on the Unified PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/connection/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedConnectionRequest(\n    connection: new Shared\\Connection(\n        categories: [\n            Shared\\PropertyConnectionCategories::Messaging,\n        ],\n        integrationType: '<value>',\n        permissions: [\n            Shared\\PropertyConnectionPermissions::EnrichCompanyRead,\n        ],\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->connection->patchUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Comment with Unified.to API (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve a task comment using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetTaskCommentRequest` object, and then calls the `getTaskComment` method on the `task` service. The request includes the `connectionId` and the `id` of the comment to retrieve. It requires the Unified PHP SDK installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTaskCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->getTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Ticketing Notes using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all ticketing notes associated with a connection using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and utilizes the `Unified\\Unified_to` namespace. An API key is required for authentication. The request object requires the connectionId.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/note/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTicketingNotesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->note->listTicketingNotes(\n    request: $request\n);\n\nif ($response->ticketingNotes !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Timeoff in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific HRIS timeoff request using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetHrisTimeoffRequest` object with a connection ID and timeoff request ID, and then calls the `getHrisTimeoff` method to retrieve the timeoff request data. The response is then checked for a valid `hrisTimeoff` object. Dependencies include the Unified.to PHP SDK and the `GetHrisTimeoffRequest` model.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisTimeoffRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisTimeoff(\n    request: $request\n);\n\nif ($response->hrisTimeoff !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Contact with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an accounting contact using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection and contact IDs, and then calls the `removeAccountingContact` method. A successful response (status code 200) indicates the contact has been removed. Requires the Unified.to PHP SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Ticketing Ticket with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and id), and then calls the removeTicketingTicket function. It includes error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingTicketRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->removeTicketingTicket(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Pipelines with PHP\nDESCRIPTION: This snippet demonstrates how to list CRM pipelines using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the listCrmPipelines method. The response is then checked for CRM pipelines.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmPipelinesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->listCrmPipelines(\n    request: $request\n);\n\nif ($response->crmPipelines !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Commerce Item in PHP\nDESCRIPTION: This snippet shows how to create a commerce item via the Unified API using the PHP SDK. It initializes the SDK, creates a `CreateCommerceItemRequest` without specific item details, and calls the `createCommerceItem` method. It checks for null return from the API, for basic error handling.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceItemRequest(\n    commerceItem: new Shared\\CommerceItem(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->createCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Unified Connections in PHP\nDESCRIPTION: This code snippet demonstrates how to list all unified connections using the Unified PHP SDK. It requires the `vendor/autoload.php` file and uses the `ListUnifiedConnectionsRequest` model.  It depends on the Unified PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/connection/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedConnectionsRequest();\n\n$response = $sdk->connection->listUnifiedConnections(\n    request: $request\n);\n\nif ($response->connections !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Orders in PHP\nDESCRIPTION: This code snippet demonstrates how to list accounting orders using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and calls the `listAccountingOrders` function to retrieve the orders.  It requires the Unified PHP SDK installed and the `vendor/autoload.php` file included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingOrdersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingOrders(\n    request: $request\n);\n\nif ($response->accountingOrders !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List HRIS Companies in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of HRIS companies using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListHrisCompaniesRequest` object with a connection ID, and then calls the `listHrisCompanies` method to retrieve the list of companies. The response is then checked for a valid `hrisCompanies` object. Dependencies include the Unified.to PHP SDK and the `ListHrisCompaniesRequest` model.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisCompanies(\n    request: $request\n);\n\nif ($response->hrisCompanies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Event using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a CRM event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and event IDs, and then calls the `removeCrmEvent` method.  It includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->removeCrmEvent(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Commerce Collection with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a commerce collection using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object containing the updated collection details, connection ID, and collection ID, and then calls the `patchCommerceCollection` method. The response is then handled to process the updated collection. It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->patchCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Event with Unified API in PHP\nDESCRIPTION: This snippet shows how to update a CRM event using the Unified API PHP SDK. Similar to the calendar event update, it initializes the SDK, creates a request object with the updated event data, connection ID, and event ID. It then calls the `patchCrmEvent` method, checking the response to determine if the update was successful and handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmEventRequest(\n    crmEvent: new Shared\\CrmEvent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->patchCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CRM Company using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a CRM company using the Unified PHP SDK. It initializes the SDK, sets the API key, and creates a request object with the necessary parameters (connectionId and id). It then calls the `removeCrmCompany` method to remove the company. Requires the Unified PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->removeCrmCompany(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Commerce Item in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a commerce item using the Unified PHP SDK. It requires the `vendor/autoload.php` file for dependency management and uses the `Unified_to` and `Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK with an API key, constructs a `RemoveCommerceItemRequest` object with the necessary parameters (`connectionId` and `id`), and then calls the `removeCommerceItem` method on the `item` service. It checks if the status code is 200 to ensure the deletion was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/item/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceItemRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->item->removeCommerceItem(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Items in PHP\nDESCRIPTION: This code snippet shows how to list all commerce items using the Unified PHP SDK. It requires the `vendor/autoload.php` file and uses the `Unified_to` and `Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK with an API key, creates a `ListCommerceItemsRequest` object with `connectionId`, and calls the `listCommerceItems` method on the `item` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/item/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceItemsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->item->listCommerceItems(\n    request: $request\n);\n\nif ($response->commerceItems !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Activity with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an ATS activity using the Unified.to PHP SDK. The SDK is initialized with an API key, and a `RemoveAtsActivityRequest` object is created using a connection ID and activity ID.  The `removeAtsActivity` method is then invoked to delete the activity.  The script depends on `vendor/autoload.php` for dependency loading and checks for a status code of 200 for successful execution.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/activity/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsActivityRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->activity->removeAtsActivity(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Uc Calls with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all calls using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then calls the listUcCalls method with a request object containing the connection ID. It requires the Unified_to SDK and the Models/Operations namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUcCallsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->uc->listUcCalls(\n    request: $request\n);\n\nif ($response->ucCalls !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Storage File with Unified.to PHP SDK (Patch)\nDESCRIPTION: Demonstrates how to partially update a storage file using the PATCH method via the Unified.to PHP SDK. It needs `vendor/autoload.php` for autoloading. A `PatchStorageFileRequest` containing the updated fields in a `StorageFile` object, connection ID, and file ID is required. Make sure security is enabled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/file/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchStorageFileRequest(\n    storageFile: new Shared\\StorageFile(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->file->patchStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Calendar Link PHP\nDESCRIPTION: This code snippet demonstrates how to create a calendar link using the Unified.to PHP SDK. It requires the 'vendor/autoload.php' file and uses the `Unified_to`, `Operations`, and `Shared` namespaces. The API key needs to be set for authentication, and the connection ID should be provided.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCalendarLinkRequest(\n    calendarLink: new Shared\\CalendarLink(\n        url: 'https://sturdy-begonia.biz/',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->link->createCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing LMS Course in PHP\nDESCRIPTION: This snippet demonstrates how to remove an LMS course by its ID using the Unified.to PHP SDK. It requires the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK with an API key, constructs a `RemoveLmsCourseRequest` object with the connection ID and course ID, and calls the `removeLmsCourse` method on the `course` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/course/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsCourseRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->course->removeLmsCourse(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an ATS Job with Unified.to in PHP\nDESCRIPTION: This snippet illustrates how to remove an ATS job using the Unified.to PHP SDK. After initializing the SDK, it constructs a `RemoveAtsJobRequest` with the connection ID and job ID, calls the `removeAtsJob` method, and checks the response's status code to handle success (status code 200).\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/job/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsJobRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->job->removeAtsJob(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Journal with Unified.to PHP SDK\nDESCRIPTION: Demonstrates removing an accounting journal using the Unified.to PHP SDK. The code initializes the SDK, creates a request object containing the connection and journal IDs, and calls the `removeAccountingJournal` method. A 200 status code indicates successful removal. Requires the Unified.to PHP SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingJournalRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingJournal(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HRIS Company with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a HRIS company using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the necessary parameters (connectionId and a Shared\\HrisCompany object), and calls the createHrisCompany method on the company service. The response is then handled to process the created HRIS company data. Requires `vendor/autoload.php` and uses `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisCompanyRequest(\n    hrisCompany: new Shared\\HrisCompany(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->company->createHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Document with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create an ATS document using the Unified API PHP SDK. It initializes the SDK, sets the security context, creates a request object with necessary parameters (connectionId, atsDocument), and then calls the createAtsDocument method. It also handles the response by checking if the created atsDocument is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Course with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a course in an LMS using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The snippet constructs a request object with the LMS course details, connection ID, and course ID, then calls the `updateLmsCourse` method on the LMS client. Finally, it checks if the response contains an LMS Course.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsCourseRequest(\n    lmsCourse: new Shared\\LmsCourse(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->updateLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List API Calls with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all API Calls using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a request object, and calls the `listUnifiedApicalls` method. It requires the `vendor/autoload.php` file for autoloading dependencies and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/apicall/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedApicallsRequest();\n\n$response = $sdk->apicall->listUnifiedApicalls(\n    request: $request\n);\n\nif ($response->apiCalls !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CRM Event with Unified.to SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a CRM event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `RemoveCrmEventRequest` object with the connection ID and event ID, and then calls the `removeCrmEvent` method. The code also includes a conditional statement to handle the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->removeCrmEvent(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Repo Branch in PHP\nDESCRIPTION: This code snippet demonstrates how to update a branch using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a PatchRepoBranchRequest object with a RepoBranch payload, and calls the patchRepoBranch method. The response is then checked for repoBranch and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoBranchRequest(\n    repoBranch: new Shared\\RepoBranch(\n        name: '<value>',\n        repoId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->patchRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Unified API Call in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific API call by its ID using the PHP SDK. It depends on the `vendor/autoload.php` file. The snippet initializes the SDK, defines a `GetUnifiedApicallRequest` object with the API call ID, and sends a request to retrieve the API call. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedApicallRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->getUnifiedApicall(\n    request: $request\n);\n\nif ($response->apiCall !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Journal using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to remove an accounting journal using the Unified.to PHP SDK.  It relies on `vendor/autoload.php` and leverages the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.  The `connectionId` and `id` are required parameters passed within the request object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/journal/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingJournalRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->journal->removeAccountingJournal(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Student with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to remove a student using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The code initializes the SDK with the API key for authentication, creates a request object containing the connectionId and student id, and then calls the `removeLmsStudent` method to remove the student.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/student/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsStudentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->student->removeLmsStudent(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SCIM Users (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a new user using the Unified.to PHP SDK and the SCIM protocol. It initializes the SDK, sets up the request object with a `ScimUser` and a `connectionId`, and then calls the `createScimUsers` method.  The security API key needs to be provided.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/user/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateScimUsersRequest(\n    scimUser: new Shared\\ScimUser(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->user->createScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Order with Unified.to PHP SDK\nDESCRIPTION: Illustrates removing an accounting order using the Unified.to PHP SDK. The SDK is initialized, a request object is created with the connection and order IDs, and then the `removeAccountingOrder` method is called. A 200 status code signifies successful removal. Requires the Unified.to PHP SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingOrderRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingOrder(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch LMS Instructor using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an LMS instructor using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the instructor details, sends the request to the `patchLmsInstructor` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsInstructorRequest(\n    lmsInstructor: new Shared\\LmsInstructor(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->patchLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Ticketing Customers using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all ticketing customers using the Unified.to PHP SDK. It initializes the SDK, sets the security key, creates a request object with the connection ID, and calls the `listTicketingCustomers` method. The snippet expects a connection ID as a parameter and handles the response if the ticketing customers are successfully retrieved.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTicketingCustomersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticketing->listTicketingCustomers(\n    request: $request\n);\n\nif ($response->ticketingCustomers !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch HRIS Employee using Unified API in PHP\nDESCRIPTION: This code snippet shows how to update a HRIS employee object using the Unified API PHP SDK. It initializes the SDK with the API key, constructs a `PatchHrisEmployeeRequest` object with the employee data, connection ID, and employee ID, and calls the `patchHrisEmployee` function. It includes a basic response handling structure.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisEmployeeRequest(\n    hrisEmployee: new Shared\\HrisEmployee(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->patchHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Job in PHP\nDESCRIPTION: This PHP snippet demonstrates how to update an ATS job using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and the AtsJob object), and calls the `patchAtsJob` method. The response is then checked, and you can handle the response if the atsJob property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsJobRequest(\n    atsJob: new Shared\\AtsJob(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repo Commit using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new repository commit using the Unified.to PHP SDK. It requires the `vendor/autoload.php` for dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK with an API key, constructs a `CreateRepoCommitRequest` object containing the `RepoCommit` details and the `connectionId`, then calls the `createRepoCommit` method. The response is then handled if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commit/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(\n        repoId: '<id>',\n        userId: '<id>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->commit->createRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a KMS comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters, and then calls the `patchKmsComment` method.  The `vendor/autoload.php` file is required for autoloading the SDK dependencies. An API key is required to authenticate with the Unified.to service. The example assumes a successful update and provides a placeholder to handle the response object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        comment: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->patchKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATS Company with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an ATS company using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connectionId and the ID of the desired company, and calls the getAtsCompany method. The response is then handled to access the retrieved ATS company data. Requires `vendor/autoload.php` and uses `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->getAtsCompany(\n    request: $request\n);\n\nif ($response->atsCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LMS Instructor (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve an LMS instructor using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID and instructor ID, and then calls the `getLmsInstructor` method on the `lms` service. It requires the Unified API PHP SDK to be installed. The response contains LMS instructor details if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsInstructorRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->getLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Employee using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS employee using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveHrisEmployeeRequest` object with the connection ID and employee ID, and then calls the `removeHrisEmployee` method on the HRIS API. The `statusCode` property of the response object is checked for successful completion.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisEmployeeRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->removeHrisEmployee(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SCIM Users with Unified PHP SDK\nDESCRIPTION: This code snippet shows how to list SCIM users using the Unified PHP SDK.  It initializes the SDK, sets the security credentials, creates a request object with the connection ID, and calls the `listScimUsers` method on the `scim` service. The returned data can then be used.  The connection ID is a required parameter.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListScimUsersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->scim->listScimUsers(\n    request: $request\n);\n\nif ($response->scimUsers !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Repository Branch with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a repository branch using the Unified API's PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. The snippet initializes the Unified API SDK, sets the security credentials (API key), constructs a `UpdateRepoBranchRequest` object with the necessary parameters such as `repoBranch`, `connectionId`, and `id`, and then calls the `updateRepoBranch` method to update the branch. The response is then handled to process the updated `repoBranch` data.  It relies on the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/branch/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoBranchRequest(\n    repoBranch: new Shared\\RepoBranch(\n        name: '<value>',\n        repoId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->branch->updateRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Taxrates with PHP SDK\nDESCRIPTION: This snippet shows how to list all accounting taxrates associated with a given connection ID using the Unified.to PHP SDK. It involves initializing the SDK with your API key, creating a `ListAccountingTaxratesRequest` with the connection ID, and handling the response which will contain a list of taxrates.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/taxrate/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingTaxratesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->taxrate->listAccountingTaxrates(\n    request: $request\n);\n\nif ($response->accountingTaxrates !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Marketing Member using PHP SDK\nDESCRIPTION: This code snippet illustrates how to retrieve a marketing member using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID and an ID, and calls the getMartechMember method. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMartechMemberRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->getMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Company using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS company using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveHrisCompanyRequest` object with the connection ID and company ID, and then calls the `removeHrisCompany` method on the HRIS API to perform the removal. The snippet includes error handling by checking the HTTP status code of the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->removeHrisCompany(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Contact Example in PHP\nDESCRIPTION: This snippet showcases how to remove a CRM contact using the Unified.to PHP SDK. It requires the Unified_to library and the Models\\Operations namespace. The code initializes the SDK, sets the security credentials (API key), builds the SDK, and then calls the removeCrmContact method with a request object containing the connection and contact IDs. The response status code is then checked.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->removeCrmContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Repo Commit using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific repository commit using the Unified.to PHP SDK. It requires the `vendor/autoload.php` for dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK with an API key, constructs a `GetRepoCommitRequest` object containing the `connectionId` and the `id` of the commit, then calls the `getRepoCommit` method. The response is then handled if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commit/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoCommitRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commit->getRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Martech Member with Unified API in PHP\nDESCRIPTION: This snippet demonstrates patching a Martech member using the Unified API PHP SDK. It initializes the SDK, creates a `PatchMartechMemberRequest` with a `MarketingMember` object and IDs, and then calls the `patchMartechMember` method.  The response is handled based on the returned marketing member.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMartechMemberRequest(\n    marketingMember: new Shared\\MarketingMember(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->martech->patchMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch CRM Company using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a CRM company using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (including the company ID and connection ID), and calls the `patchCrmCompany` method. It then handles the response by checking if the returned crmCompany object is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmCompanyRequest(\n    crmCompany: new Shared\\CrmCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->patchCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Taxrate with PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an accounting taxrate using the Unified.to PHP SDK. The example initializes the SDK, creates a `RemoveAccountingTaxrateRequest` including the connection ID and the ID of the taxrate to be removed, and then sends the request. The response status code is checked to determine success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/taxrate/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingTaxrateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->taxrate->removeAccountingTaxrate(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Contact using PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve an accounting contact using the Unified.to PHP SDK.  It initializes the SDK, sets the API key, creates a request object with the connection ID and the contact ID, and then calls the getAccountingContact method.  The response is then handled to process the retrieved contact.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->getAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Item in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a commerce item by its ID using the Unified PHP SDK. It requires the `vendor/autoload.php` file for dependency management and uses the `Unified_to` and `Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK with an API key, constructs a `GetCommerceItemRequest` object with the necessary parameters (`connectionId` and `id`), and then calls the `getCommerceItem` method on the `item` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/item/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceItemRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->item->getCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HRIS Device with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create an HRIS device using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object containing the device details and connection ID, and then calls the `createHrisDevice` method. The response is then handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/device/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisDeviceRequest(\n    hrisDevice: new Shared\\HrisDevice(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->device->createHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Payment Subscription with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a payment subscription using the Unified.to PHP SDK. It initializes the SDK, creates a `RemovePaymentSubscriptionRequest` object with the necessary connection and subscription IDs, and then calls the `removePaymentSubscription` method. The response's status code is checked to handle the successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/subscription/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemovePaymentSubscriptionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->subscription->removePaymentSubscription(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Metadata with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a metadata entry using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection and metadata IDs, and calls the removeMetadataMetadata method.  The code expects that the Unified.to PHP SDK has been installed and that the security credentials are set correctly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/metadata/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMetadataMetadataRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->metadata->removeMetadataMetadata(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Payment Subscription in Unified.to PHP\nDESCRIPTION: This snippet updates a payment subscription using the Unified.to PHP SDK. It initializes the SDK, creates a request object including the connectionId, the subscription id, and a PaymentSubscription object with updated values, and then calls the `patchPaymentSubscription` method to update the subscription. Requires the Unified.to SDK and the `vendor/autoload.php` file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/subscription/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPaymentSubscriptionRequest(\n    paymentSubscription: new Shared\\PaymentSubscription(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->subscription->patchPaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Taxrate with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting taxrate using the Unified.to PHP SDK. It initializes the SDK, creates a `PatchAccountingTaxrateRequest` object, and calls the `patchAccountingTaxrate` method. The connection ID and taxrate ID must be provided in the request. Error handling is not explicitly shown, but a 4XX or 5XX status code indicates an SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingTaxrateRequest(\n    accountingTaxrate: new Shared\\AccountingTaxrate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting SCIM Users (PHP)\nDESCRIPTION: This code snippet demonstrates how to delete a user using the Unified.to PHP SDK and the SCIM protocol. It initializes the SDK, creates a `RemoveScimUsersRequest` with a `connectionId` and `id`, and then calls the `removeScimUsers` method.  It expects a security API key to be configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/user/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveScimUsersRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->user->removeScimUsers(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Order with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting order using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateAccountingOrderRequest` object with the necessary parameters, and then calls the `updateAccountingOrder` method. The response is then checked to handle success or failure. Requires the Unified.to PHP SDK to be installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingOrderRequest(\n    accountingOrder: new Shared\\AccountingOrder(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update HRIS Location with Unified.to PHP SDK\nDESCRIPTION: This snippet updates a location using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK with an API key, creates a request object with the location data and connection/location IDs, and then sends the request to the `updateHrisLocation` method. Finally, it handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisLocationRequest(\n    hrisLocation: new Shared\\HrisLocation(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->updateHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HRIS Group with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an HRIS group using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and group details, and then calls the `createHrisGroup` method.  A valid API key is required for authentication. Error handling is not explicitly shown, but the response object provides access to returned data. The `vendor/autoload.php` file must be included to load dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisGroupRequest(\n    hrisGroup: new Shared\\HrisGroup(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->group->createHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List CRM Companies with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to list CRM companies using the Unified API PHP SDK. It initializes the SDK, sets the security token, creates a request object, and calls the `listCrmCompanies` method. The code handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->company->listCrmCompanies(\n    request: $request\n);\n\nif ($response->crmCompanies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Payment Link - Unified.to PHP\nDESCRIPTION: This code demonstrates removing a payment link using the Unified.to PHP SDK. It initializes the SDK, creates a `RemovePaymentLinkRequest`, and calls the `removePaymentLink` method. It then checks the status code to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemovePaymentLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->removePaymentLink(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Collections with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list commerce collections using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listCommerceCollections` method. The response is then handled to process the retrieved commerce collections. It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceCollectionsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->listCommerceCollections(\n    request: $request\n);\n\nif ($response->commerceCollections !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Company using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to completely update a CRM company using the Unified.to PHP SDK. The SDK is initialized, and a request object including crmCompany, connectionId and Id is constructed. The `updateCrmCompany` method is then called. The response's crmCompany object is checked for null to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmCompanyRequest(\n    crmCompany: new Shared\\CrmCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->updateCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an HRIS Device with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS device using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object that includes the connection ID and device ID, and then calls the `removeHrisDevice` method. The response status code is checked to verify successful deletion.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/device/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisDeviceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->device->removeHrisDevice(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching an ATS Job with Unified.to in PHP\nDESCRIPTION: This code shows how to partially update an ATS job using the Unified.to PHP SDK. It initializes the SDK with the API key, creates a `PatchAtsJobRequest` object which includes the connection ID, the ATS job ID, and an `AtsJob` object with updated fields. It then calls the `patchAtsJob` method to perform the update. Finally, it checks for a returned `atsJob` object in the response and handles it.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/job/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsJobRequest(\n    atsJob: new Shared\\AtsJob(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->job->patchAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a KMS Page using Unified.to PHP SDK\nDESCRIPTION: This code snippet illustrates how to remove a KMS page using the Unified.to PHP SDK.  It initializes the SDK, constructs a request object with the connectionId and the page id to be removed, and calls the removeKmsPage function. The code requires the vendor autoload file and the Unified and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/page/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveKmsPageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->page->removeKmsPage(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Journal with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting journal using the Unified.to PHP SDK. It initializes the SDK, creates a `PatchAccountingJournalRequest` object, and calls the `patchAccountingJournal` method. The connection ID and journal ID must be provided in the request.  Error handling is not explicitly shown, but a 4XX or 5XX status code indicates an SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update (Patch) Ticketing Customer in PHP\nDESCRIPTION: This snippet shows how to update (patch) a specific ticketing customer using the Unified.to PHP SDK. It requires `vendor/autoload.php` for autoloading, and utilizes the `Unified_to`, `Operations`, and `Shared` namespaces. The SDK is initialized, the API key is set, a `PatchTicketingCustomerRequest` object is created with connection ID, customer ID, and the customer details to update, and the `patchTicketingCustomer` method is called.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/customer/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTicketingCustomerRequest(\n    ticketingCustomer: new Shared\\TicketingCustomer(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->customer->patchTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing UC Contact using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a UC contact using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and contact ID, and then calls the `removeUcContact` method. The snippet includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveUcContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->removeUcContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove HRIS Company using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a HRIS company using the Unified.to PHP SDK. It initializes the SDK with the API key, creates a request object that contains connectionId and id, and calls the `removeHrisCompany` method. The response status code is checked to determine the success of the deletion operation.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->removeHrisCompany(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Repo Branch with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a repository branch using the Unified API PHP SDK.  It initializes the SDK with an API key, constructs a request object that includes a `RepoBranch` object with updated branch information (name and repoId), along with connection and branch IDs. It calls the `updateRepoBranch` method and handles the response if the `repoBranch` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoBranchRequest(\n    repoBranch: new Shared\\RepoBranch(\n        name: '<value>',\n        repoId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->updateRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Payment Subscription in Unified.to PHP\nDESCRIPTION: This snippet retrieves a payment subscription using the Unified.to PHP SDK.  It initializes the SDK, defines a request including the connectionId and subscription id, and calls the `getPaymentSubscription` method to fetch the subscription details. Requires the Unified.to SDK and the `vendor/autoload.php` file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/subscription/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentSubscriptionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->subscription->getPaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Webhook with Unified PHP SDK\nDESCRIPTION: This snippet shows how to trigger a webhook using the Unified PHP SDK. It takes the webhook `id` as input and uses the `updateUnifiedWebhookTrigger` method to initiate the trigger. The snippet also includes basic error handling to check the response status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUnifiedWebhookTriggerRequest(\n    id: '<id>',\n);\n\n$response = $sdk->webhook->updateUnifiedWebhookTrigger(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Commerce Collection using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a commerce collection using the Unified API's PHP SDK.  It initializes the SDK, creates a request object with the connectionId and id, and then calls the `removeCommerceCollection` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceCollectionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->removeCommerceCollection(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Courses in PHP\nDESCRIPTION: This snippet demonstrates how to list all LMS courses for a given connection ID using the Unified.to PHP SDK. It requires the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK with an API key, constructs a `ListLmsCoursesRequest` object with the connection ID, and calls the `listLmsCourses` method on the `course` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/course/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsCoursesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->course->listLmsCourses(\n    request: $request\n);\n\nif ($response->lmsCourses !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Scorecard with PHP SDK\nDESCRIPTION: Demonstrates how to update an ATS scorecard using the `patchAtsScorecard` method of the Unified.to PHP SDK.  The example requires the Unified.to PHP SDK, specifying the security key, connection ID, and scorecard ID. It initializes the SDK, creates a `PatchAtsScorecardRequest` object, and makes the API call.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scorecard/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsScorecardRequest(\n    atsScorecard: new Shared\\AtsScorecard(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scorecard->patchAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ATS Job with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new ATS job using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. The code initializes the Unified.to SDK with an API key, constructs a `CreateAtsJobRequest` object with the necessary parameters (connection ID and AtsJob object), and then calls the `createAtsJob` method. Finally, it checks if the response contains an `atsJob` object and handles the response accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/job/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsJobRequest(\n    atsJob: new Shared\\AtsJob(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->job->createAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Repo Pull Request with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to remove a repository pull request using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and pull request IDs, and calls the `removeRepoPullrequest` method. A status code of 200 indicates a successful deletion.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoPullrequestRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->removeRepoPullrequest(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization PHP\nDESCRIPTION: This snippet demonstrates how to retrieve an organization using the Unified.to PHP SDK. It initializes the SDK, creates a `GetRepoOrganizationRequest` with the connection ID and organization ID, and then calls the `getRepoOrganization` method to retrieve the organization. The code includes error handling to check if the retrieval was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoOrganizationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->getRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Scorecard using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS scorecard using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and AtsScorecard object), and calls the `updateAtsScorecard` method.  It requires the `vendor/autoload.php` file for dependency management and expects a valid API key for authentication. The `AtsScorecard` object within the request holds the updated scorecard details.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsScorecardRequest(\n    atsScorecard: new Shared\\AtsScorecard(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing UC Contact in PHP\nDESCRIPTION: This snippet demonstrates how to remove a contact using the Unified PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified_to`, `Unified_to\\Models\\Operations` namespaces. The API key is used for authentication, and the `connectionId` and `id` are required parameters in the request.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveUcContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->uc->removeUcContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch HRIS Company using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a HRIS company object using the Unified API PHP SDK. It initializes the SDK, sets the security credentials, constructs a request object with the company data and required parameters, and calls the `patchHrisCompany` method. The `request` parameter includes the company data, connection ID, and the ID of the company to update. Error handling should be implemented to deal with potential issues during the API call.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisCompanyRequest(\n    hrisCompany: new Shared\\HrisCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->patchHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Accounting Contact Example in PHP\nDESCRIPTION: This snippet demonstrates removing an accounting contact using the Unified.to PHP SDK. It requires the Unified_to library and uses the Models\\Operations namespace. The example initializes the SDK with API key authentication, constructs a request object containing the connection and contact IDs, and calls the removeAccountingContact method. It checks the status code for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->removeAccountingContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Task Task Example in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a task using the Unified PHP SDK. It sets up the SDK with the API key for authentication, creates a request object with the connectionId and the ID of the task to be removed, and then calls the `removeTaskTask` method on the `task` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTaskTaskRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->removeTaskTask(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ticketing Ticket with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (ticketingTicket, connectionId, and id), and then calls the updateTicketingTicket function.  It includes response handling by checking if ticketingTicket is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTicketingTicketRequest(\n    ticketingTicket: new Shared\\TicketingTicket(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->updateTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List ATS Companies with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to list ATS companies using the Unified API PHP SDK. It initializes the SDK, sets the security token, creates a request object, and calls the `listAtsCompanies` method. The code handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->company->listAtsCompanies(\n    request: $request\n);\n\nif ($response->atsCompanies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Repo PullRequests with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all repository pull requests using the Unified.to PHP SDK. It initializes the SDK, sets up the request with a connection ID, and then calls the `listRepoPullrequests` method. The example handles potential responses.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pullrequest/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoPullrequestsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->pullrequest->listRepoPullrequests(\n    request: $request\n);\n\nif ($response->repoPullrequests !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Candidate with PHP SDK\nDESCRIPTION: This code snippet illustrates how to update an ATS candidate using the Unified.to PHP SDK. It initializes the SDK, constructs a request object that includes the updated candidate details, the connection ID, and candidate ID, and finally invokes the `patchAtsCandidate` method. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations` and `Unified\\Unified_to\\Models\\Shared` namespaces. Replace `<YOUR_API_KEY_HERE>` and `<id>` with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsCandidateRequest(\n    atsCandidate: new Shared\\AtsCandidate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Task Projects with Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to list all task projects associated with a specific connection using the Unified.to PHP SDK. It requires `vendor/autoload.php` for dependency management and uses the `Unified\\Unified_to` namespace.  An API key is needed for authentication, and the connection ID specifies the target connection.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/project/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTaskProjectsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->project->listTaskProjects(\n    request: $request\n);\n\nif ($response->taskProjects !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Getting SCIM User by ID (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve a user by their ID using the Unified.to PHP SDK and the SCIM protocol. It initializes the SDK, creates a `GetScimUsersRequest` with a `connectionId` and an `id`, and then calls the `getScimUsers` method to fetch the user's details. A security API key needs to be set.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/user/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetScimUsersRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->user->getScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Payment Link with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a payment link using the Unified API and its PHP SDK.  It initializes the SDK, creates a request object using connectionId, id, and a PaymentLink object, and calls the updatePaymentLink method. It then checks if the response contains a PaymentLink object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePaymentLinkRequest(\n    paymentLink: new Shared\\PaymentLink(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->updatePaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Accounting Tax Rate with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an accounting tax rate using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a RemoveAccountingTaxrateRequest object with the connection ID and tax rate ID, and then calls the removeAccountingTaxrate method. The response's status code is checked to handle successful or failed requests.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingTaxrateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingTaxrate(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Contact using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a CRM contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and contact IDs, and then calls the `removeCrmContact` method.  It includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->removeCrmContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Lead Example (PHP)\nDESCRIPTION: This code snippet demonstrates how to update a CRM lead using the Unified PHP SDK. It initializes the SDK, defines an `UpdateCrmLeadRequest` object containing updated lead information, and then calls the `updateCrmLead` method on the `crm` service. The response is checked for a non-null `crmLead` property, indicating a successful update. The API key needs to be set in the SDK builder, and `connectionId` and `id` must be replaced with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmLeadRequest(\n    crmLead: new Shared\\CrmLead(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->updateCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ATS Company in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific company from an Applicant Tracking System (ATS) using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary connection and company IDs, and then calls the `getAtsCompany` method. The response is then checked to see if an `atsCompany` exists and handles it accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsCompany(\n    request: $request\n);\n\nif ($response->atsCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Uc Contacts with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all contacts using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then calls the listUcContacts method with a request object containing the connection ID. It requires the Unified_to SDK and the Models/Operations namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUcContactsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->uc->listUcContacts(\n    request: $request\n);\n\nif ($response->ucContacts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UC Contact using PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a UC contact using the Unified.to PHP SDK.  It initializes the SDK, sets the API key, creates a request object containing the connection ID and contact details, and then calls the createUcContact method. The response is handled to process the created contact.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateUcContactRequest(\n    ucContact: new Shared\\UcContact(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->contact->createUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Transactions with Unified.to PHP SDK\nDESCRIPTION: This code snippet illustrates how to retrieve a list of accounting transactions using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID, and then calls the `listAccountingTransactions` method. It requires the Unified.to PHP SDK to be installed via composer. The response includes a list of AccountingTransactions.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/transaction/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingTransactionsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->transaction->listAccountingTransactions(\n    request: $request\n);\n\nif ($response->accountingTransactions !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Journals using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all accounting journals using the Unified.to PHP SDK. It relies on `vendor/autoload.php` for dependency management and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The `connectionId` is passed as part of the request object to specify the integration.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/journal/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingJournalsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->journal->listAccountingJournals(\n    request: $request\n);\n\nif ($response->accountingJournals !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update LMS Class with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an LMS class using the Unified PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. The code constructs a request object with the necessary parameters, including connection ID, LMS class ID, and the updated LMS class data. It then calls the `updateLmsClass` method on the `class` service and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/class/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsClassRequest(\n    lmsClass: new Shared\\LmsClass(\n        courseId: '<id>',\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->class->updateLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Deal using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a CRM deal using the Unified API PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes classes from the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The example shows setting the API key, constructing an `UpdateCrmDealRequest` object, and handling the `CrmDeal` object within the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/deal/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmDealRequest(\n    crmDeal: new Shared\\CrmDeal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->deal->updateCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing SCIM Groups with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to delete a SCIM group using the Unified PHP SDK.  It initializes the SDK, sets the security credentials, creates a `RemoveScimGroupsRequest` object with the connection ID and group ID, and calls the `removeScimGroups` method on the `scim` service. The connection ID and ID of the group to be removed are required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveScimGroupsRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->removeScimGroups(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Payment Subscriptions in Unified.to PHP\nDESCRIPTION: This snippet lists all payment subscriptions associated with a specific connection using the Unified.to PHP SDK. It initializes the SDK, defines a request including the connectionId, and calls the `listPaymentSubscriptions` method to retrieve the list of subscriptions. Requires the Unified.to SDK and the `vendor/autoload.php` file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/subscription/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentSubscriptionsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->subscription->listPaymentSubscriptions(\n    request: $request\n);\n\nif ($response->paymentSubscriptions !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SCIM Users with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to update a SCIM user using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the user details and IDs, and then calls the `updateScimUsers` method. The response is checked to handle the updated user data. It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateScimUsersRequest(\n    scimUser: new Shared\\ScimUser(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->updateScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Candidates using Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to list all ATS candidates using the Unified.to PHP SDK. It initializes the SDK, creates a `ListAtsCandidatesRequest` object with `connectionId`, and calls the `listAtsCandidates` method. It requires the `vendor/autoload.php` file and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/candidate/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsCandidatesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->candidate->listAtsCandidates(\n    request: $request\n);\n\nif ($response->atsCandidates !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Order with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting order using the Unified.to PHP SDK. It initializes the SDK, creates a `PatchAccountingOrderRequest` object, and calls the `patchAccountingOrder` method. The connection ID and order ID must be provided in the request. Error handling is not explicitly shown, but a 4XX or 5XX status code indicates an SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingOrderRequest(\n    accountingOrder: new Shared\\AccountingOrder(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Account (Patch) using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an existing accounting account using the `patchAccountingAccount` method of the Unified.to PHP SDK.  It initializes the SDK with an API key, creates a `PatchAccountingAccountRequest` object, including the `AccountingAccount` model, connection ID, and account ID, and then executes the patch operation. The code requires the `vendor/autoload.php` file for autoloading and utilizes the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/account/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->account->patchAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Document with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new ATS document using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object with the necessary parameters (connectionId and AtsDocument object), and then calls the createAtsDocument method on the document service. The response object is then checked for a valid AtsDocument to handle the result.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/document/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->document->createAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Calendar Links PHP\nDESCRIPTION: This code snippet retrieves a list of calendar links using the Unified.to PHP SDK. The `connectionId` is a required parameter for specifying the integration.  An API key is needed to initialize the SDK for authentication.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarLinksRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->link->listCalendarLinks(\n    request: $request\n);\n\nif ($response->calendarLinks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Group using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a HRIS group using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and group ID, and then calls the `getHrisGroup` method. Error handling is done via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisGroupRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LMS Instructor in PHP\nDESCRIPTION: This snippet demonstrates how to create a new instructor using the Unified.to PHP SDK. It initializes the SDK, creates a request object, and sends the request to the createLmsInstructor endpoint. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsInstructorRequest(\n    lmsInstructor: new Shared\\LmsInstructor(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->createLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Reports in PHP\nDESCRIPTION: This code snippet demonstrates how to list accounting reports using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and calls the `listAccountingReports` function to retrieve the reports.  It requires the Unified PHP SDK installed and the `vendor/autoload.php` file included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingReportsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingReports(\n    request: $request\n);\n\nif ($response->accountingReports !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Order in PHP\nDESCRIPTION: This code snippet demonstrates how to remove an accounting order using the Unified.to PHP SDK. It initializes the SDK with an API key and creates a `RemoveAccountingOrderRequest` object with the `connectionId` and `id` of the order to remove. The `removeAccountingOrder` method is invoked on the `order` service. The code then checks the `statusCode` of the response to confirm a successful deletion.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/order/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingOrderRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->order->removeAccountingOrder(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Timeoff Record using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific timeoff record using the `getHrisTimeoff` method of the Unified PHP SDK. It requires the `connectionId` and `id` of the timeoff record. It initializes the SDK, creates a request object, calls the method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/timeoff/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisTimeoffRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->timeoff->getHrisTimeoff(\n    request: $request\n);\n\nif ($response->hrisTimeoff !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Report with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a single accounting report using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for dependency management and uses the `GetAccountingReportRequest` model for constructing the request with a connection ID and report ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/report/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingReportRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->report->getAccountingReport(\n    request: $request\n);\n\nif ($response->accountingReport !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Repository using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository using the Unified PHP SDK. It initializes the SDK, creates a request object with the updated repository details, and calls the `updateRepoRepository` function. The response is then handled to process the updated repository information.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repository/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoRepositoryRequest(\n    repoRepository: new Shared\\RepoRepository(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repository->updateRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List KMS Comments using Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to list all KMS comments using the Unified.to PHP SDK. It involves initializing the SDK with the API key, creating a request object with the connection ID, calling the `listKmsComments` method, and then checking the response for a valid list of KMS comments.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListKmsCommentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->kms->listKmsComments(\n    request: $request\n);\n\nif ($response->kmsComments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Collection with Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to update a commerce collection using the Unified.to PHP SDK. It initializes the SDK, creates a request object including the commerce collection details, connection ID, and collection ID, and then calls the `updateCommerceCollection` method. It requires the Unified.to PHP SDK and autoloading. It expects a valid connection ID, collection ID, and commerce collection details as input and handles the response when the commerce collection object is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/collection/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->collection->updateCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Repo Repository with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to remove a repository using the Unified API PHP SDK. It initializes the SDK, creates a request object containing the connection and repository IDs, and then calls the `removeRepoRepository` method. A 200 status code signifies a successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoRepositoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->removeRepoRepository(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATS Document with Unified.to PHP SDK\nDESCRIPTION: This code snippet shows how to retrieve an existing ATS document by its ID using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object containing the connectionId and document ID, and then calls the getAtsDocument method. The response is checked to ensure an AtsDocument is returned, allowing for subsequent handling.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/document/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsDocumentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->document->getAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Class with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a class in an LMS using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The snippet constructs a request object with the LMS class details, connection ID, and class ID, then calls the `updateLmsClass` method on the LMS client.  Finally, it checks if the response contains a LMS class.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsClassRequest(\n    lmsClass: new Shared\\LmsClass(\n        courseId: '<id>',\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->updateLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Calendar Event with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a calendar event using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection and event IDs, calls the getCalendarEvent method, and handles the response. The code requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->getCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing LmsClass with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an LMS class using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a `RemoveLmsClassRequest` object with the connection ID and the LMS class ID, and calls the `removeLmsClass` method on the `class` service. The response status code is checked to determine success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/class/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsClassRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->class->removeLmsClass(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ticketing Note with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a ticketing note using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (ticketingNote, connectionId, and id), and then calls the updateTicketingNote function. It includes response handling by checking if ticketingNote is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTicketingNoteRequest(\n    ticketingNote: new Shared\\TicketingNote(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->updateTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Scorecard with PHP SDK\nDESCRIPTION: Demonstrates how to create an ATS scorecard using the Unified.to PHP SDK. It initializes the SDK, creates a `CreateAtsScorecardRequest` object, and calls the `createAtsScorecard` method on the scorecard service. The example requires the Unified.to PHP SDK and specifies the security key and connection ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scorecard/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsScorecardRequest(\n    atsScorecard: new Shared\\AtsScorecard(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->scorecard->createAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LMS Instructor with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an LMS instructor using the Unified API PHP SDK. It initializes the SDK, constructs a request object with necessary parameters like connection ID and instructor ID, and then calls the `updateLmsInstructor` method. The response is then handled to process the updated instructor data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/instructor/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateLmsInstructorRequest(\n    lmsInstructor: new Shared\\LmsInstructor(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->instructor->updateLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Ticketing Ticket in PHP\nDESCRIPTION: This snippet demonstrates how to remove a ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then deletes the ticket by its ID using the `removeTicketingTicket` method. It requires the `Unified/Unified_to` and `Unified/Unified_to/Models/Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticket/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingTicketRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticket->removeTicketingTicket(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Payslip using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific payslip using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. The `connectionId` and `id` parameters are required to identify the specific payslip to retrieve.  The API key must be set in the `setSecurity` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payslip/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisPayslipRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payslip->getHrisPayslip(\n    request: $request\n);\n\nif ($response->hrisPayslip !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Passthrough Raw with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update passthrough data in raw format using the Unified API PHP SDK. It initializes the SDK, creates an `UpdatePassthroughRawRequest` object, and then calls the `updatePassthroughRaw` method. Replace `<YOUR_API_KEY_HERE>` and `<id>` with your actual API key and connection ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePassthroughRawRequest(\n    connectionId: '<id>',\n    path: '/System',\n);\n\n$response = $sdk->passthrough->updatePassthroughRaw(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Payment Link - Unified.to PHP\nDESCRIPTION: This code snippet demonstrates how to update a payment link using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `PatchPaymentLinkRequest` object, and calls the `patchPaymentLink` method. The code then handles the response if the `paymentLink` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPaymentLinkRequest(\n    paymentLink: new Shared\\PaymentLink(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->patchPaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Repo Commits using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all repository commits for a connection using the Unified.to PHP SDK. It requires the `vendor/autoload.php` for dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK with an API key, constructs a `ListRepoCommitsRequest` object containing the `connectionId`, then calls the `listRepoCommits` method. The response is then handled if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commit/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoCommitsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->commit->listRepoCommits(\n    request: $request\n);\n\nif ($response->repoCommits !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching LMS Course in PHP\nDESCRIPTION: This snippet demonstrates how to partially update an LMS course using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK with an API key, constructs a `PatchLmsCourseRequest` object with the connection ID, course ID, and the updated `LmsCourse` object, and calls the `patchLmsCourse` method on the `course` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/course/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsCourseRequest(\n    lmsCourse: new Shared\\LmsCourse(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->course->patchLmsCourse(\n    request: $request\n);\n\nif ($response->lmsCourse !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Account using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve an existing accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `GetAccountingAccountRequest` object with the connection ID and the ID of the account to retrieve, and then calls the `getAccountingAccount` method on the `account` service.  It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/account/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingAccountRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->account->getAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Accounting Invoice using Unified.to PHP SDK\nDESCRIPTION: This snippet updates an accounting invoice using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `PatchAccountingInvoiceRequest` object with necessary parameters such as `connectionId` and `id`, then calls the `patchAccountingInvoice` method. The snippet requires the Unified.to PHP SDK from Composer, an API key, and valid resource IDs. After the API call, it checks if the response is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingInvoiceRequest(\n    accountingInvoice: new Shared\\AccountingInvoice(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an ATS Interview using PHP SDK\nDESCRIPTION: This example demonstrates removing an ATS interview with the Unified PHP SDK. It uses autoloading and the `Unified\\Unified_to` namespace. A `RemoveAtsInterviewRequest` is created with connection and interview IDs, and the `removeAtsInterview` method is invoked.  A 200 status code signifies that the interview was successfully removed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsInterviewRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsInterview(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List KMS Pages using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all KMS pages using the Unified.to PHP SDK. The process includes initializing the SDK with necessary security credentials, creating a request object with the connection ID, invoking the `listKmsPages` method, and validating the response to ensure the presence of KMS pages.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListKmsPagesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->kms->listKmsPages(\n    request: $request\n);\n\nif ($response->kmsPages !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Ticketing Customer in PHP\nDESCRIPTION: This snippet demonstrates how to create a new ticketing customer using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies, and utilizes the `Unified_to`, `Operations`, and `Shared` namespaces. It initializes the SDK, sets the API key, creates a `CreateTicketingCustomerRequest` object with the connection ID and ticketing customer details, and then calls the `createTicketingCustomer` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/customer/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTicketingCustomerRequest(\n    ticketingCustomer: new Shared\\TicketingCustomer(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->customer->createTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch HRIS Group using Unified API in PHP\nDESCRIPTION: This code snippet presents how to update a HRIS group object using the Unified API PHP SDK. It initializes the SDK with security credentials, then creates a `PatchHrisGroupRequest` object containing the group data, connection ID and ID. It then calls the `patchHrisGroup` API method and includes a response handling structure.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisGroupRequest(\n    hrisGroup: new Shared\\HrisGroup(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->patchHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Groups with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a HRIS group using the Unified API PHP SDK. It initializes the SDK with an API key, creates a `RemoveHrisGroupRequest` object with a connection ID and group ID, calls the `removeHrisGroup` method on the `group` service, and then handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisGroupRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->removeHrisGroup(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch LMS Student using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an LMS student using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the student details, sends the request to the `patchLmsStudent` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsStudentRequest(\n    lmsStudent: new Shared\\LmsStudent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->patchLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with the Unified PHP SDK\nDESCRIPTION: Demonstrates how to create a new document using the Unified PHP SDK's `createAtsDocument` method. This snippet shows how to include the autoloader, define necessary namespaces, create the SDK instance with security credentials, construct the request object with document details and connection ID, and then make the API call. The response is then validated to determine if the document was created successfully and is handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kms Spaces using Unified.to PHP SDK\nDESCRIPTION: This code snippet showcases how to list all Kms Spaces associated with a connection using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object containing the connection ID, and calls the `listKmsSpaces` method on the `space` service. The retrieved list of Kms Spaces is then handled. Requires the Unified.to PHP SDK to be installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/space/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListKmsSpacesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->space->listKmsSpaces(\n    request: $request\n);\n\nif ($response->kmsSpaces !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove LMS Course using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an LMS course using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection and course ID, sends the request to the `removeLmsCourse` method, and handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsCourseRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->removeLmsCourse(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Document with PHP SDK\nDESCRIPTION: This code snippet demonstrates patching an ATS document using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object containing the document data to update, the connection ID, and the document ID. The snippet then calls the `patchAtsDocument` method of the SDK's `ats` service.  The snippet requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations` and `Unified\\Unified_to\\Models\\Shared` namespaces. Replace `<YOUR_API_KEY_HERE>` and `<id>` with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Payslips using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all payslips for a given connection using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. The `connectionId` parameter is required to specify the connection to retrieve payslips from. The API key must be set in the `setSecurity` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payslip/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisPayslipsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payslip->listHrisPayslips(\n    request: $request\n);\n\nif ($response->hrisPayslips !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Task Comments with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to list task comments using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID, calls the listTaskComments method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTaskCommentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->comment->listTaskComments(\n    request: $request\n);\n\nif ($response->taskComments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching LMS Instructor with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an LMS instructor partially using the Unified.to PHP SDK. It initializes the SDK, constructs a `PatchLmsInstructorRequest` with a connection ID, an instructor ID and an `LmsInstructor` object containing the fields to be updated, and then calls the `patchLmsInstructor` method. The response is handled to process the updated instructor object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/instructor/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsInstructorRequest(\n    lmsInstructor: new Shared\\LmsInstructor(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->instructor->patchLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Contact using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a CRM contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetCrmContactRequest` object with the necessary parameters (connectionId and id), and then calls the `getCrmContact` method. Finally, it checks if the response contains a CRM contact and handles the response accordingly. Requires 'vendor/autoload.php' for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->getCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Martech Member in PHP\nDESCRIPTION: This code snippet demonstrates how to update a marketing member using the Unified PHP SDK. It requires the Unified SDK to be installed and configured, along with the necessary models for requests and shared data. The example shows the instantiation of the SDK, setting the API key, creating a request object, and calling the `updateMartechMember` function.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/member/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMartechMemberRequest(\n    marketingMember: new Shared\\MarketingMember(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->member->updateMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Commerce Collection PHP\nDESCRIPTION: This snippet shows how to update a commerce collection using the Unified PHP SDK. It initializes the SDK with an API key, creates a request object containing the updated collection data along with connection and collection IDs, and then calls the updateCommerceCollection method. It checks for a non-null commerceCollection in the response to handle the update. Requires 'vendor/autoload.php'.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->updateCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AtsInterview with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an AtsInterview using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a request object with the necessary parameters, and calls the `createAtsInterview` method. The response is then handled to process the created interview data. Requires the Unified.to PHP SDK and `vendor/autoload.php` for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/interview/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsInterviewRequest(\n    atsInterview: new Shared\\AtsInterview(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->interview->createAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Repository with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a repository using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `GetRepoRepositoryRequest` model for defining the request.  The `connectionId` and `id` parameters within the `GetRepoRepositoryRequest` model specify the connection and repository ID to retrieve. Replace `<YOUR_API_KEY_HERE>` with your actual API key and `<id>` with the connection and repository IDs.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repository/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoRepositoryRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repository->getRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Commerce Collection with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a commerce collection using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object with collection details, and calls the createCommerceCollection method. The code uses the Shared\\CommerceCollection model to define the collection and handles the response if the operation is successful. It requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/collection/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->collection->createCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Task Comment with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a task comment using the Unified PHP SDK. It initializes the SDK, creates a request object containing the connection ID, comment ID, task ID, and the new comment text. The patchTaskComment method is called to update the task comment.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(\n        taskId: '<id>',\n        text: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->patchTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Project with Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to create a new task project using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for dependency management and uses the `Unified\\Unified_to` namespace.  An API key is needed for authentication, and the connection ID specifies the target connection.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/project/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTaskProjectRequest(\n    taskProject: new Shared\\TaskProject(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->project->createTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating KMS Space with Unified API in PHP\nDESCRIPTION: This code snippet shows how to update a KMS space using the Unified API PHP SDK. It initializes the SDK, creates a request object with the updated space details (name), connection ID, and space ID. After creating the request, it calls the `updateKmsSpace` method and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateKmsSpaceRequest(\n    kmsSpace: new Shared\\KmsSpace(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->updateKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Devices with Unified.to in PHP\nDESCRIPTION: This code snippet illustrates how to list all HRIS devices associated with a specific connection using the Unified.to PHP SDK.  It initializes the SDK using an API key, constructs a request object with the connection ID, and then calls the `listHrisDevices` method. The resulting list of HRIS devices is then processed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/device/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisDevicesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->device->listHrisDevices(\n    request: $request\n);\n\nif ($response->hrisDevices !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Repo Branch in PHP\nDESCRIPTION: This snippet demonstrates how to partially update an existing repository branch using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the updated branch details (name, repoId), and then calls the patchRepoBranch method.  It depends on the Unified.to PHP SDK being installed via Composer and requires a valid API key, connection ID, and branch ID. Only the provided fields in RepoBranch will be updated.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/branch/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoBranchRequest(\n    repoBranch: new Shared\\RepoBranch(\n        name: '<value>',\n        repoId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->branch->patchRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Ticketing Customer in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a ticketing customer using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. An API key is required for authentication. The `connectionId` and `id` are used to specify the customer to retrieve.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTicketingCustomerRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->getTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a KMS Page using Unified.to PHP SDK\nDESCRIPTION: This code snippet shows how to retrieve a specific KMS page using the Unified.to PHP SDK. It initializes the SDK, constructs a request object with the required connectionId and page id, and then calls the getKmsPage function. It depends on the vendor autoload file and the Unified and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/page/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetKmsPageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->page->getKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Documents with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list ATS documents using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a `ListAtsDocumentsRequest` object with the connection ID, calls the `listAtsDocuments` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsDocumentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsDocuments(\n    request: $request\n);\n\nif ($response->atsDocuments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Uc Contact with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a contact using the Unified.to PHP SDK's PATCH operation. It initializes the SDK, sets the API key, and then calls the patchUcContact method with a request object containing the contact details, connection ID, and contact ID. It requires the Unified_to SDK and the Models/Operations and Models/Shared namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUcContactRequest(\n    ucContact: new Shared\\UcContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->uc->patchUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List HRIS Devices in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of HRIS devices using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListHrisDevicesRequest` object with a connection ID, and then calls the `listHrisDevices` method to retrieve the list of devices. The response is then checked for a valid `hrisDevices` object. Dependencies include the Unified.to PHP SDK and the `ListHrisDevicesRequest` model.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisDevicesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisDevices(\n    request: $request\n);\n\nif ($response->hrisDevices !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HRIS Location using Unified.to SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to update an HRIS location using the Unified.to SDK in PHP. It initializes the SDK, creates a request object including the HRIS location, connection ID, and location ID, and then calls the `updateHrisLocation` method. The example includes basic response handling to check if the location was updated successfully.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisLocationRequest(\n    hrisLocation: new Shared\\HrisLocation(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->updateHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to patch a Unified connection using the PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary parameters, and then calls the `patchUnifiedConnection` method.  The example shows a general structure, but lacks specific details about the Webhook object parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedConnectionRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Deleted,\n        objectType: Shared\\ObjectType::CrmLead,\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->unified->patchUnifiedConnection(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch HRIS Device using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a HRIS device object using the Unified API PHP SDK. The snippet initializes the SDK with an API key, creates a `PatchHrisDeviceRequest` object with the device data, connection ID, and device ID. It then calls the `patchHrisDevice` method of the `hris` API to update the HRIS device, and includes a placeholder for response handling.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisDeviceRequest(\n    hrisDevice: new Shared\\HrisDevice(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->patchHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Calendar Link PHP\nDESCRIPTION: This code snippet demonstrates retrieving a calendar link using the Unified.to PHP SDK. The SDK must be initialized with an API key for authentication.  The `connectionId` and `id` parameters are required to identify the specific calendar link to retrieve.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->getCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing LMS Instructor with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an LMS instructor using the Unified.to PHP SDK. It initializes the SDK, constructs a `RemoveLmsInstructorRequest` with a connection ID and an instructor ID, and then calls the `removeLmsInstructor` method. The response status code is checked to confirm successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/instructor/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsInstructorRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->instructor->removeLmsInstructor(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Contact with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a CRM contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object containing the contact data and connection ID, and then calls the createCrmContact method. This example depends on the Unified.to PHP SDK being installed via Composer, and the availability of relevant models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmContactRequest(\n    crmContact: new Shared\\CrmContact(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->createCrmContact(\n    request: $request\n);\n\nif ($response->crmContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Repository with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to partially update a repository using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies, and it utilizes the `PatchRepoRepositoryRequest` and `RepoRepository` models to define the request payload.  The `name` parameter within the `RepoRepository` model specifies the new name to update, and the `connectionId` and `id` parameters specify the connection and repository ID to update. Replace `<YOUR_API_KEY_HERE>` with your actual API key and `<id>` and `<value>` with appropriate values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repository/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoRepositoryRequest(\n    repoRepository: new Shared\\RepoRepository(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repository->patchRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Accounting Invoice in PHP\nDESCRIPTION: This example demonstrates how to update an existing accounting invoice using the Unified.to PHP SDK.  It constructs a patch request with the connection ID, invoice ID, and updated invoice data, then calls the patchAccountingInvoice method.  The function returns a PatchAccountingInvoiceResponse object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/invoice/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingInvoiceRequest(\n    accountingInvoice: new Shared\\AccountingInvoice(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->invoice->patchAccountingInvoice(\n    request: $request\n);\n\nif ($response->accountingInvoice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticketing Note in PHP\nDESCRIPTION: This snippet demonstrates how to create a ticketing note using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. An API key is required for authentication. The `connectionId` is used to specify the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTicketingNoteRequest(\n    ticketingNote: new Shared\\TicketingNote(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticketing->createTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Integrations with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all integrations using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object, and then calls the `listUnifiedIntegrations` method on the `unified` service. The response is then checked for integrations and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedIntegrationsRequest();\n\n$response = $sdk->unified->listUnifiedIntegrations(\n    request: $request\n);\n\nif ($response->integrations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CRM Contact using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a CRM contact using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and contact ID, and then calls the `removeCrmContact` method. The snippet includes basic error handling by checking the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->removeCrmContact(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATS Scorecard with PHP SDK\nDESCRIPTION: Demonstrates how to retrieve an ATS scorecard using the Unified.to PHP SDK. It initializes the SDK, creates a `GetAtsScorecardRequest` object with the connection ID and scorecard ID, and then calls the `getAtsScorecard` method on the scorecard service. The example requires the Unified.to PHP SDK and specifies the security key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scorecard/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsScorecardRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scorecard->getAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching SCIM Users with Unified PHP SDK\nDESCRIPTION: This code shows how to update a SCIM user using the Unified PHP SDK. It initializes the SDK, sets the security credentials, constructs a `PatchScimUsersRequest` object with the updates to be applied using a `ScimUser` object, and calls the `patchScimUsers` method on the `scim` service.  The connection ID and the user ID are required parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchScimUsersRequest(\n    scimUser: new Shared\\ScimUser(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->patchScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List ATS Applications in PHP\nDESCRIPTION: This snippet demonstrates how to list all ATS applications associated with a connection using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID, and calls the `listAtsApplications` function.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/application/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsApplicationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->application->listAtsApplications(\n    request: $request\n);\n\nif ($response->atsApplications !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Locations with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list HRIS locations using the Unified PHP SDK. It initializes the SDK with an API key, creates a request object specifying the connection ID, and then calls the `listHrisLocations` method to retrieve the locations. The code handles the response by checking if the `hrisLocations` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisLocationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->location->listHrisLocations(\n    request: $request\n);\n\nif ($response->hrisLocations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATS Activity with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an ATS activity using the Unified API PHP SDK. It initializes the SDK, sets the security context, creates a request object including the connectionId and ID of the activity to retrieve, and calls the getAtsActivity method. It also handles the response by checking if the retrieved atsActivity is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsActivityRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update SCIM Group using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a SCIM group using the Unified.to PHP SDK. It initializes the SDK, creates a request object, setting the display name of the SCIM group, connection ID, and group ID. It then calls the `updateScimGroups` method.  It requires the Unified.to PHP SDK installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateScimGroupsRequest(\n    scimGroup: new Shared\\ScimGroup(\n        displayName: 'Frederic.Reichel',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->updateScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Commerce Location with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a commerce location using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID and location ID, and calls the `removeCommerceLocation` method.  The response is handled by checking the `statusCode`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->removeCommerceLocation(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Messaging Message in PHP\nDESCRIPTION: This snippet demonstrates how to update a messaging message using the `patchMessagingMessage` function in the Unified PHP SDK. It requires the `Unified_to` SDK and specifies the API key and the necessary request parameters including the connection ID and message ID.  It uses the `PatchMessagingMessageRequest` and `MessagingMessage` objects to define the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMessagingMessageRequest(\n    messagingMessage: new Shared\\MessagingMessage(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->messaging->patchMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List ATS Application Statuses Example in PHP\nDESCRIPTION: This snippet demonstrates how to list all application statuses from an ATS using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListAtsApplicationstatusesRequest` object with the connection ID, and then calls the `listAtsApplicationstatuses` method. The response is then checked for an array of statuses and handled accordingly. Requires the `vendor/autoload.php` for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsApplicationstatusesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsApplicationstatuses(\n    request: $request\n);\n\nif ($response->atsStatuses !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Calendar Busies with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list calendar busies using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID, calls the listCalendarBusies method, and handles the response. The code requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarBusiesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->listCalendarBusies(\n    request: $request\n);\n\nif ($response->calendarBusies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations with Unified.to PHP SDK\nDESCRIPTION: Demonstrates how to retrieve a list of organizations using the Unified.to PHP SDK.  It initializes the SDK with an API key, creates a request object with a connection ID, and calls the `listRepoOrganizations` method.  The response is then checked for organization data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoOrganizationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->organization->listRepoOrganizations(\n    request: $request\n);\n\nif ($response->repoOrganizations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List UC Contacts Example PHP\nDESCRIPTION: This snippet demonstrates how to list all UC contacts using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a ListUcContactsRequest object with a connection ID, calls the listUcContacts method, and handles the response. The snippet requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUcContactsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->contact->listUcContacts(\n    request: $request\n);\n\nif ($response->ucContacts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ticketing Note using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new ticketing note using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and uses the `Unified\\Unified_to` namespace. An API key is needed for authentication and the request object needs the connectionId and TicketingNote.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/note/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTicketingNoteRequest(\n    ticketingNote: new Shared\\TicketingNote(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->note->createTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Commerce Collection with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a commerce collection using the PATCH method with the Unified.to PHP SDK. It initializes the SDK, creates a request to partially update a collection by ID, then executes the request. The response is checked to handle the updated collection. It requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/collection/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->collection->patchCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Calendar Recordings with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to list all calendar recordings using the Unified API PHP SDK. It depends on 'vendor/autoload.php' for dependency management. The code initializes the SDK with the API key, creates a ListCalendarRecordingsRequest with the connection ID, and calls the listCalendarRecordings method. The response contains a list of calendar recordings, which can be accessed via the calendarRecordings property.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/recording/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarRecordingsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->recording->listCalendarRecordings(\n    request: $request\n);\n\nif ($response->calendarRecordings !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Payout with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific payment payout using the `getPaymentPayout` method of the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `GetPaymentPayoutRequest` model for constructing the request with a connection ID and payout ID. The API key needs to be set using the `setSecurity` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payout/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentPayoutRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payout->getPaymentPayout(\n    request: $request\n);\n\nif ($response->paymentPayout !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticketing Note using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve an existing ticketing note using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and uses the `Unified\\Unified_to` namespace. An API key is required for authentication. The request object includes connectionId and the ID of the note to retrieve.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/note/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTicketingNoteRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->note->getTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update HRIS Group using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an HRIS group using the Unified.to PHP SDK. It initializes the SDK, creates a request object with necessary parameters such as connection ID, group ID and the HRIS group object itself, and then calls the `updateHrisGroup` method.  It requires the Unified.to PHP SDK installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisGroupRequest(\n    hrisGroup: new Shared\\HrisGroup(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->updateHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CRM Leads with PHP\nDESCRIPTION: This snippet demonstrates how to list CRM leads using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the listCrmLeads method. The response is then checked for CRM leads.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCrmLeadsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->listCrmLeads(\n    request: $request\n);\n\nif ($response->crmLeads !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Unified Connection in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a unified connection by its ID using the Unified PHP SDK. It requires the `vendor/autoload.php` file and uses the `RemoveUnifiedConnectionRequest` model. It depends on the Unified PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/connection/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveUnifiedConnectionRequest(\n    id: '<id>',\n);\n\n$response = $sdk->connection->removeUnifiedConnection(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get ATS Application by ID in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve an ATS application by its ID using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the connection ID and the application ID, and calls the `getAtsApplication` function on the application object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/application/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsApplicationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->application->getAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Calendar Event with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a calendar event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID and event ID, and then calls the getCalendarEvent method. The response is then handled to process the retrieved calendar event. The code requires the Unified.to SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->getCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an ATS Candidate using PHP SDK\nDESCRIPTION: This snippet illustrates removing an ATS candidate using the Unified PHP SDK. It requires the autoload file and uses the `Unified\\Unified_to` namespace. It creates a `RemoveAtsCandidateRequest` with connection and candidate IDs and calls the `removeAtsCandidate` method. A status code of 200 signifies a successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsCandidateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsCandidate(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AtsInterview with Unified.to PHP SDK\nDESCRIPTION: This snippet showcases how to retrieve a specific AtsInterview using the Unified.to PHP SDK. It involves setting up the SDK with security credentials, constructing a request with the `connectionId` and `id` parameters, and then invoking the `getAtsInterview` function. The returned AtsInterview object is then processed. Requires the Unified.to PHP SDK and `vendor/autoload.php` for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/interview/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsInterviewRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->interview->getAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Repo Branches in PHP\nDESCRIPTION: This snippet lists all repository branches associated with a specific connection using the Unified.to PHP SDK. It initializes the SDK, creates a request object, and then calls the listRepoBranches method. The response will contain an array of RepoBranch objects.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/branch/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoBranchesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->branch->listRepoBranches(\n    request: $request\n);\n\nif ($response->repoBranches !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize SDK with Server URL - PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Unified.to PHP SDK with a specific server URL. This allows overriding the default server. Dependencies include the Unified SDK, autoloader, and relevant models. It creates an accounting account and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setServerURL('https://api.unified.to')\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Calendar Links with Unified API in PHP\nDESCRIPTION: This snippet shows how to retrieve a list of calendar links using the Unified API and PHP SDK. It initializes the SDK, sets API key for authentication, and then calls `listCalendarLinks` with a request object containing the connection ID.  It includes necessary namespace imports and error handling.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarLinksRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->listCalendarLinks(\n    request: $request\n);\n\nif ($response->calendarLinks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Accounting Transaction with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an accounting transaction using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a RemoveAccountingTransactionRequest object with the connection ID and transaction ID, and then calls the removeAccountingTransaction method. The response's status code is checked to handle successful or failed requests.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingTransactionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->removeAccountingTransaction(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Repo Branch in PHP\nDESCRIPTION: This snippet demonstrates how to remove a repository branch using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and the ID of the branch to remove, then calls the removeRepoBranch method.  It depends on the Unified.to PHP SDK being installed via Composer and requires a valid API key, connection ID, and branch ID. The response status code 200 indicates success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/branch/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoBranchRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->branch->removeRepoBranch(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Contact using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting contact using the Unified.to PHP SDK. It initializes the SDK, creates a request object including connection and contact IDs, and the `AccountingContact` object for the update. The `updateAccountingContact` method is then called to execute the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingContactRequest(\n    accountingContact: new Shared\\AccountingContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->updateAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Item using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a commerce item using the Unified API's PHP SDK.  It initializes the SDK, creates a request object with a commerce item, connectionId, and id, and then calls the `patchCommerceItem` method.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceItemRequest(\n    commerceItem: new Shared\\CommerceItem(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->patchCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Accounting Organizations in PHP\nDESCRIPTION: This code snippet demonstrates how to list accounting organizations using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and calls the `listAccountingOrganizations` function to retrieve the organizations.  It requires the Unified PHP SDK installed and the `vendor/autoload.php` file included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingOrganizationsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->listAccountingOrganizations(\n    request: $request\n);\n\nif ($response->accountingOrganizations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ATS Application in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific application from an Applicant Tracking System (ATS) using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary connection and application IDs, and then calls the `getAtsApplication` method. The response is then checked to see if an `atsApplication` exists and handles it accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsApplicationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsApplication(\n    request: $request\n);\n\nif ($response->atsApplication !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a task comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the task ID, comment text, and connection ID, and then calls the `createTaskComment` method. The example requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(\n        taskId: '<id>',\n        text: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->comment->createTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve a Messaging Channel using PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific messaging channel using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `GetMessagingChannelRequest` model to specify the connection ID and channel ID. Replace `<YOUR_API_KEY_HERE>` and `<id>` with your actual API key and channel ID respectively.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/channel/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMessagingChannelRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->channel->getMessagingChannel(\n    request: $request\n);\n\nif ($response->messagingChannel !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get UC Contact Example PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific UC contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a GetUcContactRequest object with connection and contact IDs, calls the getUcContact method, and handles the response. The snippet requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUcContactRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->contact->getUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Activity in PHP\nDESCRIPTION: This PHP snippet demonstrates how to remove an ATS activity using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and id), and calls the `removeAtsActivity` method. The response's status code is then checked, and you can handle the response if the statusCode is 200.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsActivityRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsActivity(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a CRM Deal with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a CRM deal by ID using the Unified.to PHP SDK. The code initializes the SDK with the API key, creates a RemoveCrmDealRequest object with the connection ID and deal ID, and then calls the removeCrmDeal method. It requires the Unified.to PHP SDK. Parameters include the connectionId and the id of the deal to be removed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/deal/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmDealRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->deal->removeCrmDeal(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Inventories with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all commerce inventory records using the Unified.to PHP SDK. It requires `vendor/autoload.php` for dependency loading and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The SDK is initialized with an API key. A `ListCommerceInventoriesRequest` object is created, specifying the `connectionId`. The `listCommerceInventories` method on the `inventory` service is called, and the resulting list of inventory records is handled in the conditional block.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/inventory/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceInventoriesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->inventory->listCommerceInventories(\n    request: $request\n);\n\nif ($response->commerceInventories !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ATS Interview in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific interview from an Applicant Tracking System (ATS) using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary connection and interview IDs, and then calls the `getAtsInterview` method. The response is then checked to see if an `atsInterview` exists and handles it accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsInterviewRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATS Candidate using Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve an ATS candidate using the Unified.to PHP SDK. It initializes the SDK, creates a `GetAtsCandidateRequest` object with `connectionId` and `id`, and calls the `getAtsCandidate` method. It requires the `vendor/autoload.php` file and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/candidate/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsCandidateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->candidate->getAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Document with Unified.to PHP SDK\nDESCRIPTION: This example demonstrates how to remove an ATS document using the Unified.to PHP SDK.  It initializes the SDK with API key, constructs a request with the connectionId and document ID, and then calls the removeAtsDocument method. The code checks if the status code is 200 to confirm successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/document/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsDocumentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->document->removeAtsDocument(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscription Details with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a subscription using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID and subscription ID, and then calls the `getPaymentSubscription` method. The response is then handled if the subscription is found.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentSubscriptionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->getPaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Interview in PHP\nDESCRIPTION: This code snippet demonstrates how to update an ATS interview using the Unified PHP SDK. It initializes the SDK, creates a request object with necessary parameters (connectionId, id, and an AtsInterview object), and calls the `updateAtsInterview` method. The API key needs to be set in the security configuration. It requires the `vendor/autoload.php` file for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/interview/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsInterviewRequest(\n    atsInterview: new Shared\\AtsInterview(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->interview->updateAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching CRM Pipeline using Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a CRM pipeline using the Unified PHP SDK. It initializes the SDK, sets the API key, and creates a request object with the necessary parameters (connectionId, id, and a CrmPipeline object). It then calls the `patchCrmPipeline` method to update the pipeline. Requires the Unified PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCrmPipelineRequest(\n    crmPipeline: new Shared\\CrmPipeline(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->patchCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Ticketing Note using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific ticketing note using the Unified.to PHP SDK. It initializes the SDK, sets the security key, creates a request object with the connection and note IDs, and calls the `getTicketingNote` method. The snippet expects a connection ID and a note ID as parameters and handles the response if the ticketing note is successfully retrieved.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTicketingNoteRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->getTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Ticketing Ticket in PHP\nDESCRIPTION: This snippet shows how to update a ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then updates the ticket by its ID using the `patchTicketingTicket` method. It performs a partial update to the ticket's properties.  It requires the `Unified/Unified_to`, `Unified/Unified_to/Models/Operations`, and `Unified/Unified_to/Models/Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticket/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTicketingTicketRequest(\n    ticketingTicket: new Shared\\TicketingTicket(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticket->patchTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get KMS Space using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific KMS space using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a request object with the connection and space IDs, and then calls the `getKmsSpace` method.  The response is then checked for a valid KmsSpace object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetKmsSpaceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->getKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repo Pull Request using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a repository pull request using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object, and then calls the `createRepoPullrequest` method on the `repo` service. The response is then handled to process the created pull request. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoPullrequestRequest(\n    repoPullrequest: new Shared\\RepoPullrequest(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->createRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove CRM Company using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a CRM company using the Unified.to PHP SDK. The SDK is initialized with API key, a request object is created with connectionId and id, and then the `removeCrmCompany` method is invoked. The response status code is checked for 200 to confirm successful deletion.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->removeCrmCompany(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Martech List in PHP\nDESCRIPTION: This snippet demonstrates how to delete a Martech List using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveMartechListRequest` with the connection ID and list ID, and then calls the `removeMartechList` method. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/list/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMartechListRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->list->removeMartechList(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Unified Issues with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list support issues using the Unified PHP SDK. It initializes the SDK, creates a request object, calls the listUnifiedIssues method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/issue/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedIssuesRequest();\n\n$response = $sdk->issue->listUnifiedIssues(\n    request: $request\n);\n\nif ($response->issues !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Person Enrichment Data with Unified API - PHP\nDESCRIPTION: This code snippet demonstrates how to use the Unified API PHP SDK to retrieve enrichment data for a person. It initializes the SDK with an API key, creates a request object with the connection ID, calls the `listEnrichPeople` method, and handles the response. The snippet requires the Unified API PHP SDK and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/person/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListEnrichPeopleRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->person->listEnrichPeople(\n    request: $request\n);\n\nif ($response->enrichPerson !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Kms Space using Unified.to PHP SDK\nDESCRIPTION: This code shows how to partially update a Kms Space using the Unified.to PHP SDK. It initializes the SDK, creates a request with the connection ID, space ID, and partial space data, and then calls the `patchKmsSpace` method. The updated Kms Space is handled if successful.  Requires the Unified.to PHP SDK to be installed and configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/space/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsSpaceRequest(\n    kmsSpace: new Shared\\KmsSpace(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->space->patchKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Document using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS document using the Unified API PHP SDK. It requires the Unified_to SDK, along with specific models for operations and shared data. Replace '<YOUR_API_KEY_HERE>' with your actual API key and '<id>' with appropriate document and connection IDs.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/document/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsDocumentRequest(\n    atsDocument: new Shared\\AtsDocument(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->document->updateAtsDocument(\n    request: $request\n);\n\nif ($response->atsDocument !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Employee with Unified.to PHP SDK\nDESCRIPTION: This code snippet shows how to retrieve an existing employee using the Unified.to PHP SDK. It initializes the SDK, creates a `GetHrisEmployeeRequest` with the `connectionId` and `id` of the employee, and calls the `getHrisEmployee` method. It depends on the `vendor/autoload.php` file and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/employee/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisEmployeeRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->employee->getHrisEmployee(\n    request: $request\n);\n\nif ($response->hrisEmployee !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Calendar Recording with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific calendar recording using the Unified API PHP SDK. It requires the 'vendor/autoload.php' file for autoloading dependencies.  It initializes the SDK, sets the API key, creates a GetCalendarRecordingRequest, and calls the getCalendarRecording method. The response object contains the calendar recording if the request is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/recording/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarRecordingRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->recording->getCalendarRecording(\n    request: $request\n);\n\nif ($response->calendarRecording !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Ticketing Customers in PHP\nDESCRIPTION: This snippet demonstrates how to list all ticketing customers for a connection using the Unified.to PHP SDK. It includes `vendor/autoload.php` for autoloading, and uses the `Unified_to` and `Operations` namespaces. The SDK is initialized with the API key, a `ListTicketingCustomersRequest` object is created with the connection ID, and the `listTicketingCustomers` method is called.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/customer/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListTicketingCustomersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->customer->listTicketingCustomers(\n    request: $request\n);\n\nif ($response->ticketingCustomers !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repo Organization using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a repository organization using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object, and then calls the `createRepoOrganization` method on the `repo` service. The response is then handled to process the created organization. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->createRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Event with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a CRM event using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID and event ID, and then calls the getCrmEvent method. The response is then handled to process the retrieved CRM event. It requires the Unified.to SDK to be installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->getCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Location using PHP SDK\nDESCRIPTION: This code snippet shows how to update a commerce location using the Unified API's PHP SDK.  It initializes the SDK, creates a request object including the location's name, connectionId, and id, and calls `patchCommerceLocation`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceLocationRequest(\n    commerceLocation: new Shared\\CommerceLocation(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->patchCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Accounting Contact with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an accounting contact using the Unified.to PHP SDK. It initializes the SDK with an API key, creates an UpdateAccountingContactRequest object, including an AccountingContact object from the Shared namespace, along with the connection ID and contact ID. It then calls the updateAccountingContact method. The response's accountingContact property is checked to handle successful or failed updates.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingContactRequest(\n    accountingContact: new Shared\\AccountingContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->updateAccountingContact(\n    request: $request\n);\n\nif ($response->accountingContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Order in PHP\nDESCRIPTION: This code snippet demonstrates how to create an accounting order using the Unified.to PHP SDK. It requires setting up the SDK with an API key and constructing a `CreateAccountingOrderRequest` object with the necessary parameters, including the `connectionId` and `AccountingOrder` details. The code then calls the `createAccountingOrder` method on the `order` service and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/order/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingOrderRequest(\n    accountingOrder: new Shared\\AccountingOrder(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->order->createAccountingOrder(\n    request: $request\n);\n\nif ($response->accountingOrder !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Calendar Recordings with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch a list of calendar recordings using the Unified API and PHP SDK.  It configures the SDK with the API key, prepares a request with the connection ID, and processes the response. The snippet includes loading dependencies and necessary namespace imports.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarRecordingsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->calendar->listCalendarRecordings(\n    request: $request\n);\n\nif ($response->calendarRecordings !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a task comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and comment ID, and then calls the `getTaskComment` method. The example requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTaskCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->getTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Repo Commit using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a repository commit using the Unified.to PHP SDK. It requires the `vendor/autoload.php` for dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK with an API key, constructs a `RemoveRepoCommitRequest` object containing the `connectionId` and the `id` of the commit, then calls the `removeRepoCommit` method. The response status code is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commit/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoCommitRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commit->removeRepoCommit(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Martech Lists with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to list Martech lists using the Unified API PHP SDK. It initializes the SDK, sets up the request with connection ID, and then calls the `listMartechLists` method on the `martech` service. The response is then handled based on whether marketing lists are returned.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMartechListsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->martech->listMartechLists(\n    request: $request\n);\n\nif ($response->marketingLists !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Repo Commit with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a repository commit using the Unified API PHP SDK. It initializes the SDK, constructs the necessary request object with the `RepoCommit` details, and then calls the `updateRepoCommit` method. It requires the `vendor/autoload.php` file for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commit/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(\n        repoId: '<id>',\n        userId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commit->updateRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LMS Instructor with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create an LMS instructor using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a `CreateLmsInstructorRequest` with an `LmsInstructor` object, and then calls the `createLmsInstructor` method. The response is then handled to process the created instructor object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/instructor/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateLmsInstructorRequest(\n    lmsInstructor: new Shared\\LmsInstructor(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->instructor->createLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Unified Connection in PHP\nDESCRIPTION: This code snippet showcases how to retrieve a Unified connection using its ID via the PHP SDK. It relies on `vendor/autoload.php` for dependency resolution. The snippet initializes the SDK with an API key, constructs a `GetUnifiedConnectionRequest` object including the ID, and sends a request to retrieve the specific connection. The response is handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetUnifiedConnectionRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->getUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Journal using Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to update an accounting journal using the Unified.to PHP SDK.  It requires `vendor/autoload.php` and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The `connectionId`, `id`, and `accountingJournal` are necessary parameters within the request object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/journal/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingJournalRequest(\n    accountingJournal: new Shared\\AccountingJournal(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->journal->patchAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Pipeline with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a CRM pipeline using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and CrmPipeline object), and then calls the createCrmPipeline method. It requires the Unified.to PHP SDK and the 'vendor/autoload.php' file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pipeline/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmPipelineRequest(\n    crmPipeline: new Shared\\CrmPipeline(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->pipeline->createCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a CRM Lead using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve a specific CRM lead using the Unified.to PHP SDK.  It sets up the SDK with authentication, creates a request object including the connection ID and lead ID, and calls the getCrmLead method.  The response containing the lead data is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lead/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmLeadRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lead->getCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Unified.to Webhook in PHP\nDESCRIPTION: This code snippet shows how to manually trigger a webhook using the Unified.to PHP SDK's `patchUnifiedWebhookTrigger` method. It initializes the SDK with an API key, creates a `PatchUnifiedWebhookTriggerRequest` object with the webhook ID, and calls the `patchUnifiedWebhookTrigger` function. It includes basic response handling based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedWebhookTriggerRequest(\n    id: '<id>',\n);\n\n$response = $sdk->webhook->patchUnifiedWebhookTrigger(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Payouts with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list payment payouts using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object, calls the `listPaymentPayouts` method, and handles the response. The required dependency is the Unified.to PHP SDK, installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentPayoutsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->listPaymentPayouts(\n    request: $request\n);\n\nif ($response->paymentPayouts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SCIM Groups with PHP SDK\nDESCRIPTION: This snippet shows how to list SCIM groups using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `ListScimGroupsRequest` with a connection ID, and calls the `listScimGroups` method. The response is then handled to process the listed SCIM groups if `scimGroups` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListScimGroupsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->scim->listScimGroups(\n    request: $request\n);\n\nif ($response->scimGroups !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Account using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `RemoveAccountingAccountRequest` object with the connection ID and account ID, then calls the `removeAccountingAccount` method. The code requires the `vendor/autoload.php` for dependency loading and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/account/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingAccountRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->account->removeAccountingAccount(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch HRIS Company using Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an HRIS company using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (including the company ID and connection ID), and calls the `patchHrisCompany` method. The response is then handled by checking if the returned hrisCompany object is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisCompanyRequest(\n    hrisCompany: new Shared\\HrisCompany(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->company->patchHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Event with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a calendar event using the Unified API PHP SDK. It initializes the SDK, creates a request object containing the updated event details, connection ID, and event ID. It then calls the `patchCalendarEvent` method to update the event and handles the response based on whether the update was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCalendarEventRequest(\n    calendarEvent: new Shared\\CalendarEvent(\n        endAt: '<value>',\n        startAt: '<value>',\n        subject: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->patchCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Activity with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to update specific fields of an existing ATS activity using the Unified.to PHP SDK. It initializes the SDK with an API key and creates a `PatchAtsActivityRequest` object with the updated activity data, connection ID, and activity ID. The `patchAtsActivity` method is called to apply the updates, and the resulting activity is handled. Make sure that `vendor/autoload.php` is properly configured.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/activity/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsActivityRequest(\n    atsActivity: new Shared\\AtsActivity(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->activity->patchAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Taxrate with PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an accounting taxrate using the Unified.to PHP SDK. It requires setting up the SDK with an API key and passing a `CreateAccountingTaxrateRequest` object containing the `AccountingTaxrate` model and the connection ID. The example shows how to initialize the SDK, create the request, and handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/taxrate/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingTaxrateRequest(\n    accountingTaxrate: new Shared\\AccountingTaxrate(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->taxrate->createAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an ATS Application using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an ATS application using the Unified PHP SDK. It requires the `vendor/autoload.php` for dependency management and utilizes the `Unified\\Unified_to` namespace. The snippet constructs a `RemoveAtsApplicationRequest` object with connection and application IDs, then calls the `removeAtsApplication` method on the SDK's `ats` service. A successful response (status code 200) indicates the application was removed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsApplicationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsApplication(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List HRIS Companies with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to list HRIS companies using the Unified API PHP SDK. It initializes the SDK, sets the security token, creates a request object, and calls the `listHrisCompanies` method. The code handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/company/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->company->listHrisCompanies(\n    request: $request\n);\n\nif ($response->hrisCompanies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List All Payment Refunds - PHP\nDESCRIPTION: Lists all payment refunds associated with a specific connection in Unified.to.  Requires the Unified.to PHP SDK.  The example initializes the SDK, creates a request object with the connection ID, and calls the `listPaymentRefunds` method. The response object is checked for paymentRefunds, and if present, should be handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/refund/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentRefundsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->refund->listPaymentRefunds(\n    request: $request\n);\n\nif ($response->paymentRefunds !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Calendar Link with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a calendar link using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection and link IDs, calls the getCalendarLink method, and handles the response. The code requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->getCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Contacts Example PHP\nDESCRIPTION: This snippet demonstrates how to list all accounting contacts using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a ListAccountingContactsRequest object with a connection ID, calls the listAccountingContacts method, and handles the response.  The snippet requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/contact/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingContactsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->contact->listAccountingContacts(\n    request: $request\n);\n\nif ($response->accountingContacts !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Device using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a HRIS device using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and device ID, and then calls the `getHrisDevice` method. Error handling is done via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisDeviceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an ATS Document using PHP SDK\nDESCRIPTION: This code shows how to remove an ATS document using the Unified PHP SDK. It includes autoloading dependencies and uses the `Unified\\Unified_to` namespace. A `RemoveAtsDocumentRequest` is instantiated with connection and document IDs. The `removeAtsDocument` method is called, and a 200 status code indicates success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsDocumentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsDocument(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Messages in PHP\nDESCRIPTION: Demonstrates how to list all messaging messages for a given connection using the Unified.to PHP SDK. This example shows the SDK initialization, request object creation (specifying the connection ID), and the call to the `listMessagingMessages` method. It includes response handling to process the list of messages.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/message/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMessagingMessagesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->message->listMessagingMessages(\n    request: $request\n);\n\nif ($response->messagingMessages !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Inventory PHP\nDESCRIPTION: This code snippet demonstrates how to update a commerce inventory using the Unified.to PHP SDK. It initializes the SDK, constructs an `UpdateCommerceInventoryRequest` object, and calls the `updateCommerceInventory` method. The `available` property within `CommerceInventory` is set to 9360.02.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceInventoryRequest(\n    commerceInventory: new Shared\\CommerceInventory(\n        available: 9360.02,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->updateCommerceInventory(\n    request: $request\n);\n\nif ($response->commerceInventory !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing AtsInterview with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove an AtsInterview using the Unified.to PHP SDK. It configures the SDK with authentication, sets up a request with the `connectionId` and `id` parameters, and calls the `removeAtsInterview` function. The success of the operation is determined by the status code in the response. Requires the Unified.to PHP SDK and `vendor/autoload.php` for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/interview/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsInterviewRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->interview->removeAtsInterview(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Storage File in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a storage file using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveStorageFileRequest` with the `connectionId` and `id` of the file, and then calls the `removeStorageFile` method. A status code of 200 indicates successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/storage/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveStorageFileRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->storage->removeStorageFile(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Task Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a task comment using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveTaskCommentRequest` object with the connection and comment IDs, and then calls the `removeTaskComment` method. The response status code is checked to handle the success case.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTaskCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->removeTaskComment(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HRIS Location with Unified.to PHP SDK\nDESCRIPTION: Demonstrates retrieving a specific HRIS location using its ID via the Unified.to PHP SDK. Similar to retrieving a commerce location, this snippet depends on the Unified.to SDK and uses the `Unified_to` and `Operations` namespaces. It initializes the SDK with an API key and creates a `GetHrisLocationRequest` object, providing both the connection ID and the location ID. The SDK is then used to send the request and process the received response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->getHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Inventories with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list commerce inventories using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a request object with the connection ID, and then calls the `listCommerceInventories` method. The response is then handled to process the retrieved commerce inventories.  It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceInventoriesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->listCommerceInventories(\n    request: $request\n);\n\nif ($response->commerceInventories !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Accounting Invoices in PHP\nDESCRIPTION: This PHP code shows how to list all accounting invoices for a given connection using the Unified.to SDK. It sets up the SDK with the API key and then calls the listAccountingInvoices method on the invoice object, providing the connection ID. The response contains an array of accounting invoice objects.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/invoice/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingInvoicesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->invoice->listAccountingInvoices(\n    request: $request\n);\n\nif ($response->accountingInvoices !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Taxrate with PHP SDK\nDESCRIPTION: This code shows how to update an accounting taxrate partially using the Unified.to PHP SDK's `patchAccountingTaxrate` method. The example requires setting up the SDK, creating a `PatchAccountingTaxrateRequest` which includes the `AccountingTaxrate` model for the updated fields, the connection ID, and the taxrate ID, and then processing the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/taxrate/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingTaxrateRequest(\n    accountingTaxrate: new Shared\\AccountingTaxrate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->taxrate->patchAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Commit using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a repository commit using the Unified API PHP SDK. It requires the Unified_to library and models for operations. The example sets up the SDK with an API key, constructs a request object with the connection ID and commit ID, and then calls the `removeRepoCommit` method. The request parameter is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoCommitRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->removeRepoCommit(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Webhook Subscription with Unified API in PHP\nDESCRIPTION: This snippet shows how to update a webhook subscription using the Unified API PHP SDK. The example configures the SDK, creates a request object to modify the webhook event and object type, and calls the update operation. It checks for a successful webhook update in the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUnifiedWebhookRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Created,\n        objectType: Shared\\ObjectType::PaymentLink,\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->unified->updateUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LMS Instructor with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an LMS instructor using the Unified.to PHP SDK. It initializes the SDK, constructs a `GetLmsInstructorRequest` with a connection ID and an instructor ID, and then calls the `getLmsInstructor` method. The response is handled to process the retrieved instructor object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/instructor/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsInstructorRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->instructor->getLmsInstructor(\n    request: $request\n);\n\nif ($response->lmsInstructor !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Collection using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a commerce collection using the Unified API's PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and id), and then calls the `patchCommerceCollection` method on the commerce client.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->patchCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Task Project with Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to remove an existing task project by its ID using the Unified.to PHP SDK. It requires `vendor/autoload.php` and uses the `Unified\\Unified_to` namespace.  An API key is used for authentication, and both connection ID and project ID are needed to specify the target project for removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/project/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTaskProjectRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->project->removeTaskProject(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Project with Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve an existing task project by its ID using the Unified.to PHP SDK. It requires `vendor/autoload.php` and uses the `Unified\\Unified_to` namespace.  An API key is used for authentication, and both connection ID and project ID are needed to specify the target project.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/project/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetTaskProjectRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->project->getTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Instructors with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all LMS instructors using the Unified.to PHP SDK. It initializes the SDK, constructs a `ListLmsInstructorsRequest` with a connection ID, and then calls the `listLmsInstructors` method. The response is handled to process the list of instructor objects.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/instructor/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsInstructorsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->instructor->listLmsInstructors(\n    request: $request\n);\n\nif ($response->lmsInstructors !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Accounting Report using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an accounting report using the Unified.to PHP SDK. It includes setting up the SDK, creating a request object, and handling the response. The API key should be replaced with an actual value for the code to function correctly. `vendor/autoload.php` must exist and be set up with the necessary dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingReportRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingReport(\n    request: $request\n);\n\nif ($response->accountingReport !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing LMS Student with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a student from an LMS using the Unified.to PHP SDK. It requires the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet constructs a request object with the connection ID and student ID, then calls the `removeLmsStudent` method on the LMS client.  Finally, it checks the response status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveLmsStudentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lms->removeLmsStudent(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Passthrough JSON in PHP\nDESCRIPTION: This snippet demonstrates how to use the Unified PHP SDK to patch a passthrough endpoint using JSON data. It initializes the SDK, sets the security key, creates a request object, and calls the `patchPassthroughJson` method. The connection ID and path are required parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPassthroughJsonRequest(\n    connectionId: '<id>',\n    path: '/home/user',\n);\n\n$response = $sdk->passthrough->patchPassthroughJson(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get CRM Pipeline with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates retrieving a CRM pipeline using the Unified.to PHP SDK. It initializes the SDK, creates a `GetCrmPipelineRequest` object specifying the connection and pipeline IDs, and calls the `getCrmPipeline` method. The response is then checked for successful retrieval.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCrmPipelineRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->crm->getCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Integration Workspaces with PHP SDK\nDESCRIPTION: This snippet shows how to list all activated integrations in a workspace using the PHP SDK.  It requires setting up the SDK with an API key and creating a request object with the workspace ID.  The response contains a list of integrations in the specified workspace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/integration/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedIntegrationWorkspacesRequest(\n    workspaceId: '<id>',\n);\n\n$response = $sdk->integration->listUnifiedIntegrationWorkspaces(\n    request: $request\n);\n\nif ($response->integrations !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching ATS Activity with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS activity using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the activity to be updated, the connection ID, and the activity ID. The snippet then calls the `patchAtsActivity` method. Dependencies include `vendor/autoload.php`, `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared`. Replace `<YOUR_API_KEY_HERE>` and `<id>` with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsActivityRequest(\n    atsActivity: new Shared\\AtsActivity(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->patchAtsActivity(\n    request: $request\n);\n\nif ($response->atsActivity !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a KMS comment using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and comment ID, and then calls the `getKmsComment` method. The example requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetKmsCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->getKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Commerce Collection in PHP\nDESCRIPTION: This snippet demonstrates how to create a commerce collection using the Unified API's PHP SDK. It initializes the SDK with an API key, constructs a `CreateCommerceCollectionRequest` object with the collection name, and then calls the `createCommerceCollection` method. The response is then checked for a valid `commerceCollection` object to handle the successful creation.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->commerce->createCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Webhook Subscription with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a webhook subscription using the Unified PHP SDK. It requires the `id` of the webhook to be removed and utilizes the `removeUnifiedWebhook` method of the `webhook` service. The snippet includes error handling for potential issues during the process.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/webhook/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveUnifiedWebhookRequest(\n    id: '<id>',\n);\n\n$response = $sdk->webhook->removeUnifiedWebhook(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Ticketing Customer in PHP\nDESCRIPTION: This snippet demonstrates how to remove a ticketing customer using the Unified.to PHP SDK. It includes `vendor/autoload.php` for autoloading, and uses the `Unified_to` and `Operations` namespaces. The SDK is initialized with the API key, a `RemoveTicketingCustomerRequest` object is created with the connection ID and customer ID, and the `removeTicketingCustomer` method is called.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/customer/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingCustomerRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->customer->removeTicketingCustomer(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Task Project Example in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a task project using the Unified PHP SDK. It initializes the SDK with an API key, creates a request object with the connectionId and ID of the project, and then calls the `removeTaskProject` method on the `task` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTaskProjectRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->removeTaskProject(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Repo Pullrequests in PHP\nDESCRIPTION: This code snippet demonstrates how to list all pull requests using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a ListRepoPullrequestsRequest object, and calls the listRepoPullrequests method. The response is then checked for repoPullrequests and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListRepoPullrequestsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->listRepoPullrequests(\n    request: $request\n);\n\nif ($response->repoPullrequests !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Martech Member with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a martech member using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing the `connectionId` and the `id` of the member within a `RemoveMartechMemberRequest`. The response indicates success with a 200 status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/member/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMartechMemberRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->member->removeMartechMember(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Martech Members with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list all martech members associated with a connection using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing the `connectionId` within a `ListMartechMembersRequest`. The response contains a list of `MarketingMember` objects.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/member/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMartechMembersRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->member->listMartechMembers(\n    request: $request\n);\n\nif ($response->marketingMembers !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Repo PullRequest with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a repository pull request using the Unified.to PHP SDK. It initializes the SDK, sets up the request with connection ID and pull request ID, and then calls the `getRepoPullrequest` method. The example handles potential responses.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pullrequest/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoPullrequestRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pullrequest->getRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Calendar with Unified.to PHP SDK\nDESCRIPTION: This snippet showcases how to remove a calendar using the `removeCalendarCalendar` method. It requires initializing the Unified.to SDK, creating a `RemoveCalendarCalendarRequest` with the connection and calendar IDs, and calling the `removeCalendarCalendar` method. The success of the operation is verified by checking the status code in the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCalendarCalendarRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->removeCalendarCalendar(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Task Comment using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a specific task comment using the Unified PHP SDK. It initializes the SDK, sets the API key, creates a `TaskComment` object and a `PatchTaskCommentRequest` object with the comment data, connection ID, and comment ID. It then calls the `patchTaskComment` method. The response is handled within an if statement.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(\n        taskId: '<id>',\n        text: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->patchTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Repo Commit with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a repository commit using the Unified API PHP SDK. It initializes the SDK, creates a request object containing a `RepoCommit` object with updated commit information (repoId and userId), as well as the connection and commit IDs. The `updateRepoCommit` method is called, and the response is handled if the `repoCommit` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(\n        repoId: '<id>',\n        userId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->updateRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounting Account Example\nDESCRIPTION: This PHP code demonstrates how to create an accounting account using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with accounting account details and a connection ID, and then calls the createAccountingAccount method.  It requires the `vendor/autoload.php` file for autoloading dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SCIM Groups with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list SCIM groups using the Unified PHP SDK. It initializes the SDK, sets the security credentials, creates a request object, and calls the `listScimGroups` method on the `scim` service. The connection ID is required. The response containing the list of SCIM groups is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListScimGroupsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->scim->listScimGroups(\n    request: $request\n);\n\nif ($response->scimGroups !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Branch using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a repository branch using the Unified API PHP SDK. It requires the Unified_to library and models for operations. The example sets up the SDK with an API key, constructs a request object with the connection ID and branch ID, and then calls the `removeRepoBranch` method. The request parameter is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoBranchRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->removeRepoBranch(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Interviews with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list ATS interviews using the Unified.to PHP SDK. It initializes the SDK, sets the security credentials, creates a `ListAtsInterviewsRequest` object with the connection ID, calls the `listAtsInterviews` method, and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsInterviewsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->listAtsInterviews(\n    request: $request\n);\n\nif ($response->atsInterviews !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unified Webhook in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a webhook subscription using the Unified API PHP SDK. It initializes the SDK with an API key, constructs a request object containing the webhook ID, and calls the `removeUnifiedWebhook` method. A 200 status code indicates a successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveUnifiedWebhookRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->removeUnifiedWebhook(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Journal using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve an accounting journal using the Unified.to PHP SDK.  It depends on `vendor/autoload.php` and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The `connectionId` and `id` parameters are required as part of the request object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/journal/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingJournalRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->journal->getAccountingJournal(\n    request: $request\n);\n\nif ($response->accountingJournal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Webhook with Unified API in PHP\nDESCRIPTION: This code snippet illustrates how to trigger a webhook using the Unified API PHP SDK.  It sets up the SDK, creates a request to trigger the webhook using its ID, and executes the trigger operation. The success of the operation is determined by checking for a 200 status code in the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUnifiedWebhookTriggerRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->updateUnifiedWebhookTrigger(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Taxrate with PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific accounting taxrate using the Unified.to PHP SDK. It requires the connection ID and the taxrate ID. The example shows how to initialize the SDK, create the `GetAccountingTaxrateRequest` with the required parameters, and then handle the response which contains the requested taxrate.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/taxrate/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingTaxrateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->taxrate->getAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Transaction with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting transaction using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection and transaction IDs, and an AccountingTransaction object, and then calls the `updateAccountingTransaction` method. It requires the Unified PHP SDK to be installed and configured, and expects a valid connection and transaction ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/transaction/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingTransactionRequest(\n    accountingTransaction: new Shared\\AccountingTransaction(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->transaction->updateAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Task in PHP\nDESCRIPTION: This code snippet provides an example of how to update a task using the Unified API PHP SDK. The process includes initializing the SDK with authentication, creating a `UpdateTaskTaskRequest` object containing the updated task details (taskTask, connectionId, and id), and using the `updateTaskTask` method. After the API call, the code checks for a valid `taskTask` object in the response to confirm the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTaskTaskRequest(\n    taskTask: new Shared\\TaskTask(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->updateTaskTask(\n    request: $request\n);\n\nif ($response->taskTask !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Space with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a KMS space using the Unified.to PHP SDK. It initializes the SDK, creates a request object with space name and connection ID, and then calls the createKmsSpace method. It requires the Unified.to PHP SDK to be installed and configured with your API key. The expected output is a KMS space object if the operation is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateKmsSpaceRequest(\n    kmsSpace: new Shared\\KmsSpace(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->kms->createKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Task Comment Example in PHP\nDESCRIPTION: This code snippet demonstrates how to update a task comment using the Unified PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId, id, and TaskComment data), and then calls the `patchTaskComment` method on the `task` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->patchTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an ATS Job using PHP SDK\nDESCRIPTION: This snippet outlines the process of removing an ATS job using the Unified PHP SDK.  It uses autoloading and the `Unified\\Unified_to` namespace. A `RemoveAtsJobRequest` object is created, containing the connection and job IDs. The `removeAtsJob` method is called. A successful deletion is indicated by a 200 status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsJobRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->removeAtsJob(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Reports with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to list all accounting reports using the Unified.to PHP SDK.  It depends on the `vendor/autoload.php` file and utilizes the `ListAccountingReportsRequest` model, taking a connection ID as a parameter.  The response contains a list of accounting reports.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/report/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAccountingReportsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->report->listAccountingReports(\n    request: $request\n);\n\nif ($response->accountingReports !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Calendar Link with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to remove a calendar link using the Unified API PHP SDK. It initializes the SDK, constructs a `RemoveCalendarLinkRequest` object with the required `connectionId` and `id`, and then calls the `removeCalendarLink` method.  The status code of the response is checked to confirm successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCalendarLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->removeCalendarLink(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Repo Organization with Unified.to PHP SDK\nDESCRIPTION: This snippet retrieves a repository organization using the Unified.to PHP SDK. It sets up the SDK with API key, creates a request using the connection ID and the organization ID, and calls the `getRepoOrganization` method. The code checks if the response contains a `repoOrganization` object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoOrganizationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->organization->getRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Payment Link with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to update a payment link using the Unified API PHP SDK. It initializes the SDK, constructs a `PatchPaymentLinkRequest` object with the required parameters, including the `connectionId`, `id`, and the `PaymentLink` object to be updated. The `patchPaymentLink` method is then called to perform the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPaymentLinkRequest(\n    paymentLink: new Shared\\PaymentLink(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->patchPaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Unified Webhook in PHP\nDESCRIPTION: This code snippet demonstrates how to update a webhook subscription using the Unified API PHP SDK. It initializes the SDK with an API key, constructs a request object defining the webhook update, and calls the `patchUnifiedWebhook` method. The example showcases the basic structure, but lacks detailed parameter configurations for the Webhook object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedWebhookRequest(\n    webhook: new Shared\\Webhook(\n        connectionId: '<id>',\n        event: Shared\\Event::Deleted,\n        objectType: Shared\\ObjectType::CrmLead,\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->unified->patchUnifiedWebhook(\n    request: $request\n);\n\nif ($response->webhook !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Scorecard with PHP SDK\nDESCRIPTION: Demonstrates how to remove an ATS scorecard using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveAtsScorecardRequest` object with the connection ID and scorecard ID, and then calls the `removeAtsScorecard` method. The example requires the Unified.to PHP SDK and specifies the security key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scorecard/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsScorecardRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scorecard->removeAtsScorecard(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Collection with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a commerce collection using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object with the connectionId and collection id, and calls the getCommerceCollection method. The response is then checked for a commerceCollection object. It requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/collection/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceCollectionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->collection->getCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove ATS Application in PHP\nDESCRIPTION: This snippet demonstrates how to remove an ATS application using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object containing the connection ID and the application ID, and calls the `removeAtsApplication` function.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/application/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsApplicationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->application->removeAtsApplication(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Storage File with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a file using the Unified PHP SDK. It requires the `vendor/autoload.php` file and uses the `Unified_to`, `Operations`, and `Shared` namespaces. The example constructs a request object with a StorageFile, connectionId, and file id, and then calls the `updateStorageFile` method on the `file` service. It handles the response if the update is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/file/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateStorageFileRequest(\n    storageFile: new Shared\\StorageFile(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->file->updateStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Organizations with Unified.to PHP SDK\nDESCRIPTION: Demonstrates the process of completely updating an organization's data using the Unified.to PHP SDK and the `updateRepoOrganization` method.  The code initializes the SDK, constructs an update request with the new organization information, the connection ID, and the organization ID, then sends the request. The response is checked for the updated organization data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->organization->updateRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Subscription with Unified.to in PHP\nDESCRIPTION: This code snippet demonstrates how to update a payment subscription using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdatePaymentSubscriptionRequest` object, including a `PaymentSubscription` object and the necessary IDs. It then calls the `updatePaymentSubscription` method. The code checks if the `paymentSubscription` in the response is not null to handle the updated subscription.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/subscription/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePaymentSubscriptionRequest(\n    paymentSubscription: new Shared\\PaymentSubscription(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->subscription->updatePaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Candidate with PHP SDK\nDESCRIPTION: This example illustrates updating an ATS candidate using the Unified.to PHP SDK. The snippet shows SDK initialization, request construction with candidate data and IDs, and the API call to update the candidate. Dependencies include the Unified.to PHP SDK, autoload, and the Shared and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsCandidateRequest(\n    atsCandidate: new Shared\\AtsCandidate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->updateAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Payment - Unified.to PHP\nDESCRIPTION: This snippet shows how to remove a payment using the Unified.to PHP SDK. It initializes the SDK, creates a `RemovePaymentPaymentRequest`, and calls the `removePaymentPayment` method. The code checks the status code to handle the response accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemovePaymentPaymentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->removePaymentPayment(\n    request: $request\n);\n\n```\n\n----------------------------------------\n\nTITLE: Updating Messaging Message with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a messaging message using the Unified PHP SDK. It initializes the SDK, sets the security credentials, creates a request object with the message and connection details, and calls the `updateMessagingMessage` function. The response is then handled based on whether a messaging message is returned.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/message/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateMessagingMessageRequest(\n    messagingMessage: new Shared\\MessagingMessage(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->message->updateMessagingMessage(\n    request: $request\n);\n\nif ($response->messagingMessage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HRIS Device in PHP\nDESCRIPTION: This snippet demonstrates how to update an HRIS device using the Unified PHP SDK. It requires the `vendor/autoload.php` file for dependency management.  It constructs a request object with the necessary parameters (connectionId, id, and HrisDevice details) and sends it to the `updateHrisDevice` method. The security is configured with an API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/device/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisDeviceRequest(\n    hrisDevice: new Shared\\HrisDevice(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->device->updateHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accounting Transaction with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an accounting transaction using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection and transaction IDs, and then calls the `removeAccountingTransaction` method.  It requires the Unified PHP SDK to be installed and configured, and expects a valid connection and transaction ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/transaction/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAccountingTransactionRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->transaction->removeAccountingTransaction(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Passthrough JSON with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update passthrough data in JSON format using the Unified API PHP SDK. It initializes the SDK, creates an `UpdatePassthroughJsonRequest` object, and then calls the `updatePassthroughJson` method.  Replace `<YOUR_API_KEY_HERE>` and `<id>` with your actual API key and connection ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdatePassthroughJsonRequest(\n    connectionId: '<id>',\n    path: '/etc/namedb',\n);\n\n$response = $sdk->passthrough->updatePassthroughJson(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ticketing Customer using PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a ticketing customer using the Unified.to PHP SDK. It requires setting up the SDK with an API key, creating a request object with the customer data and IDs, and then calling the `updateTicketingCustomer` function. The response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/customer/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTicketingCustomerRequest(\n    ticketingCustomer: new Shared\\TicketingCustomer(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->customer->updateTicketingCustomer(\n    request: $request\n);\n\nif ($response->ticketingCustomer !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Repo Organization with Unified API in PHP\nDESCRIPTION: This snippet demonstrates how to remove a repository organization using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary connection and organization IDs, and then calls the `removeRepoOrganization` method. If the status code is 200, it indicates a successful deletion.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoOrganizationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->removeRepoOrganization(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: SCIM Address Type Values\nDESCRIPTION: Defines the possible values for the SCIM address type, including 'work', 'home', and 'other'. This is likely represented using an enum or a set of constants in the PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/Models/Shared/ScimAddressType.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Example representation of SCIM Address Type in PHP\n\n// Option 1: Using constants\ndefine('SCIM_ADDRESS_TYPE_WORK', 'work');\ndefine('SCIM_ADDRESS_TYPE_HOME', 'home');\ndefine('SCIM_ADDRESS_TYPE_OTHER', 'other');\n\n// Option 2: Using an enum (requires PHP >= 8.1)\n// enum ScimAddressType: string {\n//   case Work = 'work';\n//   case Home = 'home';\n//   case Other = 'other';\n// }\n\n// Option 3: Using a class with constants\nclass ScimAddressType {\n  const Work = 'work';\n  const Home = 'home';\n  const Other = 'other';\n}\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Payment Link in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a payment link using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing a connection ID and the ID of the payment link to retrieve within the request. The response contains the payment link or an error.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->getPaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HRIS Group using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove an HRIS group using the Unified.to PHP SDK.  The code initializes the SDK and then creates the appropriate `RemoveHrisGroupRequest` before attempting to remove the group via the `removeHrisGroup` method. Checking the `statusCode` allows for proper handling of successful or unsuccessful requests.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisGroupRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->removeHrisGroup(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Student (Patch) with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to partially update a student's information using the `patchLmsStudent` method of the Unified.to PHP SDK. It requires `vendor/autoload.php` and uses `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The SDK is initialized with an API key, a request object is created containing the student's ID, connection ID and an `LmsStudent` object with the updated information, and the `patchLmsStudent` method is called to perform the update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/student/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsStudentRequest(\n    lmsStudent: new Shared\\LmsStudent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->student->patchLmsStudent(\n    request: $request\n);\n\nif ($response->lmsStudent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Storage Files in PHP\nDESCRIPTION: This code snippet illustrates how to list all storage files for a connection using the Unified.to PHP SDK. It sets up the SDK, constructs a `ListStorageFilesRequest` with the `connectionId`, and calls the `listStorageFiles` method. The response contains an array of storage files.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/storage/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListStorageFilesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->storage->listStorageFiles(\n    request: $request\n);\n\nif ($response->storageFiles !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Passthrough Data with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to delete passthrough data using the Unified API PHP SDK. It initializes the SDK, creates a `RemovePassthroughRequest` object, and then calls the `removePassthrough` method. Replace `<YOUR_API_KEY_HERE>` and `<id>` with your actual API key and connection ID.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemovePassthroughRequest(\n    connectionId: '<id>',\n    path: '/Applications',\n);\n\n$response = $sdk->passthrough->removePassthrough(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Commerce Item PHP\nDESCRIPTION: This snippet provides an example of how to remove a commerce item using the Unified PHP SDK.  It involves initializing the SDK with security credentials, creating a request object with connection and item IDs, and calling the removeCommerceItem method on the commerce client. It processes successful responses (status code 200).  Requires 'vendor/autoload.php'.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCommerceItemRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->removeCommerceItem(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Ticketing Note in PHP\nDESCRIPTION: This snippet demonstrates how to remove a ticketing note using the `removeTicketingNote` method of the Unified.to PHP SDK. It requires the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. It initializes the SDK, creates a `RemoveTicketingNoteRequest` object with the necessary parameters (including `connectionId` and `id`), and calls the `removeTicketingNote` method. Finally, it checks for a successful response (status code 200) and provides a placeholder to handle the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingNoteRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ticketing->removeTicketingNote(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payout Details with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a payout using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID and payout ID, and then calls the `getPaymentPayout` method. The response is then handled if the payout is found.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentPayoutRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->getPaymentPayout(\n    request: $request\n);\n\nif ($response->paymentPayout !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Repository Organization using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository organization using the Unified API PHP SDK. It requires the Unified_to library and models for operations and shared data. The example sets up the SDK with an API key, constructs a request object with the necessary data, and then calls the `patchRepoOrganization` method.  The request parameter is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->patchRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a CRM Lead using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates removing a CRM lead using the Unified.to PHP SDK.  It initializes the SDK with security credentials, creates a request object with connection and lead IDs, and then calls the removeCrmLead method. The status code of the response is checked to confirm successful removal.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lead/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCrmLeadRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lead->removeCrmLead(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Repo Commit using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository commit using the `PATCH` method with the Unified.to PHP SDK. It requires `vendor/autoload.php` for dependencies and utilizes the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. It initializes the SDK with an API key, constructs a `PatchRepoCommitRequest` with the `RepoCommit` data, `connectionId`, and commit `id`, and then calls the `patchRepoCommit` method.  The updated response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commit/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(\n        repoId: '<id>',\n        userId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commit->patchRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Messaging Message in PHP\nDESCRIPTION: This snippet shows how to remove a messaging message using the `removeMessagingMessage` function. It uses the `RemoveMessagingMessageRequest` object and requires a connection ID and a message ID.  It checks the status code of the response to determine if the operation was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveMessagingMessageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->messaging->removeMessagingMessage(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a KMS Comment with Unified.to PHP SDK\nDESCRIPTION: This code demonstrates how to remove a KMS comment using the Unified.to PHP SDK.  It initializes the SDK with an API key, creates a `RemoveKmsCommentRequest` object with the required `connectionId` and `id`, and then invokes the `removeKmsComment` function.  A check is performed to verify that the status code is 200 for successful removal, but this is purely an example, as status code checking needs to be expanded to other codes. `vendor/autoload.php` file is needed for loading dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveKmsCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->removeKmsComment(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accounting Account with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve an accounting account using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a GetAccountingAccountRequest object with connection and account IDs, sends the request, and then handles the response. The `vendor/autoload.php` file is required for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingAccountRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->getAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create CRM Pipeline using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a CRM pipeline using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `CreateCrmPipelineRequest` object with the necessary parameters (crmPipeline and connectionId), and then calls the `createCrmPipeline` method. Finally, it checks if the response contains a CRM pipeline and handles the response accordingly. Requires 'vendor/autoload.php' for dependency loading.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmPipelineRequest(\n    crmPipeline: new Shared\\CrmPipeline(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->createCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching AtsInterview with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to partially update an AtsInterview using the Unified.to PHP SDK. It initializes the SDK, configures the security, builds a request object with the `atsInterview`, `connectionId`, and `id`, and then calls the `patchAtsInterview` function.  The modified AtsInterview is then handled based on the response. Requires the Unified.to PHP SDK and `vendor/autoload.php` for dependency management.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/interview/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsInterviewRequest(\n    atsInterview: new Shared\\AtsInterview(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->interview->patchAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating (Patch) ATS Candidate using Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to update an ATS candidate using the Unified.to PHP SDK with a PATCH request. It initializes the SDK, creates a `PatchAtsCandidateRequest` object, and calls the `patchAtsCandidate` method. It requires the `vendor/autoload.php` file and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. The `atsCandidate` parameter is of type `Shared\\AtsCandidate`, `connectionId` and `id` are strings.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/candidate/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAtsCandidateRequest(\n    atsCandidate: new Shared\\AtsCandidate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->candidate->patchAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List Genai Models in PHP\nDESCRIPTION: This code snippet demonstrates how to list all available Genai models using the Unified PHP SDK. It requires the `vendor/autoload.php` file and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK, sets the API key, creates a request object with a `connectionId`, and then calls the `listGenaiModels` method on the `genai` service. It handles the response if it's not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/genai/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListGenaiModelsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->genai->listGenaiModels(\n    request: $request\n);\n\nif ($response->genaiModels !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Person Enrichment Information with PHP\nDESCRIPTION: This snippet demonstrates how to retrieve enrichment information for a person using the Unified PHP SDK. It initializes the SDK, creates a request object with a connection ID, calls the `listEnrichPeople` method, and handles the response. The API key needs to be configured in the SDK builder.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/enrich/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListEnrichPeopleRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->enrich->listEnrichPeople(\n    request: $request\n);\n\nif ($response->enrichPerson !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Subscription - Unified.to PHP\nDESCRIPTION: This snippet shows how to update a subscription using the Unified.to PHP SDK. It initializes the SDK, creates a `PatchPaymentSubscriptionRequest`, and calls the `patchPaymentSubscription` method. The response is then handled if the `paymentSubscription` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPaymentSubscriptionRequest(\n    paymentSubscription: new Shared\\PaymentSubscription(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->payment->patchPaymentSubscription(\n    request: $request\n);\n\nif ($response->paymentSubscription !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Calendar Link with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a calendar link using the `removeCalendarLink` method. It includes the SDK setup, creating a `RemoveCalendarLinkRequest` with the connection and link IDs, and calling the `removeCalendarLink` method. The response's status code (200) indicates a successful deletion, prompting the execution of the corresponding handling logic.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCalendarLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->removeCalendarLink(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Event with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an existing calendar event using the `patchCalendarEvent` method. It requires setting up the Unified.to SDK, creating a `PatchCalendarEventRequest` object with the updated event details and necessary identifiers, and then calling the `patchCalendarEvent` method. The response is then handled to process the updated event.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCalendarEventRequest(\n    calendarEvent: new Shared\\CalendarEvent(\n        endAt: '<value>',\n        startAt: '<value>',\n        subject: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->patchCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching HRIS Location with Unified PHP SDK\nDESCRIPTION: This snippet shows how to update a HRIS location using the Unified PHP SDK.  The SDK is initialized. A `PatchHrisLocationRequest` object is created with the updated location data, connection ID, and location ID.  The `patchHrisLocation` method is then called, and the response handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisLocationRequest(\n    hrisLocation: new Shared\\HrisLocation(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->patchHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Support Issues with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list support issues using the Unified API PHP SDK. It initializes the SDK with your API key, creates a request object for listing issues, and then calls the `listUnifiedIssues` method on the `unified` service. The response is then checked for any issues and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedIssuesRequest();\n\n$response = $sdk->unified->listUnifiedIssues(\n    request: $request\n);\n\nif ($response->issues !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Calendar Event with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to remove a calendar event using the `removeCalendarEvent` method. It involves setting up the Unified.to SDK, creating a `RemoveCalendarEventRequest` object with the connection and event IDs, and then calling the `removeCalendarEvent` method. The response status code is checked to confirm the successful removal of the event.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveCalendarEventRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->removeCalendarEvent(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Item PHP\nDESCRIPTION: This code snippet shows how to update a commerce item using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateCommerceItemRequest` object, and calls the `updateCommerceItem` method.  A skeleton `CommerceItem` object is passed without properties set.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceItemRequest(\n    commerceItem: new Shared\\CommerceItem(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->updateCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get ATS Scorecard Example in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a scorecard from an ATS using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetAtsScorecardRequest` object with the connection ID and scorecard ID, and then calls the `getAtsScorecard` method. The response is then checked for a scorecard object and handled accordingly. Requires the `vendor/autoload.php` for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsScorecardRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->ats->getAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SCIM Groups with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a SCIM group using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the group details and IDs, and then calls the `updateScimGroups` method. The response is then checked to handle the updated group data. It requires the `vendor/autoload.php` file for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateScimGroupsRequest(\n    scimGroup: new Shared\\ScimGroup(\n        displayName: 'Frederic.Reichel',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->updateScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Task Comment with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a task comment using the Unified.to PHP SDK. It initializes the SDK, creates a `UpdateTaskCommentRequest` object which includes the updated `TaskComment` (task ID and text), connection ID, and comment ID. The `updateTaskComment` method is called, and the response is checked to ensure the returned `taskComment` is not null to process a successful update.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTaskCommentRequest(\n    taskComment: new Shared\\TaskComment(\n        taskId: '<id>',\n        text: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->updateTaskComment(\n    request: $request\n);\n\nif ($response->taskComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LmsClass with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve an LMS class using the Unified.to PHP SDK. It initializes the SDK, sets the API key, constructs a `GetLmsClassRequest` object with the connection ID and the LMS class ID, and calls the `getLmsClass` method on the `class` service.  The response is then handled if it's not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/class/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetLmsClassRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->class->getLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an ATS Job with Unified.to in PHP\nDESCRIPTION: This snippet shows how to retrieve an existing ATS job using the Unified.to PHP SDK. It includes requiring the autoloader, creating a `UnifiedTo` SDK instance with the API key, then constructing a `GetAtsJobRequest` with the connection ID and job ID. The `getAtsJob` method is then called, and the response is handled based on whether an `atsJob` object is returned.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/job/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAtsJobRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->job->getAtsJob(\n    request: $request\n);\n\nif ($response->atsJob !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching LmsClass with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an LMS class using the `patch` method with the Unified.to PHP SDK. It initializes the SDK, sets the API key, constructs a `PatchLmsClassRequest` object with updated LMS class details (courseId and name), the connection ID, and the LMS class ID, and calls the `patchLmsClass` method on the `class` service. The response is handled if it's not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/class/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchLmsClassRequest(\n    lmsClass: new Shared\\LmsClass(\n        courseId: '<id>',\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->class->patchLmsClass(\n    request: $request\n);\n\nif ($response->lmsClass !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commerce Location with Unified.to PHP SDK\nDESCRIPTION: Shows how to retrieve a specific commerce location using its ID with the Unified.to PHP SDK. This snippet depends on the Unified.to SDK and uses the `Unified_to` and `Operations` namespaces. It initializes the SDK with an API key and sets up a `GetCommerceLocationRequest` object, specifying both the connection ID and the location ID. Finally, it makes the request to the SDK and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCommerceLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->getCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HRIS Device using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new HRIS device using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the device details (name) and connection ID, and then sends the request to the API. The response is then handled to process the newly created device. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisDeviceRequest(\n    hrisDevice: new Shared\\HrisDevice(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->createHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repo Branch using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a repository branch using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object containing the branch details (name, repoId), and then calls the `createRepoBranch` method on the `repo` service. The response is then handled to process the created branch. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoBranchRequest(\n    repoBranch: new Shared\\RepoBranch(\n        name: '<value>',\n        repoId: '<id>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->createRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Payment Link with Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to remove a payment link using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID and link ID, and then calls the `removePaymentLink` method. The API key should be replaced with a valid key. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` namespace.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemovePaymentLinkRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->link->removePaymentLink(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Repo Branch in PHP\nDESCRIPTION: This snippet retrieves an existing repository branch using its ID and the connection ID with the Unified.to PHP SDK. It initializes the SDK, creates a request object, and then calls the getRepoBranch method. The response will contain the retrieved RepoBranch object or null if not found.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/branch/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoBranchRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->branch->getRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Task with Unified.to API (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a task using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `CreateTaskTaskRequest` object, and then calls the `createTaskTask` method on the `task` service. The request includes the `connectionId` and a `TaskTask` object. It requires the Unified PHP SDK installed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTaskTaskRequest(\n    taskTask: new Shared\\TaskTask(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->task->createTaskTask(\n    request: $request\n);\n\nif ($response->taskTask !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Repo Organization in PHP\nDESCRIPTION: This code snippet demonstrates how to update a repo organization using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a PatchRepoOrganizationRequest object with a RepoOrganization payload, and calls the patchRepoOrganization method. The response is then checked for repoOrganization and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->patchRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Company using PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a HRIS company using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection ID and company ID, and then calls the `getHrisCompany` method. Error handling is done via SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisCompanyRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an HRIS Device with Unified.to in PHP\nDESCRIPTION: This snippet retrieves an HRIS device using the Unified.to PHP SDK.  It sets up the SDK with an API key, creates a request object that specifies the connection ID and device ID, and then invokes the `getHrisDevice` method.  The response containing the HRIS device information is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/device/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisDeviceRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->device->getHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a KMS Space with Unified.to PHP SDK\nDESCRIPTION: This snippet outlines how to update a KMS space using the Unified.to PHP SDK. The snippet uses the builder pattern to configure the API key.  The `patchKmsSpace` method is called with the request object and a conditional check is performed against the response object to see if the update was successful. It needs the `vendor/autoload.php` for loading the sdk. The name parameter within the `KmsSpace` object is being updated in this example.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsSpaceRequest(\n    kmsSpace: new Shared\\KmsSpace(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->patchKmsSpace(\n    request: $request\n);\n\nif ($response->kmsSpace !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching HRIS Groups with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a HRIS group using the Unified API PHP SDK. It initializes the SDK with an API key, creates a `PatchHrisGroupRequest` object including the `HrisGroup` to be patched, connection id and group id, calls the `patchHrisGroup` method on the `group` service, and then handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisGroupRequest(\n    hrisGroup: new Shared\\HrisGroup(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->patchHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HRIS Company using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a new HRIS company using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the company details and connection ID, and then sends the request to the API. The response is then handled to process the newly created company. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisCompanyRequest(\n    hrisCompany: new Shared\\HrisCompany(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->createHrisCompany(\n    request: $request\n);\n\nif ($response->hrisCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Courses (PHP)\nDESCRIPTION: This code snippet demonstrates how to list all LMS courses using the Unified API PHP SDK. It initializes the SDK, creates a request object with the connection ID, and then calls the `listLmsCourses` method on the `lms` service. It requires the Unified API PHP SDK to be installed. The response contains a list of LMS courses if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsCoursesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->listLmsCourses(\n    request: $request\n);\n\nif ($response->lmsCourses !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Martech Member with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific martech member using the Unified.to PHP SDK. It requires setting up the SDK with an API key and providing the `connectionId` and the `id` of the member within a `GetMartechMemberRequest`. The response contains the requested `MarketingMember` object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/member/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetMartechMemberRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->member->getMartechMember(\n    request: $request\n);\n\nif ($response->marketingMember !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Repository PHP\nDESCRIPTION: This snippet demonstrates how to create a repository using the Unified.to PHP SDK. It initializes the SDK, creates a `CreateRepoRepositoryRequest` with the repository details and connection ID, and then calls the `createRepoRepository` method to create the repository. The code includes error handling to check if the creation was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoRepositoryRequest(\n    repoRepository: new Shared\\RepoRepository(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->createRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Getting SCIM User with PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a SCIM user using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading. It initializes the SDK, creates a `GetScimUsersRequest` with a connection ID and user ID, and calls the `getScimUsers` method. The response is handled if `scimUser` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetScimUsersRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->getScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Event with Unified.to SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to update a calendar event using the Unified.to PHP SDK. It initializes the SDK, creates an `UpdateCalendarEventRequest` object with a `CalendarEvent` object containing updated event details (endAt, startAt, subject), connection ID, and event ID. It then calls the `updateCalendarEvent` method. The code includes a conditional statement to handle the response when the `calendarEvent` property is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCalendarEventRequest(\n    calendarEvent: new Shared\\CalendarEvent(\n        endAt: '<value>',\n        startAt: '<value>',\n        subject: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->updateCalendarEvent(\n    request: $request\n);\n\nif ($response->calendarEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Company with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a CRM company using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with the necessary company data and connection ID, and then calls the createCrmCompany method. The example requires the Unified.to PHP SDK installed via composer, and assumes the availability of the Unified and Shared models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/crm/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmCompanyRequest(\n    crmCompany: new Shared\\CrmCompany(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->crm->createCrmCompany(\n    request: $request\n);\n\nif ($response->crmCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get Calendar Recording with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a calendar recording using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the connection and recording IDs, calls the getCalendarRecording method, and handles the response. The code requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetCalendarRecordingRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->getCalendarRecording(\n    request: $request\n);\n\nif ($response->calendarRecording !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Task Project in PHP\nDESCRIPTION: This code snippet demonstrates how to update a task project using the Unified PHP SDK. It initializes the SDK, creates a request object with necessary parameters such as connection ID, project ID and the `TaskProject` object to update, and then calls the `updateTaskProject` method. Requires the `vendor/autoload.php` file for dependencies and a valid API key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/project/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTaskProjectRequest(\n    taskProject: new Shared\\TaskProject(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->project->updateTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HRIS Location with Unified.to PHP SDK\nDESCRIPTION: Illustrates creating an HRIS location using the Unified.to PHP SDK. Similar to the commerce location creation, this snippet requires the Unified.to SDK installed and makes use of the `Unified_to`, `Operations`, and `Shared` namespaces.  It configures the SDK with an API key and creates a `CreateHrisLocationRequest` object, specifying the connection ID and HRIS location details. The SDK sends the request and processes the response accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateHrisLocationRequest(\n    hrisLocation: new Shared\\HrisLocation(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->location->createHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Ticketing Note using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to remove a ticketing note using the Unified.to PHP SDK. It requires `vendor/autoload.php` and uses `Unified\\Unified_to` namespace. An API key is needed for authentication. The request object needs connectionId and ID of the note to be removed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/note/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveTicketingNoteRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->note->removeTicketingNote(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HRIS Group with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve an HRIS group using the Unified.to PHP SDK. It initializes the SDK, creates a `GetHrisGroupRequest` with the connection ID and group ID, and calls the `getHrisGroup` method.  An API key is required. Error handling is not explicitly included, but the response object holds the group data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisGroupRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->getHrisGroup(\n    request: $request\n);\n\nif ($response->hrisGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Deal with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a CRM deal using the Unified.to PHP SDK. It initializes the SDK, sets the API key, creates a CreateCrmDealRequest object, and then calls the createCrmDeal method on the deal API.  It requires the Unified.to PHP SDK to be installed via composer. Parameters include the connectionId and the CrmDeal object.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/deal/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCrmDealRequest(\n    crmDeal: new Shared\\CrmDeal(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->deal->createCrmDeal(\n    request: $request\n);\n\nif ($response->crmDeal !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Connection with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a connection using the Unified API PHP SDK. It initializes the SDK, sets the API key, creates a request object for updating a connection with specific categories, integration type, and permissions, and then calls the `patchUnifiedConnection` method. Finally, it checks for a successful response and handles it.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedConnectionRequest(\n    connection: new Shared\\Connection(\n        categories: [\n            Shared\\PropertyConnectionCategories::Messaging,\n        ],\n        integrationType: '<value>',\n        permissions: [\n            Shared\\PropertyConnectionPermissions::EnrichCompanyRead,\n        ],\n    ),\n    id: '<id>',\n);\n\n$response = $sdk->unified->patchUnifiedConnection(\n    request: $request\n);\n\nif ($response->connection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Scorecard with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an ATS scorecard using the `updateAtsScorecard` method of the Unified PHP SDK. It requires setting up the SDK with an API key and constructing an `UpdateAtsScorecardRequest` object with the necessary parameters. The response is then handled to process the updated scorecard data. Requires 'vendor/autoload.php' for dependencies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scorecard/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsScorecardRequest(\n    atsScorecard: new Shared\\AtsScorecard(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scorecard->updateAtsScorecard(\n    request: $request\n);\n\nif ($response->atsScorecard !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repo Commit using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a repository commit using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object containing the commit details (repoId, userId), and then calls the `createRepoCommit` method on the `repo` service. The response is then handled to process the created commit. Requires the Unified.to PHP SDK.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(\n        repoId: '<id>',\n        userId: '<id>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->repo->createRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Task Project Example in PHP\nDESCRIPTION: This code snippet demonstrates how to update a task project using the Unified PHP SDK. It initializes the SDK, creates a request object containing the necessary parameters (connectionId, id, and TaskProject data), and then calls the `patchTaskProject` method on the `task` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/task/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTaskProjectRequest(\n    taskProject: new Shared\\TaskProject(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->task->patchTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Calendar Busies with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list calendar busies using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID, and calls the `listCalendarBusies` method to retrieve the busies. The response is then handled to process the retrieved calendar busies.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/busy/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCalendarBusiesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->busy->listCalendarBusies(\n    request: $request\n);\n\nif ($response->calendarBusies !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve a Payment Refund - PHP\nDESCRIPTION: Retrieves a specific payment refund from Unified.to using its ID. Requires the Unified.to PHP SDK.  The example demonstrates initializing the SDK, creating a request object with the connection ID and refund ID, and calling the `getPaymentRefund` method.  The response object is checked for a paymentRefund, and if present, should be handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/refund/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetPaymentRefundRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->refund->getPaymentRefund(\n    request: $request\n);\n\nif ($response->paymentRefund !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Martech List in PHP\nDESCRIPTION: This snippet demonstrates how to create a new Martech List using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters, and then calls the `createMartechList` method. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/list/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMartechListRequest(\n    marketingList: new Shared\\MarketingList(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->list->createMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Repo Commit in PHP\nDESCRIPTION: This code snippet demonstrates how to update a commit using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a PatchRepoCommitRequest object with a RepoCommit payload, and calls the patchRepoCommit method. The response is then checked for repoCommit and handled accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoCommitRequest(\n    repoCommit: new Shared\\RepoCommit(\n        repoId: '<id>',\n        userId: '<id>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->patchRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Organizations with Unified.to PHP SDK\nDESCRIPTION: Illustrates how to remove an organization using the Unified.to PHP SDK's `removeRepoOrganization` method. The example sets up the SDK, creates a request with the connection and organization IDs, and executes the removal. It checks for a status code of 200 to indicate success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveRepoOrganizationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->organization->removeRepoOrganization(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Passthrough Raw in PHP\nDESCRIPTION: This snippet demonstrates how to use the Unified PHP SDK to patch a passthrough endpoint using raw data. It initializes the SDK, sets the security key, creates a request object, and calls the `patchPassthroughRaw` method. The connection ID and path are required parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchPassthroughRawRequest(\n    connectionId: '<id>',\n    path: '/etc/mail',\n);\n\n$response = $sdk->passthrough->patchPassthroughRaw(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Commerce Collections with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to list all commerce collections using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs a request object with the connectionId, and calls the listCommerceCollections method. The code then checks if the response contains any commerceCollections. It requires the Unified.to PHP SDK to be installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/collection/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListCommerceCollectionsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->collection->listCommerceCollections(\n    request: $request\n);\n\nif ($response->commerceCollections !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize SDK with Server Index - PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Unified.to PHP SDK with a specific server index. The server index is used to select the appropriate API endpoint.  Dependencies include the Unified SDK, autoloader, and relevant models.  It creates an accounting account and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setServerIndex(2)\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAccountingAccountRequest(\n    accountingAccount: new Shared\\AccountingAccount(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->accounting->createAccountingAccount(\n    request: $request\n);\n\nif ($response->accountingAccount !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing SCIM Groups with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a SCIM group using the Unified API PHP SDK. It initializes the SDK with an API key, creates a `RemoveScimGroupsRequest` object with a connection ID and group ID, calls the `removeScimGroups` method on the `group` service, and then handles the response based on the status code.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveScimGroupsRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->removeScimGroups(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a KMS Page with Unified.to PHP SDK\nDESCRIPTION: This snippet illustrates how to remove a KMS page using the Unified.to PHP SDK. It initializes the SDK with the API Key, then constructs the `RemoveKmsPageRequest` object including the `connectionId` and `id` parameters. `removeKmsPage` is called on the `$sdk->kms` object and the status code is checked to be 200, implying the successful removal of the page. `vendor/autoload.php` is required to autoload the sdk. This status code check is purely exemplary.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveKmsPageRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->removeKmsPage(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KMS Page using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a KMS page using the Unified.to PHP SDK. It initializes the SDK, creates a request object with the necessary parameters (connectionId and kmsPage details), and then calls the createKmsPage function.  It requires the vendor autoload file and the Unified, Operations, and Shared models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/page/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateKmsPageRequest(\n    kmsPage: new Shared\\KmsPage(\n        title: '<value>',\n        type: Shared\\KmsPageType::Html,\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->page->createKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounting Organization with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve an accounting organization using the Unified.to PHP SDK. It requires the Unified.to SDK to be installed. The code initializes the SDK, creates a `GetAccountingOrganizationRequest` object with the connection ID and organization ID, and calls the `getAccountingOrganization` method on the organization API. The response is checked for the accounting organization data.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetAccountingOrganizationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->organization->getAccountingOrganization(\n    request: $request\n);\n\nif ($response->accountingOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Getting SCIM Group with PHP SDK\nDESCRIPTION: This snippet retrieves a SCIM group using the Unified.to PHP SDK. It requires autoloading via `vendor/autoload.php`. It initializes the SDK with an API key, creates a `GetScimGroupsRequest` object with a connection ID and group ID, and calls the `getScimGroups` method. Finally, it handles the response if the `scimGroup` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetScimGroupsRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->scim->getScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update Repo Organization using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository organization using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with organization details, connection ID and ID. Then it calls `updateRepoOrganization` method and handles the response. Requires `vendor/autoload.php`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->updateRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SCIM User with PHP SDK\nDESCRIPTION: This snippet shows how to create a SCIM user using the Unified.to PHP SDK. It loads dependencies with `vendor/autoload.php`. The SDK is initialized with the API key, and a `CreateScimUsersRequest` object is created with a `ScimUser` object and a connection ID. The `createScimUsers` method is then called with the request, and the response is handled if the `scimUser` is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scim/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateScimUsersRequest(\n    scimUser: new Shared\\ScimUser(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->scim->createScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Passthrough Raw in PHP\nDESCRIPTION: This snippet demonstrates how to use the Unified PHP SDK to create a passthrough endpoint using raw data. It initializes the SDK, sets the security key, creates a request object, and calls the `createPassthroughRaw` method. The connection ID and path are required parameters.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/passthrough/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePassthroughRawRequest(\n    connectionId: '<id>',\n    path: '/etc/namedb',\n);\n\n$response = $sdk->passthrough->createPassthroughRaw(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new metadata entry using the Unified.to PHP SDK. It requires setting up the SDK with your API key, creating a request object with the necessary metadata details (name, objectType), and then calling the createMetadataMetadata method. The example includes error handling and assumes you have the Unified.to PHP SDK installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/metadata/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateMetadataMetadataRequest(\n    metadataMetadata: new Shared\\MetadataMetadata(\n        name: '<value>',\n        objectType: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->metadata->createMetadataMetadata(\n    request: $request\n);\n\nif ($response->metadataMetadata !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HRIS Groups with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list HRIS groups using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and utilizes the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces. The snippet initializes the SDK, sets the API key, creates a `ListHrisGroupsRequest` object, and calls the `listHrisGroups` method on the `hris` object to retrieve the group data. The `connectionId` parameter in the request specifies the ID of the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListHrisGroupsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->hris->listHrisGroups(\n    request: $request\n);\n\nif ($response->hrisGroups !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Documents with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all ATS documents for a given connection using the Unified.to PHP SDK.  The SDK is initialized, a request object with the connectionId is created, and then the listAtsDocuments method is called.  The response containing the list of documents is then checked for null before being processed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/document/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsDocumentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->document->listAtsDocuments(\n    request: $request\n);\n\nif ($response->atsDocuments !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messaging Channels in PHP\nDESCRIPTION: This snippet demonstrates how to list all messaging channels using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies and uses the `Unified_to` and `Models\\Operations` namespaces. The code initializes the SDK with an API key and creates a `ListMessagingChannelsRequest` with a connection ID. The function returns an error if the messaging channels are null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/messaging/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMessagingChannelsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->messaging->listMessagingChannels(\n    request: $request\n);\n\nif ($response->messagingChannels !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Location in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific HRIS location using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetHrisLocationRequest` object with a connection ID and location ID, and then calls the `getHrisLocation` method to retrieve the location data. The response is then checked for a valid `hrisLocation` object. Dependencies include the Unified.to PHP SDK and the `GetHrisLocationRequest` model.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisLocationRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisLocation(\n    request: $request\n);\n\nif ($response->hrisLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticketing Ticket in PHP\nDESCRIPTION: This snippet demonstrates how to create a new ticketing ticket using the Unified.to PHP SDK. It initializes the SDK, sets the API key, and then creates a ticket using the `createTicketingTicket` method.  It requires the `Unified/Unified_to`, `Unified/Unified_to/Models/Operations`, and `Unified/Unified_to/Models/Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticket/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTicketingTicketRequest(\n    ticketingTicket: new Shared\\TicketingTicket(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticket->createTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a commit using the Unified.to PHP SDK. It initializes the SDK, creates a `GetRepoCommitRequest` with the connection ID and commit ID, and then calls the `getRepoCommit` method to retrieve the commit. The code includes error handling to check if the retrieval was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoCommitRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->getRepoCommit(\n    request: $request\n);\n\nif ($response->repoCommit !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating KMS Page with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a KMS page using the Unified API PHP SDK. It initializes the SDK, creates a request object with the updated page details (title, type), connection ID, and page ID.  It then calls the `updateKmsPage` method and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateKmsPageRequest(\n    kmsPage: new Shared\\KmsPage(\n        title: '<value>',\n        type: Shared\\KmsPageType::Other,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->updateKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage File in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a storage file using the Unified.to PHP SDK. It involves initializing the SDK, creating a `GetStorageFileRequest` with the `connectionId` and `id` of the file, and then calling the `getStorageFile` method. The response contains the requested storage file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/storage/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetStorageFileRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->storage->getStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage File in PHP\nDESCRIPTION: This code snippet demonstrates how to create a storage file using the Unified.to PHP SDK. It requires setting up the SDK with an API key and constructing a `CreateStorageFileRequest` object with the necessary parameters like `storageFile` and `connectionId`. The response object contains the created storage file.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/storage/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateStorageFileRequest(\n    storageFile: new Shared\\StorageFile(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->storage->createStorageFile(\n    request: $request\n);\n\nif ($response->storageFile !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating KMS Comment with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a KMS comment using the Unified PHP SDK. It initializes the SDK, creates a request object with the connection ID, comment ID, and the new content for the comment. The patchKmsComment method is called to update the comment.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        content: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->patchKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Get HRIS Payslip in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a specific HRIS payslip using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `GetHrisPayslipRequest` object with a connection ID and payslip ID, and then calls the `getHrisPayslip` method to retrieve the payslip data. The response is then checked for a valid `hrisPayslip` object. Dependencies include the Unified.to PHP SDK and the `GetHrisPayslipRequest` model.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetHrisPayslipRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->getHrisPayslip(\n    request: $request\n);\n\nif ($response->hrisPayslip !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Branch PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a branch using the Unified.to PHP SDK. It initializes the SDK, creates a `GetRepoBranchRequest` with the connection ID and branch ID, and then calls the `getRepoBranch` method to retrieve the branch. The code includes error handling to check if the retrieval was successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetRepoBranchRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->getRepoBranch(\n    request: $request\n);\n\nif ($response->repoBranch !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to handle errors when using the Unified API PHP SDK. It includes try-catch block to catch potential SDKException and manage API responses.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\ntry {\n    $request = new Operations\\CreateAccountingAccountRequest(\n        accountingAccount: new Shared\\AccountingAccount(),\n        connectionId: '<id>',\n    );\n\n    $response = $sdk->accounting->createAccountingAccount(\n        request: $request\n    );\n\n    if ($response->accountingAccount !== null) {\n        // handle response\n    }\n} catch (Errors\\SDKException $e) {\n    // handle default exception\n    throw $e;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Application Statuses with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all application statuses using the Unified PHP SDK. It initializes the SDK, creates a request to list application statuses, and handles the response. Requires the Unified PHP SDK installed via Composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/applicationstatus/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsApplicationstatusesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->applicationstatus->listAtsApplicationstatuses(\n    request: $request\n);\n\nif ($response->atsStatuses !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ATS Scorecards with PHP SDK\nDESCRIPTION: Demonstrates how to list all ATS scorecards using the Unified.to PHP SDK. It initializes the SDK, creates a `ListAtsScorecardsRequest` object with the connection ID, and calls the `listAtsScorecards` method on the scorecard service.  The example requires the Unified.to PHP SDK and specifies the security key.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/scorecard/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListAtsScorecardsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->scorecard->listAtsScorecards(\n    request: $request\n);\n\nif ($response->atsScorecards !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Commerce Location with Unified.to PHP SDK\nDESCRIPTION: Demonstrates creating a commerce location using the Unified.to PHP SDK. This snippet requires the Unified.to SDK installed via Composer and utilizes the `Unified_to`, `Operations`, and `Shared` namespaces. It sets up the SDK with an API key and defines a `CreateCommerceLocationRequest` object with the necessary location details and connection ID. The SDK then executes the request and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateCommerceLocationRequest(\n    commerceLocation: new Shared\\CommerceLocation(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->location->createCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SCIM Groups with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to list SCIM groups using the Unified API PHP SDK. It initializes the SDK with an API key, creates a `ListScimGroupsRequest` object with a connection ID, calls the `listScimGroups` method on the `group` service, and then handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListScimGroupsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->group->listScimGroups(\n    request: $request\n);\n\nif ($response->scimGroups !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SCIM Group with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to retrieve a SCIM group using the Unified.to PHP SDK.  It initializes the SDK, creates a `GetScimGroupsRequest` object with the connection ID and group ID, and then calls the `getScimGroups` method. The snippet assumes an API key is available for authentication and that `vendor/autoload.php` is included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\GetScimGroupsRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->getScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Link with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to update an existing calendar link using the `patchCalendarLink` method. It involves configuring the Unified.to SDK, creating a `PatchCalendarLinkRequest` object with the updated link details and required identifiers, and then invoking the `patchCalendarLink` method. The response object is checked, and appropriate handling logic should be implemented.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCalendarLinkRequest(\n    calendarLink: new Shared\\CalendarLink(\n        url: 'https://curly-skyline.biz/',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->patchCalendarLink(\n    request: $request\n);\n\nif ($response->calendarLink !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Unified Webhook in PHP\nDESCRIPTION: This code snippet demonstrates how to trigger a webhook using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object, and calls the `patchUnifiedWebhookTrigger` method. The response status code is checked to determine success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchUnifiedWebhookTriggerRequest(\n    id: '<id>',\n);\n\n$response = $sdk->unified->patchUnifiedWebhookTrigger(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Martech List in PHP\nDESCRIPTION: This snippet illustrates how to update an existing Martech List partially using the Unified.to PHP SDK's patch functionality.  It initializes the SDK, creates a `PatchMartechListRequest` with the connection ID, list ID and the partial `MarketingList` data. The `patchMartechList` method is then called. It requires `vendor/autoload.php` and the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/list/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchMartechListRequest(\n    marketingList: new Shared\\MarketingList(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->list->patchMartechList(\n    request: $request\n);\n\nif ($response->marketingList !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Page with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a KMS page using the Unified.to PHP SDK. It initializes the SDK, creates a request object with page title, type, and connection ID, and then calls the createKmsPage method. It requires the Unified.to PHP SDK to be installed and configured with your API key. The expected output is a KMS page object if the operation is successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateKmsPageRequest(\n    kmsPage: new Shared\\KmsPage(\n        title: '<value>',\n        type: Shared\\KmsPageType::Html,\n    ),\n    connectionId: '<id>',\n);\n\n$response = $sdk->kms->createKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Organizations with Unified.to PHP SDK\nDESCRIPTION: Shows how to update an organization using the `patchRepoOrganization` method in the Unified.to PHP SDK. It initializes the SDK, creates a request containing the updated organization data and connection/organization IDs, and sends the request. The code then checks for a successful response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->organization->patchRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Students using Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all LMS students using the Unified.to PHP SDK. It initializes the SDK, sets the API key for authentication, creates a request object with the connection ID, and calls the `listLmsStudents` method. The response is then checked for LMS students, and if present, it includes a placeholder for handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListLmsStudentsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->lms->listLmsStudents(\n    request: $request\n);\n\nif ($response->lmsStudents !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Employee with Unified.to PHP SDK\nDESCRIPTION: This code snippet illustrates how to remove an employee using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a `RemoveHrisEmployeeRequest` object with the `connectionId` and `id` of the employee, and calls the `removeHrisEmployee` method. It requires the `vendor/autoload.php` file and the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/employee/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveHrisEmployeeRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->employee->removeHrisEmployee(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ATS Interview with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create an ATS interview using the Unified API PHP SDK. It initializes the SDK, sets the security context, creates a request object with necessary parameters (connectionId, atsInterview), and then calls the createAtsInterview method. It handles the response by checking if the created atsInterview is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ats/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateAtsInterviewRequest(\n    atsInterview: new Shared\\AtsInterview(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ats->createAtsInterview(\n    request: $request\n);\n\nif ($response->atsInterview !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Storage File with Unified.to PHP SDK\nDESCRIPTION: Shows how to remove a storage file using the Unified.to PHP SDK.  It uses `vendor/autoload.php` for dependency loading. A `RemoveStorageFileRequest` is initiated with the connection ID and file ID. Security is required for authorization.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/file/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveStorageFileRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->file->removeStorageFile(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update KMS Page Example in PHP\nDESCRIPTION: This code snippet demonstrates how to update a KMS page using the Unified API PHP SDK. It initializes the SDK with an API key, creates an `UpdateKmsPageRequest` object with necessary parameters (connection ID, page ID, and KMS page details like title and type), and calls the `updateKmsPage` method. Finally, it checks if the response contains a `kmsPage` object and handles the response accordingly.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/page/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateKmsPageRequest(\n    kmsPage: new Shared\\KmsPage(\n        title: '<value>',\n        type: Shared\\KmsPageType::Other,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->page->updateKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Refunds with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to list payment refunds using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object, calls the `listPaymentRefunds` method, and handles the response.  The required dependency is the Unified.to PHP SDK, installed via composer.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/payment/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListPaymentRefundsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->payment->listPaymentRefunds(\n    request: $request\n);\n\nif ($response->paymentRefunds !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Repository Pull Request using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository pull request using the Unified API PHP SDK. It requires the Unified_to library and models for operations and shared data. The example sets up the SDK with an API key, constructs a request object with the necessary data, and then calls the `patchRepoPullrequest` method. The request parameter is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoPullrequestRequest(\n    repoPullrequest: new Shared\\RepoPullrequest(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->patchRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating KMS Comment with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a KMS comment using the Unified API PHP SDK. It initializes the SDK with an API key, creates a request object with the updated comment details (content), connection ID, and comment ID. Then, it calls the `updateKmsComment` method and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateKmsCommentRequest(\n    kmsComment: new Shared\\KmsComment(\n        content: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->updateKmsComment(\n    request: $request\n);\n\nif ($response->kmsComment !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Commerce Collection PHP\nDESCRIPTION: This code snippet demonstrates how to update a commerce collection using the Unified.to PHP SDK. It initializes the SDK with an API key, constructs an `UpdateCommerceCollectionRequest` object with necessary parameters (collection, connection ID, and collection ID), and then calls the `updateCommerceCollection` method on the `commerce` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/commerce/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCommerceCollectionRequest(\n    commerceCollection: new Shared\\CommerceCollection(\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->commerce->updateCommerceCollection(\n    request: $request\n);\n\nif ($response->commerceCollection !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: List KMS Spaces using Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to list all KMS spaces using the Unified.to PHP SDK. The code initializes the SDK with API key security, constructs a request object containing the connection ID, calls the `listKmsSpaces` method, and checks the response for a list of KMS spaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListKmsSpacesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->kms->listKmsSpaces(\n    request: $request\n);\n\nif ($response->kmsSpaces !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticketing Ticket in PHP\nDESCRIPTION: This snippet demonstrates how to create a ticketing ticket using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file to be included and uses the `Unified\\Unified_to`, `Unified\\Unified_to\\Models\\Operations`, and `Unified\\Unified_to\\Models\\Shared` namespaces. An API key is required for authentication. The `connectionId` is used to specify the connection to use.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/ticketing/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateTicketingTicketRequest(\n    ticketingTicket: new Shared\\TicketingTicket(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->ticketing->createTicketingTicket(\n    request: $request\n);\n\nif ($response->ticketingTicket !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Repo Organization with Unified.to PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a repository organization using the Unified.to PHP SDK. It requires the Unified.to SDK to be installed and configured. The code initializes the SDK with an API key, constructs a request object with the organization details and connection ID, and then calls the `createRepoOrganization` method. The response object is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/organization/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreateRepoOrganizationRequest(\n    repoOrganization: new Shared\\RepoOrganization(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->organization->createRepoOrganization(\n    request: $request\n);\n\nif ($response->repoOrganization !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Update SCIM User Example in PHP\nDESCRIPTION: This snippet demonstrates how to update a SCIM user using the Unified PHP SDK. It requires the `vendor/autoload.php` file for dependency management. The code initializes the Unified SDK, creates a request object with a SCIM user, a connection ID, and an ID, and then calls the `updateScimUsers` method. Finally, it handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/user/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateScimUsersRequest(\n    scimUser: new Shared\\ScimUser(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->user->updateScimUsers(\n    request: $request\n);\n\nif ($response->scimUser !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Company Enrichment Information with PHP\nDESCRIPTION: This snippet demonstrates how to retrieve enrichment information for a company using the Unified PHP SDK. It initializes the SDK, creates a request object with a connection ID, calls the `listEnrichCompanies` method, and handles the response. The API key needs to be configured in the SDK builder.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/enrich/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListEnrichCompaniesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->enrich->listEnrichCompanies(\n    request: $request\n);\n\nif ($response->enrichCompany !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Marketing Lists using PHP SDK\nDESCRIPTION: This code snippet shows how to list all marketing lists using the Unified.to PHP SDK. It initializes the SDK with an API key, creates a request object with a connection ID, and calls the listMartechLists method. The response is then checked for success.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListMartechListsRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->martech->listMartechLists(\n    request: $request\n);\n\nif ($response->marketingLists !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing KMS Pages using Unified.to PHP SDK\nDESCRIPTION: This code snippet explains how to list all KMS pages for a connection using the Unified.to PHP SDK.  It initializes the SDK, creates a request object with the connectionId, and then calls the listKmsPages function. The code requires the vendor autoload file and the Unified and Operations models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/page/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListKmsPagesRequest(\n    connectionId: '<id>',\n);\n\n$response = $sdk->page->listKmsPages(\n    request: $request\n);\n\nif ($response->kmsPages !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Repository using Unified API PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a repository using the Unified API PHP SDK. It requires the Unified_to library and models for operations and shared data. The example sets up the SDK with an API key, constructs a request object with the necessary data, including the repository name, connection ID, and repository ID, and then calls the `patchRepoRepository` method. The request parameter is required.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/repo/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoRepositoryRequest(\n    repoRepository: new Shared\\RepoRepository(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->repo->patchRepoRepository(\n    request: $request\n);\n\nif ($response->repoRepository !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar with Unified API in PHP\nDESCRIPTION: This snippet shows how to update a calendar using the Unified API and PHP SDK. The example initializes the SDK with API credentials, creates a request to patch the calendar including `connectionId`, `id` and the `calendarCalendar` with updated fields. It demonstrates handling the response from the API after the update operation.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/calendar/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCalendarCalendarRequest(\n    calendarCalendar: new Shared\\CalendarCalendar(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->calendar->patchCalendarCalendar(\n    request: $request\n);\n\nif ($response->calendarCalendar !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UC Contact in PHP\nDESCRIPTION: This snippet demonstrates how to update a contact using the Unified PHP SDK. It requires `vendor/autoload.php` for autoloading, and utilizes `Unified_to`, `Unified_to\\Models\\Operations`, and `Unified_to\\Models\\Shared` namespaces. The API key is used for authentication, while `connectionId`, `id`, and a `Shared\\UcContact` instance are required parameters within the request.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/uc/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateUcContactRequest(\n    ucContact: new Shared\\UcContact(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->uc->updateUcContact(\n    request: $request\n);\n\nif ($response->ucContact !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: PatchMartechMemberResponse Fields\nDESCRIPTION: This table defines the fields within the PatchMartechMemberResponse object. It specifies the data type, requirement status, and a brief description for each field, including `contentType`, `marketingMember`, `statusCode`, and `rawResponse`.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/Models/Operations/PatchMartechMemberResponse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field                                                                                                        | Type                                                                                                         | Required                                                                                                     | Description                                                                                                  |\n| ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |\n| `contentType`                                                                                                | *string*                                                                                                     | :heavy_check_mark:                                                                                           | HTTP response content type for this operation                                                                |\n| `marketingMember`                                                                                            | [?Shared\\MarketingMember](../../Models/Shared/MarketingMember.md)                                            | :heavy_minus_sign:                                                                                           | Successful                                                                                                   |\n| `statusCode`                                                                                                 | *int*                                                                                                        | :heavy_check_mark:                                                                                           | HTTP response status code for this operation                                                                 |\n| `rawResponse`                                                                                                | [\\Psr\\Http\\Message\\ResponseInterface](https://www.php-fig.org/psr/psr-7/#33-psrhttpmessageresponseinterface) | :heavy_check_mark:                                                                                           | Raw HTTP response; suitable for custom response parsing                                                      |\n```\n\n----------------------------------------\n\nTITLE: Listing LMS Courses using Unified.to PHP SDK\nDESCRIPTION: This example is missing from the content, but the structure for similar examples, such as listing LMS Instructors and Students, can be used to create one. It involves setting up the SDK, creating a request object for listing courses, and handling the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lms/README.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Update HRIS Device with Unified.to PHP SDK\nDESCRIPTION: This snippet updates a device using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for autoloading dependencies. It initializes the SDK with an API key, creates a request object with the device data and connection/device IDs, and then sends the request to the `updateHrisDevice` method. Finally, it handles the response if successful.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/hris/README.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateHrisDeviceRequest(\n    hrisDevice: new Shared\\HrisDevice(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->hris->updateHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ticketing Note using Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a ticketing note using the Unified PHP SDK. It includes setting up the SDK with an API key, creating a request object with the necessary parameters (ticketingNote, connectionId, and id), and calling the updateTicketingNote method. The response is then handled to process the updated ticketing note. It requires the Unified PHP SDK to be installed and the 'vendor/autoload.php' file to be included.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/note/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateTicketingNoteRequest(\n    ticketingNote: new Shared\\TicketingNote(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->note->updateTicketingNote(\n    request: $request\n);\n\nif ($response->ticketingNote !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Repo PullRequest with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to patch a repository pull request using the Unified.to PHP SDK. It initializes the SDK, sets up the request with a `RepoPullrequest` object, a connection ID, and a pull request ID, and then calls the `patchRepoPullrequest` method. The example handles potential responses.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pullrequest/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchRepoPullrequestRequest(\n    repoPullrequest: new Shared\\RepoPullrequest(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pullrequest->patchRepoPullrequest(\n    request: $request\n);\n\nif ($response->repoPullrequest !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Commerce Location with Unified PHP SDK\nDESCRIPTION: This snippet shows how to update a commerce location using the Unified PHP SDK. The SDK is initialized using an API key. A `PatchCommerceLocationRequest` object is created with the updated location data, connection ID, and location ID.  The `patchCommerceLocation` method is called and the response is then handled.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/location/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceLocationRequest(\n    commerceLocation: new Shared\\CommerceLocation(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->location->patchCommerceLocation(\n    request: $request\n);\n\nif ($response->commerceLocation !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching an HRIS Device with Unified.to in PHP\nDESCRIPTION: This code snippet shows how to update an HRIS device's information using a PATCH request with the Unified.to PHP SDK. The SDK is initialized with an API key, and a request object is created containing the device's updated details, connection ID, and device ID. The `patchHrisDevice` method is then called to apply the changes. The modified HRIS device is then processed.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/device/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchHrisDeviceRequest(\n    hrisDevice: new Shared\\HrisDevice(\n        name: '<value>',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->device->patchHrisDevice(\n    request: $request\n);\n\nif ($response->hrisDevice !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Commerce Item in PHP\nDESCRIPTION: This code snippet details how to update an existing commerce item using the Unified PHP SDK `patchCommerceItem` method. It requires the `vendor/autoload.php` file for dependency management, uses the `Unified_to`, `Unified_to\\Models\\Operations`, and `Unified_to\\Models\\Shared` namespaces. The snippet initializes the SDK with an API key, constructs a `PatchCommerceItemRequest` object with the item, connectionId and item ID, and then calls the `patchCommerceItem` method on the `item` service.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/item/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchCommerceItemRequest(\n    commerceItem: new Shared\\CommerceItem(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->item->patchCommerceItem(\n    request: $request\n);\n\nif ($response->commerceItem !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a KMS Page with Unified.to PHP SDK\nDESCRIPTION: This snippet shows how to update a KMS page using the Unified.to PHP SDK. It requires the `vendor/autoload.php` file for dependency loading. The example initializes the SDK with an API key, constructs a `PatchKmsPageRequest` object with required parameters like `connectionId`, `id`, and `KmsPage`, and then executes the `patchKmsPage` function.  The code includes a conditional statement to handle the response, assuming that the update is successful and the `kmsPage` object is not null.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/kms/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsPageRequest(\n    kmsPage: new Shared\\KmsPage(\n        title: '<value>',\n        type: Shared\\KmsPageType::Text,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->kms->patchKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Pipeline Example Usage PHP\nDESCRIPTION: This snippet demonstrates how to use the Unified PHP SDK to update a CRM pipeline. It requires the Unified PHP SDK to be installed and autoloaded, and uses the UpdateCrmPipelineRequest object for the request.  Replace <YOUR_API_KEY_HERE> with your actual API key and <id> with appropriate identifiers.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/pipeline/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmPipelineRequest(\n    crmPipeline: new Shared\\CrmPipeline(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->pipeline->updateCrmPipeline(\n    request: $request\n);\n\nif ($response->crmPipeline !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching SCIM Groups with Unified API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a SCIM group using the Unified API PHP SDK. It initializes the SDK with an API key, creates a `PatchScimGroupsRequest` object including the `ScimGroup` to be patched, connection id and group id, calls the `patchScimGroups` method on the `group` service, and then handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/group/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchScimGroupsRequest(\n    scimGroup: new Shared\\ScimGroup(\n        displayName: 'Damon_Rutherford93',\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->group->patchScimGroups(\n    request: $request\n);\n\nif ($response->scimGroup !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Accounting Transaction with Unified.to PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting transaction using the Unified.to PHP SDK. It initializes the SDK, creates a `PatchAccountingTransactionRequest` object, and calls the `patchAccountingTransaction` method. The connection ID and transaction ID must be provided in the request. Error handling is not explicitly shown, but a 4XX or 5XX status code indicates an SDKException.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/accounting/README.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchAccountingTransactionRequest(\n    accountingTransaction: new Shared\\AccountingTransaction(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->accounting->patchAccountingTransaction(\n    request: $request\n);\n\nif ($response->accountingTransaction !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Lead with Unified PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update a CRM lead using the Unified PHP SDK. It initializes the SDK with an API key, creates an `UpdateCrmLeadRequest` object with necessary parameters (including a `CrmLead` object, connection ID, and lead ID), and then calls the `updateCrmLead` method on the `lead` service. The response is then checked for a non-null `crmLead` property, indicating a successful update.  The code requires the Unified PHP SDK to be installed via Composer. The API key and IDs are placeholders that need to be replaced with actual values.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/lead/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmLeadRequest(\n    crmLead: new Shared\\CrmLead(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->lead->updateCrmLead(\n    request: $request\n);\n\nif ($response->crmLead !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ATS Candidate in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update an ATS candidate using the Unified API PHP SDK. It requires the `vendor/autoload.php` file to be included for dependency management. The snippet creates a `UnifiedTo` SDK instance, sets the API key for authentication, constructs an `UpdateAtsCandidateRequest` object with the necessary parameters (connection ID, candidate ID, and AtsCandidate object), and calls the `updateAtsCandidate` method on the candidate service. Finally, it checks for a successful response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/candidate/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAtsCandidateRequest(\n    atsCandidate: new Shared\\AtsCandidate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->candidate->updateAtsCandidate(\n    request: $request\n);\n\nif ($response->atsCandidate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Webhooks with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to list all registered webhooks using the Unified API PHP SDK. It initializes the SDK, sets the security credentials (API key), creates a request object, and then calls the `listUnifiedWebhooks` method. The response is then checked to see if it contains any webhooks and handles the response.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/unified/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ListUnifiedWebhooksRequest();\n\n$response = $sdk->unified->listUnifiedWebhooks(\n    request: $request\n);\n\nif ($response->webhooks !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Accounting Taxrate with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an accounting tax rate using the Unified PHP SDK. It requires setting up the SDK with an API key, creating a request object containing the updated tax rate details and connection ID, and then calling the `updateAccountingTaxrate` method. Finally, it handles the response if the update was successful. Dependencies include the Unified PHP SDK and its models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/taxrate/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateAccountingTaxrateRequest(\n    accountingTaxrate: new Shared\\AccountingTaxrate(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->taxrate->updateAccountingTaxrate(\n    request: $request\n);\n\nif ($response->accountingTaxrate !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Event with Unified.to SDK in PHP\nDESCRIPTION: This code snippet demonstrates updating a CRM event with Unified.to's PHP SDK. It initializes the SDK using an API key. It constructs an `UpdateCrmEventRequest` object containing a `CrmEvent` object and the connection and event IDs. It then calls the `updateCrmEvent` method, handling the response based on if the `crmEvent` property is present.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/event/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\UpdateCrmEventRequest(\n    crmEvent: new Shared\\CrmEvent(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->event->updateCrmEvent(\n    request: $request\n);\n\nif ($response->crmEvent !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Task Project with Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to update an existing task project using the PATCH method with the Unified.to PHP SDK. It requires `vendor/autoload.php` and uses the `Unified\\Unified_to` namespace. An API key is needed for authentication, along with the connection ID and project ID.  The PATCH method allows partial updates to the project.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/project/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchTaskProjectRequest(\n    taskProject: new Shared\\TaskProject(),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->project->patchTaskProject(\n    request: $request\n);\n\nif ($response->taskProject !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a KMS Page using Unified.to PHP SDK\nDESCRIPTION: This code shows how to update specific fields of a KMS page (patch) using the Unified.to PHP SDK. It initializes the SDK, builds a request object including the connectionId, the page id, and the KMS page data to be updated, and then calls the patchKmsPage function. The example requires the vendor autoload file and the Unified, Operations, and Shared models.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/page/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PatchKmsPageRequest(\n    kmsPage: new Shared\\KmsPage(\n        title: '<value>',\n        type: Shared\\KmsPageType::Text,\n    ),\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->page->patchKmsPage(\n    request: $request\n);\n\nif ($response->kmsPage !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Martech Member\nDESCRIPTION: Placeholder. Code sample not provided in input for removing martech member.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/martech/README.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Removing KMS Comment with Unified PHP SDK\nDESCRIPTION: This snippet demonstrates how to remove a KMS comment using the Unified PHP SDK. It initializes the SDK, creates a request object including the connection ID and the comment ID. The removeKmsComment method is called to delete the specified comment.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/comment/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveKmsCommentRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->comment->removeKmsComment(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ATS Candidate using Unified.to in PHP\nDESCRIPTION: This snippet demonstrates how to remove an ATS candidate using the Unified.to PHP SDK. It initializes the SDK, creates a `RemoveAtsCandidateRequest` object with `connectionId` and `id`, and calls the `removeAtsCandidate` method. It requires the `vendor/autoload.php` file and uses the `Unified\\Unified_to` and `Unified\\Unified_to\\Models\\Operations` namespaces.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/candidate/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RemoveAtsCandidateRequest(\n    connectionId: '<id>',\n    id: '<id>',\n);\n\n$response = $sdk->candidate->removeAtsCandidate(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Create Payment Link PHP\nDESCRIPTION: This code snippet shows how to create a payment link using the Unified.to PHP SDK.  It requires 'vendor/autoload.php' and uses the `Unified_to`, `Operations`, and `Shared` namespaces. An API key is required for security, and a connection ID is needed to specify the integration.\nSOURCE: https://github.com/unified-to/unified-php-sdk/blob/main/docs/sdks/link/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Unified\\Unified_to;\nuse Unified\\Unified_to\\Models\\Operations;\nuse Unified\\Unified_to\\Models\\Shared;\n\n$sdk = Unified_to\\UnifiedTo::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CreatePaymentLinkRequest(\n    paymentLink: new Shared\\PaymentLink(),\n    connectionId: '<id>',\n);\n\n$response = $sdk->link->createPaymentLink(\n    request: $request\n);\n\nif ($response->paymentLink !== null) {\n    // handle response\n}\n```"
  }
]