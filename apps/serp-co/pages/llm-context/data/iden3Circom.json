[
  {
    "owner": "iden3",
    "repo": "circom",
    "content": "TITLE: Circom CLI Help Command Output\nDESCRIPTION: Complete command-line interface documentation for the circom compiler showing all available flags and options including output formats, optimization levels, and compilation settings. Shows usage patterns, flags for different output formats (r1cs, wasm, C++), optimization flags (O0, O1, O2), and various configuration options.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/compilation-options.md#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nUSAGE:\n    circom [FLAGS] [OPTIONS] [--] [input]\n\nFLAGS:\n        --r1cs                                 Outputs the constraints in r1cs format\n        --sym                                  Outputs witness in sym format\n        --wasm                                 Compiles the circuit to wasm\n        --json                                 Outputs the constraints in json format\n        --wat                                  Compiles the circuit to wat\n    -c, --c                                    Compiles the circuit to C++\n        --O0                                   No simplification is applied\n        --O1                                   Only applies signal to signal and signal to constant simplification\n        --O2                                   Full constraint simplification\n        --verbose                              Shows logs during compilation\n        --inspect                              Does an additional check over the constraints produced\n        --constraint_assert_dissabled          Does not add asserts in the witness generation code to check constraints\n                                               introduced with \"===\"\n        --use_old_simplification_heuristics    Applies the old version of the heuristics when performing linear\n                                               simplification\n        --simplification_substitution          Outputs the substitution applied in the simplification phase in\n                                               json format\n        --no_asm                               Does not use asm files in witness generation code in C++\n        --no_init                              Removes initializations to 0 of variables (\"var\") in the witness\n                                               generation code\n    -h, --help                                 Prints help information\n    -V, --version                              Prints version information\n\nOPTIONS:\n    -o, --output <output>                    Path to the directory where the output will be written [default: .]\n    -p, --prime <prime>                      To choose the prime number to use to generate the circuit. Receives the\n                                             name of the curve (bn128, bls12377, bls12381, goldilocks, grumpkin, pallas, secq256r1, vesta) [default: bn128]\n    -l <link_libraries>...                   Adds directory to library search path\n        --O2round <simplification_rounds>    Maximum number of rounds of the simplification process\n\nARGS:\n    <input>    Path to a circuit with a main component [default: ./circuit.circom]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Multiplier Circuit in Circom\nDESCRIPTION: A basic Circom circuit template that multiplies two input signals and produces an output signal. It declares input signals a and b, and output signal c, with a constraint defining c as the product of a and b.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/writing-circuits.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n  \n/*This circuit template checks that c is the multiplication of a and b.*/  \n\ntemplate Multiplier2 () {  \n\n   // Declaration of signals.  \n   signal input a;  \n   signal input b;  \n   signal output c;  \n     \n   // Constraints.  \n   c <== a * b;  \n}\n```\n\n----------------------------------------\n\nTITLE: Compiling a Circom Circuit\nDESCRIPTION: Shows the command to compile a Circom circuit file. This command generates R1CS constraints, WASM code for witness generation, a symbols file for debugging, and C++ code for witness generation.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/compiling-circuits.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncircom multiplier2.circom --r1cs --wasm --sym --c\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Component with Public and Private Signals in Circom\nDESCRIPTION: Shows a complete example of defining a template 'A' and instantiating it as the main component. It demonstrates how to declare public and private input signals, and how output signals are always public.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/the-main-component.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n    signal input in1;\n    signal input in2;\n    signal output out;\n    out <== in1 * in2;\n}\n\ncomponent main {public [in1]}= A();\n```\n\n----------------------------------------\n\nTITLE: Declaring Version Pragma in Circom\nDESCRIPTION: Specifies the compiler version that a circom file is compatible with. This pragma should be used at the beginning of all .circom files to ensure compiler compatibility. Without this instruction, the compiler assumes compatibility with the latest version and displays a warning.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/pragma.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npragma circom xx.yy.zz;\n```\n\n----------------------------------------\n\nTITLE: 2-Input AND Gate Implementation in Circom\nDESCRIPTION: Creates a 2-input AND gate by combining multiplier and binary check components. Shows composition of multiple templates and constraint handling for logic operations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/more-circuits/more-basic-circuits.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate And2(){\n   //Declaration of signals and components.\n   signal input in1;\n   signal input in2;\n   signal output out;\n   component mult = Multiplier2();\n   component binCheck[2];\n   \n   //Statements.\n   binCheck[0] = binaryCheck();\n   binCheck[0].in <== in1;\n   binCheck[1] = binaryCheck();\n   binCheck[1].in <== in2;\n   mult.in1 <== binCheck[0].out;\n   mult.in2 <== binCheck[1].out;\n   out <== mult.out;\n}\n\ncomponent main = And2();\n```\n\n----------------------------------------\n\nTITLE: Exporting Solidity Verifier Contract in SnarkJS\nDESCRIPTION: Generates a Solidity smart contract for on-chain verification of proofs. This contract can be deployed to Ethereum or compatible blockchains to verify proofs.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs zkey export solidityverifier multiplier2_0001.zkey verifier.sol\n```\n\n----------------------------------------\n\nTITLE: Defining Main Component Syntax in Circom\nDESCRIPTION: Demonstrates the syntax for creating the main component in Circom. The main component is special as it defines global input and output signals for a circuit and allows specification of public input signals.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/the-main-component.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncomponent main {public [signal_list]} = tempid(v1,...,vn);\n```\n\n----------------------------------------\n\nTITLE: Converting Number to Binary Bits in Circom\nDESCRIPTION: A template that converts a number to its binary representation. It uses bitwise operators and constraints to ensure the conversion is correct, returning an array of bits.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/basic-operators.md#2025-04-12_snippet_2\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Num2Bits(n) {\n    signal input in;\n    signal output out[n];\n    var lc1=0;\n    var e2=1;\n    for (var i = 0; i<n; i++) {\n        out[i] <-- (in >> i) & 1;\n        out[i] * (out[i] -1 ) === 0;\n        lc1 += out[i] * e2;\n        e2 = e2+e2;\n    }\n    lc1 === in;\n}\n\ncomponent main {public [in]}= Num2Bits(3);\n```\n\n----------------------------------------\n\nTITLE: Generating a Groth16 Proof in SnarkJS\nDESCRIPTION: Creates a zk-SNARK proof using the Groth16 protocol. It takes the zkey file and witness as inputs and outputs the proof and public signals files.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs groth16 prove multiplier2_0001.zkey witness.wtns proof.json public.json\n```\n\n----------------------------------------\n\nTITLE: Assigning Signals with Bitwise Operations in Circom\nDESCRIPTION: Shows how to use the '<--' operator for assigning a signal when the expression cannot be directly included in an arithmetic constraint, such as bitwise operations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nout[k] <-- (in >> k) & 1;\n```\n\n----------------------------------------\n\nTITLE: Verifying a Proof in SnarkJS\nDESCRIPTION: Verifies a zk-SNARK proof using the verification key, public inputs/outputs, and the proof itself. Returns 'OK' if the proof is valid.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs groth16 verify verification_key.json public.json proof.json\n```\n\n----------------------------------------\n\nTITLE: Basic Template Definition in Circom\nDESCRIPTION: Shows the basic structure of a template definition with input/output signals and parameters.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntemplate tempid ( param_1, ... , param_n ) {\n signal input a;\n signal output b;\n\n .....\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Signals in Circom\nDESCRIPTION: Demonstrates how to declare input, output, and intermediate signals in Circom. Signals can be named identifiers or stored in arrays.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsignal input in;\nsignal output out[N];\nsignal inter;\n```\n\n----------------------------------------\n\nTITLE: Valid Component Array Implementation in Circom\nDESCRIPTION: Complete example showing how to correctly implement an array of components in Circom. Demonstrates instantiating multiple components of the same template with different parameters.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/data-types.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate fun(N){\n  signal output out;\n  out <== N;\n}\n\ntemplate all(N){\n  component c[N];\n  for(var i = 0; i < N; i++){\n     c[i] = fun(i);\n  }\n}\n\ncomponent main = all(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing IsZero Check in Circom\nDESCRIPTION: A template that checks if an input signal is zero. It uses the inverse calculation technique with constraints to ensure the output is 1 if the input is 0, and 0 otherwise.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/basic-operators.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate IsZero() {\n    signal input in;\n    signal output out;\n    signal inv;\n    inv <-- in!=0 ? 1/in : 0;\n    out <== -in*inv +1;\n    in*out === 0;\n}\n\ncomponent main {public [in]}= IsZero();\n```\n\n----------------------------------------\n\nTITLE: N-Input AND Gate Implementation in Circom\nDESCRIPTION: Extends the AND gate to handle N inputs using arrays and loops. Combines binary checks and multipliers in a scalable design pattern.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/more-circuits/more-basic-circuits.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate AndN (N){\n   //Declaration of signals and components.\n   signal input in[N];\n   signal output out;\n   component mult[N-1];\n   component binCheck[N];\n   \n   //Statements.\n   for(var i = 0; i < N; i++){\n   \t   binCheck[i] = binaryCheck();\n\t     binCheck[i].in <== in[i];\n   }\n   for(var i = 0; i < N-1; i++){\n   \t   mult[i] = Multiplier2();\n   }\n   mult[0].in1 <== binCheck[0].out;\n   mult[0].in2 <== binCheck[1].out;\n   for(var i = 0; i < N-2; i++){\n\t   mult[i+1].in1 <== mult[i].out;\n\t   mult[i+1].in2 <== binCheck[i+2].out;\n   \t   \n   }\n   out <== mult[N-2].out; \n}\n\ncomponent main = AndN(4);\n```\n\n----------------------------------------\n\nTITLE: Basic Array Declaration and Initialization in Circom\nDESCRIPTION: Examples of array declaration in Circom, both with and without initialization. Shows how to declare fixed-size arrays, parameter-based sizes, multidimensional arrays, and function-initialized arrays.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/data-types.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvar x[3] = [2,8,4];\nvar z[n+1];  // where n is a parameter of a template\nvar dbl[16][2] = base;\nvar y[5] = someFunction(n);\n```\n\n----------------------------------------\n\nTITLE: Creating N-Input Multiplier with Arrays in Circom\nDESCRIPTION: Shows implementation of a parameterized N-input multiplier using arrays and loops. Demonstrates template parameterization and dynamic component instantiation based on input size.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/more-circuits/more-basic-circuits.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0; \n\ntemplate Multiplier2(){\n     /*Code from the previous example.*/\n}\n\ntemplate MultiplierN (N){\n   //Declaration of signals and components.\n   signal input in[N];\n   signal output out;\n   component comp[N-1];\n   \n   //Statements.\n   for(var i = 0; i < N-1; i++){\n   \t   comp[i] = Multiplier2();\n   }\n\n   // ... some more code (see below)\n   \n}\n\ncomponent main = MultiplierN(4);\n```\n\n----------------------------------------\n\nTITLE: Computing Witness with WebAssembly in Circom\nDESCRIPTION: Command to generate a witness file from WebAssembly code. This uses the JavaScript wrapper generated by Circom to process the input and create a binary witness file.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/computing-the-witness.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnode generate_witness.js multiplier2.wasm input.json witness.wtns\n```\n\n----------------------------------------\n\nTITLE: Defining a Multiplier Circuit in Circom\nDESCRIPTION: Demonstrates how to create a simple multiplier circuit using Circom. The code defines a Multiplier2 template with two input signals and one output signal, and creates a main component instance.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/compiling-circuits.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Multiplier2() {\n    signal input a;\n    signal input b;\n    signal output c;\n    c <== a*b;\n }\n\n component main = Multiplier2();\n```\n\n----------------------------------------\n\nTITLE: Implementing 3-Input Multiplier in Circom\nDESCRIPTION: Demonstrates how to extend a 2-input multiplier to handle 3 inputs using component instantiation and signal connections. Uses template inheritance and shows proper signal routing between components.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/more-circuits/more-basic-circuits.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Multiplier2(){\n     /*Code from the previous example.*/\n}\n\n//This circuit multiplies in1, in2, and in3.\ntemplate Multiplier3 () {\n   //Declaration of signals and components.\n   signal input in1;\n   signal input in2;\n   signal input in3;\n   signal output out;\n   component mult1 = Multiplier2();\n   component mult2 = Multiplier2();\n\n   //Statements.\n   mult1.in1 <== in1;\n   mult1.in2 <== in2;\n   mult2.in1 <== mult1.out;\n   mult2.in2 <== in3;\n   out <== mult2.out;\n}\n\ncomponent main = Multiplier3();\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Input for Circom Circuit\nDESCRIPTION: A simple JSON input file for a multiplier circuit where a=3 and b=11. Strings are used instead of numbers to avoid JavaScript integer precision limitations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/computing-the-witness.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\"a\": \"3\", \"b\": \"11\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Constraint Definition in Circom\nDESCRIPTION: Shows how to define a basic equality constraint using the === operator. This constraint ensures that a*(a-1) equals 0.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/constraint-generation.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\na*(a-1) === 0;\n```\n\n----------------------------------------\n\nTITLE: Safe Division Assignment in Circom\nDESCRIPTION: Demonstrates the proper way to handle division operations by combining signal assignment with appropriate constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/constraint-generation.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\na <-- b/c;\na*c === b;\n```\n\n----------------------------------------\n\nTITLE: Compilation Time Assert Example in Circom\nDESCRIPTION: Demonstrates a compilation-time assert that checks if template parameter n is greater than 0. If the assertion fails during compilation (e.g., when n=0), it throws error T3001.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/code-assertion.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\ntemplate A(n) {\n  signal input in;\n  assert(n>0);\n  in * in === n;\n}\n\ncomponent main = A(0);\n```\n\n----------------------------------------\n\nTITLE: Runtime Assert Example in Circom\nDESCRIPTION: Shows a runtime assert that verifies if an input signal is less than or equal to 254. This assertion is checked during witness generation rather than at compilation time.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/code-assertion.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntemplate Translate(n) {\n  signal input in;  \n  assert(in<=254);\n  . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Number Bits Calculator Function\nDESCRIPTION: A function that calculates the number of bits required to represent a number. This demonstrates recursion and looping in circom functions.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/functions.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/*\n    This function calculates the number of extra bits \n    in the output to do the full sum.\n */\n\nfunction nbits(a) {\n    var n = 1;\n    var r = 0;\n    while (n-1<a) {\n        r++;\n        n *= 2;\n    }\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Template Definition\nDESCRIPTION: Demonstrates how to define and use custom templates for PLONK scheme integration.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_11\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.6; // note that custom templates are only allowed since version 2.0.6\npragma custom_templates;\n\ntemplate custom Example() {\n   // custom template's code\n}\n\ntemplate UsingExample() {\n   component example = Example(); // instantiation of the custom template\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Assignment in Circom\nDESCRIPTION: Demonstrates various ways to declare and initialize variables in Circom, including simple assignments, initialization at declaration, and array initialization.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/variables-and-mutability.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvar x;\nx = 234556;\nvar y = 0;\nvar z[3] = [1,2,3];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Circom Identifiers\nDESCRIPTION: Examples showing valid identifier patterns in Circom, including underscore prefixes, variable names with special characters like $ and _, and signal declarations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/identifiers.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsignal input _in; \nvar o_u_t;\nvar o$o;\n\n```\n\n----------------------------------------\n\nTITLE: Signal Assignment with Constraint in Circom\nDESCRIPTION: Demonstrates the use of <== operator for combined signal assignment and constraint generation.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/constraint-generation.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nout <== 1 - a*b;\n```\n\n----------------------------------------\n\nTITLE: Preparing Phase 2 of Trusted Setup in SnarkJS\nDESCRIPTION: Prepares the Powers of Tau for the Phase 2 (circuit-specific) ceremony. This generates the final Powers of Tau file that will be used for circuit setup.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v\n```\n\n----------------------------------------\n\nTITLE: Binary Check Circuit Implementation in Circom\nDESCRIPTION: Implements a circuit to verify if an input signal is binary (0 or 1) using constraint equations. Shows basic constraint definition and signal assignment.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/more-circuits/more-basic-circuits.md#2025-04-12_snippet_2\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate binaryCheck () {\n\n   // Declaration of signals.\n   \n   signal input in;\n   signal output out;\n   \n   // Statements.\n   \n   in * (in-1) === 0;\n   out <== in;\n}\n\ncomponent main = binaryCheck();\n```\n\n----------------------------------------\n\nTITLE: Enhanced Log Operation with Multiple Arguments\nDESCRIPTION: Demonstration of the enhanced log operation (available since Circom 2.0.6) that supports multiple expressions and string literals in a single statement.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/debugging-operations.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlog(\"The expected result is \", 135, \" but the value of a is\", a);\n```\n\n----------------------------------------\n\nTITLE: Component Signal Access Example\nDESCRIPTION: Demonstrates how to access component signals using dot notation.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nc.a <== y*z-1;\nvar x;\nx = c.b;\n```\n\n----------------------------------------\n\nTITLE: IsZero Template with Binary Tag\nDESCRIPTION: Implementation of IsZero template showing binary tag usage on output signals with constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\ntemplate IsZero() {\n    signal input in;\n    signal output {binary} out;\n    signal inv;\n    inv <-- in!=0 ? 1/in : 0;\n    out <== -in*inv +1;\n    in*out === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Signal Array Declaration in Circom\nDESCRIPTION: Demonstrates how to declare arrays of signals in Circom. Shows the syntax for input, output, and intermediate signal arrays with explicit sizes.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/data-types.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  signal input in[3];\n  signal output out[2];\n  signal intermediate[4];\n```\n\n----------------------------------------\n\nTITLE: Optimizing Assignments with <== Operator (Circom)\nDESCRIPTION: Illustrates a case where the compiler suggests using the <== operator instead of <-- for more efficient and secure circuit design.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_8\n\nLANGUAGE: circom\nCODE:\n```\nout <-- in / 4;\nout*4 === in;\n```\n\n----------------------------------------\n\nTITLE: Initializing Signals During Declaration in Circom\nDESCRIPTION: Demonstrates the syntax for initializing intermediate and output signals immediately after their declaration, which is supported since Circom 2.0.4.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Multiplier2(){\n   //Declaration of signals\n   signal input in1;\n   signal input in2;\n   signal output out <== in1 * in2;\n}\n\ncomponent main {public [in1,in2]} = Multiplier2();\n```\n\n----------------------------------------\n\nTITLE: Bits2Num Template with Binary Tag\nDESCRIPTION: Implementation of Bits2Num template using binary tag on input signals to ensure binary values (0 or 1).\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\ntemplate Bits2Num(n) {\n    signal input {binary} in[n];\n    signal output out;\n    var lc1=0;\n\n    var e2 = 1;\n    for (var i = 0; i<n; i++) {\n        lc1 += in[i] * e2;\n        e2 = e2 + e2;\n    }\n\n    lc1 ==> out;\n}\n\ntemplate A(){\n    ...\n    component b = Bits2Num(10);\n    b.in <== a;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SnarkJS via NPM\nDESCRIPTION: NPM command to globally install the SnarkJS package, which is used for generating and validating zero-knowledge proofs from Circom circuit artifacts.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/installation.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nnpm install -g snarkjs\n```\n\n----------------------------------------\n\nTITLE: Full Optimization Flag in Circom\nDESCRIPTION: Command flag for complete constraint simplification including Gaussian elimination. Best suited for Groth16 proof system.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/simplification.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--O2\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Bus Structure in Circom\nDESCRIPTION: Basic syntax for defining a bus structure in Circom with parameters.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\nbus NameBus(param1,...,paramN){\n    //signals, \n    //arrays,\n    //other buses...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Templates Pragma in Circom\nDESCRIPTION: Indicates that a file uses custom templates or includes files that declare custom templates. This pragma was introduced in circom 2.0.6 and must be included to avoid compiler errors. It should be placed at the beginning of the file after the version pragma.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/pragma.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npragma custom_templates;\n```\n\n----------------------------------------\n\nTITLE: Including External Template Files in Circom\nDESCRIPTION: This code shows how to include external template files in a Circom program. The example includes three different files: montgomery.circom, mux3.circom, and babyjub.circom from the circom library. The '.circom' extension is the default and will be automatically added if not specified.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/include.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ninclude \"montgomery.circom\";\ninclude \"mux3.circom\";\ninclude \"babyjub.circom\";\n```\n\n----------------------------------------\n\nTITLE: Edwards to Montgomery Point Conversion Template\nDESCRIPTION: Template using Point bus to convert coordinates between Edwards and Montgomery formats.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_2\n\nLANGUAGE: circom\nCODE:\n```\ntemplate Edwards2Montgomery () {\n input Point() { edwards_point } in ;\n output Point() { montgomery_point } out ;\n\n out.x <–- (1 + in.y ) / (1 - in.y ) ;\n out.y <–- out.x / in.x ;\n\n out.x * (1 - in.y ) === (1 + in.y ) ;\n out.y * in.x === out.x ;\n }\n```\n\n----------------------------------------\n\nTITLE: Well-Defined Figure Template\nDESCRIPTION: Template for validating geometric figure correctness by checking point connections.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_9\n\nLANGUAGE: circom\nCODE:\n```\ntemplate well_defined_figure(num_sides, dimension){\n    input Figure(num_sides,dimension) t;\n    output Figure(num_sides,dimension) {well_defined} correct_t;\n    var all_equals = 0;\n    var isequal = 0;\n    for(var i = 0; i < num_sides; i=i+1){\n        for(var j = 0; j < dimension; j=j+1){\n            isequal = IsEqual()([t.side[i].end.x[j],t.side[(i+1)%num_sides].start.x[j]]);\n            all_equals += isequal;\n        }\n    }\n    all_equals === num_sides;\n    correct_t <== t;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expression in Circom\nDESCRIPTION: Example of a conditional expression used to find the maximum of two values. This demonstrates the ternary operator which can only be used at the top level in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/basic-operators.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvar z = x>y? x : y;\n```\n\n----------------------------------------\n\nTITLE: Basic Log Operations in Circom\nDESCRIPTION: Examples of basic log operations for printing numeric values, component properties, and boolean expressions to the standard error stream.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/debugging-operations.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlog(135);\nlog(c.b);\nlog(x==y);\n```\n\n----------------------------------------\n\nTITLE: Expression Generation Example in Circom\nDESCRIPTION: Demonstrates how expressions are generated and constrained in Circom using intermediate variables.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/constraint-generation.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n signal input a;\n signal output b;\n var x = a*a;\n x += 3;\n b <== x;\n```\n\n----------------------------------------\n\nTITLE: Parallel Component Array Example\nDESCRIPTION: Shows practical usage of parallel components in an array.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncomponent rollupTx[nTx];\nfor (var i = 0; i < nTx; i++) {\n        rollupTx[i] = parallel RollupTx(nLevels, maxFeeTx);\n}\n```\n\n----------------------------------------\n\nTITLE: Component Instantiation Syntax\nDESCRIPTION: Shows how to instantiate a template using the component keyword with parameters.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncomponent c = tempid(v1,...,vn);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Signal Assignment and Constraint\nDESCRIPTION: Shows the expanded form of the <== operator using separate assignment (<--) and constraint (===) operations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/constraint-generation.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nout <-- 1 - a*b;\nout === 1 – a*b;\n```\n\n----------------------------------------\n\nTITLE: Using Named Inputs with Anonymous Components in Circom\nDESCRIPTION: Demonstration of using named inputs with anonymous components, allowing for more flexible input assignment order.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntemplate A(n){\n   signal input a, b;\n   signal output c;\n   c <== a*b;\n}\ntemplate B(n){\n   signal input in[n];\n   signal out <== A(n)(b <== in[1], a <== in[0]);\n}\ncomponent main = B(2);\n```\n\n----------------------------------------\n\nTITLE: Exporting Verification Key in SnarkJS\nDESCRIPTION: Extracts the verification key from the zkey file into a separate JSON file. This verification key will be used to verify proofs without the entire trusted setup.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs zkey export verificationkey multiplier2_0001.zkey verification_key.json\n```\n\n----------------------------------------\n\nTITLE: Defining Public Signals in Circom Main Component\nDESCRIPTION: Illustrates how to declare public input signals in the main component of a Circom circuit. Output signals of the main component are always public.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Multiplier2(){\n   //Declaration of signals\n   signal input in1;\n   signal input in2;\n   signal output out;\n   out <== in1 * in2;\n}\n\ncomponent main {public [in1,in2]} = Multiplier2();\n```\n\n----------------------------------------\n\nTITLE: Parallel Component Declaration\nDESCRIPTION: Demonstrates component-level parallelization syntax.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncomponent comp = parallel NameTemplate(...){...}\n```\n\n----------------------------------------\n\nTITLE: Nested Bus Definitions\nDESCRIPTION: Example of nested bus definitions for Film, Date, and Person structures.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_6\n\nLANGUAGE: circom\nCODE:\n```\nbus Film() {\n    signal title[50];\n    signal director[50];\n    signal year;\n}\n\nbus Date() {\n    signal day;\n    signal month;\n    signal year;\n}\n\nbus Person() {\n    signal name[50];\n    Film() films[10];\n    Date() birthday;\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Witness with C++ in Circom\nDESCRIPTION: Command to run the compiled C++ witness calculator with an input file. This generates the same witness file as the WebAssembly method but with better performance for large circuits.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/computing-the-witness.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n./multiplier2 input.json witness.wtns\n```\n\n----------------------------------------\n\nTITLE: Parallel Template Declaration\nDESCRIPTION: Shows syntax for declaring parallel templates for optimization.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ntemplate parallel NameTemplate(...){...}\n```\n\n----------------------------------------\n\nTITLE: Component Array Implementation\nDESCRIPTION: Shows how to implement and use arrays of components with recursive logic.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ntemplate MultiAND(n) {\n    signal input in[n];\n    signal output out;\n    component and;\n    component ands[2];\n    var i;\n    if (n==1) {\n        out <== in[0];\n    } else if (n==2) {\n          and = AND();\n        and.a <== in[0];\n        and.b <== in[1];\n        out <== and.out;\n    } else {\n        and = AND();\n        var n1 = n\\2;\n        var n2 = n-n\\2;\n        ands[0] = MultiAND(n1);\n        ands[1] = MultiAND(n2);\n        for (i=0; i<n1; i++) ands[0].in[i] <== in[i];\n        for (i=0; i<n2; i++) ands[1].in[i] <== in[n1+i];\n        and.a <== ands[0].out;\n        and.b <== ands[1].out;\n        out <== and.out;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling C++ Witness Generator for Circom\nDESCRIPTION: Command to compile the C++ witness calculator generated by Circom. This creates an executable that can compute witnesses significantly faster than the WebAssembly version.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/computing-the-witness.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Creating Point Bus Structure\nDESCRIPTION: Defines a Point bus containing x and y coordinates as signals.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\nbus Point(){\n    signal x;\n    signal y;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Functions in Circom\nDESCRIPTION: Basic syntax for defining a function in circom. Functions take parameters and must return a value or expression.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/functions.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfunction funid ( param1, ... , paramn ) {\n\n .....\n\n return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic If-Then-Else Conditional in Circom\nDESCRIPTION: Demonstrates basic conditional statement usage with variable assignments and arithmetic operations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvar x = 0;\nvar y = 1;\nif (x >= 0) {\n   x = y + 1;\n   y += 1;\n} else {\n   y = x;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous Components to Avoid Warnings (Circom)\nDESCRIPTION: Illustrates how to use anonymous components to simplify code and avoid warnings about unused signals.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_5\n\nLANGUAGE: circom\nCODE:\n```\ntemplate check_bits(n){\n  signal input in;\n  _ <== Num2Bits(n)(in);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Generation in Circom\nDESCRIPTION: This example shows a common error when programming in Circom - trying to assign a value to a signal using the = operator instead of the <== constraint operator. This generates an error: \"Assignee and assigned types do not match operator.\"\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/compiler-messages.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n  signal in;\n  in = 1;\n}\n\ncomponent main = A();\n```\n\n----------------------------------------\n\nTITLE: Valid Template with Known Parameter Dependencies\nDESCRIPTION: Demonstrates correct usage of constraints with known parameter values.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_5\n\nLANGUAGE: circom\nCODE:\n```\ntemplate right(N1,N2){\n    signal input in;\n    var x = 2;\n    var t = 5;\n    if(N1 > N2){\n      t = 2;\n    }\n    x === t;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Notation to Avoid Warnings (Circom)\nDESCRIPTION: Shows how to use the underscore notation to indicate intentionally unused signals and avoid compiler warnings.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\ntemplate A(n) {\n  signal aux;\n  signal out;\n  if(n == 2) {\n    aux <== 2;\n    out <== B()(aux);\n  } else {\n    _ <== aux;\n    out <== 5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Tag Declaration Syntax\nDESCRIPTION: Shows the basic syntax for declaring tags on signals in circom templates.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\nsignal (input/output) {tag_1,...,tag_n} signalname;\n```\n\n----------------------------------------\n\nTITLE: For Loop Implementation in Circom\nDESCRIPTION: Shows a basic for loop implementation with counter and variable increment.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvar y = 0;\nfor(var i = 0; i < 100; i++){\n    y++;\n}\n```\n\n----------------------------------------\n\nTITLE: Circom CLI Help Output\nDESCRIPTION: Console output showing all available options and flags for the Circom compiler command line interface.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/installation.md#2025-04-12_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncircom --help\n\ncircom compiler 2.2.2\nIDEN3\nCompiler for the circom programming language\n\nUSAGE:\n    circom [FLAGS] [OPTIONS] [--] [input]\n\nFLAGS:\n        --r1cs                                 Outputs the constraints in r1cs format\n        --sym                                  Outputs witness in sym format\n        --wasm                                 Compiles the circuit to wasm\n        --json                                 Outputs the constraints in json format\n        --wat                                  Compiles the circuit to wat\n    -c, --c                                    Compiles the circuit to C++\n        --O0                                   No simplification is applied\n        --O1                                   Only applies signal to signal and signal to constant simplification. This\n                                               is the default option\n        --O2                                   Full constraint simplification\n        --verbose                              Shows logs during compilation\n        --inspect                              Does an additional check over the constraints produced\n        --constraint_assert_dissabled          Does not add asserts in the witness generation code to check constraints\n                                               introduced with \"===\" \n        --use_old_simplification_heuristics    Applies the old version of the heuristics when performing linear\n                                               simplification\n        --simplification_substitution          Outputs the substitution applied in the simplification phase in json\n                                               format\n        --no_asm                               Does not use asm files in witness generation code in C++\n        --no_init                              Removes initializations to 0 of variables (\"var\") in the witness\n                                               generation code\n    -h, --help                                 Prints help information\n    -V, --version                              Prints version information\n\nOPTIONS:\n    -o, --output <output>                    Path to the directory where the output will be written [default: .]\n    -p, --prime <prime>                      To choose the prime number to use to generate the circuit. Receives the\n                                             name of the curve (bn128, bls12377, bls12381, goldilocks, grumpkin, pallas,\n                                             secq256r1, vesta) [default: bn128]\n    -l <link_libraries>...                   Adds directory to library search path\n        --O2round <simplification_rounds>    Maximum number of rounds of the simplification process\n\nARGS:\n    <input>    Path to a circuit with a main component [default: ./circuit.circom]\n```\n\n----------------------------------------\n\nTITLE: While Loop Implementation in Circom\nDESCRIPTION: Demonstrates while loop usage with counter and variable manipulation.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nvar y = 0;\nvar i = 0;\nwhile(i < 100){\n    i++;\n    y += y;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Circom Compiler Options\nDESCRIPTION: Shows how to view available options for the Circom compiler using the --help flag. This command displays usage information, available flags, and options for compiling Circom circuits.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/compiling-circuits.md#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncircom --help\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Known vs Unknown Values in Circom\nDESCRIPTION: Example showing how template parameters and constants are treated as known values while signals are treated as unknown values in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/unknowns.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(n1, n2){ // known\n   signal input in1; // unknown\n   signal input in2; // unknown\n   var x = 0; // known\n   var y = n1; // known\n   var z = in1; // unknown\n}\n\ncomponent main = A(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Selectively Ignoring Outputs with Underscore in Circom\nDESCRIPTION: Example showing how to selectively ignore specific outputs from an anonymous component with multiple outputs using underscores.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ntemplate A(n){\n   signal input a;\n   signal output b, c, d;\n   b <== a * a;\n   c <== a + 2;\n   d <== a * a + 2;\n}\ntemplate B(n){\n   signal input in;\n   signal output out1;\n   (_,out1,_) <== A(n)(in);\n}\ncomponent main = B(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Circuit-Specific Keys in SnarkJS\nDESCRIPTION: Initializes the circuit-specific setup (Phase 2) using the R1CS constraints file and the final Powers of Tau file. This creates the initial proving and verification keys.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs groth16 setup multiplier2.r1cs pot12_final.ptau multiplier2_0000.zkey\n```\n\n----------------------------------------\n\nTITLE: BestSeller2024 Template Implementation\nDESCRIPTION: Template using Book bus to verify bestseller criteria for 2024.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\ntemplate BestSeller2024(){\n    input Book() book;\n    output Book() {best_seller2024} best_book;\n    signal check_copies <== LessThan(book.sold_copies.maxvalue)([1000000,book.sold_copies]);\n    check_copies === 1;\n    signal check_2024 <== IsEqual()([book.year,2024]);\n    check_2024 === 1;\n    best_book <== book;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Immutability Example\nDESCRIPTION: Demonstrates component immutability and conditional initialization requirements.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ntemplate A(N){\n   signal input in;\n   signal output out;\n   out <== in;\n}\n\ntemplate C(N){\n   signal output out;\n   out <== N;\n}\ntemplate B(N){\n  signal output out;\n  component a;\n  if(N > 0){\n     a = A(N);\n  }\n  else{\n     a = A(0);\n  }\n  a.in <== 1;\n  a.out ==> out;\n}\n\ncomponent main = B(1);\n```\n\n----------------------------------------\n\nTITLE: Contributing to Phase 2 Setup in SnarkJS\nDESCRIPTION: Adds a contribution to the Phase 2 (circuit-specific) setup. This strengthens the security of the proving system for this specific circuit.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs zkey contribute multiplier2_0000.zkey multiplier2_0001.zkey --name=\"1st Contributor Name\" -v\n```\n\n----------------------------------------\n\nTITLE: No Optimization Flag in Circom\nDESCRIPTION: Command flag to disable all constraint simplifications in the compilation process.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/simplification.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--O0\n```\n\n----------------------------------------\n\nTITLE: Full Optimization (--O2) Constraints Output\nDESCRIPTION: Shows the R1CS constraints output with O2 optimization level (full optimization).\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/constraints-json.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{\n\"constraints\": [\n[{\"2\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"},{\"0\":\"1\",\"2\":\"2\",\"3\":\"1\"},{\"1\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"}]\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Solidity Verifier Call Parameters in SnarkJS\nDESCRIPTION: Creates the call parameters for the verifyProof function in the Solidity verifier contract. This helps to easily verify a proof using the deployed Solidity contract.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs generatecall\n```\n\n----------------------------------------\n\nTITLE: Component Instantiation Order Example\nDESCRIPTION: Demonstrates how component instantiation order depends on input signal availability rather than code sequence.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_7\n\nLANGUAGE: circom\nCODE:\n```\ntemplate mult(){\n  signal input in[2];\n  signal output out;\n  out <== in[0] * in[1];\n}\n\ntemplate mult4(){\n  signal input in[4];\n  component comp1 = mult();\n  component comp2 = mult();\n  comp1.in[0] = in[0];\n  comp2.in[0] = in[1];\n  comp2.in[1] = in[2];\n  comp1.in[1] = in[3];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unused Signals in Conditional Branches (Circom)\nDESCRIPTION: Demonstrates how to handle signals that are only used in certain conditional branches to avoid warnings about underconstrained signals.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_0\n\nLANGUAGE: circom\nCODE:\n```\ntemplate B() {\n  signal input in;\n  signal output out;\n  out <== in + 1;\n}\n\ntemplate A(n) {\n  signal aux;\n  signal out;\n  if(n == 2) {\n    aux <== 2;\n    out <== B()(aux);\n  } else {\n    out <== 5;\n  }\n}\n\ncomponent main = A(3);\n```\n\n----------------------------------------\n\nTITLE: Default Optimization (--O1) Constraints Output\nDESCRIPTION: Shows the R1CS constraints output with default O1 optimization level.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/constraints-json.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{\n\"constraints\": [\n[{\"2\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"},{\"4\":\"1\"},{\"1\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"}],\n[{},{},{\"0\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"}]\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Powers of Tau Ceremony in SnarkJS\nDESCRIPTION: Creates a new Powers of Tau ceremony for bn128 curve with 12 powers. This is the first step in creating a trusted setup for zk-SNARKs.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs powersoftau new bn128 12 pot12_0000.ptau -v\n```\n\n----------------------------------------\n\nTITLE: Book Bus with Tagged Fields\nDESCRIPTION: Defines a Book bus structure with tagged maxvalue signals for various book properties.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\nbus Book () {\n    signal {maxvalue} title[50];\n    signal {maxvalue} author[50];\n    signal {maxvalue} sold_copies;\n    signal {maxvalue} year;\n};\n```\n\n----------------------------------------\n\nTITLE: Contributing to Powers of Tau Ceremony in SnarkJS\nDESCRIPTION: Adds a contribution to the Powers of Tau ceremony. This contribution adds randomness to strengthen the security of the trusted setup.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/proving-circuits.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsnarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name=\"First contribution\" -v\n```\n\n----------------------------------------\n\nTITLE: Unknown Signal Values in Circom Compilation\nDESCRIPTION: Illustrates how signal values are considered unknown at compilation time, even when assigned constant values, to provide a precise definition of allowed constructions.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_6\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n   signal input in;\n   signal output outA; \n   var i = 0; var out = 0;\n   while (i < in){\n    out++; i++;\n   }\n   outA <== out;\n}\n\ntemplate B(){\n component a = A();\n a.in <== 3;\n}\n\ncomponent main = B();\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Circom\nDESCRIPTION: Shows the basic syntax for declaring variables in Circom using the 'var' keyword.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/variables-and-mutability.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvar x;\n```\n\n----------------------------------------\n\nTITLE: Installing Rust via Rustup for Circom\nDESCRIPTION: Command to install Rust programming language using rustup, which is a prerequisite for the Circom compiler.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/installation.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\n----------------------------------------\n\nTITLE: Tag Inheritance Example\nDESCRIPTION: Demonstrates how tags are inherited through signal assignments in circom templates.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_2\n\nLANGUAGE: circom\nCODE:\n```\ntemplate A() {\n    signal input {binary} in;\n    signal intermediate;\n    signal {binary} out;\n    intermediate <== in;\n    out <== intermediate;\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Expression Representation in Circom Simplification JSON\nDESCRIPTION: This snippet demonstrates how linear expressions are represented in the simplification substitution JSON. Each expression is a dictionary mapping signal numbers to their coefficients.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/simplification-json.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"sig_num_l1\": \"coef_1\", ... , \"sig_num_lm\": \"coef_m\"}\n```\n\n----------------------------------------\n\nTITLE: sym File Output with Default Optimization (O1)\nDESCRIPTION: Shows the sym file output generated with the default optimization level (--O1), where some signals have been eliminated during simplification.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1,1,1,main.out\n2,2,1,main.in[0]\n3,3,1,main.in[1]\n4,-1,0,main.c.out\n5,-1,0,main.c.in[0]\n6,4,0,main.c.in[1]\n```\n\n----------------------------------------\n\nTITLE: Simplification Substitution Output Flag\nDESCRIPTION: Command flag to generate a JSON file containing details of applied simplifications.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/simplification.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--simplification_substitution\n```\n\n----------------------------------------\n\nTITLE: Default Simplification Output in Circom (--O1)\nDESCRIPTION: This JSON snippet shows the output of the simplification substitution process with default optimization level (--O1). Two signals have been substituted.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/simplification-json.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"5\" : {\"2\":\"1\"},\n\"4\" : {\"1\":\"1\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Command for Generating sym File with No Optimization\nDESCRIPTION: Shows the command to run the circom compiler with the --sym flag and --O0 option to generate a sym file without any optimization.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncircom symbols.circom --r1cs --wasm --sym --O0\n```\n\n----------------------------------------\n\nTITLE: Bus Tag Declaration Example\nDESCRIPTION: Shows how to declare and use tags with bus structures in circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_7\n\nLANGUAGE: circom\nCODE:\n```\nbus Book {\n    signal {maxvalue} title[50];\n    signal pages;\n    signal {maxvalue} year;\n};\n\nbus Person{\n    signal name[50];\n    Book {old} name;\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Signal Declaration in Compile-time If Block in Circom\nDESCRIPTION: This example shows a valid signal declaration inside an if block where the condition is known at compilation time. The signal 'out' is declared inside the if block with condition 'i < n', which is valid since i and n are known at compile time.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/scoping.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.1.5;\ntemplate A(n){\n   signal input in;\n   signal output outA;\n   var i = 0;\n   if(i < n){\n    signal out <== 2;\n    i = out;\n   } \n   outA <== i;\n}\ncomponent main = A(5);\n```\n\n----------------------------------------\n\nTITLE: No Simplification Output in Circom (--O0)\nDESCRIPTION: This JSON snippet demonstrates the output when no simplification is applied (--O0). The result is an empty JSON object as no substitutions were made.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/simplification-json.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n}\n```\n\n----------------------------------------\n\nTITLE: sym File Output with No Optimization (O0)\nDESCRIPTION: Shows the sym file output generated with no optimization (--O0), where all signals are preserved in the output.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n1,1,1,main.out\n2,2,1,main.in[0]\n3,3,1,main.in[1]\n4,4,0,main.c.out\n5,5,0,main.c.in[0]\n6,6,0,main.c.in[1]\n```\n\n----------------------------------------\n\nTITLE: Bits2Num with Valued Tag\nDESCRIPTION: Modified Bits2Num template showing usage of valued tags with maxbit tag.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\ntemplate Bits2Num(n) {\n    signal input {binary} in[n];\n    signal output {maxbit} out;\n    var lc1=0;\n\n    var e2 = 1;\n    for (var i = 0; i<n; i++) {\n        lc1 += in[i] * e2;\n        e2 = e2 + e2;\n    }\n    out.maxbit = n;\n    lc1 ==> out;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Partially Used Subcomponent Outputs (Circom)\nDESCRIPTION: Demonstrates how to handle cases where only some outputs of a subcomponent are used, while others are intentionally ignored.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_6\n\nLANGUAGE: circom\nCODE:\n```\ninclude \"bitify.circom\";\n\ntemplate parity(n) {\n  signal input in;\n  signal output out;\n  component check = Num2Bits(n);\n  check.in <== in;\n  out <== check.out[0];\n}\n\ncomponent main = parity(10);\n```\n\n----------------------------------------\n\nTITLE: Command for Generating sym File with Maximum Optimization\nDESCRIPTION: Shows the command to run the circom compiler with the --sym flag and --O2 option to generate a sym file with maximum optimization.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncircom symbols.circom --r1cs --wasm --sym --O2\n```\n\n----------------------------------------\n\nTITLE: Handling Unused Subcomponent Outputs (Circom)\nDESCRIPTION: Demonstrates how to handle unused outputs from subcomponents when only using the component for property checking.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\ninclude \"bitify.circom\";\n\ntemplate check_bits(n) {\n  signal input in;\n  component check = Num2Bits(n);\n  check.in <== in;\n}\n\ncomponent main = check_bits(10);\n```\n\n----------------------------------------\n\nTITLE: Using Loops to Mark Unused Array Elements (Circom)\nDESCRIPTION: Shows how to use a loop to mark intentionally unused elements of an array output from a subcomponent.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_7\n\nLANGUAGE: circom\nCODE:\n```\nfor (var i = 1; i < n; i++) {\n  _ <== check.out[i];\n}\n```\n\n----------------------------------------\n\nTITLE: No Optimization (--O0) Constraints Output\nDESCRIPTION: Shows the R1CS constraints output with O0 optimization level (no optimizations).\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/constraints-json.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{\n\"constraints\": [\n[{},{},{\"2\":\"1\",\"5\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"}],\n[{},{},{\"0\":\"1\",\"2\":\"2\",\"3\":\"1\",\"6\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"}],\n[{},{},{\"1\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\",\"4\":\"1\"}],\n[{\"5\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"},{\"6\":\"1\"},{\"4\":\"21888242871839275222246405745257275088548364400416034343698204186575808495616\"}]\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Bus Definitions\nDESCRIPTION: Demonstrates parameterized bus definitions for points, lines, and figures in different dimensions.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_7\n\nLANGUAGE: circom\nCODE:\n```\nbus PointN(dim){\n    signal x[dim];\n}\n\nbus Line(dim){\n    PointN(dim) start;\n    PointN(dim) end;\n}\n\nbus Figure(num_sides, dim){\n    Line(dim) side[num_sides];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Notation for Subcomponent Outputs (Circom)\nDESCRIPTION: Shows how to use the underscore notation to indicate intentionally unused subcomponent outputs and avoid compiler warnings.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\ntemplate check_bits(n) {\n  signal input in;\n  component check = Num2Bits(n);\n  check.in <== in;\n  _ <== check.out;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Circom Circuit Definition\nDESCRIPTION: Example circuit implementation showing Internal and Main templates with signal definitions and constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/constraints-json.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Internal() {\n   signal input in[2];\n   signal output out;\n   out <== in[0]*in[1];\n}\n\ntemplate Main() {\n   signal input in[2];\n   signal output out;\n   component c = Internal ();\n   c.in[0] <== in[0];\n   c.in[1] <== in[1]+2*in[0]+1;\n   c.out ==> out;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Definition with Unknown Size in Circom\nDESCRIPTION: Example showing that arrays must be defined with known sizes in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/unknowns.md#2025-04-12_snippet_2\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n   signal input in;\n   var array[in];\n   // Error: The length of every array must known during the constraint generation phase\n}\n\ncomponent main = A();\n```\n\n----------------------------------------\n\nTITLE: Defining Signals in Conditional Blocks (Circom)\nDESCRIPTION: Illustrates how to define signals inside conditional blocks with conditions known at compilation time to avoid warnings about unused signals.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/inspect.md#2025-04-12_snippet_2\n\nLANGUAGE: circom\nCODE:\n```\ntemplate A(n) {\n  signal out;\n  if(n == 2) {\n    signal aux <== 2;\n    out <== B()(aux);\n  } else {\n    out <== 5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Circom Circuit for Simplification Demonstration\nDESCRIPTION: This code snippet shows a simple Circom circuit used to demonstrate the simplification substitution process. It includes two templates: Internal and Main.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/simplification-json.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Internal() {\n   signal input in[2];\n   signal output out;\n   out <== in[0]*in[1];\n}\n\ntemplate Main() {\n   signal input in[2];\n   signal output out;\n   component c = Internal ();\n   c.in[0] <== in[0];\n   c.in[1] <== in[1]+2*in[0]+1;\n   c.out ==> out;\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Expression Format\nDESCRIPTION: Demonstrates the format for representing linear expressions in the constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/constraints-json.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"sig_num_l1\": \"coef_1\", ... , \"sig_num_lm\": \"coef_m\"}\n```\n\n----------------------------------------\n\nTITLE: Array Signal Tag Example\nDESCRIPTION: Demonstrates tag usage with signal arrays and assignment restrictions.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_6\n\nLANGUAGE: circom\nCODE:\n```\ntemplate A(){\n    signal output {max} out[100];\n    out[0] <== 1;\n    out.max = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Circom from Source\nDESCRIPTION: Cargo command to compile the Circom compiler from source code with release optimizations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/installation.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Simplification Substitution JSON in Circom\nDESCRIPTION: This snippet shows the basic structure of the JSON output for simplification substitutions. It maps simplified signal numbers to their corresponding linear expressions.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/simplification-json.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"sig_num_1\": lin_expr_1,\n...\n\"sig_num_n\": lin_expr_n,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of sym Format Lines\nDESCRIPTION: Shows the basic structure of each line in the sym file format, where each line contains information about a signal in the circuit with its unique number, witness position, component number, and qualified name.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#s, #w, #c, name\n```\n\n----------------------------------------\n\nTITLE: Installing Circom Binary\nDESCRIPTION: Cargo command to install the compiled Circom binary to the user's path for system-wide access.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/installation.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncargo install --path circom\n```\n\n----------------------------------------\n\nTITLE: Basic O1 Flag Usage in Circom\nDESCRIPTION: Command flag for basic simplification that removes constant assignments and signal equivalences. Suitable for both Groth16 and PLONK proof systems.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/simplification.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--O1\n```\n\n----------------------------------------\n\nTITLE: Sample Circom Circuit for Demonstrating the sym Format\nDESCRIPTION: A sample Circom circuit that defines an Internal template with multiplication and a Main template that uses the Internal component. This example is used to demonstrate how signals are represented in the sym file.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Internal() {\n   signal input in[2];\n   signal output out;\n   out <== in[0]*in[1];\n}\n\ntemplate Main() {\n   signal input in[2];\n   signal output out;\n   component c = Internal ();\n   c.in[0] <== in[0];\n   c.in[1] <== in[1]+2*in[0]+1;\n   c.out ==> out;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Circom Repository\nDESCRIPTION: Git command to clone the Circom repository from GitHub to your local machine.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/getting-started/installation.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/iden3/circom.git\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Warning Generation in Circom\nDESCRIPTION: This example shows a Circom template that generates a warning because a signal (in) is not used in any constraint. The warning is only displayed when compiling with the --inspect option.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/compiler-messages.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(N){\n   signal input in;\n   signal intermediate;\n   signal output out;\n   intermediate <== 1;\n   out <== intermediate;\n}\ncomponent main {public [in]} = A(1);\n```\n\n----------------------------------------\n\nTITLE: Command for Generating sym File with Default Optimization\nDESCRIPTION: Shows the command to run the circom compiler with the --sym flag to generate a sym file with default optimization level (--O1).\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncircom symbols.circom --r1cs --wasm --sym \n```\n\n----------------------------------------\n\nTITLE: sym File Output with Maximum Optimization (O2)\nDESCRIPTION: Shows the sym file output generated with maximum optimization (--O2), where many signals have been eliminated during the aggressive simplification process.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/sym.md#2025-04-12_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n1,1,1,main.out\n2,2,1,main.in[0]\n3,3,1,main.in[1]\n4,-1,0,main.c.out\n5,-1,0,main.c.in[0]\n6,-1,0,main.c.in[1]\n```\n\n----------------------------------------\n\nTITLE: Invalid Signal Assignment Example\nDESCRIPTION: Demonstrates an invalid template where an input signal is assigned within its definition, causing an error.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate wrong (N) {\n signal input a;\n signal output b;\n a <== N;\n}\n\ncomponent main = wrong(1);\n```\n\n----------------------------------------\n\nTITLE: Valid Template with No Signal Dependencies\nDESCRIPTION: Example of correct template implementation where conditions don't affect constraint generation.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\ntemplate right(N){\n    signal input in;\n    var x = 2;\n    var t = 5;\n    if(in > N){\n      t = 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Component Parameter Usage\nDESCRIPTION: Example showing incorrect usage of non-constant parameters in component instantiation.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(N1,N2){\n   signal input in;\n   signal output out; \n   out <== N1 * in * N2;\n}\n\n\ntemplate wrong (N) {\n signal input a;\n signal output b;\n component c = A(a,N); \n}\n\ncomponent main {public [a]} = wrong(1);\n```\n\n----------------------------------------\n\nTITLE: Invalid Signal Declaration in For Loop in Circom\nDESCRIPTION: This example demonstrates invalid signal declaration inside a for loop in Circom. Signal 'aux' cannot be declared within the for loop's block, resulting in the compilation error: 'aux Is outside the initial scope'.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/scoping.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.1.5;\n\ntemplate Cubes (N) {\n   //Declaration of signals.\n   signal input in[N];\n   signal output out[N];\n   \n   //Statements.\n   for (var i = 0; i < N; i++) {\n      signal aux;\n      aux <== in[i]*in[i];\n      out[i] <== aux*in[i];      \n   }\n}\n\ncomponent main = Cubes(5);\n```\n\n----------------------------------------\n\nTITLE: Bus Definition with Unknown Parameters in Circom\nDESCRIPTION: Example showing that bus definitions must be parametrized only by known values in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/unknowns.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\nbus b(n){\n  signal array[n];\n}\n\ntemplate A(){\n   signal input in;\n   b(in) out;\n   for(i = 0; i < in; i++){\n      out.array[i] <== i;\n   }\n}\n\ncomponent main = A();\n```\n\n----------------------------------------\n\nTITLE: Bus Type Compatibility Example\nDESCRIPTION: Demonstrates type checking between different bus types in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_5\n\nLANGUAGE: circom\nCODE:\n```\nbus B1(){\n    signal x;\n}\n\nbus B2() {\n    signal x;\n}\n\ntemplate B1toB2(){\n    input B1() b1;\n    output B2() b2;\n    b2 <== b1;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Constraint Generation with Unknown Condition\nDESCRIPTION: Example of incorrect template implementation where constraints depend on unknown input signals.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_3\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){}\ntemplate wrong(N1){\n    signal input in;\n    component c;\n    if(in > N1){\n      c = A();\n    }\n}\ncomponent main {public [in]} = wrong(1);\n```\n\n----------------------------------------\n\nTITLE: Invalid Nested Component Signal Access in Circom\nDESCRIPTION: This example demonstrates invalid access to signals of nested subcomponents. The attempt to access 'c3.comp2.x' raises an error because Circom only allows access to direct input/output signals of a component, not to signals of nested components.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/scoping.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate d(){\n  signal output x;\n  x <== 1;\n}\n\ntemplate c(){\n  signal output out2;\n  out2 <== 2;\n  component comp2 = d();\n}\n\ntemplate t(){\n  signal out;\n  component c3 = c();\n  out <== c3.comp2.x;\n}\n\ncomponent main = t();\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Output Signals in Circom (Error Example)\nDESCRIPTION: Shows an example that produces a compilation error due to attempting to access a signal that is not declared as an output signal.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n   signal input in;\n   signal outA; //We do not declare it as output.\n   outA <== in;\n}\n\ntemplate B(){\n   //Declaration of signals\n   signal output out;\n   component comp = A();\n   out <== comp.outA;\n}\n\ncomponent main = B();\n```\n\n----------------------------------------\n\nTITLE: Double Signal Assignment in Circom (Error Example)\nDESCRIPTION: Demonstrates a code snippet that produces a compilation error due to assigning a value to a signal twice, which is not allowed due to signal immutability.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/signals.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n   signal input in;\n   signal output outA; \n   outA <== in;\n}\n\ntemplate B(){\n   //Declaration of signals\n   signal output out;\n   out <== 0;\n   component comp = A();\n   comp.in <== 0;\n   out <== comp.outA;\n}\n\ncomponent main = B();\n```\n\n----------------------------------------\n\nTITLE: Invalid Assignment in Expression (Error Example)\nDESCRIPTION: Shows an invalid use of assignment within an expression that would cause a compilation error in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/variables-and-mutability.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\na = (b = 3) + 2;\n```\n\n----------------------------------------\n\nTITLE: Function with Missing Return Path\nDESCRIPTION: An example of an incomplete function that will trigger a compilation error because it doesn't have return statements for all possible execution paths.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/functions.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfunction example(N){\n\t if(N >= 0){ return 1;}\n//\t else{ return 0;}\n}\n```\n\n----------------------------------------\n\nTITLE: For-Loop with Unknown Condition in Circom\nDESCRIPTION: Example showing that for-loops cannot have unknown conditions when generating constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/unknowns.md#2025-04-12_snippet_5\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n   signal input in;\n   signal output out;\n   \n   for (var i = 0; i < in; i++){\n       // Error: There are constraints depending on the value of the condition and it can be unknown during the constraint generation phase\n       out <== i;\n   }\n}\n\ncomponent main = A();\n```\n\n----------------------------------------\n\nTITLE: Invalid Non-Quadratic Constraint Example\nDESCRIPTION: Shows an example of invalid non-quadratic constraints that will produce an error in Circom.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/constraint-generation.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntemplate multi3() {\n\t signal input in;\n\t signal input in2;\n\t signal input in3;\n\t signal output out;\n\t out <== in*in2*in3;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Component Array Implementation in Circom\nDESCRIPTION: Example of an invalid component array implementation that produces a compilation error. This demonstrates that all components in an array must be of the same template type.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/data-types.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate fun(N){\n  signal output out;\n  out <== N;\n}\n\ntemplate fun2(N){\n  signal output out;\n  out <== N;\n}\n\ntemplate all(N){\n  component c[N];\n  for(var i = 0; i < N; i++){\n        if(i < N)\n             c[i] = fun(i);\n        else\n           c[i] = fun2(i);\n  }\n}\n\ncomponent main = all(5);\n```\n\n----------------------------------------\n\nTITLE: Invalid Assignment in Conditional (Error Example)\nDESCRIPTION: Demonstrates another incorrect use of assignment within a conditional statement that would result in a compilation error.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/variables-and-mutability.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nvar x;\nif (x = 3) {\n   var y = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Access with Unknown Index in Circom\nDESCRIPTION: Example demonstrating that array access must have known accessing positions in Circom constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/unknowns.md#2025-04-12_snippet_1\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(n){\n   signal input in;\n   signal output out;\n   var array[n];\n   \n   out <== array[in];\n   // Error: Non-quadratic constraint was detected statically, using unknown index will cause the constraint to be non-quadratic\n}\n\ncomponent main = A(10);\n```\n\n----------------------------------------\n\nTITLE: Basic R1CS JSON Structure\nDESCRIPTION: Shows the top-level JSON structure for R1CS constraints output.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/constraints-json.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"constraints\": [\nconstraint_1,\n...\nconstraint_n\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Line Comments in Circom\nDESCRIPTION: Shows how to create comments that span multiple lines in Circom using /* and */ delimiters. Everything between these delimiters will be ignored by the compiler.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/comment-lines.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/*\nAll these lines will be \nignored by the compiler.\n*/\n```\n\n----------------------------------------\n\nTITLE: If-Else with Unknown Condition in Circom\nDESCRIPTION: Example demonstrating that if-else blocks cannot have unknown conditions when generating constraints.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/unknowns.md#2025-04-12_snippet_4\n\nLANGUAGE: circom\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate A(){\n   signal input in;\n   signal output out;\n   \n   if (in < 0){\n       // Error: There are constraints depending on the value of the condition and it can be unknown during the constraint generation phase\n       out <== 0;\n   }\n}\n\ncomponent main = A();\n```\n\n----------------------------------------\n\nTITLE: Writing Single-Line Comments in Circom\nDESCRIPTION: Shows how to write a single-line comment in Circom using the // syntax. This allows developers to comment out an entire line that will be ignored by the compiler.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/comment-lines.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n//Using this, we can comment a line.\n```\n\n----------------------------------------\n\nTITLE: Vector Assignment Example in Circom\nDESCRIPTION: Demonstrates vector assignment behavior in Circom where assigning to differently sized vectors produces warnings or errors. This behavior was introduced in version 2.0.7.\nSOURCE: https://github.com/iden3/circom/blob/master/RELEASES.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// If a vector is assigned in a smaller vector -> error\n// If a vector is assigned in a larger vector -> warning\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Comments in Circom Code\nDESCRIPTION: Demonstrates how to add comments at the end of code lines in Circom using the // syntax. This example shows comments added to signal declarations in a template.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/comment-lines.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntemplate example(){\n    signal input in;   //This is an input signal.\n    signal output out; //This is an output signal.\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Variable Assignment with Unknown Condition\nDESCRIPTION: Example showing incorrect variable assignment depending on unknown input.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/control-flow.md#2025-04-12_snippet_6\n\nLANGUAGE: circom\nCODE:\n```\ntemplate wrong(){\n    signal input in;\n    var x; \n    var t = 5;\n    if(in > 3){\n      t = 2;\n    }\n    x === t;\n}\n```\n\n----------------------------------------\n\nTITLE: Geometric Figure Bus Definitions\nDESCRIPTION: Defines specific geometric figure buses using the parameterized Figure bus.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/buses.md#2025-04-12_snippet_8\n\nLANGUAGE: circom\nCODE:\n```\nbus Triangle2D(){\n    Figure(3,2) {well_defined} triangle;\n}\n\nbus Square3D(){\n    Figure(4,3) {well_defined} square;\n}\n```\n\n----------------------------------------\n\nTITLE: Limited Round Optimization in Circom\nDESCRIPTION: Command flag to specify maximum number of simplification rounds during optimization.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/circom-insight/simplification.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--O2round <simplification_rounds>\n```\n\n----------------------------------------\n\nTITLE: Invalid Component Output Usage\nDESCRIPTION: Shows an error case where component output is used before all inputs are set.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/templates-and-components.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npragma circom 2.0.0;\n\ntemplate Internal() {\n   signal input in[2];\n   signal output out;\n   out <== in[0]*in[1];\n}\n\ntemplate Main() {\n   signal input in[2];\n   signal output out;\n   component c = Internal ();\n   c.in[0] <== in[0];\n   c.out ==> out;  // c.in[1] is not assigned yet\n   c.in[1] <== in[1];  // this line should be placed before calling c.out\n}\n\ncomponent main = Main();\n```\n\n----------------------------------------\n\nTITLE: Defining a Prime Number for BN254 Curve in ZK Proofs\nDESCRIPTION: Specifies the prime number p used in F_p-arithmetic circuits for Ethereum, which is the order of the scalar field of the BN254 curve as defined in EIP 196. This prime is crucial for generating and validating zk-SNARK proofs compatible with Ethereum.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/background/background.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\np = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n```\n\n----------------------------------------\n\nTITLE: Erroneous Tag Value Assignment\nDESCRIPTION: Example showing incorrect tag value modification after signal assignment.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/tags.md#2025-04-12_snippet_5\n\nLANGUAGE: circom\nCODE:\n```\ntemplate Bits2Num(n) {\n    ...\n    lc1 ==> out;\n    out.maxbit = n;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BLS12-381 Prime for Circom 2.0.6\nDESCRIPTION: Specifies the prime number introduced in Circom 2.0.6, which is the order of the scalar field of the BLS12-381 curve. This prime provides an alternative to the BN254 curve for implementing arithmetic circuits in zero-knowledge proofs.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/background/background.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n52435875175126190479447740508185965837690552500527637822603658699938581184513\n```\n\n----------------------------------------\n\nTITLE: Empty Log Operations for Line Breaks\nDESCRIPTION: Shows two equivalent ways to print an end-of-line using the log operation with either an empty string or no arguments.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/code-quality/debugging-operations.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlog(\"\");\nlog();\n```\n\n----------------------------------------\n\nTITLE: Full Simplification Output in Circom (--O2)\nDESCRIPTION: This JSON snippet shows the output of the full simplification process (--O2). Three signals have been substituted, including a more complex linear expression.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/formats/simplification-json.md#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"5\" : {\"2\":\"1\"},\n\"4\" : {\"1\":\"1\"},\n\"6\" : {\"0\":\"1\",\"2\":\"2\",\"3\":\"1\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Function with Signal Declaration and Constraint\nDESCRIPTION: This example shows what's not allowed in circom functions: declaring signals or generating constraints. These operations are only allowed in templates.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/functions.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfunction nbits(a) {\n    signal input in; //This is not allowed.\n    var n = 1;\n    var r = 0;\n    while (n-1<a) {\n        r++;\n        n *= 2;\n    }\n    r === a; //This is also not allowed.\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Array Declaration in Circom\nDESCRIPTION: Example of an invalid array declaration that will produce a compilation error in Circom. This shows that array sizes must be explicitly specified in declarations.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/data-types.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvar z = [2,8,4];\n```\n\n----------------------------------------\n\nTITLE: Implementing Anonymous Components in Circom\nDESCRIPTION: Simplified version of the previous example using anonymous components, which allows for more concise circuit declaration and signal assignment.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntemplate A(n){\n   signal input a, b;\n   signal output c;\n   c <== a*b;\n}\ntemplate B(n){\n   signal input in[n];\n   signal out <== A(n)(in[0],in[1]);\n}\ncomponent main = B(2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Traditional Component Declaration in Circom\nDESCRIPTION: Example showing typical component declaration and signal assignment in Circom before the introduction of anonymous components.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntemplate A(n){\n   signal input a, b;\n   signal output c;\n   c <== a*b;\n}\ntemplate B(n){\n   signal input in[n];\n   signal out;\n   component temp_a = A(n);\n   temp_a.a <== in[0]; \n   temp_a.b <== in[1];\n   out <== temp_a.c;\n}\ncomponent main = B(2);\n```\n\n----------------------------------------\n\nTITLE: Using Underscore to Ignore Outputs in Circom\nDESCRIPTION: Demonstration of using the underscore '_' to ignore specific outputs from anonymous components.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ntemplate A(n){\n   signal input a, b, c;\n   signal output d;\n   d <== a*b+c;\n   a * b === c;\n}\ntemplate B(n){\n   signal input in[n];\n   _ <== A(n)(in[0],in[1],in[2]);\n}\ncomponent main = B(3);\n```\n\n----------------------------------------\n\nTITLE: Implementing Element-wise Array Assignment in Circom\nDESCRIPTION: Example of using the <== operator for element-wise assignment of signal arrays with the same dimensions.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntemplate Ex(n,m){ \n   signal input in[n];\n   signal output out[m];\n   out <== in;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tuple Assignment in Circom\nDESCRIPTION: Example showing the use of tuples for multiple variable assignment, including assignment of component instances.\nSOURCE: https://github.com/iden3/circom/blob/master/mkdocs/docs/circom-language/anonymous-components-and-tuples.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nvar a = 0, b = 0; component c;\n(a, b, c) = (1,a+1, A(2));\n```"
  }
]