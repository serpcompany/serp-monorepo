[
  {
    "owner": "tkhq",
    "repo": "sdk",
    "content": "TITLE: Initializing Turnkey EIP-1193 Provider\nDESCRIPTION: TypeScript code showing how to initialize the Turnkey provider with configuration including WebAuthn stamper setup, client initialization, and chain configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/eip-1193-provider/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new WebauthnStamper({\n  rpId: \"example.com\",\n});\n\n// Initialize the Turnkey HTTP client\nconst turnkeyClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n\n// Get the organizationId of the sub-organization connected to the users account\nconst { organizationId } = await turnkeyClient.getWhoami({\n  organizationId: process.env.ORGANIZATION_ID,\n});\n\n// Get the user wallets associated with their sub-organization\nconst { wallets } = await turnkeyClient.getWallets({\n  organizationId,\n});\n\n// Get the walletId to connect to the provider\nconst walletId = wallets[0].walletId;\n\nconst chain = {\n  chainName: \"Ethereum Mainnet\",\n  chainId: \"0x1\",\n  rpcUrls: [\"https://mainnet.infura.io/v3/your-infura-project-id\"],\n};\n\n// Initialize the EIP-1193 Provider with your configuration\nconst provider = await createEIP1193Provider({\n  walletId,\n  organizationId,\n  turnkeyClient,\n  chains: [\n    chain,\n    // Add more chains as needed\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Wallet Account Creation Types\nDESCRIPTION: TypeScript interfaces for creating wallet accounts including parameters for wallets, accounts and organization identifiers\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateWalletAccountsIntent {\n  accounts: v1WalletAccountParams[];\n  walletId: string;\n}\n\ninterface v1CreateWalletAccountsRequest {\n  organizationId: string;\n  parameters: v1CreateWalletAccountsIntent;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enumeration - TypeScript\nDESCRIPTION: This snippet defines a comprehensive enumeration of various activity types within the Turnkey platform, indicating possible user actions such as creating users, API keys, policies, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ActivityType**: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | [...] \n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:482\n```\n\n----------------------------------------\n\nTITLE: Importing Wallet in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for importing an entire wallet. Takes input parameters specifying the wallet details and returns a Promise that resolves to an object with the import result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Implementing HPKE Encryption and Decryption in JavaScript\nDESCRIPTION: Demonstrates the complete flow of Hybrid Public Key Encryption (HPKE) including key pair generation, encryption, and decryption. Shows how to handle public key compression/decompression and text encoding/decoding. Requires react-native-get-random-values polyfill for React Native environments.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/crypto/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst senderKeyPair = generateP256KeyPair();\nconst receiverKeyPair = generateP256KeyPair();\n\nconst receiverPublicKeyUncompressed = uncompressRawPublicKey(\n  uint8ArrayFromHexString(receiverKeyPair.publicKey),\n);\n\nconst plainText = \"Hello, this is a secure message!\";\nconst plainTextBuf = textEncoder.encode(plainText);\nconst encryptedData = hpkeEncrypt({\n  plainTextBuf: plainTextBuf,\n  encappedKeyBuf: receiverPublicKeyUncompressed,\n  senderPriv: senderKeyPair.privateKey,\n});\n\n// Extract the encapsulated key buffer and the ciphertext\nconst encappedKeyBuf = encryptedData.slice(0, 33);\nconst ciphertextBuf = encryptedData.slice(33);\n\nconst decryptedData = hpkeDecrypt({\n  ciphertextBuf,\n  encappedKeyBuf: uncompressRawPublicKey(encappedKeyBuf),\n  receiverPriv: receiverKeyPair.privateKey,\n});\n\n// Convert decrypted data back to string\nconst decryptedText = new TextDecoder().decode(decryptedData);\n```\n\n----------------------------------------\n\nTITLE: Interacting with Ethereum using Viem and Turnkey - TypeScript\nDESCRIPTION: Demonstrates setting up a Turnkey HTTP client using API key credentials, creating a Viem custom account, and performing a transaction on Ethereum network via Sepolia testnet using Viem APIs. Requires '@turnkey/http', '@turnkey/viem', and 'viem' packages. Outputs the transaction hash upon successful completion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccount } from \"@turnkey/viem\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\nimport { createWalletClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nasync function main() {\n  // Create a Turnkey HTTP client with API key credentials\n  const httpClient = new TurnkeyClient(\n    {\n      baseUrl: \"https://api.turnkey.com\",\n    },\n    // This uses API key credentials.\n    // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:\n    // new WebauthnStamper({...options...})\n    new ApiKeyStamper({\n      apiPublicKey: \"...\",\n      apiPrivateKey: \"...\",\n    }),\n  );\n\n  // Create the Viem custom account\n  const turnkeyAccount = await createAccount({\n    client: httpClient,\n    organizationId: \"...\",\n    signWith: \"...\",\n    // optional; will be fetched from Turnkey if not provided\n    ethereumAddress: \"...\",\n  });\n\n  // Below: standard Viem APIs are used, nothing special!\n\n  const client = createWalletClient({\n    account: turnkeyAccount,\n    chain: sepolia,\n    transport: http(`https://sepolia.infura.io/v3/$(YOUR_INFURA_API_KEY)`),\n  });\n\n  const transactionRequest = {\n    to: \"0x08d2b0a37F869FF76BACB5Bab3278E26ab7067B7\" as `0x${string}`,\n    value: 1000000000000000n, // 0.001 ETH\n  };\n\n  const txHash = await client.sendTransaction(transactionRequest);\n  console.log(`Success! Transaction broadcast with hash ${txHash}`);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Turnkey with Viem Client\nDESCRIPTION: Complete example showing how to set up a Turnkey client with Viem integration, including creating a wallet client and sending a transaction. Demonstrates authentication setup, account creation, and transaction execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/viem/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccount } from \"@turnkey/viem\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\nimport { createWalletClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nasync function main() {\n  // Create a Turnkey HTTP client with API key credentials\n  const httpClient = new TurnkeyClient(\n    {\n      baseUrl: \"https://api.turnkey.com\",\n    },\n    // This uses API key credentials.\n    // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:\n    // new WebauthnStamper({...options...})\n    new ApiKeyStamper({\n      apiPublicKey: \"...\",\n      apiPrivateKey: \"...\",\n    }),\n  );\n\n  // Create the Viem custom account\n  const turnkeyAccount = await createAccount({\n    client: httpClient,\n    organizationId: \"...\",\n    signWith: \"...\",\n    // optional; will be fetched from Turnkey if not provided\n    ethereumAddress: \"...\",\n  });\n\n  // Below: standard Viem APIs are used, nothing special!\n\n  const client = createWalletClient({\n    account: turnkeyAccount,\n    chain: sepolia,\n    transport: http(`https://sepolia.infura.io/v3/$(YOUR_INFURA_API_KEY)`),\n  });\n\n  const transactionRequest = {\n    to: \"0x08d2b0a37F869FF76BACB5Bab3278E26ab7067B7\" as `0x${string}`,\n    value: 1000000000000000n, // 0.001 ETH\n  };\n\n  const txHash = await client.sendTransaction(transactionRequest);\n  console.log(`Success! Transaction broadcast with hash ${txHash}`);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Enumerations in TypeScript\nDESCRIPTION: TypeScript type definitions defining the possible status values and activity types supported by the Turnkey SDK. These enumerations represent the complete set of operations and states within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Turnkey apiProxy Method\nDESCRIPTION: This method proxies API calls to the Turnkey service. It takes a `methodName` (string) and `params` (array of any type) as input.  It returns a Promise that resolves with the result of the API call, which can be of any type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/Turnkey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param methodName\n * @param params\n */\napiProxy(methodName: string, params: any[]): Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Export Component\nDESCRIPTION: Example of implementing the Export component for wallet export functionality with success and error handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Export } from \"@turnkey/sdk-react\";\nimport { toast } from \"sonner\";\n\nfunction ExportWallet() {\n  const walletId = \"your-wallet-id\";\n\n  const handleExportSuccess = () => {\n    toast.success(\"Wallet successfully exported!\");\n  };\n\n  const handleExportError = (errorMessage: string) => {\n    toast.error(errorMessage);\n  };\n\n  return (\n    <Export\n      walletId={walletId}\n      onHandleExportSuccess={handleExportSuccess}\n      onError={handleExportError}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Oauth Request in Turnkey\nDESCRIPTION: This snippet documents the `signOauth` function, which is used to request a WebAuthn assertion and return a signed `Oauth` request. It requires `TOauthInput` for input and an optional `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signOauth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param `input` [`TOauthInput`](../type-aliases/TOauthInput.mdx)\n * @param `options`? `TurnkeyCredentialRequestOptions`\n *\n * @returns `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n */\nsignOauth(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Configurations in TypeScript\nDESCRIPTION: This method retrieves configuration information for an organization. It takes an input parameter of type TGetOrganizationConfigsBody and returns a Promise containing configuration data, including features and quorum settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOrganizationConfigs(input: TGetOrganizationConfigsBody): Promise<{ configs: { features: object[]; quorum: { threshold: number; userIds: string[]; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Running the Import Script\nDESCRIPTION: Command to start the import script and example of the initial prompt output.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/import-in-node/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Getting User Details with Turnkey SDK\nDESCRIPTION: This function retrieves detailed information about a User from the Turnkey API. It accepts a TGetUserInput parameter and returns a Promise containing comprehensive user data including API keys, authenticators, OAuth providers, timestamps, and user details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getUser: (input) => Promise<{ user: { apiKeys: object[]; authenticators: object[]; createdAt: { nanos: string; seconds: string; }; oauthProviders: object[]; updatedAt: { nanos: string; seconds: string; }; userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTags: string[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganization Function - JavaScript\nDESCRIPTION: The createSubOrganization function takes an input object and returns a Promise that resolves to an activity object containing various intents for managing sub-organizations. This includes multiple methods for creating sub-organizations, policies, users, and wallets, along with supporting metadata for authentication mechanisms and properties. Dependencies include standard JavaScript libraries for Promise handling and possibly external SDKs for specific functionalities related to authentication and network requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createSubOrganization = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; ... (more intents and their properties) }}\n```\n\n----------------------------------------\n\nTITLE: TurnKey SDK Activity Type and Result Definitions in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript types for TurnKey SDK activities, including status types, activity result structures, and enumeration of all activity types supported by the SDK. These types are essential for type checking when implementing the TurnKey SDK in TypeScript projects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteInvitation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication Intent\nDESCRIPTION: This snippet outlines the structure for setting up an OTP authentication process. It includes various parameters such as contact information and email/sms customization options, allowing developers to specify how OTPs are sent and the branding for the emails. This intent ensures secure user verification processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Using Current User Session in Turnkey SDK\nDESCRIPTION: Illustrates how to use the currentUserSession method to create a session for making multiple read-only requests to Turnkey's API without requiring repeated user authentication. This improves user experience by reducing friction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst passkeyClient = turnkeySDK.passkeyClient();\nawait passkeySigner.login();\n\n// when a user logs in with the Turnkey SDK, a read-only API credential is saved in localStorage and can be used to make API read requests on their behalf\n\nconst userSessionClient = await turnkeySDK.currentUserSession();\nconst walletsResponse = await userSessionClient.getWallets();\n\n// this API call happens without any confirmation step because the user now has an active read-only session\n```\n\n----------------------------------------\n\nTITLE: Using Passkey Client\nDESCRIPTION: This snippet shows how to create an instance of the Passkey client from the Turnkey SDK to facilitate user login using Passkeys. It also demonstrates making an authenticated request to list the user's wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst passkeyClient = turnkey.passkeyClient();\n\n// User will be prompted to login with their passkey\nawait passkeyClient.login();\n\n// Make authenticated requests to Turnkey API, such as listing user's wallets\nconst walletsResponse = await passkeyClient.getWallets();\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Passkey in JavaScript\nDESCRIPTION: Demonstrates how to use the loginWithPasskey method of TurnkeyBrowserClient to authenticate a user with a Passkey and create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\nconst iframeClient = await turnkeySDK.iframeClient();\n\n// Authenticate with a passkey to create a read-write session\nconst session = await browserClient.loginWithPasskey({\n  sessionType: \"READ_WRITE\",\n  iframeClient: iframeClient,\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Defining importPrivateKey() function type\nDESCRIPTION: This code defines the type of the `importPrivateKey` variable, which is a function that takes an input and returns a promise. The promise resolves to an object with an `activity` property, which contains details about the import activity. The activity includes information like approval status, creation timestamp, failure details (if any), fingerprint, ID, and intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **importPrivateKey**: (`input`) => `Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` \\| `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_CZECH\"` \\| `\"MNEMONIC_LANGUAGE_FRENCH\"` \\| `\"MNEMONIC_LANGUAGE_ITALIAN\"` \\| `\"MNEMONIC_LANGUAGE_JAPANESE\"` \\| `\"MNEMONIC_LANGUAGE_KOREAN\"` \\| `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` \\| `\"ADDRESS_FORMAT_COMPRESSED\"` \\| `\"ADDRESS_FORMAT_ETHEREUM\"` \\| `\"ADDRESS_FORMAT_SOLANA\"` \\| `\"ADDRESS_FORMAT_COSMOS\"` \\| `\"ADDRESS_FORMAT_TRON\"` \\| `\"ADDRESS_FORMAT_SUI\"` \\| `\"ADDRESS_FORMAT_APTOS\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURV`\n```\n\n----------------------------------------\n\nTITLE: Defining stampImportWallet Method in TypeScript\nDESCRIPTION: Method to create a signed request for importing a wallet. Takes a TImportWalletBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_124\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportWallet(input: TImportWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Sign Solana Transaction and Return\nDESCRIPTION: This method signs a Solana transaction using Turnkey and returns the signed transaction. It accepts a Solana transaction object (`Transaction` or `VersionedTransaction`) and a Solana address as input.  The organization ID is an optional parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/solana/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [solana/src/index.ts:106](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/solana/src/index.ts#L106)\n *\n * This function takes a Solana transaction, adds a signature via Turnkey,\n * and returns a new transaction\n *\n * @param `tx`\n */\n\n/**\n * Transaction | VersionedTransaction object (native @solana/web3.js type)\n */\n\n/**\n * `string`\n *\n * Solana address (base58 encoded)\n */\n\n/**\n * `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey Client in JavaScript\nDESCRIPTION: This code initializes the Turnkey client with the necessary configuration settings, including organization ID, base URL, and API keys for authenticating requests to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-server\";\n\nconst turnkey = new Turnkey({\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  apiBaseUrl: \"https://api.turnkey.com\",\n  apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,\n  apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Login with Turnkey Browser Client\nDESCRIPTION: Authenticates a user with the Turnkey platform. The method accepts an optional configuration object that can include an organizationId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nlogin(config?): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating an Account with Turnkey SDK in TypeScript\nDESCRIPTION: The `createAccount` function is responsible for generating a new account with the Turnkey SDK. It takes input parameters including a client instance (either TurnkeyClient, TurnkeyBrowserClient, or TurnkeyServerClient), an optional Ethereum address, organization ID, and a signing method. The function returns a promise that encapsulates essential account properties like the address, public key, and various signing capabilities. This function is typically used where integrating Ethereum-based account creation and management is required.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/createAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createAccount(input: {\n  client: TurnkeyClient | TurnkeyBrowserClient | TurnkeyServerClient,\n  ethereumAddress?: string,\n  organizationId: string,\n  signWith: string\n}): Promise<{\n  address: `0x${string}`,\n  experimental_signAuthorization: (parameters: any) => Promise<SignAuthorizationReturnType>,\n  nonceManager: NonceManager,\n  publicKey: `0x${string}`,\n  sign: (parameters: any) => Promise<`0x${string}`>,\n  signMessage: (__namedParameters: any) => Promise<`0x${string}`>,\n  signTransaction: <T>(transaction: Transaction_<T>) => Promise<IsNarrowable<TransactionSerialized<TransactionType<T>>> extends true ? TransactionSerialized<TransactionType<T>> : `0x${string}`>,\n  signTypedData: <T>(parameters: any) => Promise<`0x${string}`>,\n  source: string,\n  type: \"local\"\n}>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Key or Wallet Export with IframeStamper in TypeScript\nDESCRIPTION: This code snippet shows how to use IframeStamper for Key or Wallet Export operations. It initializes the stamper, injects a wallet export bundle, and displays the iframe containing the wallet seedphrase to the user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.EXPORT_IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM and returns the public key\nconst publicKey = await iframeStamper.init();\n\n// Injects a bundle containing the encrypted wallet seedphrase into the iframe\n// `exportBundle` is the response from requesting ACTIVITY_TYPE_EXPORT_WALLET\nconst injected = await iframeStamper.injectWalletExportBundle(exportBundle);\n\n// If the bundle is successfully injected, the iframe is now displaying the\n// wallet seedphrase to the user\nif (injected !== true) {\n  throw new Error(\"unexpected error while injecting export bundle\");\n}\n\n// Display the iframe to the user with their seedphrase.\nsetIframeDisplay(\"block\");\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Client in Turnkey\nDESCRIPTION: This method creates a `TurnkeyWalletClient` instance. It accepts a `WalletInterface` object as a parameter and returns a `TurnkeyWalletClient` object. The `WalletInterface` is defined in `../../../wallet-stamper/index/type-aliases/WalletInterface.mdx`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param wallet\n */\nwalletClient(wallet: WalletInterface): TurnkeyWalletClient\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey SDK in JavaScript\nDESCRIPTION: Example of importing and initializing the Turnkey SDK with configuration options including API base URL and organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nconst turnkey = new Turnkey({\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey Client with API Key Stamper in TypeScript\nDESCRIPTION: Demonstrates how to initialize a Turnkey API client using the ApiKeyStamper for request authentication. The stamper requires API public and private keys, and is used in conjunction with the TurnkeyClient for making authenticated API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new ApiKeyStamper({\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n});\n\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Policy with Intent Patterns in JavaScript\nDESCRIPTION: The `createPolicy` function in JavaScript utilizes a promise-based architecture to create policies through different intents such as `createUserIntent`, `createOrganizationIntent`, and others. It handles complex authentications and entity creations by utilizing nested objects and arrays, while allowing for granular configuration through specific object properties. Dependencies include a JavaScript runtime that supports Promises, and possibly other components involved in SDK initialization and authentication setup.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Function: createPolicy()\n\n> **createPolicy**(`input`): `Promise`<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` | `'cross-platform'` | `'platform'`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | `'cross-platform'` | `'platform'`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: `'public-key'`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` | `'cross-platform'` | `'platform'`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | `'cross-platform'` | `'platform'`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: `'public-key'`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: `'EFFECT_ALLOW'` | `'EFFECT_DENY'`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: `'EFFECT_ALLOW'` | `'EFFECT_DENY'`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: `'EFFECT_ALLOW'` | `'EFFECT_DENY'`; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: `'MNEMONIC_LANGUAGE_ENGLISH'` | `'MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE'` | `'MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE'` | `'MNEMONIC_LANGUAGE_CZECH'` | `'MNEMONIC_LANGUAGE_FRENCH'` | `'MNEMONIC_LANGUAGE_ITALIAN'` | `'MNEMONIC_LANGUAGE_JAPANESE'` | `'MNEMONIC_LANGUAGE_KOREAN'` | `'MNEMONIC_LANGUAGE_SPANISH'`; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: ('ADDRESS_FORMAT_UNCOMPRESSED' | 'ADDRESS_FORMAT_COMPRESSED' | 'ADDRESS_FORMAT_ETHEREUM' | 'ADDRESS_FORMAT_SOLANA' | 'ADDRESS_FORMAT_COSMOS' | 'ADDRESS_FORMAT_TRON' | 'ADDRESS_FORMAT_SUI' | 'ADDRESS_FORMAT_APTOS' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_\n```\n\n----------------------------------------\n\nTITLE: Sign Transaction Implementation\nDESCRIPTION: Method that signs an Ethereum transaction using the Turnkey infrastructure. Takes a TransactionRequest object and returns a Promise resolving to the signed transaction as a hex string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransaction(transaction: TransactionRequest): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intent and Result Types in TypeScript\nDESCRIPTION: This code snippet defines numerous TypeScript interfaces and types for various intents and results used in the SDK. It includes definitions for operations like creating users, managing API keys, handling transactions, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_XRP\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\"][]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }; `importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; `initImportPrivateKeyIntent`: { `userId`: `string`; }; `initImportWalletIntent`: { `userId`: `string`; }; `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initOtpAuthIntentV2`: { `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `oauthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; }; `otpAuthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; }; `recoverUserIntent`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `userId`: `string`; }; `rejectActivityIntent`: { `fingerprint`: `string`; }; `removeOrganizationFeatureIntent`: { `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; }; `setOrganizationFeatureIntent`: { `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; `value`: `string`; }; `setPaymentMethodIntent`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; }; `setPaymentMethodIntentV2`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; }; `signRawPayloadIntent`: { `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `privateKeyId`: `string`; }; `signRawPayloadIntentV2`: { `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `signWith`: `string`; }; `signRawPayloadsIntent`: { `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; `payloads`: `string`[]; `signWith`: `string`; }; `signTransactionIntent`: { `privateKeyId`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; }; `signTransactionIntentV2`: { `signWith`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; }; `updateAllowedOriginsIntent`: { `allowedOrigins`: `string`[]; }; `updatePolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }; `updatePolicyIntentV2`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }; `updatePrivateKeyTagIntent`: { `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; }; `updateRootQuorumIntent`: { `threshold`: `number`; `userIds`: `string`[]; }; `updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }; `updateUserTagIntent`: { `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; }; `updateWalletIntent`: { `walletId`: `string`; `walletName`: `string`; }; }; `organizationId`: `string`; `result`: { `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierResult`: { `productId`: `string`; }; `createApiKeysResult`: { `apiKeyIds`: `string`[]; }; `createApiOnlyUsersResult`: { `userIds`: `string`[]; }; `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `createInvitationsResult`: { `invitationIds`: `string`[]; }; `createOauthProvidersResult`: { `providerIds`: `string`[]; }; `createOrganizationResult`: { `organizationId`: `string`; }; `createPoliciesResult`: { `policyIds`: `string`[]; }; `createPolicyResult`: { `policyId`: `string`; }; `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; }; `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResultV2`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createSubOrganizationResult`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV3`: { `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV4`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV5`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV6`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV7`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createUsersResult`: { `userIds`: `string`[]; }; `createUserTagResult`: { `userIds`: `string`[]; `userTagId`: `string`; }; `createWalletAccountsResult`: { `addresses`: `string`[]; }; `createWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `deleteApiKeysResult`: { `apiKeyIds`: `string`[]; }; `deleteAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `deleteInvitationResult`: { `invitationId`: `string`; }; `deleteOauthProvidersResult`: { `providerIds`: `string`[]; }; `deleteOrganizationResult`: { `organizationId`: `string`; }; `deletePaymentMethodResult`: { `paymentMethodId`: `string`; }; `deletePolicyResult`: { `policyId`: `string`; }; `deletePrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsResult`: { `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationResult`: { `subOrganizationUuid`: `string`; }; `deleteUsersResult`: { `userIds`: `string`[]; }; `deleteUserTagsResult`: { `userIds`: `string`[]; `userTagIds`: `string`[]; }; `deleteWalletsResult`: { `walletIds`: `string`[]; }; `disablePrivateKeyResult`: { `privateKeyId`: `string`; }; `emailAuthResult`: { `apiKeyId`: `string`; `userId`: `string`; }; `exportPrivateKeyResult`: { `exportBundle`: `string`; `privateKeyId`: `string`; }; `exportWalletAccountResult`: { `address`: `string`; `exportBundle`: `string`; }; `exportWalletResult`: { `exportBundle`: `string`; `walletId`: `string`; }; `importPrivateKeyResult`: { `addresses`: `object`[]; `privateKeyId`: `string`; }; `importWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `initImportPrivateKeyResult`: { `importBundle`: `string`; }; `initImportWalletResult`: { `importBundle`: `string`; }; `initOtpAuthResult`: { `otpId`: `string`; }; `initOtpAuthResultV2`:\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyDirectWallet for Cosmos Chain Integration\nDESCRIPTION: Demonstrates how to initialize a TurnkeyDirectWallet signer for use with Cosmos chains. The code shows account setup, public key retrieval, and address extraction. The signer can be configured for different Cosmos chains by modifying the prefix parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/cosmjs/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize a Turnkey Signer\nconst turnkeySigner = await TurnkeyDirectWallet.init({\n  config: {\n    ...\n  },\n  prefix: \"celestia\", // can be replaced with other Cosmos chains\n});\n\nconst account = refineNonNull((await turnkeySigner.getAccounts())[0]);\nconst compressedPublicKey = toHex(account.pubkey);\nconst selfAddress = account.address;\n```\n\n----------------------------------------\n\nTITLE: Using eth_requestAccounts Method\nDESCRIPTION: JavaScript example demonstrating how to request Ethereum accounts using the provider, which implements EIP-1102.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/eip-1193-provider/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst accounts = await provider.request({ method: \"eth_requestAccounts\" });\n// Logs the array accounts associated with the provided walletId & organization\nconsole.log(accounts);\n```\n\n----------------------------------------\n\nTITLE: Creating Account with Address Using SDK TypeScript\nDESCRIPTION: The createAccountWithAddress function is used to generate a new Ethereum account using the Turnkey SDK. It requires specific clients such as TurnkeyClient, TurnkeyBrowserClient, or TurnkeyServerClient, along with organizationId and signWith strings as key parameters. The function returns an object that includes attributes such as a new Ethereum address, publicKey, and several optional methods for signing authorizations, messages, and transactions. The address and publicKey are returned as hexadecimal strings. Limitations may include specific client compatibility for using the SDK features effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/createAccountWithAddress.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"createAccountWithAddress(input): object {\\n  // Parameters\\n  // - input: an object containing the following properties\\n  // - client: TurnkeyClient | TurnkeyBrowserClient | TurnkeyServerClient\\n  // - ethereumAddress: string (optional),\\n  // - organizationId: string,\\n  // - signWith: string\\n  \\n  // Returns an object with the following properties\\n  // address: \\\\\"0x${string}\\\\\"\\n  // publicKey: \\\\\"0x${string}\\\\\"\\n  // Optional methods: experimental_signAuthorization, nonceManager, sign, signMessage, signTransaction, signTypedData\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyClient with API Key Authentication\nDESCRIPTION: Example showing how to initialize the TurnkeyClient using ApiKeyStamper for authentication. Demonstrates basic client setup and making an authenticated request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\n// This stamper produces signatures using the API key pair passed in.\nconst stamper = new ApiKeyStamper({\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n});\n\n// The Turnkey client uses the passed in stamper to produce signed requests\n// and sends them to Turnkey\nconst client = new TurnkeyClient(\n  {\n    baseUrl: \"https://api.turnkey.com\",\n  },\n  stamper,\n);\n\n// Now you can make authenticated requests!\nconst data = await client.getWhoami({\n  organizationId: \"<Your organization id>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session with TurnkeyBrowserClient\nDESCRIPTION: Demonstrates how to create a read-write session using TurnkeyBrowserClient with target embedded key and session expiration settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Logs in to create a read-write session, using a target embedded key and session expiration\nconst readWriteSession = await browserClient.loginWithReadWriteSession(\n  \"target-embedded-key\",\n  \"900\", // Session expires in 15 minutes\n  \"user-id\"\n);\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion and Preparing Session Request - TypeScript\nDESCRIPTION: The signCreateReadWriteSession function requests a WebAuthn assertion and returns a signed request for creating a read/write session. It accepts two parameters, input of type TCreateReadWriteSessionInput and an optional options parameter of type TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateReadWriteSession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignCreateReadWriteSession(input, options?): Promise<\\\"SignedRequest\\\">\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent in JavaScript\nDESCRIPTION: This snippet outlines the structure and expected fields for the `importWalletIntent` which allows users to import their wallets into the SDK. It includes fields like accounts, encryptedBundle, userId, and walletName.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"importWalletIntent\": { \"accounts\": \"object\"[], \"encryptedBundle\": \"string\", \"userId\": \"string\", \"walletName\": \"string\" };\n```\n\n----------------------------------------\n\nTITLE: sealAndStampRequestBody Function Definition\nDESCRIPTION: The `sealAndStampRequestBody` function is designed to seal and stamp a request body using Turnkey API credentials.  It accepts an input object containing the request body and optional API public/private keys. The function returns a Promise that resolves to an object containing the `sealedBody` and `xStamp`, representing the secured request body and associated stamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/sealAndStampRequestBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Function: sealAndStampRequestBody()\n *\n * > **sealAndStampRequestBody**(`input`): `Promise`<\\{\n *   `sealedBody`: `string`;\n *   `xStamp`: `string`;\n * \\}>\n *\n * Defined in: packages/http/dist/base.d.ts:44\n *\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n *\n * ## Parameters\n *\n * ### input\n *\n * #### apiPrivateKey?\n *\n * `string`\n *\n * #### apiPublicKey?\n *\n * `string`\n *\n * #### body\n *\n * `Record`<`string`, `any`>\n *\n * ## Returns\n *\n * `Promise`<\\{\n *   `sealedBody`: `string`;\n *   `xStamp`: `string`;\n * \\}>\n */\"\n```\n\n----------------------------------------\n\nTITLE: Creating User Passkey with TurnkeyPasskeyClient\nDESCRIPTION: Shows how to create a passkey for user authentication using TurnkeyPasskeyClient with WebAuthn protocol configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst passkeyClient = turnkeySDK.passkeyClient();\n\n// Creates a new user passkey with WebAuthn protocol details\nconst passkey = await passkeyClient.createUserPasskey({\n  publicKey: {\n    rp: { name: \"Example Relying Party\" },\n    user: { name: \"testUser\", displayName: \"Test User\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Credential Bundle in JavaScript\nDESCRIPTION: Demonstrates how to use TurnkeyBrowserClient to authenticate a user with a credential bundle from an email and create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Authenticate with a credential bundle from email\nconst session = await browserClient.loginWithBundle({\n  bundle: \"credential-bundle-from-email\",\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Raw ECDSA Signature to DER Format in TypeScript\nDESCRIPTION: Example demonstrating how to convert a raw ECDSA signature (concatenation of r and s values) into DER-encoded format. The function takes a hexadecimal string input and returns a DER-encoded signature as a hex string. The example shows conversion of a 65-byte signature to its DER representation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/toDerSignature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example usage:\nconst rawSignature = \"0x487cdb8a88f2f4044b701cbb116075c4cabe5fe4657a6358b395c0aab70694db3453a8057e442bd1aff0ecabe8a82c831f0edd7f2158b7c1feb3de9b1f20309b1c\";\nconst derSignature = toDerSignature(rawSignature);\nconsole.log(derSignature); // Outputs the DER-encoded signature as a hex string\n// \"30440220487cdb8a88f2f4044b701cbb116075c4cabe5fe4657a6358b395c0aab70694db02203453a8057e442bd1aff0ecabe8a82c831f0edd7f2158b7c1feb3de9b1f20309b\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Types - TypeScript\nDESCRIPTION: This snippet contains TypeScript type definitions representing various activities and their statuses within the SDK. It helps in managing operations like creating API keys, updating policies, and managing user recovery. The types ensure that each activity is processed with the correct expected properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n\\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Decrypting Export Bundles with Signature Verification in TypeScript\nDESCRIPTION: The decryptExportBundle function takes encrypted export bundles (like private keys or wallet accounts) and decrypts them using HPKE after verifying the enclave signature for authenticity. It can return either a mnemonic string or hexadecimal data based on the parameters provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/decryptExportBundle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**decryptExportBundle**(`params`): `Promise`\\<`string`\\>\n```\n\n----------------------------------------\n\nTITLE: Creating API Keys with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: This function, `stampCreateApiKeys`, is designed to stamp and create API keys, accepting input of TCreateApiKeysBody type. It returns a promise that may resolve with TSignedRequest. Dependencies include correctly formatted inputs. It facilitates API key creation and management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreateApiKeys**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:839](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L839)\n\n#### Parameters\n\n##### input\n\n`TCreateApiKeysBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateWalletAccounts` function takes an input of type `TCreateWalletAccountsBody` and returns a Promise resolving to either undefined or a `TSignedRequest`. This is used to create accounts associated with a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateWalletAccounts(input: TCreateWalletAccountsBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Signing CreatePrivateKeyTag Request with WebAuthn\nDESCRIPTION: Initiates a WebAuthn assertion to create a signed request for generating a private key tag. Requires input parameters for the private key tag creation and optional WebAuthn credential request options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreatePrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signCreatePrivateKeyTag: (input: TCreatePrivateKeyTagInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey EIP-1193 Provider\nDESCRIPTION: Complete initialization process for the Turnkey EIP-1193 Provider, including setting up the WebauthnStamper, TurnkeyClient, retrieving organization details, and configuring the chain settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/eip-1193-provider/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new WebauthnStamper({\n  rpId: \"example.com\",\n});\n\n// Initialize the Turnkey HTTP client\nconst turnkeyClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n\n// Get the organizationId of the sub-organization connected to the users account\nconst { organizationId } = await turnkeyClient.getWhoami({\n  organizationId: process.env.ORGANIZATION_ID,\n});\n\n// Get the user wallets associated with their sub-organization\nconst { wallets } = await turnkeyClient.getWallets({\n  organizationId,\n});\n\n// Get the walletId to connect to the provider\nconst walletId = wallets[0].walletId;\n\nconst chain = {\n  chainName: \"Ethereum Mainnet\",\n  chainId: \"0x1\",\n  rpcUrls: [\"https://mainnet.infura.io/v3/your-infura-project-id\"],\n};\n\n// Initialize the EIP-1193 Provider with your configuration\nconst provider = await createEIP1193Provider({\n  walletId,\n  organizationId,\n  turnkeyClient,\n  chains: [\n    chain,\n    // Add more chains as needed\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createPrivateKeys in TypeScript\nDESCRIPTION: The createPrivateKeys method facilitates the generation of private keys, given an input of type TCreatePrivateKeysBody, and returns a Promise containing an object. This method aids in server-side management of cryptographic keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createPrivateKeys**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:1069](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1069)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition - createSubOrganization\nDESCRIPTION: Complex type definition for creating sub-organizations with support for multiple versions (V1-V7). Includes detailed parameter types for authentication, wallet configuration, user management, and organization settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createSubOrganization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSubOrganization(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      // ... intent definitions\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Organization in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to create a sub-organization using the Turnkey SDK. It takes an input of type TCreateSubOrganizationBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateSubOrganization(input: TCreateSubOrganizationBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Activity Poller in TypeScript\nDESCRIPTION: The createActivityPoller function is designed to create a polling mechanism for a client request. It takes a client instance, a refresh interval, and a request function as parameters. The returned function accepts input and returns a promise that resolves when the activity is completed. If the activity fails or requires consensus, an error will be thrown. The function is part of the Turnkey SDK and is essential for handling asynchronous requests effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/createActivityPoller.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst activityPoller = createActivityPoller(client, client.createPrivateKeys);\nconst activity = await activityPoller(input);\nconsole.log(activity.result); // activity is completed\n```\n\n----------------------------------------\n\nTITLE: Using Turnkey Hook in React Components\nDESCRIPTION: Example of using the useTurnkey hook to implement passkey login and email authentication in a React component.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTurnkey } from \"@turnkey/sdk-react\";\n\nfunction ExampleComponent() {\n  const { turnkey, passkeyClient, authIframeClient } = useTurnkey();\n\n  const loginWithPasskey = async () => {\n    // Creates a read only session with passkey\n    await passkeyClient?.login();\n  };\n\n  const initEmailAuth = async () => {\n    await turnkey?.serverSign(\"emailAuth\", [\n      {\n        email: \"<target user email>\",\n        targetPublicKey: authIframeClient.iframePublicKey,\n        organizationId: \"<target user suborg-id>\",\n      },\n    ]);\n  };\n\n  const loginWithIframe = async (credentialBundle: string) => {\n    await authIframeClient?.loginWithAuthBundle(credentialBundle); // Creates a read write session using a credential bundle returned from OTP Auth, Oauth, or Create Read Write session activities\n  };\n\n  return (\n    <div>\n      <button onClick={loginWithPasskey}>Login with Passkey</button>\n      <button onClick={() => initEmailAuth()}>Initialize Email Auth</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Passkey Client with TurnkeyBrowserSDK\nDESCRIPTION: Creates a TurnkeyPasskeyClient instance that can prompt users to sign with Passkey credentials for authentication. The client can also proxy requests to a server for signing with parent organization credentials when the serverSignUrl parameter is included.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst passkeyClient = turnkeySDK.passkeyClient();\nconst walletsResponse = await passkeyClient.getWallets();\n```\n\n----------------------------------------\n\nTITLE: Using Stored API Key in Telegram Cloud Storage - TypeScript\nDESCRIPTION: This code demonstrates how to utilize an existing API key stored in Telegram Cloud Storage for creating a TurnkeyBrowserClient. It uses the TelegramCloudStorageStamper with dependencies on @turnkey/telegram-cloud-storage-stamper and @turnkey/sdk-browser. The output is a client ready for making signed requests against the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper from \"@turnkey/telegram-cloud-storage-stamper\";\nimport { TurnkeyBrowserClient, TurnkeySDKClientConfig } from \"@turnkey/sdk-browser\";\n\n// create a new Telegram Cloud Storage stamper\nconst stamper = await TelegramCloudStorageStamper.create();\n\n// use the stamper in the client config\nconst browserConfig: TurnkeySDKClientConfig = {\n  stamper: stamper,\n  apiBaseUrl: \"https://api.turnkey.com\",\n  organizationId: <ORGANIZATION_ID>,\n};\n\n// create a TurnkeyClient with the initialized Telegram Cloud Storage Stamper\nconst client = new TurnkeyBrowserClient(browserConfig);\n\n// make a request with the client\nconst whoamiResponse = await client.getWhoami({\n  organizationId: <ORGANIZATION_ID>,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up the Turnkey Bitcoin Example Environment\nDESCRIPTION: Commands for cloning the SDK repository, installing dependencies, and building the necessary components to run the Bitcoin example with Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-bitcoin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-bitcoin/\n```\n\n----------------------------------------\n\nTITLE: Inserting New API Key with Default Storage Location\nDESCRIPTION: Demonstrates how to generate a new API keypair, create a Telegram Cloud Storage Stamper, and initialize a Turnkey client with the stamper configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, { CloudStorageAPIKey } from \"@turnkey/telegram-cloud-storage-stamper\";\nimport { generateP256KeyPair } from \"@turnkey/crypto\";\nimport { TurnkeyBrowserClient, TurnkeySDKClientConfig } from \"@turnkey/sdk-browser\";\n\n// generate an API keypair\nconst keyPair = generateP256KeyPair();\n\n// the API key to be stored\nconst apiKey: CloudStorageAPIKey = {\n  apiPublicKey: keyPair.publicKey,\n  apiPrivateKey: keyPair.privateKey,\n}\n\n// create a new Telegram Cloud Storage Stamper\nconst stamper = await TelegramCloudStorageStamper.create({\n  cloudStorageAPIKey: apiKey\n})\n\n// use the stamper in the client config\nconst browserConfig: TurnkeySDKClientConfig = {\n  stamper: stamper,\n  apiBaseUrl: \"https://api.turnkey.com\",\n  organizationId: <ORGANIZATION_ID>,\n};\n\n// create a TurnkeyClient with the initialized Telegram Cloud Storage Stamper\nconst client = new TurnkeyBrowserClient(browserConfig);\n\n// make a request with the client\nconst whoamiResponse = await client.getWhoami({\n  organizationId: <ORGANIZATION_ID>,\n});\n```\n\n----------------------------------------\n\nTITLE: Login Method Implementation in Turnkey Browser Client\nDESCRIPTION: Implementation of the login method for the Turnkey Browser Client. This method accepts an optional configuration object with an organizationId parameter and returns a Promise that resolves to an object containing login information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nlogin(config?): Promise<object & object>\n\nDefined in: [packages/sdk-browser/src/__clients__/browser-clients.ts:110](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L110)\n\nParameters\n\nconfig?\n  organizationId?: string\n\nReturns\n\nPromise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Parsing Configuration Object in JavaScript SDK\nDESCRIPTION: This code snippet outlines a complex JSON-like configuration object typically used in a JavaScript SDK to manage various user and authentication intents. It provides definitions for different intents such as `initOtpAuthIntent`, `importWalletIntent`, and corresponding results like `importWalletResult`. These configurations determine how different operations are processed, and certain parameters like `userId`, `walletName`, and `encoding` dictate specific aspects of the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n`privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBAUTHN_ORIGINS\" \\| \"FEATURE_NAME_EMAIL_AUTH\" \\| \"FEATURE_NAME_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBHOOK\" \\| \"FEATURE_NAME_SMS_AUTH\" \\| \"FEATURE_NAME_OTP_EMAIL_AUTH\"; \\}; `setOrganizationFeatureIntent`: \\{ `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBAUTHN_ORIGINS\" \\| \"FEATURE_NAME_EMAIL_AUTH\" \\| \"FEATURE_NAME_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBHOOK\" \\| \"FEATURE_NAME_SMS_AUTH\" \\| \"FEATURE_NAME_OTP_EMAIL_AUTH\"; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" \\| \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" \\| \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" \\| \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" \\| \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}; `organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\}; `initOtpAuthResultV2`: \\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`;\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent - JavaScript\nDESCRIPTION: This snippet defines the structure of the `importWalletIntent` object, which stores data required for importing a wallet. Included parameters allow specifying wallet accounts, to be imported securely along with user identification and wallet naming.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Client in Turnkey SDK\nDESCRIPTION: Shows how to create a Turnkey SDK instance and initialize a passkey client. This client can be used to prompt users for Passkey credential signing and interact with Turnkey's API, including retrieving wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst passkeyClient = turnkeySDK.passkeyClient();\nconst walletsResponse = await passkeyClient.getWallets();\n```\n\n----------------------------------------\n\nTITLE: Defining initImportWallet Function in TypeScript\nDESCRIPTION: The initImportWallet function is designed to initialize the import wallet process, returning a promise that resolves with an object containing various intents for different activities including creating users, organizations, and managing authentications. It encapsulates multiple intents with specified properties to streamline wallet interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninitImportWallet(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\")[]; };\n```\n\n----------------------------------------\n\nTITLE: Initializing WebauthnStamper Example\nDESCRIPTION: Example showing how to initialize WebauthnStamper and create a new HTTP client with passkey signing capability.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/documents/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new WebAuthnStamper({\n  rpId: \"example.com\",\n});\n\n// New HTTP client able to sign with passkeys!\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Create User Passkey in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a user passkey using the TurnkeyBrowserClient. It takes a configuration object as input and returns a Promise that resolves to a `Passkey` object.  This method handles the underlying details of creating a passkey for an end-user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> **createUserPasskey**(`config`): `Promise`\\<`Passkey`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:716](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L716)\n\nCreate a passkey for an end-user, taking care of various lower-level details.\n\n#### Parameters\n\n##### config\n\n`Record`\\<`any`, `any`\\> = `{}`\n\n#### Returns\n\n`Promise`\\<`Passkey`\\>\n```\n\n----------------------------------------\n\nTITLE: Importing Turnkey Styles in Next.js\nDESCRIPTION: Imports default Turnkey styles in the Next.js application layout file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@turnkey/sdk-react/styles\";\n```\n\n----------------------------------------\n\nTITLE: Extracting Wallet Encrypted Bundle in Turnkey SDK\nDESCRIPTION: This function extracts an encrypted bundle for a wallet. It returns a Promise resolving to a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> **extractWalletEncryptedBundle**(): `Promise`\\<`string`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:912](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L912)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum in TypeScript\nDESCRIPTION: This snippet defines an enumeration for different activity statuses within the API. It includes statuses such as 'CREATED', 'PENDING', 'COMPLETED', 'FAILED', etc. The enum aids in representing the various states an activity may have during its lifecycle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Creating API-Only Users with TurnkeySDK in TypeScript\nDESCRIPTION: Method for creating a signed request to generate API-only users. Takes a TCreateApiOnlyUsersBody input and returns a promise with either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nstampCreateApiOnlyUsers(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyProvider in React Application\nDESCRIPTION: Sets up the TurnkeyProvider component in the application entry point, configuring the Turnkey API integration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TurnkeyProvider } from \"@turnkey/sdk-react\";\n\nconst turnkeyConfig = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  rpId: process.env.RPID, // Your application's domain for WebAuthn flows\n  iframeUrl: \"https://auth.turnkey.com\",\n  serverSignUrl: \"http://localhost:3000/api\", // Backend endpoint for signing operations (optional)\n};\n\nfunction App() {\n  return (\n    <TurnkeyProvider config={turnkeyConfig}>\n      {/* Rest of the app */}\n    </TurnkeyProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyActivityError Class in TypeScript\nDESCRIPTION: This snippet shows the definition of the `TurnkeyActivityError` class, which extends the built-in `Error` class. It includes the constructor and the properties related to Turnkey activities such as `activityId`, `activityStatus`, and `activityType`. The class is designed to provide more context when an error occurs during a Turnkey activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @module @turnkey/http\n */\n\n/**\n * Turnkey activity error.\n */\nexport class TurnkeyActivityError extends Error {\n  activityId?: string;\n  activityStatus?:\n    | \"ACTIVITY_STATUS_CREATED\"\n    | \"ACTIVITY_STATUS_PENDING\"\n    | \"ACTIVITY_STATUS_COMPLETED\"\n    | \"ACTIVITY_STATUS_FAILED\"\n    | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\"\n    | \"ACTIVITY_STATUS_REJECTED\";\n  activityType?:\n    | \"ACTIVITY_TYPE_CREATE_API_KEYS\"\n    | \"ACTIVITY_TYPE_CREATE_USERS\"\n    | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"\n    | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"\n    | \"ACTIVITY_TYPE_CREATE_INVITATIONS\"\n    | \"ACTIVITY_TYPE_ACCEPT_INVITATION\"\n    | \"ACTIVITY_TYPE_CREATE_POLICY\"\n    | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"\n    | \"ACTIVITY_TYPE_DELETE_USERS\"\n    | \"ACTIVITY_TYPE_DELETE_API_KEYS\"\n    | \"ACTIVITY_TYPE_DELETE_INVITATION\"\n    | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\"\n    | \"ACTIVITY_TYPE_DELETE_POLICY\"\n    | \"ACTIVITY_TYPE_CREATE_USER_TAG\"\n    | \"ACTIVITY_TYPE_DELETE_USER_TAGS\"\n    | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\"\n    | \"ACTIVITY_TYPE_SIGN_TRANSACTION\"\n    | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\"\n    | \"ACTIVITY_TYPE_REJECT_ACTIVITY\"\n    | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"\n    | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"\n    | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"\n    | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"\n    | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"\n    | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"\n    | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"\n    | \"ACTIVITY_TYPE_CREATE_POLICY_V2\"\n    | \"ACTIVITY_TYPE_CREATE_POLICY_V3\"\n    | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"\n    | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"\n    | \"ACTIVITY_TYPE_UPDATE_USER_TAG\"\n    | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"\n    | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"\n    | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"\n    | \"ACTIVITY_TYPE_CREATE_USERS_V2\"\n    | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"\n    | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"\n    | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"\n    | \"ACTIVITY_TYPE_UPDATE_USER\"\n    | \"ACTIVITY_TYPE_UPDATE_POLICY\"\n    | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"\n    | \"ACTIVITY_TYPE_CREATE_WALLET\"\n    | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"\n    | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"\n    | \"ACTIVITY_TYPE_RECOVER_USER\"\n    | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"\n    | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"\n    | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"\n    | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"\n    | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"\n    | \"ACTIVITY_TYPE_EXPORT_WALLET\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"\n    | \"ACTIVITY_TYPE_EMAIL_AUTH\"\n    | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"\n    | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"\n    | \"ACTIVITY_TYPE_IMPORT_WALLET\"\n    | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"\n    | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"\n    | \"ACTIVITY_TYPE_CREATE_POLICIES\"\n    | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"\n    | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"\n    | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"\n    | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"\n    | \"ACTIVITY_TYPE_OAUTH\"\n    | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"\n    | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"\n    | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"\n    | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"\n    | \"ACTIVITY_TYPE_DELETE_WALLETS\"\n    | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"\n    | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"\n    | \"ACTIVITY_TYPE_INIT_OTP_AUTH\"\n    | \"ACTIVITY_TYPE_OTP_AUTH\"\n    | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"\n    | \"ACTIVITY_TYPE_UPDATE_WALLET\"\n    | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\"\n    | \"ACTIVITY_TYPE_CREATE_USERS_V3\"\n    | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  cause?: Error;\n\n  constructor(input: {\n    activityId?: string;\n    activityStatus?:\n      | \"ACTIVITY_STATUS_CREATED\"\n      | \"ACTIVITY_STATUS_PENDING\"\n      | \"ACTIVITY_STATUS_COMPLETED\"\n      | \"ACTIVITY_STATUS_FAILED\"\n      | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\"\n      | \"ACTIVITY_STATUS_REJECTED\";\n    activityType?:\n      | \"ACTIVITY_TYPE_CREATE_API_KEYS\"\n      | \"ACTIVITY_TYPE_CREATE_USERS\"\n      | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"\n      | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"\n      | \"ACTIVITY_TYPE_CREATE_INVITATIONS\"\n      | \"ACTIVITY_TYPE_ACCEPT_INVITATION\"\n      | \"ACTIVITY_TYPE_CREATE_POLICY\"\n      | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"\n      | \"ACTIVITY_TYPE_DELETE_USERS\"\n      | \"ACTIVITY_TYPE_DELETE_API_KEYS\"\n      | \"ACTIVITY_TYPE_DELETE_INVITATION\"\n      | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\"\n      | \"ACTIVITY_TYPE_DELETE_POLICY\"\n      | \"ACTIVITY_TYPE_CREATE_USER_TAG\"\n      | \"ACTIVITY_TYPE_DELETE_USER_TAGS\"\n      | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\"\n      | \"ACTIVITY_TYPE_SIGN_TRANSACTION\"\n      | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\"\n      | \"ACTIVITY_TYPE_REJECT_ACTIVITY\"\n      | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"\n      | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"\n      | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"\n      | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"\n      | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"\n      | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"\n      | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"\n      | \"ACTIVITY_TYPE_CREATE_POLICY_V2\"\n      | \"ACTIVITY_TYPE_CREATE_POLICY_V3\"\n      | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"\n      | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"\n      | \"ACTIVITY_TYPE_UPDATE_USER_TAG\"\n      | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"\n      | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"\n      | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"\n      | \"ACTIVITY_TYPE_CREATE_USERS_V2\"\n      | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"\n      | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"\n      | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"\n      | \"ACTIVITY_TYPE_UPDATE_USER\"\n      | \"ACTIVITY_TYPE_UPDATE_POLICY\"\n      | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"\n      | \"ACTIVITY_TYPE_CREATE_WALLET\"\n      | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"\n      | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"\n      | \"ACTIVITY_TYPE_RECOVER_USER\"\n      | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"\n      | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"\n      | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"\n      | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"\n      | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"\n      | \"ACTIVITY_TYPE_EXPORT_WALLET\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"\n      | \"ACTIVITY_TYPE_EMAIL_AUTH\"\n      | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"\n      | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"\n      | \"ACTIVITY_TYPE_IMPORT_WALLET\"\n      | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"\n      | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"\n      | \"ACTIVITY_TYPE_CREATE_POLICIES\"\n      | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"\n      | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"\n      | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"\n      | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"\n      | \"ACTIVITY_TYPE_OAUTH\"\n      | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"\n      | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"\n      | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"\n      | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"\n      | \"ACTIVITY_TYPE_DELETE_WALLETS\"\n      | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"\n      | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"\n      | \"ACTIVITY_TYPE_INIT_OTP_AUTH\"\n      | \"ACTIVITY_TYPE_OTP_AUTH\"\n      | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"\n      | \"ACTIVITY_TYPE_UPDATE_WALLET\"\n      | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\"\n      | \"ACTIVITY_TYPE_CREATE_USERS_V3\"\n      | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n    cause?: Error;\n    message: string;\n  }) {\n    super(input.message);\n\n    this.activityId = input.activityId;\n    this.activityStatus = input.activityStatus;\n    this.activityType = input.activityType;\n    this.cause = input.cause;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TurnkeyActivityError);\n    }\n\n    this.name = \"TurnkeyActivityError\";\n\n    // If present, also log the cause message\n    if (input.cause) {\n      this.message = `${this.message}\\nCaused by: ${input.cause.message}`;\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Data Types and Interfaces in TypeScript\nDESCRIPTION: This code snippet defines a large set of TypeScript interfaces and types used throughout the SDK. It includes definitions for various intents (e.g., createWalletIntent, importPrivateKeyIntent) and results (e.g., createWalletResult, importPrivateKeyResult) related to wallet management, user operations, authentication, and organization settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initOtpAuth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }; `importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; `initImportPrivateKeyIntent`: { `userId`: `string`; }; `initImportWalletIntent`: { `userId`: `string`; }; `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initOtpAuthIntentV2`: { `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `oauthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; }; `otpAuthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; }; `recoverUserIntent`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[];\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey HTTP Client\nDESCRIPTION: Example showing how to initialize and configure the Turnkey HTTP client with API key authentication. Demonstrates creating a stamper for request signing and setting up the client with base URL.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\n// This stamper produces signatures using the API key pair passed in.\nconst stamper = new ApiKeyStamper({\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n});\n\n// The Turnkey client uses the passed in stamper to produce signed requests\n// and sends them to Turnkey\nconst client = new TurnkeyClient(\n  {\n    baseUrl: \"https://api.turnkey.com\",\n  },\n  stamper,\n);\n\n// Now you can make authenticated requests!\nconst data = await client.getWhoami({\n  organizationId: \"<Your organization id>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Turnkey Server Configuration\nDESCRIPTION: Example of setting up a Turnkey server client with Express proxy handler. Shows configuration loading, client initialization, and proxy endpoint setup. Requires fs module for config file reading and Express for server implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Turnkey } = require(\"@turnkey/sdk-server\");\n\n// This config contains parameters including base URLs, API credentials, and org ID\nconst turnkeyConfig = JSON.parse(fs.readFileSync(\"./turnkey.json\", \"utf8\"));\n\n// Use the config to instantiate a Turnkey Client\nconst turnkeyServerClient = new Turnkey(turnkeyConfig);\n\n// You're all set to create a server!\nconst turnkeyProxyHandler = turnkeyServerClient.expressProxyHandler({});\n\napp.post(\"/apiProxy\", turnkeyProxyHandler);\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating API Client\nDESCRIPTION: Example of creating and using an API client to make authenticated requests to the Turnkey API\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apiClient = turnkey.apiClient();\nconst walletsResponse = await apiClient.getWallets();\n\n// this will sign the request with the configured api credentials\n```\n\n----------------------------------------\n\nTITLE: signInitImportWallet Function Definition\nDESCRIPTION: Defines the `signInitImportWallet` function, which accepts an `input` of type `TInitImportWalletInput` and optional `options` of type `TurnkeyCredentialRequestOptions`. It returns a Promise that resolves to a `SignedRequest`. This function is crucial for initiating the wallet import process with Turnkey by generating a signed request using WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signInitImportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signInitImportWallet**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining getActivity Function with Promise Handling in JavaScript\nDESCRIPTION: The getActivity function returns a Promise that resolves with a detailed activity object. It contains operations related to user management intents such as inviting users, creating API keys, managing organizations, and handling authenticator settings. The activity object is complex and includes multiple substructures, requiring careful management of input parameters and expected output formats.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetActivity(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createPoliciesIntent: { policies: object[]; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; ... }}\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers - JavaScript\nDESCRIPTION: The function deleteOauthProviders is designed to delete specified OAuth providers based on the provided input parameters. It returns a Promise containing an object with the status and details of the deletion process. Dependencies include a JavaScript environment supporting Promises and any relevant SDK modules for OAuth management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction deleteOauthProviders(input) {\n    return new Promise((resolve, reject) => {\n        // Logic to delete OAuth Providers\n        // This would generally involve an API call to the backend service\n        // Simulating deletion logic\n        const response = { activity: { canApprove: false, canReject: true } };\n        resolve(response);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ApiKeyStamper Class in TypeScript\nDESCRIPTION: This snippet defines the ApiKeyStamper class with its constructor, properties, and stamp method. It is used for creating a stamper for the TurnkeyClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ApiKeyStamper {\n  apiPublicKey: string;\n  apiPrivateKey: string;\n\n  constructor(config: TApiKeyStamperConfig) {\n    // Constructor implementation\n  }\n\n  stamp(payload: string): Promise<{ stampHeaderName: string; stampHeaderValue: string; }> {\n    // Method implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Authentication Flow\nDESCRIPTION: Example of sending and verifying OTP for email or SMS authentication\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst initAuthResponse = await server.sendOtp({\n  suborgID: suborgId!,\n  otpType,\n  contact: value,\n  ...(emailCustomization && { emailCustomization }),\n  ...(sendFromEmailAddress && { sendFromEmailAddress }),\n  ...(customSmsMessage && { customSmsMessage }),\n  userIdentifier: authIframeClient?.iframePublicKey!,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst authSession = await server.verifyOtp({\n  suborgID: suborgId,\n  otpId,\n  otpCode: otp,\n  targetPublicKey: authIframeClient!.iframePublicKey!,\n  sessionLengthSeconds,\n});\n```\n\n----------------------------------------\n\nTITLE: Session-based Login in Browser SDK\nDESCRIPTION: Logs in using a session object from server actions, storing the session and active client in local storage.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithSession(session: Session): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Turnkey SDK Intent and Result Types in TypeScript\nDESCRIPTION: This code snippet defines a large set of TypeScript interfaces for various intents and results used in the Turnkey SDK. It covers operations such as user management, authentication, key creation, wallet management, and organizational features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nRVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; privateKeyName: string; userId: string; }; importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; }; initImportPrivateKeyIntent: { userId: string; }; initImportWalletIntent: { userId: string; }; initOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initOtpAuthIntentV2: { alphanumeric: boolean; contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpLength: number; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; }; oauthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; oidcToken: string; targetPublicKey: string; }; otpAuthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; otpCode: string; otpId: string; targetPublicKey: string; }; recoverUserIntent: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; userId: string; }; rejectActivityIntent: { fingerprint: string; }; removeOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; }; setOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; }; setPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; }; setPaymentMethodIntentV2: { cardHolderEmail: string; cardHolderName: string; paymentMethodId: string; }; signRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; }; signRawPayloadIntentV2: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; signWith: string; }; signRawPayloadsIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payloads: string[]; signWith: string; }; signTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; signTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; updateAllowedOriginsIntent: { allowedOrigins: string[]; }; updatePolicyIntent: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePolicyIntentV2: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePrivateKeyTagIntent: { addPrivateKeyIds: string[]; newPrivateKeyTagName: string; privateKeyTagId: string; removePrivateKeyIds: string[]; }; updateRootQuorumIntent: { threshold: number; userIds: string[]; }; updateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; }; updateUserTagIntent: { addUserIds: string[]; newUserTagName: string; removeUserIds: string[]; userTagId: string; }; updateWalletIntent: { walletId: string; walletName: string; }; }; organizationId: string; result: { acceptInvitationResult: { invitationId: string; userId: string; }; activateBillingTierResult: { productId: string; }; createApiKeysResult: { apiKeyIds: string[]; }; createApiOnlyUsersResult: { userIds: string[]; }; createAuthenticatorsResult: { authenticatorIds: string[]; }; createInvitationsResult: { invitationIds: string[]; }; createOauthProvidersResult: { providerIds: string[]; }; createOrganizationResult: { organizationId: string; }; createPoliciesResult: { policyIds: string[]; }; createPolicyResult: { policyId: string; }; createPrivateKeysResult: { privateKeyIds: string[]; }; createPrivateKeysResultV2: { privateKeys: object[]; }; createPrivateKeyTagResult: { privateKeyIds: string[]; privateKeyTagId: string; }; createReadOnlySessionResult: { organizationId: string; organizationName: string; session: string; sessionExpiry: string; userId: string; username: string; }; createReadWriteSessionResult: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createReadWriteSessionResultV2: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createSubOrganizationResult: { rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV3: { privateKeys: object[]; rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV4: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV5: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV6: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV7: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createUsersResult: { userIds: string[]; }; createUserTagResult: { userIds: string[]; userTagId: string; }; createWalletAccountsResult: { addresses: string[]; }; createWalletResult: { addresses: string[]; walletId: string; }; deleteApiKeysResult: { apiKeyIds: string[]; }; deleteAuthenticatorsResult: { authenticatorIds: string[]; }; deleteInvitationResult: { invitationId: string; }; deleteOauthProvidersResult: { providerIds: string[]; }; deleteOrganizationResult: { organizationId: string; }; deletePaymentMethodResult: { paymentMethodId: string; }; deletePolicyResult: { policyId: string; }; deletePrivateKeysResult: { privateKeyIds: string[]; }; deletePrivateKeyTagsResult: { privateKeyIds: string[]; privateKeyTagIds: string[]; }; deleteSubOrganizationResult: { subOrganizationUuid: string; }; deleteUsersResult: { userIds: string[]; }; deleteUserTagsResult: { userIds: string[]; userTagIds: string[]; }; deleteWalletsResult: { walletIds: string[]; }; disablePrivateKeyResult: { privateKeyId: string; }; emailAuthResult: { apiKeyId: string; userId: string; }; exportPrivateKeyResult: { exportBundle: string; privateKeyId: string; }; exportWalletAccountResult: { address: string; exportBundle: string; }; exportWalletResult: { exportBundle: string; walletId: string; }; importPrivateKeyResult: { addresses: object[]; privateKeyId: string; }; importWalletResult: { addresses: string[]; walletId: string; }; initImportPrivateKeyResult: { importBundle: string; }; initImportWalletResult: { importBundle: string; }; initOtpAuthResult: { otpId: string; }; initOtpAuthResultV2: { otpId: string; }; initUserEmailRecoveryResult: { userId: string; }; oauthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; recoverUserResult: { authenticatorId: string[]; }; removeOrganizationFeatureResult: { features: object[]; }; setOrganizationFeatureResult: { features: object[]; }; setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string;\n```\n\n----------------------------------------\n\nTITLE: SDK Interface Type Definitions\nDESCRIPTION: Comprehensive type definitions for the Turnkey SDK including intents and results for operations like authentication, wallet management, key management, and organization configuration. These types define the structure of requests and responses for the SDK's API operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"SECP256K1\" | \"CURVE_ED25519\",\n  encryptedBundle: string,\n  privateKeyName: string,\n  userId: string,\n  importWalletIntent: {\n    accounts: object[],\n    encryptedBundle: string,\n    userId: string,\n    walletName: string\n  },\n  // Additional type definitions omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Using signDeletePrivateKeyTags Function in TypeScript\nDESCRIPTION: The signDeletePrivateKeyTags function takes a TDeletePrivateKeyTagsInput object and optional TurnkeyCredentialRequestOptions to generate a signed request for deleting private key tags. The function returns a Promise that resolves to a SignedRequest object ready to be POSTed to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeletePrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeletePrivateKeyTags: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Fetching User and Organization Information TypeScript SDK\nDESCRIPTION: The `getWhoami` function retrieves basic information about the current API or WebAuthN user and their associated organization. It returns a promise that resolves to an object containing `organizationId`, `organizationName`, `userId`, and `username`. The function relies on the endpoint `POST /public/v1/query/whoami` and requires an input of type `TGetWhoamiInput`. This utility is particularly useful for applications that need to display or log user details in a multi-organization context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getWhoami.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getWhoami: (input: TGetWhoamiInput) => Promise<{ organizationId: string; organizationName: string; userId: string; username: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Interface for Activity Operations in JavaScript\nDESCRIPTION: This code snippet defines a structured promise interface in JavaScript, detailing various operations related to activity management in an SDK. Dependencies include JavaScript runtime environment to handle promises and asynchronous operations. Key parameters include multiple nested intents specifying operations such as creating keys, users, and organizations. The inputs typically involve structured objects with relevant properties, while outputs are handled through the resolution of the promise. This structure aims to accommodate diverse operation handling within a standardized format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\\\"public-key\\\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\\\"public-key\\\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\\\"MNEMONIC_LANGUAGE_ENGLISH\\\"` \\| `\\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\"` \\| `\\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\"` \\| `\\\"MNEMONIC_LANGUAGE_CZECH\\\"` \\| `\\\"MNEMONIC_LANGUAGE_FRENCH\\\"` \\| `\\\"MNEMONIC_LANGUAGE_ITALIAN\\\"` \\| `\\\"MNEMONIC_LANGUAGE_JAPANESE\\\"` \\| `\\\"MNEMONIC_LANGUAGE_KOREAN\\\"` \\| `\\\"MNEMONIC_LANGUAGE_SPANISH\\\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\"` \\| `\\\"ADDRESS_FORMAT_COMPRESSED\\\"` \\| `\\\"ADDRESS_FORMAT_ETHEREUM\\\"` \\| `\\\"ADDRESS_FORMAT_SOLANA\\\"` \\| `\\\"ADDRESS_FORMAT_COSMOS\\\"` \\| `\\\"ADDRESS_FORMAT_TRON\\\"` \\| `\\\"ADDRESS_FORMAT_SUI\\\"` \\| `\\\"ADDRESS_FORMAT_APTOS\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_SEI\\\"` \\| `\\\"ADDRESS_FORMAT_XLM\\\"` \\| `\\\"ADDRESS_FORMAT_DOGE_MAINNET\\\"` \\| `\\\"ADDRESS_FORMAT_DOGE_TESTNET\\\"` \\| `\\\"ADDRESS_FORMAT_TON_V3R2\\\"` \\| `\\\"ADDRESS_FORMAT_TON_V4R2\\\"` \\| `\\\"ADDRESS_FORMAT_XRP\\\"`)[]; `curve`: `\\\"CURVE_SECP256K1\\\"` \\| `\\\"CURVE_ED25519\\\"`; `encryptedBundle`: `string`; \n```\n\n----------------------------------------\n\nTITLE: Declaring signDeleteInvitation Function in TypeScript\nDESCRIPTION: Function signature for signDeleteInvitation that creates a WebAuthn assertion and returns a signed DeleteInvitation request. This function takes an input of type TDeleteInvitationInput and optional TurnkeyCredentialRequestOptions, and returns a Promise containing a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteInvitation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeleteInvitation: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion - TypeScript\nDESCRIPTION: The signCreateReadOnlySession function is designed to request a WebAuthn assertion and return a signed CreateReadOnlySession request. This function accepts specific parameters and is expected to return a Promise containing a SignedRequest object which can be POSTed to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateReadOnlySession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signCreateReadOnlySession(input: TCreateReadOnlySessionInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys Function Type Definition\nDESCRIPTION: Type declaration for createPrivateKeys function that returns a Promise containing activity details, authentication parameters, and various intent handling options for key management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePrivateKeys(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Signing DeletePrivateKeyTags Request using Turnkey API in TypeScript\nDESCRIPTION: This function, signDeletePrivateKeyTags, generates a signed request for deleting private key tags. It utilizes WebAuthn assertions for authentication and returns a promise containing a `SignedRequest`. Dependencies include the Turnkey API and `TDeletePrivateKeyTagsInput` type. Key parameters include `input`, which is the data necessary for the request, and `options` for credential request customizations. The function returns a promise of a signed request which can then be utilized in HTTP POST operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeletePrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signDeletePrivateKeyTags**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Managing User and Organization Features Intents in TypeScript\nDESCRIPTION: This snippet provides definitions for intents focused on managing user features and organization settings. It includes the ability to set and remove features, update user information, and manage organizational policies. Each intent contains specific fields necessary for the corresponding operation, ensuring structured management of user and feature data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n`removeOrganizationFeatureIntent`: { `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; }; `setOrganizationFeatureIntent`: { `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; `value`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Turnkey Server Client\nDESCRIPTION: Example showing how to initialize the Turnkey server client, setup configuration, and create an Express proxy handler for API requests. Demonstrates loading config from a JSON file and setting up a basic Express server endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Turnkey } = require(\"@turnkey/sdk-server\");\n\n// This config contains parameters including base URLs, API credentials, and org ID\nconst turnkeyConfig = JSON.parse(fs.readFileSync(\"./turnkey.json\", \"utf8\"));\n\n// Use the config to instantiate a Turnkey Client\nconst turnkeyServerClient = new Turnkey(turnkeyConfig);\n\n// You're all set to create a server!\nconst turnkeyProxyHandler = turnkeyServerClient.expressProxyHandler({});\n\napp.post(\"/apiProxy\", turnkeyProxyHandler);\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the result of OAuth operations which includes apiKeyId, credentialBundle, and userId as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\noauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys in Turnkey Browser SDK\nDESCRIPTION: Method to create private keys with specified input parameters. Returns a Promise resolving to an object containing the created private keys' details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePrivateKeys(input: TCreatePrivateKeysBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for TrueKeeper SDK Activities\nDESCRIPTION: A comprehensive set of TypeScript type definitions for activity results, status enumerations, and activity types in the TrueKeeper SDK. These types cover various operations including authentication, user management, key management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Refreshing a session in JavaScript\nDESCRIPTION: Shows how to use the refreshSession method of TurnkeyBrowserClient to refresh an existing, active session and extend its expiry.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Refresh the current session\nconst refreshedSession = await browserClient.refreshSession({\n  sessionType: \"READ_WRITE\",\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to create a wallet using the Turnkey SDK. It accepts an input of type TCreateWalletBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateWallet(input: TCreateWalletBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Identity with getWhoami()\nDESCRIPTION: Method to retrieve the current user's identity information. Returns organization and user details including IDs and names.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ngetWhoami(input): Promise<{ organizationId: string, organizationName: string, userId: string, username: string }>\n```\n\n----------------------------------------\n\nTITLE: Creating User Passkey with TurnkeyPasskeyClient\nDESCRIPTION: Shows how to create a passkey for an end-user using TurnkeyPasskeyClient, handling WebAuthn protocol configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst passkeyClient = turnkeySDK.passkeyClient();\n\n// Creates a new user passkey with WebAuthn protocol details\nconst passkey = await passkeyClient.createUserPasskey({\n  publicKey: {\n    rp: { name: \"Example Relying Party\" },\n    user: { name: \"testUser\", displayName: \"Test User\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Provider in React Application\nDESCRIPTION: Example showing how to wrap an application with TurnkeyThemeProvider and apply custom theme variables. The provider applies CSS variables to the root HTML element and makes them accessible through React context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/TurnkeyThemeProvider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  \"--text-primary\": \"#333\",\n};\n\n<TurnkeyThemeProvider theme={theme}>\n  <App />\n</TurnkeyThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining v1OtpAuthIntent type\nDESCRIPTION: Defines the structure for OTP authentication intent, including optional API key name and expiration, a flag to invalidate existing keys, and required OTP code, ID, and target public key. It's used as a parameter when requesting OTP-based authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport interface Internal_PublicApiTypes {\n    /**\n     * Coordinator Public API\n     */\n    publicApi: {\n        schemas: {\n            v1OtpAuthIntent: {\n                name: \"v1OtpAuthIntent\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        apiKeyName: {\n                            type: \"string\";\n                            description: \"Optional human-readable name for an API Key. If none provided, default to OTP Auth - <Timestamp>\"\n                        },\n                        expirationSeconds: {\n                            type: \"string\";\n                            description: \"Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used.\"\n                        },\n                        invalidateExisting: {\n                            type: \"boolean\";\n                            description: \"Invalidate all other previously generated OTP Auth API keys\"\n                        },\n                        otpCode: {\n                            type: \"string\",\n                            description: \"OTP sent out to a user's contact (email or SMS)\",\n                            required: true\n                        },\n                        otpId: {\n                            type: \"string\",\n                            description: \"ID representing the result of an init OTP activity.\",\n                            required: true\n                        },\n                        targetPublicKey: {\n                            type: \"string\",\n                            description: \"Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.\",\n                            required: true\n                        }\n                    },\n                    required: [\"otpCode\", \"otpId\", \"targetPublicKey\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Encrypting Private Key Bundle with HPKE in TypeScript\nDESCRIPTION: This function encrypts a private key bundle using HPKE (Hybrid Public Key Encryption) and verifies the enclave signature. It takes an object of type EncryptPrivateKeyToBundleParams as input and returns a promise that resolves to a JSON string representing the encrypted bundle. The function may throw an error if enclave signature verification or any other validation fails.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/encryptPrivateKeyToBundle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nencryptPrivateKeyToBundle(params: EncryptPrivateKeyToBundleParams): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyClient Example\nDESCRIPTION: Complete example showing how to initialize a TurnkeyClient instance with API key authentication using environment variables and the ApiKeyStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\n\n// Following best practices, define parameters in your .env file\nconst baseUrl = process.env.TURNKEY_BASE_URL || \"https://api.turnkey.com\";\nconst apiPublicKey = process.env.TURNKEY_API_PUBLIC_KEY;\nconst apiPrivateKey = process.env.TURNKEY_API_PRIVATE_KEY;\n\n// Initialize the API key stamper\nconst stamper = new ApiKeyStamper({ apiPublicKey, apiPrivateKey });\n\n// Initialize the Turnkey client and then you're ready to use the Turnkey client! 🎉\nconst client = new TurnkeyClient({ baseUrl }, stamper);\n```\n\n----------------------------------------\n\nTITLE: Complex Promise Return Type Definition in TypeScript\nDESCRIPTION: Comprehensive type definition for a Promise return object that includes activity status, authentication details, and various organizational management intents. Includes properties for approval status, timestamps, and detailed intent configurations for operations like user management, key handling, and organization setup.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      // Intent definitions for various operations\n      acceptInvitationIntent: {...};\n      createOrganizationIntent: {...};\n      createUsersIntent: {...};\n      // Additional intent definitions...\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining User Auth Intents\nDESCRIPTION: Defines various intents related to user authentication, such as OTP authentication and email recovery. Each intent includes associated parameters like user identifiers and email customizations necessary for the process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Authentication Request in TypeScript\nDESCRIPTION: Method for creating a signed request for activity approval. Returns either undefined or a properly signed request object that can be sent to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nstampApproveActivity(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Using Server Sign Function in Turnkey SDK\nDESCRIPTION: Demonstrates the use of the serverSign function to proxy requests from a root parent organization to a child organization. This is useful when the API key cannot be stored client-side and requests need to be forwarded via a proxy backend.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n    apiBaseUrl: \"https://api.turnkey.com\",\n    defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n    serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst subOrgIdsResponse = await turnkeySDK.serverSign(\n \"getSubOrgIds\",\n   [{\n     filterType: \"EMAIL\",\n     filterValue: email\n   }]\n )!\n\nif (subOrgIdsResponse.organizationIds?.length > 0) {\n const emailAuthResponse = await turnkeySDK.serverSign(\n   \"emailAuth\",\n   [{\n     email: email,\n     targetPublicKey: <iframeClient.iframePublicKey>,\n     organizationId: subOrgIdsResponse.organizationIds[0]\n   }]\n )\n}\n```\n\n----------------------------------------\n\nTITLE: BaseWalletInterface Interface Definition\nDESCRIPTION: Defines a base interface for wallet implementations that includes core functionality for getting public keys and signing messages. Used as a foundation for chain-specific wallet interfaces like SolanaWalletInterface and EthereumWalletInterface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/interfaces/BaseWalletInterface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseWalletInterface {\n  type: WalletType;\n  signMessage: (message: string) => Promise<string>;\n  getPublicKey: () => Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Import in Turnkey SDK (TS)\nDESCRIPTION: This method initializes the import of a wallet using the Turnkey SDK. It accepts a `TInitImportWalletBody` object as input and returns a Promise that resolves to an object, representing the result of the wallet import initialization. This function is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n> **initImportWallet**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1919](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1919)\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadsRequest Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadsRequest` as an object type for requesting multiple raw payload signatures. It includes organization ID, parameters (v1SignRawPayloadsIntent), timestamp, and a fixed activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadsRequest\n\n> **v1SignRawPayloadsRequest**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2459\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1SignRawPayloadsIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"`\n```\n\n----------------------------------------\n\nTITLE: Signing Multiple Raw Payloads in SDK Browser Client in TypeScript\nDESCRIPTION: The function `signRawPayloads` handles signing multiple raw payloads by taking input of TSignRawPayloadsBody type. It returns a promise that resolves with an object. This function is essential for batch processing of payloads needing cryptographic assurance, necessitating proper payload structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **signRawPayloads**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:2428](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2428)\n\n#### Parameters\n\n##### input\n\n`TSignRawPayloadsBody`\n\n#### Returns\n\n`Promise`<`object` & `object`>\n\n\n```\n\n----------------------------------------\n\nTITLE: Updating User Authentication in TypeScript\nDESCRIPTION: This method provides a comprehensive authentication update for an end user. It combines add/update and delete operations into a single call, with behavior driven by the values set in the input parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserAuth(params: UpdateUserAuthParams): Promise<boolean> {\n  // Implementation details not provided in the snippet\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey Server Client\nDESCRIPTION: Configuration and initialization of the Turnkey server client with organization ID, API base URL, and API keys\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-server\";\n\nconst turnkey = new Turnkey({\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  apiBaseUrl: \"https://api.turnkey.com\",\n  apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,\n  apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TInitImportWalletInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias named TInitImportWalletInput as an object. It is used to structure the expected input properties for initializing the import of a wallet in the Turnkey SDK. The alias includes a property 'body' of type TInitImportWalletBody, which specifies the detailed structure of the wallet import input data. The definition is crucial for ensuring that inputs adhere to the expected format during API calls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitImportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TInitImportWalletInput = object;\n\n// Properties\n// body: TInitImportWalletBody\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for TurnKey SDK Results and Activity Types\nDESCRIPTION: Comprehensive TypeScript type definitions for various operation results, activity statuses, and activity types in the TurnKey SDK. Includes types for authentication, user management, wallet operations, transaction signing, and organizational management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/otpAuth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Function Type Definition\nDESCRIPTION: TypeScript type definition for the emailAuth function which handles email authentication flows. The function returns a Promise containing activity details, intent configurations, and authentication settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nemailAuth(input): Promise<{ \n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    // Additional type definitions truncated for brevity\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Polling with Turnkey Client\nDESCRIPTION: Example of using the withAsyncPolling helper to handle asynchronous mutations with built-in polling support. Includes error handling for activity status and consensus requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAsyncPolling, TurnkeyActivityError } from \"@turnkey/http\";\n\n// Use `withAsyncPolling(...)` to wrap & create a fetcher with built-in async polling support\nconst fetcher = withAsyncPolling({\n  request: client.createPrivateKeys,\n});\n\n// The fetcher remains fully typed. After submitting the request,\n// it'll poll until the activity reaches a terminal state.\ntry {\n  const activity = await fetcher({\n    body: {\n      /* ... */\n    },\n  });\n\n  // Success!\n  console.log(\n    activity.result.createPrivateKeysResultV2?.privateKeys?.[0]?.privateKeyId,\n  );\n} catch (error) {\n  if (error instanceof TurnkeyActivityError) {\n    // In case the activity is rejected, failed, or requires consensus,\n    // a rich `TurnkeyActivityError` will be thrown. You can read from\n    // `TurnkeyActivityError` to find out why the activity didn't succeed.\n    //\n    // For instance, if your activity requires consensus and doesn't have\n    // enough approvals, you can get the `activityId` from `TurnkeyActivityError`,\n    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n    // when the required approvals/rejections are in place.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in with a server-created session in JavaScript\nDESCRIPTION: Shows how to use the loginWithSession method of TurnkeyBrowserClient to log in with a session object created via a server action.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Login with a session created by a server\nconst loggedIn = await browserClient.loginWithSession(serverCreatedSession);\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: Defines result types for various activity operations in the Turnkey SDK, including email recovery, OAuth, OTP auth, and more. These types specify the structure of data returned from API calls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  initUserEmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n}\n```\n\n----------------------------------------\n\nTITLE: createPolicy method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates a single policy. It takes a `TCreatePolicyBody` object as input and returns a Promise that resolves to an object. This function allows creating individual security policies within Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createPolicy(input: TurnkeySDKApiTypes.TCreatePolicyBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreatePolicyBody, object & object>(\n            `/turnkey/create_policy`,\n            input,\n            \"policy\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Installing TurnkeyClient with Package Managers\nDESCRIPTION: Commands for installing the @turnkey/http package using different Node.js package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/http\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/http\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/http\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for GetWallets Response in TypeScript\nDESCRIPTION: The TGetWalletsResponse type alias represents the expected structure of the HTTP response received when calling the GetWallets endpoint of the PublicApiService. It is specifically defined to enforce type safety and improve code clarity when dealing with response data from this API operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetWalletsResponse = operations[\\\"PublicApiService_GetWallets\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Async Polling Wrapper Function\nDESCRIPTION: This code snippet defines a function `withAsyncPolling` that wraps a request to create a fetcher with built-in async polling support. It is deprecated and recommends using `TurnkeyClient` and `createActivityPoller` instead. It takes a params object containing `refreshIntervalMs` and `request` and returns a function that takes an input and returns a promise.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/withAsyncPolling.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with [TurnkeyApi](../namespaces/TurnkeyApi/README.mdx).\n * Use [TurnkeyClient](../classes/TurnkeyClient.mdx) and [createActivityPoller](createActivityPoller.mdx) instead.\n */\nexport declare function withAsyncPolling<O extends object, I extends object>(params: {\n    refreshIntervalMs?: number;\n    request: (input: I) => Promise<O>;\n}): (input: I) => Promise<O[\"activity\"]>;\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Types in TypeScript for Turnkey SDK\nDESCRIPTION: This code snippet defines complex TypeScript types for various API responses in the Turnkey SDK. It includes definitions for activities, their statuses, types, and result structures for different operations like user creation, authentication, and blockchain transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/oauth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\notpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Sign Get Policies with Turnkey SDK\nDESCRIPTION: The `signGetPolicies` function is used to request a WebAuthn assertion and return a signed `GetPolicies` request for submission to Turnkey. It takes `TGetPoliciesInput` and optional `TurnkeyCredentialRequestOptions` as parameters. The function returns a Promise that resolves to a `SignedRequest` object, ensuring secure communication with the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetPolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n> `const` **signGetPolicies**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Account with getWalletAccount()\nDESCRIPTION: Method to retrieve details of a specific wallet account. Returns comprehensive account information including address, cryptographic curve, and associated metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ngetWalletAccount(input): Promise<{ account: { address: string, addressFormat: string, walletAccountId: string, curve: string } }>\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadRequest Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadRequest` as an object type for requesting a raw payload signature. It includes organization ID, parameters (v1SignRawPayloadIntentV2), timestamp, and a fixed activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadRequest\n\n> **v1SignRawPayloadRequest**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2432\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1SignRawPayloadIntentV2\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"`\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum Definitions for Turnkey SDK Activity Types and Status\nDESCRIPTION: This snippet defines TypeScript type definitions for activity results, statuses, and types in the Turnkey SDK. It includes enumerations for activity status values and comprehensive activity type definitions covering operations like key management, user administration, authentication methods, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUser.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion - TypeScript\nDESCRIPTION: The signGetActivity function takes input parameters related to activity requests and generates a signed request that can be used for further processing with the Turnkey API. It is defined to return a Promise that resolves to a SignedRequest type, contingent on the input and options provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetActivity(input, options?): Promise<SignedRequest>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Organization with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateSubOrganization` function takes an input of type `TCreateSubOrganizationBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is used to create a new sub-organization in the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateSubOrganization(input: TCreateSubOrganizationBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Complex Promise Return Type Definition in TypeScript\nDESCRIPTION: Defines a sophisticated Promise return type with nested objects representing various SDK intent types, activity metadata, and authentication details\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteInvitation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; ... } }>\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction\nDESCRIPTION: Asynchronous method for signing a transaction with a specific input body, returning a Promise with the signed transaction response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransaction(input: TSignTransactionBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Signing Multiple Raw Payloads in Turnkey SDK (TS)\nDESCRIPTION: This method signs multiple raw payloads within the Turnkey SDK. It takes a `TSignRawPayloadsBody` as input and returns a Promise that resolves to an object, representing the result of signing multiple raw payloads. This method is inherited from `TurnkeyServerClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\n> **signRawPayloads**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2241](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2241)\n```\n\n----------------------------------------\n\nTITLE: Logging in with Server-Created Session in JavaScript\nDESCRIPTION: Shows how to use TurnkeyBrowserClient to log in with a session object created via a server action.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Login with a session created by a server\nconst loggedIn = await browserClient.loginWithSession(serverCreatedSession);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified Sub-Organization IDs - TypeScript SDK\nDESCRIPTION: This code defines a method to retrieve a list of verified sub-organization IDs asynchronously. Requires the `TGetVerifiedSubOrgIdsBody` type for input, and returns a Promise with an object containing an array of `organizationIds`. Inherits from `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetVerifiedSubOrgIds(input): Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: Transaction Signing Intents in TypeScript\nDESCRIPTION: Defines structures for signing blockchain transactions. Supports Ethereum and Solana transaction types with fields for the unsigned transaction and signing key information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Login in Turnkey Browser SDK\nDESCRIPTION: The `login` function authenticates a user within the Turnkey Browser SDK. It optionally accepts a `config` object containing an `organizationId` and returns a promise that resolves to an object upon successful login. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n> **login**(`config`?): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:110](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L110)\n\n#### Parameters\n\n##### config?\n\n###### organizationId?\n\n`string`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`login`](TurnkeyBrowserClient.mdx#login)\n```\n\n----------------------------------------\n\nTITLE: Using an existing passkey with react-native-passkey-stamper\nDESCRIPTION: This code shows how to utilize an existing passkey with the `PasskeyStamper` class from the `@turnkey/react-native-passkey-stamper` package to create a `TurnkeyClient` that can sign transactions using passkeys.  It instantiates the `PasskeyStamper` with the relying party ID (`rpId`) and then creates a new `TurnkeyClient` configured with the stamper for authenticated requests to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasskeyStamper } from \"@turnkey/react-native-passkey-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new PasskeyStamper({\n  rpId: \"your.site.com\",\n});\n\n// New HTTP client able to sign with passkeys!\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper\n);\n\n// Now, send authenticated requests\nhttpClient.signTransaction(...)\n```\n\n----------------------------------------\n\nTITLE: Generating Signed WebAuthn GetUsers Request in TypeScript\nDESCRIPTION: Function that creates a WebAuthn assertion for a signed request to retrieve users. Accepts input parameters for user retrieval and optional credential request options. Returns a promise with a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetUsers(input: TGetUsersInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating User Tag in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to create a user tag using the Turnkey SDK. It takes an input of type TCreateUserTagBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateUserTag(input: TCreateUserTagBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account in Turnkey SDK\nDESCRIPTION: This function exports a wallet account. It takes a `TExportWalletAccountBody` object as input and returns a Promise resolving to an object. It is part of the `TurnkeyBrowserClient` API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> **exportWalletAccount**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1921](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1921)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client with Ethereum Integration\nDESCRIPTION: Setup of Wallet client using Ethereum wallet for request signing and authentication\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createWalletClient,\n  custom,\n  recoverPublicKey,\n  hashMessage,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { mainnet } from \"viem/chains\";\n\nimport { WalletStamper, EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst walletClient = turnkey.walletClient(new EthereumWallet());\n\n// Make authenticated requests to Turnkey API, such as listing user's wallets\n// User will be prompted to sign a message to authenticate the request\nconst walletsResponse = await walletClient.getWallets();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ApiKeyStamper with TurnkeyClient\nDESCRIPTION: Example demonstrating how to initialize an ApiKeyStamper instance and use it with the TurnkeyClient to make an authenticated request to Turnkey's whoami endpoint. It shows proper environment variable usage for API credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\n\n// Following best practices, define parameters in your .env file\nconst baseUrl = process.env.TURNKEY_BASE_URL || \"https://api.turnkey.com\";\nconst apiPublicKey = process.env.TURNKEY_API_PUBLIC_KEY;\nconst apiPrivateKey = process.env.TURNKEY_API_PRIVATE_KEY;\n\n// Initialize the API key stamper\nconst stamper = new ApiKeyStamper({ apiPublicKey, apiPrivateKey });\n\n// Initialize the Turnkey client\nconst tk = new TurnkeyClient({ baseUrl }, stamper);\n\n// Now you can make authenticated requests using the APIKeyStamper\nconst whoami = await tk.getWhoami({\n  organizationId: \"<Your Org ID>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent in TypeScript\nDESCRIPTION: This snippet outlines the structure for initializing OTP authentication. It includes user contact information, email customization options, and SMS template settings, allowing for flexible OTP implementations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"initOtpAuthIntent\": { \"contact\": \"string\"; \"emailCustomization\": { \"appName\": \"string\"; \"logoUrl\": \"string\"; \"magicLinkTemplate\": \"string\"; \"templateId\": \"string\"; \"templateVariables\": \"string\"; }; \"otpType\": \"string\"; \"sendFromEmailAddress\": \"string\"; \"sendFromEmailSenderName\": \"string\"; \"smsCustomization\": { \"template\": \"string\"; }; \"userIdentifier\": \"string\"; };\n```\n\n----------------------------------------\n\nTITLE: Running the Bitcoin Transaction Example\nDESCRIPTION: Command to start the main example script which verifies wallet addresses, fetches UTXOs, and guides through transaction creation. The example shows the interactive process of selecting UTXOs and specifying transaction details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-bitcoin/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Constructing ApiKeyStamper Instance\nDESCRIPTION: Creates a new instance of the ApiKeyStamper class using a configuration object. The config parameter is an instance of TApiKeyStamperConfig, which contains the necessary settings for the ApiKeyStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApiKeyStamper(config)\n```\n\n----------------------------------------\n\nTITLE: Initializing IframeStamper for Recovery and Auth in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the IframeStamper, inject a credential bundle, and create a new HTTP client for Recovery and Auth flows. It uses the @turnkey/iframe-stamper and @turnkey/http packages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.AUTH_IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM and returns the public key\nconst publicKey = await iframeStamper.init();\n\n// Injects a new credential in the iframe\nconst injected = await iframeStamper.injectCredentialBundle(credentialBundle);\n\n// New HTTP client able to sign with the credentials inside of the iframe\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  iframeStamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy Intent\nDESCRIPTION: This snippet establishes the intent structure for deleting a specific policy identified by its ID, necessary for compliance and policy management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePolicyIntent? \\n\\{ `policyId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePolicyIntent.policyId \\n`string` \\n\\n**Description** \\nUnique identifier for a given Policy.\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Turnkey Browser SDK\nDESCRIPTION: Generic request method for making API calls with typed request bodies and responses. Handles the underlying HTTP communication with the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nrequest<TBodyType, TResponseType>(url: string, body: TBodyType): Promise<TResponseType>\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key in TypeScript\nDESCRIPTION: A method for exporting a private key from the Turnkey system, accepting input parameters of type TExportPrivateKeyBody and returning a promise with an object result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexportPrivateKey(input: TExportPrivateKeyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session with TurnkeyBrowserClient\nDESCRIPTION: Demonstrates how to create a read-write session using TurnkeyBrowserClient with a target embedded key and session expiration time.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Logs in to create a read-write session, using a target embedded key and session expiration\nconst readWriteSession = await browserClient.loginWithReadWriteSession(\n  \"target-embedded-key\",\n  \"900\", // Session expires in 15 minutes\n  \"user-id\",\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticators - TypeScript SDK\nDESCRIPTION: The getAuthenticators function fetches a list of authenticators and returns them in a promise. It requires input that adheres to TGetAuthenticatorsBody. The function returns a Promise that resolves to an object containing an array of authenticators.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getAuthenticators(input): Promise<{ authenticators: object[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intents\nDESCRIPTION: Specifies intents associated with the signing of transactions. Each intent includes details such as the transaction type and the unsigned transaction data that needs to be signed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Client in Turnkey SDK\nDESCRIPTION: Shows how to create a wallet client in the Turnkey SDK using an Ethereum wallet. This client is used to interact with the Turnkey API, authenticating requests by using the wallet to stamp them.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst walletClient = turnkeySDK.walletClient(new EthereumWallet());\n```\n\n----------------------------------------\n\nTITLE: Requesting Data with TurnkeySDK Client in TypeScript\nDESCRIPTION: A generic method for making authenticated API requests to the Turnkey API with type parameters for request body and response. This is a base method inherited from TurnkeySDKClientBase.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nrequest<TBodyType, TResponseType>(url, body): Promise<TResponseType>\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Regtest P2TR Account Generator in TypeScript\nDESCRIPTION: This function creates a Bitcoin Regtest Pay-to-Taproot (P2TR) wallet account using a given path index. It returns a WalletAccount object, which likely contains address and derivation path information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinRegtestP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinRegtestP2TRAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Api Keys in TurnkeyBrowserClient\nDESCRIPTION: This TypeScript function, `stampGetApiKeys`, is responsible for creating a signed request to retrieve multiple API keys from the Turnkey system. It requires a `TGetApiKeysBody` object as input, which may include parameters for filtering or paginating the API keys. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, the signed request used to fetch the collection of API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetApiKeys**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:212](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L212)\n\n#### Parameters\n\n##### input\n\n`TGetApiKeysBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetApiKeys`](TurnkeyBrowserClient.mdx#stampgetapikeys)\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Import Component\nDESCRIPTION: Example of implementing the Import component for wallet import functionality with success and error handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Import } from \"@turnkey/sdk-react\";\nimport { toast } from \"sonner\";\n\nfunction ImportWallet() {\n  const handleImportSuccess = () => {\n    toast.success(\"Wallet successfully imported!\");\n  };\n\n  const handleImportError = (errorMessage: string) => {\n    toast.error(errorMessage);\n  };\n\n  return (\n    <Import\n      onHandleImportSuccess={handleImportSuccess}\n      onError={handleImportError}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Iframe Client with TurnkeyBrowserSDK\nDESCRIPTION: Creates a TurnkeyIframeClient instance by initializing an iframe stamper with the specified iframeUrl and optional element ID. Used for sensitive operations such as Email Recovery, Email Auth, and Wallet Import/Export flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst iframeClient = await turnkeySDK.iframeClient({\n  iframeContainer: document.getElementById(\"<iframe container id>\"),\n  iframeUrl: \"https://auth.turnkey.com\",\n});\nconst response = await iframeClient.injectCredentialBundle(\n  \"<Credential from Email>\",\n);\nif (response) {\n  await iframeClient.getWallets();\n}\n\n// this requires the developer to build a wrapper flow that can take user text input in their app and call the injectCredentialBundle function on the turnkey iframeClient\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey Provider in React\nDESCRIPTION: Setup of TurnkeyProvider component in a React application, including configuration for API base URL, organization ID, RPID, iframe URL, and server sign URL.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TurnkeyProvider } from \"@turnkey/sdk-react\";\n\nconst turnkeyConfig = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  // prefix with NEXT_PUBLIC for NextJS\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  // your application's domain\n  rpId: process.env.RPID,\n  iframeUrl: \"https://auth.turnkey.com\",\n  // The URL that the Turnkey SDK will send requests to for signing operations.\n  // This should be a backend endpoint that your application controls.\n  serverSignUrl: \"http://localhost:3000/api\"\n}\n\n<div className=\"App\">\n  <TurnkeyProvider config={turnkeyConfig}>\n    // Rest of app ...\n  </TurnkeyProvider>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing HPKE Encryption and Decryption in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @turnkey/crypto package to perform Hybrid Public Key Encryption (HPKE). It shows the process of generating key pairs, encrypting a plaintext message, and decrypting the ciphertext.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst senderKeyPair = generateP256KeyPair();\nconst receiverKeyPair = generateP256KeyPair();\n\nconst receiverPublicKeyUncompressed = uncompressRawPublicKey(\n  uint8ArrayFromHexString(receiverKeyPair.publicKey),\n);\n\nconst plainText = \"Hello, this is a secure message!\";\nconst plainTextBuf = textEncoder.encode(plainText);\nconst encryptedData = hpkeEncrypt({\n  plainTextBuf: plainTextBuf,\n  encappedKeyBuf: receiverPublicKeyUncompressed,\n  senderPriv: senderKeyPair.privateKey,\n});\n\n// Extract the encapsulated key buffer and the ciphertext\nconst encappedKeyBuf = encryptedData.slice(0, 33);\nconst ciphertextBuf = encryptedData.slice(33);\n\nconst decryptedData = hpkeDecrypt({\n  ciphertextBuf,\n  encappedKeyBuf: uncompressRawPublicKey(encappedKeyBuf),\n  receiverPriv: receiverKeyPair.privateKey,\n});\n\n// Convert decrypted data back to string\nconst decryptedText = new TextDecoder().decode(decryptedData);\n```\n\n----------------------------------------\n\nTITLE: Defining signCreateSubOrganization Function in TypeScript\nDESCRIPTION: Declaration of the signCreateSubOrganization function that creates a signed request for sub-organization creation. It takes an input object of type TCreateSubOrganizationInput and optional credential request options, returning a Promise with the signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signCreateSubOrganization: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining getActivity Intent Structure in TypeScript\nDESCRIPTION: This code snippet defines the structure of the getActivity function, which returns a Promise containing the activity data structure. It outlines the types and properties of the resulting activity object, which can include various intents such as create, delete, and approve actions pertaining to users and organizations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivity() => Promise<{ \n activity: { \n canApprove: boolean; \n canReject: boolean; \n createdAt: { \n nanos: string; \n seconds: string; \n }; \n failure: { \n code: number; \n details: object & object[]; \n message: string; \n }; \n fingerprint: string; \n id: string; \n intent: { \n acceptInvitationIntent: { \n authenticator: { \n attestation: { \n authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n clientExtensionResults: { \n appid: boolean; \n appidExclude: boolean; \n credProps: { rk: ...; }; \n }; \n id: string; \n rawId: string; \n response: { \n attestationObject: string; \n authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n clientDataJson: string; \n transports: ...[]; \n }; \n type: \"public-key\"; \n }; \n authenticatorName: string; \n challenge: string; \n userId: string; \n }; \n invitationId: string; \n userId: string; \n };\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Turnkey SDK\nDESCRIPTION: This code snippet defines numerous TypeScript interfaces and types for various operations in the Turnkey SDK. It includes definitions for intents (input parameters) and results (output data) for actions such as creating API keys, managing users, handling authentication, and working with wallets and private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUser.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n};\n\nimportWalletIntent: {\n  accounts: object[];\n  encryptedBundle: string;\n  userId: string;\n  walletName: string;\n};\n\ninitImportPrivateKeyIntent: {\n  userId: string;\n};\n\ninitImportWalletIntent: {\n  userId: string;\n};\n\ninitOtpAuthIntent: {\n  contact: string;\n  emailCustomization: {\n    appName: string;\n    logoUrl: string;\n    magicLinkTemplate: string;\n    templateId: string;\n    templateVariables: string;\n  };\n  otpType: string;\n  sendFromEmailAddress: string;\n  sendFromEmailSenderName: string;\n  smsCustomization: {\n    template: string;\n  };\n  userIdentifier: string;\n};\n\n// ... (many more interface definitions)\n\norganizationId: string;\n\nresult: {\n  acceptInvitationResult: {\n    invitationId: string;\n    userId: string;\n  };\n  activateBillingTierResult: {\n    productId: string;\n  };\n  createApiKeysResult: {\n    apiKeyIds: string[];\n  };\n  // ... (many more result definitions)\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Embedded Key in TypeScript\nDESCRIPTION: Method to create a new embedded key within the iframe. If a key already exists, it will return the existing key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninitEmbeddedKey(): Promise<null | string>\n```\n\n----------------------------------------\n\nTITLE: Defining createPolicies Function - TypeScript\nDESCRIPTION: The createPolicies function returns a Promise that resolves to an object containing various user activity capabilities, error handling structures, and multiple intents for user, organization, and policy management. It requires adherence to specific TypeScript configurations and type definitions provided in the function structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePolicies(`input`): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\")[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining signTransaction Function and Return Type\nDESCRIPTION: This snippet defines the `signTransaction` function, which accepts an input parameter and returns a Promise containing an object that includes various organizational and user management intents and parameters. Each intent has distinct requirements that determine how the transaction is processed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTransaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signTransaction = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_\n```\n\n----------------------------------------\n\nTITLE: Fetching Authenticator Details with TypeScript\nDESCRIPTION: This TypeScript function, `getAuthenticator`, sends a POST request to the `/public/v1/query/get_authenticator` endpoint to retrieve information about an authenticator. It requires an input parameter named `input` of type `TGetAuthenticatorInput`. The function returns a promise that resolves to an object containing various details like `aaguid`, `attestationType`, `authenticatorId`, `credential`, `model`, and `transports`. It is limited to processing on TypeScript environments supporting Promises.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getAuthenticator.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getAuthenticator**(\\\"input\\\"): \\\"Promise\\\"<\\\"{ \\\\\\\"authenticator\\\\\\\": { \\\\\\\"aaguid\\\\\\\": \\\"string\\\"; \\\\\\\"attestationType\\\\\\\": \\\"string\\\"; \\\\\\\"authenticatorId\\\\\\\": \\\"string\\\"; \\\\\\\"authenticatorName\\\\\\\": \\\"string\\\"; \\\\\\\"createdAt\\\\\\\": { \\\\\\\"nanos\\\\\\\": \\\"string\\\"; \\\\\\\"seconds\\\\\\\": \\\"string\\\"; }; \\\\\\\"credential\\\\\\\": { \\\\\\\"publicKey\\\\\\\": \\\"string\\\"; \\\\\\\"type\\\\\\\": \\\"\\\\\\\"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_API_KEY_P256\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_API_KEY_SECP256K1\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_API_KEY_ED25519\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\\\\\\\" | \\\\\\\"CREDENTIAL_TYPE_OAUTH_KEY_P256\\\\\\\"; }; \\\\\\\"credentialId\\\\\\\": \\\"string\\\"; \\\\\\\"model\\\\\\\": \\\"string\\\"; \\\\\\\"transports\\\\\\\": (\\\\\\\"\\\\\\\"AUTHENTICATOR_TRANSPORT_BLE\\\\\\\" | \\\\\\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\\\\\" | \\\\\\\"AUTHENTICATOR_TRANSPORT_NFC\\\\\\\" | \\\\\\\"AUTHENTICATOR_TRANSPORT_USB\\\\\\\" | \\\\\\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\\\\\")[]; \\\\\\\"updatedAt\\\\\\\": { \\\\\\\"nanos\\\\\\\": \\\"string\\\"; \\\\\\\"seconds\\\\\\\": \\\"string\\\"; }; }; }\\\"\\\"\\>\n```\n\n----------------------------------------\n\nTITLE: Turnkey Class Constructor\nDESCRIPTION: This is the constructor for the `Turnkey` class. It takes a `TurnkeySDKServerConfig` object as input and returns a `TurnkeyServerSDK` instance. The constructor is responsible for initializing the Turnkey SDK server with the provided configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/Turnkey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param config\n */\nconstructor(config: TurnkeySDKServerConfig): TurnkeyServerSDK\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletStamper with Solana\nDESCRIPTION: Complete example showing how to implement and use WalletStamper with a Solana wallet for Turnkey API authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/documents/docs.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Import the dependencies for the Solana\nimport { Keypair } from \"@solana/web3.js\";\nimport { decodeUTF8 } from \"tweetnacl-util\";\nimport nacl from \"tweetnacl\";\n\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { WalletStamper, SolanaWalletInterface } from \"@turnkey/wallet-stamper\";\n\nclass SolanaWallet implements SolanaWalletInterface {\n  keypair = Keypair.fromSecretKey(SOLANA_PRIVATE_KEY);\n  type = \"solana\" as const;\n\n  async signMessage(message: string): Promise<string> {\n    const messageBytes = decodeUTF8(message);\n    const signature = nacl.sign.detached(messageBytes, this.keypair.secretKey);\n    return Buffer.from(signature).toString(\"hex\");\n  }\n\n  recoverPublicKey(): string {\n    // Convert the base24 encoded Solana wallet public key (the one displayed in the wallet)\n    // into the ed25519 decoded public key\n    const ed25519PublicKey = Buffer.from(\n      this.keypair.publicKey.toBuffer(),\n    ).toString(\"hex\");\n    return ed25519PublicKey;\n  }\n}\n\n// Instantiate the WalletStamper with the SolanaWallet\nconst walletStamper = new WalletStamper(new SolanaWallet());\n\n// Instantiate the TurnkeyClient with the WalletStamper\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n\n// You're now ready to make requests to Turnkey's API 🎉\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Key Details - TypeScript SDK\nDESCRIPTION: The getPrivateKey function is implemented to fetch details of a specific private key. It requires an input based on TGetPrivateKeyBody and returns a Promise resolving to the private key's attributes such as curve and publicKey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getPrivateKey(input): Promise<{ privateKey: { ... }; }>\"\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/webauthn-stamper via pnpm\nDESCRIPTION: Command to install the @turnkey/webauthn-stamper package using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/webauthn-stamper\n```\n\n----------------------------------------\n\nTITLE: SDK Promise Return Type Definition in TypeScript\nDESCRIPTION: A complex Promise return type defining activity and intent structures with detailed metadata, authentication, and system-level information\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { nanos: string; seconds: string; };\n    failure: { code: number; details: object & object[]; message: string; };\n    fingerprint: string;\n    id: string;\n    intent: { ... }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Intent Types\nDESCRIPTION: This code defines a set of TypeScript types for various activity intents, including those for creating users, organizations, authenticators, wallets, and policies. Each intent type specifies the structure and properties required for that particular action, ensuring type safety and consistency when handling different activities within the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/rejectActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"Promise\"<\\{\n  `activity`: \\{\n    `canApprove`: `boolean`;\n    `canReject`: `boolean`;\n    `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\};\n    `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\};\n    `fingerprint`: `string`;\n    `id`: `string`;\n    `intent`: \\{\n      `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\};\n      `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\};\n      `activateBillingTierIntent`: \\{ `productId`: `string`; \\};\n      `approveActivityIntent`: \\{ `fingerprint`: `string`; \\};\n      `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\};\n      `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\};\n      `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\};\n      `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\};\n      `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\};\n      `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\};\n      `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\};\n      `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\};\n      `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\};\n      `createPoliciesIntent`: \\{ `policies`: `object`[]; \\};\n      `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\};\n      `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\};\n      `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\};\n      `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\};\n      `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\};\n      `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\};\n      `createReadOnlySessionIntent`: \\{\\};\n      `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\};\n      `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\};\n      `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\};\n      `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\};\n      `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\};\n      `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\};\n      `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\};\n      `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\};\n      `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\};\n      `createUsersIntent`: \\{ `users`: `object`[]; \\};\n      `createUsersIntentV2`: \\{ `users`: `object`[]; \\};\n      `createUsersIntentV3`: \\{ `users`: `object`[]; \\};\n      `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\};\n      `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\};\n      `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\};\n      `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\};\n      `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\};\n      `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\};\n      `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\};\n      `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\};\n      `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\};\n      `deletePolicyIntent`: \\{ `policyId`: `string`; \\};\n      `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\};\n      `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\};\n      `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\};\n      `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\};\n      `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\};\n      `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\};\n      `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\};\n      `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\};\n      `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\};\n      `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\};\n      `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\};\n      `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\};\n      `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" | \\\"ADDRESS_FORMAT_SEI\\\" | \\\"ADDRESS_FORMAT_XLM\\\" | \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" | \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" | \\\"ADDRESS_FORMAT_TON_V3R2\\\" | \\\"ADDRESS_FORMAT_TON_V4R2\\\" | \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" | \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`;\n\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the successful 200 response schema for signing raw payloads via the Turnkey public API service. Maps to the specific response structure of the sign_raw_payloads endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTSignRawPayloadsResponse = operations[\"PublicApiService_SignRawPayloads\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to create wallet accounts using the Turnkey SDK. It takes an input of type TCreateWalletAccountsBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateWalletAccounts(input: TCreateWalletAccountsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Organization in Turnkey SDK\nDESCRIPTION: Method for creating a sub-organization with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateSubOrganization(input: TCreateSubOrganizationBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TGetWalletAccountsResponse Type Alias Definition\nDESCRIPTION: Defines the type alias `TGetWalletAccountsResponse` using TypeScript's type system. It represents the schema of the 200 response from the `PublicApiService_GetWalletAccounts` operation.  This type is used to ensure type safety when working with the response from this API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletAccountsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"operations\\n  [\\\"PublicApiService_GetWalletAccounts\\\"]\\n  [\\\"responses\\\"]\\n  [\\\"200\\\"]\\n  [\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Creating API Keys TypeScript Function Definition\nDESCRIPTION: Complex function signature for creating API keys with extensive input type definitions, supporting multiple authentication and intent scenarios\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateApiKeys(`input`): Promise<{ activity: { ... }}>\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key in Turnkey SDK\nDESCRIPTION: This function exports a private key. It accepts a `TExportPrivateKeyBody` object as input and returns a Promise resolving to an object. It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> **exportPrivateKey**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1848](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1848)\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Intent Structure\nDESCRIPTION: This snippet details the intent structure for setting a payment method, specifying fields for card holder information, CVV, and card expiration details. It is necessary for managing payment details securely in the wallet management system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; }\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Sessions in TypeScript SDK\nDESCRIPTION: This function, 'stampCreateReadWriteSession', is used for creating read-write sessions, utilizing 'TCreateReadWriteSessionBody' and returning a Promise that may resolve to a TSignedRequest. It inherits from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateReadWriteSession**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Information in TypeScript\nDESCRIPTION: This method retrieves detailed information about an organization. It takes an optional input parameter and returns a Promise containing organization data, including features, invitations, policies, private keys, and user information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOrganization(input: TGetOrganizationBody = {}): Promise<{ organizationData: { features: object[]; invitations: object[]; name: string; organizationId: string; policies: object[]; privateKeys: object[]; rootQuorum: { threshold: number; userIds: string[]; }; tags: object[]; users: object[]; wallets: object[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions in SDK Browser Client in TypeScript\nDESCRIPTION: The `signTransaction` function takes an input of type TSignTransactionBody to sign transactions. It returns a promise resolving to an object, important for scenarios requiring transaction validation and authenticity, leveraging this signing utility.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **signTransaction**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:2465](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2465)\n\n#### Parameters\n\n##### input\n\n`TSignTransactionBody`\n\n#### Returns\n\n`Promise`<`object` & `object`>\n\n\n```\n\n----------------------------------------\n\nTITLE: Solana Token Transfer Policy Setup - Bash Command\nDESCRIPTION: Command to initialize and setup token transfer policy configuration with associated outputs showing transaction confirmations and account creation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm token-transfer-policy setup\n```\n\n----------------------------------------\n\nTITLE: Listing Private Keys with POST request - TypeScript\nDESCRIPTION: The getPrivateKeys function is used to retrieve a list of private keys from an organization. It takes an input parameter of type TGetPrivateKeysInput and returns a promise that resolves with an array of private key objects. The function sends a POST request to the specified API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getPrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getPrivateKeys(input: TGetPrivateKeysInput): Promise<{ privateKeys: object[]; }>{\n    const response = await fetch('/public/v1/query/list_private_keys', {\n        method: 'POST',\n        body: JSON.stringify(input),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    return response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Turnkey expressProxyHandler Method\nDESCRIPTION: This method returns an Express request handler. It takes a `TurnkeyProxyHandlerConfig` object as input, configuring the proxy behavior. The returned handler can then be used in an Express application to proxy requests to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/Turnkey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param config\n */\nexpressProxyHandler(config: TurnkeyProxyHandlerConfig): RequestHandler\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Sub-Organization in Turnkey SDK\nDESCRIPTION: Demonstrates how to use the getCurrentSubOrganization method to retrieve information about the user's current sub-organization from local storage. This is useful for obtaining the user's organization context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// retrieves users current sub organization\nconst subOrganization = await turnkeySDK.getCurrentSubOrganization();\n```\n\n----------------------------------------\n\nTITLE: Converting DER-encoded ECDSA Signature to Raw Format in TypeScript\nDESCRIPTION: This function converts an ASN.1 DER-encoded ECDSA signature to the raw format used for verification. It takes a DER-encoded signature as a string input and returns a Uint8Array containing the raw signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/fromDerSignature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfromDerSignature(derSignature: string): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Implementing Trading Policies with Turnkey\nDESCRIPTION: Example of policy implementation for ETH/WETH operations, showing both separate and combined policy definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/trading-runner/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait createPolicy(\n  \"Traders can use trading keys to wrap or unwrap ETH\",\n  \"EFFECT_ALLOW\",\n  `approvers.any(user, user.tags.contains('${traderTagId}'))`,\n  `private_key.tags.contains('${tradingTagId}') && eth.tx.to == '${WETH_TOKEN_GOERLI.address}' && eth.tx.data[0..10] in ['${DEPOSIT_SELECTOR}', '${WITHDRAW_SELECTOR}']`,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet with Asynchronous Intent Management in JavaScript\nDESCRIPTION: The `createWallet` function is designed to create a wallet and manages various user and organizational intents seamlessly. It uses promises to handle asynchronous execution. Dependencies include a JavaScript runtime that supports Promises. Input parameters are encapsulated in an object structure defining the wallet's configuration, while outputs include the wallet data and statuses of different intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateWallet(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createUsersIntent: { users: object[]; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteUsersIntent: { userIds: string[]; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; };\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Interface in Turnkey SDK\nDESCRIPTION: Demonstrates how to create a Turnkey SDK instance, initialize a wallet client with an Ethereum wallet, and retrieve the wallet interface. This is useful for accessing the full object representing the wallet used for request stamping.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst walletClient = turnkeySDK.walletClient(new EthereumWallet());\nconst wallet = await walletsClient.getWalletInterface();\n```\n\n----------------------------------------\n\nTITLE: Migration Changes for ethers v6 - Transaction Count\nDESCRIPTION: Example showing how to migrate transaction count retrieval from ethers v5 to v6. The getTransactionCount method is moved from signer to provider and requires an address parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nconst transactionCount = await connectedSigner.getTransactionCount();\n\n// after\n// first get the address\nconst address = await connectedSigner.getAddress()\n// then pass it in\nconst transactionCount = await connectedSigner.provider?.getTransactionCount(address);\n```\n\n----------------------------------------\n\nTITLE: Private Key Import Intent Type Definition\nDESCRIPTION: TypeScript interface for importing private keys with various address formats and curves. Includes encryption and user identification parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` | `\"ADDRESS_FORMAT_COMPRESSED\"` | `\"ADDRESS_FORMAT_ETHEREUM\"` | `\"ADDRESS_FORMAT_SOLANA\"` | `\"ADDRESS_FORMAT_COSMOS\"` | `\"ADDRESS_FORMAT_TRON\"` | `\"ADDRESS_FORMAT_SUI\"` | `\"ADDRESS_FORMAT_APTOS\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: createPolicies method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates policies. It takes a `TCreatePoliciesBody` object as input and returns a Promise that resolves to an object. It enables batch creation of security policies for fine-grained access control.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createPolicies(input: TurnkeySDKApiTypes.TCreatePoliciesBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreatePoliciesBody, object & object>(\n            `/turnkey/create_policies`,\n            input,\n            \"policies\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: React Native Demo App Details\nDESCRIPTION: This section describes the React Native demo application that demonstrates how to use Turnkey's JavaScript packages in a mobile environment. The app showcases authentication, wallet creation, exporting, and message signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/README.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Private Keys - TypeScript SDK\nDESCRIPTION: The getPrivateKeys function fetches a list of private keys from the server. It takes input of the type TGetPrivateKeysBody and returns a Promise containing an array of private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getPrivateKeys(input): Promise<{ privateKeys: object[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enumerations - TypeScript\nDESCRIPTION: Defines an enumeration for various activity types, such as CREATE_API_KEYS, CREATE_USERS, SIGN_TRANSACTION, among others. This allows for clear identification of different activities supported by the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | ...;\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Wallet Integration\nDESCRIPTION: Implementation of a Solana wallet interface for signing messages and managing public keys using TurnkeyClient\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keypair } from \"@solana/web3.js\";\nimport { decodeUTF8 } from \"tweetnacl-util\";\nimport nacl from \"tweetnacl\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { WalletStamper, SolanaWalletInterface } from \"@turnkey/wallet-stamper\";\n\nclass SolanaWallet implements SolanaWalletInterface {\n  keypair = Keypair.fromSecretKey(SOLANA_PRIVATE_KEY);\n  type = \"solana\" as const;\n\n  async signMessage(message: string): Promise<string> {\n    const messageBytes = decodeUTF8(message);\n    const signature = nacl.sign.detached(messageBytes, this.keypair.secretKey);\n    return Buffer.from(signature).toString(\"hex\");\n  }\n\n  async getPublicKey(): Promise<string> {\n    const ed25519PublicKey = Buffer.from(\n      this.keypair.publicKey.toBuffer(),\n    ).toString(\"hex\");\n    return ed25519PublicKey;\n  }\n}\n\nconst walletStamper = new WalletStamper(new SolanaWallet());\n\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n\nconst whoami = await client.getWhoami({\n  organizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID,\n});\n\nconst wallets = await client.getWallets({\n  organizationId: whoami.organizationId,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intent Structures\nDESCRIPTION: This snippet provides multiple definitions for intents related to signing transactions with parameters that specify transaction types and payload details. These are essential for enabling secure transaction operations based on user-selected signing options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; }\n```\n\n----------------------------------------\n\nTITLE: Defining recoverUser Function in TypeScript\nDESCRIPTION: The recoverUser function returns a Promise containing an object with various properties, such as activity, intent, and user details. It encapsulates functionalities related to user activities, intents for billing, authentication, and organization operations. Key parameters include user IDs, authenticator details, and various intents for managing user and organization operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/recoverUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"recoverUser(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \\\"cross-platform\\\" | \\\"platform\\\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \\\"cross-platform\\\" | \\\"platform\\\"; clientDataJson: string; transports: ...[]; }; type: \\\"public-key\\\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId...}\n```\n\n----------------------------------------\n\nTITLE: signGetWallets Function Definition\nDESCRIPTION: Defines the `signGetWallets` function which is responsible for requesting a WebAuthn assertion and returning a signed `GetWallets` request, prepared for submission to Turnkey. It takes a `TGetWalletsInput` object and optional `TurnkeyCredentialRequestOptions` as parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetWallets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signGetWallets**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>`\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key in TypeScript\nDESCRIPTION: Method to export a private key using the Turnkey Browser SDK. Requires input parameters for key export and returns a Promise with the exported key details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexportPrivateKey(input: TExportPrivateKeyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication Function Signature in TypeScript\nDESCRIPTION: Function signature for otpAuth that handles one-time password authentication. It accepts an input parameter and returns a Promise containing detailed activity information including approval status, timestamps, and various authentication intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/otpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuth(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* various intents... */ } } }>\n```\n\n----------------------------------------\n\nTITLE: Using Turnkey SDK in React Component\nDESCRIPTION: Demonstrates how to use the useTurnkey hook to access Turnkey utilities within a React component, including passkey and email authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTurnkey } from \"@turnkey/sdk-react\";\n\nfunction ExampleComponent() {\n  const { turnkey, passkeyClient, authIframeClient } = useTurnkey();\n\n  const loginWithPasskey = async () => {\n    // Creates a read only session with passkey\n    await passkeyClient?.login();\n  };\n\n  const initEmailAuth = async () => {\n    await turnkey?.serverSign(\"emailAuth\", [\n      {\n        email: \"<target user email>\",\n        targetPublicKey: authIframeClient.iframePublicKey,\n        organizationId: \"<target user suborg-id>\",\n      },\n    ]);\n  };\n\n  const loginWithIframe = async (credentialBundle: string) => {\n    await authIframeClient?.loginWithAuthBundle(credentialBundle); // Creates a read write session using a credential bundle returned from OTP Auth, Oauth, or Create Read Write session activities\n  };\n\n  return (\n    <div>\n      <button onClick={loginWithPasskey}>Login with Passkey</button>\n      <button onClick={() => initEmailAuth()}>Initialize Email Auth</button>\n    </div>\n  );\n}\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Creating Iframe Client in Turnkey\nDESCRIPTION: This method creates a `TurnkeyIframeClient` instance. It accepts `IframeClientParams` as input to configure the client, and returns a Promise that resolves to the newly created `TurnkeyIframeClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param params\n */\niframeClient(params: IframeClientParams): Promise<TurnkeyIframeClient>\n```\n\n----------------------------------------\n\nTITLE: Get Authenticators Method Definition - TypeScript\nDESCRIPTION: Method to retrieve authenticators list. Takes TGetAuthenticatorsBody as input and returns Promise with array of authenticator objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetAuthenticators(input: TGetAuthenticatorsBody): Promise<{ authenticators: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Logging in with Bundle via Email in Browser SDK\nDESCRIPTION: Logs in using a bundle sent to the user's email, typically used with an iframeStamper for authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithBundle(params: LoginWithBundleParams): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining signInitOtpAuth function in Turnkey SDK\nDESCRIPTION: This code snippet defines the `signInitOtpAuth` function, which takes an `input` of type `TInitOtpAuthInput` and optional `options` of type `TurnkeyCredentialRequestOptions`. It returns a Promise that resolves to a `SignedRequest` object. The function is used to request a WebAuthn assertion and returns a signed `InitOtpAuth` request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signInitOtpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signInitOtpAuth**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Signing User Tags Deletion Request - TypeScript\nDESCRIPTION: The signDeleteUserTags function requests a WebAuthn assertion and returns a signed DeleteUserTags request. It generates a promise that resolves to a SignedRequest type, which is necessary for securely sending deletion requests to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignDeleteUserTags(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Signing Solana Transaction with Turnkey\nDESCRIPTION: This method adds a signature to a Solana transaction using Turnkey. It requires a Solana transaction object (`Transaction` or `VersionedTransaction`) and a Solana address as input. Optionally, the organization ID can also be provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/solana/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [solana/src/index.ts:60](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/solana/src/index.ts#L60)\n *\n * This function takes a Solana transaction and adds a signature with Turnkey\n *\n * @param `tx`\n */\n\n/**\n * Transaction | VersionedTransaction object (native @solana/web3.js type)\n */\n\n/**\n * `string`\n *\n * Solana address (base58 encoded)\n */\n\n/**\n * `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with TypeScript\nDESCRIPTION: The function signGetActivities requests a WebAuthn assertion and returns a signed GetActivities request. It accepts input parameters of type TGetActivitiesInput and optional TurnkeyCredentialRequestOptions. The output is a promise resolving to a SignedRequest, which can be used to post to Turnkey. The function is defined in packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetActivities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetActivities(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining signUpdateUserTag Function TypeScript\nDESCRIPTION: The signUpdateUserTag function is designed to request a WebAuthn assertion and return a signed UpdateUserTag request. This function awaits an input object of type TUpdateUserTagInput and can take optional TurnkeyCredentialRequestOptions. It returns a promise that resolves to a SignedRequest. This function is defined in a TypeScript file within the specified package structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signUpdateUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signUpdateUserTag: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ApiKeyStamper with TurnkeyClient\nDESCRIPTION: Example showing how to initialize ApiKeyStamper with API keys and use it with TurnkeyClient to make an authenticated request to the whoami endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\n\n// Following best practices, define parameters in your .env file\nconst baseUrl = process.env.TURNKEY_BASE_URL || \"https://api.turnkey.com\";\nconst apiPublicKey = process.env.TURNKEY_API_PUBLIC_KEY;\nconst apiPrivateKey = process.env.TURNKEY_API_PRIVATE_KEY;\n\n// Initialize the API key stamper\nconst stamper = new ApiKeyStamper({ apiPublicKey, apiPrivateKey });\n\n// Initialize the Turnkey client\nconst tk = new TurnkeyClient({ baseUrl }, stamper);\n\n// Now you can make authenticated requests using the APIKeyStamper\nconst whoami = await tk.getWhoami({\n  organizationId: \"<Your Org ID>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Requests for Wallet Import Operations in TypeScript\nDESCRIPTION: Methods for generating signed requests to import private keys and wallets, as well as initialize the import process. These methods prepare the authentication for sensitive key operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportPrivateKey(input): Promise<undefined | TSignedRequest>\n\nstampImportWallet(input): Promise<undefined | TSignedRequest>\n\nstampInitImportPrivateKey(input): Promise<undefined | TSignedRequest>\n\nstampInitImportWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Create Private Key Tag in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a private key tag using the TurnkeyBrowserClient. It takes a `TCreatePrivateKeyTagBody` as input and returns a Promise that resolves to an object representing the created tag.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **createPrivateKeyTag**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1077](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1077)\n\n#### Parameters\n\n##### input\n\n`TCreatePrivateKeyTagBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createPrivateKeyTag`](TurnkeyBrowserClient.mdx#createprivatekeytag)\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction in Turnkey SDK (TS)\nDESCRIPTION: This method is responsible for signing a transaction using the Turnkey SDK. It takes a `TSignTransactionBody` object as input and returns a Promise that resolves to an object, representing the result of the transaction signing operation. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n> **signTransaction**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2274](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2274)\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Organization with Turnkey SDK TypeScript\nDESCRIPTION: This function facilitates the creation of a sub-organization by accepting `TCreateSubOrganizationBody` as input. It leverages the Turnkey SDK and returns a Promise with a combined object result, utilized within a larger organizational structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createSubOrganization**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion in TypeScript SDK\nDESCRIPTION: This code snippet documents the function signOtpAuth, which requests a WebAuthn assertion and returns a signed OtpAuth request. It takes an input parameter of type TOtpAuthInput and an optional options parameter of type TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest. Dependencies include proper types from Turnkey API. This functionality is defined at the specified path in the TypeScript SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signOtpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n> **signOtpAuth**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\\n\\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:3182](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L3182)\\n\\nRequest a WebAuthn assertion and return a signed `OtpAuth` request, ready to be POSTed to Turnkey.\\n\\nSee OtpAuth\n```\n\n----------------------------------------\n\nTITLE: Stamp Approval Activities in SDK Browser Client in TypeScript\nDESCRIPTION: The `stampApproveActivity` function allows activities to be approved, taking a TApproveActivityBody input, and returns a promise resolving with TSignedRequest. It is used within controlled environments to assure the integrity and approval status of activity operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampApproveActivity**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:802](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L802)\n\n#### Parameters\n\n##### input\n\n`TApproveActivityBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Email Authentication in TypeScript\nDESCRIPTION: Method for email-based authentication in the Turnkey Browser SDK. Accepts email authentication input and returns a Promise with authentication results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nemailAuth(input: TEmailAuthBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Sign Reject Activity Function in TypeScript\nDESCRIPTION: The signRejectActivity function requests a WebAuthn assertion and returns a signed RejectActivity request. It is designed to be POSTed to Turnkey servers. The input parameter requires a TRejectActivityInput type, while the optional options parameter accepts TurnkeyCredentialRequestOptions. The function returns a Promise resolving to a SignedRequest. This function is defined in the Turnkey SDK TypeScript services, under the public API fetcher.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRejectActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signRejectActivity: (input: TRejectActivityInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Fetching Authenticator Details in Turnkey SDK\nDESCRIPTION: A method to retrieve comprehensive information about a specific authenticator, including its ID, credentials, transports, and metadata. Requires input parameters defining the authenticator to query.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getAuthenticator.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAuthenticator: (input) => Promise<{ authenticator: { aaguid: string; attestationType: string; authenticatorId: string; authenticatorName: string; createdAt: { nanos: string; seconds: string; }; credential: { publicKey: string; type: string; }; credentialId: string; model: string; transports: string[]; updatedAt: { nanos: string; seconds: string; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Browser Client Types and Interfaces in TypeScript\nDESCRIPTION: This code snippet defines various types and interfaces used in the SDK browser client. It includes activity statuses, types, and result structures for different operations such as API key creation, user management, policy handling, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Authenticators in TypeScript\nDESCRIPTION: This method retrieves information about multiple authenticators. It takes an input parameter of type TGetAuthenticatorsBody and returns a Promise containing an array of authenticator objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAuthenticators(input: TGetAuthenticatorsBody): Promise<{ authenticators: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions and Payloads Intent Structures - TypeScript\nDESCRIPTION: This code sets the structure for signing raw transactions and payloads, including various encoding and hashing methods, which is essential for maintaining the integrity and authenticity of the data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype SignTransactionIntent = { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating Users in Turnkey SDK\nDESCRIPTION: Method for creating users with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUsers(input: TCreateUsersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex TypeScript Promise Return Type for TKHQ SDK\nDESCRIPTION: This snippet defines a TypeScript type representing the return structure of a Promise in the TKHQ SDK. It includes nested types for activities, authentications, and various organizational operations like creating users, policies, and wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` \\| `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_CZECH\"` \\| `\"MNEMONIC_LANGUAGE_FRENCH\"` \\| `\"MNEMONIC_LANGUAGE_ITALIAN\"` \\| `\"MNEMONIC_LANGUAGE_JAPANESE\"` \\| `\"MNEMONIC_LANGUAGE_KOREAN\"` \\| `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` \\| `\"ADDRESS_FORMAT_COMPRESSED\"` \\| `\"ADDRESS_FORMAT_ETHEREUM\"` \\| `\"ADDRESS_FORMAT_SOLANA\"` \\| `\"ADDRESS_FORMAT_COSMOS\"` \\| `\"ADDRESS_FORMAT_TRON\"` \\| `\"ADDRESS_FORMAT_SUI\"` \\| `\"ADDRESS_FORMAT_APTOS\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`;\n```\n\n----------------------------------------\n\nTITLE: Wallet Management and Account Intent\nDESCRIPTION: Featuring fields for wallet and account management such as unique IDs, mnemonic lengths, and human-readable names, this snippet supports wallet creation and account listing. It's suitable for environments needing secure wallet management with requirements for mnemonic constraints and unique identifier validation as inputs and outputs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"accounts\\\": \\\"object[]\\\",\\n  \\\"mnemonicLength\\\": \\\"number\\\",\\n  \\\"walletName\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining signSignTransaction Function\nDESCRIPTION: This code snippet defines the `signSignTransaction` function. It takes a `TSignTransactionInput` and optional `TurnkeyCredentialRequestOptions` as input. It returns a Promise that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signSignTransaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signSignTransaction**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Initializing User Email Recovery Function in JavaScript\nDESCRIPTION: This JavaScript function, `initUserEmailRecovery`, is designed to initialize the recovery of a user's email. It returns a Promise featuring a comprehensive structure capturing numerous activities, intents, and user interactions. There are no explicit dependencies specified beyond the assumed JavaScript runtime, but advanced usage may rely on integrations with services for key management, user authentication, and email processing via various intents. The inputs and outputs are highly structured, involving nested objects that represent user activities and interactions within an organization. The function leads to complex branching and requires understanding of each intent's context, such as user creation, organization management, and key handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst initUserEmailRecovery: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];}\n```\n\n----------------------------------------\n\nTITLE: Authentication Types - TypeScript Interface Definitions\nDESCRIPTION: Defines TypeScript interfaces for authentication-related types including authenticator data, credentials, and transport methods. These types are used for WebAuthn and security key authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1Authenticator {\n  aaguid: string;\n  attestationType: string;\n  authenticatorId: string;\n  authenticatorName: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  credential: definitions[\"externaldatav1Credential\"];\n  credentialId: string;\n  model: string;\n  transports: definitions[\"v1AuthenticatorTransport\"][];\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadBody Type Alias Definition\nDESCRIPTION: This snippet defines the `TSignRawPayloadBody` type alias. It represents the structure expected for the body of the `PublicApiService_SignRawPayload` operation, specifically for the `POST /public/v1/submit/sign_raw_payload` endpoint. The type is derived from the automatically generated API definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TSignRawPayloadBody\n *\n * > **TSignRawPayloadBody** = `operations`\\[`\"PublicApiService_SignRawPayload\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:65100\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing addUserAuth Method in TurnkeyBrowserClient\nDESCRIPTION: Adds or updates authentication factors for an end user. This method allows adding phone numbers, emails, authenticators, OAuth providers, and API keys, with all operations executed in parallel when multiple parameters are provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\naddUserAuth(params): Promise<any[]> {\n  Defined in: [packages/sdk-browser/src/\\__clients\\__/browser-clients.ts:541](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L541)\n\n  Adds or updates authentication factors for an end user.\n\n  This function allows selectively adding:\n  - Phone number\n  - Email\n  - Authenticators\n  - OAuth providers\n  - API keys\n\n  All additions/updates are executed in parallel if multiple\n  parameters are provided.\n\n  #### Parameters\n\n  ##### params\n\n  `AddUserAuthParams`\n\n  A structured object containing all the addition/update parameters\n\n  #### Returns\n\n  `Promise`\\<`any`[]\\>\n\n  A promise that resolves to an array of results from each addition or update\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Transaction Intent Structure - JSON\nDESCRIPTION: This snippet defines the structure for signing a transaction. It includes parameters for the private key ID, transaction type, and the unsigned transaction data. This structure is crucial for completing secure transactions within the wallet framework.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"signTransactionIntent\": { \"privateKeyId\": \"string\", \"type\": \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\", \"unsignedTransaction\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enums in TypeScript\nDESCRIPTION: Defines enums for activity status and types in the Turnkey SDK. These enums represent the possible states and operations for activities within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Function Signature: deleteSubOrganization\nDESCRIPTION: Type definition for deleteSubOrganization function that deletes a sub-organization. Returns a Promise containing activity details including approval status, timestamps, and various intent types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteSubOrganization(input): Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication\nDESCRIPTION: Performs One-Time Password authentication. Takes a TOtpAuthBody input parameter and returns a Promise with object data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuth(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload\nDESCRIPTION: Asynchronous method for signing a raw payload with a specific input body, returning a Promise with the signed payload response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayload(input: TSignRawPayloadBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining exportWallet Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type for the exportWallet function. It's a constant function that takes an input and returns a Promise with a complex object structure containing wallet and activity information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst exportWallet: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... detailed intent object ... */ }; /* ... more properties ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Creating API Only Users Function Interface\nDESCRIPTION: Function interface definition for createApiOnlyUsers that handles creation of API-only user accounts. The function accepts an input parameter and returns a Promise containing detailed activity information including approval status, timestamps, and various authentication intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createApiOnlyUsers(input): Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts Using API\nDESCRIPTION: Outlines the endpoint to POST data for creating wallet accounts by deriving additional addresses using an existing wallet. It requires an input of type `TCreateWalletAccountsInput`, defining necessary fields and expected response structure. The endpoint is essential for financial operations needing new address generation based on existing account infrastructure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createWalletAccounts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`POST /public/v1/submit/create_wallet_accounts`\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Type Definitions\nDESCRIPTION: Type definitions for email authentication intent including customization options, expiration settings, and encryption parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmailAuthIntent {\n  apiKeyName?: string;\n  email: string;\n  emailCustomization?: {\n    appName?: string;\n    logoUrl?: string;\n    magicLinkTemplate?: string;\n    templateId?: string;\n    templateVariables?: string;\n  };\n  expirationSeconds?: string;\n  invalidateExisting?: boolean;\n  sendFromEmailAddress?: string;\n  sendFromEmailSenderName?: string;\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting a WebAuthn assertion - TypeScript\nDESCRIPTION: The signImportWallet function requests a WebAuthn assertion and returns a signed ImportWallet request. It requires an input of type TImportWalletInput and optionally accepts TurnkeyCredentialRequestOptions. The function returns a promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signImportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signImportWallet(input: TImportWalletInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details here...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Recovery and Auth with IframeStamper\nDESCRIPTION: Demonstrates how to initialize IframeStamper, inject credential bundles, and create an HTTP client for Recovery and Auth flows. The code shows setup of iframe container and integration with TurnkeyClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.AUTH_IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM and returns the public key\nconst publicKey = await iframeStamper.init();\n\n// Injects a new credential in the iframe\nconst injected = await iframeStamper.injectCredentialBundle(credentialBundle);\n\n// New HTTP client able to sign with the credentials inside of the iframe\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  iframeStamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Message with Turnkey\nDESCRIPTION: This method signs a message using Turnkey. It takes a `Uint8Array` representing the message to be signed, along with a Solana address. The organization ID is an optional parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/solana/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [solana/src/index.ts:83](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/solana/src/index.ts#L83)\n *\n * This function takes a message and returns it after being signed with Turnkey\n *\n * @param `message`\n */\n\n/**\n * The message to sign (Uint8Array)\n */\n\n/**\n * `string`\n *\n * Solana address (base58 encoded)\n */\n\n/**\n * `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Signing Email Authentication Requests with WebAuthn in TypeScript\nDESCRIPTION: This TypeScript function, `signEmailAuth`, requests a WebAuthn assertion to create a signed EmailAuth request using the Turnkey API. It returns a Promise resolving to a SignedRequest, which can be POSTed to Turnkey. Dependencies include specific input types such as TEmailAuthInput and optional TurnkeyCredentialRequestOptions. The function operates asynchronously and expects carefully structured input to generate valid signed requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signEmailAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction signEmailAuth(input: TEmailAuthInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> { \n  // Implementation here \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Client with TurnkeyBrowserSDK\nDESCRIPTION: Creates a TurnkeyWalletClient instance, taking a wallet that implements the WalletInterface class. The client authenticates requests by using the wallet to stamp the requests and can proxy requests to a server when serverSignUrl is included.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst walletClient = turnkeySDK.walletClient(new EthereumWallet());\n```\n\n----------------------------------------\n\nTITLE: Generating Signed WebAuthn Initialization Requests in TypeScript SDK\nDESCRIPTION: The `signInitImportWallet` function requests a WebAuthn assertion and returns a signed `InitImportWallet` request. This TypeScript SDK function requires an input parameter of type `TInitImportWalletInput` and accepts optional `TurnkeyCredentialRequestOptions`. The function returns a `Promise` that resolves to a `SignedRequest` object. The function is defined within the TypeScript file located in the `packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts`. This functionality is essential for integration with Turnkey's API for wallet import processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signInitImportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signInitImportWallet**(`input`, `options`?): `Promise`\\u003c[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\u003e\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:2992](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2992)\n\nRequest a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Proxy Handler\nDESCRIPTION: This snippet creates a proxy handler for Next.js applications, forwarding API requests to the Turnkey API server and automatically signing specific user actions with the root organization's credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure the Next.js handler with allowed methods\nconst turnkeyProxyHandler = turnkey.nextProxyHandler({\n  allowedMethods: [\"createSubOrganization\", \"emailAuth\", \"getSubOrgIds\"],\n});\n\nexport default turnkeyProxyHandler;\n\n// this will sign requests made with the client-side `serverSign` function with the root organization's API key for the allowedMethods in the config\n```\n\n----------------------------------------\n\nTITLE: Example Usage of createAccount with TurnkeyClient\nDESCRIPTION: Demonstrates how to create a Viem custom account using the TurnkeyClient with API key authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/viem/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpClient = new TurnkeyClient(\n  {\n    baseUrl: \"https://api.turnkey.com\",\n  },\n  // This uses API key credentials.\n  // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:\n  // new WebauthnStamper({...options...})\n  new ApiKeyStamper({\n    apiPublicKey: \"...\",\n    apiPrivateKey: \"...\",\n  }),\n);\n\n// Create the Viem custom account\nconst turnkeyAccount = await createAccount({\n  client: httpClient,\n  organizationId: \"...\",\n  signWith: \"...\",\n  // optional; will be fetched from Turnkey if not provided\n  ethereumAddress: \"...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Key/Wallet Export with IframeStamper\nDESCRIPTION: Shows the implementation of wallet export functionality using IframeStamper. Includes initialization, bundle injection, and display handling for showing wallet seedphrase to users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.EXPORT_IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM and returns the public key\nconst publicKey = await iframeStamper.init();\n\n// Injects a bundle containing the encrypted wallet seedphrase into the iframe\n// `exportBundle` is the response from requesting ACTIVITY_TYPE_EXPORT_WALLET\nconst injected = await iframeStamper.injectWalletExportBundle(exportBundle);\n\n// If the bundle is successfully injected, the iframe is now displaying the\n// wallet seedphrase to the user\nif (injected !== true) {\n  throw new Error(\"unexpected error while injecting export bundle\");\n}\n\n// Display the iframe to the user with their seedphrase.\nsetIframeDisplay(\"block\");\n```\n\n----------------------------------------\n\nTITLE: Fetching User Details via API in TypeScript\nDESCRIPTION: The `getUser` function aims to fetch and return detailed information about a user in a structured format. It requires an input of type `TGetUserInput` and returns a Promise containing user details such as their API keys, authentication methods, creation and update timestamps, email, ID, name, phone number, and associated tags. This function relies on a POST request to the endpoint `/public/v1/query/get_user`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getUser**(`input`): `Promise`\\<\\{ `user`: \\{ `apiKeys`: `object`[]; `authenticators`: `object`[]; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `oauthProviders`: `object`[]; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTags`: `string`[]; \\}; \\}\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:574](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L574)\n\nGet User\n\nGet details about a User\n\n`POST /public/v1/query/get_user`\n\n## Parameters\n\n### input\n\n[`TGetUserInput`](../type-aliases/TGetUserInput.mdx)\n\n## Returns\n\n`Promise`\\<\\{ `user`: \\{ `apiKeys`: `object`[]; `authenticators`: `object`[]; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `oauthProviders`: `object`[]; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTags`: `string`[]; \\}; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for initializing One-Time Password (OTP) authentication. Takes input parameters related to OTP setup and returns a Promise that resolves to an object with initialization result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuth(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining WalletAccount Interface Properties\nDESCRIPTION: Interface that specifies configuration details for blockchain wallet accounts, including address format, cryptographic curve, derivation path, and path format\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/interfaces/WalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WalletAccount {\n  addressFormat: string;\n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n  pathFormat: \"PATH_FORMAT_BIP32\";\n  path: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Turnkey API Key Account in TypeScript\nDESCRIPTION: Generates a custom account with cryptographic signing capabilities using a Turnkey API key configuration. Returns an object with address, public key, and various signing methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/createApiKeyAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateApiKeyAccount(config: TApiKeyAccountConfig): Promise<{\n  address: `0x${string}`,\n  experimental_signAuthorization: (parameters) => Promise<SignAuthorizationReturnType>,\n  nonceManager: NonceManager,\n  publicKey: `0x${string}`,\n  sign: (parameters) => Promise<`0x${string}`>,\n  signMessage: (__namedParameters) => Promise<`0x${string}`>,\n  signTransaction: <serializer, transaction>(transaction, options?) => Promise<...>,\n  signTypedData: <typedData, primaryType>(parameters) => Promise<`0x${string}`>,\n  source: string,\n  type: \"local\"\n}>\n```\n\n----------------------------------------\n\nTITLE: Function Declaration - signWithApiKey TypeScript Definition\nDESCRIPTION: Type definition for the signWithApiKey function that handles API key signing. Takes an input object containing content, privateKey, and publicKey strings, and returns a Promise resolving to a string signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/index/functions/signWithApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignWithApiKey(input): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Connecting a TurnkeySigner with an External Provider in JavaScript\nDESCRIPTION: This code demonstrates how to initialize a TurnkeySigner instance and connect it to an external provider like Infura. The TurnkeySigner supports signTransaction, signMessage, and signTypedData operations, but requires the developer to provide and connect their own provider.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/documents/docs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize a Turnkey Signer\nconst turnkeySigner = new TurnkeySigner({\n  ...\n});\n\n// Bring your own provider (such as Alchemy or Infura: https://docs.ethers.org/v6/api/providers/)\nconst network = \"goerli\";\nconst provider = new ethers.providers.InfuraProvider(network);\nconst connectedSigner = turnkeySigner.connect(provider);\n```\n\n----------------------------------------\n\nTITLE: Creating Passkeys in React Native with @turnkey/react-native-passkey-stamper\nDESCRIPTION: The createPasskey function creates a passkey and returns authenticator parameters including attestation object, client data JSON, credential ID, and supported transports. It accepts a TPasskeyRegistrationConfig and optional parameters for platform or security key preferences.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/functions/createPasskey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**createPasskey**(`config`, `options`?): `Promise`<{ `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }>\n```\n\n----------------------------------------\n\nTITLE: Constructing IframeStamper in TypeScript\nDESCRIPTION: Creates a new instance of IframeStamper without inserting the iframe into the DOM. To insert it, the init() method must be called afterwards.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/IframeStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IframeStamper(config)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Parameters in TypeScript\nDESCRIPTION: The `TCreateAuthenticatorsBody` type alias combines the body parameters required by the `PublicApiService_CreateAuthenticators` operation with additional `commandOverrideParams`. This definition allows the SDK to correctly type the API request bodies when creating authenticators, ensuring proper structure and data integrity. It requires TypeScript and relevant type definitions from the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TCreateAuthenticatorsBody\" = `operations`\\[`\\\"PublicApiService_CreateAuthenticators\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"parameters\\\"`\\] & `commandOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Serializing ECDSA Signature in TypeScript\nDESCRIPTION: The function `serializeSignature` takes an ECDSA signature object and serializes its components `r`, `s`, and `v` into a single string prefixed with `0x`. This is used for transforming the signature data to a format suitable for blockchain operations. The function returns a string in the format `0x${string}`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/serializeSignature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"function serializeSignature(sig: { r: string; s: string; v: string; }): string { \\n  // Code implementation to serialize the signature\\n  return `0x${sig.r}${sig.s}${sig.v}`;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags with Turnkey SDK TypeScript\nDESCRIPTION: This function manages the deletion of private key tags using `TDeletePrivateKeyTagsBody` as input. It returns a Promise of a combined object, facilitating key management improvement through tag operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deletePrivateKeyTags**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts in TypeScript\nDESCRIPTION: The `createWalletAccounts` function establishes new accounts within a wallet by accepting an input of type `TCreateWalletAccountsBody`. It returns a Promise that resolves to an object detailing the created wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ncreateWalletAccounts(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Login with Auth Bundle Implementation in TypeScript\nDESCRIPTION: Method to login using an existing auth bundle that enables both read and write requests. Takes a credential bundle string and expiration time in seconds.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithAuthBundle(credentialBundle: string, expirationSeconds: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetActivitiesResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting activities, containing an array of Activity objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetActivitiesResponse {\n  activities: definitions[\"v1Activity\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Signed Wallets - TypeScript\nDESCRIPTION: The function signGetWallets takes input of type TGetWalletsInput and optionally TurnkeyCredentialRequestOptions to return a signed GetWallets request. This signed request, encapsulated in a Promise, is intended for submission to the Turnkey API to retrieve wallet information securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetWallets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetWallets(input, options?) {\n    return new Promise<SignedRequest>((resolve, reject) => {\n        // Logic to generate signed request\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Stamp Requests for Authentication Operations in TypeScript\nDESCRIPTION: Methods that prepare signed requests for authentication-related operations like deleting authenticators, deleting OAuth providers, and performing email authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteAuthenticators(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteOauthProviders(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampEmailAuth(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: createAuthenticators method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates authenticators. It takes a `TCreateAuthenticatorsBody` object as input and returns a Promise that resolves to an object. This is used for setting up authentication methods within Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createAuthenticators(input: TurnkeySDKApiTypes.TCreateAuthenticatorsBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateAuthenticatorsBody, object & object>(\n            `/turnkey/create_authenticators`,\n            input,\n            \"authenticators\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticators with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampDeleteAuthenticators` function requires an input of type `TDeleteAuthenticatorsBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is used to remove authenticators associated with a user or organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampDeleteAuthenticators(input: TDeleteAuthenticatorsBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticator using TypeScript\nDESCRIPTION: The 'stampGetAuthenticator' function fetches an authenticator based on the input parameter of type 'TGetAuthenticatorBody'. It returns a Promise resolving to either 'undefined' or a 'TSignedRequest'. This method is inherited from the 'TurnkeyBaseClient' class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetAuthenticator**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetAuthenticatorBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining User Account Recovery Intent Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for user email recovery intents, focusing on the required parameters such as email address, expiration time, and target public key for recovery processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"initUserEmailRecoveryIntent\": { \"email\": \"string\"; \"emailCustomization\": { \"appName\": \"string\"; \"logoUrl\": \"string\"; \"magicLinkTemplate\": \"string\"; \"templateId\": \"string\"; \"templateVariables\": \"string\"; }; \"expirationSeconds\": \"string\"; \"targetPublicKey\": \"string\"; };\n```\n\n----------------------------------------\n\nTITLE: Running the Deployment Script\nDESCRIPTION: Command to start the script that will compile and deploy the smart contract using Turnkey for signing transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/deployer/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Authentication Intent Definitions\nDESCRIPTION: Type definitions for authentication-related intents including OTP, OAuth, and email recovery\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  initOtpAuthIntent: {\n    contact: string;\n    emailCustomization: {\n      appName: string;\n      logoUrl: string;\n      magicLinkTemplate: string;\n    };\n    otpType: string;\n    userIdentifier: string;\n  },\n  oauthIntent: {\n    apiKeyName: string;\n    expirationSeconds: string;\n    invalidateExisting: boolean;\n    targetPublicKey: string;\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Current User Session in Turnkey\nDESCRIPTION: This method attempts to retrieve a read-enabled `TurnkeyBrowserClient` instance if a valid user session exists. The session is identified by a session header obtained from a prior successful `login` call. It returns a Promise that resolves to a `TurnkeyBrowserClient` if a session is active, or `undefined` otherwise.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * If there is a valid, current user session, this will return a read-enabled TurnkeyBrowserClient that can make read requests to Turnkey without additional authentication. This is powered by a session header resulting from a prior successful `login` call.\n */\ncurrentUserSession(): Promise<undefined | TurnkeyBrowserClient>\n```\n\n----------------------------------------\n\nTITLE: Importing Private Key with importPrivateKey()\nDESCRIPTION: Method to import a private key into the Turnkey SDK. Takes an input parameter with key details and returns a promise with the import result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimportPrivateKey(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Updating Private Key Tags Method\nDESCRIPTION: Method for updating private key tags using TUpdatePrivateKeyTagBody parameters. Returns a Promise resolving to a composite object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePrivateKeyTag(`input`): `Promise`<`object` & `object`>\n```\n\n----------------------------------------\n\nTITLE: Generating Signed Private Keys Request with WebAuthn\nDESCRIPTION: Creates a signed request for retrieving private keys using WebAuthn assertion. Requires input parameters for key retrieval and optional credential request options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetPrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetPrivateKeys(input: TGetPrivateKeysInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Logging in with a wallet in JavaScript\nDESCRIPTION: Demonstrates how to use the loginWithWallet method of TurnkeyBrowserClient to log in with an existing wallet like Metamask and create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\nconst iframeClient = await turnkeySDK.iframeClient();\n\n// Login with a wallet to create a read-write session\nconst session = await browserClient.loginWithWallet({\n  sessionType: \"READ_WRITE\",\n  iframeClient: iframeClient,\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Organization Feature in Turnkey SDK\nDESCRIPTION: The `signSetOrganizationFeature` function is used to request a WebAuthn assertion and construct a signed `SetOrganizationFeature` request. This request is then ready to be sent to the Turnkey service. It utilizes `TSetOrganizationFeatureInput` for the input and `TurnkeyCredentialRequestOptions` for additional options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signSetOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See SetOrganizationFeature\n */\n> **signSetOrganizationFeature**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Configurations - TypeScript SDK\nDESCRIPTION: The getOrganizationConfigs function accesses configuration settings of an organization. It takes input based on the TGetOrganizationConfigsBody type and returns a Promise with configuration details such as features and quorum.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getOrganizationConfigs(input): Promise<{ configs: { ... }; }>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Key/Wallet Import with IframeStamper\nDESCRIPTION: Demonstrates wallet import process using IframeStamper, including initialization, import bundle injection, and handling of encrypted seedphrase input from users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.IMPORT_IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM\nawait iframeStamper.init();\n\n// Injects a bundle containing the secure enclave's public key into the iframe's local storage\n// `importBundle` is the response from requesting ACTIVITY_TYPE_INIT_IMPORT_WALLET\nconst injected = await iframeStamper.injectImportBundle(importBundle);\n\nif (injected !== true) {\n  throw new Error(\"unexpected error while injecting import bundle\");\n}\n\n// Display the text input that the user can enter their seedphrase into\nsetIframeDisplay(\"block\");\n\n// Once the user has entered their seedphrase, trigger this call to the iframe that\n// 1) encrypts their seedphrase using the secure enclave's public key from the previous step\n// 2) sends this ciphertext and a public key generated by the client to your page\nconst encryptedBundle = await iframeStamper.extractWalletEncryptedBundle();\n\n// Now you can pass this encryptedBundle as a request to ACTIVITY_TYPE_IMPORT_WALLET.\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session in Browser SDK\nDESCRIPTION: Generates a read-write session by inferring the current user's organization ID and target userId, compatible with iframeStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithReadWriteSession(targetEmbeddedKey: string, expirationSeconds: string = DEFAULT_SESSION_EXPIRATION_IN_SECONDS, userId?: string): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Signing Multiple Raw Payloads\nDESCRIPTION: Asynchronous method for signing multiple raw payloads simultaneously with a specific input body, returning a Promise with the signed payloads response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloads(input: TSignRawPayloadsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining exportWallet Method in TypeScript\nDESCRIPTION: Method for exporting wallets that takes a TExportWalletBody input and returns a Promise containing response objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexportWallet(input: TExportWalletBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Fetching Authenticators using TypeScript\nDESCRIPTION: This code snippet defines a function to retrieve authenticator details for a user through an HTTP POST request to the Turnkey API. It returns a promise resolving to an object containing a list of authenticators. The function requires a properly formatted input that conforms to the TGetAuthenticatorsInput type alias. The function operates asynchronously and expects to be used in an environment that supports promises and JSON-based HTTP communication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAuthenticators(input): Promise<{ authenticators: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Creating Wallets in TypeScript SDK\nDESCRIPTION: The 'stampCreateWallet' function allows the creation of wallets using 'TCreateWalletBody'. It returns a Promise that may resolve to a TSignedRequest and inherits its mechanics from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateWallet**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Session with TurnkeyBrowserClient\nDESCRIPTION: Example of using TurnkeyBrowserClient to create a read-only session and store it in local storage.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Logs in to create a read-only session, storing the session in local storage\nconst readOnlySession = await browserClient.login({ organizationId: \"org-id\" });\n```\n\n----------------------------------------\n\nTITLE: Signing DeletePolicy Request with WebAuthn in TypeScript\nDESCRIPTION: This function, `signDeletePolicy`, is designed to request a WebAuthn assertion and produce a signed DeletePolicy request. It uses Typescript as the programming language. The function returns a promise that resolves with a SignedRequest object suitable for HTTP POST to Turnkey. Required dependencies include `TDeletePolicyInput` for the input parameter and `TurnkeyCredentialRequestOptions` for optional configurations. The expected input includes an object conforming to the TDeletePolicyInput structure, with optional configuration options supplied as TurnkeyCredentialRequestOptions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeletePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signDeletePolicy**(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:2300](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2300)\n\nRequest a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n\nSee DeletePolicy\n\n## Parameters\n\n### input\n\n[`TDeletePolicyInput`](../type-aliases/TDeletePolicyInput.mdx)\n\n### options?\n\n`TurnkeyCredentialRequestOptions`\n\n## Returns\n\n`Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Enumerations in TypeScript\nDESCRIPTION: Defines comprehensive enumerations for activity statuses and types, covering a wide range of authentication, authorization, and management operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | ... (many more activity types);\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Wallet Public Key as API Key Authenticator\nDESCRIPTION: TypeScript code demonstrating how to add a Solana wallet public key as an API key authenticator using the TurnkeyClient\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKeyStamper = new ApiKeyStamper({\n  apiPublicKey: process.env.API_PUBLIC_KEY ?? \"\",\n  apiPrivateKey: process.env.API_PRIVATE_KEY ?? \"\",\n});\n\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, apiKeyStamper);\n\nconst activityPoller = createActivityPoller({\n  client,\n  requestFn: client.createApiKeys,\n});\n\nconst mockWallet = new MockSolanaWallet();\n\nconst publicKey = mockWallet.recoverPublicKey();\n\nconst userId = \"f4a5e6b4-3b9c-4f69-b7f6-9c2f456a4d23\";\n\nconst curveType = \"API_KEY_CURVE_ED25519\";\n\nconst result = activityPoller({\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\",\n  timestampMs: new Date().getTime().toString(),\n  organizationId: \"acd0bc97-2af5-475b-bc34-0fa7ca3bdc75\",\n  parameters: {\n    apiKeys: [\n      {\n        apiKeyName: \"solana-wallet\",\n        publicKey,\n        curveType,\n      },\n    ],\n    userId,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WalletAccount Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a WalletAccount object, including properties like address, addressFormat, createdAt, curve, organizationId, path, pathFormat, updatedAt, walletAccountId, and walletId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WalletAccount {\n  address: string;\n  addressFormat: definitions[\"v1AddressFormat\"];\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  curve: definitions[\"v1Curve\"];\n  organizationId: string;\n  path: string;\n  pathFormat: definitions[\"v1PathFormat\"];\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n  walletAccountId: string;\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: createReadWriteSession method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates a read-write session. It takes a `TCreateReadWriteSessionBody` object as input and returns a Promise that resolves to an object. This creates a session with full access rights for performing both read and write operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createReadWriteSession(input: TurnkeySDKApiTypes.TCreateReadWriteSessionBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateReadWriteSessionBody, object & object>(\n            `/turnkey/create_read_write_session`,\n            input,\n            \"session\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Details with Turnkey SDK\nDESCRIPTION: A method to retrieve comprehensive wallet information including creation timestamp, export/import status, and wallet identification details. Requires a valid wallet input parameter conforming to TGetWalletInput type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetWallet(input: TGetWalletInput): Promise<{ wallet: { \n  createdAt: { nanos: string; seconds: string; };\n  exported: boolean;\n  imported: boolean;\n  updatedAt: { nanos: string; seconds: string; };\n  walletId: string;\n  walletName: string;\n} }>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Ethereum Accounts in TypeScript\nDESCRIPTION: This snippet defines a constant, DEFAULT_ETHEREUM_ACCOUNTS, which is an array of WalletAccount. This is crucial for handling default Ethereum account configurations within the Turnkey SDK. No external dependencies are explicitly required other than the WalletAccount interface. It ensures that default accounts are readily accessible and managed in a structured manner.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_ETHEREUM_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_ETHEREUM_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts with Turnkey SDK TypeScript\nDESCRIPTION: This function facilitates the creation of wallet accounts, needing `TCreateWalletAccountsBody` as input. It yields a Promise of a combined object, forming part of an integrated financial service framework in Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createWalletAccounts**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining the stampUpdatePrivateKeyTag Method in TypeScript\nDESCRIPTION: Method declaration for stampUpdatePrivateKeyTag that updates a private key tag and returns a promise with the signed request. Takes a TUpdatePrivateKeyTagBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_122\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdatePrivateKeyTag(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing Iframe Client in Turnkey SDK\nDESCRIPTION: Demonstrates the creation of an iframe client in the Turnkey SDK. This client is used for sensitive operations like storing credentials and facilitating wallet import/export through iframes hosted by Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst iframeClient = await turnkeySDK.iframeClient({\n  iframeContainer: document.getElementById(\"<iframe container id>\"),\n  iframeUrl: \"https://auth.turnkey.com\",\n});\nconst response = await iframeClient.injectCredentialBundle(\n  \"<Credential from Email>\"\n);\nif (response) {\n  await iframeClient.getWallets();\n}\n\n// this requires the developer to build a wrapper flow that can take user text input in their app and call the injectCredentialBundle function on the turnkey iframeClient\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet via REST API in TypeScript\nDESCRIPTION: REST API endpoint specification for creating a wallet and deriving addresses. The endpoint accepts a TCreateWalletInput parameter to configure the wallet creation process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCreate Wallet\n\nCreate a Wallet and derive addresses\n\n`POST /public/v1/submit/create_wallet`\n\n## Parameters\n\n### input\n\n[`TCreateWalletInput`](../type-aliases/TCreateWalletInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Objects and their Types\nDESCRIPTION: This code block defines different intent objects and their corresponding properties with specific types, including strings, numbers, booleans, and enums. These intent definitions are crucial for managing various operations within the Turnkey system, such as wallet creation, authentication, transaction signing, and policy updates. Each intent is tailored to a specific action and carries the necessary data for processing and authorization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"`_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; \\}; `setOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}\n\n**Description**\n\nIntent object crafted by Turnkey based on the user request, used to assess the permissibility of an action.\n\n#### intent.acceptInvitationIntent?\n\n\\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}\n\n#### intent.acceptInvitationIntent.authenticator\n\n\\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}\n\n**Description**\n\nWebAuthN hardware devices that can be used to log in to the Turnkey web app.\n\n#### intent.acceptInvitationIntent.authenticator.attestation\n\n\\{ `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `type`: `\"public-key\"`; \\}\n\n#### intent.acceptInvitationIntent.authenticator.attestation.authenticatorAttachment?\n\n`null` \\| `\"cross-platform\"` \\| `\"platform\"`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults\n\n\\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}\n\n#### intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults.appid?\n\n`boolean`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults.appidExclude?\n\n`boolean`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults.credProps?\n\n\\{ `rk`: `boolean`; \\}\n\n#### intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults.credProps.rk\n\n`boolean`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.id\n\n`string`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.rawId\n\n`string`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.response\n\n\\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}\n\n#### intent.acceptInvitationIntent.authenticator.attestation.response.attestationObject\n\n`string`\n\n#### intent.acceptInvitationIntent.authenticator.attestation.response.authenticatorAttachment?\n\n`null` \\| `\"cross-platform\"` \\| `\"platform\"`\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet with Turnkey SDK TypeScript\nDESCRIPTION: This function creates a wallet, requiring `TCreateWalletBody` for input with the Turnkey SDK. It returns a Promise resolving to a combined object, supporting secure financial transactions and asset management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createWallet**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payloads Signing Result Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for signing multiple raw payloads, containing an array of signatures as objects. This is important for batch processing of signatures in transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Comprehensive SDK Activity Type Enumeration\nDESCRIPTION: Extensive list of activity types covering authentication, organizational management, blockchain operations, and user-related actions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUsers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | ... (multiple activity types)`\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportWalletRequest type\nDESCRIPTION: Defines the structure of the request for importing a wallet. It includes the organization ID, parameters which contains v1ImportWalletIntent, timestamp in milliseconds, and the type of the activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1ImportWalletRequest\n * @memberof definitions\n */\nexport interface v1ImportWalletRequest {\n  /**\n   * Unique identifier for a given Organization.\n   */\n  organizationId: string;\n  parameters: definitions[\"v1ImportWalletIntent\"];\n  /**\n   * Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n   */\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_IMPORT_WALLET\";\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in with Auth Bundle in Browser SDK\nDESCRIPTION: Authenticates a user using an existing credential bundle with specified expiration. Enables both read and write requests for a session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithAuthBundle(credentialBundle: string, expirationSeconds: string = DEFAULT_SESSION_EXPIRATION_IN_SECONDS): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: SDK Result Type Definitions\nDESCRIPTION: Type definitions for various result structures from SDK operations including user creation, wallet management, and authentication processes\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  createWalletResult: {\n    addresses: string[],\n    walletId: string\n  },\n  createUsersResult: {\n    userIds: string[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definition for Creating API Keys in TypeScript\nDESCRIPTION: HTTP POST endpoint specification for adding API keys to an existing User in the Turnkey platform. The endpoint requires a TCreateApiKeysInput parameter and is part of the public API v1.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Create API Keys\n * \n * Add api keys to an existing User\n * \n * `POST /public/v1/submit/create_api_keys`\n * \n * ## Parameters\n * \n * ### input\n * \n * [`TCreateApiKeysInput`](../type-aliases/TCreateApiKeysInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: Signing a Delete Invitation Request in Turnkey\nDESCRIPTION: The `signDeleteInvitation` function prepares a signed request to delete an invitation within the Turnkey system.  It leverages WebAuthn for authentication and returns a promise that resolves to a `SignedRequest` object. This request can then be sent to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteInvitation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See DeleteInvitation\n * @param input\n * @param options\n */\n> **signDeleteInvitation**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining SignRawPayloadIntentV2 Interface in TypeScript\nDESCRIPTION: Defines the structure for signing a raw payload. It includes the payload, encoding type, hash function, and the identifier of the key to sign with.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\";\n  hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\";\n  payload: string;\n  signWith: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for signApproveActivity in TurnkeyApi TypeScript SDK\nDESCRIPTION: This function requests a WebAuthn assertion and returns a signed ApproveActivity request ready to be POSTed to Turnkey. It takes a TApproveActivityInput object and optional TurnkeyCredentialRequestOptions as parameters and returns a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signApproveActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**signApproveActivity**(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Users Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating users. It takes an input of type TCreateUsersBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUsers(input: TCreateUsersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAuthn Attestation in TypeScript\nDESCRIPTION: Function that generates WebAuthn attestation data. Takes CredentialCreationOptions as input and returns a Promise containing attestation object, client data JSON, credential ID, and supported transport methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getWebAuthnAttestation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWebAuthnAttestation(options: CredentialCreationOptions): Promise<{ \n  attestationObject: string;\n  clientDataJson: string;\n  credentialId: string;\n  transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n}>\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Attestation Document in TurnkeyBrowserClient\nDESCRIPTION: The `stampGetAttestationDocument` TypeScript function generates a signed request for retrieving an attestation document from the Turnkey system. It accepts a `TGetAttestationDocumentBody` object as input, specifying the details of the desired attestation document. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, the signed request needed to obtain the attestation document.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetAttestationDocument**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:237](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L237)\n\n#### Parameters\n\n##### input\n\n`TGetAttestationDocumentBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetAttestationDocument`](TurnkeyBrowserClient.mdx#stampgetattestationdocument)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Keys List in TypeScript\nDESCRIPTION: stampGetPrivateKeys fetches multiple private keys through TGetPrivateKeysBody input and returns a Promise resolving to undefined or TSignedRequest. This function is inherited from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_113\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPrivateKeys(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyDirectWallet for CosmJS\nDESCRIPTION: Demonstrates how to initialize a TurnkeyDirectWallet signer for use with Cosmos-based chains. The code shows setup of the wallet, retrieval of the first account, and extraction of the public key and address. The prefix parameter can be customized for different Cosmos chains.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/documents/docs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize a Turnkey Signer\nconst turnkeySigner = await TurnkeyDirectWallet.init({\n  config: {\n    ...\n  },\n  prefix: \"celestia\", // can be replaced with other Cosmos chains\n});\n\nconst account = refineNonNull((await turnkeySigner.getAccounts())[0]);\nconst compressedPublicKey = toHex(account.pubkey);\nconst selfAddress = account.address;\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Api Key in TurnkeyBrowserClient\nDESCRIPTION: The `stampGetApiKey` TypeScript function generates a signed request to retrieve a specific API key from the Turnkey system. It accepts a `TGetApiKeyBody` object as input, specifying the API key to be retrieved.  The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, the signed request necessary to fetch the specified API key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetApiKey**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:187](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L187)\n\n#### Parameters\n\n##### input\n\n`TGetApiKeyBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetApiKey`](TurnkeyBrowserClient.mdx#stampgetapikey)\n```\n\n----------------------------------------\n\nTITLE: Generating Stamp Requests for Wallet Operations in TypeScript\nDESCRIPTION: Methods that prepare signed requests for wallet management operations like exporting wallets, exporting wallet accounts, and deleting wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportWallet(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportWalletAccount(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteWallets(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Testnet P2WSH Accounts\nDESCRIPTION: This code snippet defines a constant array named `DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS`.  It consists of `WalletAccount` objects intended for use with the Bitcoin testnet using P2WSH addresses. The array is defined in the `turnkey-helpers.ts` file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DEFAULT_BITCOIN_TESTNET_P2WSH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users with getUsers()\nDESCRIPTION: Method to fetch a list of users from the Turnkey SDK. Takes an optional input parameter and returns a promise with an array of user objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ngetUsers(input): Promise<{ users: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for Importing Private Keys and Wallets\nDESCRIPTION: This snippet outlines the structure for importing private keys and wallets, specifically detailing 'importPrivateKeyResult' and 'importWalletResult'. The 'importPrivateKeyResult' includes an array of addresses and a unique private key ID, whereas the 'importWalletResult' provides a list of account addresses and a wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_93\n\nLANGUAGE: JSON\nCODE:\n```\nresult.importPrivateKeyResult.addresses\n\nobject[]\n\nDescription\n\nA list of addresses.\n\nresult.importPrivateKeyResult.privateKeyId\n\nstring\n\nDescription\n\nUnique identifier for a Private Key.\n\nresult.importWalletResult?\n{ addresses: string[]; walletId: string; }\n\nresult.importWalletResult.addresses\n\nstring[]\n\nDescription\n\nA list of account addresses.\n\nresult.importWalletResult.walletId\n\nstring\n\nDescription\n\nUnique identifier for a Wallet.\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetOrganizationConfigs Function in TypeScript\nDESCRIPTION: This code snippet defines the signGetOrganizationConfigs function. It takes an input of type TGetOrganizationConfigsInput and optional TurnkeyCredentialRequestOptions, and returns a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetOrganizationConfigs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetOrganizationConfigs: (input: TGetOrganizationConfigsInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TurnkeySigner Constructor Implementation\nDESCRIPTION: Constructor for TurnkeySigner class that takes a config object and optional provider parameter. Initializes a new signer instance with the given configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TurnkeySigner(config: TConfig, provider?: Provider): TurnkeySigner\n```\n\n----------------------------------------\n\nTITLE: Converting Hex to ASCII in TypeScript\nDESCRIPTION: This function takes a hexadecimal string as input and returns its ASCII representation. It's defined in the index.ts file of the @turnkey/encoding package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/hexToAscii.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexToAscii(hexString: string): string\n```\n\n----------------------------------------\n\nTITLE: Create Wallet Accounts in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create wallet accounts using the TurnkeyBrowserClient. It takes a `TCreateWalletAccountsBody` as input and returns a Promise that resolves to an object representing the created wallet accounts.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> **createWalletAccounts**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1371](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1371)\n\n#### Parameters\n\n##### input\n\n`TCreateWalletAccountsBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createWalletAccounts`](TurnkeyBrowserClient.mdx#createwalletaccounts)\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tags in TypeScript SDK\nDESCRIPTION: The 'stampCreatePrivateKeyTag' function handles the creation of private key tags using 'TCreatePrivateKeyTagBody'. It returns a Promise that may resolve to a TSignedRequest and inherits from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreatePrivateKeyTag**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Stamping Wallet Creation Request in TypeScript\nDESCRIPTION: Method to prepare a signed request for creating new wallets. Takes a TCreateWalletBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWallet(input: TCreateWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamp Export Private Key in TurnkeyBrowserClient\nDESCRIPTION: The `stampExportPrivateKey` TypeScript function generates a signed request to export a private key from the Turnkey system. It accepts a `TExportPrivateKeyBody` object as input, providing the necessary details for the export operation. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, representing the signed request required for private key export.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampExportPrivateKey**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1868](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1868)\n\n#### Parameters\n\n##### input\n\n`TExportPrivateKeyBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampExportPrivateKey`](TurnkeyBrowserClient.mdx#stampexportprivatekey)\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyServerClient in TypeScript\nDESCRIPTION: This constructor initializes a new instance of the `TurnkeyServerClient` class. It takes a `TurnkeySDKClientConfig` object as input, which is used to configure the client. This overrides the constructor of the base class `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @inheritdoc\n */\nconstructor(config: TurnkeySDKClientConfig) {\n  super(config);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Client in Turnkey\nDESCRIPTION: This method creates a `TurnkeyPasskeyClient` instance. It optionally accepts `PasskeyClientParams` to override default configuration values passed to the underlying `WebauthnStamper`. It returns a new `TurnkeyPasskeyClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Creates a passkey client. The parameters override the default values passed to the underlying Turnkey `WebauthnStamper`\n *\n * @param params\n */\npasskeyClient(params?: PasskeyClientParams): TurnkeyPasskeyClient\n```\n\n----------------------------------------\n\nTITLE: createOauthProviders method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates OAuth providers. It takes a `TCreateOauthProvidersBody` object as input and returns a Promise that resolves to an object. This allows for integrating with external OAuth providers for authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createOauthProviders(input: TurnkeySDKApiTypes.TCreateOauthProvidersBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateOauthProvidersBody, object & object>(\n            `/turnkey/create_oauth_providers`,\n            input,\n            \"oauthProviders\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Key or Wallet Import with IframeStamper in TypeScript\nDESCRIPTION: This snippet illustrates the process of Key or Wallet Import using IframeStamper. It initializes the stamper, injects an import bundle, displays the iframe for user input, and extracts the encrypted wallet bundle for import.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.IMPORT_IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM\nawait iframeStamper.init();\n\n// Injects a bundle containing the secure enclave's public key into the iframe's local storage\n// `importBundle` is the response from requesting ACTIVITY_TYPE_INIT_IMPORT_WALLET\nconst injected = await iframeStamper.injectImportBundle(importBundle);\n\nif (injected !== true) {\n  throw new Error(\"unexpected error while injecting import bundle\");\n}\n\n// Display the text input that the user can enter their seedphrase into\nsetIframeDisplay(\"block\");\n\n// Once the user has entered their seedphrase, trigger this call to the iframe that\n// 1) encrypts their seedphrase using the secure enclave's public key from the previous step\n// 2) sends this ciphertext and a public key generated by the client to your page\nconst encryptedBundle = await iframeStamper.extractWalletEncryptedBundle();\n\n// Now you can pass this encryptedBundle as a request to ACTIVITY_TYPE_IMPORT_WALLET.\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Sign Raw Payload Intent\nDESCRIPTION: Specifies the data structure for the `signRawPayloadIntent`, allowing for signing raw payloads. It includes `encoding`, `hashFunction`, `payload`, and `privateKeyId` for signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_33\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `encoding`: `\\\"PAYLOAD_ENCODING_HEXADECIMAL\\\"` \\| `\\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"; `hashFunction`: `\\\"HASH_FUNCTION_NO_OP\\\"` \\| `\\\"HASH_FUNCTION_SHA256\\\"` \\| `\\\"HASH_FUNCTION_KECCAK256\\\"` \\| `\\\"HASH_FUNCTION_NOT_APPLICABLE\\\"; `payload`: `string`; `privateKeyId`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Function with Complex Promise Type\nDESCRIPTION: A TypeScript constant representing an OAuth function that returns a Promise with a complex nested object structure containing various authentication and authorization intents\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst oauth: (input) => Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    // ... extensive nested type definition\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Sweeping Funds to Long Term Storage\nDESCRIPTION: Commands to move assets from Short Term Storage addresses to the Long Term Storage address, with an option for continuous execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli sweep --key=phil\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli sweep --key=phil --interval=20000\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Identity Information in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for retrieving the identity of the current user. Returns a Promise that resolves to an object containing organizationId, organizationName, userId, and username.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWhoami(input): Promise<{ organizationId: string; organizationName: string; userId: string; username: string; }>\n```\n\n----------------------------------------\n\nTITLE: Listing User Tags in Turnkey Browser SDK\nDESCRIPTION: The `listUserTags` function retrieves a list of user tags from the Turnkey Browser SDK. It accepts `TListUserTagsBody` as input (defaults to an empty object) and returns a promise resolving to an object containing an array of `userTags`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n> **listUserTags**(`input`): `Promise`\\<\\{ `userTags`: `object`[]; \\}\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:636](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L636)\n\n#### Parameters\n\n##### input\n\n`TListUserTagsBody` = `{}`\n\n#### Returns\n\n`Promise`\\<\\{ `userTags`: `object`[]; \\}\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`listUserTags`](TurnkeyBrowserClient.mdx#listusertags)\n```\n\n----------------------------------------\n\nTITLE: signSignRawPayloads Function Definition\nDESCRIPTION: Defines the `signSignRawPayloads` function, which is used to request a WebAuthn assertion and return a signed `SignRawPayloads` request for Turnkey. It takes a `TSignRawPayloadsInput` and optional `TurnkeyCredentialRequestOptions` as parameters and returns a Promise that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signSignRawPayloads.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signSignRawPayloads**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive User Authentication Update in Turnkey SDK (TypeScript)\nDESCRIPTION: The updateUserAuth method performs a comprehensive authentication update for an end user. It combines add/update and delete operations into a single call, with behavior driven by the input values. Operations are executed in parallel where applicable.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_133\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserAuth(params: UpdateUserAuthParams): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete private keys using the Turnkey SDK. It takes an input of type TDeletePrivateKeysBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeletePrivateKeys(input: TDeletePrivateKeysBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Stamping Export Private Key Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for exporting a private key. It takes a TExportPrivateKeyBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportPrivateKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Using withAsyncPolling Helper for Asynchronous Operations\nDESCRIPTION: Example demonstrating how to use the withAsyncPolling helper to handle asynchronous mutations with built-in polling support and error handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAsyncPolling, TurnkeyActivityError } from \"@turnkey/http\";\n\n// Use `withAsyncPolling(...)` to wrap & create a fetcher with built-in async polling support\nconst fetcher = withAsyncPolling({\n  request: client.createPrivateKeys,\n});\n\n// The fetcher remains fully typed. After submitting the request,\n// it'll poll until the activity reaches a terminal state.\ntry {\n  const activity = await fetcher({\n    body: {\n      /* ... */\n    },\n  });\n\n  // Success!\n  console.log(\n    activity.result.createPrivateKeysResultV2?.privateKeys?.[0]?.privateKeyId,\n  );\n} catch (error) {\n  if (error instanceof TurnkeyActivityError) {\n    // In case the activity is rejected, failed, or requires consensus,\n    // a rich `TurnkeyActivityError` will be thrown. You can read from\n    // `TurnkeyActivityError` to find out why the activity didn't succeed.\n    //\n    // For instance, if your activity requires consensus and doesn't have\n    // enough approvals, you can get the `activityId` from `TurnkeyActivityError`,\n    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n    // when the required approvals/rejections are in place.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Raw Payload Intent in JavaScript\nDESCRIPTION: This intent sets up the process for signing a raw payload with specified encoding and hash function. It ensures the signed payload meets the requirements for cryptographic operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n`signRawPayloadIntent`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `privateKeyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Key in TypeScript\nDESCRIPTION: The stampGetPrivateKey function accesses private key information requiring TGetPrivateKeyBody as input. It returns a Promise resolving to undefined or TSignedRequest, part of the TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_112\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPrivateKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TurnKey SDK Types and Enums in TypeScript\nDESCRIPTION: This code snippet defines various TypeScript interfaces and enums used in the TurnKey SDK. It includes definitions for activity statuses, activity types, and result interfaces for different operations such as signing transactions, creating users, and managing policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createAuthenticators.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ns: string;\nv: string;\n};\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n};\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Creating ReadWrite Session with Promise - TypeScript\nDESCRIPTION: The code defines a TypeScript function `createReadWriteSession` that returns a promise resolving to an object with various properties related to user activity and intent. This function facilitates the creation and handling of read-write sessions with detailed considerations for authentication, intent configurations, and session lifecycle parameters. It requires a structured object input parameter that defines the session's attributes, authenticator details, and other operational parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createReadWriteSession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n# Function: createReadWriteSession()\n\n> **createReadWriteSession**(`input`): `Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" \\| \"AUTHENTICATOR_TRANSPORT_INTERNAL\" \\| \"AUTHENTICATOR_TRANSPORT_NFC\" \\| \"AUTHENTICATOR_TRANSPORT_USB\" \\| \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\};...\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletResponse Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that represents the response schema for the GET wallet API endpoint. It maps to the 200 success response schema from the PublicApiService_GetWallet operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetWalletResponse = operations[\"PublicApiService_GetWallet\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers with Turnkey SDK TypeScript\nDESCRIPTION: This function removes OAuth providers using `TDeleteOauthProvidersBody` as input. The function returns a Promise of a combined object, aligning with API security practices.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteOauthProviders**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Export Component in React\nDESCRIPTION: Sets up the Export component from @turnkey/sdk-react for wallet export functionality with success and error handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Export } from \"@turnkey/sdk-react\";\nimport { toast } from \"sonner\";\n\nfunction ExportWallet() {\n  const walletId = \"your-wallet-id\";\n\n  const handleExportSuccess = () => {\n    toast.success(\"Wallet successfully exported!\");\n  };\n\n  const handleExportError = (errorMessage: string) => {\n    toast.error(errorMessage);\n  };\n\n  return (\n    <Export\n      walletId={walletId}\n      onHandleExportSuccess={handleExportSuccess}\n      onError={handleExportError}\n    />\n  );\n}\n\nexport default ExportWallet;\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Creation Request (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateSubOrganizationRequest, which represents the API request for creating a sub-organization. It includes the organization ID, creation parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateSubOrganizationRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateSubOrganizationIntentV7\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bitcoin Wallet with Turnkey\nDESCRIPTION: Command to run the wallet creation script that generates a new Bitcoin wallet through Turnkey. The script prompts for wallet name and type, then outputs the wallet details and required environment variables.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-bitcoin/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run create-wallet\n> @turnkey/example-with-bitcoin@0.1.0 create-wallet\n> tsx src/createNewWallet\n\n✔ Name your new wallet … CLI wallet\n✔ Select the type of wallet you would like to create › P2TR (testnet)\n\nNew Bitcoin wallet created!\n- Name: CLI wallet\n- Wallet ID: df09819b-acf1-5d0c-a639-98cc01c66487\n- Public key: 035e2cbb6cdcdd8695b72756ed03104d7ae789283f36a217c6a0e498a7f9044e04\n- Address: tb1pjuldrxzva9ajfskqs2hvmqkpa282w755c7sr4pg48xn2gwkf82esusy7z9\n\nNow you can populate your `.env.local` with:\nSOURCE_COMPRESSED_PUBLIC_KEY=\"035e2cbb6cdcdd8695b72756ed03104d7ae789283f36a217c6a0e498a7f9044e04\"\nSOURCE_BITCOIN_ADDRESS=\"tb1pjuldrxzva9ajfskqs2hvmqkpa282w755c7sr4pg48xn2gwkf82esusy7z9\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Key Information in TypeScript\nDESCRIPTION: This method retrieves information about a specific private key. It takes an input parameter of type TGetPrivateKeyBody and returns a Promise containing detailed private key information, including addresses, curve type, and public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPrivateKey(input: TGetPrivateKeyBody): Promise<{ privateKey: { addresses: object[]; createdAt: { nanos: string; seconds: string; }; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; exported: boolean; imported: boolean; privateKeyId: string; privateKeyName: string; privateKeyTags: string[]; publicKey: string; updatedAt: { nanos: string; seconds: string; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining v1Intent Object for Various User and Organization Operations in TypeScript\nDESCRIPTION: The `v1Intent` object defines a variety of optional intents, such as `acceptInvitationIntent`, `createApiKeysIntent`, and others, where each denotes a specific operational action. These intents refer to predefined definitions such as `v1AcceptInvitationIntent`, `v1CreateApiKeysIntent`, and more, representing the scalable action structure for handling user and organizational operations. The intents allow modular and flexible integration in SDK processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"v1Intent: {\\n  acceptInvitationIntent?: definitions[\\\"v1AcceptInvitationIntent\\\"];\\n  acceptInvitationIntentV2?: definitions[\\\"v1AcceptInvitationIntentV2\\\"];\\n  activateBillingTierIntent?: definitions[\\\"billingActivateBillingTierIntent\\\"];\\n  approveActivityIntent?: definitions[\\\"v1ApproveActivityIntent\\\"];\\n  createApiKeysIntent?: definitions[\\\"v1CreateApiKeysIntent\\\"];\\n  createApiKeysIntentV2?: definitions[\\\"v1CreateApiKeysIntentV2\\\"];\\n  createApiOnlyUsersIntent?: definitions[\\\"v1CreateApiOnlyUsersIntent\\\"];\\n  createAuthenticatorsIntent?: definitions[\\\"v1CreateAuthenticatorsIntent\\\"];\\n  createAuthenticatorsIntentV2?: definitions[\\\"v1CreateAuthenticatorsIntentV2\\\"];\\n  createInvitationsIntent?: definitions[\\\"v1CreateInvitationsIntent\\\"];\\n  createOauthProvidersIntent?: definitions[\\\"v1CreateOauthProvidersIntent\\\"];\\n  createOrganizationIntent?: definitions[\\\"v1CreateOrganizationIntent\\\"];\\n  createOrganizationIntentV2?: definitions[\\\"v1CreateOrganizationIntentV2\\\"];\\n  createPoliciesIntent?: definitions[\\\"v1CreatePoliciesIntent\\\"];\\n  createPolicyIntent?: definitions[\\\"v1CreatePolicyIntent\\\"];\\n  createPolicyIntentV2?: definitions[\\\"v1CreatePolicyIntentV2\\\"];\\n  createPolicyIntentV3?: definitions[\\\"v1CreatePolicyIntentV3\\\"];\\n  ...\\n}\"\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication V2 Intent Type Definition\nDESCRIPTION: Enhanced type definition for OTP authentication with additional customization options for both email and SMS delivery methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `alphanumeric`: `boolean`; \n  `contact`: `string`; \n  `emailCustomization`: { \n    `appName`: `string`; \n    `logoUrl`: `string`; \n    `magicLinkTemplate`: `string`; \n    `templateId`: `string`; \n    `templateVariables`: `string`; \n  }; \n  `otpLength`: `number`; \n  `otpType`: `string`; \n  `sendFromEmailAddress`: `string`; \n  `sendFromEmailSenderName`: `string`; \n  `smsCustomization`: { \n    `template`: `string`; \n  }; \n  `userIdentifier`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateWalletResponse type alias. It represents the response schema for the 'PublicApiService_CreateWallet' operation, specifically for the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateWalletResponse = operations[\"PublicApiService_CreateWallet\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Return Type with Activity Details\nDESCRIPTION: This TypeScript code defines the structure of the return value of a Promise, which includes an `activity` object. The `activity` object contains details such as whether the activity can be approved or rejected, the creation timestamp, failure information, a fingerprint for tracking, an ID, and an `intent` object detailing the specific action the activity represents. The `intent` property is a discriminated union type, encompassing different scenarios such as accepting invitations, activating billing tiers, creating API keys, managing authenticators, creating organizations, creating policies, managing private keys, initiating sessions, managing sub-organizations, creating users, managing wallets, deleting resources, and performing authentication-related actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"Promise`<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" | \\\"ADDRESS_FORMAT_SEI\\\" | \\\"ADDRESS_FORMAT_XLM\\\" | \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" | \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" | \\\"ADDRESS_FORMAT_TON_V3R2\\\" | \\\"ADDRESS_FORMAT_TON_V4R2\\\" | \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" | \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`; \"\n```\n\n----------------------------------------\n\nTITLE: Recover User\nDESCRIPTION: Executes the user recovery process. Takes a TRecoverUserBody input parameter and returns a Promise with object data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nrecoverUser(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tag with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreatePrivateKeyTag` function takes an input of type `TCreatePrivateKeyTagBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is typically used to create a private key tag within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreatePrivateKeyTag(input: TCreatePrivateKeyTagBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload Intent\nDESCRIPTION: This snippet defines the intent for signing a raw payload with a specific encoding and hash function. It captures the payload to be signed, the private key ID used for signing, and allows for various encoding and hashing options. This structure is crucial for ensuring data integrity and authenticity in transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Configurations with SDK Client\nDESCRIPTION: The stampGetOrganizationConfigs method serves to retrieve organization configuration data using an input of TGetOrganizationConfigsBody. It returns a Promise resolving to either undefined or a TSignedRequest, thus providing the configuration details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetOrganizationConfigs**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Initializing Iframe in TypeScript\nDESCRIPTION: Inserts the iframe into the DOM and returns a promise that resolves to the public key of the iframe. An optional TTL for the embedded key can be provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/IframeStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninit(dangerouslyOverrideIframeKeyTtl?)\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session with Turnkey SDK TypeScript\nDESCRIPTION: This function establishes a read-write session within the Turnkey SDK. It takes `TCreateReadWriteSessionBody` as input and returns a Promise of a combined object, indicating potential asynchronous operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createReadWriteSession**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignTransactionIntentV2 Interface in TypeScript\nDESCRIPTION: Defines the structure for a sign transaction intent, including the signing address, transaction type, and unsigned transaction data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_136\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1SignTransactionIntentV2: object {\n  signWith: string;\n  type: definitions[\"v1TransactionType\"];\n  unsignedTransaction: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Organization Data Type Definition in TypeScript\nDESCRIPTION: Type definition for organization data including features, invitations, policies and other organization-related properties. This interface represents the core data structure for an organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1OrganizationData {\n  features?: v1Feature[];\n  invitations?: v1Invitation[];\n  name?: string;\n  organizationId?: string;\n  policies?: v1Policy[];\n  privateKeys?: v1PrivateKey[];\n  rootQuorum?: externaldatav1Quorum;\n  tags?: datav1Tag[];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Policy with Turnkey SDK in TypeScript\nDESCRIPTION: Method for updating a policy through the Turnkey API. It accepts a TUpdatePolicyBody parameter and returns a Promise containing the response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicy(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey SDK Client\nDESCRIPTION: Configuration of the main Turnkey client with API base URL, organization ID, and optional relying party ID for Passkey authentication\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst turnkey = new Turnkey({\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  // Optional: Your relying party ID - for use with Passkey authentication\n  rpId: process.env.TURNKEY_RP_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationConfigsInput Type Alias\nDESCRIPTION: This snippet defines the `TGetOrganizationConfigsInput` type alias as an object containing a `body` property. The `body` property is expected to be of type `TGetOrganizationConfigsBody`. This structure is used for defining the input for retrieving organization configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOrganizationConfigsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetOrganizationConfigsInput** = `object`\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk_api_types.ts:103](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L103)\n\n## Properties\n\n### body\n\n> **body**: [`TGetOrganizationConfigsBody`](TGetOrganizationConfigsBody.mdx)\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk_api_types.ts:104](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L104)\n\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload in SDK Browser Client in TypeScript\nDESCRIPTION: This function `signRawPayload` is used to sign raw payloads, accepting input of type TSignRawPayloadBody and returning a promise with an object. Dependencies include ensuring the payload body type adheres to TSignRawPayloadBody. Its primary function is in cryptographic contexts where payload integrity must be assured.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **signRawPayload**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:2391](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2391)\n\n#### Parameters\n\n##### input\n\n`TSignRawPayloadBody`\n\n#### Returns\n\n`Promise`<`object` & `object`>\n\n\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyProvider in React Native\nDESCRIPTION: The TurnkeyProvider component wraps the application, providing configuration for API base URL and session handling callbacks. It manages session lifecycle events such as creation, selection, expiration, and clearing through the router for navigation. Dependencies include React and expo-router package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TurnkeyProvider } from \"@turnkey/sdk-react-native\";\nimport { useRouter } from \"expo-router\";\nimport React from \"react\";\n\nexport const AppProviders = ({ children }: { children: React.ReactNode }) => {\n  const router = useRouter();\n\n  const turnkeyConfig = {\n    apiBaseUrl: \"https://api.turnkey.com\",\n    organizationId: \"<your organization id>\",\n    onSessionCreated: (session) => {\n      console.log(\"Session Created\", session);\n    },\n    onSessionSelected: (session) => {\n      console.log(\"Session Selected\", session);\n      router.replace(\"/dashboard\");\n    },\n    onSessionExpired: (session) => {\n      console.log(\"Session Expired\", session);\n      router.push(\"/\");\n    },\n    onSessionCleared: (session) => {\n      console.log(\"Session Cleared\", session);\n      router.push(\"/\");\n    },\n  };\n\n  return <TurnkeyProvider config={turnkeyConfig}>{children}</TurnkeyProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining deleteWallets() Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type of the deleteWallets() function. It's a constant function that takes an input and returns a Promise with a complex object structure containing information about the deletion activity and various intents related to wallet and organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deleteWallets: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... complex nested types ... */ }; /* ... more properties ... */ }; /* ... more properties ... */ }>\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntentV7 Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntentV7` object. It extends V6 by adding properties to disable OTP email and SMS authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_14\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Interface in TypeScript\nDESCRIPTION: This snippet defines the v1PrivateKey interface, which represents a private key in the system. It includes fields for addresses, cryptographic curve, export status, and associated metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1PrivateKey {\n  addresses: externaldatav1Address[];\n  createdAt: externaldatav1Timestamp;\n  curve: v1Curve;\n  exported: boolean;\n  imported: boolean;\n  privateKeyId: string;\n  privateKeyName: string;\n  privateKeyTags: string[];\n  publicKey: string;\n  updatedAt: externaldatav1Timestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Session with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateReadOnlySession` function accepts an input of type `TCreateReadOnlySessionBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is used to establish a read-only session in the Turnkey ecosystem.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateReadOnlySession(input: TCreateReadOnlySessionBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Private Key Tag Update\nDESCRIPTION: Defines the interface for updating private key tags, including adding/removing keys and updating tag names.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1UpdatePrivateKeyTagIntent {\n  addPrivateKeyIds: string[];\n  newPrivateKeyTagName?: string;\n  privateKeyTagId: string;\n  removePrivateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the updateUser Method in TypeScript\nDESCRIPTION: Method declaration for updateUser that updates a user and returns a promise with the response object. Takes a TUpdateUserBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_131\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUser(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Login with Bundle in Turnkey Browser SDK\nDESCRIPTION: The `loginWithBundle` function facilitates user login using a bundle, typically sent via email.  It takes a `LoginWithBundleParams` object as input and returns a promise that resolves to void.  The function is intended for use with an `iframeStamper` and is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n> **loginWithBundle**(`params`): `Promise`\\<`void`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:206](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L206)\n\nLog in with a bundle. This method uses a bundle sent to the end user email\nTo be used in conjunction with an `iframeStamper`.\n\n#### Parameters\n\n##### params\n\n`LoginWithBundleParams`\n\n#### Returns\n\n`Promise`\\<`void`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`loginWithBundle`](TurnkeyBrowserClient.mdx#loginwithbundle)\n```\n\n----------------------------------------\n\nTITLE: Fetching Compressed Public Key with Turnkey SDK\nDESCRIPTION: Function that retrieves a compressed public key using a Turnkey client. Takes a client instance (browser, server, or base), organization ID, and private key ID as inputs. Returns a promise that resolves to an object containing the compressed public key as a Uint8Array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/functions/fetchCompressedPublicKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetchCompressedPublicKey(input): Promise<{ compressedPublicKey: Uint8Array; }>\n```\n\n----------------------------------------\n\nTITLE: Function Signature for signCreateApiKeys in Turnkey HTTP SDK\nDESCRIPTION: This TypeScript function signs a CreateApiKeys request using WebAuthn assertion. It takes a TCreateApiKeysInput object and optional TurnkeyCredentialRequestOptions, returning a Promise that resolves to a SignedRequest ready to be sent to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**signCreateApiKeys**(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys in TypeScript SDK\nDESCRIPTION: The method 'stampCreatePrivateKeys' is designed to create private keys, taking 'TCreatePrivateKeysBody' and returning a Promise potentially resolving to a TSignedRequest. Inherits operations from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreatePrivateKeys**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Turnkey Session\nDESCRIPTION: Attempts to refresh an existing Session by inferring the current user's organization ID and target userId. Uses passkeyStamper for READ_ONLY sessions or iframeStamper for READ_WRITE sessions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefreshSession(params): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Login with Auth Bundle in Turnkey Browser SDK\nDESCRIPTION: The `loginWithAuthBundle` function logs in a user using an existing authentication bundle.  It takes the `credentialBundle` and `expirationSeconds` as input and returns a promise resolving to a boolean indicating login success. This function enables both read and write requests, and it is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n> **loginWithAuthBundle**(`credentialBundle`, `expirationSeconds`): `Promise`\\<`boolean`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:433](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L433)\n\nLogs in with an existing auth bundle. this bundle enables both read and write requests.\n\n#### Parameters\n\n##### credentialBundle\n\n`string`\n\n##### expirationSeconds\n\n`string` = `DEFAULT_SESSION_EXPIRATION_IN_SECONDS`\n\n#### Returns\n\n`Promise`\\<`boolean`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`loginWithAuthBundle`](TurnkeyBrowserClient.mdx#loginwithauthbundle)\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion for Delete Authenticators - TypeScript\nDESCRIPTION: The signDeleteAuthenticators function takes user input and optional request options to generate a signed DeleteAuthenticators request for Turnkey. It returns a Promise resolving to a SignedRequest type, ensuring type safety.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signDeleteAuthenticators: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Session Refresh in Browser SDK\nDESCRIPTION: Attempts to refresh an existing session by inferring the current user's organization ID and target userId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nrefreshSession(params: RefreshSessionParams): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Generating P-256 Key Pair in TypeScript\nDESCRIPTION: This function generates a P-256 key pair. It returns an object of type KeyPair containing the hexadecimal representations of the private key, public key, and uncompressed public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/generateP256KeyPair.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngenerateP256KeyPair(): KeyPair\n```\n\n----------------------------------------\n\nTITLE: Completing OAuth authentication in TypeScript\nDESCRIPTION: This code completes the OAuth authentication flow using the OIDC token received from the OAuth provider. It returns a session upon successful authentication, allowing the user to log in.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst oauthSession = await server.oauth({\n  suborgID: suborgId!,\n  oidcToken: credential,\n  targetPublicKey: authIframeClient?.iframePublicKey!,\n  sessionLengthSeconds: authConfig.sessionLengthSeconds,\n});\n\nif (oauthSession && oauthSession.token) {\n  // log in with Session\n  await authIframeClient!.loginWithSession(oauthSession);\n  // call onAuthSuccess callback\n  await onAuthSuccess();\n} else {\n  // error handling\n}\n```\n\n----------------------------------------\n\nTITLE: Sub-Organization Intent V7 Interface Definition\nDESCRIPTION: Latest version of sub-organization creation intent that includes additional authentication controls and wallet configuration options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  disableEmailAuth: boolean;\n  disableEmailRecovery: boolean;\n  disableOtpEmailAuth: boolean;\n  disableSmsAuth: boolean;\n  rootQuorumThreshold: number;\n  rootUsers: object[];\n  subOrganizationName: string;\n  wallet: {\n    accounts: object[];\n    mnemonicLength: number;\n    walletName: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeysInput TypeScript Interface\nDESCRIPTION: Type alias that represents the input structure for creating private keys, specifically for the POST /public/v1/submit/create_private_keys endpoint. Contains a body property of type TCreatePrivateKeysBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreatePrivateKeysInput = {\n  body: TCreatePrivateKeysBody\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize Import Wallet Request in TypeScript\nDESCRIPTION: Method signature for stampInitImportWallet which prepares a signed request for initializing a wallet import process. It accepts a TInitImportWalletBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitImportWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Providers in TypeScript\nDESCRIPTION: This function 'stampGetOauthProviders' is used to obtain OAuth providers. It requires an input of type 'TGetOauthProvidersBody' and returns a Promise which can resolve to either 'undefined' or a 'TSignedRequest'. The method is derived from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetOauthProviders**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetOauthProvidersBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Stamp Requests for Activity Tracking Operations in TypeScript\nDESCRIPTION: Methods that prepare signed requests for fetching activity information from the Turnkey API, including getting individual activities and collections of activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivity(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivities(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetApiKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result V2 Structure - TypeScript\nDESCRIPTION: Defines the structure for the OTP Authentication Result version 2, which includes an otpId of type string. This is crucial for managing OTP authentication responses in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthResultV2: { otpId: string; };\n```\n\n----------------------------------------\n\nTITLE: Using Turnkey React SDK Hooks and Clients\nDESCRIPTION: Example demonstrating how to use the useTurnkey hook to access Turnkey clients and implement authentication methods including passkey login and iframe-based authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/documents/React.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTurnkey } from \"@turnkey/sdk-react\";\nconst { turnkey, passkeyClient, authIframeClient } = useTurnkey();\n\nconst loginWithPasskey = async () => {\n  await passkeyClient?.login();\n};\n\nconst initEmailAuth = async () => {\n  await turnkey?.serverSign(\"emailAuth\", [\n    {\n      email: \"<target user email>\",\n      targetPublicKey: authIframeClient.iframePublicKey,\n      organizationId: \"<target user suborg-id>\",\n    },\n  ]);\n};\n\nconst loginWithIframe = async (credentialBundle: string) => {\n  await authIframeClient?.injectCredentialBundle(credentialBundle);\n  await authIframeClient?.login();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeysBody Type Alias in TypeScript\nDESCRIPTION: The `TDeletePrivateKeysBody` type alias is defined as the body parameters for the `PublicApiService_DeletePrivateKeys` operation, merged with `commandOverrideParams`. This determines the structure required when calling the API to delete private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TDeletePrivateKeysBody** = `operations`\\[`\"PublicApiService_DeletePrivateKeys\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\\[`\"parameters\"`\\] & `commandOverrideParams`\n\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreatePolicyInput Properties in TypeScript\nDESCRIPTION: This code snippet defines the 'body' property of the TCreatePolicyInput type alias. The body is of type TCreatePolicyBody, which likely contains the details needed to create a new policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreatePolicyBody\n```\n\n----------------------------------------\n\nTITLE: Sign Message Implementation\nDESCRIPTION: Method for signing arbitrary messages using the Turnkey infrastructure. Accepts either a string or Uint8Array message and returns a Promise resolving to the signature as a hex string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsignMessage(message: string | Uint8Array): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet in TypeScript\nDESCRIPTION: Method to export a wallet using the Turnkey Browser SDK. Accepts wallet export parameters and returns a Promise with wallet export details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexportWallet(input: TExportWalletBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Getting Wallet Public Key with TurnkeyWalletClient\nDESCRIPTION: Shows how to access a wallet's public key using TurnkeyWalletClient for authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst walletClient = turnkeySDK.walletClient(new EthereumWallet());\nconst publicKey = await walletsClient.getPublicKey();\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Creation Intent - TypeScript\nDESCRIPTION: Defines the structure of a request to create a new wallet, including wallets, optional mnemonic length, and wallet name. This constructs the necessary inputs for wallet generation processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CreateWalletIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1120\n */\nexport interface v1CreateWalletIntent {\n  accounts: definitions[\"v1WalletAccountParams\"][]; // A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.\n  mnemonicLength?: number; // Length of mnemonic to generate the Wallet seed.\n  walletName: string; // Human-readable name for a Wallet.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Feature in Turnkey SDK (TS)\nDESCRIPTION: This method enables or sets a specific feature for an organization using the Turnkey SDK. It takes a `TSetOrganizationFeatureBody` object as input and returns a Promise that resolves to an object representing the result of the operation. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n> **setOrganizationFeature**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2175](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2175)\n```\n\n----------------------------------------\n\nTITLE: Performing Email Authentication in Fireblocks SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to authenticate a user via email in the Fireblocks SDK using the POST endpoint. It requires an input parameter of type TEmailAuthInput.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/emailAuth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nPerform Email Auth\n\nAuthenticate a user via Email\n\n`POST /public/v1/submit/email_auth`\n\n## Parameters\n\n### input\n\n[`TEmailAuthInput`](../type-aliases/TEmailAuthInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Component\nDESCRIPTION: Example of implementing the Auth component with various authentication methods and configuration options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Auth } from \"@turnkey/sdk-react\";\nimport { toast } from \"sonner\";\n\nfunction AuthPage() {\n  const handleAuthSuccess = () => {\n    console.log(\"Auth successful!\");\n  };\n\n  const handleAuthError = (errorMessage: string) => {\n    toast.error(errorMessage);\n  };\n\n  const authConfig = {\n    emailEnabled: true,\n    passkeyEnabled: true,\n    phoneEnabled: false,\n    googleEnabled: true,\n    appleEnabled: false,\n    facebookEnabled: false,\n    sessionLengthSeconds: 3600, //1 hour r/w session\n  };\n\n  const configOrder = [\"socials\", \"email\", \"phone\", \"passkey\"];\n\n  return (\n    <Auth\n      authConfig={authConfig}\n      configOrder={configOrder}\n      onAuthSuccess={handleAuthSuccess}\n      onError={handleAuthError}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining emailAuth Method in TypeScript\nDESCRIPTION: Method for email authentication that takes a TEmailAuthBody input and returns a Promise containing response objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nemailAuth(input: TEmailAuthBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Delete Invitation Stamp Method\nDESCRIPTION: Method to stamp delete invitation requests. Takes a TDeleteInvitationBody input and returns a Promise resolving to undefined or a signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteInvitation(input: TDeleteInvitationBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Implementing Ethereum Wallet Integration\nDESCRIPTION: Implementation of Ethereum wallet integration for signing and managing public keys with TurnkeyClient\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createWalletClient,\n  custom,\n  recoverPublicKey,\n  hashMessage,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { mainnet } from \"viem/chains\";\n\nimport { WalletStamper, EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst walletStamper = new WalletStamper(new EthereumWallet());\n\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n\nconst whoami = await client.getWhoami({\n  organizationId: process.env.ORGANIZATION_ID,\n});\n\nlet subOrganizationId = whoami?.organizationId;\n\nif (!subOrganizationId) {\n  const { ApiKeyStamper } = await import(\"@turnkey/api-key-stamper\");\n\n  const parentOrgClient = new TurnkeyClient(\n    { baseUrl: BASE_URL },\n    new ApiKeyStamper({\n      apiPublicKey: process.env.API_PUBLIC_KEY ?? \"\",\n      apiPrivateKey: process.env.API_PRIVATE_KEY ?? \"\",\n    }),\n  );\n\n  const apiKeys = [\n    {\n      apiKeyName: \"Wallet Auth - Embedded Wallet\",\n      publicKey,\n      curveType,\n    },\n  ];\n\n  const subOrg = await parentOrgClient.createSubOrganization({\n    organizationId: process.env.ORGANIZATION_ID,\n    subOrganizationName: `Sub Org - ${publicKey}`,\n    rootUsers: [\n      {\n        userName: \"New User\",\n        userEmail: \"wallet@domain.com\",\n        apiKeys,\n      },\n    ],\n    rootQuorumThreshold: 1,\n    wallet: {\n      walletName: \"Default Wallet\",\n      accounts: DEFAULT_ETHEREUM_ACCOUNTS,\n    },\n  });\n\n  subOrganizationId = subOrg.subOrganizationId;\n}\n\nconst wallets = await client.getWallets({\n  organizationId: subOrganizationId,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information - TypeScript SDK\nDESCRIPTION: The getUser function provides detailed information about a specific user, accepting input of type TGetUserBody. The result is a Promise containing user details such as email, ID, and associated API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getUser(input): Promise<{ user: { ... }; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Mainnet P2WPKH Account Helper Function in TypeScript\nDESCRIPTION: This function creates a wallet account configuration for Bitcoin mainnet using P2WPKH (Pay-to-Witness-Public-Key-Hash) address format at a specified derivation path index. It returns a WalletAccount object with the appropriate configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinMainnetP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**defaultBitcoinMainnetP2WPKHAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Creating Users with Turnkey SDK TypeScript\nDESCRIPTION: This function is designed to create new users within the Turnkey platform, requiring `TCreateUsersBody` as an input parameter. It returns a Promise of a combined object, indicating an asynchronous operation to integrate user management capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createUsers**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data with Turnkey Client\nDESCRIPTION: Function that takes a Turnkey client (browser, server, or base), typed data parameters, organization ID, and signing key to produce a typed data signature. Returns a promise resolving to a hex string signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/signTypedData.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignTypedData(client, data, organizationId, signWith): Promise<`0x${string}`>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyInput TypeScript Type Alias for Policy Deletion API Requests\nDESCRIPTION: Defines the TDeletePolicyInput type alias as an object with a body property of type TDeletePolicyBody. This type is used for constructing requests to the '/public/v1/submit/delete_policy' API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TDeletePolicyInput\n * \n * `POST /public/v1/submit/delete_policy`\n */\n> **TDeletePolicyInput** = `object`\n\n## Properties\n\n### body\n\n> **body**: [`TDeletePolicyBody`](TDeletePolicyBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: Injecting Credential Bundle with TurnkeyIframeClient\nDESCRIPTION: Shows how to inject a credential bundle into an iframe for session-based authentication using TurnkeyIframeClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects a credential bundle into the iframe for session management\nconst success = await iframeClient.injectCredentialBundle(\n  \"your-credential-bundle\",\n);\n```\n\n----------------------------------------\n\nTITLE: Stamp Get OAuth Providers in TurnkeyBrowserClient\nDESCRIPTION: The `stampGetOauthProviders` TypeScript function generates a signed request for retrieving available OAuth providers within the Turnkey system. It accepts a `TGetOauthProvidersBody` object as input, allowing for specification of request parameters.  The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, the signed request required for fetching OAuth provider information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetOauthProviders**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:314](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L314)\n\n#### Parameters\n\n##### input\n\n`TGetOauthProvidersBody`\n```\n\n----------------------------------------\n\nTITLE: Defining oauth Function with User and Organization Management Intents - TypeScript\nDESCRIPTION: The oauth function is designed to return a promise that contains multiple intents related to user and organization management. It encompasses actions like creating API keys, deleting users, and managing authenticator actions. Each intent has specific parameters that dictate the desired action and the necessary input data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/oauth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noauth(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | 'cross-platform' | 'platform'; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | 'cross-platform' | 'platform'; clientDataJson: string; transports: ...[]; }; type: 'public-key'; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; ... } }>\n```\n\n----------------------------------------\n\nTITLE: Defining the stampUpdateRootQuorum Method in TypeScript\nDESCRIPTION: Method declaration for stampUpdateRootQuorum that updates root quorum settings and returns a promise with the signed request. Takes a TUpdateRootQuorumBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_123\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateRootQuorum(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Session with TurnkeyPasskeyClient\nDESCRIPTION: Demonstrates creating a read-write session using Passkey authentication with specified expiration and organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst passkeyClient = turnkeySDK.passkeyClient();\n\n// Creates a read-write session using a passkey with a specific expiration and organization ID\nconst session = await passkeyClient.createPasskeySession(\n  \"user-id\",\n  \"target-embedded-key\",\n  \"1800\", // Expire in 30 minutes\n  \"org-id\",\n);\n```\n\n----------------------------------------\n\nTITLE: Encrypting Wallet Bundle with HPKE in TypeScript\nDESCRIPTION: This function encrypts a mnemonic wallet bundle using Hybrid Public Key Encryption (HPKE) and verifies the enclave signature. It takes an object with mnemonic, bundle, user, and organization details as parameters, and returns a promise that resolves to a JSON string of the encrypted wallet bundle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/encryptWalletToBundle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Encrypts a mnemonic wallet bundle using HPKE and verifies the enclave signature.\n *\n * @param params An object containing the mnemonic, bundle, user, and organization details. Optionally, you can override the default signer key (for testing purposes).\n * @returns A promise that resolves to a JSON string representing the encrypted wallet bundle.\n * @throws If enclave signature verification or any other validation fails.\n */\nfunction encryptWalletToBundle(params: EncryptWalletToBundleParams): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Logging in with Wallet in JavaScript\nDESCRIPTION: Demonstrates how to use TurnkeyBrowserClient to log in with an existing wallet (e.g., Metamask) and create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\nconst iframeClient = await turnkeySDK.iframeClient();\n\n// Login with a wallet to create a read-write session\nconst session = await browserClient.loginWithWallet({\n  sessionType: \"READ_WRITE\",\n  iframeClient: iframeClient,\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletStamper Package\nDESCRIPTION: Commands for installing the @turnkey/wallet-stamper package using different package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/wallet-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/wallet-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/wallet-stamper\n```\n\n----------------------------------------\n\nTITLE: SDK Intent Type Definitions\nDESCRIPTION: Type definitions for various SDK intents including authentication, wallet, and user management operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  importKeyIntent: {\n    encryptedBundle: string;\n    privateKeyName: string;\n    userId: string;\n  },\n  importWalletIntent: {\n    accounts: object[];\n    encryptedBundle: string;\n    userId: string;\n    walletName: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for exporting a private key in the Coordinator API. It specifies the HTTP method, endpoint URL, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nExport Private Key\n\nExports a Private Key\n\n`POST /public/v1/submit/export_private_key`\n\n## Parameters\n\n### input\n\n[`TExportPrivateKeyInput`](../type-aliases/TExportPrivateKeyInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Sealing and Stamping Request Body with Turnkey API Credentials in TypeScript\nDESCRIPTION: Function that seals and stamps request bodies with Turnkey API credentials. It accepts either pre-initialized credentials or direct API key pairs, and returns a promise containing the sealed body and X-Stamp header value. The function processes a body object and returns encrypted credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/sealAndStampRequestBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsealAndStampRequestBody(input): Promise<{ sealedBody: string; xStamp: string; }>\n```\n\n----------------------------------------\n\nTITLE: Delete Authenticators Stamp Method\nDESCRIPTION: Method to stamp delete authenticator requests. Returns a Promise that resolves to either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteAuthenticators(input: TDeleteAuthenticatorsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateApiKeysIntent and CreateApiKeysIntentV2 Types in TypeScript\nDESCRIPTION: These snippets define structures for creating API keys, including a list of API keys and the user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateApiKeysIntent = {\n  apiKeys: object[];\n  userId: string;\n};\n\ntype CreateApiKeysIntentV2 = {\n  apiKeys: object[];\n  userId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining signGetWalletAccount in JavaScript\nDESCRIPTION: The `signGetWalletAccount` function requests a WebAuthn assertion and returns a signed `GetWalletAccount` request, which can be POSTed to Turnkey. It accepts `input` of type `TGetWalletAccountInput` and an optional `options` parameter of type `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves to `SignedRequest`. Dependencies include `TGetWalletAccountInput`, `TurnkeyCredentialRequestOptions`, and `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst signGetWalletAccount: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Sub-Organization in Turnkey\nDESCRIPTION: This method retrieves the details of the current user's sub-organization. It returns a Promise that resolves to a `SubOrganization` object if found, or `undefined` if not.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Fetches the current user's organization details.\n */\ngetCurrentSubOrganization(): Promise<undefined | SubOrganization>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Whoami Input - TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias called TGetWhoamiInput, which is used to structure the input data for the whoami API endpoint. The alias is defined as an object and includes a body property that references another type, TGetWhoamiBody, indicating the expected structure of the body of the request. This is crucial for TypeScript's type-checking during API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetWhoamiInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information in TypeScript\nDESCRIPTION: This method retrieves detailed information about a user. It takes an input parameter of type TGetUserBody and returns a Promise containing user data, including API keys, authenticators, OAuth providers, and personal information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetUser(input: TGetUserBody): Promise<{ user: { apiKeys: object[]; authenticators: object[]; createdAt: { nanos: string; seconds: string; }; oauthProviders: object[]; updatedAt: { nanos: string; seconds: string; }; userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTags: string[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Initializing WebauthnStamper and TurnkeyClient\nDESCRIPTION: Example demonstrating how to initialize a WebAuthnStamper with an rpId and create a TurnkeyClient that can sign requests with passkeys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new WebAuthnStamper({\n  rpId: \"example.com\",\n});\n\n// New HTTP client able to sign with passkeys!\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Configurations with Turnkey API in TypeScript\nDESCRIPTION: The `getOrganizationConfigs` function is designed to retrieve quorum settings and features for a specified organization using the Turnkey API. It requires a `TGetOrganizationConfigsInput` parameter and returns a Promise containing the organization's configuration details, including an array of feature objects and quorum settings with threshold and user IDs. The function interfaces with the Turnkey API using a POST request to the endpoint `/public/v1/query/get_organization_configs` and is defined in the specified .ts file, ensuring it integrates seamlessly as part of the organization's microservices SDK operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getOrganizationConfigs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getOrganizationConfigs**(`input`): `Promise`\\<\\{ `configs`: \\{ `features`: `object`[]; `quorum`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; \\}; \\}\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:430](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L430)\n\nGet Configs\n\nGet quorum settings and features for an organization\n\n`POST /public/v1/query/get_organization_configs`\n\n## Parameters\n\n### input\n\n[`TGetOrganizationConfigsInput`](../type-aliases/TGetOrganizationConfigsInput.mdx)\n\n## Returns\n\n`Promise`\\<\\{ `configs`: \\{ `features`: `object`[]; `quorum`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; \\}; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent in TypeScript\nDESCRIPTION: The snippet describes the structure for updating user details, including user email, phone number, and associated tags, which are crucial for maintaining up-to-date user information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Creation Request (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateUsersRequest, which represents the API request for creating users. It includes the organization ID, user creation parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateUsersRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateUsersIntentV3\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_USERS_V3\";\n}\n```\n\n----------------------------------------\n\nTITLE: THttpConfig Type Definition\nDESCRIPTION: TypeScript type definition for the TurnkeyClient configuration object, specifying the baseUrl parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntype THttpConfig = {\n  baseUrl: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize OTP Authentication Request in TypeScript\nDESCRIPTION: This method creates a signed request to initialize OTP (One-Time Password) authentication. It takes a TInitOtpAuthBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitOtpAuth(input: TInitOtpAuthBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating Users in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to create users using the Turnkey SDK. It accepts an input of type TCreateUsersBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateUsers(input: TCreateUsersBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinSignetP2WSHAccountAtIndex Function - TypeScript\nDESCRIPTION: The function 'defaultBitcoinSignetP2WSHAccountAtIndex' takes a number parameter 'pathIndex' and returns a WalletAccount object. This function is pivotal for generating accounts in a Bitcoin Signet environment, particularly when dealing with P2WSH accounts. It is defined in 'turnkey-helpers.ts' at line 246 and is integral to account management within the SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinSignetP2WSHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultBitcoinSignetP2WSHAccountAtIndex(pathIndex: number): WalletAccount {\n    // Function implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Wallets Retrieval Operation - TypeScript SDK\nDESCRIPTION: Defines the SDK method to get multiple wallets with a Promise return type containing an array of wallet objects. The input type is `TGetWalletsBody`, and it is part of the `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWallets(input): Promise<{ wallets: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Stamping OAuth Request in TypeScript\nDESCRIPTION: Method signature for stampOauth which prepares a signed request for OAuth authentication. It accepts a TOauthBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampOauth(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Using Activity Poller with Turnkey Client - TypeScript\nDESCRIPTION: Demonstrates how to create and use an activity poller with the Turnkey client to monitor asynchronous operations. The poller checks the activity status at regular intervals (default 500ms) until completion or failure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/createActivityPoller.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst activityPoller = createActivityPoller(client, client.createPrivateKeys);\nconst activity = await activityPoller(input);\nconsole.log(activity.result); // activity is completed\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Testnet P2SH Account Using TypeScript\nDESCRIPTION: The function defaultBitcoinTestnetP2SHAccountAtIndex takes a numeric parameter pathIndex and returns a WalletAccount object representing a Bitcoin Testnet P2SH account at the specified index. This implementation is critical for wallet management within the Turnkey SDK, allowing users to obtain specific wallet accounts dynamically based on their required path index.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinTestnetP2SHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultBitcoinTestnetP2SHAccountAtIndex(pathIndex: number): WalletAccount {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Keys Creation Body Type\nDESCRIPTION: Type alias that specifies the structure for creating private keys in the Turnkey Public API service. Used for the POST /public/v1/submit/create_private_keys endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreatePrivateKeysBody = operations[\"PublicApiService_CreatePrivateKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Injecting Import Bundle in Turnkey Browser SDK\nDESCRIPTION: The `injectImportBundle` function injects an import bundle into the Turnkey Browser SDK. It takes a `bundle` string, `organizationId` string, and `userId` string as inputs. The function returns a promise that resolves to a boolean, indicating the success of the injection.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n> **injectImportBundle**(`bundle`, `organizationId`, `userId`): `Promise`\\<`boolean`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:900](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L900)\n\n#### Parameters\n\n##### bundle\n\n`string`\n\n##### organizationId\n\n`string`\n\n##### userId\n\n`string`\n\n#### Returns\n\n`Promise`\\<`boolean`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadResponse Type Alias in TypeScript for Turnkey SDK\nDESCRIPTION: This code defines a TypeScript type alias that combines the response schema for the PublicApiService_SignRawPayload operation with the v1ActivityResponse definition. It provides a strongly-typed representation of the API response when signing raw payloads through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignRawPayloadResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSignRawPayloadResponse** = `operations`[`\"PublicApiService_SignRawPayload\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"signRawPayloadResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining API Keys Deletion Result Structure\nDESCRIPTION: This snippet details the structure for the 'deleteApiKeysResult', which encapsulates a list of API Key IDs that were deleted, expected as an array of strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_74\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteApiKeysResult?\n\\{ `apiKeyIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Keys Result Structure\nDESCRIPTION: This snippet outlines 'privateKeys' in createSubOrganizationResultV3, indicating a list of Private Key IDs and addresses within an object array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_66\n\nLANGUAGE: json\nCODE:\n```\nresult.createSubOrganizationResultV3.privateKeys\n\n`object`[]\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyApiTypes Type Alias in TypeScript\nDESCRIPTION: Core type definition that aggregates all API type interfaces for the Turnkey SDK. Includes types for API keys, billing operations, user management, and activity tracking.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TurnkeyApiTypes = {\n  apiApiKeyParams: {\n    apiKeyName: string;\n    expirationSeconds?: string;\n    publicKey: string;\n  };\n  billingActivateBillingTierIntent: {\n    productId: string;\n  };\n  billingActivateBillingTierResult: {\n    productId: string;\n  };\n  // ... additional type definitions\n  v1Activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: externaldatav1Timestamp;\n    failure?: rpcStatus;\n    fingerprint: string;\n    id: string;\n    intent: v1Intent;\n    organizationId: string;\n    result: v1Result;\n    status: v1ActivityStatus;\n    type: v1ActivityType;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Wallet Authentication in Browser SDK\nDESCRIPTION: Authenticates a user through a browser-based wallet login method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithWallet(params: LoginWithWalletParams): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Extracting Key Encrypted Bundle in Turnkey SDK\nDESCRIPTION: This function extracts an encrypted bundle for a key. It returns a Promise that resolves to a string representing the encrypted bundle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> **extractKeyEncryptedBundle**(): `Promise`\\<`string`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:916](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L916)\n```\n\n----------------------------------------\n\nTITLE: Defining signCreateWallet Function in Turnkey SDK\nDESCRIPTION: The `signCreateWallet` function is defined to request a WebAuthn assertion and return a signed `CreateWallet` request. This request is intended to be POSTed to Turnkey. The function takes `input` and optional `options` as parameters and returns a Promise that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signCreateWallet**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Injecting Credential Bundle with TurnkeyIframeClient\nDESCRIPTION: Shows how to inject a credential bundle into an iframe for session-based authentication using TurnkeyIframeClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects a credential bundle into the iframe for session management\nconst success = await iframeClient.injectCredentialBundle(\n  \"your-credential-bundle\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Session in Turnkey SDK\nDESCRIPTION: Method for creating a read-only session with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateReadOnlySession(input: TCreateReadOnlySessionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1PrivateKey type\nDESCRIPTION: Defines the structure for a private key, including derived cryptocurrency addresses, creation and update timestamps, cryptographic curve, export and import status, private key identifiers (ID and name), tags, and the public key component. It provides comprehensive information about a private key managed by the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\n            v1PrivateKey: {\n                name: \"v1PrivateKey\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        addresses: {\n                            type: \"array\",\n                            items: {\n                                $ref: \"#/definitions/externaldatav1Address\"\n                            },\n                            description: \"Derived cryptocurrency addresses for a given Private Key.\",\n                            required: true\n                        },\n                        createdAt: {\n                            $ref: \"#/definitions/externaldatav1Timestamp\",\n                            required: true\n                        },\n                        curve: {\n                            $ref: \"#/definitions/v1Curve\",\n                            description: \"Cryptographic Curve used to generate a given Private Key.\",\n                            required: true\n                        },\n                        exported: {\n                            type: \"boolean\",\n                            description: \"True when a given Private Key is exported, false otherwise.\",\n                            required: true\n                        },\n                        imported: {\n                            type: \"boolean\",\n                            description: \"True when a given Private Key is imported, false otherwise.\",\n                            required: true\n                        },\n                        privateKeyId: {\n                            type: \"string\",\n                            description: \"Unique identifier for a given Private Key.\",\n                            required: true\n                        },\n                        privateKeyName: {\n                            type: \"string\",\n                            description: \"Human-readable name for a Private Key.\",\n                            required: true\n                        },\n                        privateKeyTags: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\"\n                            },\n                            description: \"A list of Private Key Tag IDs.\",\n                            required: true\n                        },\n                        publicKey: {\n                            type: \"string\",\n                            description: \"The public component of a cryptographic key pair used to sign messages and transactions.\",\n                            required: true\n                        },\n                        updatedAt: {\n                            $ref: \"#/definitions/externaldatav1Timestamp\",\n                            required: true\n                        }\n                    },\n                    required: [\"addresses\", \"createdAt\", \"curve\", \"exported\", \"imported\", \"privateKeyId\", \"privateKeyName\", \"privateKeyTags\", \"publicKey\", \"updatedAt\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Turnkey nextProxyHandler Method\nDESCRIPTION: This method returns a Next.js API handler. It takes a `TurnkeyProxyHandlerConfig` object as input to configure the proxy behavior. The returned handler can be used within a Next.js API route to proxy requests to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/Turnkey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param config\n */\nnextProxyHandler(config: TurnkeyProxyHandlerConfig): NextApiHandler\n```\n\n----------------------------------------\n\nTITLE: Defining v1Intent Interface in TypeScript\nDESCRIPTION: This complex interface defines various types of intents that can be part of API requests. It includes optional properties for different actions such as accepting invitations, creating API keys, managing organizations, and handling user authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_110\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1Intent: object\n{\n  acceptInvitationIntent?: definitions[\"v1AcceptInvitationIntent\"];\n  acceptInvitationIntentV2?: definitions[\"v1AcceptInvitationIntentV2\"];\n  activateBillingTierIntent?: definitions[\"billingActivateBillingTierIntent\"];\n  approveActivityIntent?: definitions[\"v1ApproveActivityIntent\"];\n  createApiKeysIntent?: definitions[\"v1CreateApiKeysIntent\"];\n  // ... (many more intent properties)\n  setPaymentMethodIntent?: definitions[\"billingSetPaymentMethodIntent\"];\n  setPaymentMethodIntentV2?: definitions[\"billingSetPaymentMethodIntentV2\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Organization IDs in TypeScript\nDESCRIPTION: This method retrieves the IDs of sub-organizations. It takes an optional input parameter and returns a Promise containing an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSubOrgIds(input: TGetSubOrgIdsBody = {}): Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Private Key Management\nDESCRIPTION: Contains type definitions for managing private keys including creation intents, requests and results. Includes fields for key parameters, IDs and tagging functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeysIntent {\n  privateKeys: v1PrivateKeyParams[];\n}\n\ninterface v1CreatePrivateKeysResult {\n  privateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Cosmos Account Function in TypeScript\nDESCRIPTION: The defaultCosmosAccountAtIndex function retrieves a WalletAccount object based on the provided pathIndex parameter. It is defined to provide seamless access to wallet accounts in the Cosmos ecosystem. The function requires the pathIndex parameter, which is a number that specifies the index of the account to retrieve, and it returns a WalletAccount object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultCosmosAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultCosmosAccountAtIndex(pathIndex: number): WalletAccount {\n    // Implementation details will be here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Only Users in TypeScript SDK\nDESCRIPTION: The function 'stampCreateApiOnlyUsers' facilitates the creation of API-only users. It takes a parameter of type 'TCreateApiOnlyUsersBody' and returns a Promise that resolves to either undefined or a TSignedRequest. This method leverages inheritance from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateApiOnlyUsers**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Updating User Tags in Turnkey SDK (TypeScript)\nDESCRIPTION: The updateUserTag method updates user tags. It takes a TUpdateUserTagBody input and returns a Promise that resolves to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_134\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserTag(input: TUpdateUserTagBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Policy with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: The `stampCreatePolicy` function is to create a policy, taking TCreatePolicyBody as input. It resolves to a promise for TSignedRequest, supporting situations where single-policy management is required.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreatePolicy**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:1061](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1061)\n\n#### Parameters\n\n##### input\n\n`TCreatePolicyBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Rejecting Activity in Turnkey SDK\nDESCRIPTION: Asynchronous method for rejecting an activity with a specific input body, returning a Promise with the rejection response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nrejectActivity(input: TRejectActivityBody): Promise<TRejectActivityResponse>\n```\n\n----------------------------------------\n\nTITLE: Running the NextJS Application\nDESCRIPTION: Command to start the NextJS development server which will run the wallet import/export example application on port 3000.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/wallet-import-export/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Policy - TypeScript\nDESCRIPTION: The `stampCreatePolicy` function accepts input formatted as `TCreatePolicyBody` and returns a promise that resolves to undefined or a `TSignedRequest`, allowing for the creation of a single policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreatePolicy(input: TCreatePolicyBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Passkey in React Native with Turnkey SDK\nDESCRIPTION: This snippet demonstrates how to create a new passkey using the createPasskey function from @turnkey/react-native-passkey-stamper. It returns authenticator parameters that can be used for sub-org creation, user creation, etc.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/react-native-passkey-stamper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPasskey } from \"@turnkey/react-native-passkey-stamper\";\n\n// Returns authenticator params that can be used with sub-org creation, user creation, etc.\nconst authenticatorParams = await createPasskey({\n  // Won't be visible to users, this is the name of the Turnkey resource\n  authenticatorName: \"End-User Passkey\",\n  rp: {\n    id: \"your.site.com\",\n    name: \"Your App\",\n  },\n  user: {\n    // This ID isn't visible to users\n    id: String(Date.now()),\n    // ...but name and display names are. This is what's shown in the passkey prompt\n    name: \"Some Name\",\n    // displayName should be the same as \"name\"\n    displayName: \"Some Name\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Update User Method Definition in TypeScript\nDESCRIPTION: Method to update user details. Takes a TUpdateUserBody input parameter and returns a Promise resolving to a combined object type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUser(input: TUpdateUserBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Session in Turnkey Browser SDK\nDESCRIPTION: Method to refresh an existing session by inferring the current user's organization ID and target userId. Uses passkeyStamper for READ_ONLY sessions or iframeStamper for READ_WRITE sessions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefreshSession(params: RefreshSessionParams): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for Listing Activities in Turnkey API\nDESCRIPTION: Function signature for getActivities that takes a TGetActivitiesInput parameter and returns a Promise containing an array of activity objects. This function makes a POST request to /public/v1/query/list_activities to retrieve all activities within an organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getActivities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivities(input): Promise<{ activities: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Method Definition for approveActivity in TypeScript\nDESCRIPTION: The approveActivity method approves an activity based on the provided input of type TApproveActivityBody. It returns a Promise containing the TApproveActivityResponse and is inherited from TurnkeyServerClient. The method facilitates server-side approval of activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **approveActivity**(`input`): `Promise`<[`TApproveActivityResponse`](../namespaces/TurnkeySDKApiTypes/type-aliases/TApproveActivityResponse.mdx)>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:777](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L777)\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey React SDK\nDESCRIPTION: Commands to install the @turnkey/sdk-react package using npm or Yarn package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-react\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/sdk-react\n```\n\n----------------------------------------\n\nTITLE: WebauthnStamper Stamp Method\nDESCRIPTION: Asynchronous method that generates authentication stamps, taking a payload string and returning a promise with stamp header name and value.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/index/classes/WebauthnStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstamp(payload: string): Promise<{ stampHeaderName: string; stampHeaderValue: string; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting Wallets in Turnkey SDK\nDESCRIPTION: This function deletes wallets based on the provided input. It accepts a `TDeleteWalletsBody` object and returns a Promise.  It is inherited from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteWallets**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1776](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1776)\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion for Transaction Signing - TypeScript\nDESCRIPTION: The function 'signSignTransaction' seeks to obtain a WebAuthn assertion, adaptable through the optional 'options', and delivers a signed 'SignTransaction' request, readied for a subsequent POST operation. Dependencies include the input type 'TSignTransactionInput' and optional 'TurnkeyCredentialRequestOptions'. Function returns a 'Promise' of type 'SignedRequest'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signSignTransaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signSignTransaction**(`input`, `options`?): `Promise`<`SignedRequest`>(../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Sessions in TypeScript SDK\nDESCRIPTION: The 'stampCreateReadOnlySession' function creates read-only sessions, requiring 'TCreateReadOnlySessionBody' and returning a Promise with an optional TSignedRequest. It inherits behavior from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateReadOnlySession**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining Public API Wallet Retrieval Body Type\nDESCRIPTION: Type alias that specifies the structure of the request body for the 'list_wallets' endpoint in the Turnkey public API service. Used for querying and retrieving wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletsBody = operations[\"PublicApiService_GetWallets\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: User and Wallet Management Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for stamping requests to update user and wallet information. These methods prepare signed requests for user and wallet management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_130\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateUser(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: createApiKeys method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates API keys. It takes a `TCreateApiKeysBody` object as input and returns a Promise that resolves to an object. It's used for creating API keys for a Turnkey organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createApiKeys(input: TurnkeySDKApiTypes.TCreateApiKeysBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateApiKeysBody, object & object>(\n            `/turnkey/create_api_keys`,\n            input,\n            \"apiKeys\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Input Type in TypeScript\nDESCRIPTION: Type alias for the input parameters required to retrieve organization details through the Turnkey API. The input consists of a body property of type TGetOrganizationBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetOrganizationInput = {\n  body: TGetOrganizationBody\n}\n```\n\n----------------------------------------\n\nTITLE: Login with Authentication Bundle\nDESCRIPTION: Logs in using an existing authentication bundle that enables both read and write requests. The method accepts the credential bundle and an expiration time in seconds.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithAuthBundle(credentialBundle, expirationSeconds): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining getOrganizationConfigs Function in TypeScript\nDESCRIPTION: Declaration of the getOrganizationConfigs function that retrieves configuration settings for an organization. It accepts an input parameter of type TGetOrganizationConfigsInput and returns a Promise containing organization configs including features and quorum settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getOrganizationConfigs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getOrganizationConfigs: (input) => Promise<{ configs: { features: object[]; quorum: { threshold: number; userIds: string[]; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Enums - TypeScript Types\nDESCRIPTION: Defines enum-like string union types for activity statuses and operation types in the SDK. Includes comprehensive status values and an extensive list of activity types for various operations like key management, policy updates, and authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype status = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype type = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet with JavaScript\nDESCRIPTION: The `createWallet` function takes an input object and returns a Promise containing detailed activity about wallet creation. It encompasses various intents related to user accounts, organization creation, and policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createWallet = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; ... } };\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Wallet Account with Turnkey SDK (TypeScript)\nDESCRIPTION: The function `defaultTonV4r2AccountAtIndex` retrieves a wallet account at a specified path index, returning a `WalletAccount` object. It requires the Turnkey SDK for browsers, and is defined in the `turnkey-helpers.ts` file. The key parameter `pathIndex` denotes the location (index) from which the wallet account should be accessed. Expected to return a `WalletAccount` object based on the provided index.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultTonV4r2AccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **defaultTonV4r2AccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\\n\\nDefined in: [packages/sdk-browser/src/turnkey-helpers.ts:550](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L550)\n```\n\n----------------------------------------\n\nTITLE: Making Generic SDK Requests\nDESCRIPTION: Generic request method for making HTTP requests with type-safe body and response parameters, supporting flexible API interactions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nrequest<TBodyType, TResponseType>(url: string, body: TBodyType): Promise<TResponseType>\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletAccountResponse Type Alias in TypeScript\nDESCRIPTION: The type alias TExportWalletAccountResponse is defined using a combination of various schema references, ensuring strong typing for responses generated from the 'PublicApiService_ExportWalletAccount'. This alias enhances type safety and code clarity within the SDK. It specifically targets the response structure expected when exporting wallet accounts, linking it to the broader API schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportWalletAccountResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TExportWalletAccountResponse = operations[\"PublicApiService_ExportWalletAccount\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"exportWalletAccountResult\"] & definitions[\"v1ActivityResponse\"];\n```\n\n----------------------------------------\n\nTITLE: Creating AAD for AES-GCM Decryption in TypeScript\nDESCRIPTION: Function that builds additional associated data by taking sender and receiver public key buffers as Uint8Array inputs and concatenates them to create the AAD output. Used in the context of AES-GCM decryption operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/buildAdditionalAssociatedData.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuildAdditionalAssociatedData(senderPubBuf: Uint8Array, receiverPubBuf: Uint8Array): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Policy in TypeScript\nDESCRIPTION: This method retrieves information about a specific policy. It takes an input parameter of type TGetPolicyBody and returns a Promise containing detailed policy information, including conditions, effects, and timestamps.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPolicy(input: TGetPolicyBody): Promise<{ policy: { condition: string; consensus: string; createdAt: { nanos: string; seconds: string; }; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyId: string; policyName: string; updatedAt: { nanos: string; seconds: string; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Sessions - TypeScript\nDESCRIPTION: The `stampCreateReadOnlySession` function accepts an input of type `TCreateReadOnlySessionBody` and returns a promise that resolves to undefined or a `TSignedRequest`, used for creating read-only sessions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateReadOnlySession(input: TCreateReadOnlySessionBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This snippet defines a Promise return type with a deeply nested structure. It includes activity details, various intent types for operations like user management, organization creation, and wallet handling. The type is highly detailed, covering multiple scenarios and data structures used in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayload.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n            clientExtensionResults: { \n              appid: boolean; \n              appidExclude: boolean; \n              credProps: { \n                rk: boolean; \n              }; \n            }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n              clientDataJson: string; \n              transports: []; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      // ... (other intent types omitted for brevity)\n      exportWalletIntent: { \n        language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; \n        targetPublicKey: string; \n        walletId: string; \n      }; \n      importPrivateKeyIntent: { \n        addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; \n        curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; \n        encryptedBundle: string; \n      };\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Accessing Organization Data - TypeScript SDK\nDESCRIPTION: The getOrganization function is designed to return detailed data about an organization, including features and policies. It requires an input of type TGetOrganizationBody and returns a Promise that resolves to an object with numerous organizational attributes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getOrganization(input): Promise<{ organizationData: { ... }; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteInvitationBody type alias. It represents the body parameters for the PublicApiService_DeleteInvitation operation, specifically for the POST /public/v1/submit/delete_invitation endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteInvitationBody = operations[\"PublicApiService_DeleteInvitation\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateReadWriteSession` function accepts an input of type `TCreateReadWriteSessionBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This method is crucial for creating a session that allows read and write operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateReadWriteSession(input: TCreateReadWriteSessionBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters of the update wallet endpoint. The type is an object containing a body property of type TUpdateWalletBody and is used for POST requests to /public/v1/submit/update_wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTUpdateWalletInput = object {\n  body: TUpdateWalletBody\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EIP-1193 Provider in TypeScript\nDESCRIPTION: This function creates an EIP-1193 compliant provider. It takes TurnkeyEIP1193ProviderOptions as input and returns a Promise that resolves to an object with 'on', 'removeListener', and 'request' methods. The 'request' method supports various Ethereum-related operations like web3_clientVersion, web3_sha3, net_listening, net_peerCount, and net_version.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/eip-1193-provider/index/functions/createEIP1193Provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateEIP1193Provider(options: TurnkeyEIP1193ProviderOptions): Promise<{ \n  on: (eventName, listener) => this; \n  removeListener: (eventName, listener) => this; \n  request: EIP1193RequestFn<[{ \n    Method: \"web3_clientVersion\"; \n    Parameters: undefined; \n    ReturnType: string; \n  }, { \n    Method: \"web3_sha3\"; \n    Parameters: [`0x${string}`]; \n    ReturnType: string; \n  }, { \n    Method: \"net_listening\"; \n    Parameters: undefined; \n    ReturnType: boolean; \n  }, { \n    Method: \"net_peerCount\"; \n    Parameters: undefined; \n    ReturnType: `0x${string}`; \n  }, { \n    Method: \"net_version\"; \n    Parameters: undefined; \n    ReturnType: `0x${string}`; \n  }]>; \n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Otp Authentication Intent Structure in TypeScript\nDESCRIPTION: This intent structure is for initializing OTP-based authentication. It includes parameters for user contact information, email and SMS customization, and identifiers for the user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Approve Activity\nDESCRIPTION: Asynchronous method for stamping an activity approval with a specific input body, returning a Promise with an optional signed request\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nstampApproveActivity(input: TApproveActivityBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Login Method Implementation in TypeScript\nDESCRIPTION: Basic login method that accepts an optional configuration object with organizationId. Returns a Promise containing the login response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nlogin(config?): Promise<object & object> {\n  // organizationId?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload with Turnkey API - TypeScript\nDESCRIPTION: This TypeScript snippet defines the function signSignRawPayload which requests a WebAuthn assertion and returns a promise resolving to a signed SignRawPayload request. The request is ready to be posted to Turnkey. It requires TSignRawPayloadInput as input and may take TurnkeyCredentialRequestOptions as optional parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signSignRawPayload.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signSignRawPayload**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\nRequest a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Creation Intent (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateSubOrganizationIntentV7, which defines the parameters for creating a sub-organization. It includes options for disabling various authentication methods, setting root quorum threshold, and specifying root users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateSubOrganizationIntentV7 {\n  disableEmailAuth?: boolean;\n  disableEmailRecovery?: boolean;\n  disableOtpEmailAuth?: boolean;\n  disableSmsAuth?: boolean;\n  rootQuorumThreshold: number;\n  rootUsers: definitions[\"v1RootUserParamsV4\"][];\n  subOrganizationName: string;\n  wallet?: definitions[\"v1WalletParams\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with signGetOauthProviders - TypeScript\nDESCRIPTION: The signGetOauthProviders function is used to request a WebAuthn assertion and return a signed GetOauthProviders request, which can be POSTed to Turnkey's API. It requires an input of type TGetOauthProvidersInput and optionally accepts TurnkeyCredentialRequestOptions for further customization. The function returns a promise that resolves to a SignedRequest, ready to be used in subsequent POST requests. There are no explicit dependencies mentioned apart from Turnkey's types and possibly an environment supporting WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nRequest a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeysResponse Type Alias in TypeScript\nDESCRIPTION: Type alias for representing the response structure of the 'CreatePrivateKeys' operation. It accesses the schema for a successful (HTTP 200) response from the PublicApiService_CreatePrivateKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreatePrivateKeysResponse** = `operations`[`\"PublicApiService_CreatePrivateKeys\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Applying Settings to the Iframe in TypeScript\nDESCRIPTION: Method to apply settings to allowed parameters in the iframe. Used to style HTML elements for plaintext in wallet and private key import.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napplySettings(settings): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining TImportWalletResponse Type Alias\nDESCRIPTION: This code snippet defines the type alias TImportWalletResponse which consolidates the response schema for the wallet import operation from the API. It combines the expected structure from the operation's response with the v1ActivityResponse definition. This alias is useful for ensuring type safety when processing wallet import responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TImportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TImportWalletResponse\" = `operations`[`\\\"PublicApiService_ImportWallet\\\"`]`[`\\\"responses\\\"`]`[`\\\"200\\\"`]`[`\\\"schema\\\"`]`[`\\\"activity\\\"`]`[`\\\"result\\\"`]`[`\\\"importWalletResult\\\"`] & `definitions`[`\\\"v1ActivityResponse\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Export Private Key Intent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export private key intent, including private key ID and target public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportPrivateKeyIntent\n\n> **v1ExportPrivateKeyIntent**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1574](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1574)\n\n#### privateKeyId\n\n> **privateKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given Private Key.\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the export bundle will be encrypted.\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Signing\nDESCRIPTION: Method to sign messages using the Ethereum provider's personal_sign method, returning a hex signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/EthereumWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignMessage(message: string): Promise<`0x${string}`>\n```\n\n----------------------------------------\n\nTITLE: Stamp Delete Users in TurnkeyBrowserClient\nDESCRIPTION: This TypeScript function `stampDeleteUsers` is responsible for generating a signed request to delete users within the Turnkey system. It accepts a `TDeleteUsersBody` object as input, which specifies the users to be deleted. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, representing the signed request for the deletion operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampDeleteUsers**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1760](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1760)\n\n#### Parameters\n\n##### input\n\n`TDeleteUsersBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampDeleteUsers`](TurnkeyBrowserClient.mdx#stampdeleteusers)\n```\n\n----------------------------------------\n\nTITLE: Injecting a Key Export Bundle in TypeScript\nDESCRIPTION: Method to inject an export bundle into the iframe for private key export. The bundle should be encrypted to the iframe's initial public key using HPKE.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninjectKeyExportBundle(bundle, organizationId, keyFormat?): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Formatting HPKE Buffer in TypeScript\nDESCRIPTION: Function that takes an encrypted buffer from HPKE encryption operations and formats it into a JSON string containing the encapped public key and ciphertext. The input is a Uint8Array from either hpkeAuthEncrypt or hpkeEncrypt operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/formatHpkeBuf.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformatHpkeBuf(encryptedBuf: Uint8Array): string\n```\n\n----------------------------------------\n\nTITLE: Requesting Get Attestation Document - TypeScript\nDESCRIPTION: The signGetAttestationDocument function is designed to request a WebAuthn assertion and return a signed GetAttestationDocument request. It takes the input parameter of type TGetAttestationDocumentInput and an optional TurnkeyCredentialRequestOptions. The function will return a promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetAttestationDocument.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction signGetAttestationDocument(input: TGetAttestationDocumentInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation code here\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion - TypeScript\nDESCRIPTION: The signRecoverUser function is defined to request a WebAuthn assertion and return a signed RecoverUser request. It accepts an input of type TRrecoverUserInput and optional options of type TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest object, which is then ready to be POSTed to the Turnkey service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRecoverUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signRecoverUser(input: TRecoverUserInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details for requesting a WebAuthn assertion\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EthereumWalletInterface in TypeScript\nDESCRIPTION: Interface definition for Ethereum wallets that extends BaseWalletInterface. Includes methods for getting the SECP256K1 public key and signing messages, with a type property specifying it as an Ethereum wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/interfaces/EthereumWalletInterface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EthereumWalletInterface extends BaseWalletInterface {\n  getPublicKey(): Promise<string>;\n  signMessage(message: string): Promise<string>;\n  type: Ethereum;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Requests for Wallet Account Operations in TypeScript\nDESCRIPTION: Methods for generating signed requests to retrieve wallet accounts, wallets, and user identity information. These methods inherit from TurnkeyBaseClient and handle API authentication for wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccounts(input): Promise<undefined | TSignedRequest>\n\nstampGetWallets(input): Promise<undefined | TSignedRequest>\n\nstampGetWhoami(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: createReadOnlySession method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates a read-only session. It takes a `TCreateReadOnlySessionBody` object as input and returns a Promise that resolves to an object. It allows for creating sessions with limited access rights for read-only operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createReadOnlySession(input: TurnkeySDKApiTypes.TCreateReadOnlySessionBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateReadOnlySessionBody, object & object>(\n            `/turnkey/create_read_only_session`,\n            input,\n            \"session\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Policies - TypeScript SDK\nDESCRIPTION: The getPolicies function retrieves all policies within an organization. It accepts input based on TGetPoliciesBody and results in a Promise resolving to a list of policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getPolicies(input): Promise<{ policies: object[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyProvider React Component Type\nDESCRIPTION: Type definition for the TurnkeyProvider constant, which is a React Functional Component that accepts children and config props. The config prop must conform to the TurnkeyConfig interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/variables/TurnkeyProvider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst TurnkeyProvider: FC<{ children: ReactNode; config: TurnkeyConfig; }>\n```\n\n----------------------------------------\n\nTITLE: Typescript Function Declaration for getSignatureFromActivity\nDESCRIPTION: A helper function that extracts a signature string from a completed signing activity. Takes an activity object as input which contains various properties including approval status, timestamps, failure details, and fingerprint information. Returns an object containing the extracted signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignatureFromActivity(activity): object\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Feature\nDESCRIPTION: Asynchronous method for removing an organization feature with a specific input body, returning a Promise with the removal response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOrganizationFeature(input: TRemoveOrganizationFeatureBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified SubOrg IDs in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for retrieving verified sub-organization IDs. This function returns a Promise that resolves to an object containing an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetVerifiedSubOrgIds(input): Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: Requesting and Signing DeleteUsers with Turnkey SDK in TypeScript\nDESCRIPTION: The signDeleteUsers function requests a WebAuthn assertion and returns a signed DeleteUsers request, which is primed to be POSTed to Turnkey's API. It requires two parameters: 'input' of type TDeleteUsersInput and optional 'options' of type TurnkeyCredentialRequestOptions. The function returns a Promise of SignedRequest, ensuring the request adheres to Turnkey's specifications for deleting users. This function specifically focuses on the authentication and payload preparation aspects necessary to execute the DeleteUsers operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signDeleteUsers**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining signImportWallet function in Turnkey SDK\nDESCRIPTION: This code snippet shows the definition of the `signImportWallet` function within the Turnkey SDK. It takes an `input` of type `TImportWalletInput` and optional `options` of type `TurnkeyCredentialRequestOptions` as parameters. It returns a `Promise` resolving to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signImportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **signImportWallet**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Account Information in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for retrieving details of a specific wallet account. Returns comprehensive account information including address, address format, creation time, cryptographic curve, and other account metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWalletAccount(input): Promise<{ account: { address: string; addressFormat: \"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"; createdAt: { nanos: string; seconds: string; }; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; organizationId: string; path: string; pathFormat: \"PATH_FORMAT_BIP32\"; updatedAt: { nanos: string; seconds: string; }; walletAccountId: string; walletId: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting User Authentication Factors in TypeScript\nDESCRIPTION: A method that allows selective removal of authentication factors for an end user, including phone numbers, emails, authenticators, OAuth providers, and API keys. All removal operations are executed in parallel if multiple parameters are provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteUserAuth(params: DeleteUserAuthParams): Promise<any[]>\n```\n\n----------------------------------------\n\nTITLE: Create Private Keys in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create private keys using the TurnkeyBrowserClient. It takes a `TCreatePrivateKeysBody` as input and returns a Promise that resolves to an object representing the created private keys. It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **createPrivateKeys**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1114](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1114)\n\n#### Parameters\n\n##### input\n\n`TCreatePrivateKeysBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createPrivateKeys`](TurnkeyBrowserClient.mdx#createprivatekeys)\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts in JavaScript SDK\nDESCRIPTION: The function `createWalletAccounts` returns a Promise that resolves to a complex object containing activity details such as approval status, created timestamps, and various intents related to wallets, users, and organizations. Dependencies include the SDK environment and valid input data structures conforming to defined types. The input parameter is expected to include comprehensive details for processing and returning structured response objects, likely utilized in a financial or enterprise system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n# Function: createWalletAccounts()\n\n> **createWalletAccounts**(`input`): `Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_USB\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_USB\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_USB\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" \\| \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_CZECH\\\" \\| \\\"MNEMONIC_LANGUAGE_FRENCH\\\" \\| \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" \\| \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" \\| \\\"MNEMONIC_LANGUAGE_KOREAN\\\" \\| \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_COMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_ETHEREUM\\\" \\| \\\"ADDRESS_FORMAT_SOLANA\\\" \\| \\\"ADDRESS_FORMAT_COSMOS\\\" \\| \\\"ADDRESS_FORMAT_TRON\\\" \\| \\\"ADDRESS_FORMAT_SUI\\\" \\| \\\"ADDRESS_FORMAT_APTOS\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\")[]; \\};\n```\n\n----------------------------------------\n\nTITLE: One-Time Password Authentication in Browser SDK\nDESCRIPTION: Handles authentication using a one-time password (OTP) mechanism.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\notpAuth(input: TOtpAuthBody): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveOrganizationFeatureIntent Interface in TypeScript\nDESCRIPTION: Specifies the structure for removing an organization feature. It includes the name of the feature to be removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationBody Type Alias in TypeScript\nDESCRIPTION: This type alias, TGetOrganizationBody, is defined using TypeScript's utility types. It omits the 'organizationId' from the parameters of the PublicApiService_GetOrganization operation body and combines it with additional query override parameters. This type structure helps in maintaining a clear definition of the expected request body when invoking the service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetOrganizationBody = Omit<operations[\\\"PublicApiService_GetOrganization\\\"]\\[\\\"parameters\\\"]\\[\\\"body\\\"]\\[\\\"body\\\"\\], \\\"organizationId\\\"> & queryOverrideParams\"\n```\n\n----------------------------------------\n\nTITLE: Creating Bitcoin Regtest P2WSH Wallet Account with Specified Index in TypeScript\nDESCRIPTION: A function that generates a Bitcoin Regtest P2WSH wallet account configuration at a specified path index. This function returns a WalletAccount object that can be used with the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinRegtestP2WSHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinRegtestP2WSHAccountAtIndex(`pathIndex`): [`WalletAccount`]\n```\n\n----------------------------------------\n\nTITLE: Generating Default Tron Account with Path Index\nDESCRIPTION: Creates a default Tron wallet account using a specified path index. Used for deterministic wallet address generation within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultTronAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTronAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion in TypeScript\nDESCRIPTION: The signGetWhoami function requests a WebAuthn assertion and returns a signed GetWhoami request for posting to Turnkey. It requires TGetWhoamiInput as the input parameter and optionally accepts TurnkeyCredentialRequestOptions. The function returns a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetWhoami.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signGetWhoami**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags in TypeScript\nDESCRIPTION: The `deletePrivateKeyTags` function is used to remove tags associated with private keys, accepting input of type `TDeletePrivateKeyTagsBody`. It returns a Promise that resolves to an object with confirmation of the deletion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ndeletePrivateKeyTags(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating User Tags in TypeScript SDK\nDESCRIPTION: The 'stampCreateUserTag' function manages the creation of user tags, accepting 'TCreateUserTagBody' as input and returning a Promise that may result in a TSignedRequest, inheriting capabilities from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateUserTag**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: TGetAuthenticatorsBody Type Alias Definition\nDESCRIPTION: Defines the TGetAuthenticatorsBody type alias using TypeScript's type extraction. It extracts the body type from the \"PublicApiService_GetAuthenticators\" operation definition within the `operations` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * > **TGetAuthenticatorsBody** = `operations`\\[`\"PublicApiService_GetAuthenticators\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1576\n *\n * `POST /public/v1/query/get_authenticators`\n */\nexport type TGetAuthenticatorsBody = operations[\"PublicApiService_GetAuthenticators\"][\"parameters\"][\"body\"][\"body\"];\n```\n\n----------------------------------------\n\nTITLE: Running the Movement Transaction Script\nDESCRIPTION: Command to execute the Movement transaction example script. This script will use the configured environment to construct and send a transaction on the Movement network.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-movement/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys in Turnkey SDK\nDESCRIPTION: Method for deleting API keys with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteApiKeys(input: TDeleteApiKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Implementing Ethereum Wallet Integration\nDESCRIPTION: Example showing how to integrate an Ethereum wallet with the WalletStamper, including sub-organization creation and wallet management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/README.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createWalletClient,\n  custom,\n  recoverPublicKey,\n  hashMessage,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { mainnet } from \"viem/chains\";\n\nimport { WalletStamper, EthereumWallet } from \"@turnkey/wallet-stamper\";\n\n// Instantiate the WalletStamper with the EthereumWallet\nconst walletStamper = new WalletStamper(new EthereumWallet());\n\n// Instantiate the TurnkeyClient with the WalletStamper\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n\n// Call getWhoami to get the sub-org's organizationId and userId passing in the parent org id\n// whoami { organizationId: string; organizationName: string; userId: string; username: string; }\nconst whoami = await client.getWhoami({\n  organizationId: process.env.ORGANIZATION_ID,\n});\n\nlet subOrganizationId = whoami?.organizationId;\n\n// User does not yet have a sub-organization, so we need to create one\nif (!subOrganizationId) {\n  // We'll need to use the parent org's API keys to create the sub-org on behalf of the user\n  const { ApiKeyStamper } = await import(\"@turnkey/api-key-stamper\");\n\n  // Instantiate the TurnkeyClient with the ApiKeyStamper\n  const parentOrgClient = new TurnkeyClient(\n    { baseUrl: BASE_URL },\n    new ApiKeyStamper({\n      // In practice we'll want to ensure these keys do not get exposed to the client\n      apiPublicKey: process.env.API_PUBLIC_KEY ?? \"\",\n      apiPrivateKey: process.env.API_PRIVATE_KEY ?? \"\",\n    }),\n  );\n\n  const apiKeys = [\n    {\n      apiKeyName: \"Wallet Auth - Embedded Wallet\",\n      // The public key of the wallet that will be added as an API key and used to stamp future requests\n      publicKey,\n      // We set the curve type to 'API_KEY_CURVE_ED25519' for solana wallets\n      // If using an Ethereum wallet, set the curve type to 'API_KEY_CURVE_SECP256K1'\n      curveType,\n    },\n  ];\n\n  const subOrg = await parentOrgClient.createSubOrganization({\n    organizationId: process.env.ORGANIZATION_ID,\n    subOrganizationName: `Sub Org - ${publicKey}`,\n    rootUsers: [\n      {\n        // Replace with user provided values\n        userName: \"New User\",\n        userEmail: \"wallet@domain.com\",\n        apiKeys,\n      },\n    ],\n    rootQuorumThreshold: 1,\n    wallet: {\n      walletName: \"Default Wallet\",\n      accounts: DEFAULT_ETHEREUM_ACCOUNTS,\n    },\n  });\n\n  subOrganizationId = subOrg.subOrganizationId;\n}\n\n// Get the wallets for this sub-organization\nconst wallets = await client.getWallets({\n  organizationId: subOrganizationId,\n});\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Wallet Request in TypeScript\nDESCRIPTION: This method stamps a request to create a wallet. It takes a TCreateWalletBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWallet(input: TCreateWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initiate Private Key Import - TypeScript SDK\nDESCRIPTION: Initiates the process of importing a private key with input of `TInitImportPrivateKeyBody` type. It is a function within `TurnkeySDKClientBase` returning a Promise.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitImportPrivateKey(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Login with Wallet\nDESCRIPTION: Authenticates a user with a browser wallet, allowing integration with existing web3 authentication methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithWallet(params): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting Wallet Interface with TurnkeyWalletClient\nDESCRIPTION: Demonstrates accessing the full wallet interface object used for request stamping.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst walletClient = turnkeySDK.walletClient(new EthereumWallet());\nconst wallet = await walletsClient.getWalletInterface();\n```\n\n----------------------------------------\n\nTITLE: Defining getWallet Function in TypeScript\nDESCRIPTION: This code snippet defines the getWallet function in the Turnkey API SDK. It takes an input parameter and returns a Promise with wallet details including creation and update timestamps, export/import status, and wallet identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getWallet: (input) => Promise<{ wallet: { createdAt: { nanos: string; seconds: string; }; exported: boolean; imported: boolean; updatedAt: { nanos: string; seconds: string; }; walletId: string; walletName: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Enums\nDESCRIPTION: Enumeration of possible activity statuses and types, covering various operations from API key creation to wallet management and authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Blockchain SDK Operations\nDESCRIPTION: Comprehensive type definitions for blockchain operations including address formats, curves, wallet management, authentication, and organizational features. Includes definitions for transaction signing, private key management, and policy controls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signTransaction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"[];\n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n  // Additional type definitions omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition - Organization Data Model\nDESCRIPTION: Defines the data structure for organization information including features, invitations, policies, users and wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1OrganizationData {\n  features?: definitions[\"v1Feature\"][];\n  invitations?: definitions[\"v1Invitation\"][];\n  name?: string;\n  organizationId?: string;\n  policies?: definitions[\"v1Policy\"][];\n  privateKeys?: definitions[\"v1PrivateKey\"][];\n  rootQuorum?: definitions[\"externaldatav1Quorum\"];\n  tags?: definitions[\"datav1Tag\"][];\n  users?: definitions[\"v1User\"][];\n  wallets?: definitions[\"v1Wallet\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Wallet Encrypted Bundle in TypeScript\nDESCRIPTION: Method to extract an encrypted wallet bundle from the iframe. The bundle is encrypted to Turnkey's Signer enclave's initial public key using HPKE.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nextractWalletEncryptedBundle(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyClient Class in TypeScript\nDESCRIPTION: This snippet defines the TurnkeyClient class, which extends TurnkeyServerClient. It includes methods for various API operations such as stamping requests and performing actions like creating wallets, updating policies, and managing users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nclass TurnkeyClient extends TurnkeyServerClient {\n  // ... (inherited methods)\n\n  stampRemoveOrganizationFeature(input: TRemoveOrganizationFeatureBody): Promise<undefined | TSignedRequest> {\n    // Implementation\n  }\n\n  stampSetOrganizationFeature(input: TSetOrganizationFeatureBody): Promise<undefined | TSignedRequest> {\n    // Implementation\n  }\n\n  stampSignRawPayload(input: TSignRawPayloadBody): Promise<undefined | TSignedRequest> {\n    // Implementation\n  }\n\n  // ... (other methods)\n\n  testRateLimits(input: TTestRateLimitsBody): Promise<{}> {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Session with TurnkeyPasskeyClient\nDESCRIPTION: Demonstrates creation of a read-write session using passkey authentication with specified expiration and organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst passkeyClient = turnkeySDK.passkeyClient();\n\n// Creates a read-write session using a passkey with a specific expiration and organization ID\nconst session = await passkeyClient.createPasskeySession(\n  \"user-id\",\n  \"target-embedded-key\",\n  \"1800\", // Expire in 30 minutes\n  \"org-id\"\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Login Credential via Email in TypeScript\nDESCRIPTION: This snippet demonstrates how to send a login credential to a user's email address using the sendCredential method from the Turnkey SDK. It supports various customization options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst sendCredentialResponse = await server.sendCredential({\n  email,\n  targetPublicKey: authIframeClient?.iframePublicKey!,\n  organizationId: suborgId!,\n  ...(apiKeyName && { apiKeyName }),\n  ...(sendFromEmailAddress && { sendFromEmailAddress }),\n  ...(sessionLengthSeconds && { sessionLengthSeconds }),\n  ...(invalidateExisting && { invalidateExisting }),\n  ...(emailCustomization && { emailCustomization }),\n  ...(sendFromEmailAddress && { sendFromEmailAddress }),\n});\n```\n\n----------------------------------------\n\nTITLE: Login with Read-Write Session in Turnkey Browser SDK\nDESCRIPTION: The `loginWithReadWriteSession` function creates a read-write session within the Turnkey Browser SDK. It takes a `targetEmbeddedKey`, `expirationSeconds` (defaults to `DEFAULT_SESSION_EXPIRATION_IN_SECONDS`), and an optional `userId` as input, returning a Promise that resolves to an object. This function is intended for use with an `iframeStamper` and is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n> **loginWithReadWriteSession**(`targetEmbeddedKey`, `expirationSeconds`, `userId`?): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:396](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L396)\n\nCreates a read-write session. This method infers the current user's organization ID and target userId.\nTo be used in conjunction with an `iframeStamper`: the resulting session's credential bundle can be\ninjected into an iframeStamper to create a session that enables both read and write requests.\n\n#### Parameters\n\n##### targetEmbeddedKey\n\n`string`\n\n##### expirationSeconds\n\n`string` = `DEFAULT_SESSION_EXPIRATION_IN_SECONDS`\n\n##### userId?\n\n`string`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`loginWithReadWriteSession`](TurnkeyBrowserClient.mdx#loginwithreadwritesession)\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Signet P2TR Account Function\nDESCRIPTION: Creates a WalletAccount for a Bitcoin Signet Taproot address at a specified derivation path index. Used for generating deterministic wallet accounts in the Turnkey SDK server context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinSignetP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultBitcoinSignetP2TRAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript for TurnKey SDK\nDESCRIPTION: This TypeScript type definition specifies the return structure for a Promise in the TurnKey SDK. It details the activity object with properties for approval status, timestamps, fingerprints, and various intents representing different operations like invitation management, organization creation, authentication, wallet management, and policy enforcement.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; /* More intent types omitted for brevity */ }\n```\n\n----------------------------------------\n\nTITLE: Attestation Structure for WebAuthn Authentication in TypeScript\nDESCRIPTION: Defines the attestation structure containing proof of authenticator custody and metadata. Includes fields for attestation object, client data JSON, credential ID, and supported transport methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[];}\n```\n\n----------------------------------------\n\nTITLE: Defining Turnkey Context in React TypeScript\nDESCRIPTION: This code snippet defines the TurnkeyContext using the React Context API, specifically for handling instances of TurnkeyClientType within the Turnkey SDK. It is an important part of the context management strategy in a React environment. The surrounding infrastructure such as React and the TurnkeyClientType are prerequisites.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/TurnkeyContext.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst TurnkeyContext: Context<TurnkeyClientType>;\n```\n\n----------------------------------------\n\nTITLE: Updating User Authentication Method\nDESCRIPTION: Method for comprehensively updating end user authentication. Handles creating, updating and deleting auth methods in parallel through a single API call. Takes structured parameters and returns a success boolean.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserAuth(`params`): `Promise`<`boolean`>\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Signet P2WSH Account in TypeScript\nDESCRIPTION: This function creates a WalletAccount object for a Bitcoin Signet P2WSH account at a specified path index. It takes a numeric pathIndex as input and returns a WalletAccount interface object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinSignetP2WSHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinSignetP2WSHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TSignRawPayloadsBody type alias. It combines the parameters from the PublicApiService_SignRawPayloads operation's body with command override parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignRawPayloadsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TSignRawPayloadsBody = operations[\"PublicApiService_SignRawPayloads\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Login with Bundle\nDESCRIPTION: Logs in with a bundle sent to the end user's email. This method works in conjunction with an iframeStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithBundle(params): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent in JavaScript\nDESCRIPTION: This snippet provides the definition for the `initOtpAuthIntent`, which is used to initialize OTP authentication with fields for contact details and email/sms customization options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"initOtpAuthIntent\": { \"contact\": \"string\", \"emailCustomization\": { \"appName\": \"string\", \"logoUrl\": \"string\", \"magicLinkTemplate\": \"string\", \"templateId\": \"string\", \"templateVariables\": \"string\" }, \"otpType\": \"string\", \"sendFromEmailAddress\": \"string\", \"sendFromEmailSenderName\": \"string\", \"smsCustomization\": { \"template\": \"string\" }, \"userIdentifier\": \"string\" };\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Session with Turnkey SDK TypeScript\nDESCRIPTION: This function creates a read-only session using the Turnkey SDK. It requires a parameter of type `TCreateReadOnlySessionBody` as input and returns a Promise that resolves to a combined object. The function is abstracted under TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createReadOnlySession**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Extracting Signed Transactions in TypeScript - Turnkey SDK\nDESCRIPTION: A helper function that extracts a signed transaction from a completed signing activity. The function takes an activity object with various properties including approval status, timestamps, and failure information, and returns the signed transaction as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignedTransactionFromActivity(activity): string\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Blockchain SDK\nDESCRIPTION: Comprehensive type definitions for blockchain address formats, cryptographic curves, authentication methods, and SDK operations including wallet management, user management, and transaction signing capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/otpAuth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH |\n  ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH |\n  ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH |\n  ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR |\n  ADDRESS_FORMAT_SEI |\n  ADDRESS_FORMAT_XLM |\n  ADDRESS_FORMAT_DOGE_MAINNET |\n  ADDRESS_FORMAT_DOGE_TESTNET |\n  ADDRESS_FORMAT_TON_V3R2 |\n  ADDRESS_FORMAT_TON_V4R2 |\n  ADDRESS_FORMAT_XRP[];\n  curve: CURVE_SECP256K1 | CURVE_ED25519;\n  encryptedBundle: string;\n  privateKeyName: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting API Key at Specified Location in Telegram Cloud Storage - TypeScript\nDESCRIPTION: This example inserts a new API key into a specified location in Telegram Cloud Storage using TelegramCloudStorageStamper, but does not use it for signing. It demonstrates passing the public and private key values along with a key storage location. Useful for managing key storage separately from signing configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/README.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// create a new Telegram Cloud Storage Stamper\nconst stamper = new TelegramCloudStorageStamper();\n\nconst apiPublicKey = \"...\";\nconst apiPrivateKey = \"...\";\n\n// the key used to index Telegram Cloud Storage\nconst telegramCloudStorageKey = \"@turnkey/telegramCloudStorageKey\";\n\n// insert the API key in Telegram Cloud Storage\nawait stamper.insertAPIKey(\n  apiPublicKey,\n  apiPrivateKey,\n  telegramCloudStorageKey,\n);\n```\n\n----------------------------------------\n\nTITLE: InvalidArgumentError Class Definition in TypeScript\nDESCRIPTION: Class that extends Error to handle invalid arguments with properties for activity tracking. The constructor accepts an input object containing activityId, activityStatus, activityType, cause and message properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/InvalidArgumentError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass InvalidArgumentError extends Error {\n  activityId: undefined | string;\n  activityStatus: undefined | \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  activityType: undefined | string;\n  cause: undefined | Error;\n\n  constructor(input: {\n    activityId?: string,\n    activityStatus?: string,\n    activityType?: string,\n    cause?: Error,\n    message: string\n  }) {\n    super(input.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Login with Read Write Session Implementation in TypeScript\nDESCRIPTION: Creates a read-write session by inferring the current user's organization ID and target userId. Used with iframeStamper for read/write request capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithReadWriteSession(\n  targetEmbeddedKey: string,\n  expirationSeconds: string,\n  userId?: string\n): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a Wallet object, including properties like createdAt, exported, imported, updatedAt, walletId, and walletName.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1Wallet {\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  exported: boolean;\n  imported: boolean;\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n  walletId: string;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Credential Bundles with Turnkey Crypto\nDESCRIPTION: Function to decrypt an encrypted email authentication/recovery or OAuth credential bundle using a private key. It takes two string parameters: the encrypted credential bundle and the private key for decryption, and returns the decrypted data as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/decryptCredentialBundle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**decryptCredentialBundle**(`credentialBundle`, `embeddedKey`): `string`\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey SDK in JavaScript\nDESCRIPTION: Code snippet demonstrating how to initialize the Turnkey SDK with configuration options including API base URL and organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nconst turnkey = new Turnkey({\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletResponse Type Alias\nDESCRIPTION: This code snippet defines a type alias named TExportWalletResponse that is utilized in the Turnkey SDK. It combines the response structure from a specific API operation and a definition schema for activities. The alias captures the shape of the data returned when the wallet export operation is successfully executed. Key properties include operation ID and response state defined in the API specification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TExportWalletResponse\" = `operations`[\\\"PublicApiService_ExportWallet\\\"]\\[\\\"responses\\\"]\\[\\\"200\\\"]\\[\\\"schema\\\"]\\[\\\"activity\\\"]\\[\\\"result\\\"]\\[\\\"exportWalletResult\\\"]` & `definitions`[\\\"v1ActivityResponse\\\"]`\n```\n\n----------------------------------------\n\nTITLE: Change Signing API Key in Telegram Cloud Storage - TypeScript\nDESCRIPTION: This code shows changing the signing API key for the TelegramCloudStorageStamper. A new key is set for signing, and the process involves replacing a previously used key with a new one. The snippet assumes existing dependencies on @turnkey/telegram-cloud-storage-stamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/README.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// the API key to be stored\nconst apiKey: CloudStorageAPIKey = {\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n};\n\n// the API key to be set as the signing key\nconst stamper = await TelegramCloudStorageStamper.create({\n  cloudStorageAPIKey: apiKey,\n});\n\nconst apiKey2: CloudStorageAPIKey = {\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n};\n\n// insert the API key in Telegram Cloud Storage\nawait stamper.setSigningKey({\n  cloudStorageAPIKey: apiKey2,\n});\n```\n\n----------------------------------------\n\nTITLE: Copying and Configuring Environment Variables for Turnkey\nDESCRIPTION: Command to create a local environment file from the example template. This file will store API keys, organization ID, and wallet addresses needed for the Turnkey integration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-bitcoin/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Create Policies API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the Create Policies API endpoint. It specifies the HTTP method, path, and input parameter type for creating new policies using the Coordinator Public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Create Policies\n *\n * Create new Policies\n *\n * POST /public/v1/submit/create_policies\n *\n * @param input TCreatePoliciesInput\n */\ntype CreatePoliciesEndpoint = {\n  input: TCreatePoliciesInput;\n  // ... other properties ...\n};\n```\n\n----------------------------------------\n\nTITLE: Sign Create Policies Function in Turnkey HTTP SDK\nDESCRIPTION: This snippet represents the `signCreatePolicies` function definition. It takes a `TCreatePoliciesInput` and optional `TurnkeyCredentialRequestOptions` as input. It returns a promise that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreatePolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: signCreatePolicies()\n *\n * > **signCreatePolicies**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:1554](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L1554)\n *\n * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.\n *\n * See CreatePolicies\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TCreatePoliciesInput`](../type-aliases/TCreatePoliciesInput.mdx)\n *\n * ### options?\n *\n * `TurnkeyCredentialRequestOptions`\n *\n * ## Returns\n *\n * `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n */\n```\n\n----------------------------------------\n\nTITLE: Listing User Tags - TypeScript\nDESCRIPTION: The `listUserTags` function is designed to retrieve all user tags associated with a specific organization by making a POST request to the Turnkey API. It requires an input parameter of type `TListUserTagsInput` and returns a promise that resolves to an object containing an array of user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/listUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction listUserTags(input: TListUserTagsInput): Promise<{ userTags: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Features with POST Request in TypeScript\nDESCRIPTION: Defines an API endpoint for setting an organization feature, which requires approval by the root quorum. The endpoint is accessed via a POST request to '/public/v1/submit/set_organization_feature' with a TSetOrganizationFeatureInput parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/setOrganizationFeature.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nSet Organization Feature\n\nSets an organization feature. This activity must be approved by the current root quorum.\n\n`POST /public/v1/submit/set_organization_feature`\n\n## Parameters\n\n### input\n\n[`TSetOrganizationFeatureInput`](../type-aliases/TSetOrganizationFeatureInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Details in TypeScript\nDESCRIPTION: Defines the return type for getActivity method, including detailed activity status, type, and metadata for tracking system events and operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivity(): Promise<{\n  activity: {\n    activityId: string;\n    result: {\n      // Multiple result types for different operations\n      emailRecoveryResult: { userId: string };\n      oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n      // Additional result types...\n    };\n    status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | ... ;\n    type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... ;\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TListUserTagsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TListUserTagsBody type alias. It is constructed using the Omit utility type to exclude the 'organizationId' from the PublicApiService_ListUserTags operation parameters, and includes additional query override parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListUserTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TListUserTagsBody = Omit<operations[\"PublicApiService_ListUserTags\"][\"parameters\"][\"body\"][\"body\"], \"organizationId\"> & queryOverrideParams\n```\n\n----------------------------------------\n\nTITLE: User Identity Verification - TypeScript SDK\nDESCRIPTION: Returns user and organization related information such as `organizationId` and `userId` wrapped in a Promise. Uses `TGetWhoamiBody` type for input and belongs to use cases within `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWhoami(input): Promise<{ organizationId: string; organizationName: string; userId: string; username: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntentV3 Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntentV3` object. It consists of `privateKeys` (array of objects), `rootQuorumThreshold` (number), `rootUsers` (array of objects), and `subOrganizationName` (string).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_10\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Get Private Keys API Input Body - TypeScript\nDESCRIPTION: This property defines the expected body structure for requests made to the Get Private Keys API. It utilizes another type alias `TGetPrivateKeysBody`, which outlines the specifics of the request payload. Ensure that the dependent type `TGetPrivateKeysBody` is defined in the relevant module.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TGetPrivateKeysBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for handling wallet import intents, including parameters such as userId, walletName, and an encrypted bundle. This allows for the import of existing wallet accounts in a secure manner.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"importWalletIntent\": { \"accounts\": \"object\"[]; \"encryptedBundle\": \"string\"; \"userId\": \"string\"; \"walletName\": \"string\"; };\n```\n\n----------------------------------------\n\nTITLE: SDK Activity Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for activity status enums, activity types, and result interfaces for various SDK operations including user management, authentication, wallet operations, and policy management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserTag Request Body Type in TypeScript\nDESCRIPTION: Type alias definition for the request body parameters of the UpdateUserTag API endpoint. This type is derived from the operations type collection, specifically targeting the body parameters of the PublicApiService_UpdateUserTag operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateUserTagBody = operations[\"PublicApiService_UpdateUserTag\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys - TypeScript\nDESCRIPTION: Handles the deletion of private keys. The function requires TDeletePrivateKeysBody as input, with TSignedRequest determining the output. Correct input structure is critical for successful operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePrivateKeys(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamp Email Authentication in TurnkeyBrowserClient\nDESCRIPTION: The `stampEmailAuth` TypeScript function is responsible for generating a signed request to authenticate via email within the Turnkey system. It takes a `TEmailAuthBody` object as input, which contains the necessary information for email authentication. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest` representing the signed email authentication request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampEmailAuth**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1832](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1832)\n\n#### Parameters\n\n##### input\n\n`TEmailAuthBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampEmailAuth`](TurnkeyBrowserClient.mdx#stampemailauth)\n```\n\n----------------------------------------\n\nTITLE: Updating Wallet in Turnkey SDK Browser Client (TypeScript)\nDESCRIPTION: The updateWallet method updates a wallet. It takes an input of type TUpdateWalletBody and returns a Promise that resolves to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_134\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWallet(input: TUpdateWalletBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts in TypeScript SDK\nDESCRIPTION: The method 'stampCreateWalletAccounts' handles wallet account creation, taking 'TCreateWalletAccountsBody' and returning a Promise that could resolve to a TSignedRequest. This functionality is inherited from the 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateWalletAccounts**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Fetching API Keys with SDK Client\nDESCRIPTION: This method, stampGetApiKeys, fetches a list of API keys. The input parameter object is required to be of type TGetApiKeysBody. The method returns a Promise that resolves to either undefined or a TSignedRequest object, offering the result of the API keys retrieval operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetApiKeys**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent\nDESCRIPTION: This snippet specifies the parameters for initializing an OTP authentication intent. It includes fields for the user's contact information, email customization details, and SMS settings necessary for sending out OTPs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n\\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Listing Wallet Accounts in Turnkey SDK - TypeScript\nDESCRIPTION: This snippet defines the getWalletAccounts function which takes an input and returns a promise resolving to an object containing an array of accounts. It acts as an API endpoint for listing all accounts within a specific wallet through a POST request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getWalletAccounts = (input) => Promise<{ accounts: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for approveActivity Function\nDESCRIPTION: Type definition for the approveActivity function that processes various authentication and organization management intents. The function takes an input parameter and returns a Promise containing activity details including approval status, timestamps, and detailed intent information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napproveActivity(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating API Client instance\nDESCRIPTION: This snippet demonstrates how to create an API Client instance using the Turnkey SDK, allowing secure API requests to be signed using the specified API credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst apiClient = turnkey.apiClient();\nconst walletsResponse = await apiClient.getWallets();\n\n// this will sign the request with the configured api credentials\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for SDK Operations\nDESCRIPTION: Comprehensive type definitions for API operations including authentication methods, wallet management, private key operations, policy management, and organizational features. Includes enums for address formats, curves, and transaction types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  MAT_BITCOIN_REGTEST_P2PKH | ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH | \n  ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH | ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH | \n  ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR | ADDRESS_FORMAT_SEI | \n  ADDRESS_FORMAT_XLM | ADDRESS_FORMAT_DOGE_MAINNET | \n  ADDRESS_FORMAT_DOGE_TESTNET | ADDRESS_FORMAT_TON_V3R2 | \n  ADDRESS_FORMAT_TON_V4R2 | ADDRESS_FORMAT_XRP[]; \n  curve: CURVE_SECP256K1 | CURVE_ED25519; \n  encryptedBundle: string; \n  privateKeyName: string; \n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeysInput type alias in TypeScript\nDESCRIPTION: This code snippet defines the `TGetApiKeysInput` type alias as an object with a `body` property.  The `body` property is of type `TGetApiKeysBody`, which specifies the structure expected in the request body for the `get_api_keys` API endpoint. It is located in the `public_api.fetcher.d.ts` file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TGetApiKeysInput\n *\n * > **TGetApiKeysInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1444\n *\n * `POST /public/v1/query/get_api_keys`\n *\n * ## Properties\n *\n * ### body\n *\n * > **body**: [`TGetApiKeysBody`](TGetApiKeysBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1445\n */\n```\n\n----------------------------------------\n\nTITLE: Defining getActivity Function in TypeScript\nDESCRIPTION: Declares a constant function getActivity that takes an input parameter and returns a Promise. The Promise resolves to an object containing detailed activity information, including approval status, creation time, failure details, and various intent types for different operations within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getActivity: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... various intent types ... */ }; /* ... more properties ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Fetching Default SEI Account at Index - TypeScript\nDESCRIPTION: This function, `defaultSeiAccountAtIndex`, is designed to retrieve a default SEI wallet account using a provided numeric path index. It returns an instance of `WalletAccount`, which can be used to manage and interact with a wallet. The function relies on internal SDK server structures and assumes the availability of account-related utilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultSeiAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction defaultSeiAccountAtIndex(pathIndex: number): WalletAccount { /* Implementation details */ }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias: TListPrivateKeyTagsResponse in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias called TListPrivateKeyTagsResponse which represents the schema of a successful response (200) from the PublicApiService_ListPrivateKeyTags API operation. The type alias is derived from the specific structure of the responses defined in the SDK specifications, ensuring type safety in API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListPrivateKeyTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TListPrivateKeyTagsResponse = operations[\\\"PublicApiService_ListPrivateKeyTags\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Getting WebAuthn Attestation - TypeScript\nDESCRIPTION: The getWebAuthnAttestation function accepts CredentialCreationOptions and returns a Promise containing an object with attestation information including attestationObject, clientDataJson, credentialId, and supported transport types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/getWebAuthnAttestation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getWebAuthnAttestation(options): Promise<{ attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Timestamp and Votes in TypeScript\nDESCRIPTION: Defines types for activity timestamps and votes, including nanosecond precision for timestamps and an array of vote objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n`updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Requests for Activity and Feature Management in TypeScript\nDESCRIPTION: Methods for generating signed requests to reject activities and manage organization features. These methods handle the authentication layer for organization-level operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampRejectActivity(input): Promise<undefined | TSignedRequest>\n\nstampRemoveOrganizationFeature(input): Promise<undefined | TSignedRequest>\n\nstampSetOrganizationFeature(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeySigner Class\nDESCRIPTION: This constructor initializes a new instance of the `TurnkeySigner` class. It requires a Turnkey client and an organization ID to be passed as input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/solana/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [solana/src/index.ts:17](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/solana/src/index.ts#L17)\n */\n\n/**\n * @param `input`\n */\n\n/**\n * `TClient`\n */\n\n/**\n * `string`\n */\n\n```\n\n----------------------------------------\n\nTITLE: Signing List Private Key Tags Request\nDESCRIPTION: The `signListPrivateKeyTags` function is used to create a signed request for listing private key tags. It requires a `TListPrivateKeyTagsInput` object containing the necessary parameters for the request.  It uses WebAuthn to generate a cryptographic signature, encapsulating the request data within a `SignedRequest` object, ready for submission to the Turnkey service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signListPrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See ListPrivateKeyTags\n */\n> **signListPrivateKeyTags**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Stamp Init Import Wallet with Turnkey SDK\nDESCRIPTION: The `stampInitImportWallet` function is responsible for initializing the import of a wallet using the Turnkey SDK. It takes `TInitImportWalletBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampInitImportWallet**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2088](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2088)\n\n#### Parameters\n\n##### input\n\n`TInitImportWalletBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intent Types\nDESCRIPTION: Comprehensive TypeScript interfaces for various SDK intents including authentication, wallet management, and cryptographic operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyProvider in React\nDESCRIPTION: Setup of TurnkeyProvider component with configuration options including API base URL, organization ID, WebAuthn settings, and server endpoints.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TurnkeyProvider } from \"@turnkey/sdk-react\";\n\nconst turnkeyConfig = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  rpId: process.env.RPID, // Your application's domain for WebAuthn flows\n  iframeUrl: \"https://auth.turnkey.com\",\n  serverSignUrl: \"http://localhost:3000/api\", // Backend endpoint for signing operations (optional)\n};\n\nfunction App() {\n  return (\n    <TurnkeyProvider config={turnkeyConfig}>\n      {/* Rest of the app */}\n    </TurnkeyProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize Import Wallet Request in TypeScript\nDESCRIPTION: Method to stamp a request for initializing the import of a wallet. It takes an input of type TInitImportWalletBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitImportWallet(input: TInitImportWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Result Structure - TypeScript\nDESCRIPTION: Defines the structure for updating user information which contains a userId of type string. This is necessary for handling user updates in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyRequestError Class in TypeScript\nDESCRIPTION: Class definition for TurnkeyRequestError that extends the base Error class with additional properties for handling GRPC status details and error codes. Includes constructor implementation for initializing error properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/TurnkeyRequestError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TurnkeyRequestError extends Error {\n  details: null | any[];\n  code: number;\n\n  constructor(input: GrpcStatus): TurnkeyRequestError;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing User Email Recovery in Turnkey SDK (TS)\nDESCRIPTION: This method initializes the user email recovery process using the Turnkey SDK. It takes a `TInitUserEmailRecoveryBody` as input and returns a Promise that resolves to an object representing the result of the email recovery initialization. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n> **initUserEmailRecovery**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1984](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1984)\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account Using Turnkey SDK\nDESCRIPTION: Method to export a specific wallet account with required parameters for identification and retrieval. Supports secure wallet account export operations in the Turnkey platform.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportWalletAccount(params: ExportWalletAccountParams): Promise<ExportWalletAccountResponse>\n```\n\n----------------------------------------\n\nTITLE: Extracting Private Key from PKCS8 Bytes in TypeScript\nDESCRIPTION: Function that takes a PKCS#8 formatted private key as a Uint8Array and extracts the actual 32-byte private key data. The function expects the key data to be positioned at byte 36 in the input array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/extractPrivateKeyFromPKCS8Bytes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nextractPrivateKeyFromPKCS8Bytes(privateKey: Uint8Array): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Creation Result Types\nDESCRIPTION: Defines complex type structures for tracking results of private key creation, authentication, and organizational activities with multiple status and activity type enumerations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `otpAuthResultV2`: { `otpId`: `string` };\n  `initUserEmailRecoveryResult`: { `userId`: `string` };\n  `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string` };\n  `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string` };\n  `recoverUserResult`: { `authenticatorId`: `string`[] };\n  // ... other result type definitions\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticators in TypeScript\nDESCRIPTION: The stampGetAuthenticators function fetches authenticator information. It takes TGetAuthenticatorsBody as input and returns a Promise resolving to either undefined or a TSignedRequest. It depends on the TurnkeyBrowserClient inheritance.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_106\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetAuthenticators(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Policy in TypeScript SDK\nDESCRIPTION: The 'stampCreatePolicy' function is used to create a single policy. It takes 'TCreatePolicyBody' and returns a Promise with either an undefined or TSignedRequest, relying on inheritance from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreatePolicy**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Status Enumeration - TypeScript\nDESCRIPTION: This snippet enumerates possible statuses for activities related to user management, providing a structured way to signify the current state of operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Running the Email Auth Example Application\nDESCRIPTION: Command to start the NextJS development server on port 3000. After execution, the email authentication example can be accessed at http://localhost:3000.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Signet P2WPKH Account in TypeScript\nDESCRIPTION: This function creates a Bitcoin Signet Pay-to-Witness-Public-Key-Hash (P2WPKH) wallet account using a specified path index. It returns a WalletAccount object. The function is defined in the turnkey-helpers.ts file of the SDK browser package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinSignetP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinSignetP2WPKHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TUpdatePolicyInput type alias as an object with a single property 'body' of type TUpdatePolicyBody. It is used to structure the input for policy update operations in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTUpdatePolicyInput = object\n```\n\n----------------------------------------\n\nTITLE: Recovering a User with Turnkey SDK (TS)\nDESCRIPTION: This method facilitates user recovery within the Turnkey SDK. It takes a `TRecoverUserBody` as input and returns a Promise that resolves to an object, which represents the result of the user recovery operation. The method is inherited from `TurnkeyServerClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n> **recoverUser**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2081](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2081)\n```\n\n----------------------------------------\n\nTITLE: Create Wallet in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a wallet using the TurnkeyBrowserClient. It takes a `TCreateWalletBody` as input and returns a Promise that resolves to an object representing the created wallet.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> **createWallet**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1335](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1335)\n\n#### Parameters\n\n##### input\n\n`TCreateWalletBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createWallet`](TurnkeyBrowserClient.mdx#createwallet)\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadBody Type Alias in TypeScript\nDESCRIPTION: Type definition for TSignRawPayloadBody which extends the parameters of the PublicApiService_SignRawPayload operation with commandOverrideParams. This type is used for raw payload signing operations in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignRawPayloadBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSignRawPayloadBody** = `operations`\\[`\"PublicApiService_SignRawPayload\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\\[`\"parameters\"`\\] & `commandOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Stamp Init User Email Recovery with Turnkey SDK\nDESCRIPTION: This function `stampInitUserEmailRecovery` is responsible for creating a signed request to initialize user email recovery using the Turnkey SDK. It takes a `TInitUserEmailRecoveryBody` as input, and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampInitUserEmailRecovery**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2161](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2161)\n\n#### Parameters\n\n##### input\n\n`TInitUserEmailRecoveryBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateRootQuorumIntent Interface in TypeScript\nDESCRIPTION: Interface for updating root quorum settings, defining threshold and user IDs for approval quorum.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{ threshold: number; userIds: string[]; }\n```\n\n----------------------------------------\n\nTITLE: WebauthnStamper Class Constructor\nDESCRIPTION: Constructor for initializing a WebauthnStamper instance with configuration parameters including rpId, timeout, userVerification, and allowCredentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/index/classes/WebauthnStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew WebauthnStamper(config: TWebauthnStamperConfig): WebauthnStamper\n```\n\n----------------------------------------\n\nTITLE: Defining v1Wallet Interface in TypeScript\nDESCRIPTION: This snippet defines the v1Wallet interface, which represents a wallet object with properties such as creation timestamp, export/import status, and identification information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1Wallet {\n  createdAt: externaldatav1Timestamp;\n  exported: boolean;\n  imported: boolean;\n  updatedAt: externaldatav1Timestamp;\n  walletId: string;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetActivities Function in TypeScript\nDESCRIPTION: Declares the signGetActivities function, which takes an input of type TGetActivitiesInput and optional TurnkeyCredentialRequestOptions. It returns a Promise resolving to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetActivities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetActivities: (input: TGetActivitiesInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Requesting Wallet Account Assertion with Turnkey HTTP SDK - TypeScript\nDESCRIPTION: The function signGetWalletAccount prepares and returns a Promise that resolves to a signed GetWalletAccount request. It accepts an input of type TGetWalletAccountInput and optional TurnkeyCredentialRequestOptions. The output is a Promise containing a SignedRequest object tailored for the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function signGetWalletAccount(input: TGetWalletAccountInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n  // Implementation to request a WebAuthn assertion\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Out in Turnkey\nDESCRIPTION: This method clears all data pertaining to an end-user session. It returns a Promise that resolves to a boolean value, likely indicating the success of the logout operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Clears out all data pertaining to an end user session.\n */\nlogout(): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Data with SDK Client\nDESCRIPTION: The stampGetOrganization method fetches organization details, requiring an input of TGetOrganizationBody. It returns a Promise resolving to either undefined or a TSignedRequest, facilitating organization information retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetOrganization**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Getting API Keys with Turnkey SDK\nDESCRIPTION: Async function that retrieves API key details for a user by making a POST request to /public/v1/query/get_api_keys endpoint. Takes a TGetApiKeysInput parameter and returns a Promise containing an array of API key objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiKeys(input): Promise<{ apiKeys: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Details - TypeScript\nDESCRIPTION: The `getOrganization` function is a Promise-based method that retrieves detailed information about an organization using a specified input type. It requires an object adhering to the `TGetOrganizationInput` type and returns an object containing organization data which includes features, invitations, and user information among other details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getOrganization(input: TGetOrganizationInput): Promise<{ organizationData: { features: object[]; invitations: object[]; name: string; organizationId: string; policies: object[]; privateKeys: object[]; rootQuorum: { threshold: number; userIds: string[]; }; tags: object[]; users: object[]; wallets: object[]; }; } }> {\n    // API call logic\n    return await api.post('/public/v1/query/get_organization', input);\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication in Turnkey SDK\nDESCRIPTION: Method for performing OAuth authentication with the provided request. Returns a promise resolving to a Session or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noauth: (request: OauthRequest) => Promise<undefined | Session>\n```\n\n----------------------------------------\n\nTITLE: defaultSolanaAccountAtIndex Function Definition\nDESCRIPTION: This snippet shows the definition of the `defaultSolanaAccountAtIndex` function, which takes a `pathIndex` as a number and returns a `WalletAccount`. It's part of the `@turnkey/sdk-browser` package and helps in creating Solana accounts at different derivation paths.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultSolanaAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param {number} pathIndex\n * @returns {WalletAccount}\n */\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with SDK Client\nDESCRIPTION: The stampGetUser method fetches user information using input of TGetUserBody. It produces a Promise resolving to either undefined or a TSignedRequest, allowing user data retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetUser**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: TurnkeySDKClientConfig Type Alias Definition\nDESCRIPTION: This code snippet defines the `TurnkeySDKClientConfig` type alias. It's a union of `SDKClientConfigWithStamper` and `SDKClientConfigWithReadOnlySession`, indicating the possible client configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeySDKClientConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TurnkeySDKClientConfig** = `SDKClientConfigWithStamper` \\| `SDKClientConfigWithReadOnlySession`\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TSignedRequest in TypeScript\nDESCRIPTION: The TSignedRequest type alias defines the structure of a signed request object used within the Turnkey SDK. It includes properties for the request body, a timestamp for the request, and a URL where the request will be sent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TSignedRequest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TSignedRequest = {\\n  body: string;\\n  stamp: TStamp;\\n  url: string;\\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Accounts TypeScript\nDESCRIPTION: The `exportWalletAccount` function exports wallet account details and is defined in the Turnkey SDK. It returns a Promise resolving to an object containing exported account data. The function takes a parameter of type `TExportWalletAccountBody`, and it inherits from `TurnkeyBaseClient.exportWalletAccount`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"exportWalletAccount(input): Promise<object & object>\"\n```\n\n----------------------------------------\n\nTITLE: Login with Session in Turnkey Browser SDK\nDESCRIPTION: The `loginWithSession` function enables logging in with a session object from server actions. It accepts a `Session` object as input and stores it along with the active client in local storage, returning a promise that resolves to void. This function is designed to be used with an `iframeStamper` and is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n> **loginWithSession**(`session`): `Promise`\\<`void`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:239](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L239)\n\nLog in with a session object. This method uses a session object from server actions and stores it and the active client in local storage\nTo be used in conjunction with an `iframeStamper`.\n\n#### Parameters\n\n##### session\n\n[`Session`](../type-aliases/Session.mdx)\n\n#### Returns\n\n`Promise`\\<`void`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`loginWithSession`](TurnkeyBrowserClient.mdx#loginwithsession)\n```\n\n----------------------------------------\n\nTITLE: Making a Request with Turnkey SDK (TS)\nDESCRIPTION: This method sends an HTTP request within the Turnkey SDK. It's a generic function that takes a URL and a body of type `TBodyType` as input, and returns a Promise that resolves to a response of type `TResponseType`. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n> **request**\\<`TBodyType`, `TResponseType`\\>(`url`, `body`): `Promise`\\<`TResponseType`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:33](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L33)\n```\n\n----------------------------------------\n\nTITLE: Signing ListPrivateKeyTags Request with WebAuthn\nDESCRIPTION: Generates a signed request for listing private key tags using WebAuthn authentication. Requires input parameters and optional credential request options. Returns a Promise with a signed request ready to be sent to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signListPrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signListPrivateKeyTags: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUsersResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the `TGetUsersResponse` type alias using TypeScript. It specifies that the response schema for a successful `PublicApiService_GetUsers` operation (HTTP status code 200) should be used as the structure for this type. It imports the definition from a generated file, which suggests automated SDK API type generation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"// Type Alias: TGetUsersResponse\\n\\n// > **TGetUsersResponse** = `operations`[\\\"PublicApiService_GetUsers\\\"][\"responses\"][\"200\"][\"schema\"]\\n\\n// Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:234](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L234)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Sessions - TypeScript\nDESCRIPTION: The `stampCreateReadWriteSession` function accepts an input formatted as `TCreateReadWriteSessionBody` and returns a promise that resolves to undefined or a `TSignedRequest`, focusing on creating read-write sessions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateReadWriteSession(input: TCreateReadWriteSessionBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intent Structure\nDESCRIPTION: This snippet outlines the 'signTransactionIntent', detailing the parameters required to sign a transaction, including the privateKeyId and the type of transaction being signed (Ethereum or Solana).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: TRANSACTION_TYPE_ETHEREUM | TRANSACTION_TYPE_SOLANA; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Implementing Turnkey Signer with Ethers\nDESCRIPTION: Complete example demonstrating how to initialize TurnkeySigner, connect to a provider, and perform various Ethereum operations including checking balance, signing and sending transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"ethers\";\nimport { TurnkeySigner } from \"@turnkey/ethers\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\n\nasync function main() {\n  const network = \"goerli\";\n  const provider = new ethers.providers.InfuraProvider(network);\n\n  const turnkeyClient = new TurnkeyClient(\n    {\n      baseUrl: \"https://api.turnkey.com\",\n    },\n    // This uses API key credentials.\n    // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:\n    // new WebauthnStamper({...options...})\n    new ApiKeyStamper({\n      apiPublicKey: \"...\",\n      apiPrivateKey: \"...\",\n    }),\n  );\n\n  // Initialize a Turnkey Signer\n  const turnkeySigner = new TurnkeySigner({\n    client: turnkeyClient,\n    organizationId: \"...\",\n    signWith: \"...\",\n  });\n\n  // Connect it with a Provider (https://docs.ethers.org/v6/api/providers/)\n  const connectedSigner = turnkeySigner.connect(provider);\n\n  const chainId = await connectedSigner.getChainId();\n  const address = await connectedSigner.getAddress();\n  const balance = await connectedSigner.getBalance();\n  const transactionCount = await connectedSigner.getTransactionCount();\n\n  console.log(`Network\\n\\t${network} (chain ID ${chainId})`);\n  console.log(`Address\\n\\t${address}`);\n  console.log(`Balance\\n\\t${String(balance)}`);\n  console.log(`Transaction count\\n\\t${transactionCount}`);\n\n  const transactionRequest = {\n    to: \"0x2Ad9eA1E677949a536A270CEC812D6e868C88108\",\n    value: ethers.utils.parseEther(\"0.0001\"),\n    type: 2,\n  };\n\n  const signedTx = await connectedSigner.signTransaction(transactionRequest);\n\n  console.log(`Signed transaction\\n\\t${signedTx}`);\n\n  if (balance.isZero()) {\n    let warningMessage =\n      \"\\nWarning: the transaction won't be broadcasted because your account balance is zero.\\n\";\n    if (network === \"goerli\") {\n      warningMessage +=\n        \"Use https://goerlifaucet.com/ to request funds on Goerli, then run the script again.\\n\";\n    }\n\n    console.warn(warningMessage);\n    return;\n  }\n\n  const sentTx = await connectedSigner.sendTransaction(transactionRequest);\n\n  console.log(\n    `Transaction sent!\\n\\thttps://${network}.etherscan.io/tx/${sentTx.hash}`,\n  );\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Update Private Key Tag Method Definition in TypeScript\nDESCRIPTION: Method to update a private key tag. Takes a TUpdatePrivateKeyTagBody input parameter and returns a Promise resolving to a combined object type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePrivateKeyTag(input: TUpdatePrivateKeyTagBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Users in TypeScript SDK\nDESCRIPTION: The 'stampCreateUsers' method facilitates the creation of users by taking a 'TCreateUsersBody' and returning a Promise that may yield a TSignedRequest. It inherits operational behavior from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateUsers**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet in Turnkey SDK\nDESCRIPTION: Method for creating a wallet with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWallet(input: TCreateWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition: TCreateUsersBody in TypeScript\nDESCRIPTION: Defines the TCreateUsersBody type alias. It represents the body of the `POST /public/v1/submit/create_users` request, as specified in the PublicApiService_CreateUsers operation.  It utilizes a type from a generated file, which suggests it's part of an auto-generated SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\noperations[\"PublicApiService_CreateUsers\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Account - Turnkey SDK TypeScript\nDESCRIPTION: The 'getWalletAccount' function sends an HTTP POST request to retrieve a single wallet account's details. It returns a Promise resolving to an object containing the account's address, address format, creation and update timestamps, curve, organization ID, pathway, and wallet identifiers. This function is defined in 'public_api.fetcher.ts', part of the auto-generated services in the Turnkey SDK. It requires 'TGetWalletAccountInput' as its input parameter, and the function is located at line 666 in the specified file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWalletAccount(input): Promise<{ account: { address: string; addressFormat: \"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"; createdAt: { nanos: string; seconds: string; }; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; organizationId: string; path: string; pathFormat: \"PATH_FORMAT_BIP32\"; updatedAt: { nanos: string; seconds: string; }; walletAccountId: string; walletId: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWhoamiBody Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TGetWhoamiBody type alias. It uses Omit to exclude the organizationId from the original type and includes queryOverrideParams. The type is derived from the OpenAPI specification for the PublicApiService_GetWhoami operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWhoamiBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"/**\n * Type Alias: TGetWhoamiBody\n *\n * > **TGetWhoamiBody** = `Omit`\\<`operations`[`\\\"PublicApiService_GetWhoami\\\"`][`\\\"parameters\\\"`][`\\\"body\\\"`][`\\\"body\\\"`], `\\\"organizationId\\\"`\\> & `queryOverrideParams`\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:283](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L283)\n */\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUsersInput Type Alias\nDESCRIPTION: This code snippet defines the TGetUsersInput type alias as an object with a 'body' property. The 'body' property is of type TGetUsersBody, which likely contains the parameters required for querying users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TGetUsersInput\n *\n * > **TGetUsersInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:3772\n *\n * `POST /public/v1/query/list_users`\n *\n * ## Properties\n *\n * ### body\n *\n * > **body**: [`TGetUsersBody`](TGetUsersBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:3773\n */\n```\n\n----------------------------------------\n\nTITLE: Defining exportWalletAccount Method in TypeScript\nDESCRIPTION: Method for exporting wallet accounts that accepts a TExportWalletAccountBody input and returns a Promise containing response objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexportWalletAccount(input: TExportWalletAccountBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining v1PublicKeyCredentialWithAttestation Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for a public key credential with attestation, including authenticator attachment, client extension results, and response details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_121\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1PublicKeyCredentialWithAttestation: object\n\nauthenticatorAttachment?: \"cross-platform\" | \"platform\" | null\n\nclientExtensionResults: definitions[\"v1SimpleClientExtensionResults\"]\n\nid: string\n\nrawId: string\n\nresponse: definitions[\"v1AuthenticatorAttestationResponse\"]\n\ntype: \"public-key\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Methods in TypeScript\nDESCRIPTION: Declares methods for retrieving API key information, including getApiKey and getApiKeys, with their respective input and output types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiKey(input: TGetApiKeyBody): Promise<{ apiKey: { apiKeyId: string; apiKeyName: string; /* ... other properties ... */ }; }>;\n\ngetApiKeys(input: TGetApiKeysBody = {}): Promise<{ apiKeys: object[]; }>;\n```\n\n----------------------------------------\n\nTITLE: getApiKey Function Definition\nDESCRIPTION: Defines the `getApiKey` function, which asynchronously retrieves details about an API key. It takes an input of type `TGetApiKeyInput` and returns a promise that resolves to an object containing API key information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **getApiKey**: (`input`) => `Promise`\\<{\n  `apiKey`: {\n    `apiKeyId`: `string`;\n    `apiKeyName`: `string`;\n    `createdAt`: {\n      `nanos`: `string`;\n      `seconds`: `string`;\n    };\n    `credential`: {\n      `publicKey`: `string`;\n      `type`: `\"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\"` | `\"CREDENTIAL_TYPE_API_KEY_P256\"` | `\"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\"` | `\"CREDENTIAL_TYPE_API_KEY_SECP256K1\"` | `\"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\"` | `\"CREDENTIAL_TYPE_API_KEY_ED25519\"` | `\"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\"` | `\"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\"` | `\"CREDENTIAL_TYPE_OAUTH_KEY_P256\"`;\n    };\n    `expirationSeconds`: `string`;\n    `updatedAt`: {\n      `nanos`: `string`;\n      `seconds`: `string`;\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Initializing WebAuthn Assertion for API-Only User Creation\nDESCRIPTION: Function to request a WebAuthn assertion and generate a signed request for creating API-only users in the Turnkey platform. Requires input parameters for user creation and optional WebAuthn credential request options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateApiOnlyUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signCreateApiOnlyUsers: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Using signUpdatePolicy to Create Signed Policy Update Requests in TypeScript\nDESCRIPTION: The signUpdatePolicy function requests a WebAuthn assertion and returns a signed UpdatePolicy request. It takes a TUpdatePolicyInput object and optional TurnkeyCredentialRequestOptions, and returns a Promise containing a SignedRequest that can be POSTed to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signUpdatePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**signUpdatePolicy**(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Refresh Session Implementation in TypeScript\nDESCRIPTION: Method to refresh an existing Session using either passkeyStamper for READ_ONLY sessions or iframeStamper for READ_WRITE sessions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefreshSession(params: RefreshSessionParams): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Embedded Keys in Iframe\nDESCRIPTION: Example showing how to create a TurnkeyBrowserSDK instance, initialize an iframe client, and manage embedded keys using clearEmbeddedKey() and initEmbeddedKey() functions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\n// create an instance of TurnkeyBrowserSDK\nconst turnkeyBrowserSDK = new Turnkey(config);\n\n// create an instance of TurnkeyIframeClient\nconst iframeClient = await turnkeyBrowserSDK.iframeClient({\n  iframeContainer: document.getElementById(\n    \"turnkey-auth-iframe-container-id\",\n  ),\n  iframeUrl: \"https://auth.turnkey.com\",\n  iframeElementId: \"turnkey-auth-iframe-element-id\",\n});\n\n// Clear the existing embedded key\nawait iframeClient.clearEmbeddedKey();\n\nconst newPublicKey = await iframeClient.initEmbeddedKey();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Accounts in TypeScript\nDESCRIPTION: stampGetWalletAccounts provides multiple wallet accounts detail accessed via TGetWalletAccountsBody input, with a Promise return type resolving into undefined or TSignedRequest, all within TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_120\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccounts(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Generating Stamp Requests for Key Management Operations in TypeScript\nDESCRIPTION: Methods that prepare signed requests for key management operations like exporting private keys, deleting private keys, and managing private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportPrivateKey(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePrivateKeys(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePrivateKeyTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Delete Sub-Organization Body in TypeScript\nDESCRIPTION: The type alias TDeleteSubOrganizationBody is defined to represent the structure of the request body for the PublicApiService_DeleteSubOrganization operation. This includes parameters relevant to deleting a sub-organization and command override parameters. It combines existing types in a specific format dictated by the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteSubOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteSubOrganizationBody = operations[\"PublicApiService_DeleteSubOrganization\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams;\n```\n\n----------------------------------------\n\nTITLE: Defining Root User Parameters V2 Interface in TypeScript\nDESCRIPTION: This snippet defines the v1RootUserParamsV2 interface, extending v1RootUserParams with an additional property for OAuth providers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_133\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RootUserParamsV2: object\n\napiKeys: definitions[\"apiApiKeyParams\"][]\n\nDescription: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\nauthenticators: definitions[\"v1AuthenticatorParamsV2\"][]\n\nDescription: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\noauthProviders: definitions[\"v1OauthProviderParams\"][]\n\nDescription: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.\n\nuserEmail?: string\n\nDescription: The user's email address.\n\nuserName: string\n\nDescription: Human-readable name for a User.\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinMainnetP2TRAccountAtIndex Function in TypeScript\nDESCRIPTION: This function takes a pathIndex as a number parameter and returns a WalletAccount object. It is used to generate a Bitcoin mainnet P2TR (Pay-to-Taproot) account at a specific derivation path index.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinMainnetP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinMainnetP2TRAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Endpoint in TypeScript\nDESCRIPTION: Documentation for the transaction signing endpoint in the Turnkey SDK. This snippet shows the HTTP method, path, and parameter type for signing transactions via the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signTransaction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nSign Transaction\n\nSign a transaction\n\n`POST /public/v1/submit/sign_transaction`\n\n## Parameters\n\n### input\n\n[`TSignTransactionInput`](../type-aliases/TSignTransactionInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Email in Turnkey SDK\nDESCRIPTION: This function handles email authentication. It takes a `TEmailAuthBody` object as input and returns a Promise resolving to an object.  This is inherited from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> **emailAuth**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1812](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1812)\n```\n\n----------------------------------------\n\nTITLE: Using signDeleteSubOrganization Function in TypeScript\nDESCRIPTION: This function requests a WebAuthn assertion and returns a signed DeleteSubOrganization request that can be POSTed to the Turnkey API. It requires TDeleteSubOrganizationInput and optional TurnkeyCredentialRequestOptions parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeleteSubOrganization: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Environment\nDESCRIPTION: Initial setup commands to clone the repository, install dependencies and build the project using pnpm.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-biconomy-aa/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-biconomy-aa/\n```\n\n----------------------------------------\n\nTITLE: Signing TurnkeyApi User Tags in TypeScript\nDESCRIPTION: This function, signCreateUserTag, requests a WebAuthn assertion and generates a signed CreateUserTag request. It encapsulates asynchronous operations with promises, leveraging input specifications defined by TCreateUserTagInput and optional parameters by TurnkeyCredentialRequestOptions. The output is a Promise of a SignedRequest, meant for subsequent POST operations to Turnkey. Users should ensure dependencies such as the specified type aliases are included.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signCreateUserTag**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\\n\\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:1908](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L1908)\\n\\nRequest a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with signCreatePrivateKeys in TypeScript\nDESCRIPTION: The `signCreatePrivateKeys` function requests a WebAuthn assertion and returns a signed `CreatePrivateKeys` request that can be POSTed to Turnkey. It requires `input` as `TCreatePrivateKeysInput` and optional `options` as `TurnkeyCredentialRequestOptions`. The output is a `Promise` containing a `SignedRequest`. Dependencies include the Turnkey SDK components mentioned in the imports.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreatePrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signCreatePrivateKeys**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:1704](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L1704)\n\nRequest a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed CreatePolicy Request Using TypeScript\nDESCRIPTION: The signCreatePolicy function generates a WebAuthn assertion and produces a signed CreatePolicy request. It accepts an input of type TCreatePolicyInput and an optional parameter of type TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreatePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function signCreatePolicy(input: TCreatePolicyInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details would go here\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Server Sign in Turnkey\nDESCRIPTION: This method performs a server-side signing operation. It accepts a `methodName` (string), an array of `params` (any[]), and an optional `serverSignUrl` (string). It returns a Promise that resolves to a value of type `TResponseType`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nserverSign<TResponseType>(\n methodName: string,\n params: any[],\n serverSignUrl?: string\n ): Promise<TResponseType>\n```\n\n----------------------------------------\n\nTITLE: Defining getActivities Method in TypeScript\nDESCRIPTION: Method for retrieving activities that takes an optional TGetActivitiesBody input and returns a Promise containing an array of activity objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivities(input: TGetActivitiesBody = {}): Promise<{ activities: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Getting Public Key with TurnkeyWalletClient\nDESCRIPTION: Shows how to access a wallet's public key using TurnkeyWalletClient for authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst walletClient = turnkeySDK.walletClient(new EthereumWallet());\nconst publicKey = await walletsClient.getPublicKey();\n```\n\n----------------------------------------\n\nTITLE: Stamp Oauth with Turnkey SDK\nDESCRIPTION: This function `stampOauth` creates a signed request for OAuth operations using the Turnkey SDK. It accepts `TOauthBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampOauth**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2198](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2198)\n\n#### Parameters\n\n##### input\n\n`TOauthBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Operation Return Promise in TypeScript\nDESCRIPTION: This TypeScript snippet represents a complex promise that returns an object detailing various SDK activities and intents. It encompasses numerous operations such as creating users, managing authentication, and setting up organizations. Key dependencies are TypeScript and a suitable runtime environment. The structure involves nested objects capturing operation-specific data and is essential for understanding the response format of SDK operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicies.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { nanos: string; seconds: string; };\n    failure: { code: number; details: object & object[]; message: string; };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: { rk: ...; };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n              clientDataJson: string;\n              transports: ...[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };    \n      acceptInvitationIntentV2: {\n        authenticator: {\n          attestation: {\n            attestationObject: string;\n            clientDataJson: string;\n            credentialId: string;\n            transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" |\n              \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" |\n              \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n          };\n          authenticatorName: string;\n          challenge: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      activateBillingTierIntent: { productId: string; };\n      approveActivityIntent: { fingerprint: string; };\n      createApiKeysIntent: { apiKeys: object[]; userId: string; };\n      createApiKeysIntentV2: { apiKeys: object[]; userId: string; };\n      createApiOnlyUsersIntent: { apiOnlyUsers: object[]; };\n      createAuthenticatorsIntent: { authenticators: object[]; userId: string; };\n      createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; };\n      createInvitationsIntent: { invitations: object[]; };\n      createOauthProvidersIntent: { oauthProviders: object[]; userId: string; };\n      createOrganizationIntent: {\n        organizationName: string;\n        rootAuthenticator: {\n          attestation: {\n            authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: { rk: ...; };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n              clientDataJson: string;\n              transports: ...[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        rootEmail: string;\n        rootUserId: string;\n      };\n      createOrganizationIntentV2: {\n        organizationName: string;\n        rootAuthenticator: {\n          attestation: {\n            attestationObject: string;\n            clientDataJson: string;\n            credentialId: string;\n            transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" |\n              \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" |\n              \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n          };\n          authenticatorName: string;\n          challenge: string;\n        };\n        rootEmail: string;\n        rootUserId: string;\n      };\n      createPoliciesIntent: { policies: object[]; };\n      createPolicyIntent: {\n        effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n        notes: string;\n        policyName: string;\n        selectors: object[];\n      };\n      createPolicyIntentV2: {\n        effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n        notes: string;\n        policyName: string;\n        selectors: object[];\n      };\n      createPolicyIntentV3: {\n        condition: string;\n        consensus: string;\n        effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n        notes: string;\n        policyName: string;\n      };\n      createPrivateKeysIntent: { privateKeys: object[]; };\n      createPrivateKeysIntentV2: { privateKeys: object[]; };\n      createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; };\n      createReadOnlySessionIntent: {};\n      createReadWriteSessionIntent: {\n        apiKeyName: string;\n        email: string;\n        expirationSeconds: string;\n        targetPublicKey: string;\n      };\n      createReadWriteSessionIntentV2: {\n        apiKeyName: string;\n        expirationSeconds: string;\n        invalidateExisting: boolean;\n        targetPublicKey: string;\n        userId: string;\n      };\n      createSubOrganizationIntent: {\n        name: string;\n        rootAuthenticator: {\n          attestation: {\n            attestationObject: string;\n            clientDataJson: string;\n            credentialId: string;\n            transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" |\n              \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" |\n              \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n          };\n          authenticatorName: string;\n          challenge: string;\n        };\n      };\n      createSubOrganizationIntentV2: {\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n      };\n      createSubOrganizationIntentV3: {\n        privateKeys: object[];\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n      };\n      createSubOrganizationIntentV4: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createSubOrganizationIntentV5: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createSubOrganizationIntentV6: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createSubOrganizationIntentV7: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        disableOtpEmailAuth: boolean;\n        disableSmsAuth: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createUsersIntent: { users: object[]; };\n      createUsersIntentV2: { users: object[]; };\n      createUsersIntentV3: { users: object[]; };\n      createUserTagIntent: { userIds: string[]; userTagName: string; };\n      createWalletAccountsIntent: { accounts: object[]; walletId: string; };\n      createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; };\n      deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; };\n      deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; };\n      deleteInvitationIntent: { invitationId: string; };\n      deleteOauthProvidersIntent: { providerIds: string[]; userId: string; };\n      deleteOrganizationIntent: { organizationId: string; };\n      deletePaymentMethodIntent: { paymentMethodId: string; };\n      deletePolicyIntent: { policyId: string; };\n      deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; };\n      deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; };\n      deleteSubOrganizationIntent: { deleteWithoutExport: boolean; };\n      deleteUsersIntent: { userIds: string[]; };\n      deleteUserTagsIntent: { userTagIds: string[]; };\n      deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; };\n      disablePrivateKeyIntent: { privateKeyId: string; };\n      emailAuthIntent: {\n        apiKeyName: string;\n        email: string;\n        emailCustomization: {\n          appName: string;\n          logoUrl: string;\n          magicLinkTemplate: string;\n          templateId: string;\n          templateVariables: string;\n        };\n        expirationSeconds: string;\n        invalidateExisting: boolean;\n        sendFromEmailAddress: string;\n        sendFromEmailSenderName: string;\n        targetPublicKey: string;\n      };\n      emailAuthIntentV2: {\n        apiKeyName: string;\n        email: string;\n        emailCustomization: {\n          appName: string;\n          logoUrl: string;\n          magicLinkTemplate: string;\n          templateId: string;\n          templateVariables: string;\n        };\n        expirationSeconds: string;\n        invalidateExisting: boolean;\n        sendFromEmailAddress: string;\n        sendFromEmailSenderName: string;\n        targetPublicKey: string;\n      };\n      exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; };\n      exportWalletAccountIntent: { address: string; targetPublicKey: string; };\n      exportWalletIntent: {\n        language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" |\n          \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" |\n          \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" |\n          \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\";\n        targetPublicKey: string;\n        walletId: string;\n      };\n      importPrivateKeyIntent: {\n        addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" |\n          \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" |\n          \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" |\n          \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" |\n          \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" |\n          \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" |\n          \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" |\n          \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" |\n          \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" |\n          \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" |\n          \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" |\n          \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\")[];\n      };\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Policy and Quorum Management Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for stamping requests to update policies and root quorum settings. These methods prepare signed requests for policy and quorum management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_128\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdatePolicy(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateRootQuorum(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicy(input): Promise<object & object>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateRootQuorum(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining v1Result Interface in TypeScript\nDESCRIPTION: This extensive interface represents various possible results from different API operations. It includes optional properties for different types of results, such as creating API keys, managing users, and handling authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1Result {\n  acceptInvitationResult?: definitions[\"v1AcceptInvitationResult\"];\n  activateBillingTierResult?: definitions[\"billingActivateBillingTierResult\"];\n  createApiKeysResult?: definitions[\"v1CreateApiKeysResult\"];\n  // ... (many more optional properties)\n  updateWalletResult?: definitions[\"v1UpdateWalletResult\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet in TypeScript\nDESCRIPTION: The `createWallet` function initializes a new wallet and takes an input parameter of type `TCreateWalletBody`. The function returns a Promise that resolves to an object representing the new wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncreateWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Export Private Key Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for exporting private keys in the TurnKey SDK. Requires a private key identifier and a target public key for encrypted export.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{ `privateKeyId`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: TurnkeyActivityConsensusNeededError Class Definition\nDESCRIPTION: Class definition extending Error to handle consensus-needed scenarios in Turnkey activities. Includes properties for activityId, activityStatus, activityType, and cause, with a constructor that accepts these parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/TurnkeyActivityConsensusNeededError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TurnkeyActivityConsensusNeededError extends Error {\n  activityId: string | undefined;\n  activityStatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\" | undefined;\n  activityType: string | undefined;\n  cause: Error | undefined;\n\n  constructor(input: {\n    activityId?: string;\n    activityStatus?: string;\n    activityType?: string;\n    cause?: Error;\n    message: string;\n  }): TurnkeyActivityConsensusNeededError;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Requests for Authentication Operations in TypeScript\nDESCRIPTION: Methods for generating signed requests related to authentication flows including OTP initialization, OAuth, user recovery, and email recovery. These methods handle the authentication layer for identity management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitOtpAuth(input): Promise<undefined | TSignedRequest>\n\nstampInitUserEmailRecovery(input): Promise<undefined | TSignedRequest>\n\nstampOauth(input): Promise<undefined | TSignedRequest>\n\nstampOtpAuth(input): Promise<undefined | TSignedRequest>\n\nstampRecoverUser(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the user recovery result, which consists of an array of authenticator IDs, indicating the devices associated with the user's account for recovery purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Acceptance for User Invitation Intent Object in TypeScript\nDESCRIPTION: This snippet outlines the structure of an intent for accepting invitations, detailing the necessary parameters to include information about the authenticator used and user identification. This design allows for user interactions with invitation-based processes within the SDK, ensuring proper handling of authentication and invitation acceptance.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nintent.acceptInvitationIntent? \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| \"cross-platform\" \\| \"platform\"; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| \"cross-platform\" \\| \"platform\"; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| \"AUTHENTICATOR_TRANSPORT_INTERNAL\" \\| \"AUTHENTICATOR_TRANSPORT_NFC\" \\| \"AUTHENTICATOR_TRANSPORT_USB\" \\| \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; \\}; `type`: \"public-key\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Details\nDESCRIPTION: Method to fetch comprehensive details about an organization, including features, users, wallets, policies, and root quorum configuration\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ngetOrganization(input): Promise<{ organizationData: { features: object[]; invitations: object[]; name: string; organizationId: string; policies: object[]; privateKeys: object[]; rootQuorum: { threshold: number; userIds: string[] }; tags: object[]; users: object[]; wallets: object[]; }}>\n```\n\n----------------------------------------\n\nTITLE: Defining getPublicKey Function in TypeScript\nDESCRIPTION: This function derives a public key from a private key. It accepts a private key as either a Uint8Array or hexstring, and an optional boolean parameter to specify if the resulting public key should be compressed. The function returns the public key as a Uint8Array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/getPublicKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPublicKey(privateKey: string | Uint8Array, isCompressed: boolean = true): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Accounts with getWalletAccounts()\nDESCRIPTION: Method to fetch a list of wallet accounts. Takes an input parameter and returns a promise with an array of account objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ngetWalletAccounts(input): Promise<{ accounts: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Defining TExportPrivateKeyBody Type Alias (Typescript)\nDESCRIPTION: This snippet defines the `TExportPrivateKeyBody` type alias. It is derived from the `operations` type, specifically targeting the `PublicApiService_ExportPrivateKey` operation's parameters, body, and the nested body property. It essentially maps to the expected structure of the request body for the export private key API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **TExportPrivateKeyBody** = `operations`[`\"PublicApiService_ExportPrivateKey\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:44280\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `POST /public/v1/submit/export_private_key`\n */\n```\n\n----------------------------------------\n\nTITLE: Method Definition for command in TypeScript\nDESCRIPTION: The command method executes a given command at the specified URL with a body, utilizing a result key. It is parameterized by TBodyType and TResponseType and returns a Promise of TResponseType. This method is used for sending commands to the server, and it inherits functionality from the TurnkeyServerClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **command**<`TBodyType`, `TResponseType`>(`url`, `body`, `resultKey`): `Promise`<`TResponseType`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:66](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L66)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policies in TypeScript\nDESCRIPTION: The 'stampGetPolicies' function retrieves multiple policies. The input is of type 'TGetPoliciesBody', and the function returns a Promise which resolves to either 'undefined' or 'TSignedRequest'. It is an inherited method from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPolicies**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetPoliciesBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyClient\nDESCRIPTION: Example of initializing the TurnkeyClient with API key stamper and environment variables\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/documents/TurnkeyClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\n\n// Following best practices, define parameters in your .env file\nconst baseUrl = process.env.TURNKEY_BASE_URL || \"https://api.turnkey.com\";\nconst apiPublicKey = process.env.TURNKEY_API_PUBLIC_KEY;\nconst apiPrivateKey = process.env.TURNKEY_API_PRIVATE_KEY;\n\n// Initialize the API key stamper\nconst stamper = new ApiKeyStamper({ apiPublicKey, apiPrivateKey });\n\n// Initialize the Turnkey client and then you're ready to use the Turnkey client! 🎉\nconst client = new TurnkeyClient({ baseUrl }, stamper);\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias for TUpdateUserInput as an object, which is used to specify the structure of the input data for user updating operations. This type alias ensures that the input adheres to the expected structure defined in the SDK. It requires the type `TUpdateUserBody` to be properly imported and utilized as a part of its properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TUpdateUserInput = {\\n  body: TUpdateUserBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Users Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for deleting users. It takes a TDeleteUsersBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUsers(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create OAuth Providers Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating OAuth providers. It takes an input of type TCreateOauthProvidersBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateOauthProviders(input: TCreateOauthProvidersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Login with Wallet in Turnkey Browser SDK\nDESCRIPTION: The `loginWithWallet` function facilitates user login using a browser wallet. It takes a `LoginWithWalletParams` object as input and returns a promise that resolves to void. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n> **loginWithWallet**(`params`): `Promise`\\<`void`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:329](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L329)\n\nLog in with a browser wallet.\n\n#### Parameters\n\n##### params\n\n`LoginWithWalletParams`\n\n#### Returns\n\n`Promise`\\<`void`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`loginWithWallet`](TurnkeyBrowserClient.mdx#loginwithwallet)\n```\n\n----------------------------------------\n\nTITLE: Injecting Credential Bundle into Iframe in TypeScript\nDESCRIPTION: Injects a new credential bundle into the iframe, used for recovery and authentication flows. The bundle should be encrypted to the iframe's initial public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/IframeStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninjectCredentialBundle(bundle)\n```\n\n----------------------------------------\n\nTITLE: Email Authentication in TypeScript\nDESCRIPTION: A method for performing email-based authentication within the Turnkey system, accepting input parameters of type TEmailAuthBody and returning a promise with an object result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nemailAuth(input: TEmailAuthBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policies in TypeScript\nDESCRIPTION: This method retrieves policy information. It takes an optional input parameter and returns a Promise containing an array of policy objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPolicies(input: TGetPoliciesBody = {}): Promise<{ policies: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Stamping Whoami Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get the current user's identity information. Takes a TGetWhoamiBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_102\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWhoami(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining signGetVerifiedSubOrgIds Function in Turnkey SDK\nDESCRIPTION: This TypeScript code defines the `signGetVerifiedSubOrgIds` function. It is an asynchronous function that accepts an input of type `TGetVerifiedSubOrgIdsInput` and optional `TurnkeyCredentialRequestOptions`. It returns a Promise that resolves to a `SignedRequest` object. This function is part of the Turnkey SDK and is used to request a WebAuthn assertion and return a signed `GetVerifiedSubOrgIds` request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetVerifiedSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signGetVerifiedSubOrgIds**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Updating Wallet Information in Turnkey SDK (TypeScript)\nDESCRIPTION: The updateWallet method updates wallet information. It takes a TUpdateWalletBody input and returns a Promise that resolves to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_135\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWallet(input: TUpdateWalletBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP in Turnkey SDK\nDESCRIPTION: Method for verifying a One-Time Password with the provided request. Returns a promise resolving to a Session or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nverifyOtp: (request: VerifyOtpRequest) => Promise<undefined | Session>\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Import in Turnkey Browser SDK\nDESCRIPTION: The `initImportWallet` function initiates the wallet import process within the Turnkey Browser SDK. It takes `TInitImportWalletBody` as input and returns a promise that resolves to an object. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n> **initImportWallet**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2068](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2068)\n\n#### Parameters\n\n##### input\n\n`TInitImportWalletBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`initImportWallet`](TurnkeyBrowserClient.mdx#initimportwallet)\n```\n\n----------------------------------------\n\nTITLE: Defining deleteUsers Functionality in TypeScript\nDESCRIPTION: The deleteUsers function signature specifies the input for deleting multiple users based on their IDs and returns a promise containing user activity details. This function is part of a larger API for managing user data. The function utilizes a complex nested object structure representing user activity and outcomes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteUsers = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP256K\"; };\n```\n\n----------------------------------------\n\nTITLE: Listing User Tags in Turnkey SDK (TS)\nDESCRIPTION: This method retrieves a list of user tags using the Turnkey SDK. It accepts an optional `TListUserTagsBody` object as input (defaults to an empty object) and returns a Promise that resolves to an object with an array of user tag objects. This functionality is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n> **listUserTags**(`input`): `Promise`\\<\\{ `userTags`: `object`[]; \\}\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:625](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L625)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPoliciesBody type alias\nDESCRIPTION: This code snippet defines the `TGetPoliciesBody` type alias. It represents the structure of the body required for the `PublicApiService_GetPolicies` operation when querying policies through the `/public/v1/query/list_policies` endpoint. The type is derived from the generated TypeScript definitions within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetPoliciesBody** = `operations`\\[`\"PublicApiService_GetPolicies\"`]\\[`\"parameters\"`]\\[`\"body\"`]\\[`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Authenticators in TurnkeyBrowserClient\nDESCRIPTION: This TypeScript function, `stampGetAuthenticators`, is responsible for generating a signed request to retrieve multiple authenticators from the Turnkey system. It takes a `TGetAuthenticatorsBody` object as input, potentially containing parameters to filter the list of authenticators. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, representing the signed request needed to retrieve the collection of authenticators.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetAuthenticators**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:288](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L288)\n\n#### Parameters\n\n##### input\n\n`TGetAuthenticatorsBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetAuthenticators`](TurnkeyBrowserClient.mdx#stampgetauthenticators)\n```\n\n----------------------------------------\n\nTITLE: Adding Solana Public Key as Wallet Authenticator\nDESCRIPTION: TypeScript code demonstrating how to add a Solana wallet public key as an API key authenticator using the ApiKeyStamper and TurnkeyClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKeyStamper = new ApiKeyStamper({\n  apiPublicKey: process.env.API_PUBLIC_KEY ?? \"\",\n  apiPrivateKey: process.env.API_PRIVATE_KEY ?? \"\",\n});\n\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, apiKeyStamper);\n\nconst activityPoller = createActivityPoller({\n  client,\n  requestFn: client.createApiKeys,\n});\n\n// See \"Example: Signing with a Solana Wallet\" below for how to implement the SolanaWallet interface\nconst mockWallet = new MockSolanaWallet();\n\n// This is the public key of the wallet that will be added as an API key and used to stamp future requests\nconst publicKey = mockWallet.recoverPublicKey();\n\n// The userId of the user that we will add the wallet public key as an authenticator\nconst userId = \"f4a5e6b4-3b9c-4f69-b7f6-9c2f456a4d23\";\n\n// We set the curve type to 'API_KEY_CURVE_ED25519' for solana wallets\n// If using an Ethereum wallet, set the curve type to 'API_KEY_CURVE_SECP256K1'\nconst curveType = \"API_KEY_CURVE_ED25519\";\n\nconst result = activityPoller({\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\",\n  timestampMs: new Date().getTime().toString(),\n  organizationId: \"acd0bc97-2af5-475b-bc34-0fa7ca3bdc75\",\n  parameters: {\n    apiKeys: [\n      {\n        apiKeyName: \"solana-wallet\",\n        publicKey,\n        curveType,\n      },\n    ],\n    userId,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting InitOtpAuth with WebAuthn - TypeScript\nDESCRIPTION: The function signInitOtpAuth takes input parameters for initiating OTP authentication using WebAuthn. It returns a Promise that resolves to a SignedRequest object, which is utilized for submitting the authentication request to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signInitOtpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function signInitOtpAuth(input: TInitOtpAuthInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details would go here\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Import Operation - TypeScript SDK\nDESCRIPTION: Facilitates importing wallets, returning a Promise resolving to combined object types. Input required is `TImportWalletBody`, found under the `TurnkeySDKClientBase` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Declaring Default XLM Wallet Accounts Configuration\nDESCRIPTION: Constant array definition that specifies the default wallet account configuration for Stellar (XLM) cryptocurrency in the Turnkey SDK browser implementation. The type is an array of WalletAccount interface objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_XLM_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_XLM_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Private Keys in TypeScript\nDESCRIPTION: This method retrieves information about multiple private keys. It takes an optional input parameter and returns a Promise containing an array of private key objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPrivateKeys(input: TGetPrivateKeysBody = {}): Promise<{ privateKeys: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Injecting Key Export Bundle in Turnkey Browser SDK\nDESCRIPTION: The `injectKeyExportBundle` function injects a key export bundle, an `organizationId`, and an optional `keyFormat` into the Turnkey Browser SDK. It returns a promise that resolves to a boolean, indicating the success of the injection.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n> **injectKeyExportBundle**(`credentialBundle`, `organizationId`, `keyFormat`?): `Promise`\\<`boolean`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:888](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L888)\n\n#### Parameters\n\n##### credentialBundle\n\n`string`\n\n##### organizationId\n\n`string`\n\n##### keyFormat?\n\n[`KeyFormat`](../../../iframe-stamper/index/enumerations/KeyFormat.mdx)\n\n#### Returns\n\n`Promise`\\<`boolean`\\>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for deleteApiKeys Function\nDESCRIPTION: Type definition for the deleteApiKeys function that handles API key deletion. The function takes input parameters and returns a Promise containing activity details, approval states, timestamps, and various intent configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteApiKeys(input): Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining WalletParams Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for WalletParams, specifying parameters for creating a wallet, including accounts, optional mnemonicLength, and walletName.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WalletParams {\n  accounts: definitions[\"v1WalletAccountParams\"][];\n  mnemonicLength?: number;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete API Keys in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete API keys using the TurnkeyBrowserClient. It takes a `TDeleteApiKeysBody` as input and returns a Promise that resolves to an object.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteApiKeys**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1408](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1408)\n\n#### Parameters\n\n##### input\n\n`TDeleteApiKeysBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`deleteApiKeys`](TurnkeyBrowserClient.mdx#deleteapikeys)\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication in Turnkey SDK (TS)\nDESCRIPTION: This method performs OAuth authentication using the Turnkey SDK. It requires a `TOauthBody` as input and returns a Promise that resolves to an object representing the result of the OAuth process. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n> **oauth**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2017](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2017)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - Wallet Management\nDESCRIPTION: Interface definitions for wallet management operations including getting wallet details and listing wallets\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1GetWalletRequest {\n  organizationId: string;\n  walletId: string;\n}\n\ninterface v1GetWalletResponse {\n  wallet: definitions[\"v1Wallet\"];\n}\n\ninterface v1GetWalletsRequest {\n  organizationId: string;\n}\n\ninterface v1GetWalletsResponse {\n  wallets: definitions[\"v1Wallet\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session in Turnkey Browser SDK\nDESCRIPTION: Method to create a read-write session with specified input parameters. Returns a Promise resolving to an object containing the session details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateReadWriteSession(input: TCreateReadWriteSessionBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey SDK Server Package\nDESCRIPTION: NPM installation command for the @turnkey/sdk-server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/sdk-server\n```\n\n----------------------------------------\n\nTITLE: Stamping List Private Key Tags Request in TypeScript\nDESCRIPTION: Method signature for stampListPrivateKeyTags which prepares a signed request for listing private key tags. It accepts a TListPrivateKeyTagsBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampListPrivateKeyTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in SDK TypeScript\nDESCRIPTION: The code snippet defines a TypeScript type alias named TGetAuthenticatorBody. This type alias is part of the SDK and represents the structure of the body parameter required for the 'GetAuthenticator' operation in the public API service. No external dependencies are explicitly stated, but it relies on predefined types within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetAuthenticatorBody = `operations`\\[`\\\"PublicApiService_GetAuthenticator\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: TurnkeyDirectWallet Signing Methods\nDESCRIPTION: Implementation of signDirect() method for signing transactions, taking an address and signDoc as parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/classes/TurnkeyDirectWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsignDirect(address: string, signDoc: SignDoc): Promise<DirectSignResponse>\n```\n\n----------------------------------------\n\nTITLE: Initializing the IframeStamper in TypeScript\nDESCRIPTION: Method to insert the iframe into the page DOM and initialize it. Returns a promise that resolves to the iframe's public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninit(dangerouslyOverrideIframeKeyTtl?): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Turnkey API in TypeScript\nDESCRIPTION: The 'getUsers' function is part of the Turnkey API's generated service for listing all users within an organization. This function sends a POST request to '/public/v1/query/list_users'. It requires an input parameter of type 'TGetUsersInput' and returns a Promise resolved with an array of user objects. There are no specific limitations noted for this function.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getUsers**(`input`): `Promise`\\<{ `users`: `object`[]; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Signing API Key Creation Request with WebAuthn (TypeScript)\nDESCRIPTION: The `signCreateApiKeys` function facilitates the creation of a signed request to create API keys, leveraging WebAuthn for authentication. It accepts an input of type `TCreateApiKeysInput` and optional `TurnkeyCredentialRequestOptions`. The function returns a Promise that resolves to a `SignedRequest` object, which can then be POSTed to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signCreateApiKeys**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Private Key Tags Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for deleting tags from private keys. It takes a TDeletePrivateKeyTagsBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePrivateKeyTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Updating User with Turnkey SDK in TypeScript\nDESCRIPTION: Method for updating a user through the Turnkey API. It accepts a TUpdateUserBody parameter and returns a Promise containing the response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUser(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Result Structure - TypeScript\nDESCRIPTION: The `updatePolicyResult` and `updatePolicyResultV2` interfaces delineate the structure of results from policy updates, both containing a `policyId` of string type. This ensures that every policy update response is consistent and strongly typed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResult: { policyId: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResultV2: { policyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Importing Private Keys\nDESCRIPTION: Method to import private keys into the system. Takes import configuration parameters and returns a Promise with the import result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportPrivateKey(input: TImportPrivateKeyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for signDeleteUsers in TypeScript\nDESCRIPTION: The TypeScript declaration for the signDeleteUsers function. This function takes an input of type TDeleteUsersInput and optional TurnkeyCredentialRequestOptions, and returns a Promise with a SignedRequest that can be sent to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signDeleteUsers: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Listing Activities in Turnkey SDK - JavaScript\nDESCRIPTION: The `getActivities` function is an asynchronous function that takes an input parameter of type `TGetActivitiesInput` and returns a promise containing an object with an array of activities. This function interfaces with the Turnkey API to retrieve all activities associated with a specific organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"const getActivities = (input) => Promise<{ activities: object[]; }>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteAuthenticatorsInput type alias as an object with a single property 'body'. It is used for the POST request to the '/public/v1/submit/delete_authenticators' endpoint in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteAuthenticatorsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining a Signed Request Object in TypeScript\nDESCRIPTION: This TypeScript alias defines a TSignedRequest as an object that encapsulates information needed for a POST request to Turnkey. The structure includes properties: body (a string containing the request payload), stamp (a TStamp object for timestamp information), and url (the target endpoint as a string).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TSignedRequest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TSignedRequest = {\\n  body: string;\\n  stamp: TStamp;\\n  url: string;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Regtest P2WSH Accounts in TypeScript\nDESCRIPTION: This code snippet defines a constant named DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS which is an array of WalletAccount objects. This variable is crucial for developers using the Turnkey SDK who need sample accounts for Bitcoin transactions in a Regtest environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Private Keys in TypeScript\nDESCRIPTION: The 'stampGetPrivateKeys' function is used for fetching multiple private keys. It takes an input of type 'TGetPrivateKeysBody' and returns a Promise resolving to either 'undefined' or a 'TSignedRequest'. This function is inherited from the 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPrivateKeys**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetPrivateKeysBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Activity Status Enum Type Definitions\nDESCRIPTION: Defines comprehensive enumeration types for tracking activity statuses and activity types in the system, covering a wide range of organizational and authentication operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | ... 100 more activity types;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Root Quorum Result Structure in TypeScript\nDESCRIPTION: Defines the structure for updating root quorum results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateRootQuorumResult`: \\{\\};\n```\n\n----------------------------------------\n\nTITLE: Listing User Tags using TypeScript in Turnkey SDK\nDESCRIPTION: The `listUserTags` function is an asynchronous function that takes input of type `TListUserTagsInput` and returns a promise that resolves to an object containing an array of user tags. This function is crucial for retrieving user tags within a specific organization via a designated POST API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/listUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst listUserTags = (input) => Promise<{ userTags: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Method Definition for activityDecision in TypeScript\nDESCRIPTION: The activityDecision method is used to perform an operation based on activity decisions. It accepts a URL and body, with types TBodyType and TResponseType, and returns a Promise of type TResponseType. The method is inherited from TurnkeyServerClient and performs asynchronous operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **activityDecision**<`TBodyType`, `TResponseType`>(`url`, `body`): `Promise`<`TResponseType`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:130](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L130)\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Null Check in TypeScript\nDESCRIPTION: A generic function that takes a potentially null/undefined value and asserts it is non-null. This type guard helps enforce type safety by ensuring values are defined before use. It returns the input value if it exists, likely throwing an error if the value is null/undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertNonNull.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassertNonNull<T>(input: undefined | null | T): T\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with Turnkey SDK - JavaScript\nDESCRIPTION: The signInitImportPrivateKey function requests a WebAuthn assertion and returns a signed InitImportPrivateKey request. It requires an input parameter of type TInitImportPrivateKeyInput and an optional options parameter of type TurnkeyCredentialRequestOptions. The function returns a promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signInitImportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst signInitImportPrivateKey = (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Whoami Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting the current user's information. It takes an input of type TGetWhoamiBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWhoami(input: TGetWhoamiBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Updating Wallet with Turnkey SDK in TypeScript\nDESCRIPTION: Method for updating a wallet through the Turnkey API. It accepts a TUpdateWalletBody parameter and returns a Promise containing the response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Create Read Only Session in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a read-only session using the TurnkeyBrowserClient. It takes a `TCreateReadOnlySessionBody` as input and returns a Promise that resolves to an object representing the created session.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **createReadOnlySession**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1151](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1151)\n\n#### Parameters\n\n##### input\n\n`TCreateReadOnlySessionBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createReadOnlySession`](TurnkeyBrowserClient.mdx#createreadonlysession)\n```\n\n----------------------------------------\n\nTITLE: Injecting Wallet Export Bundle\nDESCRIPTION: Example of injecting an encrypted wallet export bundle into the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init the IframeStamper\n\n// Pasted into the iFrame by the user\nconst walletExportBundle = \"<your-encrypted-wallet-export-bundle>\";\n\nconst injected = await iframeStamper.injectWalletExportBundle(walletExportBundle);\n```\n\n----------------------------------------\n\nTITLE: Deleting User Authentication with Turnkey SDK TypeScript\nDESCRIPTION: This function deletes various authentication factors from an end user. It uses `DeleteUserAuthParams` as parameters for defining what components to delete, and it returns a Promise array with the removal operations' results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteUserAuth**(\\\"params\\\"): `Promise`\\<`any`[]\\>\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication in Turnkey SDK (TS)\nDESCRIPTION: This method initiates the OTP authentication process within the Turnkey SDK. It requires a `TInitOtpAuthBody` as input and returns a Promise resolving to an object representing the result of the OTP authentication initialization. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n> **initOtpAuth**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1952](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1952)\n```\n\n----------------------------------------\n\nTITLE: Transaction Signing Method in TypeScript\nDESCRIPTION: TypeScript method definition for stamping a request to sign a transaction. This method prepares a signed request for transaction signing operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_127\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampSignTransaction(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Signing Test Rate Limits Request in Typescript\nDESCRIPTION: A method to generate a WebAuthn-signed request for testing API rate limits with optional configuration options\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signTestRateLimits.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignTestRateLimits(input: TTestRateLimitsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Wallet Export Type Definitions\nDESCRIPTION: Defines complex type structures for wallet export operations, including status and activity type enumerations used in the SDK\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `string`: { ... },\n  `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | ...,\n  `type`: `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result Types for SDK Activities in TypeScript\nDESCRIPTION: This snippet defines multiple TypeScript types representing results for various operations in the SDK. It includes types for user recovery, authentication, and transaction signing, among others. Such types are used to enforce structure and type safety within SDK operations, ensuring expected input and output data formats for each activity. The types mainly consist of objects with specific string properties and arrays, without imposed constraints beyond those intrinsic to the object structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult: { userId: string; }; oauthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; recoverUserResult: { authenticatorId: string[]; }; removeOrganizationFeatureResult: { features: object[]; }; setOrganizationFeatureResult: { features: object[]; }; setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; }; signRawPayloadResult: { r: string; s: string; v: string; }; signRawPayloadsResult: { signatures: object[]; }; signTransactionResult: { signedTransaction: string; }; updateAllowedOriginsResult: {}; updatePolicyResult: { policyId: string; }; updatePolicyResultV2: { policyId: string; }; updatePrivateKeyTagResult: { privateKeyTagId: string; }; updateRootQuorumResult: {}; updateUserResult: { userId: string; }; updateUserTagResult: { userTagId: string; }; updateWalletResult: { walletId: string; }; }; status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; updatedAt: { nanos: string; seconds: string; }; votes: object[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePoliciesInput Type Alias\nDESCRIPTION: This snippet defines the TCreatePoliciesInput type alias as an object that contains a `body` property.  The `body` property is of type `TCreatePoliciesBody`, which likely contains the data required to create the policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePoliciesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **TCreatePoliciesInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:12350\n *\n * `POST /public/v1/submit/create_policies`\n */\n\n/**\n * ### body\n *\n * > **body**: [`TCreatePoliciesBody`](TCreatePoliciesBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:12351\n */\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure - TypeScript\nDESCRIPTION: This structure is used for user recovery results, which includes an array of authenticators' IDs. It’s crucial for managing user authentication statuses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys with Turnkey SDK TypeScript\nDESCRIPTION: This function deletes private keys by taking `TDeletePrivateKeysBody` input and returns a Promise of a combined object, supporting secure key management within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deletePrivateKeys**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity in Turnkey SDK Server\nDESCRIPTION: API method to fetch activity details using unique activity ID. Allows querying specific activity information from the Turnkey server with precise identification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivity(activityId: string): Promise<Activity>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUserResponse Type Alias in TypeScript\nDESCRIPTION: Defines a type alias TGetUserResponse that maps to the response schema of the GET user API endpoint. This type represents the structure of successful (200) responses from the PublicApiService_GetUser operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetUserResponse = operations[\"PublicApiService_GetUser\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedded Key with initEmbeddedKey()\nDESCRIPTION: Method to initialize an embedded key in the browser environment. Returns a promise that resolves to null or a string identifier.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninitEmbeddedKey(): Promise<null | string>\n```\n\n----------------------------------------\n\nTITLE: Generating Signed Request Turnkey API TypeScript\nDESCRIPTION: The function signDeletePrivateKeys is designed to request a WebAuthn assertion and create a signed request for deleting private keys, which is then ready to be sent via POST to the Turnkey service. The function requires an input of type TDeletePrivateKeysInput and optionally accepts options of type TurnkeyCredentialRequestOptions. It returns a promise of type SignedRequest. Proper input types are crucial for successful request execution, and users should ensure their WebAuthn setup is correctly configured.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeletePrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignDeletePrivateKeys(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining SignTransactionIntentV2 Interface in TypeScript\nDESCRIPTION: Specifies the structure for signing a transaction. It includes the type of transaction (Ethereum or Solana), the unsigned transaction, and the identifier of the key to sign with.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  signWith: string;\n  type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\";\n  unsignedTransaction: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Statuses in TypeScript\nDESCRIPTION: This snippet defines various activity types and statuses used in the coordinator service. It includes enums for activity statuses and a wide range of activity types, covering operations like creating API keys, managing users, and handling organization-related tasks.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Stamp List Private Key Tags with Turnkey SDK\nDESCRIPTION: This function `stampListPrivateKeyTags` is responsible for creating a signed request to list private key tags using the Turnkey SDK. It takes a `TListPrivateKeyTagsBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampListPrivateKeyTags**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:568](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L568)\n\n#### Parameters\n\n##### input\n\n`TListPrivateKeyTagsBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Policy List via Turnkey SDK - TypeScript\nDESCRIPTION: The `getPolicies` function is an API method to list all policies within an organization. It takes an input of type `TGetPoliciesInput` and returns a promise that resolves with an object containing an array of policies. This method is dependent on `POST /public/v1/query/list_policies` endpoint. It is crucial that the input adheres to the `TGetPoliciesInput` type definition for successful execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getPolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getPolicies(input): Promise<{ policies: object[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePolicyBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePolicyBody type alias. It represents the structure of the request body for the create policy API endpoint. The type is extracted from the OpenAPI generated types, specifically from the PublicApiService_CreatePolicy operation parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePolicyBody = operations[\"PublicApiService_CreatePolicy\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Sub Organization in TypeScript\nDESCRIPTION: The `createSubOrganization` function allows for the creation of a new sub-organization by accepting an input of type `TCreateSubOrganizationBody`. It returns a Promise that resolves to an object containing the sub-organization details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSubOrganization(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Implementing Stamp Method in TypeScript\nDESCRIPTION: Asynchronous method that takes a string payload and returns a Promise resolving to TStamp. Used to create a stamp for the provided payload using the wallet interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/WalletStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstamp(payload: string): Promise<TStamp>\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication Function Definition\nDESCRIPTION: A complex Promise-based function that supports multiple authentication and organizational intent types with extensive type definitions for security and user management operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initOtpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuth(`input`): Promise<{ activity: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Function SDK JavaScript\nDESCRIPTION: This code snippet defines a `fetch` function that wraps the `xFetch` method to handle network requests. It requires `RequestInfo` or `URL` as the `input` parameter, and optionally accepts a `RequestInit` object for configurations. The function returns a promise that resolves to a `Response` object. Ensure your environment supports Promises and `Request`/`Response` interfaces.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/fetch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fetch: (input, init?) => Promise<Response> = xFetch\n```\n\n----------------------------------------\n\nTITLE: Defining TurnKey SDK Activity and Result Types in TypeScript\nDESCRIPTION: This type definition includes various result types for different operations, activity statuses, and a comprehensive list of activity types supported by the TurnKey SDK. It also defines structures for timestamps and votes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ns: string; v: string; }; signRawPayloadsResult: { signatures: object[]; }; signTransactionResult: { signedTransaction: string; }; updateAllowedOriginsResult: {}; updatePolicyResult: { policyId: string; }; updatePolicyResultV2: { policyId: string; }; updatePrivateKeyTagResult: { privateKeyTagId: string; }; updateRootQuorumResult: {}; updateUserResult: { userId: string; }; updateUserTagResult: { userTagId: string; }; updateWalletResult: { walletId: string; }; }; status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; updatedAt: { nanos: string; seconds: string; }; votes: object[]; }\n```\n\n----------------------------------------\n\nTITLE: Stamping Import Private Key Request in TypeScript\nDESCRIPTION: Method to stamp a request for importing a private key. It takes an input of type TImportPrivateKeyBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportPrivateKey(input: TImportPrivateKeyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload in Turnkey SDK (TS)\nDESCRIPTION: This method signs a raw payload using the Turnkey SDK. It accepts a `TSignRawPayloadBody` object as input and returns a Promise that resolves to an object representing the result of the signing operation. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\n> **signRawPayload**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2208](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2208)\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intent and Result Types\nDESCRIPTION: Type definitions for various SDK operations including authentication, wallet management, and organization features using TypeScript-like syntax\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  intents: {\n    initOtpAuthIntent: {\n      contact: string;\n      otpType: string;\n      emailCustomization: {\n        appName: string;\n        logoUrl: string;\n        magicLinkTemplate: string;\n      }\n    },\n    signRawPayloadIntent: {\n      encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\";\n      hashFunction: \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_NO_OP\";\n      payload: string;\n      privateKeyId: string;\n    }\n  },\n  results: {\n    createApiKeysResult: {\n      apiKeyIds: string[];\n    },\n    createUserResult: {\n      userIds: string[];\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Policies Method\nDESCRIPTION: Method for updating policies with TUpdatePolicyBody input parameters. Returns a Promise resolving to a composite object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicy(`input`): `Promise`<`object` & `object`>\n```\n\n----------------------------------------\n\nTITLE: Requesting Signed WebAuthn Assertion in TypeScript\nDESCRIPTION: The signGetOrganizationConfigs function requests a WebAuthn assertion and provides a signed GetOrganizationConfigs request for the Turnkey API. It takes an input of type TGetOrganizationConfigsInput and optional TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetOrganizationConfigs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction signGetOrganizationConfigs(input: TGetOrganizationConfigsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation detail to request a WebAuthn assertion and sign the request.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Read Write Session in TypeScript\nDESCRIPTION: The `createReadWriteSession` function initializes a session with read-write access, taking an input parameter of type `TCreateReadWriteSessionBody` and returning a promise that resolves to an object with session details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncreateReadWriteSession(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Providers in TypeScript\nDESCRIPTION: Asynchronous function to fetch OAuth provider details using a POST request to the public query endpoint. Accepts input parameters and returns a promise with an array of OAuth providers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetOauthProviders(input: TGetOauthProvidersInput): Promise<{ oauthProviders: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Stamping Email Authentication Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for email authentication. It takes a TEmailAuthBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampEmailAuth(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining API Types and Interfaces in TypeScript\nDESCRIPTION: This code snippet defines various TypeScript interfaces and types used in the Turnkey SDK API. It includes result interfaces for different API operations, activity status and type enums, and complex nested structures for API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicies.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Method Intent\nDESCRIPTION: This snippet specifies the requirement for identifying and deleting a payment method based on its ID, enabling better financial management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePaymentMethodIntent? \\n\\{ `paymentMethodId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePaymentMethodIntent.paymentMethodId \\n`string` \\n\\n**Description** \\nThe payment method that the customer wants to remove.\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateWalletResult Interface in TypeScript\nDESCRIPTION: Specifies the structure for the result of creating a wallet, including addresses and wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateWalletResult {\n  addresses: string[];\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring signExportPrivateKey Function in TypeScript\nDESCRIPTION: Declares the signExportPrivateKey function as a constant. It takes an input of type TExportPrivateKeyInput and an optional options parameter of type TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signExportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signExportPrivateKey: (input: TExportPrivateKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletStamper Class in TypeScript\nDESCRIPTION: Class constructor that takes a wallet parameter implementing the WalletInterface. Used to create a new instance of WalletStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/WalletStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew WalletStamper(wallet): WalletStamper\n```\n\n----------------------------------------\n\nTITLE: Declaring getPolicies Function in TypeScript\nDESCRIPTION: Declares a constant function getPolicies that takes an input parameter and returns a Promise. The function lists all Policies within an Organization using a POST request to '/public/v1/query/list_policies'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getPolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getPolicies: (input: TGetPoliciesInput) => Promise<{ policies: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Organization in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete a sub-organization using the Turnkey SDK. It takes an input of type TDeleteSubOrganizationBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteSubOrganization(input: TDeleteSubOrganizationBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Fetching OAuth Providers\nDESCRIPTION: Method to retrieve a list of OAuth providers associated with the organization, returning a Promise containing an array of OAuth provider objects\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ngetOauthProviders(input): Promise<{ oauthProviders: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Login with Passkey\nDESCRIPTION: Authenticates a user using a passkey. This method works in conjunction with a passkeyStamper for authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithPasskey(params): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This code snippet defines a complex Promise return type with nested objects and arrays. It includes various intent types like creating organizations, users, wallets, and performing authentication actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: {\n                rk: any;\n              };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n              clientDataJson: string;\n              transports: any[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      // ... (other intent types omitted for brevity)\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_XLM_ACCOUNTS constant\nDESCRIPTION: This code snippet defines a constant named `DEFAULT_XLM_ACCOUNTS` as an array of `WalletAccount` objects. These accounts are likely used as default or initial accounts for XLM wallets when using the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_XLM_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DEFAULT_XLM_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Login with Session\nDESCRIPTION: Logs in with a session object from server actions, storing it and the active client in local storage. Used in conjunction with an iframeStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithSession(session): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampDeletePrivateKeys` function requires an input of type `TDeletePrivateKeysBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is critical for the removal of private keys in the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampDeletePrivateKeys(input: TDeletePrivateKeysBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Type in TypeScript\nDESCRIPTION: This snippet establishes a type for the result of OTP authentication operations. It includes the apiKeyId, credentialBundle, and userId, enabling clear expectations for what data is returned when performing OTP-related actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n`otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining ReadOnlySession Interface in TypeScript\nDESCRIPTION: Interface for managing read-only session tokens with token and expiry properties for authentication purposes in the Turnkey SDK\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/interfaces/ReadOnlySession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadOnlySession {\n  token: string;\n  expiry: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session with Complex TypeScript Declaration\nDESCRIPTION: Defines a function for creating a read-write session with extensive input type definitions, supporting multiple authentication and organizational intents\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst createReadWriteSession: (input) => Promise<{ activity: { ... }}>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPoliciesResponse Type Alias\nDESCRIPTION: This code snippet defines the TGetPoliciesResponse type alias. It represents the structure of a successful (200) response from the `PublicApiService_GetPolicies` operation, obtained via a POST request to the `/public/v1/query/list_policies` endpoint. It's located within the generated HTTP client code for the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetPoliciesResponse** = `operations`\\[`\"PublicApiService_GetPolicies\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateWalletAccountsRequest Interface in TypeScript\nDESCRIPTION: Specifies the structure for a request to create wallet accounts, including organization ID, account parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1CreateWalletAccountsRequest: object\n{\n  organizationId: string,\n  parameters: definitions[\"v1CreateWalletAccountsIntent\"],\n  timestampMs: string,\n  type: \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sealing and Stamping Request Body with Turnkey SDK - TypeScript\nDESCRIPTION: This function, sealAndStampRequestBody, seals and stamps a request body using Turnkey API credentials. It requires either initialization with the credentials or providing the apiPublicKey and apiPrivateKey as parameters. Takes a body object and optional API keys as input, and returns a promise that resolves to an object containing a sealed body and an xStamp. It is defined in the SDK's http package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/sealAndStampRequestBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **sealAndStampRequestBody**(`input`): `Promise`\\<\\{ `sealedBody`: `string`; `xStamp`: `string`; \\}\\>\n\nDefined in: packages/http/dist/base.d.ts:44\n\nSeals and stamps the request body with your Turnkey API credentials.\n\nYou can either:\n- Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n- Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n\n## Parameters\n\n### input\n\n#### apiPrivateKey?\n\n`string`\n\n#### apiPublicKey?\n\n`string`\n\n#### body\n\n`Record`\\<`string`, `any`\\>\n\n## Returns\n\n`Promise`\\<\\{ `sealedBody`: `string`; `xStamp`: `string`; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Return Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure of the object returned by the TKHQ SDK, focusing on the activity-related properties. It specifies the shape of nested objects like `activity.failure`, `activity.createdAt`, and various intent types (e.g., `acceptInvitationIntent`, `createOrganizationIntent`). The definition covers a wide range of possible intents, each with its specific parameters and data types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| `\"cross-platform\"` \\| `\"platform\"`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` \\| `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_CZECH\"` \\| `\"MNEMONIC_LANGUAGE_FRENCH\"` \\| `\"MNEMONIC_LANGUAGE_ITALIAN\"` \\| `\"MNEMONIC_LANGUAGE_JAPANESE\"` \\| `\"MNEMONIC_LANGUAGE_KOREAN\"` \\| `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` \\| `\"ADDRESS_FORMAT_COMPRESSED\"` \\| `\"ADDRESS_FORMAT_ETHEREUM\"` \\| `\"ADDRESS_FORMAT_SOLANA\"` \\| `\"ADDRESS_FORMAT_COSMOS\"` \\| `\"ADDRESS_FORMAT_TRON\"` \\| `\"ADDRESS_FORMAT_SUI\"` \\| `\"ADDRESS_FORMAT_APTOS\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags Function Definition - TypeScript\nDESCRIPTION: Function signature for deletePrivateKeyTags that returns a Promise containing activity details and various intent types. The function handles deletion of private key tags with comprehensive type safety for all possible activity states and intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeletePrivateKeyTags(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Organization ID Result Structure\nDESCRIPTION: This snippet specifies the structure for 'organizationId' in createReadWriteSessionResultV2, which uniquely identifies an organization, formatted as a string. It explains the preferred usage of Sub-Organization ID for performance.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_64\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResultV2.organizationId\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Creating Users with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateUsers` function requires an input of type `TCreateUsersBody` and returns a Promise that may resolve to undefined or a `TSignedRequest`. This function is essential for user creation within the Turnkey platform.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateUsers(input: TCreateUsersBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadsInput Type in TypeScript\nDESCRIPTION: Type alias definition for TSignRawPayloadsInput, which is an object containing a body property of type TSignRawPayloadsBody. This type is used for signing raw payloads in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignRawPayloadsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTSignRawPayloadsInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Read-Write Session in Turnkey SDK\nDESCRIPTION: Shows how to use the getReadWriteSession method to obtain an auth bundle for creating a read + write session. This is useful when a valid, current read-session exists and needs to be upgraded to include write capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// gets auth bundle to be used with an iframeStamperto create a read write session\nconst readWriteSession = await turnkeySDK.getReadWriteSession();\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TRemoveOrganizationFeatureResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias for the response from the 'remove organization feature' endpoint. It uses TypeScript's type aliasing feature, which allows for creating a more readable and maintainable type for the API response. The alias specifically refers to the schema of the response expected from a successful POST request to the stated endpoint. This type alias does not have external dependencies but is part of a larger API service definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRemoveOrganizationFeatureResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TRemoveOrganizationFeatureResponse = operations[\\\"PublicApiService_RemoveOrganizationFeature\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TGetWalletInput in TypeScript\nDESCRIPTION: This code snippet defines a type alias `TGetWalletInput` which represents an object structure required for wallet operations within the Turnkey SDK. This alias enhances type safety by enforcing the structure of the input object and allows for better code readability and maintenance.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetWalletInput = object;\n```\n\n----------------------------------------\n\nTITLE: Defining User Intent Structure in TypeScript\nDESCRIPTION: This snippet defines the shape of various user intents that are utilized throughout the Turnkey SDK. Each intent outlines the required parameters for its corresponding operation, such as importing wallets or updating policies. The intents encapsulate user actions and help ensure that data is structured appropriately for API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_P2TR\"` \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| \"ADDRESS_FORMAT_SEI\"` \\| \"ADDRESS_FORMAT_XLM\"` \\| \"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| \"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| \"ADDRESS_FORMAT_TON_V3R2\"` \\| \"ADDRESS_FORMAT_TON_V4R2\"` \\| \"ADDRESS_FORMAT_XRP\")[]; `curve`: \"CURVE_SECP256K1\" \\| \"CURVE_ED25519\"; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| \"AUTHENTICATOR_TRANSPORT_INTERNAL\" \\| \"AUTHENTICATOR_TRANSPORT_NFC\" \\| \"AUTHENTICATOR_TRANSPORT_USB\" \\| \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBAUTHN_ORIGINS\" \\| \"FEATURE_NAME_EMAIL_AUTH\" \\| \"FEATURE_NAME_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBHOOK\" \\| \"FEATURE_NAME_SMS_AUTH\" \\| \"FEATURE_NAME_OTP_EMAIL_AUTH\"; \\}; `setOrganizationFeatureIntent`: \\{ `name`: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBAUTHN_ORIGINS\" \\| \"FEATURE_NAME_EMAIL_AUTH\" \\| \"FEATURE_NAME_EMAIL_RECOVERY\" \\| \"FEATURE_NAME_WEBHOOK\" \\| \"FEATURE_NAME_SMS_AUTH\" \\| \"FEATURE_NAME_OTP_EMAIL_AUTH\"; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" \\| \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" \\| \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" \\| \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" \\| \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Result Structure - TypeScript\nDESCRIPTION: This snippet defines the result structure for updating a user's information, which includes the updated userId. This is important for tracking changes in user data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating User Tag with Turnkey SDK TypeScript\nDESCRIPTION: This function allows tagging of users by accepting `TCreateUserTagBody` as input and returning a Promise with a combined object result. The function is part of user management in Turnkey SDK for more advanced tagging solutions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createUserTag**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Declaration of signDeletePrivateKeys Function in TypeScript\nDESCRIPTION: Function signature for signDeletePrivateKeys that takes an input of type TDeletePrivateKeysInput and optional TurnkeyCredentialRequestOptions, returning a Promise containing a SignedRequest. It requests a WebAuthn assertion and prepares a signed DeletePrivateKeys request for the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeletePrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeletePrivateKeys: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyProvider in React Application\nDESCRIPTION: Configuration and setup of TurnkeyProvider component in a React application. Includes configuration parameters like API base URL, organization ID, RPID, and server sign URL.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/documents/React.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TurnkeyProvider } from \"@turnkey/sdk-react\";\n\nconst turnkeyConfig = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  // prefix with NEXT_PUBLIC for NextJS\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  // your application's domain\n  rpId: process.env.RPID,\n  iframeUrl: \"https://auth.turnkey.com\",\n  // The URL that the Turnkey SDK will send requests to for signing operations.\n  // This should be a backend endpoint that your application controls.\n  serverSignUrl: \"http://localhost:3000/api\"\n}\n\n<div className=\"App\">\n  <TurnkeyProvider config={turnkeyConfig}>\n    // Rest of app ...\n  </TurnkeyProvider>\n</div>\n```\n\n----------------------------------------\n\nTITLE: WalletAccount Type Definition in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for WalletAccount that represents a wallet account with properties including identifier, cryptographic curve, path formatting, address details, and timestamps.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/WalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWalletAccount = {\n  id: string;\n  curve: Curve;\n  pathFormat: PathFormat;\n  path: string;\n  addressFormat: AddressFormat;\n  address: string;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Telegram Cloud Storage Stamper\nDESCRIPTION: Static method to create a new TelegramCloudStorageStamper instance with optional configuration. Allows initializing the stamper with custom settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/classes/TelegramCloudStorageStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic create(config?: TTelegramCloudStorageStamperConfig): Promise<TelegramCloudStorageStamper>\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Intent Parameters\nDESCRIPTION: This snippet specifies the data structure required for user recovery, including authenticator details and a user identifier. This is important for securely recovering user access with attestation parameters included to validate the process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticator\": {\n    \"attestation\": {\n      \"attestationObject\": \"string\",\n      \"clientDataJson\": \"string\",\n      \"credentialId\": \"string\",\n      \"transports\": [\n        \"AUTHENTICATOR_TRANSPORT_BLE\",\n        \"AUTHENTICATOR_TRANSPORT_INTERNAL\",\n        \"AUTHENTICATOR_TRANSPORT_NFC\",\n        \"AUTHENTICATOR_TRANSPORT_USB\",\n        \"AUTHENTICATOR_TRANSPORT_HYBRID\"\n      ]\n    },\n    \"authenticatorName\": \"string\",\n    \"challenge\": \"string\"\n  },\n  \"userId\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Users in TypeScript\nDESCRIPTION: The `deleteUsers` function enables the deletion of specific users by taking an input of type `TDeleteUsersBody`. It returns a Promise that resolves to an object confirming the user deletions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteUsers(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Passkey Registration Configuration Type\nDESCRIPTION: TypeScript type alias for configuring passkey registration parameters including relying party, user details, authentication options, and credential management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/type-aliases/TPasskeyRegistrationConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TPasskeyRegistrationConfig = {\n  rp: {\n    id: string;\n    name: string;\n  };\n  user: {\n    id: string;\n    name: string;\n    displayName: string;\n  };\n  authenticatorName: string;\n  challenge?: string;\n  timeout?: number;\n  userVerification?: UserVerificationRequirement;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  authenticatorSelection?: {\n    authenticatorAttachment?: string;\n    requireResidentKey?: boolean;\n    residentKey?: string;\n    userVerification?: string;\n  };\n  attestation?: string;\n  extensions?: Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createAuthenticators in TypeScript\nDESCRIPTION: The createAuthenticators method is used to create authentication objects with the provided input of type TCreateAuthenticatorsBody. It offers a Promise returning an object and supports server-side authentication management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createAuthenticators**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:872](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L872)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sui Account by Index in TypeScript\nDESCRIPTION: The function `defaultSuiAccountAtIndex` takes an index as input and returns a WalletAccount object. It is defined in TypeScript and used for obtaining account details from a specific path index in the SDK's browser package. The main input parameter is `pathIndex`, which should be a number, and the function returns a `WalletAccount`. This function depends on the existence of the `WalletAccount` interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultSuiAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **defaultSuiAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n\nDefined in: [packages/sdk-browser/src/turnkey-helpers.ts:490](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L490)\n\n## Parameters\n\n### pathIndex\n\n`number`\n\n## Returns\n\n[`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account - TypeScript\nDESCRIPTION: Exports wallet accounts using TExportWalletAccountBody input and TSignedRequest for promise outcomes. The method demands correctly structured input for proper execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportWalletAccount(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Handling WebAuthn Assertion with Turnkey SDK in JavaScript\nDESCRIPTION: The function signGetPrivateKey requests a WebAuthn assertion, returning a signed GetPrivateKey request for Turnkey. It requires input parameters of type TGetPrivateKeyInput and an optional options parameter of TurnkeyCredentialRequestOptions. The function returns a Promise resolving to a SignedRequest, which is ready to be POSTed to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst signGetPrivateKey: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUsersBody Type in TypeScript\nDESCRIPTION: Type alias that maps to the request body parameters for the GetUsers API operation. It extracts the body type from the operations object's PublicApiService_GetUsers parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetUsersBody = operations[\"PublicApiService_GetUsers\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Intent Structures - TypeScript\nDESCRIPTION: This snippet outlines the TypeScript interfaces for various intents associated with wallet management. These intents include operations for importing wallets, managing keys, setting features, handling transactions, and user authentication. Each interface defines properties required for its specific operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createReadWriteSession.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype WalletManagementIntents = {\\n    importWalletIntent: {\\n        accounts: object[];\\n        encryptedBundle: string;\\n        userId: string;\\n        walletName: string;\\n    };\\n    initImportPrivateKeyIntent: {\\n        userId: string;\\n    };\\n    initImportWalletIntent: {\\n        userId: string;\\n    };\\n    ... // more intent definitions can follow here\\n};\n```\n\n----------------------------------------\n\nTITLE: Activity Status Enum Definition\nDESCRIPTION: Defines the possible status values for an activity in the system, representing different stages of processing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for SDK Operations\nDESCRIPTION: Comprehensive type definitions for SDK operations including user authentication, organization management, wallet operations, and cryptographic functions. Defines input parameters and return types for various SDK methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTransaction.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n  accounts: object[];\n  encryptedBundle: string;\n  walletName: string;\n  contact: string;\n  emailCustomization: {\n    appName: string;\n    logoUrl: string;\n    magicLinkTemplate: string;\n    templateId: string;\n    templateVariables: string;\n  };\n  otpType: string;\n  sendFromEmailAddress: string;\n  sendFromEmailSenderName: string;\n  smsCustomization: {\n    template: string;\n  };\n  userIdentifier: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Wallets Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get multiple wallets. Takes a TGetWalletsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_101\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallets(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateAuthenticatorsResponse Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias for the response returned by the create authenticators API endpoint. It references the schema of the 200 success response from the PublicApiService_CreateAuthenticators operation in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateAuthenticatorsResponse** = `operations`[`\"PublicApiService_CreateAuthenticators\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeyInput Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias TGetApiKeyInput that specifies the structure for API key request objects. The type includes a body property of type TGetApiKeyBody and is used for POST requests to /public/v1/query/get_api_key endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetApiKeyInput = object\n```\n\n----------------------------------------\n\nTITLE: Email Authentication in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for email authentication using the Turnkey SDK. It takes an input of type TEmailAuthBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nemailAuth(input: TEmailAuthBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Stamp Get API Key Method\nDESCRIPTION: Method for generating a signed request to get an API key. Takes TGetApiKeyBody input and returns a Promise resolving to undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetApiKey(input: TGetApiKeyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TurnkeyActivityError Class Definition\nDESCRIPTION: Class definition for TurnkeyActivityError that extends the Error class. Includes properties for activity tracking and error details like ID, status, type and cause.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TurnkeyActivityError extends Error {\n  activityId: string | undefined;\n  activityStatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\" | undefined;\n  activityType: undefined | \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | /* ... other activity types ... */;\n  cause: Error | undefined;\n  \n  constructor(input: {\n    activityId?: string;\n    activityStatus?: /* activity status types */;\n    activityType?: /* activity types */;\n    cause?: Error;\n    message: string;\n  }) {\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for createPrivateKeys Function\nDESCRIPTION: Complex type definition specifying the structure and parameters for creating private keys, including activity approval states, timestamps, and various intent configurations for different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createPrivateKeys = (input) => Promise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: {...}\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Transaction Intent in TypeScript\nDESCRIPTION: This snippet provides a structure for signing a transaction, which includes the private key ID, type of transaction, and the unsigned transaction data. This is essential for processing transactions securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createPrivateKeyTag in TypeScript\nDESCRIPTION: The createPrivateKeyTag method assigns a tag to a private key using the input of type TCreatePrivateKeyTagBody. It outputs a Promise of an anonymous object. This method supports the tagging of cryptographic keys for easier management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createPrivateKeyTag**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:1036](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1036)\n```\n\n----------------------------------------\n\nTITLE: Organization Intent Types - TypeScript\nDESCRIPTION: Type definitions for organization creation intents including root authenticator configuration and attestation details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateOrganizationIntent = {\n  rootAuthenticator: {\n    attestation: {\n      attestationObject: string;\n      authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n      clientDataJson: string;\n      transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n    };\n    authenticatorName: string;\n    challenge: string;\n    userId: string;\n  };\n  rootEmail: string;\n  rootUserId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a read-only session with TurnkeyBrowserClient\nDESCRIPTION: Demonstrates how to create a TurnkeyBrowserClient instance and use the login method to create a read-only session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Logs in to create a read-only session, storing the session in local storage\nconst readOnlySession = await browserClient.login({ organizationId: \"org-id\" });\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Sub-Organization Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for deleting a sub-organization. It takes a TDeleteSubOrganizationBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteSubOrganization(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Organization Request Methods in TypeScript\nDESCRIPTION: Collection of methods for stamping organization-related requests including getOrganization and getOrganizationConfigs. These methods are part of the TurnkeyServerClient class and handle request signing for organization operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOrganization(input: TGetOrganizationBody): Promise<undefined | TSignedRequest>\n\nstampGetOrganizationConfigs(input: TGetOrganizationConfigsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiKeysInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateApiKeysInput type alias as an object with a single property 'body' of type TCreateApiKeysBody. It is used for the POST request to create API keys in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateApiKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: Initializing importPrivateKey function in TypeScript\nDESCRIPTION: This function initializes the importation of private keys and returns a promise that resolves to an object containing various activity-related properties. The properties include user permissions regarding activities and relevant authentication data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst initImportPrivateKey = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Wallet Accounts in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for retrieving all accounts for a wallet. Returns a Promise that resolves to an object containing an array of wallet account objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWalletAccounts(input): Promise<{ accounts: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Documenting the createUsers function\nDESCRIPTION: This documents the `createUsers` function, detailing its input parameters and the structure of the Promise it returns.  The function takes an `input` parameter and returns a Promise that resolves to an object containing an activity object with details about the create user intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n{\n  \"activity\": {\n    \"canApprove\": `boolean`,\n    \"canReject\": `boolean`,\n    \"createdAt\": { `nanos`: `string`; `seconds`: `string`; },\n    \"failure\": { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; },\n    \"fingerprint\": `string`,\n    \"id\": `string`,\n    \"intent\": { \n      `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: `\"public-key\"`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; };\n      `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; };\n      `activateBillingTierIntent`: { `productId`: `string`; };\n      `approveActivityIntent`: { `fingerprint`: `string`; };\n      `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; };\n      `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; };\n      `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; };\n      `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; };\n      `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; };\n      `createInvitationsIntent`: { `invitations`: `object`[]; };\n      `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; };\n      `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: `\"public-key\"`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; };\n      `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; };\n      `createPoliciesIntent`: { `policies`: `object`[]; };\n      `createPolicyIntent`: { `effect`: `\"EFFECT_ALLOW\"` || `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; };\n      `createPolicyIntentV2`: { `effect`: `\"EFFECT_ALLOW\"` || `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; };\n      `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` || `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; };\n      `createPrivateKeysIntent`: { `privateKeys`: `object`[]; };\n      `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; };\n      `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; };\n      `createReadOnlySessionIntent`: {};\n      `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; };\n      `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; };\n      `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; };\n      `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; };\n      `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; };\n      `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; };\n      `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; };\n      `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; };\n      `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; };\n      `createUsersIntent`: { `users`: `object`[]; };\n      `createUsersIntentV2`: { `users`: `object`[]; };\n      `createUsersIntentV3`: { `users`: `object`[]; };\n      `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; };\n      `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; };\n      `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; };\n      `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; };\n      `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; };\n      `deleteInvitationIntent`: { `invitationId`: `string`; };\n      `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; };\n      `deleteOrganizationIntent`: { `organizationId`: `string`; };\n      `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; };\n      `deletePolicyIntent`: { `policyId`: `string`; };\n      `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; };\n      `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; };\n      `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; };\n      `deleteUsersIntent`: { `userIds`: `string`[]; };\n      `deleteUserTagsIntent`: { `userTagIds`: `string`[]; };\n      `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; };\n      `disablePrivateKeyIntent`: { `privateKeyId`: `string`; };\n      `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; };\n      `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; };\n      `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; };\n      `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; };\n      `exportWalletIntent`: { `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` || `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` || `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` || `\"MNEMONIC_LANGUAGE_CZECH\"` || `\"MNEMONIC_LANGUAGE_FRENCH\"` || `\"MNEMONIC_LANGUAGE_ITALIAN\"` || `\"MNEMONIC_LANGUAGE_JAPANESE\"` || `\"MNEMONIC_LANGUAGE_KOREAN\"` || `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; };\n      `importPrivateKeyIntent`: { `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` || `\"ADDRESS_FORMAT_COMPRESSED\"` || `\"ADDRESS_FORMAT_ETHEREUM\"` || `\"ADDRESS_FORMAT_SOLANA\"` || `\"ADDRESS_FORMAT_COSMOS\"` || `\"ADDRESS_FORMAT_TRON\"` || `\"ADDRESS_FORMAT_SUI\"` || `\"ADDRESS_FORMAT_APTOS\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` || `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2`\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Mainnet P2TR Accounts\nDESCRIPTION: Constant array of predefined WalletAccount configurations for Bitcoin Mainnet Taproot (P2TR) accounts. Used for standardizing default account setup in the Turnkey SDK browser package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS: WalletAccount[] = [...] // Actual implementation requires reviewing source code\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CreateUserTagResult Interface\nDESCRIPTION: Defines the structure for the result of creating a user tag, containing a list of user IDs and the user tag ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `userIds`: `string`[]; \n  `userTagId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Structure in TypeScript\nDESCRIPTION: Defines a structure for votes as an array of objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nvotes`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Delete Policy Stamp Method\nDESCRIPTION: Method to stamp delete policy requests. Takes a TDeletePolicyBody input and returns a Promise that resolves to undefined or a signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePolicy(input: TDeletePolicyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining importWallet Function\nDESCRIPTION: This snippet defines the `importWallet` function that takes an input parameter and returns a promise containing various wallet-related intents and their associated properties. It outlines the required structure for handling user interactions with wallets, such as creating organization intents and managing API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst importWallet = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitImportPrivateKeyRequest type\nDESCRIPTION: Defines the structure for the request to initialize importing a private key. It includes the organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitImportPrivateKeyRequest\n * @memberof definitions\n */\nexport interface v1InitImportPrivateKeyRequest {\n  /**\n   * Unique identifier for a given Organization.\n   */\n  organizationId: string;\n  parameters: definitions[\"v1InitImportPrivateKeyIntent\"];\n  /**\n   * Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n   */\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Authenticators Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating authenticators. It takes an input of type TCreateAuthenticatorsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateAuthenticators(input: TCreateAuthenticatorsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete OAuth providers using the Turnkey SDK. It takes an input of type TDeleteOauthProvidersBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteOauthProviders(input: TDeleteOauthProvidersBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: TurnKey SDK Activity Result Types and Status Enumerations\nDESCRIPTION: Comprehensive type definitions for TurnKey SDK including result interfaces for various operations such as email recovery, OAuth authentication, transaction signing, and organization management. It also defines activity status enumerations and activity type constants.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUsers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Injecting Key Export Bundle with TurnkeyIframeClient\nDESCRIPTION: Shows how to inject a key export bundle with optional format specifications into an iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects a key export bundle with an optional key format\nconst success = await iframeClient.injectKeyExportBundle(\n  \"key-bundle\",\n  \"org-id\",\n  \"PEM\"\n);\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Intent with Customization\nDESCRIPTION: Advanced email authentication intent supporting custom email templates, branding, and configuration options\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nintent.emailAuthIntent\n```\n\n----------------------------------------\n\nTITLE: Signing Update Root Quorum with Turnkey SDK in TypeScript\nDESCRIPTION: This TypeScript function requests a WebAuthn assertion, signing an `UpdateRootQuorum` request for submission to Turnkey. It requires `input` of type `TUpdateRootQuorumInput` and optionally `options` of type `TurnkeyCredentialRequestOptions`. It returns a promise of `SignedRequest`, encapsulated in a `Promise`. Properly understanding the Turnkey SDK's handling of WebAuthn assertions is necessary for implementing this function.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signUpdateRootQuorum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signUpdateRootQuorum: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Remove Organization Feature Intent\nDESCRIPTION: Specifies the data structure for the `removeOrganizationFeatureIntent`, including the `name` of the feature to remove. Supported features include root user email recovery, WebAuthn origins, email/SMS/OTP authentication, and webhooks.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_29\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `name`: `\\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\"` \\| `\\\"FEATURE_NAME_EMAIL_AUTH\\\"` \\| `\\\"FEATURE_NAME_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBHOOK\\\"` \\| `\\\"FEATURE_NAME_SMS_AUTH\\\"` \\| `\\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"; }\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User API Keys with Turnkey SDK\nDESCRIPTION: A function that fetches API key details for a user via a POST request to /public/v1/query/get_api_keys. Requires an input parameter of type TGetApiKeysInput and returns a Promise with an array of API key objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getApiKeys: (input) => Promise<{ apiKeys: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Requesting Remove Organization Feature - TypeScript\nDESCRIPTION: The function signRemoveOrganizationFeature takes input of type TRemoveOrganizationFeatureInput and optional TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest which can be utilized for further processing to remove an organization feature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRemoveOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signRemoveOrganizationFeature(input: TRemoveOrganizationFeatureInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details here...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring getSubOrgIds Function in TypeScript\nDESCRIPTION: Defines the getSubOrgIds function that retrieves suborg IDs. It takes an input parameter and returns a Promise containing an array of organization IDs. The function makes a POST request to '/public/v1/query/list_suborgs'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getSubOrgIds: (input: TGetSubOrgIdsInput) => Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Creation Request - TypeScript\nDESCRIPTION: Specifies the structure of a wallet creation request, encapsulating organization ID, parameters, timestamp, and request type for wallet generation. It is vital in facilitating wallet establishment and management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CreateWalletRequest: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1131\n */\nexport interface v1CreateWalletRequest {\n  organizationId: string; // Unique identifier for a given Organization.\n  parameters: definitions[\"v1CreateWalletIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n  type: \"ACTIVITY_TYPE_CREATE_WALLET\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines an extensive object structure with various activity types, statuses, and result interfaces. It includes definitions for operations like creating API keys, managing users, handling invitations, signing transactions, and many more blockchain and organization-related activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Policy and User Update Result Structures in TypeScript\nDESCRIPTION: This snippet defines multiple structures including updatePolicyResult, updatePolicyResultV2, updatePrivateKeyTagResult, updateUserResult, updateUserTagResult, and updateWalletResult. Each structure specifies unique identifiers for policies, private keys, users, and wallets, streamlining update operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateAllowedOriginsResult: {}; updatePolicyResult: { policyId: string; }; updatePolicyResultV2: { policyId: string; }; updatePrivateKeyTagResult: { privateKeyTagId: string; }; updateRootQuorumResult: {}; updateUserResult: { userId: string; }; updateUserTagResult: { userTagId: string; }; updateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Payment Method Intent Type Definition\nDESCRIPTION: Type definitions for payment method intents including credit card details and payment method IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n{ cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; }\n```\n\n----------------------------------------\n\nTITLE: Transacting with Unsigned Transaction\nDESCRIPTION: This snippet defines the structure needed to sign an unsigned transaction for either Ethereum or Solana networks. It ensures that developers can provide the necessary type and transaction data for a complete transaction signing process, facilitating blockchain transactions in a structured manner.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating User Tag in Turnkey SDK\nDESCRIPTION: Method for creating a user tag with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUserTag(input: TCreateUserTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Policy Creation Types\nDESCRIPTION: TypeScript interface definitions for creating policies, including multiple versions of intents, requests and results. Includes fields for policy rules, effects, conditions and consensus requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePoliciesIntent {\n  policies: definitions[\"v1CreatePolicyIntentV3\"][];\n}\n\ninterface v1CreatePoliciesRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreatePoliciesIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_POLICIES\";\n}\n\ninterface v1CreatePoliciesResult {\n  policyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: signCreateSubOrganization Function Definition\nDESCRIPTION: This snippet defines the `signCreateSubOrganization` function, which takes an input of type `TCreateSubOrganizationInput` and optional `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves to a `SignedRequest`. The function is responsible for requesting a WebAuthn assertion and returning a signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See CreateSubOrganization\n *\n * @param input - {@link TCreateSubOrganizationInput}\n * @param options - {@link TurnkeyCredentialRequestOptions}\n * @returns - {@link SignedRequest}\n */\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/** @internal */\nexport const signCreateSubOrganization = async (\n  input: TCreateSubOrganizationInput,\n  options?: TurnkeyCredentialRequestOptions\n): Promise<SignedRequest> => {\n  const method = \"POST\";\n  const url = `/public/v1/organizations/${organizationId()}/sub-organizations/actions/sign_create\";\n\n  const { signedRequest } = await signWithWebauthn(\n    {\n      method,\n      url,\n      body: input,\n    },\n    options\n  );\n\n  return signedRequest;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Key ID Result Structure\nDESCRIPTION: This snippet specifies the structure for 'apiKeyId' within createReadWriteSessionResultV2, which serves as the unique identifier for the created API key and is expected to be a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_62\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResultV2.apiKeyId\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload with Turnkey SDK\nDESCRIPTION: A method to request a WebAuthn assertion and generate a signed request for raw payload signing. Accepts input parameters for payload and optional credential request options, and returns a Promise with a signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signSignRawPayload.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signSignRawPayload: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Mainnet P2PKH Account\nDESCRIPTION: A helper function to create a wallet account for Bitcoin mainnet using P2PKH derivation with a specified path index. Used for deterministic wallet account generation in blockchain applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinMainnetP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultBitcoinMainnetP2PKHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers - TypeScript\nDESCRIPTION: This function deletes OAuth providers using the specified input parameters and returns a promise. It depends on TDeleteOauthProvidersBody for input and TSignedRequest for output. The operation fails if the input structure does not match expected parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteOauthProviders(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TApproveActivityResponse Type Alias\nDESCRIPTION: Defines the TApproveActivityResponse type alias which represents the structure of a successful response (status code 200) from the \"PublicApiService_ApproveActivity\" operation. It is part of the public API within the Turnkey SDK and specifies the expected schema of the response data when approving an activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TApproveActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **TApproveActivityResponse** = `operations`[\\\"PublicApiService_ApproveActivity\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Stamp Export Wallet in TurnkeyBrowserClient\nDESCRIPTION: This TypeScript function, `stampExportWallet`, is responsible for creating a signed request to export a wallet from the Turnkey system. It requires a `TExportWalletBody` object as input, which contains the specifics for the wallet export process. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, representing the signed request for exporting the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampExportWallet**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1905](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1905)\n\n#### Parameters\n\n##### input\n\n`TExportWalletBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampExportWallet`](TurnkeyBrowserClient.mdx#stampexportwallet)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Organization Wallet\nDESCRIPTION: This snippet provides the structure for creating a wallet associated with the sub-organization, including accounts and mnemonic length options. These parameters are crucial for secure financial interactions within the organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.wallet? \\n\\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\} \\n\\n**Description** \\nThe wallet to create for the sub-organization\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.wallet.accounts \\n`object`[] \\n\\n**Description** \\nA list of wallet Accounts. This field, if not needed, should be an empty array in your request body.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.wallet.mnemonicLength? \\n`number` \\nFormat: int32 \\n\\n**Description** \\nLength of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.wallet.walletName \\n`string` \\n\\n**Description** \\nHuman-readable name for a Wallet.\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intent in TypeScript\nDESCRIPTION: This snippet specifies an intent for signing a transaction. It requires the private key ID, the type of transaction (such as Ethereum or Solana), and the unsigned transaction data. This is critical for maintaining secure transaction processes within the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent in TypeScript\nDESCRIPTION: This snippet describes the 'initOtpAuthIntent' used for initializing OTP-based authentication processes, including customization options for both email and SMS. This is important for secure user verification flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Activity in TurnkeyBrowserClient\nDESCRIPTION: The `stampGetActivity` TypeScript function is designed to generate a signed request for retrieving a specific activity within the Turnkey system. It accepts a `TGetActivityBody` object, which specifies the activity to be retrieved. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, representing the signed request needed to fetch the particular activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetActivity**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:162](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L162)\n\n#### Parameters\n\n##### input\n\n`TGetActivityBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetActivity`](TurnkeyBrowserClient.mdx#stampgetactivity)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified Sub-Organization IDs with getVerifiedSubOrgIds()\nDESCRIPTION: Method to retrieve a list of verified sub-organization IDs. Takes an input parameter and returns a promise with an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ngetVerifiedSubOrgIds(input): Promise<{ organizationIds: string[] }>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Tron Account Generation Function\nDESCRIPTION: Creates a wallet account for Tron blockchain using a specified path index. Used for generating deterministic accounts in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultTronAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTronAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Details - TypeScript SDK\nDESCRIPTION: Fetches detailed wallet information, including creation and update timestamps. Uses `TGetWalletBody` type as input, and returns a Promise containing the wallet structure. It is inherited from `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWallet(input): Promise<{ wallet: { createdAt: { nanos: string; seconds: string; }; exported: boolean; imported: boolean; updatedAt: { nanos: string; seconds: string; }; walletId: string; walletName: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining createApiKeys TypeScript Function Type\nDESCRIPTION: Defines a complex Promise-based function type for creating API keys with multiple nested interfaces representing different authentication and organizational intents\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createApiKeys: (input) => Promise<{ activity: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Set Payment Method Intent\nDESCRIPTION: Specifies the data structure for the `setPaymentMethodIntent`, which includes information about a credit card, such as `cardHolderEmail`, `cardHolderName`, `cvv`, `expiryMonth`, `expiryYear`, and `number`. This allows for capturing and setting payment method details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_31\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticators in JavaScript SDK\nDESCRIPTION: The `createAuthenticators` function is designed to handle the initialization of authenticator creation processes. It takes structured input parameters to facilitate various authenticator-related operations, returning a promise of a complex object containing status and identifiers. Dependencies include the precise format of input structures as outlined, and it requires an understanding of the detailed schemas for each intent. Input is a structured JSON object, and output is a promise resolving to details of the creation operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Function: createAuthenticators()\n\n> **createAuthenticators**(`input`): `Promise`<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \"public-key\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \"public-key\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\")[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1Policy type\nDESCRIPTION: Defines the structure for a policy, including condition and consensus expressions, creation and update timestamps, effect (ALLOW/DENY), notes, and policy identifiers (ID and name). Policies are used to control access and actions within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\n            v1Policy: {\n                name: \"v1Policy\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        condition: {\n                            type: \"string\",\n                            description: \"A condition expression that evalutes to true or false.\",\n                            required: true\n                        },\n                        consensus: {\n                            type: \"string\",\n                            description: \"A consensus expression that evalutes to true or false.\",\n                            required: true\n                        },\n                        createdAt: {\n                            $ref: \"#/definitions/externaldatav1Timestamp\",\n                            required: true\n                        },\n                        effect: {\n                            $ref: \"#/definitions/v1Effect\",\n                            description: \"The instruction to DENY or ALLOW a particular activity following policy selector(s).\",\n                            required: true\n                        },\n                        notes: {\n                            type: \"string\",\n                            description: \"Human-readable notes added by a User to describe a particular policy.\",\n                            required: true\n                        },\n                        policyId: {\n                            type: \"string\",\n                            description: \"Unique identifier for a given Policy.\",\n                            required: true\n                        },\n                        policyName: {\n                            type: \"string\",\n                            description: \"Human-readable name for a Policy.\",\n                            required: true\n                        },\n                        updatedAt: {\n                            $ref: \"#/definitions/externaldatav1Timestamp\",\n                            required: true\n                        }\n                    },\n                    required: [\"condition\", \"consensus\", \"createdAt\", \"effect\", \"notes\", \"policyId\", \"policyName\", \"updatedAt\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallet Request in TypeScript\nDESCRIPTION: This method creates a signed request to get wallet information. It takes a TGetWalletBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallet(input: TGetWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining GetOrganization Response Type in TypeScript\nDESCRIPTION: Type alias definition for the HTTP response from the GetOrganization API endpoint. It maps to the 200 success response schema of the PublicApiService_GetOrganization operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetOrganizationResponse = operations[\"PublicApiService_GetOrganization\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Return Struct in TypeScript\nDESCRIPTION: This TypeScript snippet outlines the structure of a Promise return type, detailing various intents related to user, organization, and key management in an SDK. It captures the data structures expected in responses, including attributes like `authenticator`, `policyName`, and `walletName`. This serves as a type definition, ensuring consistent and type-safe data handling across the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` \\| `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_CZECH\"` \\| `\"MNEMONIC_LANGUAGE_FRENCH\"` \\| `\"MNEMONIC_LANGUAGE_ITALIAN\"` \\| `\"MNEMONIC_LANGUAGE_JAPANESE\"` \\| `\"MNEMONIC_LANGUAGE_KOREAN\"` \\| `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\"ADDRESS_FORMAT_UNCOMPRESSED\" \\| \"ADDRESS_FORMAT_COMPRESSED\" \\| \"ADDRESS_FORMAT_ETHEREUM\" \\| \"ADDRESS_FORMAT_SOLANA\" \\| \"ADDRESS_FORMAT_COSMOS\" \\| \"ADDRESS_FORMAT_TRON\" \\| \"ADDRESS_FORMAT_SUI\" \\| \"ADDRESS_FORMAT_APTOS\" \\| \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" \\| \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" \\| \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" \\| \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" \\| \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" \\| \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" \\| \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" \\| \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" \\| \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" \\| \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" \\| \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" \\| \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" \\| \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" \\| \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" \\| \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" \\| \"ADDRESS_FORMAT_SEI\" \\| \"ADDRESS_FORMAT_XLM\" \\| \"ADDRESS_FORMAT_DOGE_MAINNET\" \\| \"ADDRESS_FORMAT_DOGE_TESTNET\" \\| \"ADDRESS_FORMAT_TON_V3R2\" \\| \"ADDRESS_FORMAT_TON_V4R2\" \\| \"ADDRESS_FORMAT_XRP\")[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`;\n```\n\n----------------------------------------\n\nTITLE: Defining v1CredentialType Enum in TypeScript\nDESCRIPTION: Enumerates various credential types used in the SDK, including WebAuthn, API keys, and session keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype v1CredentialType =\n  | \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\"\n  | \"CREDENTIAL_TYPE_API_KEY_P256\"\n  | \"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\"\n  | \"CREDENTIAL_TYPE_API_KEY_SECP256K1\"\n  | \"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\"\n  | \"CREDENTIAL_TYPE_API_KEY_ED25519\"\n  | \"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\"\n  | \"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\"\n  | \"CREDENTIAL_TYPE_OAUTH_KEY_P256\";\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Providers with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: The function `stampCreateOauthProviders` is designed for creating OAuth providers, taking input as TCreateOauthProvidersBody, with the result being a promise for TSignedRequest. This supports management for OAuth provider integration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreateOauthProviders**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:987](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L987)\n\n#### Parameters\n\n##### input\n\n`TCreateOauthProvidersBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Import Random Values Polyfill in React Native\nDESCRIPTION: This code imports the 'react-native-get-random-values' polyfill at the entry point of a React Native application. This is essential for enabling secure cryptographic operations when using the 'generateP256KeyPair' method from '@turnkey/crypto'. The polyfill ensures the generation of secure random bytes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"react-native-get-random-values\";\n```\n\n----------------------------------------\n\nTITLE: Defining Create Sub-Organization API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for creating a sub-organization. It specifies the HTTP method (POST), the endpoint path, and the input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nCreate Sub-Organization\n\nCreate a new Sub-Organization\n\n`POST /public/v1/submit/create_sub_organization`\n\n## Parameters\n\n### input\n\n[`TCreateSubOrganizationInput`](../type-aliases/TCreateSubOrganizationInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TRejectActivityResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TRejectActivityResponse type alias which combines the activity result from the PublicApiService_RejectActivity operation response with the v1ActivityResponse definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRejectActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TRejectActivityResponse** = `operations`[`\"PublicApiService_RejectActivity\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampDeleteApiKeys` function accepts an input of type `TDeleteApiKeysBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is used to delete API keys from the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampDeleteApiKeys(input: TDeleteApiKeysBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: TCreateReadWriteSessionResponse Type Alias Definition\nDESCRIPTION: Defines a type alias named `TCreateReadWriteSessionResponse` using the TypeScript syntax. It maps to the schema definition of the successful (200) response for the PublicApiService_CreateReadWriteSession operation, retrieved from the generated HTTP service definitions.  The type is located in the specified TypeScript definition file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateReadWriteSessionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TCreateReadWriteSessionResponse** = `operations`[`\"PublicApiService_CreateReadWriteSession\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Signing Payload Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for stamping requests to sign raw payloads. These methods prepare signed requests for single or multiple payload signing operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_126\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampSignRawPayload(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampSignRawPayloads(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthBody Type Alias\nDESCRIPTION: This snippet defines the TOauthBody type alias. It represents the structure of the request body expected by the `PublicApiService_Oauth` operation, specifically the `POST /public/v1/submit/oauth` endpoint. This is generated automatically from the API specification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOauthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TOauthBody\n * @memberof TurnkeyApi\n */\nexport type TOauthBody = operations[\"PublicApiService_Oauth\"][\"parameters\"][\"body\"][\"body\"];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Wallet Accounts - TypeScript SDK\nDESCRIPTION: Fetches a list of wallet accounts, returning them as a Promise that resolves to an array of objects. Uses `TGetWalletAccountsBody` as input and is inherited from `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWalletAccounts(input): Promise<{ accounts: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadOnlySessionInput Type Alias\nDESCRIPTION: This code snippet defines the `TCreateReadOnlySessionInput` type alias as an object with a `body` property. The `body` property is of type `TCreateReadOnlySessionBody`, representing the body of the request to create a read-only session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateReadOnlySessionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TCreateReadOnlySessionInput** = `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:17902\n\n`POST /public/v1/submit/create_read_only_session`\n\n## Properties\n\n### body\n\n> **body**: [`TCreateReadOnlySessionBody`](TCreateReadOnlySessionBody.mdx)\n\n```\n\n----------------------------------------\n\nTITLE: SDK Intent and Result Type Definitions\nDESCRIPTION: Provides detailed type structures for various SDK operations including authentication, wallet management, and organization-level actions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeyTags.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype IntentTypes = {\n  importWalletIntent: {\n    accounts: object[];\n    encryptedBundle: string;\n    userId: string;\n    walletName: string;\n  };\n  initOtpAuthIntent: {\n    contact: string;\n    emailCustomization: {\n      appName: string;\n      logoUrl: string;\n      magicLinkTemplate: string;\n      templateId: string;\n      templateVariables: string;\n    };\n    otpType: string;\n    userIdentifier: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn and Returning Signed Delete API Key Request - JavaScript/TypeScript\nDESCRIPTION: The purpose of this snippet is to define the `signDeleteApiKeys` function in the Turnkey SDK. It is a function that requests a WebAuthn assertion and returns a signed request object 'DeleteApiKeys' ready to be POSTed. It takes an input of type `TDeleteApiKeysInput` and an optional `options` parameter of type `TurnkeyCredentialRequestOptions`. It returns a promise resolving with a `SignedRequest`. No additional dependencies are noted beyond having the appropriate types defined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeleteApiKeys: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TExportPrivateKeyInput Definition\nDESCRIPTION: Shows the actual definition of the TExportPrivateKeyInput type alias and its 'body' property, which is of type `TExportPrivateKeyBody`\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **TExportPrivateKeyInput** = `object`\n */\n```\n\n----------------------------------------\n\nTITLE: Deleting Users in Turnkey SDK\nDESCRIPTION: This function deletes users based on the provided input. It accepts a `TDeleteUsersBody` object as input and returns a Promise resolving to an object.  It is part of the Turnkey Browser SDK and inherits functionality from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteUsers**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1740](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1740)\n```\n\n----------------------------------------\n\nTITLE: Stamping Get API Keys Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for retrieving multiple API keys. It takes a TGetApiKeysBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_103\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetApiKeys(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1Result Interface in TypeScript\nDESCRIPTION: This snippet defines a comprehensive result structure with optional fields for various API operations, including creating organizations, managing API keys, handling user authentication, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_130\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1Result: object\n\nacceptInvitationResult?: definitions[\"v1AcceptInvitationResult\"]\nactivateBillingTierResult?: definitions[\"billingActivateBillingTierResult\"]\ncreateApiKeysResult?: definitions[\"v1CreateApiKeysResult\"]\ncreateApiOnlyUsersResult?: definitions[\"v1CreateApiOnlyUsersResult\"]\ncreateAuthenticatorsResult?: definitions[\"v1CreateAuthenticatorsResult\"]\ncreateInvitationsResult?: definitions[\"v1CreateInvitationsResult\"]\ncreateOauthProvidersResult?: definitions[\"v1CreateOauthProvidersResult\"]\ncreateOrganizationResult?: definitions[\"v1CreateOrganizationResult\"]\ncreatePoliciesResult?: definitions[\"v1CreatePoliciesResult\"]\ncreatePolicyResult?: definitions[\"v1CreatePolicyResult\"]\ncreatePrivateKeysResult?: definitions[\"v1CreatePrivateKeysResult\"]\ncreatePrivateKeysResultV2?: definitions[\"v1CreatePrivateKeysResultV2\"]\ncreatePrivateKeyTagResult?: definitions[\"v1CreatePrivateKeyTagResult\"]\ncreateReadOnlySessionResult?: definitions[\"v1CreateReadOnlySessionResult\"]\ncreateReadWriteSessionResult?: definitions[\"v1CreateReadWriteSessionResult\"]\ncreateReadWriteSessionResultV2?: definitions[\"v1CreateReadWriteSessionResultV2\"]\ncreateSubOrganizationResult?: definitions[\"v1CreateSubOrganizationResult\"]\ncreateSubOrganizationResultV3?: definitions[\"v1CreateSubOrganizationResultV3\"]\ncreateSubOrganizationResultV4?: definitions[\"v1CreateSubOrganizationResultV4\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1EmailAuthIntent type\nDESCRIPTION: Defines the structure for the email authentication intent including optional API key name, email, optional email customization parameters, expiration seconds, invalidation settings, sender details, and the target public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1EmailAuthIntent\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1372\n\n#### apiKeyName?\n\n> `optional` **apiKeyName**: `string`\n\n##### Description\n\nOptional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>\n\n#### email\n\n> **email**: `string`\n\n##### Description\n\nEmail of the authenticating user.\n\n#### emailCustomization?\n\n> `optional` **emailCustomization**: `definitions`[``\"v1EmailCustomizationParams\"``]\n\n##### Description\n\nOptional parameters for customizing emails. If not provided, the default email will be used.\n\n#### expirationSeconds?\n\n> `optional` **expirationSeconds**: `string`\n\n##### Description\n\nExpiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used.\n\n#### invalidateExisting?\n\n> `optional` **invalidateExisting**: `boolean`\n\n##### Description\n\nInvalidate all other previously generated Email Auth API keys\n\n#### sendFromEmailAddress?\n\n> `optional` **sendFromEmailAddress**: `string`\n\n##### Description\n\nOptional custom email address from which to send the email\n\n#### sendFromEmailSenderName?\n\n> `optional` **sendFromEmailSenderName**: `string`\n\n##### Description\n\nOptional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Result Structure - TypeScript\nDESCRIPTION: This snippet outlines the structure for the result of an updating policy operation, which includes a policyId as a string. It is essential for tracking policy changes within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicyResult: { policyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining API Types - DeletePrivateKeys\nDESCRIPTION: Type definitions for deleting private keys including intent, request and result interfaces\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1DeletePrivateKeysIntent {\n  deleteWithoutExport?: boolean;\n  privateKeyIds: string[];\n}\n\ninterface v1DeletePrivateKeysRequest {\n  organizationId: string;\n  parameters: definitions[\"v1DeletePrivateKeysIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\";\n}\n\ninterface v1DeletePrivateKeysResult {\n  privateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: TStamp Type Definition in JavaScript\nDESCRIPTION: Type definition for the TStamp object returned by the stamp method. It contains the HTTP header name and value needed for authentication with the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ntype TStamp = {\n  stampHeaderName: string;\n  stampHeaderValue: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining defaultEthereumAccountAtIndex in TypeScript\nDESCRIPTION: This code defines the `defaultEthereumAccountAtIndex` function.  It takes a `pathIndex` as input and returns a `WalletAccount` object. The function's implementation is not shown, but the documentation indicates that it likely derives an Ethereum account at the specified index using a predefined derivation path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultEthereumAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **defaultEthereumAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n\n```\n\n----------------------------------------\n\nTITLE: Generating Stellar Wallet Account via Path Index\nDESCRIPTION: Creates a WalletAccount for Stellar (XLM) using a specified path index for deterministic account generation. Useful for creating multiple accounts from a single seed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultXlmAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultXlmAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Session\nDESCRIPTION: This function, createReadOnlySession, takes input parameters and returns a promise. The resolved value includes an activity object that contains permission flags, created timestamps, user identifiers, and other activity-related details. The structure of the returned object is essential for understanding what actions the user can perform.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadOnlySession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createReadOnlySession = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curv\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Regtest P2WPKH Accounts\nDESCRIPTION: Configures a constant array of predefined wallet accounts for Bitcoin Regtest network, specifically using P2WPKH address type. Used for testing and development purposes in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Type Alias Initialization for Public API Service - TypeScript\nDESCRIPTION: The type alias TInitImportWalletBody represents the structure of the request body used in the Public API Service's InitImportWallet operation. It is defined within a generated service file. This alias aids in maintaining type safety across SDK operations and is essential for making properly formatted requests to the import wallet endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitImportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TInitImportWalletBody = operations[\\\"PublicApiService_InitImportWallet\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createReadOnlySession in TypeScript\nDESCRIPTION: The createReadOnlySession method enables the creation of a read-only session using the provided input, returning a Promise of an object. This method helps establish sessions that are restricted to view-only, ensuring data integrity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createReadOnlySession**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:1102](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1102)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountBody Type Alias\nDESCRIPTION: This snippet defines the `TGetWalletAccountBody` type alias. It uses TypeScript's type indexing to extract the type of the request body from the `PublicApiService_GetWalletAccount` operation within the `operations` object. The type alias represents the expected structure for the request body when calling the `get_wallet_account` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TGetWalletAccountBody\n *\n * > **TGetWalletAccountBody** = `operations`[`\"PublicApiService_GetWalletAccount\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:656](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L656)\n *\n * `POST /public/v1/query/get_wallet_account`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Account Creation Request - TypeScript\nDESCRIPTION: This TypeScript definition specifies the structure of a wallet account creation request, including organization ID, parameters, timestamp, and request type. It facilitates the creation of wallet accounts by gathering necessary data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CreateWalletAccountsRequest: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1107\n */\nexport interface v1CreateWalletAccountsRequest {\n  organizationId: string; // Unique identifier for a given Organization.\n  parameters: definitions[\"v1CreateWalletAccountsIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n  type: \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication Endpoint Definition - TypeScript\nDESCRIPTION: API endpoint definition for initiating OTP authentication via POST request. Includes type definitions for activity statuses, result types, and various activity types supported by the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initOtpAuth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /public/v1/submit/init_otp_auth\n\nParameters:\ninput: TInitOtpAuthInput\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Wallet Details with getWallet()\nDESCRIPTION: Method to fetch details of a specific wallet. Returns wallet metadata including creation time, export status, and wallet identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ngetWallet(input): Promise<{ wallet: { walletId: string, walletName: string, createdAt: {...}, updatedAt: {...}, exported: boolean, imported: boolean } }>\n```\n\n----------------------------------------\n\nTITLE: Stamp Recover User with Turnkey SDK\nDESCRIPTION: This function `stampRecoverUser` is responsible for creating a signed request to recover a user using the Turnkey SDK. It takes a `TRecoverUserBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampRecoverUser**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2270](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2270)\n\n#### Parameters\n\n##### input\n\n`TRecoverUserBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up OTP Authentication Intent - TypeScript\nDESCRIPTION: The snippet defines the structure for initializing OTP authentication, encompassing configurations for contact information and customizations for both email and SMS, thereby providing a comprehensive setup for user authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype InitOtpAuthIntent = { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition - Cryptographic Operations\nDESCRIPTION: Type definitions for cryptographic operations including hash functions and key import functionality\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1HashFunction = \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\";\n\ninterface v1ImportPrivateKeyIntent {\n  addressFormats: definitions[\"v1AddressFormat\"][];\n  curve: definitions[\"v1Curve\"];\n  encryptedBundle: string;\n  privateKeyName: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Policies Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating policies. It takes an input of type TCreatePoliciesBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePolicies(input: TCreatePoliciesBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize Import Private Key Request in TypeScript\nDESCRIPTION: Method signature for stampInitImportPrivateKey which prepares a signed request for initializing a private key import process. It accepts a TInitImportPrivateKeyBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitImportPrivateKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Sign Transaction Intent V2\nDESCRIPTION: Specifies the data structure for the `signTransactionIntentV2`, that includes `signWith`, `type`, and `unsignedTransaction`. It allows signing raw transactions using a wallet account, private key address or private key identifier.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_37\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `signWith`: `string`; `type`: `\\\"TRANSACTION_TYPE_ETHEREUM\\\"` \\| `\\\"TRANSACTION_TYPE_SOLANA\\\"; `unsignedTransaction`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletAccountRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a wallet account. It includes optional address and path properties, and required organizationId and walletId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_104\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetWalletAccountRequest: object\n{\n  address?: string\n  organizationId: string\n  path?: string\n  walletId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Information in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for retrieving wallet details. Returns a Promise that resolves to an object containing wallet information including creation time, update time, wallet ID, name, and export status.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWallet(input): Promise<{ wallet: { createdAt: { nanos: string; seconds: string; }; exported: boolean; imported: boolean; updatedAt: { nanos: string; seconds: string; }; walletId: string; walletName: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Implementing SignTypedData Method in TypeScript with Ethers\nDESCRIPTION: Method signature for signing typed data according to EIP-712 standard. Takes domain parameters, type definitions, and values to sign, returning a promise that resolves to the signature string. Implements ethers.Signer.signTypedData and overrides AbstractSigner.signTypedData.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, any>): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining TSignTransactionResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TSignTransactionResponse that combines the sign transaction result schema with the v1ActivityResponse definition, used for handling transaction signing responses in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignTransactionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSignTransactionResponse** = `operations`[`\"PublicApiService_SignTransaction\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"signTransactionResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Signing Organization Feature Configuration Request in TypeScript\nDESCRIPTION: A function that generates a signed request for setting organization features using WebAuthn authentication. It takes an input configuration and optional credential request options, returning a Promise with a signed request ready to be sent to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signSetOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signSetOrganizationFeature: (input, options?) => Promise\\<SignedRequest\\>\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePolicyIntent Structure in TypeScript\nDESCRIPTION: Defines the intent structure for deleting a policy, requiring the policy ID as a unique identifier.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePolicyIntent {\n    policyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamp Export Wallet Account in TurnkeyBrowserClient\nDESCRIPTION: The TypeScript function `stampExportWalletAccount` is used to generate a signed request for exporting a specific wallet account from the Turnkey system. It accepts a `TExportWalletAccountBody` object as input, which provides details on which wallet account should be exported.  The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, the signed request required to export the designated wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampExportWalletAccount**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1941](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1941)\n\n#### Parameters\n\n##### input\n\n`TExportWalletAccountBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampExportWalletAccount`](TurnkeyBrowserClient.mdx#stampexportwalletaccount)\n```\n\n----------------------------------------\n\nTITLE: Initializing Private Key Import in Turnkey SDK (TS)\nDESCRIPTION: This method initializes the import of a private key using the Turnkey SDK. It takes a `TInitImportPrivateKeyBody` as input and returns a Promise that resolves to an object representing the result of the initialization. This function is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n> **initImportPrivateKey**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1919](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1919)\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createOauthProviders in TypeScript\nDESCRIPTION: The createOauthProviders method handles the creation of OAuth providers using input of type TCreateOauthProvidersBody, returning a Promise of an anonymous object. This method supports OAuth integration on the server side.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createOauthProviders**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:938](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L938)\n```\n\n----------------------------------------\n\nTITLE: Inserting API Key into Cloud Storage\nDESCRIPTION: Inserts an API key into cloud storage with public and private key components. Supports an optional custom key for flexible key management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/classes/TelegramCloudStorageStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninsertAPIKey(apiPublicKey: string, apiPrivateKey: string, key: string = DEFAULT_TURNKEY_CLOUD_STORAGE_KEY): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Stamping Get API Key Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for retrieving a specific API key. It takes a TGetApiKeyBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_102\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetApiKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Fetching Private Key with SDK Client\nDESCRIPTION: The stampGetPrivateKey method is used to retrieve a private key using input of TGetPrivateKeyBody. It returns a Promise resolving to either undefined or a TSignedRequest, enabling secure private key access.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPrivateKey**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion - TypeScript\nDESCRIPTION: The function signGetVerifiedSubOrgIds takes an input object of type TGetVerifiedSubOrgIdsInput and an optional options object of type TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest, which is a structured request prepared for posting to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetVerifiedSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetVerifiedSubOrgIds(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Getting Activities - TypeScript\nDESCRIPTION: Retrieves activities based on TGetActivitiesBody input, with asynchronous handling via a TSignedRequest promise. Ensures proper input format for retrieval success.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivities(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Using Turnkey Client Hook in TypeScript\nDESCRIPTION: Example showing how to use the useTurnkey hook to access the authenticated client object. The client will be null if user is not authenticated.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { client } = useTurnkey();\n```\n\n----------------------------------------\n\nTITLE: Typescript Type Alias for Private Key Body\nDESCRIPTION: Defines the type structure for the body parameter used in the GetPrivateKey operation of the Turnkey Public API Service. Represents the request payload for retrieving a private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetPrivateKeyBody = operations[\"PublicApiService_GetPrivateKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Stamping Wallet Operation Request Methods\nDESCRIPTION: Collection of methods for stamping wallet-related operation requests including getting wallet details and accounts. These methods handle request signing for wallet management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallet(input: TGetWalletBody): Promise<undefined | TSignedRequest>\n\nstampGetWalletAccount(input: TGetWalletAccountBody): Promise<undefined | TSignedRequest>\n\nstampGetWalletAccounts(input: TGetWalletAccountsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Fetching Attestation Document using Turnkey SDK in TypeScript\nDESCRIPTION: This code snippet defines a function `getAttestationDocument` that takes an input parameter and returns a Promise. The Promise resolves to an object containing the `attestationDocument` string. This function is intended to be used for fetching attestation documents from an enclave through a POST request to the specified API endpoint. It depends on having a correctly structured `input` of type `TGetAttestationDocumentInput`, which is defined elsewhere.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getAttestationDocument.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"const getAttestationDocument: (input) => Promise<{ attestationDocument: string; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Transaction Intent Structure - TypeScript\nDESCRIPTION: This snippet outlines the structure for signing a transaction, specifying required fields like privateKeyId, transaction type, and the unsigned transaction data. It facilitates the signing process for various blockchain transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating Signed OAuth Provider Requests with TypeScript\nDESCRIPTION: Function that generates a signed request for creating OAuth providers. It accepts provider creation input and optional credential request options, returning a promise that resolves to a signed request suitable for POSTing to Turnkey's API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignCreateOauthProviders(input: TCreateOauthProvidersInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Declaration of signCreateReadWriteSession Function in TypeScript\nDESCRIPTION: Declaration of the signCreateReadWriteSession constant function that takes input and optional options parameters to generate a signed CreateReadWriteSession request. The function requests a WebAuthn assertion and returns a Promise resolving to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateReadWriteSession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **signCreateReadWriteSession**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Feature\nDESCRIPTION: Asynchronous method for setting an organization feature with a specific input body, returning a Promise with the configuration response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrganizationFeature(input: TSetOrganizationFeatureBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Create ReadOnly Session Body in TypeScript\nDESCRIPTION: This snippet defines a type alias named TCreateReadOnlySessionBody that represents the structure required for the body of the create read-only session operation in the Turnkey SDK. It combines operation parameters and command override parameters to create a unified structure that can be used when making API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateReadOnlySessionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateReadOnlySessionBody = operations[\\\"PublicApiService_CreateReadOnlySession\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize Import Private Key Request in TypeScript\nDESCRIPTION: Method to stamp a request for initializing the import of a private key. It takes an input of type TInitImportPrivateKeyBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitImportPrivateKey(input: TInitImportPrivateKeyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users List in TypeScript\nDESCRIPTION: With stampGetUsers, a full list of users can be obtained using TGetUsersBody as input, and a Promise returns either undefined or TSignedRequest. Another function from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_116\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetUsers(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intent Types\nDESCRIPTION: Complex type definitions for various SDK intent operations including authentication, wallet management, and user interactions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype IntentTypes = {\n  initOtpAuthIntent: {\n    contact: string;\n    otpType: string;\n    userIdentifier: string;\n    emailCustomization: {\n      appName: string;\n      logoUrl: string;\n      magicLinkTemplate: string;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Blockchain SDK\nDESCRIPTION: Extensive TypeScript type definitions covering wallet management, authentication flows, organization management, and transaction signing capabilities. Includes interfaces for API requests and responses with strongly typed properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayload.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n  importWalletIntent: {\n    accounts: object[];\n    encryptedBundle: string;\n    userId: string;\n    walletName: string;\n  };\n  initImportPrivateKeyIntent: {\n    userId: string;\n  };\n  // Additional interface definitions omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Structures in JavaScript\nDESCRIPTION: This snippet defines the result structures for various operations related to activities, such as signing transactions and updating policies. The structures indicate expected fields like 'signedTransaction' and 'policyId', and are designed to provide a clear format for API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeyTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n`s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\};\n```\n\n----------------------------------------\n\nTITLE: Constructor for ApiKeyStamper\nDESCRIPTION: This constructor creates a new instance of the ApiKeyStamper class, requiring a configuration object of type TApiKeyStamperConfig. Upon creation, it returns an instance of ApiKeyStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ApiKeyStamper(config): ApiKeyStamper\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticator Information in TypeScript\nDESCRIPTION: This method retrieves information about a specific authenticator. It returns a Promise containing details such as the authenticator's ID, name, credential type, and associated timestamps.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAuthenticator(): Promise<{ authenticator: { aaguid: string; attestationType: string; authenticatorId: string; authenticatorName: string; createdAt: { nanos: string; seconds: string; }; credential: { publicKey: string; type: \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | \"CREDENTIAL_TYPE_API_KEY_P256\" | \"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\" | \"CREDENTIAL_TYPE_API_KEY_SECP256K1\" | \"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\" | \"CREDENTIAL_TYPE_API_KEY_ED25519\" | \"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\" | \"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\" | \"CREDENTIAL_TYPE_OAUTH_KEY_P256\"; }; credentialId: string; model: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; updatedAt: { nanos: string; seconds: string; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Getting Verified SubOrg IDs\nDESCRIPTION: Method to retrieve verified sub-organization IDs. Returns a Promise containing an array of organization ID strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetVerifiedSubOrgIds(input: TGetVerifiedSubOrgIdsBody): Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: User Email Recovery Intent Definition in TypeScript\nDESCRIPTION: The `initUserEmailRecoveryIntent` interface specifies the structures and types required for initiating a user email recovery process. This enables users to recover their accounts using their email and includes necessary customization for email communication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ `initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Promise Return Type Definition - TypeScript Types\nDESCRIPTION: Comprehensive TypeScript interface definition for a Promise return type containing activity and intent-related properties. Includes detailed type definitions for authentication, organization management, wallet operations, and policy controls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {...};\n      activateBillingTierIntent: {...};\n      approveActivityIntent: {...};\n      // Additional intent definitions truncated for brevity\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete API Keys Request in TypeScript\nDESCRIPTION: Method to stamp a request for deleting API keys. It takes an input of type TDeleteApiKeysBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteApiKeys(input: TDeleteApiKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Injecting Wallet Export Bundle with TurnkeyIframeClient\nDESCRIPTION: Demonstrates injection of a wallet export bundle into an iframe for secure credential transfer.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects a credential bundle into the iframe for session management\nconst success = await iframeClient.injectWalletExportBundle(\n  \"wallet-bundle\",\n  \"org-id\"\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Users - TypeScript\nDESCRIPTION: Facilitates the deletion of users with input data provided via TDeleteUsersBody. Returns a promise, depending on TSignedRequest for a successful completion, demanding precise input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUsers(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Input Type in TypeScript\nDESCRIPTION: Type alias that represents the input structure for initializing one-time password authentication via a POST request. Contains a body property of type TInitOtpAuthBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitOtpAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TInitOtpAuthInput = {\n  body: TInitOtpAuthBody\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticators in Turnkey SDK\nDESCRIPTION: Method for deleting authenticators with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteAuthenticators(input: TDeleteAuthenticatorsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Verifying Turnkey Stamp Signature using ECDSA and SHA-256 in TypeScript\nDESCRIPTION: This function verifies a signature from a Turnkey stamp using ECDSA and SHA-256. It takes a public key, signature, and signed data as input, and returns a boolean indicating whether the signature is valid. If the signature is invalid, it throws an error.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/verifyStampSignature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst stampedRequest = await turnkeyClient.stampGetWhoami(...);\nconst decodedStampContents = atob(stampedRequest.stamp.stampHeaderValue);\nconst parsedStampContents = JSON.parse(decodedStampContents);\nconst signature = parsedStampContents.signature;\n\nawait verifyStampSignature(publicKey, signature, stampedRequest.body)\n```\n\n----------------------------------------\n\nTITLE: Updating Root Quorum with Turnkey SDK in TypeScript\nDESCRIPTION: Method for updating a root quorum through the Turnkey API. It accepts a TUpdateRootQuorumBody parameter and returns a Promise containing the response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nupdateRootQuorum(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Intent Parameters\nDESCRIPTION: This snippet details the structure for initiating a user email recovery intent, including parameters for email customization preferences, expiration settings for the recovery credential, and encryption keys pertinent to the recovery operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"string\",\n  \"emailCustomization\": {\n    \"appName\": \"string\",\n    \"logoUrl\": \"string\",\n    \"magicLinkTemplate\": \"string\",\n    \"templateId\": \"string\",\n    \"templateVariables\": \"string\"\n  },\n  \"expirationSeconds\": \"string\",\n  \"targetPublicKey\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stamp Delete Wallets in TurnkeyBrowserClient\nDESCRIPTION: The TypeScript function `stampDeleteWallets` is used to generate a signed request for deleting wallets in the Turnkey system. It accepts a `TDeleteWalletsBody` object, which specifies the wallets to be deleted. The function returns a Promise resolving to either `undefined` or a `TSignedRequest` object, representing the signed request needed to execute the wallet deletion operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampDeleteWallets**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1796](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1796)\n\n#### Parameters\n\n##### input\n\n`TDeleteWalletsBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampDeleteWallets`](TurnkeyBrowserClient.mdx#stampdeletewallets)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletsBody Type Alias in TypeScript\nDESCRIPTION: Defines a type alias TGetWalletsBody that maps to the request body parameters for the PublicApiService_GetWallets operation. This type is used for making requests to the /public/v1/query/list_wallets endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetWalletsBody = operations[\"PublicApiService_GetWallets\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Raw Payloads Signing Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for signing multiple raw payloads, which contains an array of signatures as objects. This is utilized for batch processing of signatures in transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Types in TypeScript\nDESCRIPTION: Defines complex TypeScript types for API responses, including status enums, activity types, and various result objects. These types are used to ensure type safety when working with API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteInvitationInput type alias as an object with a single property 'body' of type TDeleteInvitationBody. It is used to structure the input for deleting an invitation in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteInvitationInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining stampGetWhoami Method in TypeScript\nDESCRIPTION: Method to create a signed request for getting whoami information. Takes a TGetWhoamiBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_122\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWhoami(input: TGetWhoamiBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamp Methods TypeScript Declarations\nDESCRIPTION: TypeScript method declarations for stamp operations in the TurnkeyServerClient class. Each method handles different server-side operations like deleting user tags, managing wallets, authentication, and key management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUserTags(input: TDeleteUserTagsBody): Promise<undefined | TSignedRequest>\n\nstampDeleteWallets(input: TDeleteWalletsBody): Promise<undefined | TSignedRequest>\n\nstampEmailAuth(input: TEmailAuthBody): Promise<undefined | TSignedRequest>\n\nstampExportPrivateKey(input: TExportPrivateKeyBody): Promise<undefined | TSignedRequest>\n\nstampExportWallet(input: TExportWalletBody): Promise<undefined | TSignedRequest>\n\nstampExportWalletAccount(input: TExportWalletAccountBody): Promise<undefined | TSignedRequest>\n\nstampGetActivities(input: TGetActivitiesBody): Promise<undefined | TSignedRequest>\n\nstampGetActivity(input: TGetActivityBody): Promise<undefined | TSignedRequest>\n\nstampGetApiKey(input: TGetApiKeyBody): Promise<undefined | TSignedRequest>\n\nstampGetApiKeys(input: TGetApiKeysBody): Promise<undefined | TSignedRequest>\n\nstampGetAttestationDocument(input: TGetAttestationDocumentBody): Promise<undefined | TSignedRequest>\n\nstampGetAuthenticator(input: TGetAuthenticatorBody): Promise<undefined | TSignedRequest>\n\nstampGetAuthenticators(input: TGetAuthenticatorsBody): Promise<undefined | TSignedRequest>\n\nstampGetOauthProviders(input: TGetOauthProvidersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining getAuthenticators Function in TypeScript for Turnkey API\nDESCRIPTION: Declaration of the getAuthenticators function which retrieves authenticator details for a user. The function takes a TGetAuthenticatorsInput parameter and returns a Promise containing an array of authenticator objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **getAuthenticators**: (`input`) => `Promise`\\<\\{ `authenticators`: `object`[]; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Promise Return Type Structure in TurnKey SDK - TypeScript\nDESCRIPTION: A detailed type definition of the Promise return structure from the TurnKey SDK. It includes activity details with approval states, timestamps, intent types for various operations such as invitation management, organization creation, authenticator management, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { nanos: string; seconds: string; }; \n    failure: { code: number; details: object & object[]; message: string; }; \n    fingerprint: string; \n    id: string; \n    intent: { /* various intent types */ };\n    /* Additional properties truncated */\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the request body of the update user tag operation. It references the body parameter of the PublicApiService_UpdateUserTag operation from the generated API fetcher.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TUpdateUserTagBody** = `operations`[`\"PublicApiService_UpdateUserTag\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: TCreatePrivateKeysInput properties\nDESCRIPTION: Documentation for the `body` property of the `TCreatePrivateKeysInput` type alias. This property expects a value that adheres to the `TCreatePrivateKeysBody` type, which likely contains the specific details needed for creating private keys. The definition points to where `TCreatePrivateKeysBody` is defined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePrivateKeysInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * @public\n */\nexport interface TCreatePrivateKeysInput {\n    body: TCreatePrivateKeysBody;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for Signing Transactions\nDESCRIPTION: This snippet details the result structures for signing raw payloads and transactions, specifying the components of ECSDA signatures. It clarifies the expected output for signatures generated as part of these operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_98\n\nLANGUAGE: JSON\nCODE:\n```\nresult.signRawPayloadResult?\n{ r: string; s: string; v: string; }\n\nresult.signRawPayloadResult.r\n\nstring\n\nDescription\n\nComponent of an ECSDA signature.\n\nresult.signRawPayloadResult.s\n\nstring\n\nDescription\n\nComponent of an ECSDA signature.\n\nresult.signRawPayloadResult.v\n\nstring\n\nDescription\n\nComponent of an ECSDA signature.\n\nresult.signTransactionResult?\n{ signedTransaction: string; }\n\nresult.signTransactionResult.signedTransaction\n\nstring\n```\n\n----------------------------------------\n\nTITLE: Defining Address Formats in TypeScript\nDESCRIPTION: This snippet defines the various address formats for different cryptocurrencies in TypeScript. It includes formats for Bitcoin, SEI, XLM, Dogecoin, TON, and XRP, ensuring type safety by utilizing union types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete a policy using the Turnkey SDK. It accepts an input of type TDeletePolicyBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeletePolicy(input: TDeletePolicyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session API Endpoint in TypeScript\nDESCRIPTION: Specifies the API endpoint for creating a read-write session for a user. It includes the HTTP method, endpoint path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nCreate Read Write Session\n\nCreate a read write session for a user\n\n`POST /public/v1/submit/create_read_write_session`\n\n## Parameters\n\n### input\n\n[`TCreateReadWriteSessionInput`](../type-aliases/TCreateReadWriteSessionInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Declaring getPolicy Function in TypeScript\nDESCRIPTION: This code snippet defines the getPolicy function as a constant. It takes an input parameter and returns a Promise that resolves to an object containing policy details. The function is used to get information about a specific policy via a POST request to the '/public/v1/query/get_policy' endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getPolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getPolicy: (input) => Promise<{ policy: { condition: string; consensus: string; createdAt: { nanos: string; seconds: string; }; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyId: string; policyName: string; updatedAt: { nanos: string; seconds: string; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion in TypeScript\nDESCRIPTION: This TypeScript snippet defines a constant function `signGetOrganization` that requests a WebAuthn assertion and returns a signed request to interact with the Turnkey API. It takes an input object and optional options, returning a promise that resolves to a `SignedRequest`. This function is part of the SDK's capability to use WebAuthn for securing API requests. The function is defined within a TypeScript declaration file and involves using types like `TGetOrganizationInput` and `TurnkeyCredentialRequestOptions`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signGetOrganization: (input: TGetOrganizationInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Aptos Accounts\nDESCRIPTION: This code snippet defines a constant variable `DEFAULT_APTOS_ACCOUNTS` as an array of `WalletAccount` objects. These accounts are likely pre-configured for use with the Aptos blockchain within the Turnkey SDK server. The `WalletAccount` interface/type is assumed to be defined elsewhere in the codebase.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_APTOS_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @remarks\n * This is `WalletAccount` https://aptos.dev/reference/glossary#account\n */\n\n/**\n * Default Aptos accounts that will be created when a new org is initialized.\n * This is useful for testing and demo purposes.\n */\nexport const DEFAULT_APTOS_ACCOUNTS: WalletAccount[] = [\n  {\n    accountName: \"Aptos Account 1\",\n    passkeyPublicKey: \"0x028b933176a619a409921b7e5f48705324d38a9c58e72d2c6dd950a4b6857834\",\n  },\n  {\n    accountName: \"Aptos Account 2\",\n    passkeyPublicKey: \"0x02a0c6631b46d7d85834d060ba27f7648bfb272d599a4b6ef5d9268d94f02c25\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining initImportWallet Function in Typescript\nDESCRIPTION: This code snippet defines the `initImportWallet` function. The function accepts an `input` argument and returns a Promise that resolves to an object containing activity details, including whether the activity can be approved or rejected, timestamps, failure information, fingerprint, ID, and intent. The intent can vary greatly in type and depends on what actions are expected from the wallet import.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const` **initImportWallet**: (`input`) => `Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\\\"public-key\\\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` \\| `\\\"platform\\\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\\\"public-key\\\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\\\"MNEMONIC_LANGUAGE_ENGLISH\\\"` \\| `\\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\"` \\| `\\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\"` \\| `\\\"MNEMONIC_LANGUAGE_CZECH\\\"` \\| `\\\"MNEMONIC_LANGUAGE_FRENCH\\\"` \\| `\\\"MNEMONIC_LANGUAGE_ITALIAN\\\"` \\| `\\\"MNEMONIC_LANGUAGE_JAPANESE\\\"` \\| `\\\"MNEMONIC_LANGUAGE_KOREAN\\\"` \\| `\\\"MNEMONIC_LANGUAGE_SPANISH\\\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\"` \\| `\\\"ADDRESS_FORMAT_COMPRESSED\\\"` \\| `\\\"ADDRESS_FORMAT_ETHEREUM\\\"` \\| `\\\"ADDRESS_FORMAT_SOLANA\\\"` \\| `\\\"ADDRESS_FORMAT_COSMOS\\\"` \\| `\\\"ADDRESS_FORMAT_TRON\\\"` \\| `\\\"ADDRESS_FORMAT_SUI\\\"` \\| `\\\"ADDRESS_FORMAT_APTOS\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_SEI\\\"` \\| `\\\"ADDRESS_FORMAT_XLM\\\"` \\| `\\\"ADDRESS_FORMAT_DOGE_MAINNET\\\"` \\| `\\\"ADDRESS_FORMAT_DOGE_TESTNET\\\"` \\| `\\\"ADDRESS_FORMAT_TON_V3R2\\\"` \\| `\\\"ADDRESS_FORMAT_TON_V4R2\\\"` \\| `\\\"ADDRESS_FORMAT_XRP\\\"`)[]; `curve`: `\\\"CURV\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Types\nDESCRIPTION: This snippet defines the possible status values for activities and the various types of activities that can occur.  Activity status includes states like created, pending, completed, and failed.  Activity types cover a wide range of actions such as creating API keys, signing transactions, managing users, and updating policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;`\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivitiesResponse Type Alias in TypeScript\nDESCRIPTION: Defines the TGetActivitiesResponse type alias which represents the schema structure of the successful response (200) from the PublicApiService_GetActivities operation. This type is used for the POST /public/v1/query/list_activities endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetActivitiesResponse** = `operations`[`\"PublicApiService_GetActivities\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Intent Structure - JSON\nDESCRIPTION: This snippet defines the update policy intent structure, specifying the parameters necessary for updating a policy, such as policy conditions, consensus, effect, and identity. This schema facilitates the management of access and permissions within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"updatePolicyIntent\": { \"policyCondition\": \"string\", \"policyConsensus\": \"string\", \"policyEffect\": \"EFFECT_ALLOW\" | \"EFFECT_DENY\", \"policyId\": \"string\", \"policyName\": \"string\", \"policyNotes\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures in JavaScript\nDESCRIPTION: This snippet defines the structure of results returned from various operations within the SDK, including signed transactions, user updates, and policy changes. It specifies the expected objects and their properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUser.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n`signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; ...;\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags - TypeScript\nDESCRIPTION: This function deletes tags associated with private keys. Utilizing TDeletePrivateKeyTagsBody for input and TSignedRequest for output, it operates asynchronously, failing on improper input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePrivateKeyTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tags with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: This function `stampCreatePrivateKeyTag`, for tagging private keys, requires input `TCreatePrivateKeyTagBody`. It promises TSignedRequest on success, essential for systems tracking and managing key metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreatePrivateKeyTag**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:1097](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1097)\n\n#### Parameters\n\n##### input\n\n`TCreatePrivateKeyTagBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Information in TypeScript\nDESCRIPTION: The stampGetWallet function fetches wallet information needing TGetWalletBody input. It returns a Promise resolving to undefined or TSignedRequest, inherited from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_118\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TCreateAuthenticatorsInput - TypeScript\nDESCRIPTION: This snippet defines a type alias named 'TCreateAuthenticatorsInput' as an object type which is utilized in the SDK to structure the inputs required for creating authenticators. It includes a body property which is of type 'TCreateAuthenticatorsBody'. The type alias aids in type-checking and enhances code readability for developers using the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateAuthenticatorsInput = {\\n  body: TCreateAuthenticatorsBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Import in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for initializing the process of importing a wallet. Takes input parameters and returns a Promise that resolves to an object with initialization result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitImportWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Creating Token Transfer Policy in Solana\nDESCRIPTION: This command creates a policy allowing a specific non-root user to make SPL transfers to a designated Associated Token Address. It prompts for the non-root user ID and the token mint address.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm token-transfer-policy create-token-policy\n```\n\n----------------------------------------\n\nTITLE: Defining v1RootUserParamsV3 Type\nDESCRIPTION: Defines the structure `v1RootUserParamsV3` as an object type, which contains parameters for creating a root user. It includes properties for API keys (v1ApiKeyParamsV2), authenticators, OAuth providers, user email, and user name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\n### v1RootUserParamsV3\n\n> **v1RootUserParamsV3**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2357\n\n#### apiKeys\n\n> **apiKeys**: `definitions`[`\"v1ApiKeyParamsV2\"`][]\n\n##### Description\n\nA list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\n#### authenticators\n\n> **authenticators**: `definitions`[`\"v1AuthenticatorParamsV2\"`][]\n\n##### Description\n\nA list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\n#### oauthProviders\n\n> **oauthProviders**: `definitions`[`\"v1OauthProviderParams\"`][]\n\n##### Description\n\nA list of Oauth providers. This field, if not needed, should be an empty array in your request body.\n\n#### userEmail?\n\n> `optional` **userEmail**: `string`\n\n##### Description\n\nThe user's email address.\n\n#### userName\n\n> **userName**: `string`\n\n##### Description\n\nHuman-readable name for a User.\n```\n\n----------------------------------------\n\nTITLE: Type Definition for signCreateAuthenticators Function\nDESCRIPTION: TypeScript function signature for signCreateAuthenticators that takes an input of type TCreateAuthenticatorsInput and optional TurnkeyCredentialRequestOptions, returning a Promise of SignedRequest. Used to request WebAuthn assertions and create signed authenticator requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignCreateAuthenticators(input: TCreateAuthenticatorsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account with Advanced Type Definitions\nDESCRIPTION: Function for exporting a specific wallet account using a target public key and address. Part of a complex authentication and wallet management system with multiple intents and detailed type structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportWalletAccount(`input`): Promise<{ activity: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Generating WebAuthn Assertion for Private Key Request - TypeScript\nDESCRIPTION: The `signGetPrivateKey` function requests a WebAuthn assertion and constructs a signed `GetPrivateKey` request. The function requires `input` of type `TGetPrivateKeyInput` and optionally `options` of type `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves with a `SignedRequest`. Dependencies include the `GetPrivateKey` and the `SignedRequest` types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signGetPrivateKey**(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\\n\\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:540](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L540)\n```\n\n----------------------------------------\n\nTITLE: Creating Invitations - TypeScript\nDESCRIPTION: The `stampCreateInvitations` function requires an input of type `TCreateInvitationsBody` and returns a promise resolving to either undefined or a `TSignedRequest`. It is used to facilitate the creation of invitations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateInvitations(input: TCreateInvitationsBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeysInput type alias in TypeScript\nDESCRIPTION: The TCreatePrivateKeysInput type alias defines the structure for input when creating private keys. It is an object containing a body property that conforms to the TCreatePrivateKeysBody type. This snippet highlights the type definition within the SDK's generated API types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * @public\n */\nexport type TCreatePrivateKeysInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: User Management Type Definitions\nDESCRIPTION: Type definitions for user management intents including user creation, user tags, and user deletion operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserManagementIntents {\n  createUsersIntent?: {\n    users: object[];\n  };\n  createUserTagIntent?: {\n    userIds: string[];\n    userTagName: string;\n  };\n  deleteUsersIntent?: {\n    userIds: string[];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Parameters Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for API Key parameters, including fields for the API Key name, curve type, expiration, and public key details, utilizing external definitions for type consistency.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ApiKeyParamsV2**: `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:502\n\n#### apiKeyName\n\n> **apiKeyName**: `string`\n\n##### Description\n\nHuman-readable name for an API Key.\n\n#### curveType\n\n> **curveType**: `definitions`[`\"v1ApiKeyCurve\"`]\n\n##### Description\n\nThe curve type to be used for processing API key signatures.\n\n#### expirationSeconds?\n\n> `optional` **expirationSeconds**: `string`\n\n##### Description\n\nOptional window (in seconds) indicating how long the API Key should last.\n\n#### publicKey\n\n> **publicKey**: `string`\n\n##### Description\n\nThe public component of a cryptographic key pair used to sign messages and transactions.\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SDK Client\nDESCRIPTION: The stampGetAuthenticator method is used to fetch a single authenticator based on the input of type TGetAuthenticatorBody. It returns a Promise resolving to either undefined or a TSignedRequest, ensuring successful retrieval of the authentication details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetAuthenticator**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining getPrivateKey Function in TypeScript\nDESCRIPTION: Defines the getPrivateKey function that retrieves details about a private key. It takes an input of type TGetPrivateKeyInput and returns a Promise containing the private key details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getPrivateKey: (input) => Promise<{ privateKey: { addresses: object[]; createdAt: { nanos: string; seconds: string; }; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; exported: boolean; imported: boolean; privateKeyId: string; privateKeyName: string; privateKeyTags: string[]; publicKey: string; updatedAt: { nanos: string; seconds: string; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Authenticators\nDESCRIPTION: Method to retrieve a list of authenticators associated with an organization, returning a Promise containing an array of authenticator objects\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ngetAuthenticators(input): Promise<{ authenticators: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Account Details - TypeScript SDK\nDESCRIPTION: Provides an interface to get wallet account details including address, format, and creation details. Input parameter is defined by the `TGetWalletAccountBody` type. Returns a Promise with an account structure, and is part of the `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWalletAccount(input): Promise<{ account: { address: string; addressFormat: string; createdAt: { nanos: string; seconds: string; }; curve: string; organizationId: string; path: string; pathFormat: string; updatedAt: { nanos: string; seconds: string; }; walletAccountId: string; walletId: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Delete Oauth Providers in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete OAuth providers using the TurnkeyBrowserClient. It takes a `TDeleteOauthProvidersBody` as input and returns a Promise that resolves to an object.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteOauthProviders**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1519](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1519)\n\n#### Parameters\n\n##### input\n\n`TDeleteOauthProvidersBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`deleteOauthProviders`](TurnkeyBrowserClient.mdx#deleteoauthproviders)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetSubOrgIdsBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the request body structure for the POST /public/v1/query/list_suborgs endpoint. It maps to the body parameters of the PublicApiService_GetSubOrgIds operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetSubOrgIdsBody = operations[\"PublicApiService_GetSubOrgIds\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Sign Result Structures - TypeScript\nDESCRIPTION: Defines structures related to signing raw payloads including results indicating return values and signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadsResult`: \\{ `signatures`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Transaction Payload\nDESCRIPTION: Method for signing a raw transaction payload with specified input. Returns a signed request or undefined. Supports single payload signing in Turnkey browser client.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nstampSignRawPayload(input: TSignRawPayloadBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntentV5 Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntentV5` object.  It includes properties for disabling email auth/recovery, setting root quorum, defining root users, naming the sub-organization, and configuring a wallet with accounts and mnemonic length.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_12\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Wallet Account Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get a specific wallet account. Takes a TGetWalletAccountBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccount(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticators in TypeScript SDK\nDESCRIPTION: The 'stampCreateAuthenticators' function is used to create authenticators in the SDK. It accepts a 'TCreateAuthenticatorsBody' object as input and returns a Promise that resolves to either undefined or a TSignedRequest. Inherits behavior from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateAuthenticators**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetAttestationDocument Function in TypeScript\nDESCRIPTION: This code snippet defines the signGetAttestationDocument function. It takes an input of type TGetAttestationDocumentInput and optional TurnkeyCredentialRequestOptions, and returns a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetAttestationDocument.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetAttestationDocument: (input: TGetAttestationDocumentInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallet Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting a wallet. It takes an input of type TGetWalletBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallet(input: TGetWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition - Policy Model\nDESCRIPTION: Defines the structure for policy objects including conditions, consensus rules, effects and metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1Policy {\n  condition: string;\n  consensus: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  effect: definitions[\"v1Effect\"];\n  notes: string;\n  policyId: string;\n  policyName: string;\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TSetOrganizationFeatureResponse Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that represents the response from setting an organization feature. It combines the result of the SetOrganizationFeature operation with the v1ActivityResponse definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSetOrganizationFeatureResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSetOrganizationFeatureResponse** = `operations`[`\"PublicApiService_SetOrganizationFeature\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"setOrganizationFeatureResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Sign Create Invitations with Turnkey SDK\nDESCRIPTION: The `signCreateInvitations` function is a core part of the Turnkey SDK, allowing users to request a WebAuthn assertion and obtain a signed `CreateInvitations` request for interacting with the Turnkey service. It accepts an input of type `TCreateInvitationsInput` and optional `TurnkeyCredentialRequestOptions`. The function returns a Promise that resolves to a `SignedRequest` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateInvitations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n> `const` **signCreateInvitations**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript HPKE Decryption Function Definition\nDESCRIPTION: Function signature for HPKE decryption that takes HpkeDecryptParams and returns decrypted data as Uint8Array. The function handles decryption using the Hybrid Public Key Encryption standard defined in RFC 9180.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/hpkeDecrypt.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhpkeDecrypt(params: HpkeDecryptParams): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetWhoamiResponse in TypeScript\nDESCRIPTION: This snippet defines the type alias TGetWhoamiResponse, which is a part of the operations responses for the 'GetWhoami' API call in the Turnkey SDK. It utilizes TypeScript's type aliases to ensure type safety and proper response structure when interacting with the Public API service. This alias is essential for developers working with the API to understand the expected response format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetWhoamiResponse = operations[\\\"PublicApiService_GetWhoami\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Users Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting users. It takes no input parameters and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetUsers(): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateInvitationsResult Type\nDESCRIPTION: Defines the structure for the `v1CreateInvitationsResult` object, representing the result of creating invitations. It includes an array of `invitationIds`. This structure is the response from the Coordinator service after a successful invitation creation request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateInvitationsResult\n * @property {string[]} invitationIds A list of Invitation IDs\n */\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadsBody Type Alias Definition\nDESCRIPTION: This snippet defines the `TSignRawPayloadsBody` type alias. It represents the structure of the request body required for the `PublicApiService_SignRawPayloads` API operation, specifically for signing raw payloads. It is extracted from the generated TypeScript code defining the API client.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TSignRawPayloadsBody** = `operations`\\[`\"PublicApiService_SignRawPayloads\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining the DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS Variable in TypeScript\nDESCRIPTION: This snippet defines a constant that represents an array of WalletAccount objects used to manage default Bitcoin mainnet P2SH accounts. This structure helps in standardizing wallet account management within the SDK. The WalletAccount type must be imported from the relevant interface module to ensure type safety.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Key Retrieval\nDESCRIPTION: Method to get the SECP256K1 hex encoded public key from the Ethereum wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/EthereumWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPublicKey(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining API Methods for Turnkey SDK Server Client in TypeScript\nDESCRIPTION: Defines method signatures for various API operations including getActivity, getApiKey, getApiKeys, getAttestationDocument, and getAuthenticator, with their respective input types and return Promise structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivity(input: TGetActivityBody): Promise<{ activity: { /* ... activity details ... */ } }>\n\ngetApiKey(input: TGetApiKeyBody): Promise<{ apiKey: { /* ... API key details ... */ } }>\n\ngetApiKeys(input: TGetApiKeysBody = {}): Promise<{ apiKeys: object[] }>\n\ngetAttestationDocument(input: TGetAttestationDocumentBody): Promise<{ attestationDocument: string }>\n\ngetAuthenticator(input: TGetAuthenticatorBody): Promise<{ authenticator: { /* ... authenticator details ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Regtest P2SH Account Generator Function\nDESCRIPTION: Function that generates a Bitcoin regtest P2SH wallet account configuration based on a provided path index. Returns a WalletAccount object with the appropriate settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinRegtestP2SHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinRegtestP2SHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion for User Creation - TypeScript\nDESCRIPTION: The signCreateUsers function takes input and optional options to request a WebAuthn assertion. It returns a promise that resolves to a SignedRequest object. It is designed to facilitate user creation by POSTing the signed request to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signCreateUsers(input: TCreateUsersInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inserting API Key with Telegram Cloud Storage Stamper - TypeScript\nDESCRIPTION: This snippet demonstrates how to generate and insert a new API key into Telegram Cloud Storage using the TelegramCloudStorageStamper. Dependencies include @turnkey/telegram-cloud-storage-stamper and @turnkey/sdk-browser. The input is an API key generated with generateP256KeyPair, and the output is an initialized client that can perform authenticated requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, { CloudStorageAPIKey } from \"@turnkey/telegram-cloud-storage-stamper\";\nimport { generateP256KeyPair } from \"@turnkey/crypto\";\nimport { TurnkeyBrowserClient, TurnkeySDKClientConfig } from \"@turnkey/sdk-browser\";\n\n// generate an API keypair\nconst keyPair = generateP256KeyPair();\n\n// the API key to be stored\nconst apiKey: CloudStorageAPIKey = {\n  apiPublicKey: keyPair.publicKey,\n  apiPrivateKey: keyPair.privateKey,\n}\n\n// create a new Telegram Cloud Storage Stamper\nconst stamper = await TelegramCloudStorageStamper.create({\n  cloudStorageAPIKey: apiKey\n})\n\n// use the stamper in the client config\nconst browserConfig: TurnkeySDKClientConfig = {\n  stamper: stamper,\n  apiBaseUrl: \"https://api.turnkey.com\",\n  organizationId: <ORGANIZATION_ID>,\n};\n\n// create a TurnkeyClient with the initialized Telegram Cloud Storage Stamper\nconst client = new TurnkeyBrowserClient(browserConfig);\n\n// make a request with the client\nconst whoamiResponse = await client.getWhoami({\n  organizationId: <ORGANIZATION_ID>,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Activities in Turnkey SDK\nDESCRIPTION: This function retrieves activities based on the provided input. It accepts a `TGetActivitiesBody` object (defaulting to an empty object) and returns a Promise that resolves to an object containing an array of activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> **getActivities**(`input`): `Promise`\\<\\{ `activities`: `object`[]; \\}\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:509](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L509)\n```\n\n----------------------------------------\n\nTITLE: Creating Users API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for creating users in an existing organization. It specifies the HTTP method, endpoint path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nCreate Users\n\nCreate Users in an existing Organization\n\n`POST /public/v1/submit/create_users`\n\n## Parameters\n\n### input\n\n[`TCreateUsersInput`](../type-aliases/TCreateUsersInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeysInput Type Alias in TypeScript\nDESCRIPTION: Type definition for the input structure required when making API requests to delete private keys in the Turnkey SDK. The type is an object that contains a body property of type TDeletePrivateKeysBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePrivateKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: Stamp Authentication Methods TypeScript Definitions\nDESCRIPTION: TypeScript method definitions for handling various authentication-related stamp operations including OTP auth and user recovery.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nstampOtpAuth(input: TOtpAuthBody): Promise<undefined | TSignedRequest>\n\nstampRecoverUser(input: TRecoverUserBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent for Users in TypeScript\nDESCRIPTION: The `initOtpAuthIntent` interface defines the structure of an OTP (One-Time Password) authentication process, incorporating contact information, email customization, and SMS template configurations. It is crucial for enhancing security measures in user login flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining User Import Wallet Intent Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for importing a wallet, including the required attributes such as userId, walletName, and an encryptedBundle containing sensitive data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Initialize Import Wallet\nDESCRIPTION: Initializes the process of importing a wallet. Takes a TInitImportWalletBody input parameter and returns a Promise with object data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitImportWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Stamping OAuth Providers Request in Turnkey Browser SDK\nDESCRIPTION: Method to create a signed request for creating OAuth providers. Returns either undefined or a signed request object that can be sent to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateOauthProviders(input: TCreateOauthProvidersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Fetching Activities TypeScript\nDESCRIPTION: The `getActivities` function retrieves a list of activities associated with wallet accounts using the Turnkey SDK. It returns a Promise that resolves to an object containing an array of activities. The function requires an `input` parameter of type `TGetActivitiesBody`, which defaults to an empty object, and inherits from `TurnkeyBaseClient.getActivities`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getActivities(input): Promise<{ activities: object[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Doge Testnet Account at Index Function - TypeScript\nDESCRIPTION: The function `defaultDogeTestnetAccountAtIndex` takes a numeric index as an argument and returns a `WalletAccount` object, which represents a Dogecoin testnet wallet account. The pathIndex parameter defines which account to retrieve. This is a part of the Turnkey SDK that facilitates interaction with Dogechain wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultDogeTestnetAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultDogeTestnetAccountAtIndex(pathIndex: number): WalletAccount {\n    // Function logic to retrieve wallet account based on the pathIndex\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that combines the response schema from the PublicApiService_SignRawPayloads operation with v1ActivityResponse definitions. This type represents the successful response (HTTP 200) structure when signing raw payloads using the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignRawPayloadsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSignRawPayloadsResponse** = `operations`[`\"PublicApiService_SignRawPayloads\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"signRawPayloadsResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication TypeScript Function\nDESCRIPTION: A Promise-based function for initializing OTP authentication with complex input types and multiple authentication intents. Supports various authentication scenarios including user creation, organization setup, and session management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initOtpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst initOtpAuth: (input) => Promise<{ activity: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Signing Multiple Solana Transactions\nDESCRIPTION: This method signs an array of Solana transactions using Turnkey. It takes an array of `Transaction` or `VersionedTransaction` objects and a Solana address. An optional organization ID can also be provided.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/solana/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [solana/src/index.ts:28](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/solana/src/index.ts#L28)\n *\n * This function takes an array of Solana transactions and adds a signature with Turnkey to each of them\n *\n * @param `txs`\n */\n\n/**\n * array of Transaction | VersionedTransaction (native @solana/web3.js type)\n */\n\n/**\n * `string`\n *\n * Solana address (base58 encoded)\n */\n\n/**\n * `string`\n */\n```\n\n----------------------------------------\n\nTITLE: TypeScript Promise Return Type Definition\nDESCRIPTION: Complex TypeScript type definition specifying the return type structure for SDK operations. Includes activity status, authentication, and various intent types for organization management, wallets, and security.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePrivateKeyTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string; \n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiOnlyUsersInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateApiOnlyUsersInput type alias as an object with a single property 'body' of type TCreateApiOnlyUsersBody. It is used for structuring the input for creating API-only users in the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateApiOnlyUsersInput = object\n```\n\n----------------------------------------\n\nTITLE: Importing Private Key in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for importing a private key. Takes input parameters specifying the private key details and returns a Promise that resolves to an object with the import result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportPrivateKey(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organizations in TypeScript\nDESCRIPTION: The stampGetOrganization function obtains organization details, requiring TGetOrganizationBody as input and returning a Promise that resolves to undefined or TSignedRequest. It inherits from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_108\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOrganization(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Declaring getActivity Function in TypeScript\nDESCRIPTION: This snippet defines the getActivity function, which takes an input parameter and returns a Promise. The Promise resolves to an object containing detailed activity information, including approval status, creation time, and various intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetActivity(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: { \n      // Various intent types...\n    };\n    // More properties...\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Value in Turnkey Browser SDK\nDESCRIPTION: Asynchronous method to set a storage value for a specific storage key with type-safe parameters. Works with predefined storage keys from StorageKeys enumeration and corresponding value types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/setStorageValue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetStorageValue<K>(storageKey, storageValue): Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Request Type in TypeScript\nDESCRIPTION: TypeScript interface definition for initializing user email recovery requests. Includes organization ID, parameters, timestamp, and activity type fields.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1InitUserEmailRecoveryRequest = {\n  organizationId: string;\n  parameters: definitions[\"v1InitUserEmailRecoveryIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: Provides a detailed type structure for a Promise return with multiple nested intent types, activity metadata, and authentication details\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; ... } }>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript types for activity status.\nDESCRIPTION: This snippet defines TypeScript types representing the status of an activity. It can be one of the following: 'ACTIVITY_STATUS_CREATED', 'ACTIVITY_STATUS_PENDING', 'ACTIVITY_STATUS_COMPLETED', 'ACTIVITY_STATUS_FAILED', 'ACTIVITY_STATUS_CONSENSUS_NEEDED', or 'ACTIVITY_STATUS_REJECTED'. These statuses can be used to track the progress and outcome of operations within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`;\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet - TypeScript\nDESCRIPTION: Enables the export of wallets through TExportWalletBody specifying input parameters, resulting in a promise based on TSignedRequest. Correct input is necessary for operation success.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateInvitationsRequest Type\nDESCRIPTION: Defines the structure for the `v1CreateInvitationsRequest` object, representing the request to create invitations. It includes the `organizationId`, `parameters` (of type `v1CreateInvitationsIntent`), `timestampMs`, and `type`. This is the top-level request structure sent to the Coordinator service to create invitations within a specific organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateInvitationsRequest\n * @property {string} organizationId Unique identifier for a given Organization.\n * @property {definitions[\"v1CreateInvitationsIntent\"]} parameters\n * @property {string} timestampMs Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n * @property {(\"ACTIVITY_TYPE_CREATE_INVITATIONS\")} type\n */\n```\n\n----------------------------------------\n\nTITLE: Signing API User Creation Request in TypeScript\nDESCRIPTION: Function that generates a signed request for creating API-only users. It takes a creation input object and optional credential request options, performs WebAuthn assertion, and returns a signed request that can be sent to Turnkey's API endpoints.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateApiOnlyUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignCreateApiOnlyUsers(input: TCreateApiOnlyUsersInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1Curve Enum in TypeScript\nDESCRIPTION: Specifies the supported cryptographic curves used in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype v1Curve = \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n```\n\n----------------------------------------\n\nTITLE: Stamping User Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get a specific user. Takes a TGetUserBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetUser(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Signing a message using Turnkey with Viem\nDESCRIPTION: This TypeScript function signs a given message using a Turnkey client. It takes a Turnkey client instance, the message to sign (SignableMessage), organization ID, and the signing key ID as input parameters. It returns a promise that resolves with the signed message in '0x${string}' format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/signMessage.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: signMessage()\n *\n * > **signMessage**(`client`, `message`, `organizationId`, `signWith`): `Promise`\\<`` `0x${string}` ``\\>\n *\n * Defined in: [packages/viem/src/index.ts:293](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/viem/src/index.ts#L293)\n */\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetApiKeys Function in TypeScript\nDESCRIPTION: Declares the signGetApiKeys function, which takes an input of type TGetApiKeysInput and optional TurnkeyCredentialRequestOptions. It returns a Promise resolving to a SignedRequest. The function requests a WebAuthn assertion and returns a signed GetApiKeys request ready for POSTing to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetApiKeys: (input: TGetApiKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Attestation Document Response Type in TypeScript\nDESCRIPTION: Type alias that defines the structure of the response for retrieving an attestation document from the Turnkey public API service. Specifies the response schema for the GetAttestationDocument operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetAttestationDocumentResponse = operations[\"PublicApiService_GetAttestationDocument\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Write Session in Turnkey SDK\nDESCRIPTION: Method for creating a read-write session with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateReadWriteSession(input: TCreateReadWriteSessionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Type and Result Definitions for Turnkey SDK\nDESCRIPTION: Comprehensive type definitions for Turnkey SDK's activity system, including result interfaces for various operations such as user management, authentication, key management, and transaction signing. Also includes enums for activity status and activity type constants.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateRootQuorum.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeysBody Type Alias in TypeScript for Turnkey API\nDESCRIPTION: Type definition for the request body of the GetApiKeys endpoint in the Turnkey API. This type alias maps to the body parameter of the PublicApiService_GetApiKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetApiKeysBody** = `operations`[`\"PublicApiService_GetApiKeys\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Injecting a Wallet Export Bundle in TypeScript\nDESCRIPTION: Method to inject a wallet export bundle into the iframe. The bundle should be encrypted to the iframe's initial public key using HPKE.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninjectWalletExportBundle(bundle, organizationId): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePoliciesInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias named TCreatePoliciesInput as an object, which is utilized in the Turnkey SDK for inputting data related to policy creation. It references the TCreatePoliciesBody type for specifying the body structure of the input. Ensure to include necessary imports from the respective modules where this type is used.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePoliciesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Type Alias: TCreatePoliciesInput\n\n> **TCreatePoliciesInput** = `object`\n\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:353](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L353)\n\n## Properties\n\n### body\n\n> **body**: [`TCreatePoliciesBody`](TCreatePoliciesBody.mdx)\n\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:353](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L353)\n```\n\n----------------------------------------\n\nTITLE: Stamp Import Private Key with Turnkey SDK\nDESCRIPTION: This function `stampImportPrivateKey` is responsible for creating a signed request to import a private key using the Turnkey SDK. It takes a `TImportPrivateKeyBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampImportPrivateKey**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1978](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1978)\n\n#### Parameters\n\n##### input\n\n`TImportPrivateKeyBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: TCreatePrivateKeysBody Type Alias Definition\nDESCRIPTION: This snippet defines the TCreatePrivateKeysBody type alias. It's a combination of parameters for the PublicApiService_CreatePrivateKeys operation and command override parameters, defining the structure of the request body used when creating private keys via the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TCreatePrivateKeysBody** = `operations`\\[`\"PublicApiService_CreatePrivateKeys\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\\[`\"parameters\"`\\] & `commandOverrideParams`\n\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletInput Type in TypeScript\nDESCRIPTION: Type alias definition for the wallet creation input parameters. Consists of a body property that must conform to the TCreateWalletBody type interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateWalletInput = object\n```\n\n----------------------------------------\n\nTITLE: Session Result Type Definition\nDESCRIPTION: Type definitions for read/write session results including organization and user details\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  apiKeyId: string;\n  credentialBundle: string;\n  organizationId: string;\n  organizationName: string;\n  userId: string;\n  username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type and Status Enums in TypeScript\nDESCRIPTION: Defines enums for activity types and statuses used in the Coordinator API. Includes various operations like creating API keys, users, policies, and performing authentication actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Importing Wallet Data with Promises - JavaScript\nDESCRIPTION: The 'importWallet' function accepts an input parameter to return a Promise that resolves to an object representing the state of the wallet activity. The function supports various intents related to wallet operations such as creating organizations, accepting invitations, and managing users and policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimportWallet(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\")[]; } }\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Features in SDK Browser Client in TypeScript\nDESCRIPTION: The `setOrganizationFeature` function allows enabling or modifying features within an organization by sending the input of type TSetOrganizationFeatureBody. This function returns a promise resolving with an object. It relies on correctly formatted input and is designed to facilitate the configuration of organizational capabilities within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **setOrganizationFeature**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:2354](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2354)\n\n#### Parameters\n\n##### input\n\n`TSetOrganizationFeatureBody`\n\n#### Returns\n\n`Promise`<`object` & `object`>\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent Structure in TypeScript\nDESCRIPTION: This TypeScript interface is for updating user details, capturing parameters such as userEmail, userName, userId, and userPhoneNumber among user tag identifiers, ensuring the flexibility of user management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TSignTransactionBody Type Alias in TypeScript\nDESCRIPTION: Defines the TSignTransactionBody type alias which extends the API operation parameters with command override parameters for the SignTransaction operation in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignTransactionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSignTransactionBody** = `operations`\\[`\"PublicApiService_SignTransaction\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\\[`\"parameters\"`\\] & `commandOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Defining organizationId Property\nDESCRIPTION: Defines the 'organizationId' property as a string in the TurnkeySDKClientConfig interface. This is crucial for identifying the organization that the SDK connects to.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/interfaces/TurnkeySDKClientConfig.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// organizationId\n> **organizationId**: `string`\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition: TGetWalletsResponse\nDESCRIPTION: Defines a type alias `TGetWalletsResponse` that represents the schema of a successful response (status code 200) from the `PublicApiService_GetWallets` operation. The operation is a POST request to `/public/v1/query/list_wallets`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noperations[\"PublicApiService_GetWallets\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Account Data in TypeScript\nDESCRIPTION: stampGetWalletAccount retrieves wallet account data using TGetWalletAccountBody as input, resulting in a Promise that resolves to either undefined or TSignedRequest, based on the TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_119\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccount(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Wallet Type Definition\nDESCRIPTION: Type definition for a Wallet object including creation timestamps and export/import flags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1Wallet = {\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  exported: boolean;\n  imported: boolean;\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n  walletId: string;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TExportWalletInput type alias as an object with a single property 'body' of type TExportWalletBody. It is used for structuring the input for the export wallet API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTExportWalletInput = object\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties for TGetAttestationDocumentInput in TypeScript\nDESCRIPTION: Definition of the body property within the TGetAttestationDocumentInput type, which must be of type TGetAttestationDocumentBody. This property contains the request payload for the attestation document endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n**body**: [`TGetAttestationDocumentBody`](TGetAttestationDocumentBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Client Types in TypeScript\nDESCRIPTION: Enumeration of different authentication client types supported by the SDK, including Passkey, Wallet, and Iframe authentication methods\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/AuthClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AuthClient {\n  Passkey = \"passkey\",\n  Wallet = \"wallet\",\n  Iframe = \"iframe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1ActivityType Enum\nDESCRIPTION: Defines the `v1ActivityType` enum, which lists all the possible types of activities that can occur within the Turnkey system. This includes activities like creating API keys, users, private keys, signing payloads/transactions, managing invitations, policies, authenticators, and various other administrative and operational tasks.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ActivityType**: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:488](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L488)\n```\n\n----------------------------------------\n\nTITLE: Getting Suborganization IDs - TypeScript\nDESCRIPTION: The getSubOrgIds function retrieves all suborganization IDs associated with a specified parent organization ID. This function takes an input object adhering to the TGetSubOrgIdsInput type and returns a promise that resolves to an object containing an array of organization IDs. The relevant API endpoint for this operation is a POST request to /public/v1/query/list_suborgs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSubOrgIds(input: TGetSubOrgIdsInput): Promise<{ organizationIds: string[]; }> {\n    // implementation to fetch suborgs from the API\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Default Aptos Account from Path Index\nDESCRIPTION: Creates a WalletAccount for Aptos blockchain using a specified path index. Used for deterministic wallet account generation with predictable derivation paths.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultAptosAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultAptosAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Providers with Promises in TypeScript\nDESCRIPTION: The `createOauthProviders` function returns a promise that encapsulates various intents such as creating APIs, organizations, and user sessions, with a detailed structure of each intent object, including nested properties for authentication and user details. This function requires TypeScript with appropriate asynchronous handling and understanding of JSON structure for intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n# Function: createOauthProviders()\n\n> **createOauthProviders**(`input`): `Promise`<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; ...\n```\n\n----------------------------------------\n\nTITLE: Defining Create User Result Structure - TypeScript\nDESCRIPTION: This code defines the result structure for creating a user, which includes an array of user IDs generated upon successful user creation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n`createUsersResult`: \\{ `userIds`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetApiKeysResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias 'TGetApiKeysResponse' that corresponds to the structure of the response returned by the 'PublicApiService_GetApiKeys' operation. This type is useful for ensuring that data handled in the application adheres to the expected response format and provides type safety during development.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetApiKeysResponse = operations[\\\"PublicApiService_GetApiKeys\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportWalletIntent object\nDESCRIPTION: Defines the structure of the v1ExportWalletIntent object, encapsulating the parameters required for exporting a wallet. It includes the language of the mnemonic to export (language), the target public key (targetPublicKey) to which the export bundle will be encrypted, and the unique identifier for the wallet (walletId). This object is sent as part of a request to export a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportWalletIntent\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1477\n\n#### language?\n\n> `optional` **language**: `definitions`[\\\"v1MnemonicLanguage\\\"]\n\n##### Description\n\nThe language of the mnemonic to export. Defaults to English.\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the export bundle will be encrypted.\n\n#### walletId\n\n> **walletId**: `string`\n\n##### Description\n\nUnique identifier for a given Wallet.\"\n```\n\n----------------------------------------\n\nTITLE: Listing Private Key Tags in Turnkey Browser SDK\nDESCRIPTION: The `listPrivateKeyTags` function retrieves a list of private key tags. It accepts `TListPrivateKeyTagsBody` as input and returns a promise that resolves to an object containing an array of `privateKeyTags`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n> **listPrivateKeyTags**(`input`): `Promise`\\<\\{ `privateKeyTags`: `object`[]; \\}\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:559](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L559)\n\n#### Parameters\n\n##### input\n\n`TListPrivateKeyTagsBody`\n\n#### Returns\n\n`Promise`\\<\\{ `privateKeyTags`: `object`[]; \\}\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`listPrivateKeyTags`](TurnkeyBrowserClient.mdx#listprivatekeytags)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bitcoin Mainnet P2PKH Account - TypeScript SDK\nDESCRIPTION: The function `defaultBitcoinMainnetP2PKHAccountAtIndex` allows users to obtain a default Bitcoin mainnet P2PKH account for a given index within the SDK. It requires a `pathIndex` parameter of type number and returns a `WalletAccount` object. This function is defined in the 'turnkey-helpers.ts' file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinMainnetP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"defaultBitcoinMainnetP2PKHAccountAtIndex(pathIndex): WalletAccount\"\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload Intent - TypeScript\nDESCRIPTION: Describes the intent to sign a raw payload, with specifications for encoding and hash functions to be used. This ensures that the payload's integrity is maintained during the signing process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Policy using TypeScript\nDESCRIPTION: The 'stampGetPolicy' function is designed to retrieve a single policy. It accepts an input of 'TGetPolicyBody' type and returns a Promise that resolves to either 'undefined' or 'TSignedRequest'. This functionality is inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPolicy**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetPolicyBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Oauth Providers Deletion Result Structure\nDESCRIPTION: This snippet defines the 'deleteOauthProvidersResult', returning a list of unique identifiers for deleted Oauth Providers formatted as an array of strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_77\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteOauthProvidersResult?\n\\{ `providerIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Signing OTP Authentication Request - TypeScript\nDESCRIPTION: The function `signOtpAuth` is designed to request a WebAuthn assertion and return a signed OTP authentication request that can be sent to the Turnkey server. It accepts an input of type `TOtpAuthInput` and optionally accepts `TurnkeyCredentialRequestOptions`. The output is a promise that resolves to a `SignedRequest` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signOtpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const signOtpAuth: (input, options?) => Promise<\\`SignedRequest\\`>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Delete Private Key Tags in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete private key tags using the TurnkeyBrowserClient. It takes a `TDeletePrivateKeyTagsBody` as input and returns a Promise that resolves to an object.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n> **deletePrivateKeyTags**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1592](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1592)\n\n#### Parameters\n\n##### input\n\n`TDeletePrivateKeyTagsBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity and Result Types in TypeScript\nDESCRIPTION: This code snippet defines complex TypeScript types for various activities and their results. It includes types for user management, authentication, policy handling, and blockchain operations. The types use nested object structures and union types to represent different activity statuses and types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createWalletAccounts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Stamping List Private Key Tags Request in TypeScript\nDESCRIPTION: Method to stamp a request for listing private key tags. It takes an input of type TListPrivateKeyTagsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampListPrivateKeyTags(input: TListPrivateKeyTagsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent in TypeScript\nDESCRIPTION: The `updateUserIntent` interface encapsulates the structure needed to update user information, including email, user ID, user name, phone number, and associated tags. This allows for dynamic user data modifications within the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ `updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }; }\n```\n\n----------------------------------------\n\nTITLE: WalletStamperError Class Definition in TypeScript\nDESCRIPTION: Defines a custom error class for wallet stamping operations that extends the native Error class. Includes constructor for error message and original error tracking, with inherited Error properties and static methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/WalletStamperError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WalletStamperError extends Error {\n  constructor(message: string, public originalError: any = null) {\n    super(message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOrganizationResult Type - TypeScript\nDESCRIPTION: Specifies the result structure for organization creation, containing just the unique organization ID. This type is used in responses to confirm successful organization creation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOrganizationResult {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using signUpdateWallet Function in Turnkey HTTP SDK\nDESCRIPTION: The signUpdateWallet function requests a WebAuthn assertion and returns a signed UpdateWallet request that can be POSTed to Turnkey. It takes a TUpdateWalletInput object as required input and optional TurnkeyCredentialRequestOptions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signUpdateWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignUpdateWallet(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Function Signature: hpkeAuthEncrypt in TypeScript\nDESCRIPTION: The hpkeAuthEncrypt function encrypts data using Authenticated Hybrid Public Key Encryption (HPKE) standard as defined in RFC 9180. It takes encryption parameters including plain text, encapsulated key, and sender private key, and returns the encrypted data as a Uint8Array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/hpkeAuthEncrypt.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhpkeAuthEncrypt(params: HpkeAuthEncryptParams): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: TDeleteApiKeysBody Type Alias Definition\nDESCRIPTION: Defines the `TDeleteApiKeysBody` type alias using TypeScript. It's a combination of parameters defined in the PublicApiService_DeleteApiKeys operation, specifically the body parameters, and any command override parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TDeleteApiKeysBody\n *\n * > **TDeleteApiKeysBody** = `operations`\\[`\"PublicApiService_DeleteApiKeys\"`]\\[`\"parameters\"`]\\[`\"body\"`]\\[`\"body\"`]\\[`\"parameters\"`] & `commandOverrideParams`\n *\n * Defined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk_api_types.ts:467](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L467)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining deleteUserTags Method in TypeScript\nDESCRIPTION: Method for deleting user tags that takes a TDeleteUserTagsBody input and returns a Promise containing response objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteUserTags(input: TDeleteUserTagsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for SDK API\nDESCRIPTION: Extensive TypeScript type definitions for API intents and results, including wallet operations, authentication flows, organization management, and cryptographic functions. Contains interface definitions for request/response payloads.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n  importWalletIntent: {\n    accounts: object[];\n    encryptedBundle: string;\n    userId: string;\n    walletName: string;\n  };\n  // Additional type definitions truncated for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadsIntent Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadsIntent` as an object type for signing multiple raw payloads. It includes properties for encoding, hash function, an array of payloads, and `signWith`, used to specify the entity to sign with.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadsIntent\n\n> **v1SignRawPayloadsIntent**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2449\n\n#### encoding\n\n> **encoding**: `definitions`[`\"v1PayloadEncoding\"`]\n\n##### Description\n\nEncoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8).\n\n#### hashFunction\n\n> **hashFunction**: `definitions`[`\"v1HashFunction\"`]\n\n##### Description\n\nHash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032.\n\n#### payloads\n\n> **payloads**: `string`[]\n\n##### Description\n\nAn array of raw unsigned payloads to be signed.\n\n#### signWith\n\n> **signWith**: `string`\n\n##### Description\n\nA Wallet account address, Private Key address, or Private Key identifier.\n```\n\n----------------------------------------\n\nTITLE: SDK Interface Definitions in TypeScript\nDESCRIPTION: Comprehensive TypeScript interface definitions that specify the structure of requests and responses for the TKHQ SDK. Includes types for wallet operations, authentication flows, organization management, and various cryptographic operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUserTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivateKeyName: string;\nuserId: string;\nimportWalletIntent: {\n  accounts: object[];\n  encryptedBundle: string;\n  userId: string;\n  walletName: string;\n};\ninitImportPrivateKeyIntent: {\n  userId: string;\n};\ninitImportWalletIntent: {\n  userId: string;\n};\n// ... additional interface definitions\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent Structures in TypeScript\nDESCRIPTION: This snippet defines various intents for wallet import processes within the SDK, including structures for importing private keys and wallet accounts. It outlines the necessary parameters for each intent, such as userId, walletName, and encryptedBundle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninitImportPrivateKeyIntent: { userId: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninitImportWalletIntent: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: TKHQ SDK Activity Intent Types\nDESCRIPTION: This code snippet defines a comprehensive set of TypeScript types that represent various activity intents used within the TKHQ SDK. These intents capture different actions that can be performed, such as accepting invitations, creating organizations, managing API keys, handling authenticators, and more. The detailed type definitions provide a clear understanding of the data structure and properties required for each specific intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePolicy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_USB\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: ...; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `null` \\| \\\"cross-platform\\\" \\| \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_USB\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_USB\\\" \\| \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" \\| \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_CZECH\\\" \\| \\\"MNEMONIC_LANGUAGE_FRENCH\\\" \\| \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" \\| \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" \\| \\\"MNEMONIC_LANGUAGE_KOREAN\\\" \\| \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_COMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_ETHEREUM\\\" \\| \\\"ADDRESS_FORMAT_SOLANA\\\" \\| \\\"ADDRESS_FORMAT_COSMOS\\\" \\| \\\"ADDRESS_FORMAT_TRON\\\" \\| \\\"ADDRESS_FORMAT_SUI\\\" \\| \\\"ADDRESS_FORMAT_APTOS\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P\"\n```\n\n----------------------------------------\n\nTITLE: createPrivateKeyTag method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates a private key tag. It takes a `TCreatePrivateKeyTagBody` object as input and returns a Promise that resolves to an object. This function is used to associate tags with private keys for easier identification and management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createPrivateKeyTag(input: TurnkeySDKApiTypes.TCreatePrivateKeyTagBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreatePrivateKeyTagBody, object & object>(\n            `/turnkey/create_private_key_tag`,\n            input,\n            \"privateKeyTag\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key Details in TypeScript\nDESCRIPTION: Defines the return type for getApiKey method, providing comprehensive details about an API key including credentials, creation timestamp, and expiration\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiKey(): Promise<{\n  apiKey: {\n    apiKeyId: string;\n    apiKeyName: string;\n    createdAt: { nanos: string; seconds: string };\n    credential: {\n      publicKey: string;\n      type: \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | \"CREDENTIAL_TYPE_API_KEY_P256\" | ...\n    };\n    expirationSeconds: string;\n    updatedAt: { nanos: string; seconds: string };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Turnkey signExportPrivateKey Function Signature\nDESCRIPTION: This snippet shows the function signature for `signExportPrivateKey`. It takes `input` of type `TExportPrivateKeyInput` and optional `options` of type `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signExportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param input {@link TExportPrivateKeyInput}\n * @param options? {@link TurnkeyCredentialRequestOptions}\n *\n * @returns {Promise<{@link SignedRequest}>}\n */\nasync signExportPrivateKey(\n  input: TExportPrivateKeyInput,\n  options?: TurnkeyCredentialRequestOptions\n): Promise<SignedRequest> {\n```\n\n----------------------------------------\n\nTITLE: Signing WebAuthn Assertion for UpdateRootQuorum Requests in Turnkey HTTP API\nDESCRIPTION: This function requests a WebAuthn assertion and returns a signed UpdateRootQuorum request that can be submitted to Turnkey's API. It requires TUpdateRootQuorumInput as input and optionally accepts TurnkeyCredentialRequestOptions for configuring the authentication request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signUpdateRootQuorum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**signUpdateRootQuorum**(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiOnlyUsersBody Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TCreateApiOnlyUsersBody type alias. It represents the request body structure for the PublicApiService_CreateApiOnlyUsers operation, specifically for the POST /public/v1/submit/create_api_only_users endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateApiOnlyUsersBody = operations[\"PublicApiService_CreateApiOnlyUsers\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Wallet Method\nDESCRIPTION: Method for updating wallet details using TUpdateWalletBody parameters. Returns a Promise resolving to a composite object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWallet(`input`): `Promise`<`object` & `object`>\n```\n\n----------------------------------------\n\nTITLE: Using signCreateUserTag Function in TypeScript\nDESCRIPTION: This function requests a WebAuthn assertion and creates a signed CreateUserTag request. It takes TCreateUserTagInput as a required parameter and optional TurnkeyCredentialRequestOptions, returning a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signCreateUserTag: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining updateUserTagIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating a user tag in an organization. It allows adding or removing user IDs from a tag and updating the tag name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Keys using TypeScript\nDESCRIPTION: The function 'stampGetApiKeys' is responsible for retrieving API keys. It requires an input of type 'TGetApiKeysBody' and returns a Promise that resolves either to 'undefined' or a 'TSignedRequest'. This functionality is inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetApiKeys**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetApiKeysBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure - TypeScript\nDESCRIPTION: This snippet outlines the result structure for setting payment methods, containing fields for cardHolderEmail, cardHolderName, and lastFour digits of the card. This structure is essential for managing payment information securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Organization Management Types\nDESCRIPTION: TypeScript interfaces for managing organizations including deletion operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1DeleteOrganizationIntent {\n  organizationId: string;\n}\n\ninterface v1DeleteOrganizationResult {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1Activity Type\nDESCRIPTION: Defines the structure for the `v1Activity` object, which represents an action that can be taken within the Turnkey infrastructure. It includes properties such as `canApprove`, `canReject`, timestamps, failure details, fingerprint, ID, intent, organization ID, result, status, type, and votes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1Activity**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:451](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L451)\n\n#### canApprove\n\n> **canApprove**: `boolean`\n\n#### canReject\n\n> **canReject**: `boolean`\n\n#### createdAt\n\n> **createdAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n\n#### failure?\n\n> `optional` **failure**: `definitions`[`\"rpcStatus\"`]\n\n##### Description\n\nFailure reason of the intended action.\n\n#### fingerprint\n\n> **fingerprint**: `string`\n\n##### Description\n\nAn artifact verifying a User's action.\n\n#### id\n\n> **id**: `string`\n\n##### Description\n\nUnique identifier for a given Activity object.\n\n#### intent\n\n> **intent**: `definitions`[`\"v1Intent\"`]\n\n##### Description\n\nIntent object crafted by Turnkey based on the user request, used to assess the permissibility of an action.\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### result\n\n> **result**: `definitions`[`\"v1Result\"`]\n\n##### Description\n\nResult of the intended action.\n\n#### status\n\n> **status**: `definitions`[`\"v1ActivityStatus\"`]\n\n##### Description\n\nThe current processing status of a specified Activity.\n\n#### type\n\n> **type**: `definitions`[`\"v1ActivityType\"`]\n\n##### Description\n\nType of Activity, such as Add User, or Sign Transaction.\n\n#### updatedAt\n\n> **updatedAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n\n#### votes\n\n> **votes**: `definitions`[`\"v1Vote\"`][]\n\n##### Description\n\nA list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Creation Result (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateSubOrganizationResultV7, which represents the API response for creating a sub-organization. It includes the sub-organization ID, root user IDs, and optional wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateSubOrganizationResultV7 {\n  rootUserIds?: string[];\n  subOrganizationId: string;\n  wallet?: definitions[\"v1WalletResult\"];\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition - createInvitations\nDESCRIPTION: Type definition for a function that creates invitations and returns a Promise containing activity details. The function accepts an input parameter and returns a complex object structure containing information about the activity, various intents, and authentication details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateInvitations(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    // ... additional intent types and properties\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Requesting a WebAuthn Assertion - JavaScript\nDESCRIPTION: The 'signUpdatePrivateKeyTag' function requests a WebAuthn assertion and returns a signed 'UpdatePrivateKeyTag' request. It takes the input of type 'TUpdatePrivateKeyTagInput' and an optional parameter of 'TurnkeyCredentialRequestOptions'. The function returns a promise that resolves to a 'SignedRequest'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signUpdatePrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"const signUpdatePrivateKeyTag = (input, options) => Promise<SignedRequest>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePolicyResult Type - TypeScript\nDESCRIPTION: Specifies the result type for policy creation, containing the unique policy ID. This allows the client to identify which policy was created successfully.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePolicyResult {\n  policyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Result Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for the result of signing a raw payload, which includes parameters r, s, and v, key components in digital signature generation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\n----------------------------------------\n\nTITLE: Invitation Interface Definition in TypeScript\nDESCRIPTION: Interface for invitation data including access type, recipient details, status and timestamps. Used for managing user invitations within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1Invitation {\n  accessType: v1AccessType;\n  createdAt: externaldatav1Timestamp;\n  invitationId: string;\n  receiverEmail: string;\n  receiverUserName: string;\n  receiverUserTags: string[];\n  senderUserId: string;\n  status: v1InvitationStatus;\n  updatedAt: externaldatav1Timestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyEIP1193Provider Type in TypeScript\nDESCRIPTION: This code defines the TurnkeyEIP1193Provider as a type alias that extends the standard EIP-1193 Provider interface. It omits the default request method and adds a custom implementation that supports additional Ethereum JSON-RPC methods including eth_signTypedData_v4 for typed data signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/eip-1193-provider/index/type-aliases/TurnkeyEIP1193Provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TurnkeyEIP1193Provider** = `Omit`\\<`EIP1193Provider`, `\"request\"`\\> & `object`\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payloads with Promises in JavaScript\nDESCRIPTION: The signRawPayloads function is implemented as a constant in JavaScript that takes an input and returns a Promise. It serves multiple purposes such as handling different intents related to user, organization, and authentication services. Dependencies involve JavaScript promises and understanding of the SDK framework where it's applied. This snippet expects an input parameter of unspecified type and outputs a structured object detailing activities and intents. There are no explicit constraints mentioned.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst signRawPayloads = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_<truncated>\n```\n\n----------------------------------------\n\nTITLE: Fetching Embedded Public Key in JavaScript\nDESCRIPTION: Example showing how to fetch the live public key of a target embedded key within an iframe using the TurnkeyIframeClient\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTurnkey } from \"@turnkey/sdk-react\";\n\n...\n\nconst { authIframeClient } = useTurnkey();\n\nconst publicKey = await authIframeClient!.getEmbeddedPublicKey();\n```\n\n----------------------------------------\n\nTITLE: Stamping Verified Sub-Organization IDs Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get verified sub-organization IDs. Takes a TGetVerifiedSubOrgIdsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetVerifiedSubOrgIds(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining deleteAuthenticators Function in TypeScript\nDESCRIPTION: This snippet defines a constant function deleteAuthenticators that takes an input and returns a Promise. The Promise resolves to an object containing activity details and various cryptographic intents. The function is likely used for managing authenticators in a secure system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deleteAuthenticators: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... various intent types ... */ }; /* ... more properties ... */ }; /* ... more properties ... */ }>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePolicyBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TCreatePolicyBody that references the body parameters for the CreatePolicy operation in the PublicApiService. This type is used when making POST requests to the /public/v1/submit/create_policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreatePolicyBody** = `operations`[`\"PublicApiService_CreatePolicy\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining User Tag Creation Intent (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateUserTagIntent, which defines the parameters for creating a user tag. It includes a list of user IDs and the tag name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateUserTagIntent {\n  userIds: string[];\n  userTagName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateSubOrganizationInput Type in TypeScript\nDESCRIPTION: Defines the TCreateSubOrganizationInput type alias for creating sub-organizations in Turnkey. This type is used for the POST /public/v1/submit/create_sub_organization endpoint and requires a body of type TCreateSubOrganizationBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateSubOrganizationInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationConfigsInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetOrganizationConfigsInput type alias as an object with a single property 'body'. It is used for the input of the GET /public/v1/query/get_organization_configs API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationConfigsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetOrganizationConfigsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyContext React Context Variable\nDESCRIPTION: Creates a React Context variable for managing Turnkey SDK state and functionality, typed with TurnkeyContextType or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/variables/TurnkeyContext.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst TurnkeyContext: Context<undefined | TurnkeyContextType>\n```\n\n----------------------------------------\n\nTITLE: SDK Intent Type Definitions\nDESCRIPTION: Complex TypeScript type definitions for various SDK intent operations including authentication, wallet creation, transaction signing, and organizational management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  addressFormat: \"ADDRESS_FORMAT_BITCOIN_...\",\n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\",\n  encryptedBundle: string,\n  privateKeyName: string,\n  userId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Testnet P2WPKH Accounts\nDESCRIPTION: This snippet defines a constant DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS, which is an array of WalletAccount objects intended for use in Bitcoin Testnet environments. This setup enables developers to easily access predefined wallet configurations for testing purposes. The variable is typed to ensure that all entries conform to the WalletAccount interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enumerations in JavaScript\nDESCRIPTION: This snippet defines enumerations for various activity statuses and types used within the SDK. The status defines potential states like CREATED, PENDING, or COMPLETED, and the type outlines various activities such as creating API keys or signing transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeyTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n`status`: \"ACTIVITY_STATUS_CREATED\" \\| \"ACTIVITY_STATUS_PENDING\" \\| \"ACTIVITY_STATUS_COMPLETED\" \\| \"ACTIVITY_STATUS_FAILED\" \\| \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \\| \"ACTIVITY_STATUS_REJECTED\"; `type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" \\| \"ACTIVITY_TYPE_CREATE_USERS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \\| \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \\| ...;\n```\n\n----------------------------------------\n\nTITLE: TDeletePrivateKeyTagsBody Type Alias Definition\nDESCRIPTION: This code snippet defines the `TDeletePrivateKeyTagsBody` type alias in TypeScript.  It references a specific nested structure within the `operations` object, specifically targeting the `body` of the `PublicApiService_DeletePrivateKeyTags` operation's parameters. This type represents the expected structure of the request body when calling the delete private key tags API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TDeletePrivateKeyTagsBody** = `operations`\\[`\"PublicApiService_DeletePrivateKeyTags\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: API Key Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of an API key object including ID, name, credentials and expiration details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1ApiKey {\n  apiKeyId: string;\n  apiKeyName: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  credential: definitions[\"externaldatav1Credential\"];\n  expirationSeconds?: string;\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Sign Transaction Intent\nDESCRIPTION: Defines the structure for the `signTransactionIntent`, which includes `privateKeyId`, `type`, and `unsignedTransaction`. It facilitates signing a raw transaction using a specific private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_36\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `privateKeyId`: `string`; `type`: `\\\"TRANSACTION_TYPE_ETHEREUM\\\"` \\| `\\\"TRANSACTION_TYPE_SOLANA\\\"; `unsignedTransaction`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Wallet Export Types in TypeScript\nDESCRIPTION: Type definitions for wallet export functionality including request parameters and results for exporting wallet accounts and private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1ExportWalletRequest {\n  organizationId: string;\n  parameters: v1ExportWalletIntent;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_EXPORT_WALLET\";\n}\n\ninterface v1ExportWalletResult {\n  exportBundle: string;\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateOauthProvidersResponse Type in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias for the response structure of the CreateOauthProviders API endpoint. It extracts the schema from the operations object for the 200 response of this endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateOauthProvidersResponse** = `operations`[`\"PublicApiService_CreateOauthProviders\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUsersResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition that maps to the response schema of the PublicApiService_GetUsers operation's successful (200) response. This type is used for handling responses from the POST /public/v1/query/list_users endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetUsersResponse = operations[\"PublicApiService_GetUsers\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePrivateKeysIntent Type - TypeScript\nDESCRIPTION: Defines the intent for creating private keys, specifying an array of private key parameters. This type is essential for requests involving the generation of private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeysIntent {\n  privateKeys: definitions[\"v1PrivateKeyParams\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters when deleting private key tags via the POST /public/v1/submit/delete_private_key_tags endpoint. The type contains a body property of type TDeletePrivateKeyTagsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeletePrivateKeyTagsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TSetOrganizationFeatureInput Type Alias in TypeScript\nDESCRIPTION: Type definition for TSetOrganizationFeatureInput which represents the input structure for setting organization features in the Turnkey SDK. It contains a body property of type TSetOrganizationFeatureBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSetOrganizationFeatureInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTSetOrganizationFeatureInput = object\n```\n\n----------------------------------------\n\nTITLE: Source Parameter Type Definition - TypeScript\nDESCRIPTION: Type definition for a source parameter that must be a string value.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/createAccountWithAddress.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsource: string\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportWalletAccountResult object\nDESCRIPTION: Defines the structure of the v1ExportWalletAccountResult object, representing the result of exporting a wallet account. It contains the address of the wallet account (address) and the export bundle (exportBundle), which includes the private key encrypted by the client's target public key. This object is returned by the server upon successful export of the wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportWalletAccountResult\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1471\n\n#### address\n\n> **address**: `string`\n\n##### Description\n\nAddress to identify Wallet Account.\n\n#### exportBundle\n\n> **exportBundle**: `string`\n\n##### Description\n\nExport bundle containing a private key encrypted by the client's target public key.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Account Intent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export wallet account intent, including address and target public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportWalletAccountIntent\n\n> **v1ExportWalletAccountIntent**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1595](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1595)\n\n#### address\n\n> **address**: `string`\n\n##### Description\n\nAddress to identify Wallet Account.\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the export bundle will be encrypted.\n```\n\n----------------------------------------\n\nTITLE: Creating API-only Users in JavaScript\nDESCRIPTION: This JavaScript snippet defines a constant named createApiOnlyUsers, which is a function that takes an input and returns a Promise. The function manages multiple intents such as user authentication, organization creation, and more, structured within activity and intent objects. Inputs require detailed intent definitions, outputs include a structured Promise resolution capturing actions performed, with constraints on input format aligning to the SDK standards.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiOnlyUsers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createApiOnlyUsers = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"\n```\n\n----------------------------------------\n\nTITLE: TUpdateUserTagInput Properties Definition\nDESCRIPTION: Property definition for the TUpdateUserTagInput type, specifying the required body property and its type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TUpdateUserTagBody\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key in TypeScript\nDESCRIPTION: This method retrieves the public key. It takes no parameters and returns a Promise containing the public key as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPublicKey(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining SignRawPayloadsResult in TypeScript\nDESCRIPTION: This snippet defines the `signRawPayloadsResult` type, which contains an array of signatures represented as objects. It is part of the overall SDK structure to manage payload signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining assertActivityCompleted Function (TypeScript)\nDESCRIPTION: This snippet defines the `assertActivityCompleted` function which takes an `activity` object as input and returns a boolean value indicating whether the activity has been completed. The function is defined in the `packages/http/src/shared.ts` file of the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **assertActivityCompleted**(`activity`): `boolean`\n```\n\n----------------------------------------\n\nTITLE: User Creation and Tag Management Intent\nDESCRIPTION: This intent schema provides fields necessary for creating user entries and managing user tags, specifically listing user identifiers and tag names. Dependencies are minimal, focused on structured user data entry and easy manipulation of user tags within an SDK environment. Inputs are primarily strings with user and tag IDs, leading to database updates.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"users\\\": \\\"object[]\\\",\\n  \\\"userIds\\\": \\\"string[]\\\",\\n  \\\"userTagName\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Random Values Polyfill in React Native\nDESCRIPTION: Imports the react-native-get-random-values polyfill at the entry point of the application to ensure proper functionality of generateP256KeyPair from @turnkey/crypto.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"react-native-get-random-values\";\n```\n\n----------------------------------------\n\nTITLE: Defining recoverUser Function in JavaScript\nDESCRIPTION: The recoverUser function takes an input and returns a Promise containing user activity details, which includes various intents such as creating keys, managing organizations, and user policies. The detailed structure of the activity object includes various fields such as canApprove, canReject, and a nested structure for different intents related to user actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst recoverUser = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; } }>\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportPrivateKeyRequest object\nDESCRIPTION: Defines the structure of the v1ExportPrivateKeyRequest object, used to request the export of a private key. It includes the organization identifier, the parameters for the export (using the v1ExportPrivateKeyIntent type), a timestamp for liveness verification, and a request type. This object is sent to the server to initiate the private key export process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportPrivateKeyRequest\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1441\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[\\\"v1ExportPrivateKeyIntent\\\"]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: \\\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Session Intent Types in TypeScript\nDESCRIPTION: Type definitions for creating read-only and read-write sessions. The read-write session includes authentication parameters, expiration settings, and public key for credential encryption.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Initializing Activity Poller in TypeScript\nDESCRIPTION: Creates an activity poller for a Turnkey client request that automatically checks activity status and resolves when complete\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/createActivityPoller.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst activityPoller = createActivityPoller(client, client.createPrivateKeys);\nconst activity = await activityPoller(input);\nconsole.log(activity.result); // activity is completed\n```\n\n----------------------------------------\n\nTITLE: Getting WebAuthn Attestation - TypeScript\nDESCRIPTION: The getWebAuthnAttestation function takes CredentialCreationOptions as parameters and returns a promise that resolves with an object containing the attestation information. This information includes the attestationObject, clientDataJson, credentialId, and transports used during the authentication process. It is essential for implementing secure authentication mechanisms on web platforms.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/getWebAuthnAttestation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetWebAuthnAttestation(options): Promise<{ attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Structure in TypeScript\nDESCRIPTION: This code snippet outlines the result structure for OTP authentication actions, including an 'apiKeyId', a 'credentialBundle', and a 'userId', all of which are string types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Intent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export wallet intent, including optional language, target public key, and wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportWalletIntent\n\n> **v1ExportWalletIntent**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1616](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1616)\n\n#### language?\n\n> `optional` **language**: `definitions`[`\"v1MnemonicLanguage\"`]\n\n##### Description\n\nThe language of the mnemonic to export. Defaults to English.\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the export bundle will be encrypted.\n\n#### walletId\n\n> **walletId**: `string`\n\n##### Description\n\nUnique identifier for a given Wallet.\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportWalletAccountRequest object\nDESCRIPTION: Defines the structure of the v1ExportWalletAccountRequest object, used to request the export of a wallet account. It includes the organization identifier, the parameters for the export (using the v1ExportWalletAccountIntent type), a timestamp for liveness verification, and a request type. This object is sent to the server to initiate the wallet account export process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportWalletAccountRequest\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1462\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[\\\"v1ExportWalletAccountIntent\\\"]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: \\\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition: TCreateReadWriteSessionResponse in TypeScript\nDESCRIPTION: This snippet defines the `TCreateReadWriteSessionResponse` type alias in TypeScript. It combines the schemas `createReadWriteSessionResultV2` and `v1ActivityResponse` from the SDK's generated API types. This combined type represents the successful response from the `PublicApiService_CreateReadWriteSession` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateReadWriteSessionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type Alias: TCreateReadWriteSessionResponse\\n\\n> **TCreateReadWriteSessionResponse** = `operations`[\\\"PublicApiService_CreateReadWriteSession\\\"][`responses`][\\\"200\\\"][`schema`][`activity`][`result`][`createReadWriteSessionResultV2`] & `definitions`[`v1ActivityResponse`]\n```\n\n----------------------------------------\n\nTITLE: Handling Bitcoin Testnet Accounts TypeScript\nDESCRIPTION: The function defaultBitcoinTestnetP2TRAccountAtIndex initializes a Bitcoin testnet wallet account using the provided path index. It returns a WalletAccount object which represents the account. The primary input parameter is pathIndex, a number representing the desired index. Ensure that the SDK is properly set up before using this function.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinTestnetP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinTestnetP2TRAccountAtIndex(pathIndex): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Mainnet P2PKH Accounts in TypeScript\nDESCRIPTION: This code snippet defines a constant named DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS, which is an array of WalletAccount objects. This is used to establish default wallet configurations for Bitcoin transactions in the SDK. The WalletAccount interface must be defined in the project to ensure type safety and proper usage.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion in TypeScript\nDESCRIPTION: The function 'signCreateWallet' aims to request a WebAuthn assertion and return a signed 'CreateWallet' request in the form of a Promise. This request is then ready to be sent to Turnkey. The function accepts an 'input' of type 'TCreateWalletInput' and an optional 'options' parameter of type 'TurnkeyCredentialRequestOptions'. It returns a Promise that resolves to a 'SignedRequest'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"signCreateWallet(input, options?): Promise<SignedRequest>\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUserTagsResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteUserTagsResponse type alias. It represents the response schema for the 'PublicApiService_DeleteUserTags' operation, specifically for the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUserTagsResponse = operations[\"PublicApiService_DeleteUserTags\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining deleteWallets Method in TypeScript\nDESCRIPTION: Method for deleting wallets that accepts a TDeleteWalletsBody input and returns a Promise containing response objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteWallets(input: TDeleteWalletsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Providers in TypeScript\nDESCRIPTION: This method retrieves information about OAuth providers. It takes an input parameter of type TGetOauthProvidersBody and returns a Promise containing an array of OAuth provider objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOauthProviders(input: TGetOauthProvidersBody): Promise<{ oauthProviders: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the response structure for the DeletePolicy API operation. It intersects the delete policy result schema from operations with the v1ActivityResponse definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TDeletePolicyResponse = operations[\"PublicApiService_DeletePolicy\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"deletePolicyResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Generating TON V3r2 Wallet Account at Index\nDESCRIPTION: Creates a wallet account for the TON blockchain using a V3r2 derivation path with a specified index. Used for generating deterministic wallet accounts in a predictable sequence.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultTonV3r2AccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTonV3r2AccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticators using TypeScript\nDESCRIPTION: The 'stampGetAuthenticators' function is used to retrieve multiple authenticators. The input required is of type 'TGetAuthenticatorsBody', and it returns a Promise resolving to either 'undefined' or 'TSignedRequest'. This function is also inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetAuthenticators**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetAuthenticatorsBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Set Intent in TypeScript\nDESCRIPTION: This snippet defines the intent to set an organization feature. It takes the feature name and its value, allowing SDK users to specify configurations for different organizational capabilities or features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining the stampSignRawPayloads Method in TypeScript\nDESCRIPTION: Method declaration for stampSignRawPayloads that signs raw payloads and returns a promise with the signed request. Takes a TSignRawPayloadsBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_118\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampSignRawPayloads(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1Effect Type in TypeScript\nDESCRIPTION: Defines a union type for policy effects, allowing either 'EFFECT_ALLOW' or 'EFFECT_DENY'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype v1Effect = \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinMainnetP2TRAccountAtIndex Function in TypeScript\nDESCRIPTION: This function retrieves a WalletAccount for a specified index in the Bitcoin mainnet's P2TR account system. It requires a path index as a parameter and returns a 'WalletAccount' type, which encapsulates the account details. The function is essential for operations that require account management in Bitcoin transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinMainnetP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction defaultBitcoinMainnetP2TRAccountAtIndex(pathIndex: number): WalletAccount {\n    // Function implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Wallet Export Bundle in Turnkey Browser SDK\nDESCRIPTION: The `injectWalletExportBundle` function injects a wallet export bundle and an `organizationId` into the Turnkey Browser SDK. It returns a promise resolving to a boolean indicating success.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n> **injectWalletExportBundle**(`credentialBundle`, `organizationId`): `Promise`\\<`boolean`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:878](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L878)\n\n#### Parameters\n\n##### credentialBundle\n\n`string`\n\n##### organizationId\n\n`string`\n\n#### Returns\n\n`Promise`\\<`boolean`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining signExportWallet Function in TypeScript\nDESCRIPTION: The signExportWallet function requests a WebAuthn assertion and returns a signed ExportWallet request that can be POSTed to Turnkey. It accepts an input of type TExportWalletInput and optional credential request options, returning a Promise of SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signExportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **signExportWallet**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Creating Users in TypeScript\nDESCRIPTION: The `createUsers` function is used to register new users in the SDK. It takes an input parameter of type `TCreateUsersBody` and returns a promise that resolves to an object that represents the created users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncreateUsers(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Policy Intent Types - TypeScript\nDESCRIPTION: Type definitions for policy creation intents including effect types, selectors, and policy naming.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype PolicyIntent = {\n  effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n  notes: string;\n  policyName: string;\n  selectors: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Private Keys Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get multiple private keys. Takes a TGetPrivateKeysBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPrivateKeys(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthN Authenticator Attestation Types\nDESCRIPTION: TypeScript interface defining WebAuthN hardware device authentication details for Turnkey platform, including client extension results and authenticator transport methods\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  authenticatorAttachment: null | \"cross-platform\" | \"platform\",\n  clientExtensionResults: {\n    appid: boolean,\n    appidExclude: boolean,\n    credProps: { rk: boolean }\n  },\n  id: string,\n  rawId: string,\n  response: {\n    attestationObject: string,\n    authenticatorAttachment: null | \"cross-platform\" | \"platform\",\n    clientDataJson: string,\n    transports: AuthenticatorTransport[]\n  },\n  type: \"public-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Export Wallet Intent Type Definition\nDESCRIPTION: Specifies the parameters for exporting a wallet, including target public key, wallet ID, and optional mnemonic language\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1ExportWalletIntent {\n  language?: v1MnemonicLanguage;\n  targetPublicKey: string;\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Wallets Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for deleting wallets. It takes a TDeleteWalletsBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteWallets(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving WalletAccount by Index in TypeScript\nDESCRIPTION: This function retrieves a WalletAccount based on the provided index (pathIndex), allowing users to access a specific account from the generated list of accounts within the SDK. The pathIndex parameter must be a number, and the function returns a WalletAccount object corresponding to that index.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultAptosAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction defaultAptosAccountAtIndex(pathIndex: number): WalletAccount {\n    // Function logic here\n}\n```\n\n----------------------------------------\n\nTITLE: stamp Method\nDESCRIPTION: This method accepts a payload as a string and returns a promise that resolves to an object containing the stamped header name and value, which are necessary for API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstamp(payload): Promise<{ stampHeaderName: string; stampHeaderValue: string; }>\n```\n\n----------------------------------------\n\nTITLE: Initializing User Email Recovery in Turnkey Browser SDK\nDESCRIPTION: The `initUserEmailRecovery` function initiates the user email recovery process. It expects `TInitUserEmailRecoveryBody` as input and returns a Promise resolving to an object. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n> **initUserEmailRecovery**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2141](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2141)\n\n#### Parameters\n\n##### input\n\n`TInitUserEmailRecoveryBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`initUserEmailRecovery`](TurnkeyBrowserClient.mdx#inituseremailrecovery)\n```\n\n----------------------------------------\n\nTITLE: createInvitations method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates invitations. It takes a `TCreateInvitationsBody` object as input and returns a Promise that resolves to an object. It is used to invite new users to a Turnkey organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createInvitations(input: TurnkeySDKApiTypes.TCreateInvitationsBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateInvitationsBody, object & object>(\n            `/turnkey/create_invitations`,\n            input,\n            \"invitations\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagBody Type Alias in TypeScript\nDESCRIPTION: Type alias that extends the PublicApiService_CreateUserTag operation parameters with command override parameters. Used for creating user tags in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateUserTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateUserTagBody = operations[\"PublicApiService_CreateUserTag\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Creating a User Tag in TypeScript\nDESCRIPTION: The `createUserTag` function creates a new tag for a user by accepting an input of type `TCreateUserTagBody`. It returns a Promise that resolves to an object with the details of the created tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncreateUserTag(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createApiOnlyUsers in TypeScript\nDESCRIPTION: The createApiOnlyUsers method creates users who are restricted to API-only access. Accepting input of type TCreateApiOnlyUsersBody, it returns a Promise of an object, enabling server-side management of API users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createApiOnlyUsers**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:839](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L839)\n```\n\n----------------------------------------\n\nTITLE: Defining StorageKeys Enumeration in Typescript\nDESCRIPTION: This code defines the StorageKeys enumeration with various members representing keys for storing data in browser storage. These keys are used to store authentication bundles, current user information, user sessions, read/write sessions, and client-related data within the Turnkey SDK browser package. The keys are essential for managing session data and authentication state.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum StorageKeys {\n  AuthBundle = \"@turnkey/auth_bundle\",\n  CurrentUser = \"@turnkey/current_user\",\n  UserSession = \"@turnkey/session/v1\",\n  ReadWriteSession = \"@turnkey/read_write_session\",\n  Session = \"@turnkey/session/v2\",\n  Client = \"@turnkey/client\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticators - TypeScript\nDESCRIPTION: This function, `stampCreateAuthenticators`, accepts an input formatted as `TCreateAuthenticatorsBody` and returns a promise. Its role is to create new authenticators for the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateAuthenticators(input: TCreateAuthenticatorsBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing User Email Recovery with Turnkey SDK\nDESCRIPTION: Function that requests a WebAuthn assertion and returns a signed request for initiating user email recovery. Requires input parameters for email recovery and optional credential request options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signInitUserEmailRecovery.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signInitUserEmailRecovery: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Deleting User Tags Intent\nDESCRIPTION: This snippet structures the intent for deleting user tags, relying on unique identifiers to effectively manage user categorization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteUserTagsIntent? \\n\\{ `userTagIds`: `string`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteUserTagsIntent.userTagIds \\n`string`[] \\n\\n**Description** \\nA list of User Tag IDs.\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Authenticator in TurnkeyBrowserClient\nDESCRIPTION: The TypeScript function `stampGetAuthenticator` is used to generate a signed request for retrieving a specific authenticator from the Turnkey system. It accepts a `TGetAuthenticatorBody` object as input, which specifies the desired authenticator. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, the signed request required to retrieve the particular authenticator.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetAuthenticator**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:262](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L262)\n\n#### Parameters\n\n##### input\n\n`TGetAuthenticatorBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetAuthenticator`](TurnkeyBrowserClient.mdx#stampgetauthenticator)\n```\n\n----------------------------------------\n\nTITLE: API Key Management Types - TypeScript\nDESCRIPTION: Type definitions for creating and managing API keys, including request/response structures and parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1CreateApiKeysRequest = {\n  organizationId: string;\n  parameters: v1CreateApiKeysIntentV2;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\";\n}\n\ntype v1CreateApiKeysResult = {\n  apiKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1UpdatePolicyRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a policy update request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_140\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1UpdatePolicyRequest: object {\n  organizationId: string;\n  parameters: definitions[\"v1UpdatePolicyIntentV2\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_UPDATE_POLICY_V2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Entry in Telegram Cloud Storage - TypeScript\nDESCRIPTION: This snippet shows how to view a stored entry in Telegram Cloud Storage using the TelegramCloudStorageStamper without any key storage operations. It highlights the difference between using 'new' and '.create()'. The key parameter specifies the location from which to retrieve data, and the function returns a string or null if the key is not found.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// create a new Telegram Cloud Storage Stamper, \"new\" is used when you don't want to store or retrieve any API keys, and just need an interface into Cloud Storage\nconst stamper = new TelegramCloudStorageStamper();\n\n// the key used to index Telegram Cloud Storage\nconst telegramCloudStorageKey = \"@turnkey/telegramCloudStorageKey\";\n\n// get the item stored in Telegram Cloud Storage returned as a string\nconst item = await stamper.getItem(telegramCloudStorageKey);\n\nif (!item) {\n  // failed retrieving item\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Wallet Creation Types\nDESCRIPTION: TypeScript interfaces for creating new wallets with optional mnemonic length configuration\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateWalletIntent {\n  accounts: v1WalletAccountParams[];\n  mnemonicLength?: number;\n  walletName: string;\n}\n\ninterface v1CreateWalletRequest {\n  organizationId: string;\n  parameters: v1CreateWalletIntent;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_WALLET\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteWalletsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteWalletsBody type alias, which is derived from the body parameters of the PublicApiService_DeleteWallets operation. It is used for the POST request to delete wallets via the public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteWalletsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteWalletsBody = operations[\"PublicApiService_DeleteWallets\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Get Organization Method Definition - TypeScript\nDESCRIPTION: Method to retrieve organization details including features, users, wallets and policies. Takes optional TGetOrganizationBody input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetOrganization(input: TGetOrganizationBody = {}): Promise<{ organizationData: { features: object[]; invitations: object[]; name: string; organizationId: string; policies: object[]; privateKeys: object[]; rootQuorum: { threshold: number; userIds: string[]; }; tags: object[]; users: object[]; wallets: object[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining the v1GetActivitiesRequest object\nDESCRIPTION: Defines the structure of the v1GetActivitiesRequest object, used to request a list of activities. It includes optional filters for activity status (filterByStatus) and activity type (filterByType), the organization identifier (organizationId), and optional pagination options (paginationOptions). This object is sent to the server to retrieve a list of activities based on the specified criteria.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1GetActivitiesRequest\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1506\n\n#### filterByStatus?\n\n> `optional` **filterByStatus**: `definitions`[\\\"v1ActivityStatus\\\"][]\n\n##### Description\n\nArray of Activity Statuses filtering which Activities will be listed in the response.\n\n#### filterByType?\n\n> `optional` **filterByType**: `definitions`[\\\"v1ActivityType\\\"][]\n\n##### Description\n\nArray of Activity Types filtering which Activities will be listed in the response.\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### paginationOptions?\n\n> `optional` **paginationOptions**: `definitions`[\\\"v1Pagination\\\"]\n\n##### Description\n\nParameters used for cursor-based pagination.\"\n```\n\n----------------------------------------\n\nTITLE: Updating Private Key Tag with Turnkey SDK in TypeScript\nDESCRIPTION: Method for updating a private key tag through the Turnkey API. It accepts a TUpdatePrivateKeyTagBody parameter and returns a Promise containing the response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePrivateKeyTag(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Injecting Import Bundle with TurnkeyIframeClient\nDESCRIPTION: Demonstrates injecting an import bundle into an iframe for secure credential import.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects an import bundle for a specific organization and user\nconst success = await iframeClient.injectImportBundle(\n  \"import-bundle\",\n  \"org-id\",\n  \"user-id\",\n);\n```\n\n----------------------------------------\n\nTITLE: Organization Feature Management Types\nDESCRIPTION: Type definitions for adding, removing, and setting organization features with specific enum-like name constraints\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  removeOrganizationFeatureIntent: {\n    name: \n      | \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"\n      | \"FEATURE_NAME_WEBAUTHN_ORIGINS\"\n      | \"FEATURE_NAME_EMAIL_AUTH\"\n  },\n  setOrganizationFeatureIntent: {\n    name: \n      | \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"\n      | \"FEATURE_NAME_WEBAUTHN_ORIGINS\"\n      | \"FEATURE_NAME_EMAIL_AUTH\";\n    value: string;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Update Results Structures - TypeScript\nDESCRIPTION: Defines structures involved in several update operations, such as allowed origins, policies, private keys tags, users, and wallets, with respective identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateAllowedOriginsResult`: \\{ \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicyResult`: \\{ `policyId`: `string`; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicyResultV2`: \\{ `policyId`: `string`; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateRootQuorumResult`: \\{ \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserResult`: \\{ `userId`: `string`; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserTagResult`: \\{ `userTagId`: `string`; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWalletResult`: \\{ `walletId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Initializing Private Key Import in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for initializing the process of importing a private key. Takes input parameters and returns a Promise that resolves to an object with initialization result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitImportPrivateKey(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Attestation Response in TypeScript\nDESCRIPTION: This snippet defines the shape of the response for an authenticator attestation, including details of the attestation object and client data, as well as optional attributes related to authenticator attachment and transport.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1AuthenticatorAttestationResponse {\n  attestationObject: string;\n  authenticatorAttachment?: \"cross-platform\" | \"platform\" | null;\n  clientDataJson: string;\n  transports?: definitions[\"v1AuthenticatorTransport\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaration of getOrganization Function in TypeScript\nDESCRIPTION: Declaration of the getOrganization function that retrieves organization details including features, invitations, name, organizationId, policies, private keys, root quorum settings, tags, users, and wallets. The function accepts an input parameter of type TGetOrganizationInput and returns a Promise with organization data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getOrganization: (input) => Promise<{ organizationData: { features: object[]; invitations: object[]; name: string; organizationId: string; policies: object[]; privateKeys: object[]; rootQuorum: { threshold: number; userIds: string[]; }; tags: object[]; users: object[]; wallets: object[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting User Authentication Factors with Turnkey\nDESCRIPTION: This TypeScript function `deleteUserAuth` allows removing authentication factors from an end-user, including phone number, email, authenticators, OAuth providers, and API keys. It accepts a structured object `DeleteUserAuthParams` as input and returns a promise that resolves to an array of results from each removal operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes User Authentication Factors with Turnkey\n */\n> **deleteUserAuth**(`params`): `Promise`\\<`any`[]\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:477](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L477)\n\nRemoves authentication factors from an end user.\n\nThis function allows selectively removing:\n- Phone number\n- Email\n- Authenticators (by ID)\n- OAuth providers (by ID)\n- API keys (by ID)\n\nAll removal operations are executed in parallel if multiple\nparameters are provided.\n\n#### Parameters\n\n##### params\n\n`DeleteUserAuthParams`\n\nA structured object containing all the removal parameters\n\n#### Returns\n\n`Promise`\\<`any`[]\\>\n\nA promise that resolves to an array of results from each removal operation\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Structure - TypeScript\nDESCRIPTION: Defines the structure for user email recovery results, which contains a user ID as a string. This result is utilized when initiating user email recovery.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitUserEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamp Init Otp Auth with Turnkey SDK\nDESCRIPTION: This function `stampInitOtpAuth` is responsible for creating a signed request to initialize OTP authentication using the Turnkey SDK. It takes a `TInitOtpAuthBody` as input, returning a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampInitOtpAuth**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2125](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2125)\n\n#### Parameters\n\n##### input\n\n`TInitOtpAuthBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users Method\nDESCRIPTION: Method to fetch a list of users. Takes an optional TGetUsersBody parameter and returns a Promise containing an array of user objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetUsers(input: TGetUsersBody = {}): Promise<{ users: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: TExportWalletResponse Type Alias Definition\nDESCRIPTION: Defines the type alias `TExportWalletResponse` which represents the response schema for a successful `PublicApiService_ExportWallet` operation. The response is extracted from the operations type definition, specifically the 200 response schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TExportWalletResponse** = `operations`\\[`\"PublicApiService_ExportWallet\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Typescript Interface Definition for Activity Parameters\nDESCRIPTION: Type definitions for the activity parameter structure used in getSignatureFromActivity. Includes boolean flags for approval status, timestamp information, optional failure details, and identification fields.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  canApprove: boolean;\n  canReject: boolean;\n  createdAt: {\n    nanos: string;\n    seconds: string;\n  };\n  failure?: {\n    code?: number;  // Format: int32\n    details?: object & object[];\n    message?: string;\n  };\n  fingerprint: string;  // An artifact verifying a User's action\n  id: string;  // Unique identifier for a given Activity object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the body parameters of the create users API endpoint. This type represents the structure of the request body when creating users through the Turnkey API using the POST /public/v1/submit/create_users endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TCreateUsersBody** = `operations`[`\"PublicApiService_CreateUsers\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: TExportWalletInput Type Alias Definition\nDESCRIPTION: Defines the TExportWalletInput type alias as an object with a 'body' property of type `TExportWalletBody`. This type is used as input for the `POST /public/v1/submit/export_wallet` API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TExportWalletInput** = `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:45662\n\n`POST /public/v1/submit/export_wallet`\n\n## Properties\n\n### body\n\n> **body**: [`TExportWalletBody`](TExportWalletBody.mdx)\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:45663\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUserRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a user, including organizationId and userId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetUserRequest {\n  organizationId: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Types Definition - TypeScript\nDESCRIPTION: Type definitions for WebAuthn authenticator responses and parameters, including attestation objects, transports, and credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1AuthenticatorAttestationResponse = {\n  attestationObject: string;\n  authenticatorAttachment?: \"cross-platform\" | \"platform\" | null;\n  clientDataJson: string;\n  transports?: v1AuthenticatorTransport[];\n}\n\ntype v1AuthenticatorParams = {\n  attestation: v1PublicKeyCredentialWithAttestation;\n  authenticatorName: string;\n  challenge: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StampRequest Enumeration\nDESCRIPTION: This snippet defines the StampRequest event type in TypeScript, which indicates a request has been made to perform a stamp action.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nStampRequest: \"STAMP_REQUEST\"\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for TListPrivateKeyTagsInput in TypeScript\nDESCRIPTION: This snippet details the property `body` of type `TListPrivateKeyTagsBody` expected in the `TListPrivateKeyTagsInput`. It is essential for correctly structuring requests to the API endpoint for listing private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListPrivateKeyTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TListPrivateKeyTagsBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition that maps the successful response schema (200 status code) from the PublicApiService_GetWalletAccounts operation. Used for handling responses from the POST /public/v1/query/list_wallet_accounts endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetWalletAccountsResponse = operations[\"PublicApiService_GetWalletAccounts\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TGetWalletAccountsBody in TypeScript\nDESCRIPTION: This TypeScript snippet defines the type alias TGetWalletAccountsBody, which refers to a nested structure within a 'PublicApiService_GetWalletAccounts' operation. It is part of the SDK's API operation definitions, specifically used to handle the body of POST requests to the 'list_wallet_accounts' endpoint. This type alias serves as a blueprint for constructing the request bodies required by the API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetWalletAccountsBody = operations[\\\"PublicApiService_GetWalletAccounts\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitUserEmailRecoveryIntent type\nDESCRIPTION: Defines the structure for the intent to initialize user email recovery, including user's email, optional email customization parameters, recovery link expiration time, and target public key for encrypting the recovery bundle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitUserEmailRecoveryIntent\n * @memberof definitions\n */\nexport interface v1InitUserEmailRecoveryIntent {\n  /**\n   * Email of the user starting recovery\n   */\n  email: string;\n  /**\n   * Optional parameters for customizing emails. If not provided, the default email will be used.\n   */\n  emailCustomization?: definitions[\"v1EmailCustomizationParams\"];\n  /**\n   * Expiration window (in seconds) indicating how long the recovery credential is valid. If not provided, a default of 15 minutes will be used.\n   */\n  expirationSeconds?: string;\n  /**\n   * Client-side public key generated by the user, to which the recovery bundle will be encrypted.\n   */\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TSignTransactionInput Type Alias in TypeScript\nDESCRIPTION: Type definition for TSignTransactionInput, which is an object containing a body property of type TSignTransactionBody. This type is used for transaction signing operations in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignTransactionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTSignTransactionInput = `object`\n```\n\n----------------------------------------\n\nTITLE: OAuth in Turnkey Browser SDK\nDESCRIPTION: The `oauth` function performs OAuth authentication. It accepts `TOauthBody` as input and returns a promise that resolves to an object. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n> **oauth**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2178](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2178)\n\n#### Parameters\n\n##### input\n\n`TOauthBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWhoamiResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing the current user's information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWhoamiResponse {\n  organizationId: string;\n  organizationName: string;\n  userId: string;\n  username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Uniswap V3 Swap Script\nDESCRIPTION: Command to execute the Uniswap V3 swap transaction script. This script constructs a transaction via Turnkey and broadcasts it through Infura to perform a token swap on Uniswap.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-uniswap/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent in TypeScript\nDESCRIPTION: This code snippet defines the structure for the import wallet intent. It includes parameters such as encryptedBundle, userId, and walletName, which are required to initiate a wallet import process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeysResponse Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that represents the structure of the response returned when successfully deleting private keys via the PublicApiService_DeletePrivateKeys operation. It extracts the 200 response schema from the API definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePrivateKeysResponse = operations[\"PublicApiService_DeletePrivateKeys\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TurnKey SDK Type Definitions in TypeScript\nDESCRIPTION: This code snippet defines a large set of TypeScript types and interfaces for the TurnKey SDK. It includes result types for various API operations, activity statuses, and activity types. These definitions are crucial for type-checking and providing autocompletion in TypeScript projects using the TurnKey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createReadOnlySession.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines a complex TypeScript type that includes various activity types, their corresponding result structures, and status enums for the Coordinator Public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signature Result Structure - TypeScript\nDESCRIPTION: This snippet specifies the result structure of a signed transaction, which includes a signedTransaction string. It encapsulates the results of transaction signing operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining InjectImportBundle Enumeration\nDESCRIPTION: This snippet defines the InjectImportBundle event type in TypeScript, used for injecting an import bundle within the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nInjectImportBundle: \"INJECT_IMPORT_BUNDLE\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletResponse {\n  wallet: definitions[\"v1Wallet\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Extensive Activity Type Enum in TypeScript\nDESCRIPTION: Defines a comprehensive list of activity types covering user management, authentication, organization operations, key management, and system-level actions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | ... (multiple activity types)`\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`\n```\n\n----------------------------------------\n\nTITLE: Delete Authenticators in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete authenticators using the TurnkeyBrowserClient. It takes a `TDeleteAuthenticatorsBody` as input and returns a Promise that resolves to an object. It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteAuthenticators**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1445](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1445)\n\n#### Parameters\n\n##### input\n\n`TDeleteAuthenticatorsBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`deleteAuthenticators`](TurnkeyBrowserClient.mdx#deleteauthenticators)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias declaration for the GET /public/v1/query/list_wallets endpoint response schema. Maps to the 200 success response schema of the PublicApiService_GetWallets operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletsResponse = operations[\"PublicApiService_GetWallets\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Approve Activity Intent in TypeScript\nDESCRIPTION: This snippet defines the structure for an intent to approve user activities, capturing essential parameters such as the user's fingerprint and the corresponding request details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1ApproveActivityIntent {\n  fingerprint: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IframeStamper Instance in TypeScript\nDESCRIPTION: Constructor for creating a new IframeStamper instance. This creates the stamper but does not insert the iframe into the DOM until init() is called.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew IframeStamper(config): IframeStamper\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Testnet P2PKH Accounts in TypeScript\nDESCRIPTION: This snippet defines a constant array, `DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS`, which contains default Bitcoin testnet accounts. Each account is of type `WalletAccount`, indicating a structure conforming to the `WalletAccount` interface. This setup aids in managing testnet accounts using TypeScript, primarily within the SDK's browser package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_TESTNET_P2PKH_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the request body of the DeleteOauthProviders API endpoint. This type is derived from the parameters of the PublicApiService_DeleteOauthProviders operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTDeleteOauthProvidersBody = `operations`[`\"PublicApiService_DeleteOauthProviders\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Update Wallet Method Definition in TypeScript\nDESCRIPTION: Method to update wallet details. Takes a TUpdateWalletBody input parameter and returns a Promise resolving to a combined object type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWallet(input: TUpdateWalletBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Signing WebAuthn Authentication Requests in TypeScript\nDESCRIPTION: The `signGetAuthenticator` function initializes a request for a WebAuthn assertion and signs it to create a `GetAuthenticator` request. It requires `input` of type `TGetAuthenticatorInput` and optional `options` of type `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves to a `SignedRequest` object, which can be directly POSTed to Turnkey. This function is central to integrating WebAuthn flows with Turnkey services.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetAuthenticator.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **signGetAuthenticator**(`input`, `options`?): `Promise`\\u003c[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\u003e\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:244](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L244)\n\nRequest a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n\nSee GetAuthenticator\n\n## Parameters\n\n### input\n\n[`TGetAuthenticatorInput`](../type-aliases/TGetAuthenticatorInput.mdx)\n\n### options?\n\n`TurnkeyCredentialRequestOptions`\n\n## Returns\n\n`Promise`\\u003c[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\u003e\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Mainnet P2TR Accounts\nDESCRIPTION: This snippet defines a constant, DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS, which is an array of WalletAccount objects. This configuration is crucial for applications that interact with Bitcoin's Mainnet using P2TR transactions. It requires the WalletAccount interface from another module as a dependency.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2TR_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Update User Tag API Endpoint Definition in TypeScript\nDESCRIPTION: Documentation for the Update User Tag API endpoint, which allows updating a user tag's human-readable name or associated users. The operation is atomic, meaning all updates either succeed or fail together. This endpoint is accessed via POST request to /public/v1/submit/update_user_tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nUpdate User Tag\n\nUpdate human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n\n`POST /public/v1/submit/update_user_tag`\n\n## Parameters\n\n### input\n\n[`TUpdateUserTagInput`](../type-aliases/TUpdateUserTagInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Approving Activity - TypeScript\nDESCRIPTION: The `stampApproveActivity` function accepts an input of type `TApproveActivityBody` and returns a promise that resolves to undefined or a `TSignedRequest` object. This function is intended to approve an activity within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampApproveActivity(input: TApproveActivityBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: TGetActivitiesInput Type Alias Definition\nDESCRIPTION: Defines the `TGetActivitiesInput` type alias as an object. This type is used as input for the `POST /public/v1/query/list_activities` endpoint. It requires a `body` property which is of type `TGetActivitiesBody`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TGetActivitiesInput\n *\n * > **TGetActivitiesInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:2175\n *\n * `POST /public/v1/query/list_activities`\n *\n * ## Properties\n *\n * ### body\n *\n * > **body**: [`TGetActivitiesBody`](TGetActivitiesBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:2176\n */\n```\n\n----------------------------------------\n\nTITLE: Signing GetWallet Request with WebAuthn\nDESCRIPTION: Generates a signed WebAuthn assertion for retrieving a wallet through the Turnkey SDK. Requires input parameters for wallet retrieval and optional credential request options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetWallet(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attestation Document in TypeScript\nDESCRIPTION: The function 'stampGetAttestationDocument' retrieves an attestation document. It takes an input of type 'TGetAttestationDocumentBody' and returns a Promise resolving to 'undefined' or a 'TSignedRequest'. This function is an inherited method from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetAttestationDocument**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetAttestationDocumentBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: TCreateInvitationsInput Properties Structure\nDESCRIPTION: Property definition for the TCreateInvitationsInput type, specifying the body field of type TCreateInvitationsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateInvitationsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TCreateInvitationsBody\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Configs in TypeScript\nDESCRIPTION: The stampGetOrganizationConfigs function fetches organization configuration data, taking TGetOrganizationConfigsBody as input and resulting in a Promise that resolves to undefined or TSignedRequest, all inherited from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_109\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOrganizationConfigs(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Request Body - TypeScript\nDESCRIPTION: The type alias 'TListUserTagsBody' is defined to structure the request body for the 'PublicApiService_ListUserTags' operation. This type alias helps ensure that the request adheres to the expected format for the API endpoint that lists user tags. Dependencies include TypeScript for type safety and API endpoint documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListUserTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TListUserTagsBody = operations[\\\"PublicApiService_ListUserTags\\\"][\\\"parameters\\\"][\\\"body\\\"]\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitOtpAuthIntent type\nDESCRIPTION: Defines the structure for the intent to initialize OTP authentication, including contact information, email/SMS customization parameters, OTP type, optional sender info, and a user identifier for rate limiting.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitOtpAuthIntent\n * @memberof definitions\n */\nexport interface v1InitOtpAuthIntent {\n  /**\n   * Email or phone number to send the OTP code to\n   */\n  contact: string;\n  /**\n   * Optional parameters for customizing emails. If not provided, the default email will be used.\n   */\n  emailCustomization?: definitions[\"v1EmailCustomizationParams\"];\n  /**\n   * Enum to specifiy whether to send OTP via SMS or email\n   */\n  otpType: string;\n  /**\n   * Optional custom email address from which to send the OTP email\n   */\n  sendFromEmailAddress?: string;\n  /**\n   * Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'\n   */\n  sendFromEmailSenderName?: string;\n  /**\n   * Optional parameters for customizing SMS message. If not provided, the default sms message will be used.\n   */\n  smsCustomization?: definitions[\"v1SmsCustomizationParams\"];\n  /**\n   * Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.\n   */\n  userIdentifier?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the v1EmailAuthRequest object\nDESCRIPTION: Defines the structure of the v1EmailAuthRequest object, used to encapsulate the parameters required for an email authentication request. It includes the organization identifier, the authentication parameters (using the v1EmailAuthIntentV2 type), a timestamp for liveness verification, and a request type. This object is sent to the server to initiate an email authentication flow.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1EmailAuthRequest\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1408\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[\\\"v1EmailAuthIntentV2\\\"]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: \\\"ACTIVITY_TYPE_EMAIL_AUTH_V2\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Stamp Requests for User Management Operations in TypeScript\nDESCRIPTION: Methods that prepare signed requests for user management operations like deleting users, deleting user tags, and deleting invitations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUsers(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUserTags(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteInvitation(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Describing SDK Activity and Intent Structure in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the structure of activities and intents returned by the SDK as a Promise. It includes nested objects for complex data types like `activity`, `fingerprint`, and several intent types such as `createApiKeysIntent` and `exportWalletIntent`. Key fields include `policyName`, `organizationName`, and `walletName`, with a variety of nested optional properties. Dependencies include a TypeScript environment that supports promise-based operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: {\n                rk: boolean;\n              };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n              clientDataJson: string;\n              transports: ...[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      acceptInvitationIntentV2: {\n        credentialId: string;\n        transports: (... | ...)[];\n        authenticatorName: string;\n        challenge: string;\n        invitationId: string;\n        userId: string;\n      };\n      createApiKeysIntent: {\n        apiKeys: object[];\n        userId: string;\n      };\n      // Additional intent structures here\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Organization in TypeScript\nDESCRIPTION: A method for deleting a sub-organization within the Turnkey system, accepting input parameters of type TDeleteSubOrganizationBody and returning a promise with an object result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteSubOrganization(input: TDeleteSubOrganizationBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: OAuth Providers Activity Status Enum\nDESCRIPTION: Comprehensive enumeration of possible activity statuses for OAuth and authentication-related processes, covering states from creation to completion or failure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Result V2 Structure in TypeScript\nDESCRIPTION: Defines the structure for updating policy v2 results, including policyId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicyResultV2`: \\{ `policyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Stamping (Signing) a Payload in TypeScript\nDESCRIPTION: Method to sign a payload with the underlying iframe's key. This is the core functionality of the stamper for authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nstamp(payload): Promise<TStamp>\n```\n\n----------------------------------------\n\nTITLE: Using eth_requestAccounts Method\nDESCRIPTION: Example of using the eth_requestAccounts method to request user's Ethereum address for identification, following EIP-1102 specification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/eip-1193-provider/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst accounts = await provider.request({ method: \"eth_requestAccounts\" });\n// Logs the array accounts associated with the provided walletId & organization\nconsole.log(accounts);\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent in TypeScript\nDESCRIPTION: This snippet defines the structure of the 'importWalletIntent' object used for importing a wallet. It encapsulates an array of accounts, the encrypted wallet bundle, user ID, and wallet name. This structure is essential for handling user-initiated wallet imports.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Signing DeleteAuthenticators Request in TypeScript\nDESCRIPTION: The `signDeleteAuthenticators` function requests a WebAuthn assertion and returns a signed `DeleteAuthenticators` request. It takes input parameters to specify the request and optional settings for the credential request. The function returns a promise that resolves to a `SignedRequest`, which is prepared for sending to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction signDeleteAuthenticators(input: TDeleteAuthenticatorsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation details here\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Delete API Keys Operation in TypeScript\nDESCRIPTION: The purpose of the function signDeleteApiKeys is to create a WebAuthn assertion and return a signed request to delete API keys. It expects an input of type TDeleteApiKeysInput and an optional parameter for TurnkeyCredentialRequestOptions. The function returns a promise resolved with a SignedRequest, which is ready to be POSTed for further processing in the Turnkey system. Dependencies include types such as TDeleteApiKeysInput and SignedRequest, which are defined in separate documentation files.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signDeleteApiKeys**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\\n\\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:2098](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2098)\\n\\nRequest a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Creating a new passkey with react-native-passkey-stamper\nDESCRIPTION: This code snippet demonstrates how to create a new passkey using the `createPasskey` function from the `@turnkey/react-native-passkey-stamper` package. It configures authenticator parameters such as authenticator name, relying party (RP) details (ID and name), and user information (ID, name, and display name). The function returns authenticator parameters suitable for sub-organization or user creation within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPasskey } from \"@turnkey/react-native-passkey-stamper\";\n\n// Returns authenticator params that can be used with sub-org creation, user creation, etc.\nconst authenticatorParams = await createPasskey({\n  // Won't be visible to users, this is the name of the Turnkey resource\n  authenticatorName: \"End-User Passkey\",\n  rp: {\n    id: \"your.site.com\",\n    name: \"Your App\",\n  },\n  user: {\n    // This ID isn't visible to users\n    id: String(Date.now()),\n    // ...but name and display names are. This is what's shown in the passkey prompt\n    name: \"Some Name\",\n    // displayName should be the same as \"name\"\n    displayName: \"Some Name\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticator Object Type Definition\nDESCRIPTION: Defines the structure of an authenticator with properties like ID, name, credential, and transport methods\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1Authenticator: {\n  aaguid: string;\n  attestationType: string;\n  authenticatorId: string;\n  authenticatorName: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  credential: definitions[\"externaldatav1Credential\"];\n  credentialId: string;\n  model: string;\n  transports: definitions[\"v1AuthenticatorTransport\"][];\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified Suborganization IDs in TypeScript\nDESCRIPTION: The function getVerifiedSubOrgIds sends a POST request to the Turnkey API endpoint responsible for fetching verified suborganization IDs associated with a specified parent organization ID. It expects an input defined by TGetVerifiedSubOrgIdsInput and returns a promise containing an array of organization IDs as strings. The function requires the proper setup of the API client used for making the request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getVerifiedSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetVerifiedSubOrgIds(input): Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadsInput Interface\nDESCRIPTION: This code defines the structure and properties of the `TSignRawPayloadsInput` type alias, specifying that it must have a `body` property which is of the type `TSignRawPayloadsBody`. It is used as the input for a POST request to the `/public/v1/submit/sign_raw_payloads` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @internal\n */\nexport type TSignRawPayloadsInput = {\n  body: TSignRawPayloadsBody;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Declaring SignGetPrivateKeys Function in TypeScript\nDESCRIPTION: This code snippet defines the signGetPrivateKeys function. It takes an input of type TGetPrivateKeysInput and optional TurnkeyCredentialRequestOptions, and returns a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetPrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetPrivateKeys: (input: TGetPrivateKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TurnkeyRequestError Class Definition\nDESCRIPTION: TypeScript class definition for TurnkeyRequestError that extends the Error class. It includes properties for error code, details, and standard error properties like message and stack trace. The class constructor accepts a GrpcStatus input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeyRequestError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TurnkeyRequestError extends Error {\n  details: null | any[];\n  code: number;\n  \n  constructor(input: GrpcStatus): TurnkeyRequestError;\n  \n  message: string;\n  name: string;\n  stack?: string;\n  \n  static prepareStackTrace?(err: Error, stackTraces: CallSite[]): any;\n  static stackTraceLimit: number;\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining updateRootQuorumIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating the root quorum settings. It specifies the threshold of unique approvals needed and the user IDs that comprise the quorum set.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{ `threshold`: `number`; `userIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Wallet Deletion Activity Type Enumerations\nDESCRIPTION: Comprehensive list of activity types related to wallet operations, including creation, deletion, updating, and authentication workflows\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteWallets.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype`: `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"`\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication in Turnkey Browser SDK\nDESCRIPTION: The `initOtpAuth` function initiates the OTP authentication process within the Turnkey Browser SDK. It requires `TInitOtpAuthBody` as input and returns a promise containing an object. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n> **initOtpAuth**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2105](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2105)\n\n#### Parameters\n\n##### input\n\n`TInitOtpAuthBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`initOtpAuth`](TurnkeyBrowserClient.mdx#initotpauth)\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Result Structure - TypeScript\nDESCRIPTION: This snippet specifies the result structure for an updated wallet, which contains a walletId as a string. It is crucial for managing changes to wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Init OTP Auth Intent Structure - TypeScript\nDESCRIPTION: This snippet describes the initialization structure for OTP authentication, including the user's contact information, email, and SMS customization details along with various options for OTP type and sending methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n`initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1AcceptInvitationIntent Type\nDESCRIPTION: Defines the structure for the `v1AcceptInvitationIntent` object. This object contains properties related to accepting an invitation, including the authenticator details, invitation ID, and user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @deprecated\n *//*\n> **v1AcceptInvitationIntent**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:427](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L427)\n\n#### authenticator\n\n> **authenticator**: `definitions`[`\"v1AuthenticatorParams\"`]\n\n##### Description\n\nWebAuthN hardware devices that can be used to log in to the Turnkey web app.\n\n#### invitationId\n\n> **invitationId**: `string`\n\n##### Description\n\nUnique identifier for a given Invitation object.\n\n#### userId\n\n> **userId**: `string`\n\n##### Description\n\nUnique identifier for a given User.\n```\n\n----------------------------------------\n\nTITLE: Stamping User Creation Request in TypeScript\nDESCRIPTION: Method to prepare a signed request for creating new users. Takes a TCreateUsersBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUsers(input: TCreateUsersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Organization IDs in TypeScript\nDESCRIPTION: stampGetSubOrgIds function retrieves sub-organization IDs using TGetSubOrgIdsBody input, and returns a Promise ending at undefined or TSignedRequest. It runs under the TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_114\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetSubOrgIds(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration for signDeleteUserTags Function in TypeScript\nDESCRIPTION: Declaration of the signDeleteUserTags function which takes input and optional options parameters. It requests a WebAuthn assertion and returns a signed DeleteUserTags request that's ready to be POSTed to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeleteUserTags: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAuthenticators Body Type in TypeScript\nDESCRIPTION: Type alias that represents the body parameter for creating authenticators through the Turnkey public API service. Used in POST requests to the /public/v1/submit/create_authenticators endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateAuthenticatorsBody = operations[\"PublicApiService_CreateAuthenticators\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete User Tags Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for deleting tags from users. It takes a TDeleteUserTagsBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUserTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Delete Policy in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete a policy using the TurnkeyBrowserClient. It takes a `TDeletePolicyBody` as input and returns a Promise that resolves to an object.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> **deletePolicy**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1556](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1556)\n\n#### Parameters\n\n##### input\n\n`TDeletePolicyBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`deletePolicy`](TurnkeyBrowserClient.mdx#deletepolicy)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TRejectActivityResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias TRejectActivityResponse that maps to the expected schema of a response for the reject activity operation in the Turnkey API. This is critical for ensuring that the response is properly typed and validated within TypeScript applications. The alias points to a specific path in the generated TypeScript definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRejectActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TRejectActivityResponse = operations[\\\"PublicApiService_RejectActivity\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePrivateKeyTagResponse Type in TypeScript\nDESCRIPTION: Type alias that represents the response schema for the PublicApiService_UpdatePrivateKeyTag operation's 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdatePrivateKeyTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdatePrivateKeyTagResponse = operations[\"PublicApiService_UpdatePrivateKeyTag\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUserTagsInput Type Alias in TypeScript\nDESCRIPTION: Defines the TDeleteUserTagsInput type alias as an object with a body property of type TDeleteUserTagsBody. This type is used for the POST request to the /public/v1/submit/delete_user_tags endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUserTagsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining ReadWriteSessionIntent Object Definition in TypeScript\nDESCRIPTION: Defines the structure for a read-write session intent, including parameters such as API key name and user email.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nv1CreateReadWriteSessionIntent: object\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:855\n\napiKeyName?: string // Optional human-readable name for an API Key.\nemail: string // Email of the user to create a read-write session for.\nexpirationSeconds?: string // Expiration window (in seconds) indicating how long the API key is valid.\ntargetPublicKey: string // Client-side public key generated by the user.\n```\n\n----------------------------------------\n\nTITLE: Defining InjectWalletExportBundle Enumeration\nDESCRIPTION: This snippet defines the InjectWalletExportBundle event type in TypeScript, which is used to inject a wallet export bundle into the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nInjectWalletExportBundle: \"INJECT_WALLET_EXPORT_BUNDLE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for OAuth Providers Response Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TGetOauthProvidersResponse which represents the schema of the HTTP response received from the 'GetOauthProviders' API endpoint. It is used to ensure that the data conforms to the expected structure when interacted with in the application. The type is based on the operations defined in the API documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetOauthProvidersResponse = operations[`\\\"PublicApiService_GetOauthProviders\\\"]`[`\\\"responses\\\"]`[`\\\"200\\\"]`[`\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TCreateSubOrganizationBody in TypeScript\nDESCRIPTION: This type alias represents the structure of the request body for the 'CreateSubOrganization' operation in the public API of the Turnkey SDK. It combines parameters from the operation with an override capability. To use this type, the SDK must be imported correctly, and it is intended for developers working with the API to ensure type safety when constructing requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateSubOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TCreateSubOrganizationBody\" = operations[\\\"PublicApiService_CreateSubOrganization\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure in TypeScript\nDESCRIPTION: This snippet defines the OAuth result structure that encapsulates user credentials and API key information required for successful OAuth operations. It contains 'apiKeyId', 'credentialBundle', and 'userId' as string types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Testing Environment - Bash\nDESCRIPTION: Describes the steps to set up a local testing environment using Anvil. Involves copying environment variables from a template, installing and configuring Foundry, and running Anvil to test the implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.example .env\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=\"$PATH:$HOME/.foundry/bin\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ source ~/.zshrc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ foundryup\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm anvil\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetAuthenticatorResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting an authenticator, containing an Authenticator object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetAuthenticatorResponse {\n  authenticator: definitions[\"v1Authenticator\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePolicyIntent Type - TypeScript\nDESCRIPTION: Defines the structure for policy creation intent, including fields for policy effect, name, notes, and selectors, ensuring appropriate conditions are fulfilled for policy creation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePolicyIntent {\n  effect: definitions[\"v1Effect\"];\n  notes?: string;\n  policyName: string;\n  selectors: definitions[\"v1Selector\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TPasskeyStamperConfig in TypeScript\nDESCRIPTION: Defines the TPasskeyStamperConfig as an object type alias in TypeScript for configuring the React Native Passkey Stamper. Requires 'rpId' as a string and allows other optional configurations such as 'allowCredentials', 'extensions', 'timeout', 'userVerification', 'withPlatformKey', and 'withSecurityKey'. These properties enable fine-tuning the authentication process. No explicit dependencies aside from the TypeScript language are needed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/type-aliases/TPasskeyStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TPasskeyStamperConfig = {\\n  allowCredentials?: PublicKeyCredentialDescriptor[];\\n  rpId: string;\\n  timeout?: number;\\n  userVerification?: UserVerificationRequirement;\\n  withPlatformKey?: boolean;\\n  withSecurityKey?: boolean;\\n  extensions?: Record<string, unknown>;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion for UpdateUserTag in TypeScript\nDESCRIPTION: This function handles requesting a WebAuthn assertion and returning a signed UpdateUserTag request that's ready to be POSTed to Turnkey. It takes input parameters for the tag update and optional credential request options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signUpdateUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignUpdateUserTag(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining Invitation Deletion Request - TypeScript\nDESCRIPTION: Specifies the request structure for deleting invitations, consisting of organization ID, parameters, and timestamps. It assists in managing invitation deletions uniformly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteInvitationRequest: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1195\n */\nexport interface v1DeleteInvitationRequest {\n  organizationId: string; // Unique identifier for a given Organization.\n  parameters: definitions[\"v1DeleteInvitationIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n  type: \"ACTIVITY_TYPE_DELETE_INVITATION\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyBody Type Alias\nDESCRIPTION: This code defines the TDeletePolicyBody type alias using TypeScript. It specifies the structure of the request body for deleting a policy via the `PublicApiService_DeletePolicy` operation. The type is extracted from the `operations` object, specifically targeting the parameters of the `PublicApiService_DeletePolicy` operation's body.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * > **TDeletePolicyBody** = `operations`\\[`\"PublicApiService_DeletePolicy\"`]\\[`\"parameters\"`]\\[`\"body\"`]\\[`\"body\"`]\n */\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Related Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for OAuth authentication, including data structures for OAuth intents, providers, requests, and results. These are used for setting up OAuth-based authentication within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1OauthIntent\n\n> **v1OauthIntent**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2050\n\n#### apiKeyName?\n\n> `optional` **apiKeyName**: `string`\n\n##### Description\n\nOptional human-readable name for an API Key. If none provided, default to Oauth - <Timestamp>\n\n#### expirationSeconds?\n\n> `optional` **expirationSeconds**: `string`\n\n##### Description\n\nExpiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used.\n\n#### invalidateExisting?\n\n> `optional` **invalidateExisting**: `boolean`\n\n##### Description\n\nInvalidate all other previously generated Oauth API keys\n\n#### oidcToken\n\n> **oidcToken**: `string`\n\n##### Description\n\nBase64 encoded OIDC token\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.\n\n***\n\n### v1OauthProvider\n\n> **v1OauthProvider**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2062\n\n#### audience\n\n> **audience**: `string`\n\n##### Description\n\nExpected audience ('aud' attribute of the signed token) which represents the app ID\n\n#### createdAt\n\n> **createdAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n\n#### issuer\n\n> **issuer**: `string`\n\n##### Description\n\nThe issuer of the token, typically a URL indicating the authentication server, e.g https://accounts.google.com\n\n#### providerId\n\n> **providerId**: `string`\n\n##### Description\n\nUnique identifier for an OAuth Provider\n\n#### providerName\n\n> **providerName**: `string`\n\n##### Description\n\nHuman-readable name to identify a Provider.\n\n#### subject\n\n> **subject**: `string`\n\n##### Description\n\nExpected subject ('sub' attribute of the signed token) which represents the user ID\n\n#### updatedAt\n\n> **updatedAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n\n***\n\n### v1OauthProviderParams\n\n> **v1OauthProviderParams**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2076\n\n#### oidcToken\n\n> **oidcToken**: `string`\n\n##### Description\n\nBase64 encoded OIDC token\n\n#### providerName\n\n> **providerName**: `string`\n\n##### Description\n\nHuman-readable name to identify a Provider.\n\n***\n\n### v1OauthRequest\n\n> **v1OauthRequest**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2082\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1OauthIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_OAUTH\"`\n\n***\n\n### v1OauthResult\n\n> **v1OauthResult**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2091\n\n#### apiKeyId\n\n> **apiKeyId**: `string`\n\n##### Description\n\nUnique identifier for the created API key.\n\n#### credentialBundle\n\n> **credentialBundle**: `string`\n\n##### Description\n\nHPKE encrypted credential bundle\n\n#### userId\n\n> **userId**: `string`\n\n##### Description\n\nUnique identifier for the authenticating User.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Type Definitions\nDESCRIPTION: Defines TypeScript types for activity statuses, types, and related objects including timestamps and votes. Includes comprehensive enums for activity statuses and various activity types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype ActivityStatus = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype ActivityType = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | /* ... many more activity types ... */ \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\ninterface ActivityResult {\n  signRawPayloadsResult: { signatures: object[]; };\n  signTransactionResult: { signedTransaction: string; };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string; };\n  updatePolicyResultV2: { policyId: string; };\n  updatePrivateKeyTagResult: { privateKeyTagId: string; };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string; };\n  updateUserTagResult: { userTagId: string; };\n  updateWalletResult: { walletId: string; };\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPrivateKeysBody Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that maps to the request body parameters for the GetPrivateKeys operation in the PublicApiService. The type is derived from the operations object schema for the POST /public/v1/query/list_private_keys endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetPrivateKeysBody = operations[\"PublicApiService_GetPrivateKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the user email recovery result, which consists of a user ID as a string, ensuring that the response is correctly typed when a user attempts to recover their email.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure in JSON\nDESCRIPTION: This snippet defines the structure for the 'importWalletIntent' which is responsible for initiating a wallet import process. It includes properties for the accounts, encrypted bundle, user ID, and wallet name. The intent requires a user ID and an encrypted wallet bundle for successful execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"importWalletIntent\": { \"accounts\": \"object\"[], \"encryptedBundle\": \"string\", \"userId\": \"string\", \"walletName\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Clearing Iframe from DOM in JavaScript\nDESCRIPTION: Example of how to remove the iframe from the DOM using the clear method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init the IframeStamper\n\niframeStamper.clear();\n```\n\n----------------------------------------\n\nTITLE: Defining TInitOtpAuthResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet shows the definition of the `TInitOtpAuthResponse` type alias. It represents the successful (200) response schema for the `PublicApiService_InitOtpAuth` operation, which is likely an initialization step for OTP authentication within the Turnkey system. The path indicates that this is a generated type definition within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitOtpAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TInitOtpAuthResponse** = `operations`\\[`\"PublicApiService_InitOtpAuth\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Generating Stamp Requests for Organization Operations in TypeScript\nDESCRIPTION: Methods that prepare signed requests for organization management operations like deleting sub-organizations and managing policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteSubOrganization(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePolicy(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enumeration in JavaScript\nDESCRIPTION: This snippet provides a comprehensive string enumeration of activity types, detailing the various operations that can be performed within the SDK, such as creating users, wallets, policies, and handling invitations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUser.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n`type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | ... ;\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletAccountResponse Type in TypeScript\nDESCRIPTION: Type alias that represents the response schema for the wallet account export operation. Maps to the 200 response schema of the PublicApiService_ExportWalletAccount operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TExportWalletAccountResponse = operations[\"PublicApiService_ExportWalletAccount\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TCreateApiKeysInput in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TCreateApiKeysInput, which is an object type used within the SDK to standardize the input structure for creating API keys. It has a body property that references another type, TCreateApiKeysBody, ensuring that the input adheres to a specific schema. This type is located at a specific path within the SDK server codebase.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"// Type Alias: TCreateApiKeysInput\\n\\n> **TCreateApiKeysInput** = `object`\\n\\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:303](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L303)\\n\\n## Properties\\n\\n### body\\n\\n> **body**: [`TCreateApiKeysBody`](TCreateApiKeysBody.mdx)\\n\\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:303](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L303)\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - createAuthenticators\nDESCRIPTION: Type definition for a function that creates authenticators. The function takes an input parameter and returns a Promise containing activity information, authentication details, and various intent configurations for organization management, user operations, and wallet handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createAuthenticators: (input) => Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      // Complex nested intent objects\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserBody Type Alias in TypeScript\nDESCRIPTION: The TRecoverUserBody type alias represents a specific structure used for the 'RecoverUser' operation parameters in the Public API Service. It is defined within the SDK to ensure consistent parameter usage across different API interactions. This type is fundamental for requests made to the endpoint 'POST /public/v1/submit/recover_user'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRecoverUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TRecoverUserBody = `operations`\\[`\\\"PublicApiService_RecoverUser\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure - JSON\nDESCRIPTION: This snippet defines the structure for the OTP authentication intent, which contains parameters for contact information, email and SMS customization, and the type of OTP to be sent. This schema allows for flexible configurations of OTP delivery methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"initOtpAuthIntent\": { \"contact\": \"string\", \"emailCustomization\": { \"appName\": \"string\", \"logoUrl\": \"string\", \"magicLinkTemplate\": \"string\", \"templateId\": \"string\", \"templateVariables\": \"string\" }, \"otpType\": \"string\", \"sendFromEmailAddress\": \"string\", \"sendFromEmailSenderName\": \"string\", \"smsCustomization\": { \"template\": \"string\" }, \"userIdentifier\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Deleting Wallets with SDK TypeScript\nDESCRIPTION: The deleteWallets function accepts an input parameter and returns a Promise that resolves to an object containing information about the activity, including activity approval or rejection capabilities, timestamps, and intent details for various operations. This function supports complex nested structures that handle different organizational and user management tasks, such as creating, deleting, and modifying intent for wallets, policies, and users. It requires an understanding of SDKs, JavaScript Promises, and the organizational structure of the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteWallets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n# Function: deleteWallets()\n\n> **deleteWallets**(`input`): `Promise`<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; ... } };\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication with Turnkey SDK (TS)\nDESCRIPTION: This method handles OTP authentication within the Turnkey SDK. It takes a `TOtpAuthBody` as input and returns a Promise that resolves to an object, representing the outcome of the OTP authentication process. This method is inherited from `TurnkeyServerClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n> **otpAuth**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2049](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2049)\n```\n\n----------------------------------------\n\nTITLE: Using signCreateUsers for WebAuthn Assertions in Turnkey SDK\nDESCRIPTION: The signCreateUsers function requests a WebAuthn assertion and returns a signed CreateUsers request ready to be sent to the Turnkey API. It takes input parameters for user creation and optional credential request options, and returns a Promise containing a signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signCreateUsers: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Class in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the `TurnkeyRequestError` class, which extends the built-in `Error` class, providing additional custom properties and methods specific to HTTP request errors. The class includes a constructor that accepts a `GrpcStatus` type input and methods to manage stack traces. Dependencies include Node.js types for enhanced error handling capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyRequestError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TurnkeyRequestError extends Error {\n  constructor(input: GrpcStatus) {\n    super();\n    // Additional implementation details here\n  }\n  code: number;\n  details: null | any[];\n  static prepareStackTrace?(err: Error, stackTraces: CallSite[]): any;\n  static stackTraceLimit: number;\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Result Structures - TypeScript\nDESCRIPTION: Defines results for signing raw payload, including the signature components 'r', 's', and 'v', as well as handling bulk signing of payloads with an array of signature objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Session Type Alias in Turnkey SDK Browser\nDESCRIPTION: This code snippet defines the `Session` type alias as an object with properties for `expiry`, `organizationId`, `sessionType`, `token`, and `userId`. It specifies the structure of a session object used for authentication and authorization purposes within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/Session.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  \"/**\n   * The shape of a session object.\n   */\n  export type Session = {\n    sessionType: SessionType;\n    userId: string;\n    organizationId: string;\n    expiry: number;\n    token: string;\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Defining TApproveActivityInput Type Alias\nDESCRIPTION: The `TApproveActivityInput` type alias is defined as an object with a `body` property of type `TApproveActivityBody`. This input type is used for approving activities within the Turnkey SDK server. The `TApproveActivityBody` likely contains the data needed to process the approval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TApproveActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TApproveActivityInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Address Formats and Curve Types in TypeScript\nDESCRIPTION: This snippet defines various address formats for different cryptocurrencies and also specifies the curve types that can be used in cryptographic operations. The addresses defined cater to Bitcoin in multiple formats along with other cryptocurrencies, and the curve types indicate the elliptic curves used for keys. This is crucial for ensuring compatibility with various wallet implementations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; `curve`: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n```\n\n----------------------------------------\n\nTITLE: Signing and Deleting OAuth Providers - TypeScript\nDESCRIPTION: The `signDeleteOauthProviders` function is used to request a WebAuthn assertion and receive a signed `DeleteOauthProviders` request. This request can then be POSTed to the Turnkey API for execution. It takes in parameters for the input which is of type `TDeleteOauthProvidersInput` and optional request options of type `TurnkeyCredentialRequestOptions`. The function returns a promise that resolves to a `SignedRequest` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signDeleteOauthProviders(input: TDeleteOauthProvidersInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limits with TurnkeyApi in TypeScript\nDESCRIPTION: A function that sets a local rate limit on the current endpoint for testing purposes with Vivosuite. It accepts a TTestRateLimitsInput parameter and makes a POST request to /tkhq/api/v1/test_rate_limits.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/testRateLimits.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntestRateLimits(`input`): `Promise`<{}>\n```\n\n----------------------------------------\n\nTITLE: Defining Export Private Key Result Structure\nDESCRIPTION: This snippet describes the structure for 'exportPrivateKeyResult', which includes the export bundle containing a private key encrypted for the client and the unique identifier for the private key as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_89\n\nLANGUAGE: json\nCODE:\n```\nresult.exportPrivateKeyResult?\n\\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Regtest P2WPKH Accounts (TypeScript)\nDESCRIPTION: Defines a constant array named `DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS` containing `WalletAccount` objects. This is intended for use with Bitcoin regtest environments utilizing P2WPKH addresses. The array is typed as `WalletAccount[]` and is exported as a constant.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DEFAULT_BITCOIN_REGTEST_P2WPKH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Fetching Verified Sub Organization IDs with SDK Client\nDESCRIPTION: The stampGetVerifiedSubOrgIds method is designed to fetch verified sub-organization IDs with input of TGetVerifiedSubOrgIdsBody. A Promise is returned, resolving to either undefined or a TSignedRequest, ensuring retrieval of verified sub-organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetVerifiedSubOrgIds**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Session in Turnkey Browser SDK\nDESCRIPTION: Method to create a read-only session with specified input parameters. Returns a Promise resolving to an object containing the session details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateReadOnlySession(input: TCreateReadOnlySessionBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Enum and OrganizationData Interface in TypeScript\nDESCRIPTION: TypeScript definitions for operator enum (used in queries and filters) and the organization data structure that represents all organization-related information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1Operator\n\n> **v1Operator**: `\"OPERATOR_EQUAL\"` | `\"OPERATOR_MORE_THAN\"` | `\"OPERATOR_MORE_THAN_OR_EQUAL\"` | `\"OPERATOR_LESS_THAN\"` | `\"OPERATOR_LESS_THAN_OR_EQUAL\"` | `\"OPERATOR_CONTAINS\"` | `\"OPERATOR_NOT_EQUAL\"` | `\"OPERATOR_IN\"` | `\"OPERATOR_NOT_IN\"` | `\"OPERATOR_CONTAINS_ONE\"` | `\"OPERATOR_CONTAINS_ALL\"`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2100\n\n***\n\n### v1OrganizationData\n\n> **v1OrganizationData**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2101\n\n#### features?\n\n> `optional` **features**: `definitions`[`\"v1Feature\"`][]\n\n#### invitations?\n\n> `optional` **invitations**: `definitions`[`\"v1Invitation\"`][]\n\n#### name?\n\n> `optional` **name**: `string`\n\n#### organizationId?\n\n> `optional` **organizationId**: `string`\n\n#### policies?\n\n> `optional` **policies**: `definitions`[`\"v1Policy\"`][]\n\n#### privateKeys?\n\n> `optional` **privateKeys**: `definitions`[`\"v1PrivateKey\"`][]\n\n#### rootQuorum?\n\n> `optional` **rootQuorum**: `definitions`[`\"externaldatav1Quorum\"`]\n\n#### tags?\n\n> `optional` **tags**: `definitions`[`\"datav1Tag\"`][]\n```\n\n----------------------------------------\n\nTITLE: Importing Wallet with Turnkey SDK\nDESCRIPTION: Method to import a cryptocurrency wallet using the Turnkey SDK server, facilitating secure wallet management and integration\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimportWallet(params: ImportWalletParams): Promise<ImportWalletResponse>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create User Tag Request in TypeScript\nDESCRIPTION: This method stamps a request to create a user tag. It takes a TCreateUserTagBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUserTag(input: TCreateUserTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Organization Feature Management Types\nDESCRIPTION: Type definitions for managing organization features with specific feature names and values\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`removeOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified Sub Organization IDs in TypeScript\nDESCRIPTION: The function 'stampGetVerifiedSubOrgIds' fetches verified sub-organization IDs and takes an input of type 'TGetVerifiedSubOrgIdsBody'. It returns a Promise that can resolve to either 'undefined' or 'TSignedRequest'. This function is inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetVerifiedSubOrgIds**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetVerifiedSubOrgIdsBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPoliciesInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias `TGetPoliciesInput` as an object that contains properties related to getting policies. This alias is critical for type checking in TypeScript and ensures consistent structure for API requests related to policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPoliciesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetPoliciesInput = {\\n  body: TGetPoliciesBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1MnemonicLanguage Enum in TypeScript\nDESCRIPTION: TypeScript type definition for supported mnemonic languages, listing all language options available for mnemonic phrase generation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1MnemonicLanguage\n\n> **v1MnemonicLanguage**: `\"MNEMONIC_LANGUAGE_ENGLISH\"` | `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` | `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` | `\"MNEMONIC_LANGUAGE_CZECH\"` | `\"MNEMONIC_LANGUAGE_FRENCH\"` | `\"MNEMONIC_LANGUAGE_ITALIAN\"` | `\"MNEMONIC_LANGUAGE_JAPANESE\"` | `\"MNEMONIC_LANGUAGE_KOREAN\"` | `\"MNEMONIC_LANGUAGE_SPANISH\"`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2046\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Wallet Creation Request | TypeScript\nDESCRIPTION: This TypeScript type alias defines the structure of the request body for the 'CreateWallet' operation in the public API. It's part of the generated services located in the SDK package, specifically designated for handling the creation of wallets through POST requests. The type alias 'TCreateWalletBody' outlines the necessary body parameters required by this API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TCreateWalletBody = operations[\\\"PublicApiService_CreateWallet\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrganizationIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for creating an organization, including organization name, root authenticator details, root email, and root user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateOrganizationIntent = {\n  organizationName: string;\n  rootAuthenticator: {\n    attestation: {\n      authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n      clientExtensionResults: {\n        appid?: boolean;\n        appidExclude?: boolean;\n        credProps?: {\n          rk: boolean;\n        };\n      };\n      id: string;\n      rawId: string;\n      response: {\n        attestationObject: string;\n        authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n        clientDataJson: string;\n        transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n      };\n      type: \"public-key\";\n    };\n    authenticatorName: string;\n    challenge: string;\n    userId: string;\n  };\n  rootEmail: string;\n  rootUserId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single User in TypeScript\nDESCRIPTION: The 'stampGetUser' function retrieves user information based on the input of type 'TGetUserBody'. It returns a Promise resolving to either 'undefined' or a 'TSignedRequest'. This method is inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetUser**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetUserBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Variable Definition: emailAuth Function\nDESCRIPTION: Type definition for the emailAuth constant function that handles email authentication. It returns a Promise containing activity information with capabilities for approval/rejection, timestamps, and various intents related to authentication, organization management, and session handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/emailAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailAuth = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* various intent objects */ }; /* additional properties */ } }>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure - JavaScript\nDESCRIPTION: This snippet defines an intent for initiating OTP-based authentication and includes user contact, OTP type, and customization options for email and SMS notifications, which are vital for secure user verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n`initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateAuthenticatorsBody Type Alias in TypeScript\nDESCRIPTION: Type definition for the request body when creating authenticators through the Turnkey API. It references the body parameters from the PublicApiService_CreateAuthenticators operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateAuthenticatorsBody** = `operations`[`\"PublicApiService_CreateAuthenticators\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletAccountRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a wallet account, including optional address and path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletAccountRequest {\n  address?: string;\n  organizationId: string;\n  path?: string;\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: List User Tags\nDESCRIPTION: Retrieves a list of user tags. Takes an optional TListUserTagsBody input parameter (defaults to empty object) and returns a Promise containing an array of userTags objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nlistUserTags(input): Promise<{ userTags: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting Users in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete users using the Turnkey SDK. It accepts an input of type TDeleteUsersBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteUsers(input: TDeleteUsersBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TDeletePrivateKeysInput\nDESCRIPTION: This snippet defines a type alias named TDeletePrivateKeysInput as an object, which is used in the SDK for structuring the data needed to delete private keys. The alias includes a property 'body' referencing another type that details the structure of the deletion request's body.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TDeletePrivateKeysInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining the updatePolicy Method in TypeScript\nDESCRIPTION: Method declaration for updatePolicy that updates a policy and returns a promise with the response object. Takes a TUpdatePolicyBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_128\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicy(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Read-Only Session Request in TypeScript\nDESCRIPTION: This method stamps a request to create a read-only session. It takes a TCreateReadOnlySessionBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateReadOnlySession(input: TCreateReadOnlySessionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for a Wallet object that contains an ID, name and array of WalletAccount objects. This type is used to represent wallet data structures in the Turnkey React Native SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/Wallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nWallet = object {\n  id: string;\n  name: string;\n  accounts: WalletAccount[];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Default Sui Account with Path Index\nDESCRIPTION: Creates a WalletAccount for Sui blockchain using a specified path index from the Turnkey SDK server helpers. Used for deriving deterministic accounts in a wallet system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultSuiAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultSuiAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Private Keys Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating private keys. It takes an input of type TCreatePrivateKeysBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePrivateKeys(input: TCreatePrivateKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Signing Remove Organization Feature - TypeScript\nDESCRIPTION: The function `signRemoveOrganizationFeature` signs a request for removing an organization feature using WebAuthn assertions. It takes in an input of type `TRemoveOrganizationFeatureInput` and optional `TurnkeyCredentialRequestOptions`, returning a Promise that resolves to a `SignedRequest` type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRemoveOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signRemoveOrganizationFeature = (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Sub-Organization Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a sub-organization. It takes an input of type TCreateSubOrganizationBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateSubOrganization(input: TCreateSubOrganizationBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePolicyIntent Interface in TypeScript\nDESCRIPTION: Interface for updating policy settings including conditions, consensus, effects, and metadata. Contains fields for policy identification and configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n{ policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }\n```\n\n----------------------------------------\n\nTITLE: Stamping Export Wallet Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for exporting a wallet. It takes a TExportWalletBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: User Authentication and Wallet Import Intents in TypeScript\nDESCRIPTION: This snippet defines several intents related to wallet importation and user authentication. It includes definitions for importing wallet data, initiating user email recovery, and OTP (One Time Password) authentication. Each intent contains fields that specify necessary parameters required for the operation, including user IDs and customizable settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n`importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; `initImportPrivateKeyIntent`: { `userId`: `string`; }; `initImportWalletIntent`: { `userId`: `string`; }; `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Initializing WebAuthn Stamper with Turnkey HTTP Client\nDESCRIPTION: Demonstrates how to create a WebAuthn stamper instance and initialize a Turnkey HTTP client with passkey signing capabilities. The stamper requires an rpId parameter which specifies the relying party identifier for WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new WebAuthnStamper({\n  rpId: \"example.com\",\n});\n\n// New HTTP client able to sign with passkeys!\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Storage Key: ReadWriteSession definition\nDESCRIPTION: Defines the 'ReadWriteSession' member of the `StorageKeys` enumeration. It uses the string literal \"@turnkey/read_write_session\" as the key for storing the read/write session in the browser's storage. This key is used to persist user interactions with read/write access.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **ReadWriteSession**: `\"@turnkey/read_write_session\"`\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details in TypeScript\nDESCRIPTION: StampGetUser fetches user details through TGetUserBody input, resulting in a Promise resolving to either undefined or a TSignedRequest. Originates from the TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_115\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetUser(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsInput Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias 'TCreateWalletAccountsInput' as an object with a body property of type 'TCreateWalletAccountsBody'. It's used for the POST request to create wallet accounts in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateWalletAccountsInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Root User Parameters V4 Interface in TypeScript\nDESCRIPTION: This snippet defines the v1RootUserParamsV4 interface, identical to v1RootUserParamsV3 but potentially for future extensions or versioning purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_135\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RootUserParamsV4: object\n\napiKeys: definitions[\"v1ApiKeyParamsV2\"][]\n\nDescription: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\nauthenticators: definitions[\"v1AuthenticatorParamsV2\"][]\n\nDescription: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\noauthProviders: definitions[\"v1OauthProviderParams\"][]\n\nDescription: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.\n```\n\n----------------------------------------\n\nTITLE: Defining Recover User Result Structure in TypeScript\nDESCRIPTION: Defines the structure for user recovery results, including an array of authenticatorIds as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nrecoverUserResult`: \\{ `authenticatorId`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUserResponse Type Alias\nDESCRIPTION: This snippet defines a type alias named TGetUserResponse, which represents the structure of the response received from the 'PublicApiService_GetUser' operation for a successful request (HTTP 200). The alias is derived from a specific schema under the operations and responses of the API service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetUserResponse = operations[\\\"PublicApiService_GetUser\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Result Types in TypeScript\nDESCRIPTION: This snippet defines the TypeScript types for various results returned from signing operations, including signatures and transaction details. It leverages TypeScript's ability to enforce type safety in APIs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Intent Interfaces Definition\nDESCRIPTION: Defines a large set of TypeScript interfaces for different intents including authentication, organization management, user management, wallet operations, and API key management. Each intent type specifies the required parameters and their types for different SDK operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  acceptInvitationIntent: {\n    authenticator: {\n      attestation: {\n        authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n        clientExtensionResults: {\n          appid: boolean;\n          appidExclude: boolean;\n          credProps: {\n            rk: boolean;\n          };\n        };\n        id: string;\n        rawId: string;\n        response: {\n          attestationObject: string;\n          authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n          clientDataJson: string;\n          transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n        };\n        type: \"public-key\";\n      };\n      authenticatorName: string;\n      challenge: string;\n      userId: string;\n    };\n    invitationId: string;\n    userId: string;\n  };\n  // Additional intent definitions...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetWalletAccountBody in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias 'TGetWalletAccountBody' for organizing parameters in requests to the 'PublicApiService_GetWalletAccount'. It requires familiarity with TypeScript's type system and its indexing types. The alias is part of a larger generated services file and is used to structure the parameters for a specific API operation. Inputs and outputs are shaped according to this type structure and its alignment with API documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetWalletAccountBody = `operations`\\[`\\\"PublicApiService_GetWalletAccount\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Suborganization in Turnkey SDK\nDESCRIPTION: Method for creating a new suborganization with specified request parameters. Returns a promise resolving to a CreateSuborgResponse or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSuborg: (request: CreateSuborgRequest) => Promise<undefined | CreateSuborgResponse>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Policy Request in TypeScript\nDESCRIPTION: This method stamps a request to create a single policy. It takes a TCreatePolicyBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePolicy(input: TCreatePolicyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the result of an email recovery process including a userId of type string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: \\{ `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Intents Structure in TypeScript\nDESCRIPTION: This TypeScript snippet declares a set of intentions represented as objects with various properties. These intent objects include operations like importing wallets, initiating OTP authentication, and setting organization features. They serve as a framework for processing actions and require specific string or boolean values for properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n`privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateAuthenticatorsRequest Type\nDESCRIPTION: Defines the structure for the `v1CreateAuthenticatorsRequest` object, representing the request to create authenticators. It includes the `organizationId`, `parameters` (of type `v1CreateAuthenticatorsIntentV2`), `timestampMs`, and `type`. This is the top-level request structure sent to the Coordinator service to create authenticators within a specific organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateAuthenticatorsRequest\n * @property {string} organizationId Unique identifier for a given Organization.\n * @property {definitions[\"v1CreateAuthenticatorsIntentV2\"]} parameters\n * @property {string} timestampMs Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n * @property {(\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\")} type\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Request Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export wallet request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportWalletRequest\n\n> **v1ExportWalletRequest**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1624](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1624)\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1ExportWalletIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_EXPORT_WALLET\"`\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Intent Structure in TypeScript\nDESCRIPTION: This intent outlines the structure needed for a user seeking email recovery, including the email address and expiration time for the recovery link. Customization options for email templates are included.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Response Structure for API Intents in TypeScript\nDESCRIPTION: This snippet defines the structure of a Promise response for various intents, outlining their parameters and data types. It includes types for both success and error cases and is essential for ensuring type safety in API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/otpAuth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\")[]; }; \n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for SDK Response\nDESCRIPTION: This TypeScript snippet defines a type alias named TInitImportPrivateKeyResponse, which represents the response schema for the PublicApiService\\_InitImportPrivateKey operation specifically for the 200 status. It's used to ensure type-safe handling of API responses at the endpoint POST /public/v1/submit/init_import_private_key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitImportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TInitImportPrivateKeyResponse = operations[\\\"PublicApiService_InitImportPrivateKey\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: createPrivateKeys method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates private keys. It takes a `TCreatePrivateKeysBody` object as input and returns a Promise that resolves to an object. It's used for generating and managing private keys within a Turnkey organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createPrivateKeys(input: TurnkeySDKApiTypes.TCreatePrivateKeysBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreatePrivateKeysBody, object & object>(\n            `/turnkey/create_private_keys`,\n            input,\n            \"privateKeys\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Configurations\nDESCRIPTION: Method to retrieve organization-level configurations, including features and quorum settings\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ngetOrganizationConfigs(input): Promise<{ configs: { features: object[]; quorum: { threshold: number; userIds: string[] }; }}>\n```\n\n----------------------------------------\n\nTITLE: Function Signature for defaultBitcoinTestnetP2PKHAccountAtIndex in TypeScript\nDESCRIPTION: Function signature for creating a Bitcoin testnet P2PKH account at a specified index. The function accepts a numeric path index parameter and returns a WalletAccount object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinTestnetP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinTestnetP2PKHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Private Keys with SDK Client\nDESCRIPTION: Through stampGetPrivateKeys, multiple private keys are fetched with input of TGetPrivateKeysBody. The result is a Promise resolving to either undefined or a TSignedRequest, catering to multiple private key retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPrivateKeys**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining the TDeleteInvitationBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the request body structure for the DeleteInvitation API endpoint. It corresponds to the body parameter of the PublicApiService_DeleteInvitation operation accessed via POST /public/v1/submit/delete_invitation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteInvitationBody** = `operations`[`\"PublicApiService_DeleteInvitation\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Response Type Alias in TypeScript\nDESCRIPTION: Type alias that defines the structure of the API key response from the Turnkey Public API Service. Represents the successful response schema for the GET API key endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetApiKeyResponse = operations[\"PublicApiService_GetApiKey\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Intent in JavaScript\nDESCRIPTION: This intent specifies how to update existing policies within the SDK. It includes parameters such as policy condition, effect, and notes, ensuring that policy management is adequately defined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n`updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" \\| \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/sdk-browser package using npm or Yarn\nDESCRIPTION: Commands to install the @turnkey/sdk-browser package using either npm or Yarn package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-browser\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/sdk-browser\n```\n\n----------------------------------------\n\nTITLE: Fetching Current User in Turnkey\nDESCRIPTION: This method retrieves the currently active user. It returns a Promise that resolves to a `User` object if found, or `undefined` if not. The `User` interface is defined in `../interfaces/User.mdx`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Fetches the currently active user.\n */\ngetCurrentUser(): Promise<undefined | User>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intents\nDESCRIPTION: This snippet outlines the intent structures for OTP-based authentication strategies, including settings for both sending and receiving OTPs. Parameters such as contact and emailCustomization are included to tailor the OTP process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntentV2: { alphanumeric: boolean; contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpLength: number; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamping List User Tags Request in TypeScript\nDESCRIPTION: Method to stamp a request for listing user tags. It takes an input of type TListUserTagsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampListUserTags(input: TListUserTagsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining type for addressFormat field\nDESCRIPTION: This snippet defines the type for the `addressFormat` field within `v1WalletAccountParams`. It uses a type alias `definitions` with the key `v1AddressFormat` to specify the address format for generating a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\n> **addressFormat**: `definitions`[`\"v1AddressFormat\"`]\n```\n\n----------------------------------------\n\nTITLE: Wallet Account Type Definition\nDESCRIPTION: Type definition for a WalletAccount object containing address, curve and path information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1WalletAccount = {\n  address: string;\n  addressFormat: definitions[\"v1AddressFormat\"];\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  curve: definitions[\"v1Curve\"];\n  organizationId: string;\n  path: string;\n  pathFormat: definitions[\"v1PathFormat\"];\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n  walletAccountId: string;\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining body Property for TGetWalletsInput - TypeScript\nDESCRIPTION: This snippet outlines the definition of the body property within the TGetWalletsInput type alias, which is expected to conform to the TGetWalletsBody structure. This structured data is essential for sending a valid request to the '/public/v1/query/list_wallets' API endpoint, ensuring that the request includes all necessary parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"// body property\\n// Type: TGetWalletsBody\\n// Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:3947\\n\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Sub Organization IDs - TypeScript SDK\nDESCRIPTION: The getSubOrgIds function is designed to retrieve identifiers for sub-organizations. It takes an input of type TGetSubOrgIdsBody and returns a Promise resolving to an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getSubOrgIds(input): Promise<{ organizationIds: string[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallet Accounts Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting multiple wallet accounts. It takes an input of type TGetWalletAccountsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccounts(input: TGetWalletAccountsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Property body in TDeletePrivateKeysInput\nDESCRIPTION: This snippet details the property 'body' of the TDeletePrivateKeysInput type, which is defined as TDeletePrivateKeysBody. This property is essential for providing the necessary information for the private keys deletion operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePrivateKeysInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"body: TDeletePrivateKeysBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ED25519 Signature Scheme Constant in TypeScript\nDESCRIPTION: Declares a constant that defines the signature scheme identifier for Turnkey API ED25519 signatures. This constant is used throughout the wallet stamper package to specify the signature algorithm.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/variables/SIGNATURE_SCHEME_TK_API_ED25519.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNATURE_SCHEME_TK_API_ED25519: \"SIGNATURE_SCHEME_TK_API_ED25519\" = \"SIGNATURE_SCHEME_TK_API_ED25519\"\n```\n\n----------------------------------------\n\nTITLE: Stamp Init Import Private Key with Turnkey SDK\nDESCRIPTION: This function `stampInitImportPrivateKey` initializes the process of importing a private key using the Turnkey SDK. It takes `TInitImportPrivateKeyBody` as input and returns a Promise resolving to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampInitImportPrivateKey**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2051](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2051)\n\n#### Parameters\n\n##### input\n\n`TInitImportPrivateKeyBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: User Management Types - TypeScript Interface Definitions\nDESCRIPTION: Defines TypeScript interfaces for user management including API-only users and invitations. These types handle user creation and invitation flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateApiOnlyUsersRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateApiOnlyUsersIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This snippet defines a complex TypeScript type that includes various activity types, status enums, and result objects for different API operations in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportPrivateKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPrivateKeyBody Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the body parameters required for the PublicApiService_GetPrivateKey operation. This type is used for making POST requests to /public/v1/query/get_private_key endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetPrivateKeyBody = operations[\"PublicApiService_GetPrivateKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeyResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting a private key, containing a PrivateKey object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPrivateKeyResponse {\n  privateKey: definitions[\"v1PrivateKey\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining type for addresses field\nDESCRIPTION: This snippet defines the type for the `addresses` field within `v1WalletResult`. It is a `string` array representing a list of account addresses associated with a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\n> **addresses**: `string`[]\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiOnlyUsersIntent Type\nDESCRIPTION: Defines the structure for the `v1CreateApiOnlyUsersIntent` object, representing the intent to create API-only users. It contains an array of `v1ApiOnlyUserParams`. This intent is passed as part of a request to the Coordinator service to create new API-only users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiOnlyUsersIntent\n * @property {definitions[\"v1ApiOnlyUserParams\"][]} apiOnlyUsers A list of API-only Users to create.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPrivateKeyResponse Type in TypeScript\nDESCRIPTION: Type alias that represents the response schema for the GET private key endpoint at POST /public/v1/query/get_private_key. Maps to the 200 success response schema from the PublicApiService_GetPrivateKey operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetPrivateKeyResponse = operations[\"PublicApiService_GetPrivateKey\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining the stampUpdateUser Method in TypeScript\nDESCRIPTION: Method declaration for stampUpdateUser that updates a user and returns a promise with the signed request. Takes a TUpdateUserBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_124\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateUser(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for deletePrivateKeys Function\nDESCRIPTION: Type definition for an asynchronous function that handles deletion of private keys. The function accepts an input parameter and returns a complex Promise containing activity details, approval status, timestamps, and various intent configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeletePrivateKeys(input): Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    // ... additional intent configurations\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Activity Type Definitions and Enums in TypeScript\nDESCRIPTION: Defines TypeScript interfaces and enums for activity results, statuses, and types. Includes definitions for activity results like email recovery, OAuth, OTP auth, and various organization management operations. Also defines activity status enums and extensive activity type enums.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nEmailRecoveryResult: { userId: string };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys Intent\nDESCRIPTION: This snippet defines the structure for deleting private keys, allowing for secure management of cryptographic credentials by specifying IDs and optional export requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePrivateKeysIntent? \\n\\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePrivateKeysIntent.deleteWithoutExport? \\n`boolean` \\n\\n**Description** \\nOptional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePrivateKeysIntent.privateKeyIds \\n`string`[] \\n\\n**Description** \\nList of unique identifiers for private keys within an organization.\n```\n\n----------------------------------------\n\nTITLE: SignedRequest Type Definition in TypeScript\nDESCRIPTION: Type alias definition for SignedRequest which represents a signed request ready to be POSTed to Turnkey. This type is deprecated and users should use TSignedRequest instead.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/SignedRequest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSignedRequest = object\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyConsensusNeededError TypeScript Class\nDESCRIPTION: Custom error class for managing Turnkey activities that require consensus, with properties to capture activity ID and status. Provides detailed error handling for consensus-related scenarios in blockchain transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/classes/TurnkeyConsensusNeededError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TurnkeyConsensusNeededError extends BaseError {\n  name = \"TurnkeyConsensusNeededError\";\n  activityId: string | undefined;\n  activityStatus: string | undefined;\n\n  constructor({\n    activityId,\n    activityStatus,\n    message = \"Turnkey activity requires consensus.\"\n  }) {\n    super(message);\n    this.activityId = activityId;\n    this.activityStatus = activityStatus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Result Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for wallet operation results containing wallet ID and associated addresses. This structure represents the response format for wallet-related operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_146\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WalletResult {\n  addresses: string[];\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Import Wallet Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for initializing the process of importing a wallet. Requires user identification to associate the import with a specific user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n{ `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Implementing the updateUserAuth Method in TypeScript\nDESCRIPTION: Method implementation for updateUserAuth that provides comprehensive authentication updates for an end user. It combines add/update and delete operations into a single call, with operations executed in parallel where applicable.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_132\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserAuth(params): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining Update User Tag Result Structure in TypeScript\nDESCRIPTION: Defines the structure for updating user tag results, including userTagId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserTagResult`: \\{ `userTagId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with SDK Browser Client in TypeScript\nDESCRIPTION: This function, `request<TBodyType, TResponseType>(url, body)`, is a generic method to perform HTTP requests. It takes a URL as a string and a request body of type TBodyType, returning a promise of type TResponseType. A key dependency is to ensure the generic types TBodyType and TResponseType are defined at call time. The primary utility is as a flexible request method, returning responses tailored to the given type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **request**<`TBodyType`, `TResponseType`>(`url`, `body`): `Promise`<`TResponseType`>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:37](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L37)\n\n#### Type Parameters\n\n##### TBodyType\n\n`TBodyType`\n\n##### TResponseType\n\n`TResponseType`\n\n#### Parameters\n\n##### url\n\n`string`\n\n##### body\n\n`TBodyType`\n\n#### Returns\n\n`Promise`<`TResponseType`>\n\n\n```\n\n----------------------------------------\n\nTITLE: Stamping Reject Activity Request in TypeScript\nDESCRIPTION: Method signature for stampRejectActivity which prepares a signed request for rejecting an activity. It accepts a TRejectActivityBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_102\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampRejectActivity(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Policy Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a single policy. It takes an input of type TCreatePolicyBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePolicy(input: TCreatePolicyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition - createPrivateKeyTag Function\nDESCRIPTION: Defines the type structure for createPrivateKeyTag function that handles private key tag creation. The type includes extensive nested objects for various intents including organization management, wallet operations, authentication, and policy controls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createPrivateKeyTag: (input) => Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...}; // Large nested object with various intents\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: TApiKeyStamperConfig Type Definition\nDESCRIPTION: TypeScript type definition for the configuration object used to initialize the ApiKeyStamper. It requires apiPublicKey and apiPrivateKey strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntype TApiKeyStamperConfig = {\n  apiPublicKey: string;\n  apiPrivateKey: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript SDK\nDESCRIPTION: This snippet defines a type alias TTestRateLimitsResponse that maps to a predefined API response schema for the 'TestRateLimits' operation in the Turnkey SDK. This alias is used to manage and simplify type management for the response of the /tkhq/api/v1/test_rate_limits POST request. It abstracts the response's expected schema to ensure consistent usage across the codebase.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TTestRateLimitsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TTestRateLimitsResponse = operations[\\\"PublicApiService_TestRateLimits\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Update Policy Method Definition in TypeScript\nDESCRIPTION: Method to update a policy. Takes a TUpdatePolicyBody input parameter and returns a Promise resolving to a combined object type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicy(input: TUpdatePolicyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intents in TypeScript\nDESCRIPTION: This snippet outlines intents for signing transactions and raw payloads within the SDK. It specifies the parameters required for signing transactions, including private key IDs and transaction types. This is essential for ensuring that transactions are signed securely and can be processed on respective blockchains.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n`signTransactionIntent`: { `privateKeyId`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; }; `signTransactionIntentV2`: { `signWith`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Complex Email Authentication Intent\nDESCRIPTION: Focused on email authentication operations, this intent includes parameters for customization based on app-specific data such as logos and templates. Essential for applications requiring flexible email-based authentication with security options like expiration settings. Inputs are custom objects and strings allowing for dynamic email customization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"apiKeyName\\\": \\\"string\\\",\\n  \\\"email\\\": \\\"string\\\",\\n  \\\"emailCustomization\\\": {\\n    \\\"appName\\\": \\\"string\\\",\\n    \\\"logoUrl\\\": \\\"string\\\",\\n    \\\"magicLinkTemplate\\\": \\\"string\\\",\\n    \\\"templateId\\\": \\\"string\\\",\\n    \\\"templateVariables\\\": \\\"string\\\"\\n  },\\n  \\\"expirationSeconds\\\": \\\"string\\\",\\n  \\\"invalidateExisting\\\": \\\"boolean\\\",\\n  \\\"sendFromEmailAddress\\\": \\\"string\\\",\\n  \\\"sendFromEmailSenderName\\\": \\\"string\\\",\\n  \\\"targetPublicKey\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Regtest P2WPKH Account with TypeScript\nDESCRIPTION: Function that generates a Bitcoin regtest P2WPKH wallet account configuration based on a provided numerical path index. Returns a WalletAccount interface object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinRegtestP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinRegtestP2WPKHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitImportWalletRequest type\nDESCRIPTION: Defines the request structure for initializing wallet import, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitImportWalletRequest\n * @memberof definitions\n */\nexport interface v1InitImportWalletRequest {\n  /**\n   * Unique identifier for a given Organization.\n   */\n  organizationId: string;\n  parameters: definitions[\"v1InitImportWalletIntent\"];\n  /**\n   * Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n   */\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\";\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for signTransaction in TypeScript SDK\nDESCRIPTION: The signTransaction function declaration that processes transaction signing requests and returns a Promise containing activity information. It handles multiple types of transaction intents including organization creation, authentication, wallet management, and policy configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signTransaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransaction(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* various intent types omitted for brevity */ }; /* remaining properties omitted for brevity */ } }>\n```\n\n----------------------------------------\n\nTITLE: Session Intent Types - TypeScript\nDESCRIPTION: Type definitions for creating read-only and read-write session intents with API key configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReadWriteSessionIntent = {\n  apiKeyName?: string;\n  email: string;\n  expirationSeconds?: string;\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Users Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get multiple users. Takes a TGetUsersBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetUsers(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Wallet Interface\nDESCRIPTION: Example implementation of a SolanaWalletInterface showing how to sign messages and get public keys using a local Solana wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keypair } from \"@solana/web3.js\";\nimport { decodeUTF8 } from \"tweetnacl-util\";\nimport nacl from \"tweetnacl\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { WalletStamper, SolanaWalletInterface } from \"@turnkey/wallet-stamper\";\n\nclass SolanaWallet implements SolanaWalletInterface {\n  keypair = Keypair.fromSecretKey(SOLANA_PRIVATE_KEY);\n  type = \"solana\" as const;\n\n  async signMessage(message: string): Promise<string> {\n    const messageBytes = decodeUTF8(message);\n    const signature = nacl.sign.detached(messageBytes, this.keypair.secretKey);\n    return Buffer.from(signature).toString(\"hex\");\n  }\n\n  async getPublicKey(): Promise<string> {\n    // Convert the base24 encoded Solana wallet public key (the one displayed in the wallet)\n    // into the ed25519 decoded public key\n    const ed25519PublicKey = Buffer.from(\n      this.keypair.publicKey.toBuffer(),\n    ).toString(\"hex\");\n    return ed25519PublicKey;\n  }\n}\n\n// Instantiate the WalletStamper with the SolanaWallet\nconst walletStamper = new WalletStamper(new SolanaWallet());\n\n// Instantiate the TurnkeyClient with the WalletStamper\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n\n// Call getWhoami to get the sub org's organizationId and userId passing in the parent org id\n// whoami { organizationId: string; organizationName: string; userId: string; username: string; }\nconst whoami = await client.getWhoami({\n  organizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID,\n});\n\n// Now that we have the sub organization id, we can make requests using that sub org id\n\n// Get the wallets for this sub organization\nconst wallets = await client.getWallets({\n  organizationId: whoami.organizationId,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetOrganizationConfigsRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting organization configurations, requiring the organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetOrganizationConfigsRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bitcoin Regtest P2PKH Account at Index in Typescript\nDESCRIPTION: Function that creates a Bitcoin regtest Pay-to-Public-Key-Hash (P2PKH) wallet account at a specified index in the derivation path. It takes a numeric path index and returns a WalletAccount object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinRegtestP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinRegtestP2PKHAccountAtIndex(`pathIndex`): [`WalletAccount`]\n```\n\n----------------------------------------\n\nTITLE: Defining stampGetWallets Method in TypeScript\nDESCRIPTION: Method to create a signed request for getting wallets. Takes a TGetWalletsBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_121\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallets(input: TGetWalletsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining User Tag Update Result Structure - TypeScript\nDESCRIPTION: The `updateUserTagResult` interface encapsulates the result of user tag updates, returning a `userTagId`. This structured response allows for easy tracking of updated user tags within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserTagResult: { userTagId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1RootUserParamsV4 Type\nDESCRIPTION: Defines the structure `v1RootUserParamsV4` as an object type, which contains parameters for creating a root user. It includes properties for API keys (v1ApiKeyParamsV2), authenticators, OAuth providers, user email, user name and user phone number.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n### v1RootUserParamsV4\n\n> **v1RootUserParamsV4**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2369\n\n#### apiKeys\n\n> **apiKeys**: `definitions`[`\"v1ApiKeyParamsV2\"`][]\n\n##### Description\n\nA list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\n#### authenticators\n\n> **authenticators**: `definitions`[`\"v1AuthenticatorParamsV2\"`][]\n\n##### Description\n\nA list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\n#### oauthProviders\n\n> **oauthProviders**: `definitions`[`\"v1OauthProviderParams\"`][]\n\n##### Description\n\nA list of Oauth providers. This field, if not needed, should be an empty array in your request body.\n\n#### userEmail?\n\n> `optional` **userEmail**: `string`\n\n##### Description\n\nThe user's email address.\n\n#### userName\n\n> **userName**: `string`\n\n##### Description\n\nHuman-readable name for a User.\n\n#### userPhoneNumber?\n\n> `optional` **userPhoneNumber**: `string`\n\n##### Description\n\nThe user's phone number in E.164 format e.g. +13214567890\n```\n\n----------------------------------------\n\nTITLE: Defining TApiKeyStamperConfig Type in TypeScript\nDESCRIPTION: Type definition for API key stamper configuration that requires both public and private API keys. Used to configure API authentication for the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/index/type-aliases/TApiKeyStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTApiKeyStamperConfig = object {\n  apiPublicKey: string;\n  apiPrivateKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Users with SDK Client\nDESCRIPTION: Using stampGetUsers, a list of users can be fetched with input of TGetUsersBody. This method returns a Promise resolving to either undefined or a TSignedRequest, enabling multiple user data handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetUsers**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Regtest P2PKH Account\nDESCRIPTION: Creates a default wallet account for Bitcoin Regtest network using a specific path index. Useful for testing and development scenarios with predefined account generation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinRegtestP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultBitcoinRegtestP2PKHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Creating Policies with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: This function `stampCreatePolicies` facilitates the creation of policies from the given input TCreatePoliciesBody, resolved by a promise with TSignedRequest or undefined. It's integral for handling policy definitions within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreatePolicies**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:1024](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1024)\n\n#### Parameters\n\n##### input\n\n`TCreatePoliciesBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadIntentV2 Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadIntentV2` as an object type for signing a raw payload, an updated version of v1SignRawPayloadIntent. It contains properties for encoding, hash function, payload, and `signWith`, used to specify the entity to sign with.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadIntentV2\n\n> **v1SignRawPayloadIntentV2**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2422\n\n#### encoding\n\n> **encoding**: `definitions`[`\"v1PayloadEncoding\"`]\n\n##### Description\n\nEncoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8).\n\n#### hashFunction\n\n> **hashFunction**: `definitions`[`\"v1HashFunction\"`]\n\n##### Description\n\nHash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032.\n\n#### payload\n\n> **payload**: `string`\n\n##### Description\n\nRaw unsigned payload to be signed.\n\n#### signWith\n\n> **signWith**: `string`\n\n##### Description\n\nA Wallet account address, Private Key address, or Private Key identifier.\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Regtest P2TR Account in TypeScript\nDESCRIPTION: Function declaration for creating a Bitcoin regtest P2TR wallet account at a specified path index. Returns a WalletAccount interface type. Located in the turnkey-helpers.ts file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinRegtestP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinRegtestP2TRAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Implementing EthereumWallet Constructor\nDESCRIPTION: Constructor for creating new instances of EthereumWallet class that extends BaseEthereumWallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/EthereumWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew EthereumWallet(): EthereumWallet\n```\n\n----------------------------------------\n\nTITLE: Create Users in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create users using the TurnkeyBrowserClient. It takes a `TCreateUsersBody` as input and returns a Promise that resolves to an object representing the created users. It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> **createUsers**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1299](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1299)\n\n#### Parameters\n\n##### input\n\n`TCreateUsersBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createUsers`](TurnkeyBrowserClient.mdx#createusers)\n```\n\n----------------------------------------\n\nTITLE: Generating Default Bitcoin Signet P2PKH Account in TypeScript\nDESCRIPTION: This function creates a default Bitcoin Signet P2PKH wallet account at a specified index. It takes a numeric path index as input and returns a WalletAccount object. The function is defined in the Turnkey SDK browser package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinSignetP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinSignetP2PKHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Management Intent Structure in TypeScript\nDESCRIPTION: This structure is used to manage features within an organization, with methods to set or remove specific features based on their name, defined as constants.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; };\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Return Type for SDK Function in TypeScript\nDESCRIPTION: This code snippet defines a complex return type for a Promise, including nested objects and arrays with various properties related to user activities, authentication, and organization management. It covers a wide range of intents and actions that can be performed within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: {\n                rk: boolean;\n              };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n              clientDataJson: string;\n              transports: [];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      // ... (other intent types omitted for brevity)\n      importPrivateKeyIntent: {\n        addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];\n        curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n        encryptedBundle: string;\n      };\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Structure - TypeScript\nDESCRIPTION: The `itOtpAuthResultV2` interface is used to define the structure of the OTP authentication result which includes an `otpId` of type string. This interface is intended for use in OTP authentication responses to ensure type safety and clarity of expected data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nitOtpAuthResultV2: { otpId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enums in TypeScript\nDESCRIPTION: Defines an extensive list of activity types as a union type in TypeScript. These types represent various operations that can be performed through the Coordinator Service API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityType =\n  | \"ACTIVITY_TYPE_CREATE_API_KEYS\"\n  | \"ACTIVITY_TYPE_CREATE_USERS\"\n  | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"\n  | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"\n  | \"ACTIVITY_TYPE_CREATE_INVITATIONS\"\n  | \"ACTIVITY_TYPE_ACCEPT_INVITATION\"\n  | \"ACTIVITY_TYPE_CREATE_POLICY\"\n  | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"\n  | \"ACTIVITY_TYPE_DELETE_USERS\"\n  | \"ACTIVITY_TYPE_DELETE_API_KEYS\"\n  | \"ACTIVITY_TYPE_DELETE_INVITATION\"\n  | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\"\n  | \"ACTIVITY_TYPE_DELETE_POLICY\"\n  | \"ACTIVITY_TYPE_CREATE_USER_TAG\"\n  | \"ACTIVITY_TYPE_DELETE_USER_TAGS\"\n  | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\"\n  | \"ACTIVITY_TYPE_SIGN_TRANSACTION\"\n  | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\"\n  | \"ACTIVITY_TYPE_REJECT_ACTIVITY\"\n  | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"\n  | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"\n  | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"\n  | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"\n  | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"\n  | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"\n  | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"\n  | \"ACTIVITY_TYPE_CREATE_POLICY_V2\"\n  | \"ACTIVITY_TYPE_CREATE_POLICY_V3\"\n  | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"\n  | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"\n  | \"ACTIVITY_TYPE_UPDATE_USER_TAG\"\n  | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"\n  | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"\n  | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"\n  | \"ACTIVITY_TYPE_CREATE_USERS_V2\"\n  | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"\n  | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"\n  | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"\n  | \"ACTIVITY_TYPE_UPDATE_USER\"\n  | \"ACTIVITY_TYPE_UPDATE_POLICY\"\n  | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"\n  | \"ACTIVITY_TYPE_CREATE_WALLET\"\n  | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"\n  | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"\n  | \"ACTIVITY_TYPE_RECOVER_USER\"\n  | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"\n  | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"\n  | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"\n  | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"\n  | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"\n  | \"ACTIVITY_TYPE_EXPORT_WALLET\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"\n  | \"ACTIVITY_TYPE_EMAIL_AUTH\"\n  | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"\n  | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"\n  | \"ACTIVITY_TYPE_IMPORT_WALLET\"\n  | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"\n  | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"\n  | \"ACTIVITY_TYPE_CREATE_POLICIES\"\n  | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"\n  | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"\n  | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"\n  | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"\n  | \"ACTIVITY_TYPE_OAUTH\"\n  | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"\n  | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"\n  | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"\n  | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"\n  | \"ACTIVITY_TYPE_DELETE_WALLETS\"\n  | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"\n  | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"\n  | \"ACTIVITY_TYPE_INIT_OTP_AUTH\"\n  | \"ACTIVITY_TYPE_OTP_AUTH\"\n  | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"\n  | \"ACTIVITY_TYPE_UPDATE_WALLET\"\n  | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\"\n  | \"ACTIVITY_TYPE_CREATE_USERS_V3\"\n  | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Capturing Stack Traces in Node.js TypeScript\nDESCRIPTION: Static method definition for Error.captureStackTrace that creates a .stack property on a target object. Takes a target object and optional constructor function as parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Querying User Information with API: TypeScript\nDESCRIPTION: This TypeScript snippet defines the getWhoami function, which queries basic information about the current API or WebAuthN user and their organization. It uses a POST request to the /public/v1/query/whoami endpoint. The function requires input of type TGetWhoamiInput and returns a Promise resolving to an object containing organizationId, organizationName, userId, and username.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getWhoami.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n>\n **getWhoami**(`input`): `Promise`\\<\\{ `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:1196](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L1196)\n\nWho am I?\n\nGet basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n\n`POST /public/v1/query/whoami`\n\n## Parameters\n\n### input\n\n[`TGetWhoamiInput`](../type-aliases/TGetWhoamiInput.mdx)\n\n## Returns\n\n`Promise`\\<\\{ `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Listing Private Key Tags in Turnkey SDK (TS)\nDESCRIPTION: This method retrieves a list of private key tags using the Turnkey SDK. It takes a `TListPrivateKeyTagsBody` as input and returns a Promise that resolves to an object containing an array of private key tag objects. This method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n> **listPrivateKeyTags**(`input`): `Promise`\\<\\{ `privateKeyTags`: `object`[]; \\}\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:548](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L548)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enums in TypeScript\nDESCRIPTION: Defines enums for activity status and types, used to categorize and track the state of various operations within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityStatus = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype ActivityType = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | // ... many other activity types\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagInput Type Interface in TypeScript\nDESCRIPTION: TypeScript type alias definition for the request input when updating user tags through the Turnkey API. The type specifies that the input must be an object containing a body property of type TUpdateUserTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTUpdateUserTagInput = object\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Information\nDESCRIPTION: Method to get detailed information about a specific wallet including creation time, update time, and wallet status flags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWallet(input: TGetWalletBody): Promise<{ wallet: { createdAt: { nanos: string; seconds: string; }; exported: boolean; imported: boolean; updatedAt: { nanos: string; seconds: string; }; walletId: string; walletName: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPoliciesRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get policies for an organization. It includes the organizationId as a required string property.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPoliciesRequest: object\n{\n  organizationId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Type in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of user recovery actions, consisting of an array of authenticator IDs. It provides clarity on the possible responses when a user recovery process is initiated.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n`recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Email Recovery Intent Type Definition\nDESCRIPTION: Type definition for user email recovery intent including email customization options and recovery parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `email`: `string`; \n  `emailCustomization`: { \n    `appName`: `string`; \n    `logoUrl`: `string`; \n    `magicLinkTemplate`: `string`; \n    `templateId`: `string`; \n    `templateVariables`: `string`; \n  }; \n  `expirationSeconds`: `string`; \n  `targetPublicKey`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining type for accounts field\nDESCRIPTION: This snippet defines the type for the `accounts` field within `v1WalletParams`. It's an array of `v1WalletAccountParams`, which defines the structure for a list of wallet accounts associated with a given wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\n> **accounts**: `definitions`[`\"v1WalletAccountParams\"`][]\n```\n\n----------------------------------------\n\nTITLE: Update Root Quorum Method Definition in TypeScript\nDESCRIPTION: Method to update root quorum settings. Takes a TUpdateRootQuorumBody input parameter and returns a Promise resolving to a combined object type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nupdateRootQuorum(input: TUpdateRootQuorumBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Sign Raw Payload Intent V2\nDESCRIPTION: Defines the structure for the `signRawPayloadIntentV2`, which includes the `encoding`, `hashFunction`, and `payload` to be signed.  It uses `signWith` instead of `privateKeyId` for specifying the signing entity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_34\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `encoding`: `\\\"PAYLOAD_ENCODING_HEXADECIMAL\\\"` \\| `\\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"; `hashFunction`: `\\\"HASH_FUNCTION_NO_OP\\\"` \\| `\\\"HASH_FUNCTION_SHA256\\\"` \\| `\\\"HASH_FUNCTION_KECCAK256\\\"` \\| `\\\"HASH_FUNCTION_NOT_APPLICABLE\\\"; `payload`: `string`; `signWith`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: TApiKeyStamperConfig Type Definition in JavaScript\nDESCRIPTION: Type definition for the configuration object required when initializing an ApiKeyStamper instance. It requires both the API public key and private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntype TApiKeyStamperConfig = {\n  apiPublicKey: string;\n  apiPrivateKey: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Details in TypeScript\nDESCRIPTION: stampGetPolicy retrieves individual policy details with TGetPolicyBody input, and outputs a Promise resolving to either undefined or a TSignedRequest. Sources from the TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_111\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPolicy(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyInput Type for Turnkey API in TypeScript\nDESCRIPTION: Type definition for the input parameters of a policy update request. Represents the structure expected by the POST /public/v1/submit/update_policy endpoint. Contains a required body property of type TUpdatePolicyBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdatePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTUpdatePolicyInput = object {\n    body: TUpdatePolicyBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Transaction Intent Structure - JavaScript\nDESCRIPTION: Describes the 'signTransactionIntent' which is used for signing cryptocurrency transactions. It requires specifying the private key identifier and the type of transaction, ensuring authenticity and security in digital asset transfers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n`signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining defaultCosmosAccountAtIndex Function - TypeScript\nDESCRIPTION: The defaultCosmosAccountAtIndex function takes a pathIndex as a parameter and returns a WalletAccount instance. It is used for retrieving specific wallet accounts based on their index in a Cosmos wallet. This function is defined in the turnkey-helpers TypeScript file of the SDK browser package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultCosmosAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultCosmosAccountAtIndex(pathIndex: number): WalletAccount {\n    // function implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining optional onSessionCleared callback\nDESCRIPTION: This defines the optional `onSessionCleared` callback function. It's triggered when a session is cleared, and it receives the cleared session as an argument.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * `optional` **onSessionCleared**: (`session`) => `void`\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:96](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L96)\n *\n * #### Parameters\n *\n * ##### session\n *\n * [`Session`](../type-aliases/Session.mdx)\n *\n * #### Returns\n *\n * `void`\n */\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for User Update\nDESCRIPTION: Defines the interface for updating user information including email, name, phone number and tag associations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_142\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1UpdateUserIntent {\n  userEmail?: string;\n  userId: string;\n  userName?: string;\n  userPhoneNumber?: string;\n  userTagIds?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Approve Activity Request in TypeScript\nDESCRIPTION: This snippet details the structure of an object meant for approving user activities, including organization ID, parameters, and timestamps for request verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1ApproveActivityRequest {\n  organizationId: string;\n  parameters: definitions[\"v1ApproveActivityIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_APPROVE_ACTIVITY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias for the response structure returned by the Create API Keys endpoint in the Turnkey SDK. It references a specific operation and response schema, which is essential for proper type checking in TypeScript applications that interact with this API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateApiKeysResponse = operations[\\\"PublicApiService_CreateApiKeys\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining the v1EmailAuthResult object\nDESCRIPTION: Defines the structure of the v1EmailAuthResult object, representing the result of an email authentication request. It contains the unique identifier for the created API key (apiKeyId) and the unique identifier for the authenticated user (userId). This object is returned by the server after a successful email authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1EmailAuthResult\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1417\n\n#### apiKeyId\n\n> **apiKeyId**: `string`\n\n##### Description\n\nUnique identifier for the created API key.\n\n#### userId\n\n> **userId**: `string`\n\n##### Description\n\nUnique identifier for the authenticating User.\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for v1OauthProvider in Turnkey SDK\nDESCRIPTION: This snippet defines the structure of an OAuth provider object in the Turnkey API, including details like audience, issuer, provider ID, and timestamps.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_114\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1OauthProvider {\n  audience: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  issuer: string;\n  providerId: string;\n  providerName: string;\n  subject: string;\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyActivityError Class in TypeScript\nDESCRIPTION: Declaration of the TurnkeyActivityError class that extends Error with additional properties for tracking activity information. This class includes activity ID, status, type, and an optional cause error, along with custom constructor and inherited error properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TurnkeyActivityError extends Error {\n  activityId: undefined | string;\n  activityStatus: undefined | \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  activityType: undefined | \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | /* many more activity types */ \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  cause: undefined | Error;\n  message: string;\n  \n  constructor(input: {\n    activityId?: string;\n    activityStatus?: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n    activityType?: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | /* many more activity types */ \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n    cause?: Error;\n    message: string;\n  }): TurnkeyActivityError;\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Creation Function Type Definition - TypeScript\nDESCRIPTION: Type definition for createPolicy function that returns a Promise containing activity details and various organization management intents. The function handles multiple versions of intents including organization creation, user management, wallet operations, and authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createPolicy: (input) => Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Type Definition - OAuth Provider Creation Types\nDESCRIPTION: TypeScript interface definitions for creating OAuth providers, including intent, request and result types. Contains fields for user IDs, organization details, and provider parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOauthProvidersIntent {\n  oauthProviders: definitions[\"v1OauthProviderParams\"][];\n  userId: string;\n}\n\ninterface v1CreateOauthProvidersRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateOauthProvidersIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\";\n}\n\ninterface v1CreateOauthProvidersResult {\n  providerIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetAuthenticatorsBody type alias, which represents the body parameters for the PublicApiService_GetAuthenticators operation. It is used for the POST request to /public/v1/query/get_authenticators endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetAuthenticatorsBody = operations[\"PublicApiService_GetAuthenticators\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Input Type\nDESCRIPTION: Type alias that represents the input structure for initializing user email recovery, containing a body property of type TInitUserEmailRecoveryBody\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitUserEmailRecoveryInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TInitUserEmailRecoveryInput = {\n  body: TInitUserEmailRecoveryBody\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Import Wallet Request in TypeScript\nDESCRIPTION: Method signature for stampImportWallet which prepares a signed request for importing a wallet. It accepts a TImportWalletBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining updateRootQuorum Function in JavaScript\nDESCRIPTION: This code snippet defines the updateRootQuorum function which processes various intents related to user and organization management. It returns a promise that resolves to an object detailing the result of the actions performed. The function accepts an 'input' parameter that specifies the intended operation and its required data structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst updateRootQuorum = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE\"; } } }\n```\n\n----------------------------------------\n\nTITLE: Requesting a Signed Delete Wallets Request - TypeScript\nDESCRIPTION: The signDeleteWallets function takes input of type TDeleteWalletsInput and optional request options to generate a signed DeleteWallets request. It returns a Promise that resolves to a SignedRequest object, suitable for posting to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signDeleteWallets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signDeleteWallets(input: TDeleteWalletsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n  // Function implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Signed ListUserTags - TypeScript\nDESCRIPTION: The function `signListUserTags` takes `input` of type `TListUserTagsInput` and optional `options` of type `TurnkeyCredentialRequestOptions`. It requests a WebAuthn assertion and returns a signed `ListUserTags` request as a Promise of type `SignedRequest`. This allows for secure user tag retrieval for POSTing to the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signListUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signListUserTags(input: TListUserTagsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Requesting WebAuthn assertion and signing the request\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Wallets in TypeScript\nDESCRIPTION: Method to delete wallets using the Turnkey Browser SDK. Requires input parameters specifying the wallets to be deleted. Returns a Promise with the operation result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteWallets(input: TDeleteWalletsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: signExportWallet Function Definition\nDESCRIPTION: Defines the `signExportWallet` function, which is responsible for requesting a WebAuthn assertion to sign an `ExportWallet` request. The function takes an input of type `TExportWalletInput` and optional `TurnkeyCredentialRequestOptions`. It returns a Promise that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signExportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **signExportWallet**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n *\n * Defined in: [packages/http/src/\\_\\_generated\\_\\/services/coordinator/public/v1/public\\_api.fetcher.ts:2738](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/\\_\\_generated\\_\\/services/coordinator/public/v1/public_api.fetcher.ts#L2738)\n *\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See ExportWallet\n *\n * @param input\n * [`TExportWalletInput`](../type-aliases/TExportWalletInput.mdx)\n *\n * @param options?\n * `TurnkeyCredentialRequestOptions`\n *\n * @returns `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n */\n```\n\n----------------------------------------\n\nTITLE: Activity Response Type Definition in TypeScript\nDESCRIPTION: Complex TypeScript interface defining the structure of activity responses including various intents for organization management, authentication, and key operations. Includes timestamps, approval states, and nested intent objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      // Intent definitions for various operations\n      acceptInvitationIntent: {...};\n      createOrganizationIntent: {...};\n      createApiKeysIntent: {...};\n      // Additional intent definitions...\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeysResponse Type Alias in TypeScript\nDESCRIPTION: Represents the response schema for creating private keys, dynamically derived from the operations type in the generated API types. Used for strongly typed API interactions in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreatePrivateKeysResponse = operations[\"PublicApiService_CreatePrivateKeys\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Mainnet Accounts TypeScript Constant\nDESCRIPTION: This TypeScript snippet defines a constant named DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS, which is an array of WalletAccount interfaces. It's located in the 'turnkey-helpers.ts' file, and it serves to standardize Bitcoin mainnet P2WPKH account configurations within the SDK. No additional dependencies are explicitly required beyond the WalletAccount interface itself.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticator Details in TypeScript\nDESCRIPTION: Defines the return type for getAuthenticator method, providing comprehensive details about an authenticator including credential information, transports, and metadata\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ngetAuthenticator(): Promise<{\n  authenticator: {\n    aaguid: string;\n    attestationType: string;\n    authenticatorId: string;\n    authenticatorName: string;\n    createdAt: { nanos: string; seconds: string };\n    credential: {\n      publicKey: string;\n      type: \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | \"CREDENTIAL_TYPE_API_KEY_P256\" | ...\n    };\n    credentialId: string;\n    model: string;\n    transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | ...)[];\n    updatedAt: { nanos: string; seconds: string };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policies with SDK Client\nDESCRIPTION: The stampGetPolicies method retrieves a list of organizational policies. The input parameter is of type TGetPoliciesBody, and the Promise returned resolves to either undefined or a TSignedRequest, offering policy data handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPolicies**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Declaring signEmailAuth Function in TypeScript\nDESCRIPTION: Declares the signEmailAuth function, which requests a WebAuthn assertion and returns a signed EmailAuth request. It takes an input of type TEmailAuthInput and optional TurnkeyCredentialRequestOptions, returning a Promise of SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signEmailAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signEmailAuth: (input: TEmailAuthInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Payload for Authentication\nDESCRIPTION: Generates a stamp header for authenticating requests using the Telegram cloud storage context. Produces a stamp header name and value for secure request handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/classes/TelegramCloudStorageStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstamp(payload: string): Promise<{ stampHeaderName: string; stampHeaderValue: string; }>\n```\n\n----------------------------------------\n\nTITLE: Updating Wallet using POST endpoint in Turnkey SDK\nDESCRIPTION: This code snippet defines the endpoint for updating a wallet in an organization. The endpoint accepts an input of type TUpdateWalletInput and is accessible via POST at '/public/v1/submit/update_wallet'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nUpdate Wallet\n\nUpdate a wallet for an organization\n\n`POST /public/v1/submit/update_wallet`\n\n## Parameters\n\n### input\n\n[`TUpdateWalletInput`](../type-aliases/TUpdateWalletInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Deleting Users with Turnkey SDK TypeScript\nDESCRIPTION: This function deletes users using `TDeleteUsersBody` as input. It returns a combined object Promise, managing user records within the broader SDK framework.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteUsers**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Promise Return Type Definition in TypeScript for TurnKey SDK\nDESCRIPTION: Comprehensive TypeScript return type definition for a Promise in the TurnKey SDK. This type includes detailed structures for various activity intents such as invitation management, organization creation, user management, authentication, wallet operations, and policy configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayloads.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; /* many more intent types here */ }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization ID in TurnkeyConfig\nDESCRIPTION: This code snippet defines the `organizationId` property within the `TurnkeyConfig` interface. It represents the unique identifier for the organization using the Turnkey service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * **organizationId**: `string`\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:92](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L92)\n */\n```\n\n----------------------------------------\n\nTITLE: Stamp Reject Activity with Turnkey SDK\nDESCRIPTION: This function `stampRejectActivity` creates a signed request to reject an activity using the Turnkey SDK. It takes `TRejectActivityBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampRejectActivity**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2300](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2300)\n\n#### Parameters\n\n##### input\n\n`TRejectActivityBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: GetApiKey Function Definition in TypeScript\nDESCRIPTION: Function declaration for getApiKey that fetches API key details. It takes a TGetApiKeyInput parameter and returns a Promise containing API key information including ID, name, creation time, credentials, expiration, and update time.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiKey(input): Promise<{ \n  apiKey: { \n    apiKeyId: string; \n    apiKeyName: string; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    credential: { \n      publicKey: string; \n      type: \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | \n            \"CREDENTIAL_TYPE_API_KEY_P256\" | \n            \"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\" | \n            \"CREDENTIAL_TYPE_API_KEY_SECP256K1\" | \n            \"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\" | \n            \"CREDENTIAL_TYPE_API_KEY_ED25519\" | \n            \"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\" | \n            \"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\" | \n            \"CREDENTIAL_TYPE_OAUTH_KEY_P256\"; \n    }; \n    expirationSeconds: string; \n    updatedAt: { \n      nanos: string; \n      seconds: string; \n    }; \n  }; \n}>\n```\n\n----------------------------------------\n\nTITLE: Type Parameter Definition - TypeScript\nDESCRIPTION: Type definition specifying a literal 'local' string type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/createAccountWithAddress.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"local\"\n```\n\n----------------------------------------\n\nTITLE: Defining exportWalletAccount Function Type in TypeScript\nDESCRIPTION: Type definition for the exportWalletAccount function which returns a Promise containing wallet account data including activities, authentication details, and cryptographic information. The function takes an input parameter and handles complex nested data structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst exportWalletAccount: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... complex nested structure ... */ }; /* ... more properties ... */ }; /* ... more properties ... */ }>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetSubOrgIdsResponse Type in TypeScript\nDESCRIPTION: TypeScript type alias that maps to the 200 response schema of the PublicApiService_GetSubOrgIds operation. Used for typing API responses when querying sub-organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetSubOrgIdsResponse = operations[\"PublicApiService_GetSubOrgIds\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Stamping Wallet Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get a specific wallet. Takes a TGetWalletBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallet(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Stamping Payload with stamp Method\nDESCRIPTION: The stamp method takes a payload as a string and returns a Promise containing an object with stampHeaderName and stampHeaderValue. This method is intended for generating stamped headers for API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstamp(payload: string): Promise<{ stampHeaderName: string; stampHeaderValue: string; }>\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntentV4 - JSON Object\nDESCRIPTION: This version introduces wallet configurations and the option to disable email authentication and recovery functions. It allows organizations to tune security and recovery settings while managing financial transactions within the intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Declaring deleteOauthProviders Function in TypeScript\nDESCRIPTION: This snippet declares a constant function named deleteOauthProviders. The function takes an input parameter and returns a Promise that resolves to an object with complex nested structure, including activity details, intent information, and various authentication-related data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deleteOauthProviders: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... large nested object structure ... */ }; /* ... more properties ... */ }; /* ... more properties ... */ }>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enumeration - TypeScript\nDESCRIPTION: This snippet enumerates types of activities that can occur within the SDK, providing identifiable types for API management, user creation, key signing, and more. This is critical for workflow management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... ;\n```\n\n----------------------------------------\n\nTITLE: signImportPrivateKey Function Definition (TypeScript)\nDESCRIPTION: Defines the `signImportPrivateKey` function, responsible for requesting a WebAuthn assertion and returning a signed `ImportPrivateKey` request for the Turnkey platform. It accepts `TImportPrivateKeyInput` and optional `TurnkeyCredentialRequestOptions` as parameters. It returns a promise that resolves to a `SignedRequest` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signImportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * @param `input` [`TImportPrivateKeyInput`](../type-aliases/TImportPrivateKeyInput.mdx)\n * @param `options`? `TurnkeyCredentialRequestOptions`\n *\n * @returns `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n */\nsignImportPrivateKey(`input`, `options`?): `Promise`<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)>\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePrivateKeysIntent Object in TypeScript\nDESCRIPTION: Outlines the parameters for creating private keys, including a list of private key specifications necessary for making secure requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreatePrivateKeysIntent\": {\\n    \"privateKeys\": definitions[\\\"v1PrivateKeyParams\\\"],\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateWalletBody type alias. It represents the body parameters for the create wallet operation in the Turnkey API. The type is derived from the OpenAPI-generated operations object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateWalletBody = operations[\"PublicApiService_CreateWallet\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring signCreateReadOnlySession Function in TypeScript\nDESCRIPTION: This TypeScript declaration defines the signCreateReadOnlySession function which takes input parameters and optional credential request options to generate a signed request for creating a read-only session with Turnkey. The function returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateReadOnlySession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signCreateReadOnlySession: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateAuthenticatorsResponse Type Alias using TypeScript\nDESCRIPTION: This snippet defines a type alias named TCreateAuthenticatorsResponse, which describes the structure of the response received from the 'PublicApiService_CreateAuthenticators' operation. It combines parts of the response schema and a specific activity response definition that are necessary for handling the response in a type-safe manner. Prerequisites include an understanding of TypeScript type definitions and the SDK's API response structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateAuthenticatorsResponse = operations[\"PublicApiService_CreateAuthenticators\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createAuthenticatorsResult\"] & definitions[\"v1ActivityResponse\"];\n```\n\n----------------------------------------\n\nTITLE: Stamp Get API Keys Method\nDESCRIPTION: Method for generating a signed request to get multiple API keys. Takes TGetApiKeysBody input and returns a Promise resolving to undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetApiKeys(input: TGetApiKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating Express Proxy Handler\nDESCRIPTION: This code sets up a middleware for Express applications to handle API requests to the Turnkey API server, automatically signing requests that require root organization credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst turnkeyProxyHandler = turnkey.expressProxyHandler({\n  allowedMethods: [\"createSubOrganization\", \"emailAuth\", \"getSubOrgIds\"],\n});\n\napp.post(\"/apiProxy\", turnkeyProxyHandler);\n\n// this will sign requests made with the client-side `serverSign` function with the root organization's API key for the allowedMethods in the config\n```\n\n----------------------------------------\n\nTITLE: Defining v1RootUserParamsV2 Type\nDESCRIPTION: Defines the structure `v1RootUserParamsV2` as an object type, which contains parameters for creating a root user. It includes properties for API keys, authenticators, OAuth providers, user email, and user name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\n\n\n### v1RootUserParamsV2\n\n> **v1RootUserParamsV2**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2345\n\n#### apiKeys\n\n> **apiKeys**: `definitions`[`\"apiApiKeyParams\"`][]\n\n##### Description\n\nA list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\n#### authenticators\n\n> **authenticators**: `definitions`[`\"v1AuthenticatorParamsV2\"`][]\n\n##### Description\n\nA list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\n#### oauthProviders\n\n> **oauthProviders**: `definitions`[`\"v1OauthProviderParams\"`][]\n\n##### Description\n\nA list of Oauth providers. This field, if not needed, should be an empty array in your request body.\n\n#### userEmail?\n\n> `optional` **userEmail**: `string`\n\n##### Description\n\nThe user's email address.\n\n#### userName\n\n> **userName**: `string`\n\n##### Description\n\nHuman-readable name for a User.\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Provider Deletion Request - TypeScript\nDESCRIPTION: Specifies the request structure for deleting OAuth providers, incorporating organization ID, parameters, and timestamps for structured processing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteOauthProvidersRequest: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1214\n */\nexport interface v1DeleteOauthProvidersRequest {\n  organizationId: string; // Unique identifier for a given Organization.\n  parameters: definitions[\"v1DeleteOauthProvidersIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n  type: \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Activity - TypeScript\nDESCRIPTION: This function retrieves a single activity, utilizing TGetActivityBody for input parameterization, and relies on TSignedRequest for asynchronous promise resolution. Accurate input data is essential.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivity(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias 'TGetPrivateKeysResponse', which represents the structure of a successful (HTTP 200) response for the 'PublicApiService_GetPrivateKeys' operation. This aids in type checking and ensures conformance with the expected API schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetPrivateKeysResponse\" = \\`operations\\`\\[\\\"PublicApiService_GetPrivateKeys\\\"\\]\\[\\\"responses\\\"\\]\\[\\\"200\\\"\\]\\[\\\"schema\\\"\\];\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Intent Interface Definition\nDESCRIPTION: TypeScript interface for email authentication with customization options. Includes parameters for API key naming, email configuration, expiration settings, and encryption details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition - Private Key Model\nDESCRIPTION: Defines the structure for private key objects including addresses, curve type, metadata and associated tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1PrivateKey {\n  addresses: definitions[\"externaldatav1Address\"][];\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  curve: definitions[\"v1Curve\"];\n  exported: boolean;\n  imported: boolean;\n  privateKeyId: string;\n  privateKeyName: string;\n  privateKeyTags: string[];\n  publicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition: WalletAccount\nDESCRIPTION: This code defines the `WalletAccount` interface, which specifies the structure for representing a wallet account within the Turnkey SDK browser package. It includes properties for the elliptic curve used, the derivation path, the path format and the address format of the key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/interfaces/WalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * # Interface: WalletAccount\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:1](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L1)\n */\n\n/**\n * ### curve\n *\n * > **curve**: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:2](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L2)\n *\n */\n\n/**\n * ### pathFormat\n *\n * > **pathFormat**: `\"PATH_FORMAT_BIP32\"`\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:3](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L3)\n *\n */\n\n/**\n * ### path\n *\n * > **path**: `string`\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:4](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L4)\n *\n */\n\n/**\n * ### addressFormat\n *\n * > **addressFormat**: `\"ADDRESS_FORMAT_UNCOMPRESSED\"` \\| `\"ADDRESS_FORMAT_COMPRESSED\"` \\| `\"ADDRESS_FORMAT_ETHEREUM\"` \\| `\"ADDRESS_FORMAT_SOLANA\"` \\| `\"ADDRESS_FORMAT_COSMOS\"` \\| `\"ADDRESS_FORMAT_TRON\"` \\| `\"ADDRESS_FORMAT_SUI\"` \\| `\"ADDRESS_FORMAT_APTOS\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:5](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L5)\n *\n */\n```\n\n----------------------------------------\n\nTITLE: SDK Result Type Definitions\nDESCRIPTION: Comprehensive result type definitions for various organizational operations, including user creation, wallet management, authentication results, and more\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Extensive result type definitions for different organizational operations\n  // Covers results from creating users, wallets, sessions, and other management actions\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ApiKeyStamper with yarn\nDESCRIPTION: Command to install the @turnkey/api-key-stamper package using yarn package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/api-key-stamper\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallet Account Request in TypeScript\nDESCRIPTION: This method creates a signed request to get wallet account information. It takes a TGetWalletAccountBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccount(input: TGetWalletAccountBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Updating User Tags Method\nDESCRIPTION: Method for updating user tags with TUpdateUserTagBody input parameters. Returns a Promise resolving to a composite object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserTag(`input`): `Promise`<`object` & `object`>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagResponse Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias called TCreateUserTagResponse. It represents the response schema for the PublicApiService_CreateUserTag operation with HTTP status code 200. This type is used for handling responses from the POST /public/v1/submit/create_user_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUserTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateUserTagResponse** = `operations`[`\"PublicApiService_CreateUserTag\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Intents and Results in TKHQ SDK\nDESCRIPTION: This snippet defines various TypeScript types for intents and results within the TKHQ SDK.  It includes definitions for operations such as creating and managing organizations, users, API keys, wallets, policies, and authentication methods (OTP, OAuth). The types specify the expected structure and data types for requests and responses within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`OIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; \\}; `setOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}; `organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\};`\n```\n\n----------------------------------------\n\nTITLE: Defining Body Property for Type Alias in TypeScript\nDESCRIPTION: Specifies the body property of the TGetSubOrgIdsInput type, which must conform to the TGetSubOrgIdsBody structure. This property is defined to ensure that all necessary information is included in the request when interacting with the API. Accurate definition of this property is essential for the successful execution of the API call.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"body: TGetSubOrgIdsBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Email Authentication Intent Parameters\nDESCRIPTION: This snippet outlines the structure for the email authentication intent, defining required and optional parameters for initiating email verification and authentication. The parameters include fields for API key name, expiration, and email customization options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n\\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createApiKeys in TypeScript\nDESCRIPTION: The createApiKeys method facilitates the creation of API keys using the input of type TCreateApiKeysBody. It returns a Promise containing an anonymous object. This method helps automate API key generation on the server side.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createApiKeys**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:806](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L806)\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntent - JSON Object\nDESCRIPTION: This JSON object defines the intent to create a sub-organization with attributes like the name, root authenticator details, and other authentication mechanisms. It is essential for setting up a new sub-organization with standard requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Activity Type Enum Definition\nDESCRIPTION: Comprehensive enum of all possible activity types supported by the system, including operations for users, keys, policies, and transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | [...] | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Wallets API Endpoint\nDESCRIPTION: This code snippet defines the API endpoint for deleting wallets in an organization. It specifies the HTTP method, path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nDelete Wallets\n\nDeletes wallets for an organization\n\n`POST /public/v1/submit/delete_wallets`\n\n## Parameters\n\n### input\n\n[`TDeleteWalletsInput`](../type-aliases/TDeleteWalletsInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Wallet Stamper Dependencies\nDESCRIPTION: Command to install the required npm packages for using the Turnkey Wallet Stamper\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/wallet-stamper @turnkey/http\n```\n\n----------------------------------------\n\nTITLE: Authenticator Invitation Acceptance Intent\nDESCRIPTION: Defines the structure for accepting an invitation with WebAuthN authenticator details, including attestation information and user identification\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  authenticator: {\n    attestation: {\n      attestationObject: string;\n      clientDataJson: string;\n      credentialId: string;\n      transports: AuthenticatorTransport[];\n    };\n    authenticatorName: string;\n    challenge: string;\n  };\n  invitationId: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Activity Status and Types in TypeScript\nDESCRIPTION: This code includes definitions of multiple activity types, statuses, and results related to different operations in an SDK environment. These definitions play a critical role in categorizing and managing various actions such as creating API keys, updating policies, signing transactions, etc. The data structure outlines the possible outcomes and current activity statuses, which are essential for managing workflow control and processing states.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n`s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: \"ACTIVITY_STATUS_CREATED\" \\| \"ACTIVITY_STATUS_PENDING\" \\| \"ACTIVITY_STATUS_COMPLETED\" \\| \"ACTIVITY_STATUS_FAILED\" \\| \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \\| \"ACTIVITY_STATUS_REJECTED\"; `type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" \\| \"ACTIVITY_TYPE_CREATE_USERS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \\| \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION\" \\| \"ACTIVITY_TYPE_CREATE_POLICY\" \\| \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_DELETE_USERS\" \\| \"ACTIVITY_TYPE_DELETE_API_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_INVITATION\" \\| \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_DELETE_POLICY\" \\| \"ACTIVITY_TYPE_CREATE_USER_TAG\" \\| \"ACTIVITY_TYPE_DELETE_USER_TAGS\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION\" \\| \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" \\| \"ACTIVITY_TYPE_REJECT_ACTIVITY\" \\| \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" \\| \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V3\" \\| \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" \\| \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" \\| \"ACTIVITY_TYPE_UPDATE_USER_TAG\" \\| \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V2\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" \\| \"ACTIVITY_TYPE_UPDATE_USER\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" \\| \"ACTIVITY_TYPE_CREATE_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" \\| \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" \\| \"ACTIVITY_TYPE_RECOVER_USER\" \\| \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" \\| \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_CREATE_POLICIES\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" \\| \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" \\| \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" \\| \"ACTIVITY_TYPE_OAUTH\" \\| \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_WALLETS\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" \\| \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH\" \\| \"ACTIVITY_TYPE_OTP_AUTH\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" \\| \"ACTIVITY_TYPE_UPDATE_WALLET\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V3\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePolicyResult in TypeScript\nDESCRIPTION: This snippet defines the `updatePolicyResult` type, which includes a `policyId` string that represents the identifier for a policy after an update operation. It is used for managing policy updates in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePolicyResult`: \\{ `policyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for signDeleteWallets Function in Turnkey SDK\nDESCRIPTION: TypeScript type definition for the signDeleteWallets function that requests a WebAuthn assertion and returns a signed DeleteWallets request. This function takes a DeleteWallets input and optional credential request options, and returns a Promise with a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteWallets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeleteWallets: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Status and Type Enums\nDESCRIPTION: Comprehensive type definitions for activity statuses and activity types used throughout the SDK. Includes status values like CREATED, PENDING, etc. and numerous activity types for different operations like key creation, signing, and organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype status = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype type = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Deletion Request - TypeScript\nDESCRIPTION: Outlines the structure of a request to delete authenticators, including organization IDs and associated parameters. This ensures that requests to remove authenticators are well-formed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteAuthenticatorsRequest: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1178\n */\nexport interface v1DeleteAuthenticatorsRequest {\n  organizationId: string; // Unique identifier for a given Organization.\n  parameters: definitions[\"v1DeleteAuthenticatorsIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n  type: \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetOauthProviders Function in TypeScript\nDESCRIPTION: Defines the signGetOauthProviders function that takes an input of type TGetOauthProvidersInput and optional TurnkeyCredentialRequestOptions. It returns a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetOauthProviders: (input: TGetOauthProvidersInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Deleting Wallets in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete wallets using the Turnkey SDK. It accepts an input of type TDeleteWalletsBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteWallets(input: TDeleteWalletsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetVerifiedSubOrgIdsRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get verified sub-organization IDs. It includes optional filter parameters and pagination options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_102\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetVerifiedSubOrgIdsRequest: object\n{\n  filterType?: string\n  filterValue?: string\n  organizationId: string\n  paginationOptions?: definitions[\"v1Pagination\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinTestnetP2WPKHAccountAtIndex Function in TypeScript\nDESCRIPTION: This function, defaultBitcoinTestnetP2WPKHAccountAtIndex, takes a numerical index (pathIndex) as input and returns a WalletAccount for the Bitcoin Testnet P2WPKH account corresponding to that index. It utilizes TypeScript for type safety and ease of development.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinTestnetP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinTestnetP2WPKHAccountAtIndex(pathIndex): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Define TGetPrivateKeysBody Type Alias\nDESCRIPTION: Defines the TGetPrivateKeysBody type alias by omitting 'organizationId' from the parameters of the 'PublicApiService_GetPrivateKeys' operation's request body and intersecting it with 'queryOverrideParams'. This type is used when calling the GetPrivateKeys endpoint and represents the shape of the request body.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetPrivateKeysBody = `Omit`<`operations`[`\"PublicApiService_GetPrivateKeys\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`> & `queryOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Defining TInitImportWalletInput Type Alias\nDESCRIPTION: Defines the structure for initializing the import of a wallet. It includes a property named 'body' of type `TInitImportWalletBody`, which contains the request payload.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitImportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @typedef {object} TInitImportWalletInput\n * @property {TInitImportWalletBody} body\n */\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * **TInitImportWalletInput** = `object`\n */\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n *   **body**: [`TInitImportWalletBody`](TInitImportWalletBody.mdx)\n */\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * `POST /public/v1/submit/init_import_wallet`\n */\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:2959](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2959)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Features Management Result Types in TypeScript\nDESCRIPTION: This snippet includes type definitions for managing organization features, comprising results from setting and removing features. Each type clearly outlines the expected structure of the response, which involves arrays of feature objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n`removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Wallet Result Type Definition\nDESCRIPTION: Type definitions for wallet operation results including addresses and identifiers\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  addresses: string[];\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyAuthenticatorParams Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TurnkeyAuthenticatorParams type alias using the TurnkeyApiTypes utility type. It represents the authenticator parameters expected by the Turnkey API for creating authenticators, users, or sub-organizations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/type-aliases/TurnkeyAuthenticatorParams.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TurnkeyAuthenticatorParams = TurnkeyApiTypes[\"v1AuthenticatorParamsV2\"];\n```\n\n----------------------------------------\n\nTITLE: Defining v1SetOrganizationFeatureIntent Type\nDESCRIPTION: Defines the structure `v1SetOrganizationFeatureIntent` as an object type, which includes properties `name` (of type `v1FeatureName`) and `value` (string) to represent an intent to set an organization feature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SetOrganizationFeatureIntent\n\n> **v1SetOrganizationFeatureIntent**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2393\n\n#### name\n\n> **name**: `definitions`[`\"v1FeatureName\"`]\n\n##### Description\n\nName of the feature to set\n\n#### value\n\n> **value**: `string`\n\n##### Description\n\nOptional value for the feature. Will override existing values if feature is already set.\n```\n\n----------------------------------------\n\nTITLE: Deleting User Tags - TypeScript\nDESCRIPTION: This function is purposed for the deletion of user tags, requiring TDeleteUserTagsBody as input. The function's output is a promise dependent on a correctly formed TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUserTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteWalletsInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteWalletsInput type alias as an object with a single property 'body' of type TDeleteWalletsBody. It is used for the POST request to the /public/v1/submit/delete_wallets endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteWalletsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteWalletsInput = object\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadsInput Type Alias Definition\nDESCRIPTION: Defines the TSignRawPayloadsInput type alias as an object with a 'body' property of type TSignRawPayloadsBody. This type is used as the input for the `POST /public/v1/submit/sign_raw_payloads` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @internal\n */\nexport type TSignRawPayloadsInput = {\n  body: TSignRawPayloadsBody;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Stamp Delete User Tags in TurnkeyBrowserClient\nDESCRIPTION: This TypeScript function `stampDeleteUserTags` is designed to create a signed request for deleting user tags within the Turnkey system. It requires a `TDeleteUserTagsBody` object as input, which details the user tags to be deleted. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, which encapsulates the signed request for the tag deletion process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampDeleteUserTags**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1723](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1723)\n\n#### Parameters\n\n##### input\n\n`TDeleteUserTagsBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampDeleteUserTags`](TurnkeyBrowserClient.mdx#stampdeleteusertags)\n```\n\n----------------------------------------\n\nTITLE: Defining ClearEmbeddedKey Enumeration\nDESCRIPTION: This snippet defines the ClearEmbeddedKey event type in TypeScript, which is used to reset the embedded key in the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nClearEmbeddedKey: \"RESET_EMBEDDED_KEY\"\n```\n\n----------------------------------------\n\nTITLE: SDK Result Types Definition\nDESCRIPTION: Comprehensive TypeScript result type definitions for various SDK operations including user, wallet, organization, and authentication results\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  createWalletResult: {\n    addresses: string[];\n    walletId: string;\n  };\n  importWalletResult: {\n    addresses: string[];\n    walletId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Requests for Tag Management Operations in TypeScript\nDESCRIPTION: Methods for generating signed requests to list private key tags and user tags. These methods prepare authentication for tag-related operations in the Turnkey platform.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampListPrivateKeyTags(input): Promise<undefined | TSignedRequest>\n\nstampListUserTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for OAuth Providers Response\nDESCRIPTION: The code snippet defines a type alias named TGetOauthProvidersResponse, which corresponds to the expected response schema for the 'PublicApiService_GetOauthProviders' endpoint when a successful (200) response is returned. This type alias helps in maintaining type safety throughout the SDK when dealing with the OAuth providers data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetOauthProvidersResponse = operations[\\\"PublicApiService_GetOauthProviders\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining iframeContainer Property\nDESCRIPTION: This snippet defines the iframeContainer property of the TIframeStamperConfig type which can be an HTML element, null, or undefined. This flexibility allows checking whether the container is available in the DOM before attempting to manipulate it.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TIframeStamperConfig.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\niframeContainer: HTMLElement | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: SignedRequest Properties in TypeScript\nDESCRIPTION: Properties of the deprecated SignedRequest type alias, including body (the request content), stamp (authentication/signature information), and url (the endpoint to send the request to).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/SignedRequest.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: string\nstamp: string\nurl: string\n```\n\n----------------------------------------\n\nTITLE: Stamping Create User Tag Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a user tag. It takes an input of type TCreateUserTagBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUserTag(input: TCreateUserTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Updated At Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for the updatedAt timestamp, ensuring that both nanos and seconds are captured as strings for precise timing in operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nupdatedAt: { nanos: string; seconds: string; };\n```\n\n----------------------------------------\n\nTITLE: Using an Existing Passkey with Turnkey HTTP Client in React Native\nDESCRIPTION: This snippet shows how to use an existing passkey with the PasskeyStamper and TurnkeyClient from @turnkey/react-native-passkey-stamper and @turnkey/http respectively. It creates a new HTTP client capable of signing with passkeys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/react-native-passkey-stamper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasskeyStamper } from \"@turnkey/react-native-passkey-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new PasskeyStamper({\n  rpId: \"your.site.com\",\n});\n\n// New HTTP client able to sign with passkeys!\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper\n);\n\n// Now, send authenticated requests\nhttpClient.signTransaction(...)\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadsResult Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadsResult` as an object type representing the result of signing multiple raw payloads. It contains an optional array of `v1SignRawPayloadResult` definitions as signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadsResult\n\n> **v1SignRawPayloadsResult**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2468\n\n#### signatures?\n\n> `optional` **signatures**: `definitions`[`\"v1SignRawPayloadResult\"`][]\n```\n\n----------------------------------------\n\nTITLE: TGetWalletAccountInput Properties Definition\nDESCRIPTION: Property definition for the TGetWalletAccountInput type, specifying the body parameter that contains wallet account request details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetWalletAccountBody\n```\n\n----------------------------------------\n\nTITLE: Organization Creation Intent\nDESCRIPTION: Defines the structure for creating a new organization with root user authentication details, including WebAuthN attestation and organization metadata\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  organizationName: string;\n  rootAuthenticator: {\n    attestation: {\n      authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n      clientExtensionResults: {\n        appid: boolean;\n        appidExclude: boolean;\n        credProps: { rk: boolean };\n      };\n      id: string;\n      rawId: string;\n      response: {\n        attestationObject: string;\n        authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n        clientDataJson: string;\n        transports: AuthenticatorTransport[];\n      };\n      type: \"public-key\";\n    };\n    authenticatorName: string;\n    challenge: string;\n    userId: string;\n  };\n  rootEmail: string;\n  rootUserId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TIframeStamperConfig Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TIframeStamperConfig type alias as an object with three properties: iframeUrl, iframeElementId, and iframeContainer. It specifies the types for each property, including string for URLs and IDs, and HTMLElement, null, or undefined for the container.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/type-aliases/TIframeStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTIframeStamperConfig = object\n\nProperties:\n\niframeUrl: string\n\niframeElementId: string\n\niframeContainer: HTMLElement | null | undefined\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure - TypeScript\nDESCRIPTION: This snippet defines the structure of the Import Wallet intent, capturing necessary parameters such as userId, walletName, and an array of account objects with an encrypted bundle. It is essential for importing existing wallets into the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Transaction Intent Structure in JSON\nDESCRIPTION: This snippet illustrates the intent structure for signing transactions within the wallet. It defines parameters such as `privateKeyId`, `type`, and `unsignedTransaction` to facilitate transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ `signTransactionIntent`: { `privateKeyId`: `string`, `type`: `TRANSACTION_TYPE_ETHEREUM` | `TRANSACTION_TYPE_SOLANA`, `unsignedTransaction`: `string` } }\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS in TypeScript\nDESCRIPTION: This code snippet shows the definition of the DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS constant, which is an array of `WalletAccount` objects. It's defined within the `turnkey-helpers.ts` file of the `@turnkey/sdk-server` package. This variable is likely used to provide default Bitcoin mainnet accounts configured for P2WSH.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst **DEFAULT_BITCOIN_MAINNET_P2WSH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createPolicy in TypeScript\nDESCRIPTION: The createPolicy method creates a single policy using an input of type TCreatePolicyBody, providing a Promise response of an anonymous object. This method is used for specific policy management tasks within the server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createPolicy**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:1004](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L1004)\n```\n\n----------------------------------------\n\nTITLE: Complex TypeScript Interface Definitions for SDK\nDESCRIPTION: Defines intricate type structures for various organizational and authentication intents, including wallet creation, user management, and authentication processes\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  organizationId: string;\n  intent: {\n    // Multiple intent types like createWalletIntent, signTransactionIntent, etc.\n  };\n  result: {\n    // Multiple result types for different organizational operations\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Method Intent - TypeScript\nDESCRIPTION: Specifies the parameters needed for setting a payment method in the cryptocurrency wallet. It includes necessary user information such as the `cardHolderName`, `cvv`, and card expiration details, ensuring secure handling of payment information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodIntent: { cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n```\n\n----------------------------------------\n\nTITLE: Signing Test Rate Limits Request in Typescript\nDESCRIPTION: A function that creates a signed WebAuthn assertion for testing rate limits. It takes input parameters and optional credential request options, returning a Promise with a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTestRateLimits.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signTestRateLimits: (input: TTestRateLimitsInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Running the Managed Optimistic Transaction Script\nDESCRIPTION: Command to execute the script that demonstrates optimistic transaction sending, where multiple transactions are sent at once and retried with higher gas fees if they don't confirm within the specified timeframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-nonce-manager/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start-managed-optimistic\n```\n\n----------------------------------------\n\nTITLE: Parameter Interface for signWithApiKey\nDESCRIPTION: Type definitions for the input parameters of the signWithApiKey function, including content string, private key string, and public key string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/signWithApiKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface input {\n  content: string;\n  privateKey: string;\n  publicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SolanaWalletInterface Type in TypeScript\nDESCRIPTION: Interface definition for Solana wallet interactions that extends BaseWalletInterface. It includes methods for getting public keys and signing messages, with Solana-specific type declarations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/interfaces/SolanaWalletInterface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SolanaWalletInterface extends BaseWalletInterface {\n    getPublicKey(): Promise<string>;\n    signMessage(message: string): Promise<string>;\n    type: Solana;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1RemoveOrganizationFeatureRequest Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for a request to remove an organization feature, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_128\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RemoveOrganizationFeatureRequest: object\n\norganizationId: string\n\nparameters: definitions[\"v1RemoveOrganizationFeatureIntent\"]\n\ntimestampMs: string\n\ntype: \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"\n```\n\n----------------------------------------\n\nTITLE: Exporting a Private Key via HTTP POST\nDESCRIPTION: HTTP endpoint definition for exporting a private key. This endpoint requires proper authentication and uses the TExportPrivateKeyInput type for its request payload.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nPOST /public/v1/submit/export_private_key\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure - TypeScript\nDESCRIPTION: The `oauthResult` interface outlines the structure of the OAuth result, encompassing fields such as `apiKeyId`, `credentialBundle`, and `userId`, all of string type. This interface is crucial for handling OAuth responses accurately in API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for OAuth Response - TypeScript\nDESCRIPTION: This type alias defines the TOauthResponse type according to the schema specified in the SDK's HTTP service definitions. It captures the structure of the successful response for the OAuth submission endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOauthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TOauthResponse** = `operations`[\\\"PublicApiService_Oauth\\\"] [\\\"responses\\\"] [\\\"200\\\"] [\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure - TypeScript\nDESCRIPTION: This snippet defines the recovery result structure for user authentication, which includes an array of authenticator IDs. This is important for systems that use multiple authenticators for account recovery.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Regtest P2PKH Accounts\nDESCRIPTION: This snippet defines a constant variable named DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS, which is an array of WalletAccount objects. This configuration is essential for applications requiring a predefined set of P2PKH accounts in a Bitcoin Regtest environment, facilitating easier wallet management during development and testing. The WalletAccount interface defines the structure expected for each account in the array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining SubOrganizationIntent Object Definition in TypeScript\nDESCRIPTION: Defines the structure for creating a sub-organization, including the name and root authenticator parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nv1CreateSubOrganizationIntent: object\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:914\n\nname: string // Name for this sub-organization.\nrootAuthenticator: definitions[\"v1AuthenticatorParamsV2\"] // Root User authenticator for this new sub-organization.\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Intent Structure in TypeScript\nDESCRIPTION: This snippet provides the structure for updating policies within the SDK, specifying parameters such as policy condition, effect, and identifiers. This facilitates dynamic policy management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"updatePolicyIntent\": { \"policyCondition\": \"string\"; \"policyConsensus\": \"string\"; \"policyEffect\": \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; \"policyId\": \"string\"; \"policyName\": \"string\"; \"policyNotes\": \"string\"; };\n```\n\n----------------------------------------\n\nTITLE: Initialize User Email Recovery\nDESCRIPTION: Starts the user recovery process via email. Takes a TInitUserEmailRecoveryBody input and returns a Promise with object data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitUserEmailRecovery(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Account Creation Intent - TypeScript\nDESCRIPTION: This TypeScript definition outlines the v1CreateWalletAccountsIntent object, which includes a list of wallet accounts and a unique wallet identifier. It is used to initialize requests for creating wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CreateWalletAccountsIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1101\n */\nexport interface v1CreateWalletAccountsIntent {\n  accounts: definitions[\"v1WalletAccountParams\"][];\n  walletId: string; // Unique identifier for a given Wallet.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TOtpAuthBody Type Alias in TypeScript\nDESCRIPTION: Defines the TOtpAuthBody type alias as a combination of OTP authentication operation parameters and command override parameters. It is used in the context of the Turnkey SDK API types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOtpAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TOtpAuthBody = operations[\"PublicApiService_OtpAuth\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePrivateKeyTagIntent Object in TypeScript\nDESCRIPTION: This defines the intent structure for tagging private keys, including the IDs of private keys and the name for the tag, crucial for key management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreatePrivateKeyTagIntent\": {\\n    \"privateKeyIds\": string[],\\n    \"privateKeyTagName\": string\\n}\n```\n\n----------------------------------------\n\nTITLE: Activity Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for activity statuses, types and result objects including email recovery, OAuth, OTP authentication, user management, organization features, payment methods, signing operations and more. Includes timestamps and voting information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteAuthenticators.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[]; };\n  removeOrganizationFeatureResult: { features: object[]; };\n  setOrganizationFeatureResult: { features: object[]; };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n  signRawPayloadResult: { r: string; s: string; v: string; };\n  signRawPayloadsResult: { signatures: object[]; };\n  signTransactionResult: { signedTransaction: string; };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string; };\n  updatePolicyResultV2: { policyId: string; };\n  updatePrivateKeyTagResult: { privateKeyTagId: string; };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string; };\n  updateUserTagResult: { userTagId: string; };\n  updateWalletResult: { walletId: string; };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateWalletAccountsResult Interface in TypeScript\nDESCRIPTION: Defines an interface for the result of creating wallet accounts, including a list of derived addresses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateWalletAccountsResult {\n  addresses: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Elliptic Curve Points in TypeScript\nDESCRIPTION: Function that takes a Uint8Array representing a compressed or uncompressed P-256 public key point and converts it to JsonWebKey format. The function ensures proper padding of x and y components to 32 bytes. Specifically designed for P-256 curve only.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/index/functions/pointDecode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npointDecode(point: Uint8Array): JsonWebKey\n```\n\n----------------------------------------\n\nTITLE: Returning a Complex Promise from SDK\nDESCRIPTION: This TypeScript snippet provides a detailed structure of a promise return within an SDK. It covers a wide variety of user and organization management intents, such as creating API keys, policies, user accounts, wallets, and handling authenticator interactions. Each intent includes specific fields like `userId`, `challenge`, and field variations across intention versions. Major dependencies include TypeScript for type definitions and a JavaScript runtime environment. The expected output is a promise resolving with a detailed object structure. Code constraints involve handling nested and optional fields, and potential null values for fields like `authenticatorAttachment`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUsers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` \\| `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_CZECH\"` \\| `\"MNEMONIC_LANGUAGE_FRENCH\"` \\| `\"MNEMONIC_LANGUAGE_ITALIAN\"` \\| `\"MNEMONIC_LANGUAGE_JAPANESE\"` \\| `\"MNEMONIC_LANGUAGE_KOREAN\"` \\| `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` \\| `\"ADDRESS_FORMAT_COMPRESSED\"` \\| `\"ADDRESS_FORMAT_ETHEREUM\"` \\| `\"ADDRESS_FORMAT_SOLANA\"` \\| `\"ADDRESS_FORMAT_COSMOS\"` \\| `\"ADDRESS_FORMAT_TRON\"` \\| `\"ADDRESS_FORMAT_SUI\"` \\| `\"ADDRESS_FORMAT_APTOS\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining v1PrivateKeyParams type\nDESCRIPTION: Defines the structure for private key parameters, including address formats, cryptographic curve, private key name, and tags. These parameters are used when creating or importing a private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\n            v1PrivateKeyParams: {\n                name: \"v1PrivateKeyParams\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        addressFormats: {\n                            type: \"array\",\n                            items: {\n                                $ref: \"#/definitions/v1AddressFormat\"\n                            },\n                            description: \"Cryptocurrency-specific formats for a derived address (e.g., Ethereum).\",\n                            required: true\n                        },\n                        curve: {\n                            $ref: \"#/definitions/v1Curve\",\n                            description: \"Cryptographic Curve used to generate a given Private Key.\",\n                            required: true\n                        },\n                        privateKeyName: {\n                            type: \"string\",\n                            description: \"Human-readable name for a Private Key.\",\n                            required: true\n                        },\n                        privateKeyTags: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\"\n                            },\n                            description: \"A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.\",\n                            required: true\n                        }\n                    },\n                    required: [\"addressFormats\", \"curve\", \"privateKeyName\", \"privateKeyTags\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines TypeScript types for activity statuses, types, and result structures used in the public API coordinator service. It includes enums for activity statuses and types, and complex object structures for various activity results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/recoverUser.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePrivateKeyTagResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias TUpdatePrivateKeyTagResponse that combines the update private key tag result from the API operation response with the v1ActivityResponse definition. It represents the structure of the response when updating a private key tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePrivateKeyTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TUpdatePrivateKeyTagResponse = operations[\"PublicApiService_UpdatePrivateKeyTag\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"updatePrivateKeyTagResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUserResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing user information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetUserResponse {\n  user: definitions[\"v1User\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InitEmbeddedKey Enumeration\nDESCRIPTION: This snippet defines the InitEmbeddedKey event type in TypeScript, signaling the initialization of an embedded key within the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nInitEmbeddedKey: \"INIT_EMBEDDED_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Generating Bitcoin Regtest P2WSH Account\nDESCRIPTION: Function signature for creating a Bitcoin Regtest P2WSH wallet account at a specified path index. Returns a WalletAccount interface object. Located in the Turnkey SDK server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinRegtestP2WSHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinRegtestP2WSHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Initializing IframeStamper in JavaScript\nDESCRIPTION: Example of how to initialize an IframeStamper instance and insert the iframe into the DOM.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM and returns the public key\nconst publicKey = await iframeStamper.init();\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the request body of the delete authenticators API endpoint. It references the body parameter of the PublicApiService_DeleteAuthenticators operation from the generated API types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteAuthenticatorsBody** = `operations`[`\"PublicApiService_DeleteAuthenticators\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Whoami Request in TypeScript\nDESCRIPTION: Method signature for stampGetWhoami which prepares a signed request for retrieving the current user's identity. It accepts a TGetWhoamiBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWhoami(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining updatePolicyIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for updating policy settings in Turnkey. This intent contains fields for policy identification, behavior configuration, and metadata like names and notes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Importing Wallet\nDESCRIPTION: This code defines an API endpoint for importing a wallet. The endpoint is a POST request to `/public/v1/submit/import_wallet`. The input parameter for this endpoint is defined by the type alias `TImportWalletInput`, suggesting that the request body should conform to the structure defined by that type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`POST /public/v1/submit/import_wallet`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n[`TImportWalletInput`](../type-aliases/TImportWalletInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Interface in TypeScript\nDESCRIPTION: This snippet defines a comprehensive TypeScript interface for an Activity object. It includes various result types for different operations, status options, activity types, and additional properties like timestamps and votes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteWallets.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining testRateLimits function in Typescript\nDESCRIPTION: Defines the `testRateLimits` function, which takes a `TTestRateLimitsInput` as input and returns a Promise that resolves to an empty object. This function is part of the public API and is used for testing rate limits on a specific endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/testRateLimits.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **testRateLimits**: (`input`) => `Promise`<{}>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for HTTP Response\nDESCRIPTION: The type alias TUpdatePrivateKeyTagResponse is used to define the structure of the HTTP response for the PublicApiService's operation of updating private key tags. This is part of a generated service within the SDK which maps directly to a successful (200) response schema of the API. TypeScript is used to ensure type safety and maintain clarity in handling the API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdatePrivateKeyTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TUpdatePrivateKeyTagResponse = `operations`\\[`\\\"PublicApiService_UpdatePrivateKeyTag\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of signing a transaction, which returns the signed transaction as a string. This is crucial for ensuring the integrity of transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Updating User and Organization Features\nDESCRIPTION: This snippet encapsulates intents for updating user and organization settings, including 'updateUserIntent' and 'updateAllowedOriginsIntent'. These structures allow for alterations to user data and permissible origins for API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"updateUserIntent\": { \"userEmail\": \"string\", \"userId\": \"string\", \"userName\": \"string\", \"userPhoneNumber\": \"string\", \"userTagIds\": \"string[]\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"updateAllowedOriginsIntent\": { \"allowedOrigins\": \"string[]\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Return Type for activity Management in TypeScript\nDESCRIPTION: This snippet defines a TypeScript Promise return type for managing activities, including approval, rejection, and failure details. Parameters include user and activity identifiers along with authentication details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateUsersRequest Interface in TypeScript\nDESCRIPTION: Specifies the structure for a request to create users, including organization ID, user parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1CreateUsersRequest: object\n{\n  organizationId: string,\n  parameters: definitions[\"v1CreateUsersIntentV3\"],\n  timestampMs: string,\n  type: \"ACTIVITY_TYPE_CREATE_USERS_V3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetAuthenticator Function in TypeScript\nDESCRIPTION: Declares the signGetAuthenticator function, which requests a WebAuthn assertion and returns a signed GetAuthenticator request. It takes an input of type TGetAuthenticatorInput and optional TurnkeyCredentialRequestOptions, and returns a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetAuthenticator.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetAuthenticator: (input: TGetAuthenticatorInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Updating User Information\nDESCRIPTION: Method for updating user details or attributes. Returns a signed request or undefined. Allows modifications to user profile within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nstampUpdateUser(input: TUpdateUserBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TRecoverUserBody type alias. It combines the parameters from the PublicApiService_RecoverUser operation with command override parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRecoverUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TRecoverUserBody = operations[\"PublicApiService_RecoverUser\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining Updated At Timestamp Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the updatedAt property, which includes nanos and seconds as strings. This structure is crucial for tracking the last update time of various records.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt: { nanos: string; seconds: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysInput Type in TypeScript\nDESCRIPTION: Type alias definition for TDeleteApiKeysInput which specifies the structure of request data for deleting API keys. It includes a body property of type TDeleteApiKeysBody used in the POST /public/v1/submit/delete_api_keys endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteApiKeysInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named TInitImportPrivateKeyResponse. This type represents the schema structure of a successful response (HTTP status 200) from the API operation 'PublicApiService_InitImportPrivateKey'. It helps in ensuring strong typing for the response received when the 'init_import_private_key' API endpoint is called, contributing to better code maintainability and error reduction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitImportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TInitImportPrivateKeyResponse = operations[\\\"PublicApiService_InitImportPrivateKey\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for OAuth Provider Management\nDESCRIPTION: Defines types for creating and managing OAuth providers including provider intents, requests and results. Contains fields for provider parameters and organization details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOauthProvidersIntent {\n  oauthProviders: v1OauthProviderParams[];\n  userId: string;\n}\n\ninterface v1CreateOauthProvidersResult {\n  providerIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Invitations with Promise-based JavaScript Function\nDESCRIPTION: This snippet details a function named 'deleteInvitation' in JavaScript, which returns a promise encapsulating a response structure with extensive data on user and invitation management. The function requires an 'input' parameter and dependency on a promise library. This JSON-like structure forms the expected input, offering a variety of operations including 'acceptInvitation', 'createApiKeys', and 'deleteSubOrganizationIntent'. The function primarily outputs a detailed 'activity' object that describes the action taken and its result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteInvitation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeleteInvitation(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\")[]; \n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Config in Turnkey HTTP SDK (Deprecated)\nDESCRIPTION: A deprecated function that initializes browser configuration with a TBrowserConfig value. This function has been replaced by the TurnkeyClient class which provides better initialization patterns.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/browserInit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbrowserInit(value: TBrowserConfig): void\n```\n\n----------------------------------------\n\nTITLE: Activity Response Type Definition\nDESCRIPTION: TypeScript interface defining the structure of an activity response object that represents actions taken within Turnkey infrastructure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1ActivityResponse {\n  activity: definitions[\"v1Activity\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Private Keys Request in TypeScript\nDESCRIPTION: This method stamps a request to create private keys. It takes a TCreatePrivateKeysBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePrivateKeys(input: TCreatePrivateKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TOtpAuthResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias `TOtpAuthResponse` that combines types from two different structures (operations and definitions) reflecting the schema of an OTP authentication response in the Turnkey SDK. It helps in maintaining type safety when handling API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOtpAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TOtpAuthResponse = operations[\\\"PublicApiService_OtpAuth\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"otpAuthResult\\\"] & definitions[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Project Dependencies\nDESCRIPTION: Commands for cloning the repository, enabling pnpm package manager, installing dependencies and building the project\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-ethers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-ethers/\n```\n\n----------------------------------------\n\nTITLE: Customizing Turnkey Components with TurnkeyThemeProvider\nDESCRIPTION: Demonstrates how to use the TurnkeyThemeProvider to apply custom CSS variables for theming Turnkey components.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TurnkeyThemeProvider } from \"@turnkey/sdk-react\";\n\nconst customTheme = {\n  \"--text-primary\": \"#333333\",\n  \"--button-bg\": \"#4c48ff\",\n  \"--button-hover-bg\": \"#3b38e6\",\n};\n\nexport default function App() {\n  return (\n    <TurnkeyThemeProvider theme={customTheme}>\n      <YourComponent />\n    </TurnkeyThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntentV2 Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntentV2` object. It consists of `rootQuorumThreshold` (number), `rootUsers` (array of objects), and `subOrganizationName` (string).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: The TInitImportPrivateKeyResponse type alias represents a specific schema for handling responses from the PublicApiService's InitImportPrivateKey operation. It includes both the activity result for this operation and the v1ActivityResponse definition. This alias is part of the SDK's generated API types to ensure consistency across response handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitImportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TInitImportPrivateKeyResponse = operations[\\\"PublicApiService_InitImportPrivateKey\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"initImportPrivateKeyResult\\\"] & definitions[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Status Types in TypeScript\nDESCRIPTION: This snippet defines the possible status values for activities in the API, allowing for clear and consistent handling of activity states when interacting with the API. It utilizes TypeScript union types for better type safety.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | ... ;\n```\n\n----------------------------------------\n\nTITLE: Stamp Transaction Signing Methods TypeScript Definitions\nDESCRIPTION: TypeScript method definitions for various transaction signing operations including raw payload signing and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nstampSignRawPayload(input: TSignRawPayloadBody): Promise<undefined | TSignedRequest>\n\nstampSignRawPayloads(input: TSignRawPayloadsBody): Promise<undefined | TSignedRequest>\n\nstampSignTransaction(input: TSignTransactionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining optional onSessionExpired callback\nDESCRIPTION: This code snippet shows the optional `onSessionExpired` callback function defined in the `TurnkeyConfig` interface. This function is called when a Turnkey session expires, providing the expired session object as a parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * `optional` **onSessionExpired**: (`session`) => `void`\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:95](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L95)\n *\n * #### Parameters\n *\n * ##### session\n *\n * [`Session`](../type-aliases/Session.mdx)\n *\n * #### Returns\n *\n * `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Successful Token Transfer Confirmation in Solana\nDESCRIPTION: This snippet shows the success message after a token transfer is completed, including a link to the transaction on the Solana explorer.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nBroadcasting token transfer transaction...\nTransaction broadcast and confirmed! 🎉\n\thttps://explorer.solana.com/tx/GQa4uqoS2zU9uGsGuzMBAq4UmR4dYPXAWgfS4cHQ5Lmqdwb3pKwXrEc4jGHEaZLCyZmCZWErsaPWecN8udkBXaT?cluster=devnet\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiOnlyUsersResponse Type Alias in TypeScript\nDESCRIPTION: This type alias defines the response schema for the API endpoint that creates API-only users. It refers to the schema of the 200 (success) response for the PublicApiService_CreateApiOnlyUsers operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateApiOnlyUsersResponse** = `operations`[`\"PublicApiService_CreateApiOnlyUsers\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines an extensive list of activity types and their corresponding result structures. It includes various operations like creating API keys, users, policies, wallets, and performing authentication and signing transactions. The structure uses TypeScript types and unions to define the possible values and shapes of the data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createSubOrganization.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Component in React\nDESCRIPTION: Sets up the Auth component from @turnkey/sdk-react with various authentication methods and configuration options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Auth } from \"@turnkey/sdk-react\";\nimport { toast } from \"sonner\";\n\nfunction AuthPage() {\n  const handleAuthSuccess = () => {\n    console.log(\"Auth successful!\");\n  };\n\n  const handleAuthError = (errorMessage: string) => {\n    toast.error(errorMessage);\n  };\n\n  const authConfig = {\n    emailEnabled: true,\n    passkeyEnabled: true,\n    phoneEnabled: false,\n    googleEnabled: true,\n    appleEnabled: false,\n    facebookEnabled: false,\n    sessionLengthSeconds: 3600, //1 hour r/w session\n  };\n\n  const configOrder = [\"socials\", \"email\", \"phone\", \"passkey\"];\n\n  return (\n    <Auth\n      authConfig={authConfig}\n      configOrder={configOrder}\n      onAuthSuccess={handleAuthSuccess}\n      onError={handleAuthError}\n    />\n  );\n}\n\nexport default AuthPage;\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeyTagResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePrivateKeyTagResponse type alias. It represents the response schema for the 'PublicApiService_CreatePrivateKeyTag' operation, specifically the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePrivateKeyTagResponse = operations[\"PublicApiService_CreatePrivateKeyTag\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Sign Raw Payloads Intent\nDESCRIPTION: Specifies the data structure for the `signRawPayloadsIntent`, used for signing multiple raw payloads. It includes `encoding`, `hashFunction`, `payloads`, and `signWith`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_35\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `encoding`: `\\\"PAYLOAD_ENCODING_HEXADECIMAL\\\"` \\| `\\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"; `hashFunction`: `\\\"HASH_FUNCTION_NO_OP\\\"` \\| `\\\"HASH_FUNCTION_SHA256\\\"` \\| `\\\"HASH_FUNCTION_KECCAK256\\\"` \\| `\\\"HASH_FUNCTION_NOT_APPLICABLE\\\"; `payloads`: `string`[]; `signWith`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivityBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the request body parameters for the PublicApiService_GetActivity operation. This type is used when making POST requests to /public/v1/query/get_activity endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetActivityBody = operations[\"PublicApiService_GetActivity\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitOtpAuthRequest type\nDESCRIPTION: Defines the structure for the request to initialize OTP authentication, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitOtpAuthRequest\n * @memberof definitions\n */\nexport interface v1InitOtpAuthRequest {\n  /**\n   * Unique identifier for a given Organization.\n   */\n  organizationId: string;\n  parameters: definitions[\"v1InitOtpAuthIntentV2\"];\n  /**\n   * Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n   */\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Policy Function Type Definition\nDESCRIPTION: TypeScript interface definition for the deletePolicy function, which returns a Promise containing activity status and various intent objects for policy management. The function handles policy deletion and related authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeletePolicy(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteSubOrganizationRequest Structure in TypeScript\nDESCRIPTION: Defines the request structure for deleting a sub-organization, which requires the organization ID, parameters of type 'v1DeleteSubOrganizationIntent', and a timestamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteSubOrganizationRequest {\n    organizationId: string;\n    parameters: definitions[\"v1DeleteSubOrganizationIntent\"];\n    timestampMs: string;\n    type: \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPrivateKeyInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters of the GET private key endpoint. Used for POST requests to /public/v1/query/get_private_key. Contains a body property of type TGetPrivateKeyBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetPrivateKeyInput = object {\n  body: TGetPrivateKeyBody\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebAuthn Assertions with Turnkey API in TypeScript\nDESCRIPTION: This code snippet defines a function `signGetApiKeys` that requests a WebAuthn assertion and returns a signed `GetApiKeys` request. The function is designed to work with Turnkey's API and is asynchronous, returning a promise that resolves to a `SignedRequest`. Key parameters include `input`, which should conform to `TGetApiKeysInput` type, and optional `options` of `TurnkeyCredentialRequestOptions` type. There are no external dependencies beyond the type and interface definitions in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signGetApiKeys**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\\n\\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:138](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L138)\\n\\nRequest a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Signing Turnkey API WebAuthn Request in TypeScript\nDESCRIPTION: This function creates a WebAuthn assertion request to obtain organization details from the Turnkey API. It takes an input parameter of type TGetOrganizationInput and optional TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest, which can be POSTed to Turnkey. Dependencies include a correct setup with Turnkey credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signGetOrganization**(`input`, `options`?): `Promise`\\u003c[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\u003e\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticators with TurnkeySDK in TypeScript\nDESCRIPTION: Method for creating a signed request to generate authenticators. Takes a TCreateAuthenticatorsBody input parameter and returns a promise with either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nstampCreateAuthenticators(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intent and Result Types in TypeScript\nDESCRIPTION: Type definition for a complex SDK structure containing multiple intent and result types for various authentication and organization management operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePolicy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Status and Type Definitions\nDESCRIPTION: Defines TypeScript types for activity statuses and various activity types used in the SDK, including operation results like signing transactions, creating users, managing policies, and handling authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportPrivateKey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Testnet P2WPKH Accounts in JavaScript\nDESCRIPTION: This snippet defines a constant named DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS that holds an array of WalletAccount objects, providing a standard set of accounts for developers working with Bitcoin Testnet. This helps streamline wallet operations during testing phases.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst DEFAULT_BITCOIN_TESTNET_P2WPKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: This TypeScript snippet defines various types representing the outcomes of different user, organizational, and policy activities within an SDK. Dependencies include a TypeScript runtime and knowledge of object-oriented programming in JavaScript or TypeScript. Key properties such as userId, apiKeyId, and policyId are used to uniquely identify activities. This code provides a structured approach for handling and categorizing activity results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}\n```\n\n----------------------------------------\n\nTITLE: Creating Sub Organizations in TypeScript SDK\nDESCRIPTION: The 'stampCreateSubOrganization' function is for creating sub-organizations, accepting 'TCreateSubOrganizationBody' as input and returning a Promise resolving to a TSignedRequest, leveraging inheritance from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateSubOrganization**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Authentication Result Types\nDESCRIPTION: Provides TypeScript type definitions for various result types associated with authentication, user management, and organizational activities\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  otpId: string;\n  initUserEmailRecoveryResult: { userId: string; };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n  recoverUserResult: { authenticatorId: string[]; };\n  removeOrganizationFeatureResult: { features: object[]; };\n  setOrganizationFeatureResult: { features: object[]; };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n  signRawPayloadResult: { r: string; s: string; v: string; };\n  signRawPayloadsResult: { signatures: object[]; };\n  signTransactionResult: { signedTransaction: string; };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string; };\n  updatePolicyResultV2: { policyId: string; };\n  updatePrivateKeyTagResult: { privateKeyTagId: string; };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string; };\n  updateUserTagResult: { userTagId: string; };\n  updateWalletResult: { walletId: string; };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Request Method Definition for TurnkeyEIP1193Provider\nDESCRIPTION: This code defines the custom request method for the TurnkeyEIP1193Provider. It uses the EIP1193RequestFn type with an extended set of methods that includes standard EIP-1474 methods plus the eth_signTypedData_v4 method for typed data signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/eip-1193-provider/index/type-aliases/TurnkeyEIP1193Provider.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n**request**: `EIP1193RequestFn`\\<\\[`...EIP1474Methods`, \\{ `Method`: `\"eth_signTypedData_v4\"`; `Parameters`: \\[`Address`, `TypedDataDefinition`\\]; `ReturnType`: `Promise`\\<`Hash`\\>; \\}\\]\\>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateWallet Response Type in TypeScript\nDESCRIPTION: Type alias representing the successful response structure for wallet creation, mapped from the PublicApiService_CreateWallet operations schema\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateWalletResponse = operations[\"PublicApiService_CreateWallet\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Invitation in TypeScript\nDESCRIPTION: The `deleteInvitation` function handles the deletion of a specific invitation by accepting an input of type `TDeleteInvitationBody` and returns a Promise resolving to an object with confirmation of the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteInvitation(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the oauthResult API response, outlining properties like apiKeyId, credentialBundle, and userId, all as strings. It specifies what data is returned when OAuth operations are performed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Environment File Setup\nDESCRIPTION: Command to create a local environment configuration file from template\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-cosmjs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Signet P2PKH Accounts Constant in TypeScript\nDESCRIPTION: This TypeScript snippet defines a constant, `DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS`, as an array of `WalletAccount`. It is intended to be used within the SDK for operations on Bitcoin Signet network and is defined in the file located at `packages/sdk-browser/src/turnkey-helpers.ts`. No external dependencies are mentioned. This constant is likely expected to be used internally within the SDK for specific Bitcoin-related functionalities, and its structure is crucial for interacting with the defined accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Defining CloudStorageAPIKey Type Alias\nDESCRIPTION: This snippet defines a type alias named `CloudStorageAPIKey`, which represents an object containing API keys for cloud storage access. It is part of a TypeScript module and includes specific properties for private and public keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/type-aliases/CloudStorageAPIKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloudStorageAPIKey = {\n  apiPrivateKey: string;\n  apiPublicKey: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response\nDESCRIPTION: This snippet defines a TypeScript type alias for the API response of the 'set_organization_feature' operation. It ensures that the response data adheres to a specified structure as defined in the API documentation. The type is utilized within the SDK to enhance type safety when consuming the API response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TSetOrganizationFeatureResponse = operations[\\\"PublicApiService_SetOrganizationFeature\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for SDK Operations\nDESCRIPTION: Extensive type definitions specifying the structure of request/response objects for SDK operations including wallet management, authentication, organization features, and transaction signing. Includes detailed type definitions for various address formats, curves, and operation parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUserTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nT_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"][]; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; privateKeyName: string; userId: string; }; importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; }; initImportPrivateKeyIntent: { userId: string; }; initImportWalletIntent: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Initializing Private Key Import in TypeScript\nDESCRIPTION: This snippet describes an API endpoint for initializing a private key import operation. It specifies the HTTP method, path, and expected input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportPrivateKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Init Import Private Key\n *\n * Initializes a new private key import\n *\n * POST /public/v1/submit/init_import_private_key\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TInitImportPrivateKeyInput`](../type-aliases/TInitImportPrivateKeyInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript Type Alias for API Parameters\nDESCRIPTION: This TypeScript code snippet defines a type alias named TGetOrganizationConfigsBody. It uses the Omit utility type to exclude the 'organizationId' field from a specific set of API operation parameters, and combines it with queryOverrideParams. This structure is used for interacting with the SDK's API to fetch organization configuration details. Dependencies include the necessary types and operations from the SDK's generated API types. No explicit inputs or outputs are defined beyond the type structure itself.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOrganizationConfigsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetOrganizationConfigsBody = Omit<operations[\\\"PublicApiService_GetOrganizationConfigs\\\"]\\[\\\"parameters\\\"]\\[\\\"body\\\"]\\[\\\"body\\\"\\], \\\"organizationId\\\"> & queryOverrideParams\"\n```\n\n----------------------------------------\n\nTITLE: Type Definition: createPolicies Function\nDESCRIPTION: TypeScript type definition for createPolicies function that returns a Promise containing activity and intent information. The function handles various intents including policy creation, authentication, organization management, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst createPolicies: (input) => Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Intent\nDESCRIPTION: This snippet provides the structure for creating a wallet within the SDK, including parameters for accounts and wallet properties such as name and mnemonic length.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletIntent? \\n\\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletIntent.accounts \\n`object`[] \\n\\n**Description** \\nA list of wallet Accounts. This field, if not needed, should be an empty array in your request body.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletIntent.mnemonicLength? \\n`number` \\nFormat: int32 \\n\\n**Description** \\nLength of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletIntent.walletName \\n`string` \\n\\n**Description** \\nHuman-readable name for a Wallet.\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntentV5 - JSON Object\nDESCRIPTION: In this intent version, configurations focus on disabling email-based functions while maintaining wallet and user settings. This setup enhances the intent's flexibility in adopting or bypassing email-centric features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Schema for getActivity in TypeScript\nDESCRIPTION: This snippet defines the return type for the getActivity function as a Promise containing a comprehensive object schema detailing all available activities and intents. It encapsulates user permissions, invitation intents, organization management, and policy crafting functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivity() {\n    return new Promise<{ activity: {\n        canApprove: boolean;\n        canReject: boolean;\n        createdAt: {\n            nanos: string;\n            seconds: string;\n        };\n        failure: {\n            code: number;\n            details: object & object[];\n            message: string;\n        };\n        fingerprint: string;\n        id: string;\n        intent: {\n            acceptInvitationIntent: {\n                authenticator: {\n                    attestation: {\n                        authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n                        clientExtensionResults: {\n                            appid: boolean;\n                            appidExclude: boolean;\n                            credProps: {\n                                rk: ...;\n                            }; \n                        };\n                        id: string;\n                        rawId: string;\n                        response: {\n                            attestationObject: string;\n                            authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n                            clientDataJson: string;\n                            transports: ...[];\n                        };\n                        type: \"public-key\";\n                    };\n                    authenticatorName: string;\n                    challenge: string;\n                    userId: string;\n                };\n                invitationId: string;\n                userId: string;\n            };\n            // More intents follow...\n        }\n    }}> {\n        // Implementation code...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Parameters Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for wallet creation parameters including account configurations, mnemonic length settings, and wallet naming. The interface specifies required and optional parameters for wallet initialization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WalletParams {\n  accounts: definitions[\"v1WalletAccountParams\"][];\n  mnemonicLength?: number;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Links for Turnkey SDK\nDESCRIPTION: Navigation breadcrumb structure using markdown links to show the path through SDK documentation to the createPolicies method documentation\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createPolicies\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Deletion Intent - TypeScript\nDESCRIPTION: Defines the structure for the intent to delete API keys, including user ID and a list of API key IDs to be removed. This is essential for managing API key lifecycle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteApiKeysIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1153\n */\nexport interface v1DeleteApiKeysIntent {\n  apiKeyIds: string[]; // A list of API Key IDs.\n  userId: string; // Unique identifier for a given User.\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Policy - TypeScript SDK\nDESCRIPTION: The getPolicy function is used to retrieve details about a specific policy, using an input type of TGetPolicyBody. It returns a Promise with a detailed object representing the policy information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getPolicy(input): Promise<{ policy: { ... }; }>\"\n```\n\n----------------------------------------\n\nTITLE: Using signCreatePrivateKeys Function in TypeScript\nDESCRIPTION: This function requests a WebAuthn assertion and returns a signed CreatePrivateKeys request that can be sent to Turnkey's API. It takes a TCreatePrivateKeysInput object and optional TurnkeyCredentialRequestOptions, returning a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreatePrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signCreatePrivateKeys: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating the Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file for storing Turnkey API credentials and Sui wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sui/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for an API Key, including fields for unique identifiers, credentials, and optional expiration details. It uses external definitions for timestamps and credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ApiKey**: `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:485\n\n#### apiKeyId\n\n> **apiKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given API Key.\n\n#### apiKeyName\n\n> **apiKeyName**: `string`\n\n##### Description\n\nHuman-readable name for an API Key.\n\n#### createdAt\n\n> **createdAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n\n#### credential\n\n> **credential**: `definitions`[`\"externaldatav1Credential\"`]\n\n##### Description\n\nA User credential that can be used to authenticate to Turnkey.\n\n#### expirationSeconds?\n\n> `optional` **expirationSeconds**: `string`\n\nFormat: uint64\n\n##### Description\n\nOptional window (in seconds) indicating how long the API Key should last.\n\n#### updatedAt\n\n> **updatedAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationResponse Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for the response structure of the delete sub-organization API endpoint. The type is extracted from the operations object, specifically targeting the 200 response schema of the PublicApiService_DeleteSubOrganization operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteSubOrganizationResponse** = `operations`[`\"PublicApiService_DeleteSubOrganization\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserInput Type Alias\nDESCRIPTION: This code defines the `TUpdateUserInput` type alias as an object with a `body` property of type `TUpdateUserBody`. This type is used as input for updating a user via the Turnkey API's `POST /public/v1/submit/update_user` endpoint. The file path indicates it's part of the auto-generated HTTP client.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TUpdateUserInput\n */\n\n/**\n * `POST /public/v1/submit/update_user`\n */\n\nexport type TUpdateUserInput = object & {\n  body: TUpdateUserBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOauthProvidersRequest Type - TypeScript\nDESCRIPTION: Defines the type for creating OAuth providers, including parameters for organization ID and the request timestamp. This type ensures that all necessary information is included for processing the request correctly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOauthProvidersRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateOauthProvidersIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Structure in TypeScript\nDESCRIPTION: This snippet defines the structure of an API Key object, including essential fields such as apiKeyId and apiKeyName. It serves as a proof of concept for accessing and utilizing API keys securely within the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1ApiKey {\n  apiKeyId: string;\n  apiKeyName: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  credential: definitions[\"externaldatav1Credential\"];\n  expirationSeconds?: string; // format: uint64\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1RecoverUserIntent Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for user recovery intent, including the new authenticator to register and the user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_122\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RecoverUserIntent: object\n\nauthenticator: definitions[\"v1AuthenticatorParamsV2\"]\n\nuserId: string\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Mainnet P2WPKH Accounts in TypeScript\nDESCRIPTION: This snippet defines a constant named DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS, which is an array of WalletAccount objects representing default wallet configurations required for Bitcoin transactions on the mainnet. This is part of the Turnkey SDK's TypeScript codebase, specifically for managing and interfacing with Bitcoin wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2WPKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Initiate Wallet Import - TypeScript SDK\nDESCRIPTION: Initiates wallet import procedure using `TInitImportWalletBody` for inputs, returning a structured object within a Promise. Inherited from the `TurnkeySDKClientBase` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitImportWallet(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Delete Private Keys in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete private keys using the TurnkeyBrowserClient. It takes a `TDeletePrivateKeysBody` as input and returns a Promise that resolves to an object.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> **deletePrivateKeys**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1629](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1629)\n\n#### Parameters\n\n##### input\n\n`TDeletePrivateKeysBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`deletePrivateKeys`](TurnkeyBrowserClient.mdx#deleteprivatekeys)\n```\n\n----------------------------------------\n\nTITLE: Defining type v1WebAuthnStamp\nDESCRIPTION: This snippet defines the type `v1WebAuthnStamp` as an object. This type represents the data associated with a WebAuthn authentication process, including authenticator data, client data, credential ID, and signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1WebAuthnStamp**: `object`\n```\n\n----------------------------------------\n\nTITLE: Consensus Policy Configuration\nDESCRIPTION: Example JSON configuration for a consensus-related policy requiring multiple approvers\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-ethers/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect\": \"EFFECT_ALLOW\",\n  \"consensus\": \"approvers.count() >= 2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy - TypeScript\nDESCRIPTION: This function allows the deletion of policies. It requires TDeletePolicyBody as input and returns a promise. The key dependency is TSignedRequest for the outcome. Ensure input data is precise to avoid processing errors.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeletePolicy(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Creating User Tag Intents\nDESCRIPTION: This snippet constructs the intent necessary for managing user tags, including parameters for user IDs and tag names, aiding in user organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUserTagIntent? \\n\\{ `userIds`: `string`[]; `userTagName`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUserTagIntent.userIds \\n`string`[] \\n\\n**Description** \\nA list of User IDs.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUserTagIntent.userTagName \\n`string` \\n\\n**Description** \\nHuman-readable name for a User Tag.\n```\n\n----------------------------------------\n\nTITLE: Refreshing Session in JavaScript\nDESCRIPTION: Example of using TurnkeyBrowserClient to refresh an existing, active session and extend its expiry.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Refresh the current session\nconst refreshedSession = await browserClient.refreshSession({\n  sessionType: \"READ_WRITE\",\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: TGetVerifiedSubOrgIdsInput Type Alias Definition\nDESCRIPTION: Defines the `TGetVerifiedSubOrgIdsInput` type alias as an object with a `body` property. The `body` property is of type `TGetVerifiedSubOrgIdsBody`, likely containing the parameters required for the API call.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetVerifiedSubOrgIdsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetVerifiedSubOrgIdsInput** = `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:3869\n\n`POST /public/v1/query/list_verified_suborgs`\n\n## Properties\n\n### body\n\n> **body**: [`TGetVerifiedSubOrgIdsBody`](TGetVerifiedSubOrgIdsBody.mdx)\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:3870\n```\n\n----------------------------------------\n\nTITLE: Deleting a Policy in TypeScript\nDESCRIPTION: The `deletePolicy` function allows for the removal of a specified policy by accepting an input parameter of type `TDeletePolicyBody`. It returns a Promise that resolves to an object confirming the deletion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ndeletePolicy(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Stamping Export Wallet Account Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for exporting a wallet account. It takes a TExportWalletAccountBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportWalletAccount(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptInvitationIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for accepting an invitation, including authenticator details, invitation ID, and user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype AcceptInvitationIntent = {\n  authenticator: {\n    attestation: {\n      response: {\n        clientDataJson: string;\n        transports?: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n      };\n      type: \"public-key\";\n    };\n    authenticatorName: string;\n    challenge: string;\n    userId: string;\n  };\n  invitationId: string;\n  userId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the TGetPrivateKeyInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias `TGetPrivateKeyInput` as an object to be used in the API request body for retrieving a private key. The type indicates that the body property should conform to `TGetPrivateKeyBody`, enhancing type safety during API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetPrivateKeyInput = {\\n    body: TGetPrivateKeyBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Specifying TOtpAuthInput Properties in TypeScript\nDESCRIPTION: Defines the body property of TOtpAuthInput, which is of type TOtpAuthBody. This structure is used to pass OTP authentication data in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOtpAuthInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TOtpAuthBody\n```\n\n----------------------------------------\n\nTITLE: Properties of TCreateReadWriteSessionInput Type in TypeScript\nDESCRIPTION: The TCreateReadWriteSessionInput type has a single property 'body' of type TCreateReadWriteSessionBody that contains the parameters needed to create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadWriteSessionInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The request body for creating a read-write session\n */\nbody: [`TCreateReadWriteSessionBody`](TCreateReadWriteSessionBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TImportPrivateKeyResponse in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TImportPrivateKeyResponse, which combines multiple types from different schemas to create a comprehensive type representing the response from the 'ImportPrivateKey' operation. The alias derives its structure from both operation responses and general activity response definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TImportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TImportPrivateKeyResponse = operations[`\\\"PublicApiService_ImportPrivateKey\\\"`][`\\\"responses\\\"`][`\\\"200\\\"`][`\\\"schema\\\"`][`\\\"activity\\\"`][`\\\"result\\\"`][`\\\"importPrivateKeyResult\\\"`] & definitions[`\\\"v1ActivityResponse\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Wallet Account Export Response\nDESCRIPTION: This snippet defines a type alias named 'TExportWalletAccountResponse', which is used to strongly type the response of the 'export_wallet_account' API call. This type is primarily used to ensure that the structure of the response conforms to the expected schema defined by the service. It is necessary for TypeScript to maintain type safety across the API implementations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TExportWalletAccountResponse = operations[\\\"PublicApiService_ExportWalletAccount\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Creation Intent in TypeScript\nDESCRIPTION: This snippet outlines the expected structure for creating API keys within the SDK. It includes properties for API key name and expiration, ensuring proper control and management of API keys linked to user actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateApiKeysResult: { apiKeyIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Creating Bitcoin Signet P2TR Account in TypeScript\nDESCRIPTION: Function that generates a Bitcoin Signet P2TR account at a specified path index. It takes a numeric index parameter and returns a WalletAccount object with the appropriate path configuration for a Bitcoin Taproot address on the Signet test network.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinSignetP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinSignetP2TRAccountAtIndex(`pathIndex`): [`WalletAccount`]\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Result Structure in TypeScript\nDESCRIPTION: This snippet defines the result structure for signing a raw payload, which includes three strings: r, s, and v, critical for returning cryptographic signature data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and build the source code. This prepares the environment for running the Sui example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sui/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-sui/\n```\n\n----------------------------------------\n\nTITLE: Defining signListUserTags Function in Turnkey SDK (TypeScript)\nDESCRIPTION: This code snippet shows the definition of the `signListUserTags` function within the Turnkey SDK. The function accepts an input of type `TListUserTagsInput` and optional `TurnkeyCredentialRequestOptions`. It returns a `Promise` that resolves to a `SignedRequest`, which represents a signed request to list user tags, suitable for posting to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signListUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signListUserTags**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Updating Root Quorum Method\nDESCRIPTION: Method for updating root quorum settings with TUpdateRootQuorumBody input. Returns a Promise resolving to a composite object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nupdateRootQuorum(`input`): `Promise`<`object` & `object`>\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyApiTypes type alias in Typescript\nDESCRIPTION: This code defines a type alias `TurnkeyApiTypes` as an object. It serves as a container for grouping related type definitions used throughout the Turnkey API, such as API key parameters and billing-related types. This promotes organization and reusability of type definitions within the codebase.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport type TurnkeyApiTypes = {\n  /**\n   * API key parameters.\n   */\n  apiApiKeyParams: ApiApiKeyParams;\n\n  /**\n   * Intent to activate a billing tier.\n   */\n  billingActivateBillingTierIntent: BillingActivateBillingTierIntent;\n  /**\n   * Result of activating a billing tier.\n   */\n  billingActivateBillingTierResult: BillingActivateBillingTierResult;\n\n  /**\n   * Intent to delete a payment method.\n   */\n  billingDeletePaymentMethodIntent: BillingDeletePaymentMethodIntent;\n  /**\n   * Result of deleting a payment method.\n   */\n  billingDeletePaymentMethodResult: BillingDeletePaymentMethodResult;\n\n  /**\n   * Intent to set a payment method.\n   */\n  billingSetPaymentMethodIntent: BillingSetPaymentMethodIntent;\n  /**\n   * Intent to set a payment method (version 2).\n   */\n  billingSetPaymentMethodIntentV2: BillingSetPaymentMethodIntentV2;\n  /**\n   * Result of setting a payment method.\n   */\n  billingSetPaymentMethodResult: BillingSetPaymentMethodResult;\n\n  /**\n   * Data v1 tag.\n   */\n  datav1Tag: Datav1Tag;\n\n  /**\n   * External data v1 address.\n   */\n  externaldatav1Address: Externaldatav1Address;\n  /**\n   * External data v1 credential.\n   */\n  externaldatav1Credential: Externaldatav1Credential;\n  /**\n   * External data v1 quorum.\n   */\n  externaldatav1Quorum: Externaldatav1Quorum;\n  /**\n   * External data v1 timestamp.\n   */\n  externaldatav1Timestamp: Externaldatav1Timestamp;\n\n  /**\n   * Immutable activity v1 address.\n   */\n  immutableactivityv1Address: Immutableactivityv1Address;\n\n  /**\n   * Protobuf Any.\n   */\n  protobufAny: ProtobufAny;\n  /**\n   * RPC Status.\n   */\n  rpcStatus: RpcStatus;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TGetWalletsBody in TypeScript\nDESCRIPTION: The code defines a TypeScript type alias 'TGetWalletsBody'. It is created by omitting the 'organizationId' from the 'body' parameters of the 'PublicApiService_GetWallets' operation and merging with 'queryOverrideParams'. This alias is used to customize API request bodies. No additional dependencies are required. The input is a subset of the API operation parameters, and the output is a type alias used internally within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetWalletsBody = Omit<operations[\\\"PublicApiService_GetWallets\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"], \\\"organizationId\\\"> & queryOverrideParams\"\n```\n\n----------------------------------------\n\nTITLE: Defining defaultSeiAccountAtIndex Function\nDESCRIPTION: The `defaultSeiAccountAtIndex` function takes a `pathIndex` (number) as input and returns a `WalletAccount` object. This function likely generates or retrieves a default Sei account based on the provided index, which could be part of a hierarchical deterministic (HD) wallet path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultSeiAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: defaultSeiAccountAtIndex()\n *\n * > **defaultSeiAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:446](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L446)\n *\n * ## Parameters\n *\n * ### pathIndex\n *\n * `number`\n *\n * ## Returns\n *\n * [`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorsInput type alias\nDESCRIPTION: Defines the `TGetAuthenticatorsInput` type alias as an object with a `body` property of type `TGetAuthenticatorsBody`. This type is used as input for the `get_authenticators` API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TGetAuthenticatorsInput\n *\n * > **TGetAuthenticatorsInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1570\n *\n * `POST /public/v1/query/get_authenticators`\n *\n * ## Properties\n *\n * ### body\n *\n * > **body**: [`TGetAuthenticatorsBody`](TGetAuthenticatorsBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1571\n */\n```\n\n----------------------------------------\n\nTITLE: Sub-Organization Intent V1 Interface Definition\nDESCRIPTION: Defines the structure for creating a sub-organization with a root authenticator and basic organization properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  name: string;\n  rootAuthenticator: {\n    attestation: {\n      attestationObject: string;\n      clientDataJson: string;\n      credentialId: string;\n      transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n    };\n    authenticatorName: string;\n    challenge: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying TDeleteUserTagsInput Properties in TypeScript\nDESCRIPTION: Defines the 'body' property of TDeleteUserTagsInput, which is of type TDeleteUserTagsBody. This structure is used to provide the necessary data for deleting user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteUserTagsBody\n```\n\n----------------------------------------\n\nTITLE: Deleting Users in TypeScript\nDESCRIPTION: A method for deleting multiple users within the Turnkey system, accepting input parameters of type TDeleteUsersBody and returning a promise with an object result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteUsers(input: TDeleteUsersBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining the v1EmailAuthIntentV2 object\nDESCRIPTION: Defines the structure of the v1EmailAuthIntentV2 object. This object is used as part of the email authentication process, containing information like the user's email, API key name, email customization options, expiration time, whether to invalidate existing API keys, custom email addresses and names to send from, and the target public key for encrypting credentials. All of these are sent to the server to authorize an user via email.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1EmailAuthIntentV2\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1390\n\n#### apiKeyName?\n\n> `optional` **apiKeyName**: `string`\n\n##### Description\n\nOptional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>\n\n#### email\n\n> **email**: `string`\n\n##### Description\n\nEmail of the authenticating user.\n\n#### emailCustomization?\n\n> `optional` **emailCustomization**: `definitions`[\\\"v1EmailCustomizationParams\\\"]\n\n##### Description\n\nOptional parameters for customizing emails. If not provided, the default email will be used.\n\n#### expirationSeconds?\n\n> `optional` **expirationSeconds**: `string`\n\n##### Description\n\nExpiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used.\n\n#### invalidateExisting?\n\n> `optional` **invalidateExisting**: `boolean`\n\n##### Description\n\nInvalidate all other previously generated Email Auth API keys\n\n#### sendFromEmailAddress?\n\n> `optional` **sendFromEmailAddress**: `string`\n\n##### Description\n\nOptional custom email address from which to send the email\n\n#### sendFromEmailSenderName?\n\n> `optional` **sendFromEmailSenderName**: `string`\n\n##### Description\n\nOptional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Result Structure - TypeScript\nDESCRIPTION: Defines the structure for updating a wallet which includes a walletId as a string. This structure is critical for managing wallet updates in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for initializing an OTP authentication intent which includes properties such as `contact`, `sendFromEmailAddress`, and an object for email customization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Template\nDESCRIPTION: Command to create a local environment file for storing API keys and other configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Statuses and Types in TypeScript\nDESCRIPTION: This snippet defines the possible status values and types for activities in the Turnkey SDK. It includes various operation types such as creating API keys, users, policies, and performing wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload Endpoint Definition in TypeScript\nDESCRIPTION: Defines the HTTP POST endpoint for signing a raw payload through the Turnkey coordinator service. This endpoint requires a TSignRawPayloadInput parameter and is located at '/public/v1/submit/sign_raw_payload'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayload.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nSign Raw Payload\n\nSign a raw payload\n\n`POST /public/v1/submit/sign_raw_payload`\n\n## Parameters\n\n### input\n\n[`TSignRawPayloadInput`](../type-aliases/TSignRawPayloadInput.mdx)\n\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration Template\nDESCRIPTION: Command to create a local environment configuration file from the example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/oauth/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Testing Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for testing rate limits. These methods allow for testing API rate limiting behavior.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_131\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampTestRateLimits(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntestRateLimits(input): Promise<{}>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Parameters - V2\nDESCRIPTION: This snippet expands on the OTP authentication parameters by introducing versioning and additional configuration options, such as specifying alphanumeric OTP codes and extensible email customization attributes. Includes defaults for various parameters to enhance flexibility.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alphanumeric\": \"boolean\",\n  \"contact\": \"string\",\n  \"emailCustomization\": {\n    \"appName\": \"string\",\n    \"logoUrl\": \"string\",\n    \"magicLinkTemplate\": \"string\",\n    \"templateId\": \"string\",\n    \"templateVariables\": \"string\"\n  },\n  \"otpLength\": \"number\",\n  \"otpType\": \"string\",\n  \"sendFromEmailAddress\": \"string\",\n  \"sendFromEmailSenderName\": \"string\",\n  \"smsCustomization\": {\n    \"template\": \"string\"\n  },\n  \"userIdentifier\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structure of Create Wallet\nDESCRIPTION: This snippet defines the createWalletResult structure, which includes a list of account addresses and a unique wallet identifier, both formatted as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_73\n\nLANGUAGE: json\nCODE:\n```\nresult.createWalletResult?\n\\{ `addresses`: `string`[]; `walletId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeyTagBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePrivateKeyTagBody type alias. It is derived from the body parameter of the PublicApiService_CreatePrivateKeyTag operation in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePrivateKeyTagBody = operations[\"PublicApiService_CreatePrivateKeyTag\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Accounts Result Structure\nDESCRIPTION: This snippet describes the structure for 'createWalletAccountsResult', which encapsulates a list of derived addresses formatted as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_72\n\nLANGUAGE: json\nCODE:\n```\nresult.createWalletAccountsResult?\n\\{ `addresses`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: ApiPublicKey Property\nDESCRIPTION: Defines the public API key as a string property of the ApiKeyStamper class. This property can be used in scenarios that expose the public API key for interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napiPublicKey: string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compressed Public Key in TypeScript\nDESCRIPTION: Function signature for getCompressedPublicKey that takes a signature in 0x-prefixed hex format and a message string as input, returning a Promise that resolves to a string containing the compressed public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/functions/getCompressedPublicKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCompressedPublicKey(signature: `0x${string}`, message: string): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: getPolicy() function definition\nDESCRIPTION: The `getPolicy` function is defined within the `public_api.fetcher.ts` file. It accepts a `TGetPolicyInput` object as input and returns a Promise that resolves to an object containing the policy details. The policy details include the condition, consensus, creation and update timestamps, effect, notes, policy ID, and policy name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getPolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\n\n/**\n * Function: getPolicy()\n *\n * > **getPolicy**(`input`): `Promise`\\<\\{ `policy`: \\{ `condition`: `string`; `consensus`: `string`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `effect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `notes`: `string`; `policyId`: `string`; `policyName`: `string`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; \\}; \\}\\>\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:482](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L482)\n *\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TGetPolicyInput`](../type-aliases/TGetPolicyInput.mdx)\n *\n * ## Returns\n *\n * `Promise`\\<\\{ `policy`: \\{ `condition`: `string`; `consensus`: `string`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `effect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `notes`: `string`; `policyId`: `string`; `policyName`: `string`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; \\}; \\}\\>\n */\n```\n\n----------------------------------------\n\nTITLE: TCreateWalletAccountsInput Property Definition\nDESCRIPTION: Property definition for the body field within the TCreateWalletAccountsInput type, which must be of type TCreateWalletAccountsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletAccountsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TCreateWalletAccountsBody\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Private Key Tag Body\nDESCRIPTION: This snippet creates a type alias for the private key tag body parameters that are required by the PublicApiService for creating a key tag. It includes operations parameters and command override parameters, ensuring that the shape and type of the data being sent are properly enforced.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePrivateKeyTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreatePrivateKeyTagBody = operations[\\\"PublicApiService_CreatePrivateKeyTag\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntent Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntent` object, including properties like `name` and `rootAuthenticator`. The `rootAuthenticator` includes nested objects for `attestation`, `authenticatorName`, and `challenge`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_8\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\\\"AUTHENTICATOR_TRANSPORT_BLE\\\"` | `\\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\"` | `\\\"AUTHENTICATOR_TRANSPORT_NFC\\\"` | `\\\"AUTHENTICATOR_TRANSPORT_USB\\\"` | `\\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin RegTest P2WSH Accounts\nDESCRIPTION: This snippet defines a constant variable `DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS` which is an array of `WalletAccount` objects, intended for use in Bitcoin RegTest scenarios. It enables developers to have predefined wallet accounts for testing purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2WSH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeysRequest Structure in TypeScript\nDESCRIPTION: Defines the request structure for deleting private keys, requiring the organization ID, parameters of type 'v1DeletePrivateKeysIntent', and a timestamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePrivateKeysRequest {\n    organizationId: string;\n    parameters: definitions[\"v1DeletePrivateKeysIntent\"];\n    timestampMs: string;\n    type: \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteOauthProvidersRequest Structure in TypeScript\nDESCRIPTION: Defines the request structure for deleting OAuth providers, including organization ID and request timestamp. It requires parameters of type 'v1DeleteOauthProvidersIntent' representing the intent of the delete operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteOauthProvidersRequest {\n    organizationId: string;\n    parameters: definitions[\"v1DeleteOauthProvidersIntent\"];\n    timestampMs: string;\n    type: \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPrivateKeysInput Type Alias\nDESCRIPTION: Defines the TGetPrivateKeysInput type alias as an object with a 'body' property of type TGetPrivateKeysBody. This is used as input for the `POST /public/v1/query/list_private_keys` API endpoint within the Turnkey SDK's HTTP module. It specifies the expected structure for the request body when querying for a list of private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TGetPrivateKeysInput\n *\n * > **TGetPrivateKeysInput** = `object`\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:847](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L847)\n *\n * `POST /public/v1/query/list_private_keys`\n */\n\n/**\n * ### body\n *\n * > **body**: [`TGetPrivateKeysBody`](TGetPrivateKeysBody.mdx)\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:847](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L847)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Intent and Result Types in SDK Configuration\nDESCRIPTION: This snippet provides a TypeScript object structure representing different 'intent' and 'result' types for managing operations in the SDK, such as importing keys, setting features, or authenticating users. Dependencies include the TypeScript language for type definitions and any SDK dependencies that require these structures. The intended inputs are operation-specific details like strings or objects, and the expected output is a well-defined object representing a specific task or result. Notably, this schema lacks explicit methods, focusing instead on the structure of data exchanged with the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: \\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\" \\| \\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\" \\| \\\"FEATURE_NAME_EMAIL_AUTH\\\" \\| \\\"FEATURE_NAME_EMAIL_RECOVERY\\\" \\| \\\"FEATURE_NAME_WEBHOOK\\\" \\| \\\"FEATURE_NAME_SMS_AUTH\\\" \\| \\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"; \\}; `setOrganizationFeatureIntent`: \\{ `name`: \\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\" \\| \\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\" \\| \\\"FEATURE_NAME_EMAIL_AUTH\\\" \\| \\\"FEATURE_NAME_EMAIL_RECOVERY\\\" \\| \\\"FEATURE_NAME_WEBHOOK\\\" \\| \\\"FEATURE_NAME_SMS_AUTH\\\" \\| \\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: \\\"PAYLOAD_ENCODING_HEXADECIMAL\\\" \\| \\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"; `hashFunction`: \\\"HASH_FUNCTION_NO_OP\\\" \\| \\\"HASH_FUNCTION_SHA256\\\" \\| \\\"HASH_FUNCTION_KECCAK256\\\" \\| \\\"HASH_FUNCTION_NOT_APPLICABLE\\\"; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: \\\"PAYLOAD_ENCODING_HEXADECIMAL\\\" \\| \\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"; `hashFunction`: \\\"HASH_FUNCTION_NO_OP\\\" \\| \\\"HASH_FUNCTION_SHA256\\\" \\| \\\"HASH_FUNCTION_KECCAK256\\\" \\| \\\"HASH_FUNCTION_NOT_APPLICABLE\\\"; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: \\\"PAYLOAD_ENCODING_HEXADECIMAL\\\" \\| \\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"; `hashFunction`: \\\"HASH_FUNCTION_NO_OP\\\" \\| \\\"HASH_FUNCTION_SHA256\\\" \\| \\\"HASH_FUNCTION_KECCAK256\\\" \\| \\\"HASH_FUNCTION_NOT_APPLICABLE\\\"; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: \\\"TRANSACTION_TYPE_ETHEREUM\\\" \\| \\\"TRANSACTION_TYPE_SOLANA\\\"; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: \\\"TRANSACTION_TYPE_ETHEREUM\\\" \\| \\\"TRANSACTION_TYPE_SOLANA\\\"; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}; `organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\}; `initOtpAuthResultV2`: \\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`;\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatedAt Structure - TypeScript\nDESCRIPTION: Defines the structure for the updatedAt timestamp which includes fields for nanos and seconds as strings. This is essential for tracking when an entry was last updated.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nupdatedAt: { nanos: string; seconds: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Whoami Response Type Alias in TypeScript\nDESCRIPTION: Describes the type alias for the Whoami response from the public API service, representing the schema for a successful 200 status code response\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWhoamiResponse = operations[\"PublicApiService_GetWhoami\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Signet P2TR Accounts Constant\nDESCRIPTION: This snippet defines a constant named DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS, which is an array of WalletAccount objects that represent default accounts for the Bitcoin Signet network using P2TR format. It is used in the Turnkey SDK to manage wallet accounts effectively. The code is located in the turnkey-helpers.ts file at line 313.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Updating User Method\nDESCRIPTION: Method for updating user details using TUpdateUserBody parameters. Returns a Promise resolving to a composite object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUser(`input`): `Promise`<`object` & `object`>\n```\n\n----------------------------------------\n\nTITLE: Defining Intent for Signing Raw Payload in TypeScript\nDESCRIPTION: This snippet outlines the structure of the intent that specifies the parameters needed to sign a raw payload, including the `encoding`, `hashFunction`, `payload`, and `privateKeyId`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Sub-Organization IDs Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get sub-organization IDs. Takes a TGetSubOrgIdsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetSubOrgIds(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining User Approval Intents in TypeScript\nDESCRIPTION: This snippet defines a `Promise` that returns a structured object for user activity approval intents, including fields to manage user permissions and activity details. It describes properties related to authentication, activity timestamps, and error messages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTransaction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`\\[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...\\[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\};`\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to copy the example environment file to create a local configuration file for the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/wallet-import-export/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportPrivateKeyIntent object\nDESCRIPTION: Defines the structure of the v1ExportPrivateKeyIntent object, encapsulating the parameters required for exporting a private key. It includes the unique identifier for the private key (privateKeyId) and the target public key (targetPublicKey) to which the export bundle will be encrypted. This object is sent as part of a request to export a private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportPrivateKeyIntent\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1435\n\n#### privateKeyId\n\n> **privateKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given Private Key.\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the export bundle will be encrypted.\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateSubOrganizationInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateSubOrganizationInput type alias as an object with a single property 'body' of type TCreateSubOrganizationBody. It is used for creating sub-organizations in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateSubOrganizationInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Init OTP Auth Intent - JavaScript\nDESCRIPTION: This snippet establishes the structure for the `initOtpAuthIntent` object. It collects user contact information and customizes email and SMS templates for sending OTP (One Time Password) for authentication purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: Defines a complex type structure for activity results, including various subtypes for different activity outcomes and status enumerations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nerEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: TEmailAuthInput Properties Definition\nDESCRIPTION: Property definition for the TEmailAuthInput type, specifying the required body property of type TEmailAuthBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TEmailAuthInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TEmailAuthBody\n```\n\n----------------------------------------\n\nTITLE: Creating Policies - TypeScript\nDESCRIPTION: The `stampCreatePolicies` function requires an input of type `TCreatePoliciesBody` and returns a promise resolving to either undefined or a `TSignedRequest`. This function creates policies within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreatePolicies(input: TCreatePoliciesBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Credential Bundle Result Structure\nDESCRIPTION: This structure defines 'credentialBundle' in the context of API responses, representing an HPKE encrypted credential bundle as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_63\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResultV2.credentialBundle\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Structure in JavaScript\nDESCRIPTION: This snippet defines a detailed structure for a JavaScript Promise. It includes a wide range of intents related to activities such as creating API keys, managing users, and generating authentication challenges. The structure outlines the necessary parameters, data types, and nested objects required to perform these SDK operations. The defined schema also helps in maintaining a consistent workflow within the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initOtpAuth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n`Promise`\\<\\{\"activity\": \\{\"canApprove\": `boolean`; `canReject`: `boolean`; `createdAt`: \\{\"nanos\": `string`; `seconds`: `string`; \\}; `failure`: \\{\"code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{\"acceptInvitationIntent`: \\{\"authenticator`: \\{\"attestation`: \\{\"authenticatorAttachment`: `\"cross-platform\"` | `\"platform\"` | `null`; `clientExtensionResults`: \\{\"appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{\"rk`: `boolean`; \\}; \\}; `id`: `string`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}`\\}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Turnkey SDK\nDESCRIPTION: Commands for cloning the repository, installing dependencies with pnpm, and building the project from source.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sdk-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-sdk-server/\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportPrivateKeyIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for an intent to import a private key, including encryption and user details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1ImportPrivateKeyIntent {\n  addressFormats: definitions[\"v1AddressFormat\"][];\n  curve: definitions[\"v1Curve\"];\n  encryptedBundle: string;\n  privateKeyName: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetOrganizationConfigsResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting organization configurations, containing a Config object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetOrganizationConfigsResponse {\n  configs: definitions[\"v1Config\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Only Users with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: The `stampCreateApiOnlyUsers` function is used for creating API-only users, accepting TCreateApiOnlyUsersBody as input and returning a promise with TSignedRequest. This is crucial for environments leveraging API user interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreateApiOnlyUsers**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:876](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L876)\n\n#### Parameters\n\n##### input\n\n`TCreateApiOnlyUsersBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1PrivateKeyResult type\nDESCRIPTION: Defines the structure for a private key result, including optional addresses and private key ID. Represents the response after a private key operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\n            v1PrivateKeyResult: {\n                name: \"v1PrivateKeyResult\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        addresses: {\n                            type: \"array\",\n                            items: {\n                                $ref: \"#/definitions/immutableactivityv1Address\"\n                            }\n                        },\n                        privateKeyId: {\n                            type: \"string\"\n                        }\n                    }\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining ReadOnlySessionIntent Object Definition in TypeScript\nDESCRIPTION: Defines the structure for a read-only session intent including a key index and type identifier.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nv1CreateReadOnlySessionIntent: object\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:826\n\nIndex Signature\n[key: string]: unknown\n```\n\n----------------------------------------\n\nTITLE: TInitImportWalletBody Type Alias Definition\nDESCRIPTION: Defines the `TInitImportWalletBody` type alias which is equivalent to the body parameter of the `PublicApiService_InitImportWallet` operation. This type is used to structure the request body for initializing the wallet import process.  It relies on the generated types from the OpenAPI specification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitImportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **TInitImportWalletBody** = `operations`\\[`\"PublicApiService_InitImportWallet\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining Version 2 Result Structure for Session\nDESCRIPTION: This snippet defines the structure for the result of the createReadWriteSession in its second version, encapsulating essential fields like apiKeyId, credentialBundle, etc., within a JSON object format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_61\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResultV2?\n\\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Approval Request Structure - TypeScript\nDESCRIPTION: This snippet defines the structure of an activity approval request, specifying the organization ID, parameters, timestamp, and type, to ensure proper handling of user activity approvals.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ApproveActivityRequest**: `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:526\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1ApproveActivityIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: \"ACTIVITY_TYPE_APPROVE_ACTIVITY\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeyTagsResult Structure in TypeScript\nDESCRIPTION: Defines the result structure for deleting private key tags, indicating the lists of private key IDs and private key tag IDs that were involved in the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePrivateKeyTagsResult {\n    privateKeyIds: string[];\n    privateKeyTagIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Creating Policies in TypeScript\nDESCRIPTION: The type alias TCreatePoliciesBody represents the structure required for creating policies in the Turnkey SDK. It extends specific parameters from the PublicApiService_CreatePolicies operation, allowing for a well-defined input structure for API calls. No external dependencies are mentioned, but familiarity with TypeScript types is necessary for usage.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePoliciesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TCreatePoliciesBody** = `operations`[`\\\"PublicApiService_CreatePolicies\\\"]`[`\\\"parameters\\\"]`[`\\\"body\\\"]`[`\\\"body\\\"]`[`\\\"parameters\\\"]` & `commandOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Address Formats in TypeScript\nDESCRIPTION: This snippet defines the various address formats supported by the system, including formats for different cryptocurrencies. The enumeration provides a method for ensuring that the address format specified in API calls is valid and recognized.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type v1AddressFormat = \"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\";\n```\n\n----------------------------------------\n\nTITLE: Defining SignGetUsers Function in TypeScript\nDESCRIPTION: Defines the signGetUsers function that takes an input of type TGetUsersInput and optional TurnkeyCredentialRequestOptions, and returns a Promise resolving to a SignedRequest. This function is used to create a signed GetUsers request for the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetUsers: (input: TGetUsersInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: User Management Intent Schemas\nDESCRIPTION: Multiple versions of user creation intents with support for bulk user creation and management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nintent.createUsersIntent\n```\n\nLANGUAGE: typescript\nCODE:\n```\nintent.createUsersIntentV2\n```\n\nLANGUAGE: typescript\nCODE:\n```\nintent.createUsersIntentV3\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Get Verified Sub Organization IDs Body in TypeScript\nDESCRIPTION: This code snippet defines a type alias named `TGetVerifiedSubOrgIdsBody`, which conforms to the structure required for the body of requests to the Public API service method for retrieving verified sub-organization IDs. It is crucial for ensuring type safety and clarity in API interactions. The type alias utilizes existing definitions from the API operations and parameters, making it easier to manage and understand the request format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetVerifiedSubOrgIdsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetVerifiedSubOrgIdsBody = operations[\\\"PublicApiService_GetVerifiedSubOrgIds\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure\nDESCRIPTION: This snippet defines the structure of the OTP authentication intent, specifying the contact information for sending OTP, customization parameters for email and SMS, and the type of OTP to be used. It is essential for implementing OTP verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Declaring signGetActivity Function in TypeScript\nDESCRIPTION: Declares the signGetActivity function, which takes an input of type TGetActivityInput and optional TurnkeyCredentialRequestOptions. It returns a Promise resolving to a SignedRequest. This function is used to request a WebAuthn assertion and generate a signed GetActivity request for Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetActivity: (input: TGetActivityInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Turnkey and Gnosis Safe\nDESCRIPTION: Command to create a local environment file from the example template, which needs to be populated with Turnkey API credentials, organization ID, wallet addresses, and Infura key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-gnosis/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enumerations in TypeScript\nDESCRIPTION: Type definitions for activity statuses and extensive list of activity types. The statuses include created, pending, completed, failed, consensus needed, and rejected states. Activity types cover various operations like key management, user management, signing, policy updates, and many other platform functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initOtpAuth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`;\n```\n\n----------------------------------------\n\nTITLE: Extracting Key Encrypted Bundle with TurnkeyIframeClient\nDESCRIPTION: Demonstrates extraction of an encrypted key bundle from an iframe for secure credential retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Extracts the encrypted key bundle from the iframe\nconst keyBundle = await iframeClient.extractKeyEncryptedBundle();\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyResponse Type Alias in TypeScript SDK\nDESCRIPTION: The TUpdatePolicyResponse type alias is used to represent the response received from the PublicApiService's UpdatePolicy operation. It combines specific sections of operations and definitions to form a comprehensive response object, ensuring consistency and reusability across the SDK. No additional dependencies are required for this type alias as it purely defines a structure based on API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nType Alias: TUpdatePolicyResponse\n> **TUpdatePolicyResponse** = `operations`\\[`\"PublicApiService_UpdatePolicy\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`\\]\\[`\"activity\"`\\]\\[`\"result\"`\\]\\[`\"updatePolicyResultV2\"`\\] & `definitions`\\[`\"v1ActivityResponse\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining deleteApiKeys Function in TypeScript\nDESCRIPTION: This code snippet defines a constant function 'deleteApiKeys' that takes an input and returns a Promise. The Promise resolves to an object containing detailed activity information, including approval status, creation time, and various intent types for different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deleteApiKeys: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... various intent types ... */ }; /* ... more properties ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policies in TypeScript\nDESCRIPTION: The stampGetPolicies function gets a list of policies using TGetPoliciesBody as input, and it returns a Promise that resolves to undefined or TSignedRequest. This is also an inherited method from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_110\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPolicies(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Intent Structure - JavaScript\nDESCRIPTION: This snippet outlines the intent structure for signing raw payloads, detailing encoding options, hash functions, and the payload itself, which are critical for secure transaction signing in blockchain applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n`signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TTestRateLimitsBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TTestRateLimitsBody that omits the 'organizationId' from the PublicApiService_TestRateLimits operation parameters body and combines it with queryOverrideParams.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TTestRateLimitsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TTestRateLimitsBody = `Omit`<`operations`[`\"PublicApiService_TestRateLimits\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`> & `queryOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Signing Import Private Key with WebAuthn in Turnkey SDK\nDESCRIPTION: This snippet documents the `signImportPrivateKey` function, which requests a WebAuthn assertion and returns a signed `ImportPrivateKey` request for secure private key import into Turnkey. It requires an `ImportPrivateKey` input and optional TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signImportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signImportPrivateKey**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: approveActivity method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, is used to approve an activity. It takes a `TApproveActivityBody` object as input and returns a Promise that resolves to a `TApproveActivityResponse` object. It is used for confirming activities within the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    approveActivity(input: TurnkeySDKApiTypes.TApproveActivityBody): Promise<TurnkeySDKApiTypes.TApproveActivityResponse> {\n        return this.command<TurnkeySDKApiTypes.TApproveActivityBody, TurnkeySDKApiTypes.TApproveActivityResponse>(\n            `/turnkey/approve_activity`,\n            input,\n            \"activity\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Invitation Request in TypeScript\nDESCRIPTION: This method stamps a request to delete an invitation. It takes a TDeleteInvitationBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteInvitation(input: TDeleteInvitationBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOauthProvidersResult Object in TypeScript\nDESCRIPTION: Defines the response structure for creating OAuth providers, which returns a list of provider IDs indicating the success of the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreateOauthProvidersResult\": {\\n    \"providerIds\": string[]\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bitcoin Testnet P2SH Account\nDESCRIPTION: Creates a default Bitcoin testnet P2SH wallet account at a specified derivation path index. Used for generating deterministic wallet accounts in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinTestnetP2SHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultBitcoinTestnetP2SHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeyTagsRequest type\nDESCRIPTION: Defines the structure for a request to delete private key tags. It includes the organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeletePrivateKeyTagsRequest\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1256\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[``\"v1DeletePrivateKeyTagsIntent\"``]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: ``\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"``\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitImportWalletResult type\nDESCRIPTION: Defines the result structure for initializing wallet import, containing the import bundle with a public key and signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitImportWalletResult\n * @memberof definitions\n */\nexport interface v1InitImportWalletResult {\n  /**\n   * Import bundle containing a public key and signature to use for importing client data.\n   */\n  importBundle: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsBody Type Alias in TypeScript\nDESCRIPTION: Defines a type alias that extends the PublicApiService_CreateWalletAccounts operation parameters with additional command override parameters. This type is used to specify the body structure for wallet account creation requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletAccountsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateWalletAccountsBody = operations[\"PublicApiService_CreateWalletAccounts\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: TDeleteAuthenticatorsInput Properties Definition - TypeScript\nDESCRIPTION: Property definition for TDeleteAuthenticatorsInput type, specifying the body property of type TDeleteAuthenticatorsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteAuthenticatorsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TDeleteAuthenticatorsBody\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that merges the CreateWallet operation response schema with v1ActivityResponse definitions. Used to type the response from wallet creation API calls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateWalletResponse = operations[\"PublicApiService_CreateWallet\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createWalletResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TRemoveOrganizationFeatureBody Type Alias in TypeScript\nDESCRIPTION: Creates a type alias that combines parameters from a specific PublicApiService operation with additional command override parameters. Used for removing organization features in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRemoveOrganizationFeatureBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTRemoveOrganizationFeatureBody = operations[\"PublicApiService_RemoveOrganizationFeature\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining Create Policies API Method in TypeScript\nDESCRIPTION: This code snippet defines the Create Policies API method for the Turnkey SDK. It specifies the HTTP method, endpoint, and input parameter type for creating new policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicies.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nCreate Policies\n\nCreate new Policies\n\n`POST /public/v1/submit/create_policies`\n\n## Parameters\n\n### input\n\n[`TCreatePoliciesInput`](../type-aliases/TCreatePoliciesInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateUserTagBody type alias. It represents the body parameters for the PublicApiService_CreateUserTag operation in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUserTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateUserTagBody = operations[\"PublicApiService_CreateUserTag\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Running Viem with Nexus Implementation\nDESCRIPTION: Command to execute the Viem-based implementation with Biconomy Nexus integration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-biconomy-aa/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start-viem-nexus\n```\n\n----------------------------------------\n\nTITLE: Defining TWebauthnStamperConfig Type in TypeScript\nDESCRIPTION: This snippet defines the TWebauthnStamperConfig type as an object with properties for WebAuthn authentication configuration. It includes a required rpId property for the Relying Party ID, and optional properties for timeout, userVerification level, and allowCredentials list for specifying which credentials can be used.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/index/type-aliases/TWebauthnStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTWebauthnStamperConfig = object\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Structure - TypeScript\nDESCRIPTION: This structure is for OTP authentication results, consisting of the same properties as the OAuth result, modeling the API key, credential, and user associated with the request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: OAuth Activity Types TypeScript Definition\nDESCRIPTION: Extensive list of OAuth and authentication-related activity types, covering a wide range of operations from user creation to session management and provider configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"`\n```\n\n----------------------------------------\n\nTITLE: Defining TExportPrivateKeyInput Type in TypeScript\nDESCRIPTION: Type alias definition for TExportPrivateKeyInput that specifies the structure of input required for exporting a private key through the Turnkey API. It contains a body property of type TExportPrivateKeyBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TExportPrivateKeyInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Organization Creation Intent Interface\nDESCRIPTION: TypeScript interface defining the structure for creating a new organization with root user authentication details. Includes organization name, root user details, and WebAuthN attestation data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  organizationName: string;\n  rootAuthenticator: {\n    attestation: {\n      authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n      clientExtensionResults: {\n        appid: boolean;\n        appidExclude: boolean;\n        credProps: {\n          rk: boolean;\n        };\n      };\n      id: string;\n      rawId: string;\n      response: {\n        attestationObject: string;\n        authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n        clientDataJson: string;\n        transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n      };\n      type: \"public-key\";\n    };\n    authenticatorName: string;\n    challenge: string;\n    userId: string;\n  };\n  rootEmail: string;\n  rootUserId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Management Type Definitions\nDESCRIPTION: Type definitions for wallet management intents including wallet creation, account management, and deletion operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WalletIntents {\n  createWalletIntent?: {\n    accounts: object[];\n    mnemonicLength?: number;\n    walletName: string;\n  };\n  deleteWalletsIntent?: {\n    deleteWithoutExport?: boolean;\n    walletIds: string[];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletAccountBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the request body parameters used when calling the POST /public/v1/submit/export_wallet_account endpoint. This type is extracted from the operations object's PublicApiService_ExportWalletAccount parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTExportWalletAccountBody = operations[\"PublicApiService_ExportWalletAccount\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Address Formats and Encryption Parameters in TypeScript\nDESCRIPTION: This snippet includes TypeScript type definitions for various address formats and encryption parameters used in a wallet SDK, specifying the types for Bitcoin, Sei, XLM, and more. It also indicates the elliptic curves used for cryptography, such as SECP256K1 and ED25519.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nN_REGTEST_P2PKH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" \\| \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" \\| \"ADDRESS_FORMAT_SEI\" \\| \"ADDRESS_FORMAT_XLM\" \\| \"ADDRESS_FORMAT_DOGE_MAINNET\" \\| \"ADDRESS_FORMAT_DOGE_TESTNET\" \\| \"ADDRESS_FORMAT_TON_V3R2\" \\| \"ADDRESS_FORMAT_TON_V4R2\" \\| \"ADDRESS_FORMAT_XRP\")(\\[]; `curve`: \"CURVE_SECP256K1\" \\| \"CURVE_ED25519\"; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Information in TypeScript\nDESCRIPTION: The 'stampGetWallet' function is designed to retrieve wallet information. It requires 'TGetWalletBody' as input and returns a Promise resolving to either 'undefined' or 'TSignedRequest'. This method is inherited from the 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetWallet**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetWalletBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Stamping OAuth Providers Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get OAuth providers. Returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOauthProviders(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type Alias for Email Authentication Request Body\nDESCRIPTION: Creates a type alias TEmailAuthBody that references the body parameter type for the EmailAuth operation in the Turnkey API. This type is used when making POST requests to the /public/v1/submit/email_auth endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TEmailAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TEmailAuthBody** = `operations`[`\"PublicApiService_EmailAuth\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthnStamp Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for WebAuthnStamp, containing properties related to WebAuthn authentication, including authenticatorData, clientDataJson, credentialId, and signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WebAuthnStamp {\n  authenticatorData: string;\n  clientDataJson: string;\n  credentialId: string;\n  signature: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring GetPrivateKeys Function in TypeScript\nDESCRIPTION: Declares a constant function getPrivateKeys that takes an input parameter and returns a Promise. The function is used to list all Private Keys within an Organization by making a POST request to '/public/v1/query/list_private_keys'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getPrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getPrivateKeys: (input) => Promise<{ privateKeys: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Fetching OAuth Providers - TypeScript SDK\nDESCRIPTION: The getOauthProviders function retrieves available OAuth providers using the SDK. It takes an input parameter conforming to TGetOauthProvidersBody and returns a Promise with an object containing an array of oauthProviders.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"getOauthProviders(input): Promise<{ oauthProviders: object[]; }>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for API Key in TypeScript\nDESCRIPTION: This snippet defines the parameters for API key requests, ensuring that curves are processed correctly and any associated expiration is handled. The structure is essential for creating or updating API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1ApiKeyParamsV2 {\n  apiKeyName: string;\n  curveType: definitions[\"v1ApiKeyCurve\"];\n  expirationSeconds?: string;\n  publicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Tags with Turnkey SDK - TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias 'TUpdateUserTagResponse' used in the Turnkey SDK for handling responses from the 'UpdateUserTag' operation through the Public API. The alias is part of the HTTP response schema configuration. No direct dependencies are specified; however, it is defined within the autogenerated code structure of the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TUpdateUserTagResponse = operations[\\\"PublicApiService_UpdateUserTag\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinTestnetP2TRAccountAtIndex Function - TypeScript\nDESCRIPTION: This function, defaultBitcoinTestnetP2TRAccountAtIndex, is used to access a Bitcoin Testnet P2TR account at a specified path index. It requires the parameter 'pathIndex', which is a number indicating the account's index. The function returns a WalletAccount object. There are no additional constraints, and it operates within the @turnkey/sdk-server package, specifically in the source file turnkey-helpers.ts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinTestnetP2TRAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinTestnetP2TRAccountAtIndex(pathIndex): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Export Wallet Account Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for exporting wallet accounts in the TurnKey SDK. Requires the address to identify the wallet account and a target public key for secure encryption of the export bundle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{ `address`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Providers with SDK Client\nDESCRIPTION: The stampGetOauthProviders method retrieves a list of available OAuth providers, taking an input of TGetOauthProvidersBody and returning a Promise resolving to either undefined or a TSignedRequest to provide OAuth provider data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetOauthProviders**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for activity statuses, result objects and activity types used in the SDK client. Includes types for operations like API key management, user operations, authentication flows, policy management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n{ `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining IframeEventType Enumeration in TypeScript\nDESCRIPTION: An enumeration that specifies various event types for secure communication and key management operations within an iframe context, used for handling different stages of cryptographic and bundle-related interactions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum IframeEventType {\n  PublicKeyReady = \"PUBLIC_KEY_READY\",\n  InjectCredentialBundle = \"INJECT_CREDENTIAL_BUNDLE\",\n  InjectKeyExportBundle = \"INJECT_KEY_EXPORT_BUNDLE\",\n  InjectWalletExportBundle = \"INJECT_WALLET_EXPORT_BUNDLE\",\n  InjectImportBundle = \"INJECT_IMPORT_BUNDLE\",\n  ExtractWalletEncryptedBundle = \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\",\n  ExtractKeyEncryptedBundle = \"EXTRACT_KEY_ENCRYPTED_BUNDLE\",\n  ApplySettings = \"APPLY_SETTINGS\",\n  BundleInjected = \"BUNDLE_INJECTED\",\n  EncryptedBundleExtracted = \"ENCRYPTED_BUNDLE_EXTRACTED\",\n  SettingsApplied = \"SETTINGS_APPLIED\",\n  StampRequest = \"STAMP_REQUEST\",\n  Stamp = \"STAMP\",\n  GetEmbeddedPublicKey = \"GET_EMBEDDED_PUBLIC_KEY\",\n  ClearEmbeddedKey = \"RESET_EMBEDDED_KEY\",\n  InitEmbeddedKey = \"INIT_EMBEDDED_KEY\",\n  Error = \"ERROR\",\n  TurnkeyInitMessageChannel = \"TURNKEY_INIT_MESSAGE_CHANNEL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetApiKeysResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias TGetApiKeysResponse which represents the expected schema of the response returned by the Public API service when invoking the 'GetApiKeys' operation. This alias acts as a structured type for developers to work with, ensuring type safety and reliable API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetApiKeysResponse = operations[\\\"PublicApiService_GetApiKeys\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Structure - TypeScript\nDESCRIPTION: This snippet defines a TypeScript Promise type for various API response structures that encapsulate information about user activity and permission states. It includes detailed parameters for activities like inviting users, creating organizations, and managing API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeyTags.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<\\{ activity: \\{ canApprove: boolean; canReject: boolean; createdAt: \\{ nanos: string; seconds: string; \\}; failure: \\{ code: number; details: object & object[]; message: string; \\}; fingerprint: string; id: string; intent: \\{ acceptInvitationIntent: \\{ authenticator: \\{ attestation: \\{ authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: \\{ appid: boolean; appidExclude: boolean; credProps: \\{ rk: boolean; \\}; \\}; id: string; rawId: string; response: \\{ attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; \\}; type: \"public-key\"; \\}; authenticatorName: string; challenge: string; userId: string; \\}; invitationId: string; userId: string; \\}; acceptInvitationIntentV2: \\{ authenticator: \\{ attestation: \\{ attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; \\}; authenticatorName: string; challenge: string; \\}; invitationId: string; userId: string; \\}; activateBillingTierIntent: \\{ productId: string; \\}; approveActivityIntent: \\{ fingerprint: string; \\}; createApiKeysIntent: \\{ apiKeys: object[]; userId: string; \\}; createApiKeysIntentV2: \\{ apiKeys: object[]; userId: string; \\}; createApiOnlyUsersIntent: \\{ apiOnlyUsers: object[]; \\}; createAuthenticatorsIntent: \\{ authenticators: object[]; userId: string; \\}; createAuthenticatorsIntentV2: \\{ authenticators: object[]; userId: string; \\}; createInvitationsIntent: \\{ invitations: object[]; \\}; createOauthProvidersIntent: \\{ oauthProviders: object[]; userId: string; \\}; createOrganizationIntent: \\{ organizationName: string; rootAuthenticator: \\{ attestation: \\{ authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: \\{ appid: boolean; appidExclude: boolean; credProps: \\{ rk: boolean; \\}; \\}; id: string; rawId: string; response: \\{ attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; \\}; type: \"public-key\"; \\}; authenticatorName: string; challenge: string; userId: string; \\}; rootEmail: string; rootUserId: string; \\}; createOrganizationIntentV2: \\{ organizationName: string; rootAuthenticator: \\{ attestation: \\{ attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; \\}; authenticatorName: string; challenge: string; \\}; rootEmail: string; rootUserId: string; \\}; createPoliciesIntent: \\{ policies: object[]; \\}; createPolicyIntent: \\{ effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; \\}; createPolicyIntentV2: \\{ effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; \\}; createPolicyIntentV3: \\{ condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; \\}; createPrivateKeysIntent: \\{ privateKeys: object[]; \\}; createPrivateKeysIntentV2: \\{ privateKeys: object[]; \\}; createPrivateKeyTagIntent: \\{ privateKeyIds: string[]; privateKeyTagName: string; \\}; createReadOnlySessionIntent: \\{\\}; createReadWriteSessionIntent: \\{ apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; \\}; createReadWriteSessionIntentV2: \\{ apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; \\}; createSubOrganizationIntent: \\{ name: string; rootAuthenticator: \\{ attestation: \\{ attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; \\}; authenticatorName: string; challenge: string; \\}; \\}; createSubOrganizationIntentV2: \\{ rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; \\}; createSubOrganizationIntentV3: \\{ privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; \\}; createSubOrganizationIntentV4: \\{ disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: \\{ accounts: object[]; mnemonicLength: number; walletName: string; \\}; \\}; createSubOrganizationIntentV5: \\{ disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: \\{ accounts: object[]; mnemonicLength: number; walletName: string; \\}; \\}; createSubOrganizationIntentV6: \\{ disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: \\{ accounts: object[]; mnemonicLength: number; walletName: string; \\}; \\}; createSubOrganizationIntentV7: \\{ disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: \\{ accounts: object[]; mnemonicLength: number; walletName: string; \\}; \\}; createUsersIntent: \\{ users: object[]; \\}; createUsersIntentV2: \\{ users: object[]; \\}; createUsersIntentV3: \\{ users: object[]; \\}; createUserTagIntent: \\{ userIds: string[]; userTagName: string; \\}; createWalletAccountsIntent: \\{ accounts: object[]; walletId: string; \\}; createWalletIntent: \\{ accounts: object[]; mnemonicLength: number; walletName: string; \\}; deleteApiKeysIntent: \\{ apiKeyIds: string[]; userId: string; \\}; deleteAuthenticatorsIntent: \\{ authenticatorIds: string[]; userId: string; \\}; deleteInvitationIntent: \\{ invitationId: string; \\}; deleteOauthProvidersIntent: \\{ providerIds: string[]; userId: string; \\}; deleteOrganizationIntent: \\{ organizationId: string; \\}; deletePaymentMethodIntent: \\{ paymentMethodId: string; \\}; deletePolicyIntent: \\{ policyId: string; \\}; deletePrivateKeysIntent: \\{ deleteWithoutExport: boolean; privateKeyIds: string[]; \\}; deletePrivateKeyTagsIntent: \\{ privateKeyTagIds: string[]; \\}; deleteSubOrganizationIntent: \\{ deleteWithoutExport: boolean; \\}; deleteUsersIntent: \\{ userIds: string[]; \\}; deleteUserTagsIntent: \\{ userTagIds: string[]; \\}; deleteWalletsIntent: \\{ deleteWithoutExport: boolean; walletIds: string[]; \\}; disablePrivateKeyIntent: \\{ privateKeyId: string; \\}; emailAuthIntent: \\{ apiKeyName: string; email: string; emailCustomization: \\{ appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; \\}; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; \\}; emailAuthIntentV2: \\{ apiKeyName: string; email: string; emailCustomization: \\{ appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; \\}; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; \\}; exportPrivateKeyIntent: \\{ privateKeyId: string; targetPublicKey: string; \\}; exportWalletAccountIntent: \\{ address: string; targetPublicKey: string; \\}; exportWalletIntent: \\{ language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; \\}; importPrivateKeyIntent: \\{ addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string;\\};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Status and Type Enums\nDESCRIPTION: Comprehensive type definitions for activity statuses and activity types, including operation result interfaces for API operations like key management, user management, policy management, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUserTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportWalletRequest object\nDESCRIPTION: Defines the structure of the v1ExportWalletRequest object, used to request the export of a wallet. It includes the organization identifier, the parameters for the export (using the v1ExportWalletIntent type), a timestamp for liveness verification, and a request type. This object is sent to the server to initiate the wallet export process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportWalletRequest\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1485\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[\\\"v1ExportWalletIntent\\\"]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: \\\"ACTIVITY_TYPE_EXPORT_WALLET\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TCreateApiOnlyUsersInput - TypeScript\nDESCRIPTION: This snippet defines a type alias called TCreateApiOnlyUsersInput as an object type. The main purpose of this type alias is to structure the input for creating API-only users in the Turnkey SDK. It includes a property named 'body' that is expected to conform to another type called TCreateApiOnlyUsersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateApiOnlyUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateApiOnlyUsersInput = {\\n  body: TCreateApiOnlyUsersBody\\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for signWithApiKey Function\nDESCRIPTION: TypeScript type definition for the signWithApiKey function that handles API key signing across different environments. Takes content, private key, and public key as inputs and returns a Promise containing the signed string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/signWithApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signWithApiKey: (input) => Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Structure in TypeScript\nDESCRIPTION: This snippet defines the structure of an authenticator object used for user verification, including extensive details about the authenticator's ID, type, and transport methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1Authenticator {\n  aaguid: string;\n  attestationType: string;\n  authenticatorId: string;\n  authenticatorName: string;\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  credential: definitions[\"externaldatav1Credential\"];\n  credentialId: string;\n  model: string;\n  transports: definitions[\"v1AuthenticatorTransport\"][];\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserSession Interface in TypeScript\nDESCRIPTION: Adds a new UserSession interface to store authentication state and eliminate the need for separate write and read sessions. Includes an authClient property to track the authentication method used.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserSession {\n  authClient: AuthClient;\n  // ... other session properties\n}\n```\n\n----------------------------------------\n\nTITLE: TDeletePrivateKeyTagsInput Property Definition\nDESCRIPTION: Property definition within the TDeletePrivateKeyTagsInput type, specifying the body parameter that contains the tag deletion details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TDeletePrivateKeyTagsBody\n```\n\n----------------------------------------\n\nTITLE: Defining TExportPrivateKeyInput type alias\nDESCRIPTION: Defines the TExportPrivateKeyInput type alias as an object with a 'body' property. The 'body' property is of type TExportPrivateKeyBody, representing the body of the export private key request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TExportPrivateKeyInput\n *\n * > **TExportPrivateKeyInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:44274\n *\n * `POST /public/v1/submit/export_private_key`\n */\n\n/**\n * Properties\n */\n\n/**\n * > **body**: [`TExportPrivateKeyBody`](TExportPrivateKeyBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:44275\n */\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiKeysResult Type\nDESCRIPTION: Defines the structure for the `v1CreateApiKeysResult` object, representing the result of creating API keys. It includes an array of `apiKeyIds`. This structure is the response from the Coordinator service after a successful API key creation request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiKeysResult\n * @property {string[]} apiKeyIds A list of API Key IDs.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Signet P2WSH Accounts in TypeScript\nDESCRIPTION: Defines a constant named DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS that holds an array of WalletAccount instances. This is crucial for initializing default accounts in the Bitcoin Signet network. To use this constant, the WalletAccount interface must be imported from the respective module.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_BITCOIN_SIGNET_P2WSH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for SDK Operations\nDESCRIPTION: This code snippet defines TypeScript interfaces for various SDK operations, including authentication, wallet management, and organization features. It covers both request (intent) and response (result) structures for different API calls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initUserEmailRecovery.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  // ... previous code ...\n  \"initOtpAuthIntent\": {\n    \"contact\": \"string\";\n    \"emailCustomization\": {\n      \"appName\": \"string\";\n      \"logoUrl\": \"string\";\n      \"magicLinkTemplate\": \"string\";\n      \"templateId\": \"string\";\n      \"templateVariables\": \"string\";\n    };\n    \"otpType\": \"string\";\n    \"sendFromEmailAddress\": \"string\";\n    \"sendFromEmailSenderName\": \"string\";\n    \"smsCustomization\": {\n      \"template\": \"string\";\n    };\n    \"userIdentifier\": \"string\";\n  };\n  // ... more interfaces ...\n  \"result\": {\n    \"acceptInvitationResult\": {\n      \"invitationId\": \"string\";\n      \"userId\": \"string\";\n    };\n    \"activateBillingTierResult\": {\n      \"productId\": \"string\";\n    };\n    // ... more result interfaces ...\n  };\n  \"organizationId\": \"string\";\n}\n```\n\n----------------------------------------\n\nTITLE: Sending OTP for Authentication in TypeScript\nDESCRIPTION: This code snippet initiates an OTP authentication flow via email or SMS, handling customization options for the sent message if required. It uses the sendOtp method from the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst initAuthResponse = await server.sendOtp({\n  suborgID: suborgId!,\n  otpType,\n  contact: value,\n  ...(emailCustomization && { emailCustomization }),\n  ...(sendFromEmailAddress && { sendFromEmailAddress }),\n  ...(customSmsMessage && { customSmsMessage }),\n  userIdentifier: authIframeClient?.iframePublicKey!,\n});\n\nif (initAuthResponse && initAuthResponse.otpId) {\n  // proceed to verifyOtp\n} else {\n  // error handling\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Get User Request with WebAuthn\nDESCRIPTION: Prepares a signed request for retrieving user information using WebAuthn authentication. Takes user input and optional credential request options, returns a Promise with a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignGetUser(input: TGetUserInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePoliciesIntent Type - TypeScript\nDESCRIPTION: Defines the intent type for creating multiple policies, specifying an array of policy intents to be created. This structure ensures appropriate handling of policy requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePoliciesIntent {\n  policies: definitions[\"v1CreatePolicyIntentV3\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TRemoveOrganizationFeatureResponse Type Alias in TypeScript\nDESCRIPTION: Type definition for the response of the RemoveOrganizationFeature API operation. It combines the operation result type with the v1ActivityResponse definition to form a complete response type for feature removal operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRemoveOrganizationFeatureResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TRemoveOrganizationFeatureResponse** = `operations`[`\"PublicApiService_RemoveOrganizationFeature\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"removeOrganizationFeatureResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TOauthResponse type alias. It combines the OAuth result from the PublicApiService_Oauth operation's 200 response schema with the v1ActivityResponse definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOauthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TOauthResponse = operations[\"PublicApiService_Oauth\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"oauthResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definitions for PKH SDK Results\nDESCRIPTION: This snippet defines TypeScript types for the results returned by the PKH SDK after processing intents.  Each type represents the expected response data for a specific action, like creating API keys, importing a wallet, deleting a user, or exporting a private key. These types provide a structured way to handle the outcomes of PKH SDK operations and ensure data integrity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\}; `initOtpAuthRes\n```\n\n----------------------------------------\n\nTITLE: Deleting Policies using JavaScript SDK\nDESCRIPTION: This code snippet declares a deletePolicy function in JavaScript, designed to handle the deletion of policy elements within an SDK environment. The function returns a Promise object, containing detailed information on activity status, timestamps, errors, fingerprints, and intent-related data. Dependencies include the native Promise API and a structured input object containing identifiers for policy management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deletePolicy: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that combines the delete API keys result schema from PublicApiService_DeleteApiKeys operation response with v1ActivityResponse definitions. Used for typing API responses when deleting API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteApiKeysResponse = operations[\"PublicApiService_DeleteApiKeys\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"deleteApiKeysResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining type for walletName field\nDESCRIPTION: This snippet defines the type for the `walletName` field within `v1WalletParams`, which is a string. It's a human-readable name associated with a Wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\n> **walletName**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Input in TypeScript\nDESCRIPTION: Defines the type alias TGetSubOrgIdsInput, which structures the expected input for the API request to list sub-organizations. This type is an object containing the body property, which itself is another type defined as TGetSubOrgIdsBody. This structure ensures that the API is provided with the required format for processing the request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetSubOrgIdsInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent in TypeScript\nDESCRIPTION: This snippet provides the structure for 'updateUserIntent', allowing updates to a user's email, name, phone number, and associated tags. This is vital for managing user information and ensuring it remains current.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Define v1Config Type\nDESCRIPTION: Defines the structure for the v1Config object, which includes optional properties for features and quorum.  This configuration is likely used when initializing the SDK or configuring specific features. It resides within the coordinator service API type definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1Config\n * @property {definitions[\"v1Feature\"][]} [features] \n * @property {definitions[\"externaldatav1Quorum\"]} [quorum] \n */\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Deletion Result - TypeScript\nDESCRIPTION: Defines the response structure returned after deleting authenticator devices, confirming which authenticators were successfully deleted. This is useful for user feedback.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteAuthenticatorsResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1187\n */\nexport interface v1DeleteAuthenticatorsResult {\n  authenticatorIds: string[]; // Unique identifier for a given Authenticator.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Types for User Management in TypeScript\nDESCRIPTION: This snippet describes the types for creating, deleting, and managing users through various intents. Each intent includes user IDs and associated data structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePolicy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateUsersIntent: { users: object[]; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateUsersIntentV2: { users: object[]; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteUsersIntent: { userIds: string[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntentV6 Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntentV6` object.  It includes properties for disabling email auth/recovery, setting root quorum, defining root users, naming the sub-organization, and configuring a wallet with accounts and mnemonic length.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_13\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportWalletResult type\nDESCRIPTION: Defines the structure of the result for importing a wallet. It contains a list of account addresses and the unique identifier for the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1ImportWalletResult\n * @memberof definitions\n */\nexport interface v1ImportWalletResult {\n  /**\n   * A list of account addresses.\n   */\n  addresses: string[];\n  /**\n   * Unique identifier for a Wallet.\n   */\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining updateWallet Functionality in JavaScript\nDESCRIPTION: The updateWallet function processes various intents related to wallet management in a promise-based architecture, returning a structured response that includes details about activities such as creating and managing wallets, invitations, and users. The function is designed using TypeScript to ensure type safety for its input and output structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst updateWallet = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; ... } };\n```\n\n----------------------------------------\n\nTITLE: Defining Promise-based Structure for User Activity Intent in JavaScript\nDESCRIPTION: This snippet defines a promise that returns a detailed structure containing activity-related information for users, including approval and rejection capabilities, user details, and associated metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/recoverUser.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | 'cross-platform' | 'platform'; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | 'cross-platform' | 'platform'; clientDataJson: string; transports: ...[]; }; type: 'public-key'; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | 'cross-platform' | 'platform'; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | 'cross-platform' | 'platform'; clientDataJson: string; transports: ...[]; }; type: 'public-key'; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: 'EFFECT_ALLOW' | 'EFFECT_DENY'; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: 'EFFECT_ALLOW' | 'EFFECT_DENY'; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: 'EFFECT_ALLOW' | 'EFFECT_DENY'; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: 'MNEMONIC_LANGUAGE_ENGLISH' | 'MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE' | 'MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE' | 'MNEMONIC_LANGUAGE_CZECH' | 'MNEMONIC_LANGUAGE_FRENCH' | 'MNEMONIC_LANGUAGE_ITALIAN' | 'MNEMONIC_LANGUAGE_JAPANESE' | 'MNEMONIC_LANGUAGE_KOREAN' | 'MNEMONIC_LANGUAGE_SPANISH'; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: ('ADDRESS_FORMAT_UNCOMPRESSED' | 'ADDRESS_FORMAT_COMPRESSED' | 'ADDRESS_FORMAT_ETHEREUM' | 'ADDRESS_FORMAT_SOLANA' | 'ADDRESS_FORMAT_COSMOS' | 'ADDRESS_FORMAT_TRON' | 'ADDRESS_FORMAT_SUI' | 'ADDRESS_FORMAT_APTOS' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH')[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletsInput Type Alias - TypeScript\nDESCRIPTION: This code snippet defines the TGetWalletsInput type alias, which is expected to be an object for the API call to list wallets. It is crucial for ensuring the correct structure of the request body when invoking the specified API endpoint. The body property refers to another type, TGetWalletsBody, which defines the expected configuration for the wallet list query.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetWalletsInput = object;\\n\\n// Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:3946\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteApiKeysRequest Interface in TypeScript\nDESCRIPTION: Specifies the structure for a request to delete API keys, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeleteApiKeysRequest {\n  organizationId: string;\n  parameters: v1DeleteApiKeysIntent;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_DELETE_API_KEYS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining updatePrivateKeyTagIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating a private key tag in an organization. It allows adding or removing private key IDs from a tag and updating the tag name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account in TypeScript\nDESCRIPTION: Method to export a specific wallet account using the Turnkey Browser SDK. Requires input parameters for account export and returns a Promise with account export details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexportWalletAccount(input: TExportWalletAccountBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Wallet Accounts Response - TypeScript\nDESCRIPTION: The code snippet defines a TypeScript type alias TGetWalletAccountsResponse, which represents the structure of the response from the API endpoint for listing wallet accounts. It is derived from the generated operations schema, ensuring type safety in API responses related to wallet accounts. This alias is critical for maintaining consistent data structures throughout the SDK operations related to wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TGetWalletAccountsResponse** = `operations`\\[`\\\"PublicApiService_GetWalletAccounts\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TApproveActivityInput Type Alias\nDESCRIPTION: Type definition for the input object used in approving an activity via the Turnkey API. Contains a body property of type TApproveActivityBody for POST /public/v1/submit/approve_activity endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TApproveActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TApproveActivityInput = {\n  body: TApproveActivityBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitUserEmailRecoveryRequest Object in TypeScript\nDESCRIPTION: The `v1InitUserEmailRecoveryRequest` object serves to initiate a user email recovery process. It requires a unique organization identifier `organizationId`, a `parameters` object with a reference to `v1InitUserEmailRecoveryIntent`, a timestamp in milliseconds (`timestampMs`) for request liveness verification, and a type indicator for the action, which is `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY`. No specific dependencies are involved but it expects a valid timestamp format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"v1InitUserEmailRecoveryRequest: {\\n  organizationId: string;\\n  parameters: definitions[\\\"v1InitUserEmailRecoveryIntent\\\"];\\n  timestampMs: string;\\n  type: \\\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining READ_WRITE SessionType\nDESCRIPTION: Defines the READ_WRITE session type as a member of the SessionType enumeration. It's assigned the string literal value \"SESSION_TYPE_READ_WRITE\", indicating a session with read and write permissions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/SessionType.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"code\": \"READ_WRITE: \\\"SESSION_TYPE_READ_WRITE\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TWebauthnStamperConfig Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias 'TWebauthnStamperConfig' as an object. It serves as a configuration structure for the WebAuthn API, allowing developers to specify necessary parameters for user authentication interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TWebauthnStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TWebauthnStamperConfig = {\\n  allowCredentials?: PublicKeyCredentialDescriptor[];\\n  rpId: string;\\n  timeout?: number;\\n  userVerification?: UserVerificationRequirement;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the `TOauthBody` type alias. It is extracted from the auto-generated fetcher file and represents the type of the body parameter for the `PublicApiService_Oauth` operation. The operation is associated with the `/public/v1/submit/oauth` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TOauthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\noperations[\"PublicApiService_Oauth\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Import Private Key Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for importing private keys into the TurnKey platform. Specifies address formats, cryptographic curve, encrypted bundle, and user identification parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` | `\"ADDRESS_FORMAT_COMPRESSED\"` | `\"ADDRESS_FORMAT_ETHEREUM\"` | `\"ADDRESS_FORMAT_SOLANA\"` | `\"ADDRESS_FORMAT_COSMOS\"` | `\"ADDRESS_FORMAT_TRON\"` | `\"ADDRESS_FORMAT_SUI\"` | `\"ADDRESS_FORMAT_APTOS\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Sign Raw Payloads API Endpoint Definition\nDESCRIPTION: This section describes an API endpoint for signing multiple raw payloads using the same signing parameters. It provides a URL path for the POST request and mentions the necessary input parameter type. This endpoint likely ties into digital signature processes within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"POST /public/v1/submit/sign_raw_payloads\"\n## Parameters\n### input\n[`TSignRawPayloadsInput`](../type-aliases/TSignRawPayloadsInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountBody Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias for the request body required to get wallet account details. It uses TypeScript's Omit utility type to exclude the 'organizationId' property from the specified operation's parameters, ensuring the API maintains strict type enforcement for incoming data. The resulting type combines parameters necessary for the wallet account retrieval with any additional query parameters defined by the user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletAccountBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetWalletAccountBody = Omit<operations[\\\"PublicApiService_GetWalletAccount\\\"] [\\\"parameters\\\"] [\\\"body\\\"] [\\\"body\\\"], \\\"organizationId\\\"> & queryOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: SDK Type Definitions for Blockchain Operations\nDESCRIPTION: Comprehensive type definitions for various blockchain operations including wallet management, authentication, and transaction signing. Includes enums for address formats, curves, and transaction types along with interface definitions for API requests and responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\";\ncurve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\nencryptedBundle: string;\nprivateKeyName: string;\nuserId: string;\n// ... additional type definitions for intents and results\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Feature with Promise SDK JavaScript\nDESCRIPTION: This snippet defines a JavaScript function `removeOrganizationFeature` using ES6 arrow function syntax. It accepts an input and returns a promise, detailing activity outcomes, authenticator configurations, invitation handling, organization creation and modification, and user management. It utilizes asynchronous operations with a detailed structure involving complex dependencies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/removeOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst removeOrganizationFeature = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"))\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportWalletAccountIntent object\nDESCRIPTION: Defines the structure of the v1ExportWalletAccountIntent object, encapsulating the parameters required for exporting a wallet account. It includes the address of the wallet account (address) and the target public key (targetPublicKey) to which the export bundle will be encrypted. This object is sent as part of a request to export a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportWalletAccountIntent\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1456\n\n#### address\n\n> **address**: `string`\n\n##### Description\n\nAddress to identify Wallet Account.\n\n#### targetPublicKey\n\n> **targetPublicKey**: `string`\n\n##### Description\n\nClient-side public key generated by the user, to which the export bundle will be encrypted.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Get Activities Request Type in TypeScript\nDESCRIPTION: This snippet defines the structure for a get activities request, including optional filters for status and type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1GetActivitiesRequest\n\n> **v1GetActivitiesRequest**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1652](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1652)\n\n#### filterByStatus?\n\n> `optional` **filterByStatus**: `definitions`[`\"v1ActivityStatus\"`][]\n\n##### Description\n\nArray of Activity Statuses filtering which Activities will be listed in the response.\n\n#### filterByType?\n\n> `optional` **filterByType**: `definitions`[`\"v1ActivityType\"`][]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for TurnKey SDK Result Types\nDESCRIPTION: A comprehensive TypeScript interface that defines all possible result types from TurnKey SDK operations. Each property represents a specific operation result with its associated data structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierResult`: { `productId`: `string`; }; `createApiKeysResult`: { `apiKeyIds`: `string`[]; }; `createApiOnlyUsersResult`: { `userIds`: `string`[]; }; `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `createInvitationsResult`: { `invitationIds`: `string`[]; }; `createOauthProvidersResult`: { `providerIds`: `string`[]; }; `createOrganizationResult`: { `organizationId`: `string`; }; `createPoliciesResult`: { `policyIds`: `string`[]; }; `createPolicyResult`: { `policyId`: `string`; }; `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; }; `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResultV2`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createSubOrganizationResult`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV3`: { `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV4`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV5`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV6`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV7`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createUsersResult`: { `userIds`: `string`[]; }; `createUserTagResult`: { `userIds`: `string`[]; `userTagId`: `string`; }; `createWalletAccountsResult`: { `addresses`: `string`[]; }; `createWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `deleteApiKeysResult`: { `apiKeyIds`: `string`[]; }; `deleteAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `deleteInvitationResult`: { `invitationId`: `string`; }; `deleteOauthProvidersResult`: { `providerIds`: `string`[]; }; `deleteOrganizationResult`: { `organizationId`: `string`; }; `deletePaymentMethodResult`: { `paymentMethodId`: `string`; }; `deletePolicyResult`: { `policyId`: `string`; }; `deletePrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsResult`: { `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationResult`: { `subOrganizationUuid`: `string`; }; `deleteUsersResult`: { `userIds`: `string`[]; }; `deleteUserTagsResult`: { `userIds`: `string`[]; `userTagIds`: `string`[]; }; `deleteWalletsResult`: { `walletIds`: `string`[]; }; `disablePrivateKeyResult`: { `privateKeyId`: `string`; }; `emailAuthResult`: { `apiKeyId`: `string`; `userId`: `string`; }; `exportPrivateKeyResult`: { `exportBundle`: `string`; `privateKeyId`: `string`; }; `exportWalletAccountResult`: { `address`: `string`; `exportBundle`: `string`; }; `exportWalletResult`: { `exportBundle`: `string`; `walletId`: `string`; }; `importPrivateKeyResult`: { `addresses`: `object`[]; `privateKeyId`: `string`; }; `importWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `initImportPrivateKeyResult`: { `importBundle`: `string`; }; `initImportWalletResult`: { `importBundle`: `string`; }; `initOtpAuthResult`: { `otpId`: `string`; }; `initOtpAuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Using Existing API Key from Cloud Storage\nDESCRIPTION: Shows how to initialize a Telegram Cloud Storage Stamper using an existing API key stored at the default location in Cloud Storage.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper from \"@turnkey/telegram-cloud-storage-stamper\";\nimport { TurnkeyBrowserClient, TurnkeySDKClientConfig } from \"@turnkey/sdk-browser\";\n\n// create a new Telegram Cloud Storage stamper\nconst stamper = await TelegramCloudStorageStamper.create();\n\n// use the stamper in the client config\nconst browserConfig: TurnkeySDKClientConfig = {\n  stamper: stamper,\n  apiBaseUrl: \"https://api.turnkey.com\",\n  organizationId: <ORGANIZATION_ID>,\n};\n\n// create a TurnkeyClient with the initialized Telegram Cloud Storage Stamper\nconst client = new TurnkeyBrowserClient(browserConfig);\n\n// make a request with the client\nconst whoamiResponse = await client.getWhoami({\n  organizationId: <ORGANIZATION_ID>,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Get Private Key Body in TypeScript\nDESCRIPTION: This code defines a type alias named 'TGetPrivateKeyBody', which is constructed by omitting the 'organizationId' field from the request parameters of the 'PublicApiService_GetPrivateKey' operation while including 'queryOverrideParams'. This type alias aids in creating structured and type-safe requests for getting private keys in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetPrivateKeyBody = Omit<operations[\\\"PublicApiService_GetPrivateKey\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"], \\\"organizationId\\\"> & queryOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Result Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for the result of the email recovery operation, containing a user ID. It is critical for tracking the outcome of the email recovery process initiated by users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Regtest P2SH Accounts\nDESCRIPTION: This code snippet defines a constant array named `DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS`.  It's an array of `WalletAccount` objects, likely representing pre-configured accounts for use in Bitcoin Regtest environments using P2SH (Pay to Script Hash) addresses. This is used within the Turnkey SDK browser package for simplified testing and development.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyClient with ApiKeyStamper in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the ApiKeyStamper with TurnkeyClient. It shows the setup process for creating a stamper with API keys and initializing the HTTP client.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new ApiKeyStamper({\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n});\n\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Sub-Organization with TurnkeyBrowserSDK\nDESCRIPTION: Retrieves information about the user's current sub-organization from user data stored in local storage. This function is useful for obtaining the user's organization context when building multi-organization applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// retrieves users current sub organization\nconst subOrganization = await turnkeySDK.getCurrentSubOrganization();\n```\n\n----------------------------------------\n\nTITLE: OAuth Provider Interface Definition in TypeScript\nDESCRIPTION: Interface defining an OAuth provider with properties for audience, issuer, subject and other OAuth-related fields. Used for OAuth authentication configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1OauthProvider {\n  audience: string;\n  createdAt: externaldatav1Timestamp;\n  issuer: string;\n  providerId: string;\n  providerName: string;\n  subject: string;\n  updatedAt: externaldatav1Timestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Import Private Key Result Structure\nDESCRIPTION: This snippet outlines the structure for 'importPrivateKeyResult', detailing the addresses associated with the private key along with the private key ID, expected within an object array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_92\n\nLANGUAGE: json\nCODE:\n```\nresult.importPrivateKeyResult?\n\\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Results\nDESCRIPTION: This snippet defines TypeScript types for various result objects in the SDK. These result types represent the responses returned after performing an action or operation, such as creating API keys, importing wallets, and exporting private keys. Each type specifies the properties that will be present in the response object, indicating the outcome of the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\}; `init\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetPrivateKeysInput - TypeScript\nDESCRIPTION: This type alias represents the structure of the request body for the Get Private Keys API endpoint, ensuring a well-defined object type for the API consumer. Dependencies include TypeScript.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetPrivateKeysInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enumerations in TypeScript\nDESCRIPTION: This code defines TypeScript type unions for activity statuses and types in the TurnKey SDK. It includes various possible values for activity status (e.g., created, pending, completed) and an extensive list of activity types that represent different operations that can be performed via the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePolicy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining EncryptedBundleExtracted Enumeration\nDESCRIPTION: This snippet defines the EncryptedBundleExtracted event type in TypeScript, used to indicate that an encrypted bundle has been extracted from the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nEncryptedBundleExtracted: \"ENCRYPTED_BUNDLE_EXTRACTED\"\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure in JSON\nDESCRIPTION: This snippet defines the structure for the 'importWalletIntent', which outlines the necessary parameters for importing a wallet. It includes information such as encryptedBundle, userId, accounts, and walletName.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining exportPrivateKey Method in TypeScript\nDESCRIPTION: Method for exporting private keys that accepts a TExportPrivateKeyBody input and returns a Promise containing response objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexportPrivateKey(input: TExportPrivateKeyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining TApproveActivityBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TApproveActivityBody which represents the request body for the PublicApiService_ApproveActivity operation. This type is used when making POST requests to the '/public/v1/submit/approve_activity' endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TApproveActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TApproveActivityBody** = `operations`[`\"PublicApiService_ApproveActivity\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TListPrivateKeyTagsInput in TypeScript\nDESCRIPTION: This snippet defines a type alias `TListPrivateKeyTagsInput` as an object type for SDK service specification. It outlines the expected structure of the request body that utilizes this type when making a POST request to list private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListPrivateKeyTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TListPrivateKeyTagsInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Array in TypeScript\nDESCRIPTION: This snippet defines a `votes` array containing objects which is presumably meant to hold voting information related to activities. This structure illustrates the handling of votes within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n`votes`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetApiKeysRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting multiple API keys, with an optional user ID filter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetApiKeysRequest {\n  organizationId: string;\n  userId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TExportWalletInput Type Alias Definition\nDESCRIPTION: Defines the TExportWalletInput type alias as an object with a 'body' property of type TExportWalletBody. This type is used as the input structure for exporting a wallet in the Turnkey SDK server.  It resides within the sdk_api_types.ts file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TExportWalletInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Property Definition for TGetSubOrgIdsInput\nDESCRIPTION: Property definition showing the required 'body' field of type TGetSubOrgIdsBody for the TGetSubOrgIdsInput type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetSubOrgIdsBody\n```\n\n----------------------------------------\n\nTITLE: TExportWalletBody Type Alias Definition\nDESCRIPTION: Defines the TExportWalletBody type alias. This type is used as the request body for the `PublicApiService_ExportWallet` operation within the Turnkey SDK. It is derived by intersecting the base parameters for the export wallet operation with `commandOverrideParams`, allowing customization of the command execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Type Alias: TExportWalletBody\\n\\n> **TExportWalletBody** = `operations`[\\\"PublicApiService_ExportWallet\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & `commandOverrideParams`\\n\"\n```\n\n----------------------------------------\n\nTITLE: User Management Types - TypeScript\nDESCRIPTION: Type definitions for API-only user creation and management, including request/response structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1CreateApiOnlyUsersRequest = {\n  organizationId: string;\n  parameters: v1CreateApiOnlyUsersIntent;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\";\n}\n\ntype v1CreateApiOnlyUsersResult = {\n  userIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletBody Type Alias in TypeScript\nDESCRIPTION: Defines the TExportWalletBody type alias as the body parameters for the PublicApiService_ExportWallet operation. This type is used for exporting wallet data through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTExportWalletBody = operations[\"PublicApiService_ExportWallet\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Sign GetPolicies Request in Turnkey API (TypeScript)\nDESCRIPTION: This code snippet documents the `signGetPolicies` function which takes a `TGetPoliciesInput` and optional `TurnkeyCredentialRequestOptions` as input. It returns a Promise that resolves to a `SignedRequest`. This function is used to request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey. It's defined within the `public_api.fetcher.ts` file of the `@turnkey/http` package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetPolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: signGetPolicies()\n *\n * > **signGetPolicies**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:776](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L776)\n *\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See GetPolicies\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TGetPoliciesInput`](../type-aliases/TGetPoliciesInput.mdx)\n *\n * ### options?\n *\n * `TurnkeyCredentialRequestOptions`\n *\n * ## Returns\n *\n * `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Extensive Activity Type Enumeration\nDESCRIPTION: Comprehensive list of activity types covering organization management, user operations, authentication, key management, and transaction-related actions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeyTags.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | ... (multiple activity types)`\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeysResult Structure in TypeScript\nDESCRIPTION: Defines the result structure for deleting private keys, indicating the list of private key IDs that were removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePrivateKeysResult {\n    privateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagInput Type in TypeScript\nDESCRIPTION: Type alias definition for TCreateUserTagInput, specifying the structure for user tag creation input parameters. The type contains a single required property 'body' of type TCreateUserTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateUserTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateUserTagInput = object\n```\n\n----------------------------------------\n\nTITLE: TCreateWalletInput Property Definition\nDESCRIPTION: Property definition for the body field within TCreateWalletInput type, which must be of type TCreateWalletBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TCreateWalletBody\n```\n\n----------------------------------------\n\nTITLE: Create Policy in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a policy using the TurnkeyBrowserClient. It takes a `TCreatePolicyBody` as input and returns a Promise that resolves to an object representing the created policy.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **createPolicy**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1041](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1041)\n\n#### Parameters\n\n##### input\n\n`TCreatePolicyBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createPolicy`](TurnkeyBrowserClient.mdx#createpolicy)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enumerations in TypeScript\nDESCRIPTION: This snippet enumerates the possible values for the 'status' and 'type' properties of activities. It outlines various statuses (e.g., created, pending, completed) and types (e.g., create API keys, create users) that facilitate tracking and management of different activity states.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Private Key Import Intent Interface Definition\nDESCRIPTION: TypeScript interface defining the structure for importing private keys with support for multiple address formats and cryptographic curves.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` | `\"ADDRESS_FORMAT_COMPRESSED\"` | `\"ADDRESS_FORMAT_ETHEREUM\"` | `\"ADDRESS_FORMAT_SOLANA\"` | `\"ADDRESS_FORMAT_COSMOS\"` | `\"ADDRESS_FORMAT_TRON\"` | `\"ADDRESS_FORMAT_SUI\"` | `\"ADDRESS_FORMAT_APTOS\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript types for various activity results.\nDESCRIPTION: This snippet defines various TypeScript types representing the results of different asynchronous activities within the system. These include types for Email Recovery, OAuth and OTP authentication results, Organization and user related results and other miscellaneous results such as signing of payloads. Each type defines the structure of the data returned upon completion of the respective activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"EmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\};\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeysRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get all private keys for an organization. It requires the organizationId as a string property.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPrivateKeysRequest: object\n{\n  organizationId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsInput Type in TypeScript\nDESCRIPTION: Type alias definition that specifies the structure of input parameters required for creating wallet accounts. The type consists of a body property that must conform to the TCreateWalletAccountsBody type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletAccountsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateWalletAccountsInput = object\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreateWalletAccountsInput Properties in TypeScript\nDESCRIPTION: Defines the body property of the TCreateWalletAccountsInput type, which is of type TCreateWalletAccountsBody. This property contains the necessary information for creating wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateWalletAccountsBody\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Creation Result - TypeScript\nDESCRIPTION: Describes the result object returned upon successful wallet creation, which includes both the wallet ID and the addresses associated with the wallet. Useful for client verification\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CreateWalletResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1140\n */\nexport interface v1CreateWalletResult {\n  addresses: string[]; // A list of account addresses.\n  walletId: string; // Unique identifier for a Wallet.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Type Interface in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for Session that includes properties for session key, public/private key pairs, expiry timestamp, and optional user object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/Session.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSession = object {\n  key: string;\n  publicKey: string;\n  privateKey: string;\n  expiry: number;\n  user?: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTurnkey Hook in TypeScript\nDESCRIPTION: A React hook that returns the TurnkeyContextType for accessing Turnkey functionality within React Native components. This hook must be used within a TurnkeyProvider context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/functions/useTurnkey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseTurnkey(): TurnkeyContextType\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tag - TypeScript API Endpoint Definition\nDESCRIPTION: Defines the endpoint and payload structure for creating a private key tag that can be added to private keys. The endpoint accepts a TCreatePrivateKeyTagInput parameter and is part of the public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /public/v1/submit/create_private_key_tag\n```\n\n----------------------------------------\n\nTITLE: Defining Updated At Type in TypeScript\nDESCRIPTION: This snippet defines a type for the updated timestamp of a resource, including properties for the seconds and nanos parts of the timestamp. This structure facilitates working with precise temporal data in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n`updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining type v1WalletAccountParams\nDESCRIPTION: This snippet defines the type `v1WalletAccountParams` as an object. This type describes the parameters needed to create a wallet account, including address format, curve, path, and path format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1WalletAccountParams**: `object`\n```\n\n----------------------------------------\n\nTITLE: Consensus Policy Configuration\nDESCRIPTION: Example JSON configuration for a consensus policy requiring two approvers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-viem/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect\": \"EFFECT_ALLOW\",\n  \"consensus\": \"approvers.count() >= 2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePoliciesResult Type - TypeScript\nDESCRIPTION: Describes the result type for creating policies, which includes an array of unique policy IDs. This response structure facilitates the retrieval of information regarding created policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePoliciesResult {\n  policyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1WalletAccount Interface in TypeScript\nDESCRIPTION: This snippet defines the v1WalletAccount interface, which represents a wallet account object with properties such as address, cryptographic details, and organizational information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1WalletAccount {\n  address: string;\n  addressFormat: v1AddressFormat;\n  createdAt: externaldatav1Timestamp;\n  curve: v1Curve;\n  organizationId: string;\n  path: string;\n  pathFormat: v1PathFormat;\n}\n```\n\n----------------------------------------\n\nTITLE: TurnkeySigner Connect Method\nDESCRIPTION: Method to connect the signer to a new provider. Returns a new TurnkeySigner instance connected to the specified provider.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeySigner.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconnect(provider: Provider): TurnkeySigner\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS in TypeScript\nDESCRIPTION: This code snippet defines a constant named `DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS` as an array of `WalletAccount` objects.  These accounts are configured for use with the Bitcoin Signet network, specifically using the P2TR (Pay-to-Taproot) address format. The constant is defined within the `turnkey-helpers.ts` file in the `@turnkey/sdk-server` package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DEFAULT_BITCOIN_SIGNET_P2TR_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Defining TRejectActivityInput type alias\nDESCRIPTION: This code snippet defines the TRejectActivityInput type alias as an object with a 'body' property of type TRejectActivityBody. This input type is used for the POST /public/v1/submit/reject_activity endpoint, presumably for rejecting a pending activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRejectActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TRejectActivityInput** = `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:60930\n\n`POST /public/v1/submit/reject_activity`\n\n## Properties\n\n### body\n\n> **body**: [`TRejectActivityBody`](TRejectActivityBody.mdx)\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:60931\n\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Return Type for Cubist SDK in TypeScript\nDESCRIPTION: This code snippet defines a complex Promise return type for a function in the Cubist SDK. It includes nested objects for activity details, various intents, and complex data structures for authenticators, policies, and wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/setOrganizationFeature.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { nanos: string; seconds: string; };\n    failure: { code: number; details: object & object[]; message: string; };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n            clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n              clientDataJson: string;\n              transports: [];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      // ... (other intent types omitted for brevity)\n      importPrivateKeyIntent: {\n        addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];\n        curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n        encryptedBundle: string;\n      };\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateWalletRequest Interface in TypeScript\nDESCRIPTION: Outlines the structure for a wallet creation request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateWalletRequest {\n  organizationId: string;\n  parameters: v1CreateWalletIntent;\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_WALLET\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the result of setting a payment method which includes cardHolderEmail, cardHolderName, and lastFour as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining the TDeleteOauthProvidersResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias, TDeleteOauthProvidersResponse, which specifies the schema for the response of a POST request to delete OAuth providers. This type alias is used to ensure that any responses conform to the expected structure, facilitating type safety within TypeScript. The definition pulls the response schema directly from the generated operations for the API service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TDeleteOauthProvidersResponse = operations[\\\"PublicApiService_DeleteOauthProviders\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Response for Activity\nDESCRIPTION: This code snippet defines the structure of the Promise response for an activity involving user approvals and rejections, including fields for success states, timestamps, and identifiers. It specifies detailed nested objects for each activity type, which are crucial for API communication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\")[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Default SUI Accounts in TypeScript\nDESCRIPTION: This snippet defines a constant DEFAULT_SUI_ACCOUNTS, which is an array of WalletAccount objects. It is essential for initializing default wallet accounts within the SDK Server framework. The WalletAccount interface must be imported from the appropriate path to ensure correct type usage.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_SUI_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_SUI_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePolicyRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to delete a policy, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeletePolicyRequest {\n  organizationId: string;\n  parameters: definitions[\"v1DeletePolicyIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_DELETE_POLICY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateOauthProvidersInput Type in TypeScript\nDESCRIPTION: Type alias definition for TCreateOauthProvidersInput, which represents the input structure for the POST /public/v1/submit/create_oauth_providers endpoint. It contains a body property of type TCreateOauthProvidersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateOauthProvidersInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Policies Request in TypeScript\nDESCRIPTION: This method stamps a request to create policies. It takes a TCreatePoliciesBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePolicies(input: TCreatePoliciesBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinTestnetP2WPKHAccountAtIndex Function in SDK\nDESCRIPTION: The function defaultBitcoinTestnetP2WPKHAccountAtIndex is defined to generate a Bitcoin testnet account at a specified index using Pay-to-Witness-Public-Key-Hash (P2WPKH) format. This function requires the pathIndex as an argument, which determines the position of the account in the hierarchy. It returns a WalletAccount object. Dependencies include the WalletAccount interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinTestnetP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **defaultBitcoinTestnetP2WPKHAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiKeysIntentV2 Type\nDESCRIPTION: Defines the structure for the `v1CreateApiKeysIntentV2` object, representing the intent to create API keys (version 2). It contains an array of `v1ApiKeyParamsV2` and a `userId`. This intent is used in newer API calls to the Coordinator service for creating API keys for a specific user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiKeysIntentV2\n * @property {definitions[\"v1ApiKeyParamsV2\"][]} apiKeys A list of API Keys.\n * @property {string} userId Unique identifier for a given User.\n */\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreateWalletInput Properties in TypeScript\nDESCRIPTION: This code snippet details the properties of the TCreateWalletInput type alias. It has a single property 'body' of type TCreateWalletBody, which contains the necessary information for creating a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateWalletBody\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for OTP Authentication Body in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias `TInitOtpAuthBody` which combines the parameters necessary for the `PublicApiService_InitOtpAuth` API operation and include additional command override parameters. This type is crucial for ensuring that the API receives the correctly structured data for OTP authentication initialization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitOtpAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TInitOtpAuthBody = operations[\"PublicApiService_InitOtpAuth\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams;\n```\n\n----------------------------------------\n\nTITLE: Declaring signRecoverUser Function in SDK - TypeScript\nDESCRIPTION: The purpose of this code snippet is to define the signRecoverUser function. It is designed to request a WebAuthn assertion and return a Promise resolving to a signed RecoverUser request. The input parameter is of type TRecoverUserInput, while the options parameter is optional and of type TurnkeyCredentialRequestOptions. The function returns a Promise containing a SignedRequest. This code is located in the public_api.fetcher.d.ts file. Dependencies include the WebAuthn API and the Turnkey SDK modules.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRecoverUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signRecoverUser: (input: TRecoverUserInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitOtpAuthResult type\nDESCRIPTION: Defines the result structure for initializing OTP authentication, containing the OTP ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitOtpAuthResult\n * @memberof definitions\n */\nexport interface v1InitOtpAuthResult {\n  /**\n   * Unique identifier for an OTP authentication\n   */\n  otpId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Intent Types for TKHQ SDK\nDESCRIPTION: This code snippet defines a comprehensive set of TypeScript types that represent various activity intents within the TKHQ SDK.  These intents are used to define different actions that can be performed, such as creating users, organizations, policies, managing authenticators, wallets, private keys, and more.  Each intent type includes specific parameters required to execute the associated action.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createReadOnlySession.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"Promise<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P\"\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserResult in TypeScript\nDESCRIPTION: This snippet defines the `updateUserResult` type, which encapsulates the result of a user update operation by returning a `userId` string. It is important for tracking user updates within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n`updateUserResult`: \\{ `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TListPrivateKeyTagsInput Type Alias in TypeScript\nDESCRIPTION: Defines the TListPrivateKeyTagsInput type alias as an object with a body property of type TListPrivateKeyTagsBody. This type is used in the Turnkey SDK for listing private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListPrivateKeyTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTListPrivateKeyTagsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Structure - TypeScript\nDESCRIPTION: This snippet outlines the structure for storing votes associated with activities, allowing for multi-participant operations in scenarios such as approvals or rejections.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Updating Stamper Signing Key\nDESCRIPTION: Shows how to update the signing key for an existing stamper instance with a new API key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// the API key to be stored\nconst apiKey: CloudStorageAPIKey = {\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n};\n\n// the API key to be set as the signing key\nconst stamper = await TelegramCloudStorageStamper.create({\n  cloudStorageAPIKey: apiKey,\n});\n\nconst apiKey2: CloudStorageAPIKey = {\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n};\n\n// insert the API key in Telegram Cloud Storage\nawait stamper.setSigningKey({\n  cloudStorageAPIKey: apiKey2,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Interface Definitions\nDESCRIPTION: Comprehensive type definitions for activity results, statuses, and types, including authentication, organization management, and transaction operations. Includes timestamps and voting structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n{ `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; };\n```\n\n----------------------------------------\n\nTITLE: Initializing WebAuthn Stamper with Turnkey HTTP Client\nDESCRIPTION: Demonstrates how to initialize and configure the WebAuthnStamper with a Turnkey HTTP client. The stamper requires an rpId (relying party ID) parameter and is used to create an HTTP client capable of signing requests with passkeys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst stamper = new WebAuthnStamper({\n  rpId: \"example.com\",\n});\n\n// New HTTP client able to sign with passkeys!\nconst httpClient = new TurnkeyClient(\n  { baseUrl: \"https://api.turnkey.com\" },\n  stamper,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Update Result Types in TypeScript\nDESCRIPTION: This snippet specifies TypeScript types for various response results when updating user-related data, including user IDs and policy IDs. These types ensure that the responses from the API conform to expected structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResult: { policyId: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResultV2: { policyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining optional onSessionSelected callback\nDESCRIPTION: This code snippet defines the optional `onSessionSelected` callback function within the `TurnkeyConfig` interface. This function is triggered when a session is selected, and it receives the selected session as an argument.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * `optional` **onSessionSelected**: (`session`) => `void`\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:94](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L94)\n *\n * #### Parameters\n *\n * ##### session\n *\n * [`Session`](../type-aliases/Session.mdx)\n *\n * #### Returns\n *\n * `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeyTagsResult type\nDESCRIPTION: Defines the structure for the result of a private key tag deletion request, containing a list of private key IDs and private key tag IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeletePrivateKeyTagsResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1265\n\n#### privateKeyIds\n\n> **privateKeyIds**: `string`[]\n\n##### Description\n\nA list of Private Key IDs.\n\n#### privateKeyTagIds\n\n> **privateKeyTagIds**: `string`[]\n\n##### Description\n\nA list of Private Key Tag IDs.\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type for Activity Intents\nDESCRIPTION: Defines an intricate TypeScript Promise return type with multiple nested object structures representing different intent types and authentication scenarios\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createSubOrganization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; ... }}>\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_DOGE_MAINNET_ACCOUNTS\nDESCRIPTION: Defines a constant variable `DEFAULT_DOGE_MAINNET_ACCOUNTS` as an array of `WalletAccount` objects. This likely provides a set of default or example Dogecoin mainnet accounts for use with the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_DOGE_MAINNET_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n/**\n * @internal\n */\n\n/**\n * Default DOGE mainnet accounts.\n */\nexport const DEFAULT_DOGE_MAINNET_ACCOUNTS: WalletAccount[] = [\n  {\n    index: 0,\n    address: \"DDTm3Fjasc9kG5MmjvgzD9Gf1iRgyDqgXz\",\n    path: \"m/44'/3'/0'/0/0\",\n  },\n  {\n    index: 1,\n    address: \"DNU77iJjL3j2o5iJ8rU1Lz8m239C7Y8tYy\",\n    path: \"m/44'/3'/0'/0/1\",\n  },\n  {\n    index: 2,\n    address: \"DEjgzSJXJ9v4k7n9Qh98S4o5x7wz595n6b\",\n    path: \"m/44'/3'/0'/0/2\",\n  },\n  {\n    index: 3,\n    address: \"DQ9jDPM85Jmgw2j3j5hWbT4h97V8V25x2R\",\n    path: \"m/44'/3'/0'/0/3\",\n  },\n  {\n    index: 4,\n    address: \"D9R3f44V9E2t6VwG7h13Mh4T99v6fB9T9D\",\n    path: \"m/44'/3'/0'/0/4\",\n  },\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Type Definition for ExportWalletResult Interface\nDESCRIPTION: Defines the structure for the result of exporting a wallet, containing the export bundle and wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `exportBundle`: `string`; \n  `walletId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters of the GET organization API endpoint. Represents an object type with a body property of type TGetOrganizationBody. Used in POST requests to /public/v1/query/get_organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetOrganizationInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetPrivateKeysBody in TypeScript\nDESCRIPTION: This snippet defines a type alias called TGetPrivateKeysBody, which is utilized to represent the request body structure for the 'PublicApiService_GetPrivateKeys' operation. It is crucial for maintaining type safety when passing data to the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetPrivateKeysBody = operations[\\\"PublicApiService_GetPrivateKeys\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Recover User Request in TypeScript\nDESCRIPTION: Method signature for stampRecoverUser which prepares a signed request for user recovery. It accepts a TRecoverUserBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_101\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampRecoverUser(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: IframeStamper Configuration Type Definition\nDESCRIPTION: TypeScript type definition for the IframeStamper configuration object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype TIframeStamperConfig = {\n  iframeUrl: string;\n  iframeElementId: string;\n  iframeContainer: HTMLElement | null | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for SDK Documentation\nDESCRIPTION: A series of navigation links for the SDK documentation, providing a breadcrumb trail to the createReadWriteSession functionality within the TurnkeyApi documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createReadWriteSession\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete private key tags using the Turnkey SDK. It accepts an input of type TDeletePrivateKeyTagsBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeletePrivateKeyTags(input: TDeletePrivateKeyTagsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUsersInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteUsersInput type alias as an object with a single property 'body' of type TDeleteUsersBody. It is used for the POST request to the '/public/v1/submit/delete_users' endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUsersInput = object\n```\n\n----------------------------------------\n\nTITLE: Listing Private Key Tags using Turnkey API - TypeScript\nDESCRIPTION: The 'listPrivateKeyTags' function accepts an 'input' parameter of type 'TListPrivateKeyTagsInput' and returns a Promise that resolves to an object containing an array of private key tags. This function is relevant to developers interacting with the Turnkey API for managing private key associations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/listPrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction listPrivateKeyTags(input: TListPrivateKeyTagsInput): Promise<{ privateKeyTags: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Session Management Types in TypeScript\nDESCRIPTION: Type definitions for creating and managing read-only and read-write sessions including authentication and encryption parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateReadWriteSessionIntent {\n  apiKeyName?: string;\n  email: string;\n  expirationSeconds?: string;\n  targetPublicKey: string;\n}\n\ninterface v1CreateReadWriteSessionResult {\n  organizationId: string;\n  organizationName: string;\n  session: string;\n  sessionExpiry: string;\n  userId: string;\n  username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Creation Intent\nDESCRIPTION: This snippet provides field definitions for creating sub-organizations, such as disabling email recovery and OTP authentication mechanisms, defining root users and quorum thresholds, and setting up wallets with mnemonic length constraints. No specific dependencies are required, but a clear understanding of sub-organization requirements is necessary. Input types are boolean and numbers with outputs to configure sub-organization attributes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"disableEmailRecovery\\\": \\\"boolean\\\",\\n  \\\"disableOtpEmailAuth\\\": \\\"boolean\\\",\\n  \\\"disableSmsAuth\\\": \\\"boolean\\\",\\n  \\\"rootQuorumThreshold\\\": \\\"number\\\",\\n  \\\"rootUsers\\\": \\\"object[]\\\",\\n  \\\"subOrganizationName\\\": \\\"string\\\",\\n  \\\"wallet\\\": { \\\"accounts\\\": \\\"object[]\\\", \\\"mnemonicLength\\\": \\\"number\\\", \\\"walletName\\\": \\\"string\\\" }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPoliciesBody Type Alias in TypeScript\nDESCRIPTION: Type alias that references the request body parameters for the PublicApiService_GetPolicies operation. This type is used for the POST request to /public/v1/query/list_policies endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetPoliciesBody = operations[\"PublicApiService_GetPolicies\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Authenticators Request in TypeScript\nDESCRIPTION: Method to stamp a request for deleting authenticators. It takes an input of type TDeleteAuthenticatorsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteAuthenticators(input: TDeleteAuthenticatorsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAttestationDocumentInput Type Alias in TypeScript\nDESCRIPTION: Declaration of the TGetAttestationDocumentInput type alias which is an object containing a body property of type TGetAttestationDocumentBody. This type is used for making attestation document requests to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetAttestationDocumentInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteOauthProvidersIntent Interface in TypeScript\nDESCRIPTION: Outlines the structure for deleting OAuth providers, including a list of provider IDs and the associated user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeleteOauthProvidersIntent {\n  providerIds: string[];\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Verified Suborganization IDs with Turnkey API in TypeScript\nDESCRIPTION: This function retrieves all email or phone verified suborganization IDs associated with a parent organization ID. It makes a POST request to '/public/v1/query/list_verified_suborgs' endpoint and returns a Promise containing an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getVerifiedSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getVerifiedSubOrgIds: (input) => Promise<{ organizationIds: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetPrivateKeysResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias TGetPrivateKeysResponse that represents the expected structure of the response from the 'GetPrivateKeys' operation of the Turnkey API. It indicates that the response must conform to the schema outlined in the API documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetPrivateKeysResponse = operations[\\\"PublicApiService_GetPrivateKeys\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticators in TypeScript\nDESCRIPTION: The `deleteAuthenticators` function allows for the removal of authenticators by taking an input parameter of type `TDeleteAuthenticatorsBody`. It returns a Promise that resolves to an object confirming the deletions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteAuthenticators(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the request body structure used in the update wallet API endpoint. This type represents the parameters needed when making a POST request to '/public/v1/submit/update_wallet'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TUpdateWalletBody** = `operations`[`\"PublicApiService_UpdateWallet\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Creating Invitations in TypeScript SDK\nDESCRIPTION: The method 'stampCreateInvitations' is responsible for creating invitations. It receives a 'TCreateInvitationsBody' and returns a Promise resolving to an optional TSignedRequest. This function is derived from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateInvitations**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers in TypeScript\nDESCRIPTION: The `deleteOauthProviders` function removes specified OAuth providers. It takes input of type `TDeleteOauthProvidersBody` and returns a Promise that resolves to an object confirming the deletion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteOauthProviders(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intents and Result Structures\nDESCRIPTION: Complex TypeScript type definitions for various organizational and user management operations, covering authentication, wallet management, and system configurations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteOauthProviders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining TStamp Properties in TypeScript\nDESCRIPTION: Properties definition for the TStamp type alias, including stampHeaderName which is fixed as \"X-Stamp\" and stampHeaderValue which is a string value.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/type-aliases/TStamp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n**stampHeaderName**: `\"X-Stamp\"`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n**stampHeaderValue**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining type v1WalletParams\nDESCRIPTION: This snippet defines the type `v1WalletParams` as an object, representing the parameters needed to create a wallet. It includes fields for accounts, mnemonic length, and wallet name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1WalletParams**: `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for SDK API Response\nDESCRIPTION: This code defines a TypeScript type alias `TCreatePrivateKeysResponse` which combines the API operation schema for 'PublicApiService_CreatePrivateKeys' with a v1 activity response definition. It specifies the structure of a successful 200 response schema for the create private keys operation, ensuring compatibility with API interaction patterns. This definition relies on pre-existing operations and definitions derived from the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TCreatePrivateKeysResponse\" = \"operations\"\\[\\\"PublicApiService_CreatePrivateKeys\\\"\\]\\[\\\"responses\\\"\\]\\[\\\"200\\\"\\]\\[\\\"schema\\\"\\]\\[\\\"activity\\\"\\]\\[\\\"result\\\"\\]\\[\\\"createPrivateKeysResultV2\\\"\\] \\& \"definitions\"\\[\\\"v1ActivityResponse\\\"\\]\n```\n\n----------------------------------------\n\nTITLE: Defining TEmailAuthResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TEmailAuthResponse which represents the schema for a successful (200) response from the PublicApiService_EmailAuth operation. This type is used when handling responses from the /public/v1/submit/email_auth endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TEmailAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * TEmailAuthResponse = `operations`[`\"PublicApiService_EmailAuth\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n */\n```\n\n----------------------------------------\n\nTITLE: Deleting User Tags in Turnkey SDK\nDESCRIPTION: This function deletes user tags. It accepts a `TDeleteUserTagsBody` object as input and returns a Promise resolving to an object. It's part of the Turnkey Browser SDK and inherits from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteUserTags**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1703](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1703)\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Activity Results\nDESCRIPTION: This code defines TypeScript types for various activity results such as `createApiKeysResult`, `createUserResult`, `createPrivateKeyResult`, `signRawPayloadResult`, and many others. These types specify the structure of the data returned after performing certain activities within the system. Each type defines the properties and their corresponding types (e.g., string, array of strings, or object).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`esultV2`: \\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure for the setPaymentMethodResult, specifying the properties for cardHolderEmail, cardHolderName, and lastFour, all as strings. It standardizes the response format for payment method management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File for Turnkey SDK\nDESCRIPTION: Command to create a local environment file from an example template. This file will store API keys and configuration values needed for the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Results - TypeScript\nDESCRIPTION: These snippets define the structures for setting and removing organization features, which include features as an array of objects. This is vital for managing organizational capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 EIP191 Signature Scheme Constant in TypeScript\nDESCRIPTION: Declares a constant that represents the signature scheme identifier for SECP256K1 EIP191 signing used in the Turnkey API. This constant is used to specify the signing algorithm when making API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/variables/SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191: \"SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191\" = \"SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191\"\n```\n\n----------------------------------------\n\nTITLE: Defining the TExportPrivateKeyResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TExportPrivateKeyResponse type alias in TypeScript for handling responses from the PublicApiService_ExportPrivateKey operation. It combines the exportPrivateKeyResult with v1ActivityResponse definitions to form a detailed response schema. There are no additional dependencies required. Inputs are inferred from the schema components, and it outputs a structured response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TExportPrivateKeyResponse\" = `operations`\\[`\\\"PublicApiService_ExportPrivateKey\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`\\]\\[`\\\"activity\\\"`\\]\\[`\\\"result\\\"`\\]\\[`\\\"exportPrivateKeyResult\\\"`\\] & `definitions`\\[`\\\"v1ActivityResponse\\\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersInput Properties in TypeScript\nDESCRIPTION: Property definition for the TCreateUsersInput type, showing it contains a body of type TCreateUsersBody that needs to be provided when creating users through the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateUsersBody\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptInvitationIntentV2 Type in TypeScript\nDESCRIPTION: This snippet defines an updated version of the AcceptInvitationIntent type with more detailed attestation information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype AcceptInvitationIntentV2 = {\n  authenticator: {\n    attestation: {\n      attestationObject: string;\n      clientDataJson: string;\n      credentialId: string;\n      transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n    };\n    authenticatorName: string;\n    challenge: string;\n  };\n  invitationId: string;\n  userId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOauthProvidersResult Type - TypeScript\nDESCRIPTION: Describes the result of creating OAuth providers, specifically containing an array of provider IDs. This type is essential for the API response to correctly relay information back to the client.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOauthProvidersResult {\n  providerIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Body Property of TCreateSubOrganizationInput in TypeScript\nDESCRIPTION: This code snippet defines the 'body' property of the TCreateSubOrganizationInput type alias. The property is of type TCreateSubOrganizationBody, which contains the necessary information for creating a sub-organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateSubOrganizationBody\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteUsersResult type\nDESCRIPTION: Defines the structure for the result of a user deletion request, containing a list of user IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteUsersResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1339\n\n#### userIds\n\n> **userIds**: `string`[]\n\n##### Description\n\nA list of User IDs.\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Public API Request Body in TypeScript\nDESCRIPTION: This snippet defines the type alias TGetAttestationDocumentBody, which specifies the structure of the request body required by the 'PublicApiService_GetAttestationDocument' API endpoint. It is a part of the SDK's mechanism to interact with the API and ensures type safety when making HTTP requests. This is intended to be used with TypeScript projects that utilize the Turnkey SDK for server interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetAttestationDocumentBody = operations[\\\"PublicApiService_GetAttestationDocument\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts in Turnkey SDK\nDESCRIPTION: Method for creating wallet accounts with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWalletAccounts(input: TCreateWalletAccountsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions\nDESCRIPTION: TypeScript type definitions for activity statuses, activity types, and various operation results including private key tag updates, user management, and authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePrivateKeyTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  initOtpAuthResultV2: { otpId: string };\n  initUserEmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeyResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting a private key. It includes a privateKey object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPrivateKeyResponse: object\n{\n  privateKey: definitions[\"v1PrivateKey\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Sign Transaction Body in TypeScript\nDESCRIPTION: The TSignTransactionBody type alias represents the structure of a request body for the 'SignTransaction' operation in the public API service. It is part of the auto-generated code to interface with external APIs. This type alias is critical for ensuring that the data passed to the `POST /public/v1/submit/sign_transaction` endpoint is correctly structured according to the API's expectations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignTransactionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TSignTransactionBody = operations[\\\"PublicApiService_SignTransaction\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Define v1AuthenticatorTransport Type\nDESCRIPTION: Defines a TypeScript type alias named `v1AuthenticatorTransport` representing the possible values for authenticator transport types. These values include Bluetooth Low Energy (BLE), Internal, Near Field Communication (NFC), USB, and Hybrid. This type is likely used to specify the communication method used by an authenticator.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {(\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")} v1AuthenticatorTransport\n */\n```\n\n----------------------------------------\n\nTITLE: Running the Viem Script for ZeroDev Account Abstraction\nDESCRIPTION: Command to execute the Viem script that demonstrates Turnkey integration with ZeroDev for account abstraction transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-zerodev-aa/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start-viem\n```\n\n----------------------------------------\n\nTITLE: Defining the signUpdateUser function\nDESCRIPTION: This code snippet shows the definition of the `signUpdateUser` function. It takes `input` of type `TUpdateUserInput` and optional `options` of type `TurnkeyCredentialRequestOptions` and returns a `Promise` that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signUpdateUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signUpdateUser**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Declaration of signCreateWalletAccounts Function in TypeScript\nDESCRIPTION: Function definition for signCreateWalletAccounts that signs CreateWalletAccounts requests with WebAuthn assertion. It takes a TCreateWalletAccountsInput parameter and optional TurnkeyCredentialRequestOptions, returning a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signCreateWalletAccounts: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeysIntent Interface in TypeScript\nDESCRIPTION: Specifies the structure for the intent to delete private keys, including an optional flag to delete without export and a list of private key IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeletePrivateKeysIntent {\n  deleteWithoutExport?: boolean;\n  privateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createSubOrganizationIntentV4 Schema\nDESCRIPTION: Defines the structure and data types for the `createSubOrganizationIntentV4` object.  It includes properties for disabling email auth/recovery, setting root quorum, defining root users, naming the sub-organization, and configuring a wallet with accounts and mnemonic length.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_11\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\"\n```\n\n----------------------------------------\n\nTITLE: Creating API Keys - TypeScript\nDESCRIPTION: The `stampCreateApiKeys` function takes an input of type `TCreateApiKeysBody` and returns a promise that resolves to undefined or a `TSignedRequest` object, facilitating the creation of API keys within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateApiKeys(input: TCreateApiKeysBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TDeleteUserTagsBody in TypeScript\nDESCRIPTION: This code snippet defines a type alias TDeleteUserTagsBody used in the Turnkey SDK for the DeleteUserTags API operation. It extends the parameters required for the operation and includes additional command override parameters. The type alias is essential for ensuring the correct structure of the request body when invoking the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteUserTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TDeleteUserTagsBody = operations[\\\"PublicApiService_DeleteUserTags\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Write Session Intent V2 in TypeScript\nDESCRIPTION: Type definition for the second version of read-write session creation. Introduces options for invalidating existing sessions and uses userId instead of email for user identification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining API Operation Parameters for Create Wallet Accounts\nDESCRIPTION: This snippet outlines the parameters required for creating additional wallet accounts via a POST request to the API. It specifies the input type that must be provided, allowing for structured API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateWalletAccountsInput = {\n  // define required fields for wallet creation\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the otpAuthResult API response, similar to oauthResult, capturing apiKeyId, credentialBundle, and userId as strings. This structure is important for managing OTP-based authentications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining API Result Types in TypeScript\nDESCRIPTION: This snippet defines various result types for different API operations in the Turnkey SDK. It includes types for OTP authentication, user recovery, OAuth, and various organization and wallet management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining TActivityType Type Alias in TypeScript\nDESCRIPTION: This code defines a type alias named TActivityType which extracts the 'type' property from the TActivity interface. This allows for type-safe references to activity types within the Turnkey HTTP SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TActivityType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TActivityType = TActivity[\"type\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Private Keys Intent Types in TypeScript\nDESCRIPTION: Type definitions for creating private keys including structures for bulk key creation and key tagging operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{ `privateKeys`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Export Wallet Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for exporting complete wallets in the TurnKey SDK. Includes options for mnemonic language, wallet identification, and security parameters for encryption.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` | `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` | `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` | `\"MNEMONIC_LANGUAGE_CZECH\"` | `\"MNEMONIC_LANGUAGE_FRENCH\"` | `\"MNEMONIC_LANGUAGE_ITALIAN\"` | `\"MNEMONIC_LANGUAGE_JAPANESE\"` | `\"MNEMONIC_LANGUAGE_KOREAN\"` | `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Creating API Keys with TurnkeySDK in TypeScript\nDESCRIPTION: Method for creating a signed request to generate API keys. Takes a TCreateApiKeysBody input and returns a promise containing either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nstampCreateApiKeys(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enums in TypeScript\nDESCRIPTION: This snippet defines enums for activity statuses and types in the Coordinator API. It includes various status states like 'CREATED', 'PENDING', 'COMPLETED', and numerous activity types for different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_TRON_ACCOUNTS constant (Typescript)\nDESCRIPTION: This code snippet defines a constant variable named DEFAULT_TRON_ACCOUNTS. It is an array of WalletAccount objects, presumably representing default Tron accounts. The variable is located in the turnkey-helpers.ts file of the @turnkey/sdk-server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_TRON_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DEFAULT_TRON_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Promise Return Type for SDK Activities\nDESCRIPTION: Complex Promise type definition representing the structure of SDK activity responses, including approval flags, timestamps, and various intent types\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadOnlySession.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; ... } }>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Read-Only Session Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a read-only session. It takes an input of type TCreateReadOnlySessionBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateReadOnlySession(input: TCreateReadOnlySessionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Specifying TUpdateWalletInput Properties in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TUpdateWalletInput type. It has a single property 'body' of type TUpdateWalletBody, which likely contains the necessary information for updating a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TUpdateWalletBody\n```\n\n----------------------------------------\n\nTITLE: TSetOrganizationFeatureBody Type Alias\nDESCRIPTION: Defines the TSetOrganizationFeatureBody type alias, which is equivalent to the body parameter of the PublicApiService_SetOrganizationFeature operation. This type is used when making a POST request to the /public/v1/submit/set_organization_feature endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TSetOrganizationFeatureBody** = `operations`\\[`\"PublicApiService_SetOrganizationFeature\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Regtest P2SH Accounts\nDESCRIPTION: Declares a constant array of wallet accounts for Bitcoin regtest network with P2SH address type. Used for testing and development purposes in a local Bitcoin regtest environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2SH_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Defining Result Types for TurnKey SDK Operations in TypeScript\nDESCRIPTION: This code snippet defines a large object containing various result types for different operations in the TurnKey SDK. It includes structures for operations like accepting invitations, creating API keys, managing organizations, handling policies, and managing private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; };\n  `activateBillingTierResult`: { `productId`: `string`; };\n  `createApiKeysResult`: { `apiKeyIds`: `string`[]; };\n  `createApiOnlyUsersResult`: { `userIds`: `string`[]; };\n  `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; };\n  `createInvitationsResult`: { `invitationIds`: `string`[]; };\n  `createOauthProvidersResult`: { `providerIds`: `string`[]; };\n  `createOrganizationResult`: { `organizationId`: `string`; };\n  `createPoliciesResult`: { `policyIds`: `string`[]; };\n  `createPolicyResult`: { `policyId`: `string`; };\n  `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; };\n  `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; };\n  `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; };\n  `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; };\n  `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; };\n  // ... (additional result types omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the stampSignTransaction Method in TypeScript\nDESCRIPTION: Method declaration for stampSignTransaction that signs a transaction and returns a promise with the signed request. Takes a TSignTransactionBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_119\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampSignTransaction(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for Payment Methods\nDESCRIPTION: This snippet outlines the structure for managing payment methods, including the associated cardholder information such as email, name, and the last four digits of the credit card. It provides a thorough explanation of the fields required for updating payment methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_97\n\nLANGUAGE: JSON\nCODE:\n```\nresult.setPaymentMethodResult?\n{ cardHolderEmail: string; cardHolderName: string; lastFour: string; }\n\nresult.setPaymentMethodResult.cardHolderEmail\n\nstring\n\nDescription\n\nThe email address associated with the payment method.\n\nresult.setPaymentMethodResult.cardHolderName\n\nstring\n\nDescription\n\nThe name associated with the payment method.\n\nresult.setPaymentMethodResult.lastFour\n\nstring\n\nDescription\n\nThe last four digits of the credit card added.\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Wallet Import Response in TypeScript\nDESCRIPTION: This TypeScript snippet defines a type alias `TImportWalletResponse` which represents the response schema for the `POST /public/v1/submit/import_wallet` API operation. This alias is used to standardize and enforce the structure of API responses within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TImportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TImportWalletResponse = operations[\\\"PublicApiService_ImportWallet\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Activity Return Type in TypeScript\nDESCRIPTION: This snippet defines a complex return type for a Promise related to an activity. It includes nested objects for various properties such as canApprove, canReject, createdAt, failure, and a large intent object with multiple possible intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n            clientExtensionResults: { \n              appid: boolean; \n              appidExclude: boolean; \n              credProps: { \n                rk: ...; \n              }; \n            }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n              clientDataJson: string; \n              transports: ...[]; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      // ... (other intent types omitted for brevity)\n    }; \n  }; \n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountsBody Type Alias in TypeScript\nDESCRIPTION: This TypeScript type alias 'TGetWalletAccountsBody' is defined to represent a modified structure based on the 'PublicApiService_GetWalletAccounts' operation parameters. It omits the 'organizationId' from the original type structure and combines it with 'queryOverrideParams'. This alias is crucial for API operations that fetch wallet accounts, ensuring correct parameter usage in the SDK. The type alias is auto-generated and part of the SDK API types used in server-side operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletAccountsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetWalletAccountsBody = Omit<operations[\"PublicApiService_GetWalletAccounts\"][\"parameters\"][\"body\"][\"body\"], \"organizationId\"> & queryOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteApiKeysBody type alias. It is derived from the 'body' property of the request parameters for the PublicApiService_DeleteApiKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteApiKeysBody = operations[\"PublicApiService_DeleteApiKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Statuses in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for activity statuses and types used in the TurnKey SDK API. It includes various activity statuses and a comprehensive list of activity types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importPrivateKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Uncompressing Raw Public Key in TypeScript\nDESCRIPTION: This function accepts a compressed public key as a Uint8Array and returns the uncompressed version of the public key. It's defined in the crypto.ts file of the @turnkey/crypto package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/uncompressRawPublicKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuncompressRawPublicKey(rawPublicKey: Uint8Array): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteApiKeysResponse type alias, which is derived from the response schema of the PublicApiService_DeleteApiKeys operation. It represents the structure of the response when deleting API keys via the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteApiKeysResponse = operations[\"PublicApiService_DeleteApiKeys\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers Intent\nDESCRIPTION: This snippet outlines the intent for removing OAuth providers from a user, helping to manage user authentication services effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteOauthProvidersIntent? \\n\\{ `providerIds`: `string`[]; `userId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteOauthProvidersIntent.providerIds \\n`string`[] \\n\\n**Description** \\nUnique identifier for a given Provider.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteOauthProvidersIntent.userId \\n`string` \\n\\n**Description** \\nThe ID of the User to remove an Oauth provider from.\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Authenticators Request in TypeScript\nDESCRIPTION: This method stamps a request to delete authenticators. It takes a TDeleteAuthenticatorsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteAuthenticators(input: TDeleteAuthenticatorsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: WebauthnStamper Properties Definition\nDESCRIPTION: Class properties for WebauthnStamper including rpId, timeout, userVerification, and allowCredentials array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/index/classes/WebauthnStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrpId: string;\ntimeout: number;\nuserVerification: UserVerificationRequirement;\nallowCredentials: PublicKeyCredentialDescriptor[];\n```\n\n----------------------------------------\n\nTITLE: Login with Read-Write Session\nDESCRIPTION: Creates a read-write session by inferring the current user's organization ID and target userId. Used with iframeStamper to create a session for both read and write requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginWithReadWriteSession(targetEmbeddedKey, expirationSeconds, userId?): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Alternative Manual Contract Import in TypeScript\nDESCRIPTION: Code snippet demonstrating how to manually import a compiled contract's ABI and bytecode instead of using the built-in compiler.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/deployer/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst abi = require(\"<some-abi.json>\");\nconst bytecode = fs.readFileSync(\"<some-compiled-contract.bin>\").toString();\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysBody Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TDeleteApiKeysBody type alias, which is derived from the body parameter of the PublicApiService_DeleteApiKeys operation. It is used for the POST request to delete API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteApiKeysBody = operations[\"PublicApiService_DeleteApiKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Using Sign Raw Payloads Endpoint in Turnkey SDK\nDESCRIPTION: Documentation for the sign_raw_payloads endpoint which allows signing multiple raw payloads with the same signing parameters. The endpoint is accessed via POST to /public/v1/submit/sign_raw_payloads.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayloads.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nSign Raw Payloads\n\nSign multiple raw payloads with the same signing parameters\n\n`POST /public/v1/submit/sign_raw_payloads`\n\n## Parameters\n\n### input\n\n[`TSignRawPayloadsInput`](../type-aliases/TSignRawPayloadsInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Updating User Tag using SDK in JavaScript\nDESCRIPTION: The `updateUserTag` function returns a promise that handles updates to user tags within an SDK. It involves detailed structures for various intents including invitations, billing, policy creation, and more. The promise resolves with an activity object containing details like approval status, creation timestamps, and failure information. Dependencies include a JavaScript environment capable of handling promises.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n`const` **updateUserTag**: (`input`) => `Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` \\| `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` \\| `\"MNEMONIC_LANGUAGE_CZECH\"` \\| `\"MNEMONIC_LANGUAGE_FRENCH\"` \\| `\"MNEMONIC_LANGUAGE_ITALIAN\"` \\| `\"MNEMONIC_LANGUAGE_JAPANESE\"` \\| `\"MNEMONIC_LANGUAGE_KOREAN\"` \\| `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` \\| `\"ADDRESS_FORMAT_COMPRESSED\"` \\| `\"ADDRESS_FORMAT_ETHEREUM\"` \\| `\"ADDRESS_FORMAT_SOLANA\"` \\| `\"ADDRESS_FORMAT_COSMOS\"` \\| `\"ADDRESS_FORMAT_TRON\"` \\| `\"ADDRESS_FORMAT_SUI\"` \\| `\"ADDRESS_FORMAT_APTOS\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: \"CURVE_SECP256K1\"]`\\};`\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationInput Type Alias in TypeScript\nDESCRIPTION: Defines the TDeleteInvitationInput type alias as an object with a body property of type TDeleteInvitationBody. This type is used for the POST request to the /public/v1/submit/delete_invitation endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteInvitationInput = object\n```\n\n----------------------------------------\n\nTITLE: TCreateApiOnlyUsersBody Type Alias Definition\nDESCRIPTION: Defines the `TCreateApiOnlyUsersBody` type alias in TypeScript. This alias is a combination of the request body parameters for the `PublicApiService_CreateApiOnlyUsers` operation and the `commandOverrideParams` type, which allows for overriding default command parameters when creating API-only users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateApiOnlyUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type Alias: TCreateApiOnlyUsersBody\\n\\n> **TCreateApiOnlyUsersBody** = `operations`\\[`\\\"PublicApiService_CreateApiOnlyUsers\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"parameters\\\"`\\] & `commandOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserResponse Type Alias in TypeScript\nDESCRIPTION: Type definition for TRecoverUserResponse that combines the result of the PublicApiService_RecoverUser operation with the v1ActivityResponse definition. This type represents the response format when recovering a user account through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRecoverUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TRecoverUserResponse** = `operations`[`\"PublicApiService_RecoverUser\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"recoverUserResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Activities\nDESCRIPTION: Defines various TypeScript types related to activity statuses (e.g., CREATED, PENDING, COMPLETED, FAILED, etc.), activity types (e.g., CREATE_USERS, SIGN_RAW_PAYLOAD, DELETE_ORGANIZATION, etc.) and results associated with different actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteSubOrganization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Update User Intent Structure - TypeScript\nDESCRIPTION: This snippet specifies the structure for the Update User intent, including user details such as userEmail, userId, userName, and userPhoneNumber. It serves to update existing user profiles in the wallet management system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Function Definition for signUpdatePrivateKeyTag in Turnkey HTTP API\nDESCRIPTION: This function requests a WebAuthn assertion and returns a signed UpdatePrivateKeyTag request that can be sent to Turnkey. It takes an input object of type TUpdatePrivateKeyTagInput and optional credential request options, returning a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signUpdatePrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**signUpdatePrivateKeyTag**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Authenticators with SDK Client\nDESCRIPTION: The stampGetAuthenticators method retrieves multiple authenticators using an input of type TGetAuthenticatorsBody. It resolves a Promise to either undefined or a TSignedRequest, enabling handling of multiple authenticator information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetAuthenticators**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Intents\nDESCRIPTION: This snippet defines TypeScript types for various intents used in the SDK. These intents represent different actions or operations that can be performed, such as creating API keys, importing wallets, signing transactions, and managing organization features. Each type specifies the required and optional properties for the corresponding intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; \\}; `setOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\};\n```\n\n----------------------------------------\n\nTITLE: Stamping Policies Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get multiple policies. Takes a TGetPoliciesBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPolicies(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize OTP Authentication Request in TypeScript\nDESCRIPTION: Method signature for stampInitOtpAuth which prepares a signed request for initializing OTP authentication. It accepts a TInitOtpAuthBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitOtpAuth(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeysInput Type Alias in TypeScript\nDESCRIPTION: Defines the TGetApiKeysInput type alias as an object with a body property of type TGetApiKeysBody. This type is used for the POST request to the /public/v1/query/get_api_keys endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetApiKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadInput Type Alias Definition\nDESCRIPTION: Defines the structure of the `TSignRawPayloadInput` type alias as an object with a `body` property of type `TSignRawPayloadBody`. This input is intended for the `POST /public/v1/submit/sign_raw_payload` endpoint. It represents the expected request body for signing a raw payload.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TSignRawPayloadInput** = `object`\"\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with signCreateWalletAccounts in TypeScript\nDESCRIPTION: The function signCreateWalletAccounts requests a WebAuthn assertion and returns a signed CreateWalletAccounts request. It accepts an input of type TCreateWalletAccountsInput and an optional parameter options of type TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest, which can be POSTed to Turnkey. Ensure that the necessary type aliases are imported before using the function.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signCreateWalletAccounts**(`input`, `options`?): `Promise`\\u003c[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\u003e\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.ts:2052](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2052)\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Turnkey API SDK\nDESCRIPTION: This code snippet defines TypeScript interfaces for various intents and results used in the Turnkey API SDK. It includes types for operations like creating users, managing wallets, authentication, and organization settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivateKeyName: string;\nuserId: string;\n};\nimportWalletIntent: {\naccounts: object[];\nencryptedBundle: string;\nuserId: string;\nwalletName: string;\n};\ninitImportPrivateKeyIntent: {\nuserId: string;\n};\ninitImportWalletIntent: {\nuserId: string;\n};\ninitOtpAuthIntent: {\ncontact: string;\nemailCustomization: {\nappName: string;\nlogoUrl: string;\nmagicLinkTemplate: string;\ntemplateId: string;\ntemplateVariables: string;\n};\notpType: string;\nsendFromEmailAddress: string;\nsendFromEmailSenderName: string;\nsmsCustomization: {\ntemplate: string;\n};\nuserIdentifier: string;\n};\n// ... (more interface definitions)\norganizationId: string;\nresult: {\nacceptInvitationResult: {\ninvitationId: string;\nuserId: string;\n};\nactivateBillingTierResult: {\nproductId: string;\n};\ncreateApiKeysResult: {\napiKeyIds: string[];\n};\n// ... (more result definitions)\nsignRawPayloadResult: {\nr: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPolicyBody Type Alias\nDESCRIPTION: Defines a type alias named TGetPolicyBody, which represents the structure of the request body for retrieving a policy using the PublicApiService_GetPolicy operation. It uses Omit to exclude the \"organizationId\" property from the original body type and then combines it with queryOverrideParams.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TGetPolicyBody\n *\n * > **TGetPolicyBody** = `Omit`\\<`operations`[`\"PublicApiService_GetPolicy\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`\\> & `queryOverrideParams`\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:118](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L118)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias - TypeScript\nDESCRIPTION: This snippet defines a type alias named 'TDeletePrivateKeyTagsResponse', which represents the schema of the response from the 'PublicApiService_DeletePrivateKeyTags' operation. It combines response types and schemas to ensure that the response structure adheres to the expected format. No external dependencies are required for this type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePrivateKeyTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TDeletePrivateKeyTagsResponse = operations[\\\"PublicApiService_DeletePrivateKeyTags\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"deletePrivateKeyTagsResult\\\"] & definitions[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS in Turnkey SDK Browser (TypeScript)\nDESCRIPTION: This code snippet defines the DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS constant, which is an array of WalletAccount objects. It's used in the Turnkey SDK Browser to provide default accounts for Bitcoin testnet P2TR (Pay-to-Taproot) transactions. This likely simplifies initial setup or provides example accounts for developers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @public\n */\nexport const DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS: WalletAccount[] = [\n  {\n    address: \"tb1p0xlxakdvz6mzf64hcw9v9yam824j4ffjk920zyqt49vlv6lzvwsrq8l3gt\",\n    description: \"Bitcoin Testnet P2TR Account #1\",\n  },\n  {\n    address: \"tb1p0se3kp7qqw9v4x3xge9q8x9936c65v8q7a89y4h5z322vqvz4lqvs42mg\",\n    description: \"Bitcoin Testnet P2TR Account #2\",\n  },\n  {\n    address: \"tb1p0w3svkef5624409ywnp5q2j56n3p266m434m7n42y0l25v4aavhqzcvq5\",\n    description: \"Bitcoin Testnet P2TR Account #3\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Key-Value Storage Operations\nDESCRIPTION: Implements basic key-value storage methods for setting, getting, and clearing items in the Telegram cloud storage context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/classes/TelegramCloudStorageStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: string): Promise<void>\ngetItem(key: string): Promise<string>\nclearItem(key: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining v1Invitation Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for an invitation object, containing properties for invitation identifiers, sender/receiver information, access types, status, and timestamps.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1Invitation\n\n> **v1Invitation**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1997\n\n#### accessType\n\n> **accessType**: `definitions`[`\"v1AccessType\"`]\n\n##### Description\n\nThe User's permissible access method(s).\n\n#### createdAt\n\n> **createdAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n\n#### invitationId\n\n> **invitationId**: `string`\n\n##### Description\n\nUnique identifier for a given Invitation object.\n\n#### receiverEmail\n\n> **receiverEmail**: `string`\n\n##### Description\n\nThe email address of the intended Invitation recipient.\n\n#### receiverUserName\n\n> **receiverUserName**: `string`\n\n##### Description\n\nThe name of the intended Invitation recipient.\n\n#### receiverUserTags\n\n> **receiverUserTags**: `string`[]\n\n##### Description\n\nA list of tags assigned to the Invitation recipient.\n\n#### senderUserId\n\n> **senderUserId**: `string`\n\n##### Description\n\nUnique identifier for the Sender of an Invitation.\n\n#### status\n\n> **status**: `definitions`[`\"v1InvitationStatus\"`]\n\n##### Description\n\nThe current processing status of a specified Invitation.\n\n#### updatedAt\n\n> **updatedAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n```\n\n----------------------------------------\n\nTITLE: Activity Status Enum Type Definition\nDESCRIPTION: TypeScript type definition for possible activity statuses in the system, ranging from created to completed states.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1ActivityStatus = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Response Type in TypeScript\nDESCRIPTION: Type alias that specifies the response schema for creating a sub-organization through the Turnkey Public API Service. Represents the successful response structure for a POST request to /public/v1/submit/create_sub_organization endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateSubOrganizationResponse = operations[\"PublicApiService_CreateSubOrganization\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetAuthenticatorInput in TypeScript\nDESCRIPTION: This snippet defines the type alias TGetAuthenticatorInput as an object, specifically structured for use within the Turnkey SDK. The main property, 'body', is of type TGetAuthenticatorBody. This type definition is essential for ensuring that input adheres to expected formats and structures in authentication processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetAuthenticatorInput = object;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Intent in JavaScript\nDESCRIPTION: This snippet outlines the intent for updating policies, including conditions, consensus, effect, name, notes, and ID. It's utilized for modifying or establishing new policies in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/removeOrganizationFeature.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n`updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteUserTagsResult type\nDESCRIPTION: Defines the structure for the result of a user tag deletion request, containing a list of user IDs and user tag IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteUserTagsResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1320\n\n#### userIds\n\n> **userIds**: `string`[]\n\n##### Description\n\nA list of User IDs.\n\n#### userTagIds\n\n> **userTagIds**: `string`[]\n\n##### Description\n\nA list of User Tag IDs.\n```\n\n----------------------------------------\n\nTITLE: Defining ReadWriteSessionRequest Object Definition in TypeScript\nDESCRIPTION: Defines the structure for a request to create a read-write session, including organization ID and request parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nv1CreateReadWriteSessionRequest: object\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:877\n\norganizationId: string // Unique identifier for a given Organization.\nparameters: definitions[\"v1CreateReadWriteSessionIntentV2\"]\ntimestampMs: string // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\ntype: \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing IframeStamper\nDESCRIPTION: Example of creating and initializing an IframeStamper instance with the required configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { TurnkeyClient } from \"@turnkey/http\";\n\nconst TurnkeyIframeContainerId = \"turnkey-iframe-container\";\nconst TurnkeyIframeElementId = \"turnkey-iframe\";\n\nconst iframeStamper = new IframeStamper({\n  iframeUrl: process.env.IFRAME_URL!,\n  iframeContainer: document.getElementById(TurnkeyIframeContainerId),\n  iframeElementId: TurnkeyIframeElementId,\n});\n\n// This inserts the iframe in the DOM and returns the public key\nconst publicKey = await iframeStamper.init();\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateOauthProvidersInput Type Alias in TypeScript\nDESCRIPTION: The TCreateOauthProvidersInput type alias is defined as an object that includes properties for creating OAuth providers. The main property is 'body', which is itself of type TCreateOauthProvidersBody. This structure outlines the input requirements for OAuth provider creation and ensures type safety in TypeScript.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateOauthProvidersInput = {\\n  body: TCreateOauthProvidersBody\\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting a Signed API Key with WebAuthn Assertion\nDESCRIPTION: The signGetApiKey function requests a WebAuthn assertion, constructs a signed GetApiKey request, and returns it as a Promise. It accepts input parameters of type TGetApiKeyInput and optional TurnkeyCredentialRequestOptions. The output is a Promise resolving to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function signGetApiKey(input: TGetApiKeyInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest> {\n    // Implementation to request WebAuthn assertion and return signed GetApiKey request\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Key: AuthBundle definition\nDESCRIPTION: Defines the 'AuthBundle' member of the `StorageKeys` enumeration. It uses the string literal \"@turnkey/auth_bundle\" as the key for storing the authentication bundle in the browser's storage. This key is used to persist the authentication state of the user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **AuthBundle**: `\"@turnkey/auth_bundle\"`\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeysIntent Structure in TypeScript\nDESCRIPTION: Defines the intent structure for deleting private keys, which includes a list of private key IDs to be deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePrivateKeysIntent {\n    deleteWithoutExport?: boolean;\n    privateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Interface in TypeScript\nDESCRIPTION: Comprehensive TypeScript interface for various intent types including authentication, organization management, and user operations. All fields are optional.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1Intent = {\n  acceptInvitationIntent?: definitions[\"v1AcceptInvitationIntent\"];\n  createApiKeysIntent?: definitions[\"v1CreateApiKeysIntent\"];\n  createOrganizationIntent?: definitions[\"v1CreateOrganizationIntent\"];\n  emailAuthIntent?: definitions[\"v1EmailAuthIntent\"];\n  // ... additional intent properties\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified Suborganizations in Turnkey SDK\nDESCRIPTION: Method for fetching verified suborganizations based on the provided request. Returns a promise resolving to a GetSuborgsResponse or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetVerifiedSuborgs: (request: GetSuborgsRequest) => Promise<undefined | GetSuborgsResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining EmailRecoveryResult Structure in TypeScript\nDESCRIPTION: Defines the structure for email recovery results, including userId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: \\{ `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Activity Type Definitions - TypeScript\nDESCRIPTION: Defines TypeScript types and enums for activity statuses, types, and result structures in the Turnkey SDK. Includes definitions for various activity results like OTP authentication, OAuth, user management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{ `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Creating Policies in TypeScript SDK\nDESCRIPTION: The function 'stampCreatePolicies' facilitates policy creation, accepting 'TCreatePoliciesBody' as an input parameter and returning a Promise that may resolve to a TSignedRequest. It inherits from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreatePolicies**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining updatePolicyIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating a policy in an organization. It includes fields for specifying the policy ID, name, notes, condition, consensus, and effect (ALLOW or DENY).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUserBody Type Alias\nDESCRIPTION: Defines the TGetUserBody type alias, which is used to represent the expected structure of the request body when calling the PublicApiService_GetUser endpoint. It references the generated types from the OpenAPI specification for the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetUserBody** = `operations`\\[`\"PublicApiService_GetUser\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: TGetOrganizationConfigsResponse Type Alias\nDESCRIPTION: Defines the TGetOrganizationConfigsResponse type alias which represents the response schema for a successful (200) request to the PublicApiService_GetOrganizationConfigs endpoint. It is located in the sdk_api_types.ts file within the @turnkey/sdk-server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOrganizationConfigsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetOrganizationConfigsResponse** = `operations`[`\"PublicApiService_GetOrganizationConfigs\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface: Root User Parameters\nDESCRIPTION: Interface definition for root user parameters including API keys, authenticators and user details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1RootUserParams {\n  apiKeys: definitions[\"apiApiKeyParams\"][]; // List of API Key parameters\n  authenticators: definitions[\"v1AuthenticatorParamsV2\"][]; // List of Authenticator parameters\n  userEmail?: string; // Optional user email address\n  userName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Activity Statuses and Types\nDESCRIPTION: Comprehensive type definitions for activity statuses, activity types, and result structures used in the Turnkey SDK. This includes types for operations like creating API keys, users, signing transactions, managing policies, and many other platform functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n`s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Response Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for a v1 Activity Response, representing an activity that can be taken within the Turnkey infrastructure. It references the 'v1Activity' type from definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ActivityResponse**: `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:475\n\n#### activity\n\n> **activity**: `definitions`[`\"v1Activity\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersInput Type in TypeScript\nDESCRIPTION: Type definition for user creation input parameters. Defines a required body property of type TCreateUsersBody that contains the necessary data for creating users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateUsersInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Result Structures in TypeScript\nDESCRIPTION: Defines the structure for updating policy results, including policyId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicyResult`: \\{ `policyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateAuthenticatorsIntentV2 Type\nDESCRIPTION: Defines the structure for the `v1CreateAuthenticatorsIntentV2` object, representing the intent to create authenticators (version 2). It contains an array of `v1AuthenticatorParamsV2` and a `userId`. This intent is used in newer API calls to the Coordinator service for creating authenticators for a specific user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateAuthenticatorsIntentV2\n * @property {definitions[\"v1AuthenticatorParamsV2\"][]} authenticators A list of Authenticators.\n * @property {string} userId Unique identifier for a given User.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePoliciesInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters of the create policies API endpoint. It specifies an object type with a required body property of type TCreatePoliciesBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePoliciesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreatePoliciesInput = object\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TCreatePoliciesBody\n```\n\n----------------------------------------\n\nTITLE: TGetPolicyInput Properties Definition\nDESCRIPTION: Property definition for the body field of TGetPolicyInput type, which must be of type TGetPolicyBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPolicyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetPolicyBody\n```\n\n----------------------------------------\n\nTITLE: Token Property Explanation\nDESCRIPTION: The token is generated by createReadOnlySession method and used in X-Session header for read-only API requests\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/interfaces/ReadOnlySession.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** Token generated for read-only API requests */\ntoken: string;\n```\n\n----------------------------------------\n\nTITLE: OAuth Intent Type Definition\nDESCRIPTION: Type definition for OAuth authentication intent including API key naming, token configuration, and public key requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `apiKeyName`: `string`; \n  `expirationSeconds`: `string`; \n  `invalidateExisting`: `boolean`; \n  `oidcToken`: `string`; \n  `targetPublicKey`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Intent in TypeScript\nDESCRIPTION: This snippet defines the 'initUserEmailRecoveryIntent' structure used for initiating user email recovery processes. It includes customization options such as application name, logo URL, and target public key, essential for personalized recovery emails.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Result Structures\nDESCRIPTION: This snippet defines the formats for results related to updating policies in the application, detailing the identifiers that indicate which policy has been updated.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining User Creation Intent (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateUsersIntentV3, which defines the parameters for creating multiple users. It includes an array of user parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateUsersIntentV3 {\n  users: definitions[\"v1UserParamsV3\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Delete Wallets Response - TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TDeleteWalletsResponse which represents the structure of the response returned by the 'delete_wallets' operation of the Public API Service. It ensures that the correct type is used throughout the codebase when handling this API response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteWalletsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TDeleteWalletsResponse = operations[\\\"PublicApiService_DeleteWallets\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateInvitationsIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for creating invitations, including a list of invitation objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateInvitationsIntent = {\n  invitations: object[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for SDK Intents and Results\nDESCRIPTION: This code snippet defines a large number of TypeScript types for various intents and results used in the SDK. It includes types for operations such as importing wallets, authenticating users, managing organizations, and signing transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeyTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivateKeyName: string;\nuserId: string;\n};\nimportWalletIntent: {\naccounts: object[];\nencryptedBundle: string;\nuserId: string;\nwalletName: string;\n};\ninitImportPrivateKeyIntent: {\nuserId: string;\n};\ninitImportWalletIntent: {\nuserId: string;\n};\ninitOtpAuthIntent: {\ncontact: string;\nemailCustomization: {\nappName: string;\nlogoUrl: string;\nmagicLinkTemplate: string;\ntemplateId: string;\ntemplateVariables: string;\n};\notpType: string;\nsendFromEmailAddress: string;\nsendFromEmailSenderName: string;\nsmsCustomization: {\ntemplate: string;\n};\nuserIdentifier: string;\n};\n// ... (additional type definitions)\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Recover User Authenticator\nDESCRIPTION: Defines the structure for the authenticator object within the `recoverUserIntent`. It includes attestation data, the authenticator's name, and a challenge string, enabling the registration of a new authenticator during user recovery.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_26\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\\\"AUTHENTICATOR_TRANSPORT_BLE\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_NFC\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_USB\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadOnlySessionBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the request body for creating a read-only session via the Turnkey API. It maps to the body parameters of the PublicApiService_CreateReadOnlySession operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadOnlySessionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateReadOnlySessionBody** = `operations`[`\"PublicApiService_CreateReadOnlySession\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Private Keys Deletion Result Structure\nDESCRIPTION: This snippet describes the 'deletePrivateKeysResult', which encapsulates a list of unique identifiers for deleted private keys, formatted as an array of strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_81\n\nLANGUAGE: json\nCODE:\n```\nresult.deletePrivateKeysResult?\n\\{ `privateKeyIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Init Import Private Key Intent - JavaScript\nDESCRIPTION: This snippet describes the `initImportPrivateKeyIntent`, which includes necessary user identification for starting the import process of private keys. It's intended for authenticating a user who is importing their private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitImportPrivateKeyIntent: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Organization Feature Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for stamping requests to set or remove organization features. These methods prepare signed requests for organization feature management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_125\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampSetOrganizationFeature(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampRemoveOrganizationFeature(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Organization Configs Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get organization configurations. Takes a TGetOrganizationConfigsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOrganizationConfigs(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Email Customization Types in TypeScript\nDESCRIPTION: Type definitions for email customization parameters including app name, logo URL, and template variables.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1EmailCustomizationParams {\n  appName?: string;\n  logoUrl?: string;\n  magicLinkTemplate?: string;\n  templateId?: string;\n  templateVariables?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserIntent Interface in TypeScript\nDESCRIPTION: Interface for updating user information including email, name, phone number, and associated tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{ userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TSetOrganizationFeatureInput in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias called TSetOrganizationFeatureInput, which is structured as an object that will be used for the body property in the POST request to set organization features. It relies on another type, TSetOrganizationFeatureBody, to define the expected structure of the body of the request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TSetOrganizationFeatureInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Attestation Object Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure of an attestation object in the context of WebAuthn, capturing crucial elements such as the attestation object and client data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1Attestation {\n  attestationObject: string;\n  clientDataJson: string;\n  credentialId: string;\n  transports: definitions[\"v1AuthenticatorTransport\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Only User Parameters Structure - TypeScript\nDESCRIPTION: This snippet outlines the structure for creating an API-only user, including key parameters such as associated API Keys, optional email, username, and user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ApiOnlyUserParams**: `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:512\n\n#### apiKeys\n\n> **apiKeys**: `definitions`[`\"apiApiKeyParams\"`][]\n\n##### Description\n\nA list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\n#### userEmail?\n\n> `optional` **userEmail**: `string`\n\n##### Description\n\nThe email address for this API-only User (optional).\n\n#### userName\n\n> **userName**: `string`\n\n##### Description\n\nThe name of the new API-only User.\n\n#### userTags\n\n> **userTags**: `string[]`\n\n##### Description\n\nA list of tags assigned to the new API-only User. This field, if not needed, should be an empty array in your request body.\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Tatum SDK Coordinator API\nDESCRIPTION: This code snippet defines complex TypeScript types for various API responses and input types used in the Tatum SDK Coordinator API. It includes types for activity results, statuses, and specific API endpoints like deleting wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nr`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure - TypeScript\nDESCRIPTION: Defines the structure for OAuth results including an API key ID, a credential bundle, and a user ID. This structure is essential for handling OAuth authentication processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: UserVerificationRequirement Type Definition\nDESCRIPTION: TypeScript type definition for user verification requirements in WebAuthn authentication, supporting 'discouraged', 'preferred', or 'required' values.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntype UserVerificationRequirement = \"discouraged\" | \"preferred\" | \"required\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Passkey in JavaScript\nDESCRIPTION: Example of using TurnkeyBrowserClient to authenticate a user with a Passkey and create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\nconst iframeClient = await turnkeySDK.iframeClient();\n\n// Authenticate with a passkey to create a read-write session\nconst session = await browserClient.loginWithPasskey({\n  sessionType: \"READ_WRITE\",\n  iframeClient: iframeClient,\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadResult Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadResult` as an object type representing the result of signing a raw payload. It contains `r`, `s`, and `v` components of an ECDSA signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadResult\n\n> **v1SignRawPayloadResult**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2441\n\n#### r\n\n> **r**: `string`\n\n##### Description\n\nComponent of an ECSDA signature.\n\n#### s\n\n> **s**: `string`\n\n##### Description\n\nComponent of an ECSDA signature.\n\n#### v\n\n> **v**: `string`\n\n##### Description\n\nComponent of an ECSDA signature.\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Structure for Activity and Authenticator Intents in TypeScript\nDESCRIPTION: This TypeScript snippet defines a promise structure outlining a comprehensive set of activity and authenticator intents within an SDK environment. It includes operations like accepting invitations, creating users, and managing organizations. Prerequisites include a deep understanding of how promises work in JavaScript/TypeScript and familiarity with the JSON data structure. The promise resolves with an object containing numerous nested properties, representing different intents and configurations, and utilizes TypeScript's type system for enhanced data structure validation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` | `\"platform\"` | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` | `\"platform\"` | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2\": \\{...\\}\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Structure for approveActivity Method\nDESCRIPTION: Shows the navigation path hierarchy within the SDK documentation leading to the approveActivity method documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / approveActivity\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyProvider React Component\nDESCRIPTION: The TurnkeyProvider variable is a React Functional Component defined to provide shared context features in the SDK-react package. It requires the TurnkeyProviderProps for initialization and is located in the src/contexts/TurnkeyContext.tsx of the SDK. No external dependencies are explicitly mentioned apart from React standards.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/TurnkeyProvider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst TurnkeyProvider: React.FC<TurnkeyProviderProps>\n```\n\n----------------------------------------\n\nTITLE: KeyFormat Enumeration in TypeScript\nDESCRIPTION: Defines the KeyFormat enumeration with two members, Hexadecimal and Solana.  This enum is used to specify the format of cryptographic keys within the Turnkey iframe stamper.  It's located in `packages/iframe-stamper/src/index.ts`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/KeyFormat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport enum KeyFormat {\n  Hexadecimal = \"HEXADECIMAL\",\n  Solana = \"SOLANA\",\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Authenticator Attestation\nDESCRIPTION: Specifies the data structure for attestation information within the `authenticator` object. This attestation proves custody of the authenticator and contains metadata like `attestationObject`, `clientDataJson`, `credentialId`, and supported `transports`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_27\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\\\"AUTHENTICATOR_TRANSPORT_BLE\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_NFC\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_USB\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\"`)[]; }\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for Turnkey API\nDESCRIPTION: Command to create a local environment file from the example template. This file will contain API keys, organization ID, and other configuration needed to authenticate with Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-uniswap/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadOnlySessionResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateReadOnlySessionResponse type alias. It combines the schema from the successful (200) response of the 'PublicApiService_CreateReadOnlySession' operation with the 'v1ActivityResponse' definition. This type alias represents the structure of the response returned when creating a read-only session via the Turnkey SDK API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateReadOnlySessionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type Alias: TCreateReadOnlySessionResponse\\n\\n> **TCreateReadOnlySessionResponse** = `operations`[\\\"PublicApiService_CreateReadOnlySession\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"createReadOnlySessionResult\\\"] & `definitions`[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the `TUpdateRootQuorumResponse` type alias. It's assigned the type of the response schema for the `PublicApiService_UpdateRootQuorum` operation from the `operations` object. This type alias is specific to a successful (200) response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n *  TUpdateRootQuorumResponse = `operations`[`\"PublicApiService_UpdateRootQuorum\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n */\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TUpdateRootQuorumResponse = operations[\"PublicApiService_UpdateRootQuorum\"][\"responses\"][\"200\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignTransactionRequest Interface in TypeScript\nDESCRIPTION: Specifies the structure for a sign transaction request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_137\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1SignTransactionRequest: object {\n  organizationId: string;\n  parameters: definitions[\"v1SignTransactionIntentV2\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining rejectActivity function with Promise return type in JavaScript\nDESCRIPTION: The rejectActivity function is designed to handle the rejection of user activities and returns a Promise with a structured activity object. The function utilizes several nested parameters and objects to support various activity-related intents and data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/rejectActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction rejectActivity(input) {\n    return new Promise((resolve, reject) => {\n        // Implementation logic here\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Create User Tag in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a user tag using the TurnkeyBrowserClient. It takes a `TCreateUserTagBody` as input and returns a Promise that resolves to an object representing the created tag.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **createUserTag**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1262](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1262)\n\n#### Parameters\n\n##### input\n\n`TCreateUserTagBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createUserTag`](TurnkeyBrowserClient.mdx#createusertag)\n```\n\n----------------------------------------\n\nTITLE: Returning API Intent Types Structure in TypeScript\nDESCRIPTION: Defines the structure of a Promise that resolves to an object detailing various API intents, each represented by a key with corresponding parameters. It specifies types for activities, invitation intents, authenticator management, and other user-related functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; }\n```\n\n----------------------------------------\n\nTITLE: Defining TSetOrganizationFeatureInput type alias\nDESCRIPTION: This code snippet defines the `TSetOrganizationFeatureInput` type alias as an object with a `body` property of type `TSetOrganizationFeatureBody`. It's used as input for the `POST /public/v1/submit/set_organization_feature` API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TSetOrganizationFeatureInput\n * @property {object} body\n */\n\n/**\n * @typedef TSetOrganizationFeatureBody\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n/**\n * @typedef TSetOrganizationFeatureResponse\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n/**\n * @typedef TSetOrganizationFeatureRequest\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TSetOrganizationFeatureBody\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TSetOrganizationFeatureResponse\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TSetOrganizationFeatureRequest\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TSetOrganizationFeatureResponse\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef TSetOrganizationFeatureRequest\n * @property {string} featureName\n * @property {boolean} enabled\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationInput Type Alias in Typescript\nDESCRIPTION: This code snippet defines the `TDeleteInvitationInput` type alias as an object with a `body` property of type `TDeleteInvitationBody`. It specifies the structure for the input data when deleting an invitation within the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteInvitationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TDeleteInvitationInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsInput Type - TypeScript\nDESCRIPTION: TypeScript type alias defining the structure of input parameters for authenticator deletion. The type consists of a body property that references TDeleteAuthenticatorsBody type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteAuthenticatorsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetOrganizationInput in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named TGetOrganizationInput. It represents an object structure required for getting organization details, containing a specific body property that references another type TGetOrganizationBody. This alias plays a crucial role in ensuring type safety for API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetOrganizationInput = {\\n  body: TGetOrganizationBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Parameters in TypeScript\nDESCRIPTION: This snippet outlines the parameters required when working with authenticators, particularly during their registration or verification stages, capturing essential details like the challenge and user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1AuthenticatorParams {\n  attestation: definitions[\"v1PublicKeyCredentialWithAttestation\"];\n  authenticatorName: string;\n  challenge: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for various activity statuses, types, and result structures used in the Coordinator Public API. It includes definitions for create, update, delete, and sign operations across different entities like users, policies, and wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityStatus = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype ActivityType = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | /* ... many more activity types ... */ \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\ntype ActivityResult = {\n  createApiKeysResult: { apiKeyId: string; };\n  createUsersResult: { userId: string; };\n  // ... many more result types ...\n  updateWalletResult: { walletId: string; };\n};\n\ntype Activity = {\n  status: ActivityStatus;\n  type: ActivityType;\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n  // ... other properties ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TIframeStamperConfig Type in JavaScript\nDESCRIPTION: Type definition for the configuration object used to initialize the IframeStamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype TIframeStamperConfig = {\n  iframeUrl: string;\n  iframeElementId: string;\n  iframeContainer: HTMLElement | null | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining defaultEthereumAccountAtIndex Function in TypeScript\nDESCRIPTION: The defaultEthereumAccountAtIndex function takes a pathIndex parameter of type number and returns a WalletAccount object. This function is intended to retrieve a specific wallet account based on the given index in the Turnkey application context. It is defined in the turnkey-helpers module of the SDK server project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultEthereumAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultEthereumAccountAtIndex(pathIndex: number): WalletAccount {\n    // function implementation here...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1InvitationParams Interface in TypeScript\nDESCRIPTION: TypeScript interface for invitation creation parameters, specifying the required fields for creating a new invitation including recipient details and access types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1InvitationParams\n\n> **v1InvitationParams**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2015\n\n#### accessType\n\n> **accessType**: `definitions`[`\"v1AccessType\"`]\n\n##### Description\n\nThe User's permissible access method(s).\n\n#### receiverUserEmail\n\n> **receiverUserEmail**: `string`\n\n##### Description\n\nThe email address of the intended Invitation recipient.\n\n#### receiverUserName\n\n> **receiverUserName**: `string`\n\n##### Description\n\nThe name of the intended Invitation recipient.\n\n#### receiverUserTags\n\n> **receiverUserTags**: `string`[]\n\n##### Description\n\nA list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.\n\n#### senderUserId\n\n> **senderUserId**: `string`\n\n##### Description\n\nUnique identifier for the Sender of an Invitation.\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadResponse Type Alias\nDESCRIPTION: Type alias that represents the successful response schema for signing a raw payload via the PublicApiService. Used for POST /public/v1/submit/sign_raw_payload endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTSignRawPayloadResponse = operations[\"PublicApiService_SignRawPayload\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response in TypeScript\nDESCRIPTION: This code snippet defines the type alias 'TGetActivitiesResponse' for handling responses from the Public API Service's Get Activities endpoint. It is dependent on the operations outlined in the SDK's TypeScript definitions, specifically within the generated services for the coordinator public API. The alias represents the expected schema of a successful (200 status) response, and is intended for use in constructing and parsing server responses in a TypeScript environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetActivitiesResponse = operations[\\\"PublicApiService_GetActivities\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateAuthenticatorsInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameter used when creating authenticators via the Turnkey API. It contains a body property of type TCreateAuthenticatorsBody used in POST requests to the /public/v1/submit/create_authenticators endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TCreateAuthenticatorsInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TDeleteWalletsInput in TypeScript\nDESCRIPTION: Defines a TypeScript type alias 'TDeleteWalletsInput' which specifies the structure of the payload required for the deletion of wallets. It includes a property 'body' that is of type 'TDeleteWalletsBody'. This type alias helps ensure that the data passed for wallet deletion conforms to expected structure and types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteWalletsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TDeleteWalletsInput = object;\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"body: TDeleteWalletsBody;\"\n```\n\n----------------------------------------\n\nTITLE: Vote Object Type Definition\nDESCRIPTION: Type definition for a Vote object containing signature, message, user and selection properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\ntype Vote = {\n  message: string;\n  publicKey: string;\n  scheme: string;\n  selection: \"VOTE_SELECTION_APPROVED\" | \"VOTE_SELECTION_REJECTED\";\n  signature: string;\n  user: definitions[\"v1User\"];\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Polling and Broadcasting Transactions\nDESCRIPTION: Command to continuously poll for confirmed transactions and broadcast them to the Sepolia testnet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli pollAndBroadcast --interval=20000\n```\n\n----------------------------------------\n\nTITLE: Defining signUpdateWallet Function in TypeScript\nDESCRIPTION: The signUpdateWallet function requests a WebAuthn assertion and returns a signed UpdateWallet request. It accepts input parameters of type TUpdateWalletInput and optional TurnkeyCredentialRequestOptions, returning a promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signUpdateWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signUpdateWallet = (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Getting the Embedded Public Key in TypeScript\nDESCRIPTION: Method to retrieve the public key from the live iframe. Returns null if the iframe isn't properly initialized.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetEmbeddedPublicKey(): Promise<null | string>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeyInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named TGetApiKeyInput, suggesting that it is of type object. This type alias is a part of the SDK's API request structure for the POST request to retrieve an API key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetApiKeyInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Transports\nDESCRIPTION: Enum of supported authenticator transport methods for WebAuthN hardware devices, including Bluetooth, USB, NFC, and internal transports\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype AuthenticatorTransport = \n  | \"AUTHENTICATOR_TRANSPORT_BLE\"\n  | \"AUTHENTICATOR_TRANSPORT_INTERNAL\"\n  | \"AUTHENTICATOR_TRANSPORT_NFC\"\n  | \"AUTHENTICATOR_TRANSPORT_USB\"\n  | \"AUTHENTICATOR_TRANSPORT_HYBRID\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Authenticator Details\nDESCRIPTION: Method to fetch details of a specific authenticator within an organization, returning a Promise with authenticator information including ID, name, credential type, and transports\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ngetAuthenticator(input): Promise<{ authenticator: { aaguid: string; attestationType: string; authenticatorId: string; authenticatorName: string; createdAt: { nanos: string; seconds: string; }; credential: { publicKey: string; type: CredentialType }; credentialId: string; model: string; transports: AuthenticatorTransport[]; updatedAt: { nanos: string; seconds: string; }; }}>\n```\n\n----------------------------------------\n\nTITLE: Definition of TCreateReadWriteSessionInput Type Alias\nDESCRIPTION: This snippet defines the `TCreateReadWriteSessionInput` type alias as an object with a `body` property of type `TCreateReadWriteSessionBody`. This type is used as input for creating read-write sessions within the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateReadWriteSessionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} TCreateReadWriteSessionInput\n * @property {TCreateReadWriteSessionBody} body\n */\n```\n\n----------------------------------------\n\nTITLE: Defining User Import Wallet Intent Structure in TypeScript\nDESCRIPTION: This intent defines the structure for importing a user's wallet, containing parameters for accounts, an encrypted bundle, user ID, and wallet name. It requires specific properties for proper wallet reconstruction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: signOauth Function Definition\nDESCRIPTION: Defines the `signOauth` function, which is used to request a WebAuthn assertion and return a signed OAuth request. This request can then be sent to Turnkey. It takes an input of type `TOauthInput` and optional `TurnkeyCredentialRequestOptions` and returns a `Promise` resolving to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signOauth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **signOauth**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Intent Structures - TypeScript\nDESCRIPTION: This snippet identifies necessary properties for user payment methods, aiding in transactions and payments through various card details, essential for cryptocurrency transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetPaymentMethodIntent = { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletBody Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the request body parameters for the PublicApiService_GetWallet operation. Used for making wallet retrieval requests to the Turnkey API endpoint POST /public/v1/query/get_wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletBody = operations[\"PublicApiService_GetWallet\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for the response schema received when creating API keys through the Public API service. This type is a combination of an operation response from the PublicApiService and a defined activity response structure. It guarantees correct structure and typing for the values returned from the API call, ensuring that developers handle the expected data correctly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateApiKeysResponse = operations[`\\\"PublicApiService_CreateApiKeys\\\"][`\\\"responses\\\"][`\\\"200\\\"][`\\\"schema\\\"][`\\\"activity\\\"][`\\\"result\\\"][`\\\"createApiKeysResult\\\"]] & definitions[`\\\"v1ActivityResponse\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Activity Type and Status Definitions in TypeScript\nDESCRIPTION: Defines TypeScript interfaces and types for activity statuses, results, and timestamps. Includes activity types for operations like creating API keys, users, policies, and handling authentications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\ns: string;\nv: string;\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | [...many more activity types...];\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetPolicyResponse in TypeScript\nDESCRIPTION: This snippet defines the type alias TGetPolicyResponse for the response schema of the Get Policy operation in the Turnkey SDK. It is dependent on the API operation definitions and specifies the expected structure of the response when a successful call is made (HTTP status 200). The type alias helps in ensuring type safety when working with the API response throughout the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TGetPolicyResponse** = `operations`[`\\\"PublicApiService_GetPolicy\\\"\"]`[`\\\"responses\\\"\"]`[`\\\"200\\\"\"]`[`\\\"schema\\\"\"]\"\n```\n\n----------------------------------------\n\nTITLE: Type Definition for ExportPrivateKeyResult Interface\nDESCRIPTION: Defines the structure for the result of exporting a private key, containing the export bundle and private key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `exportBundle`: `string`; \n  `privateKeyId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Mainnet P2PKH Accounts\nDESCRIPTION: Constant array of predefined wallet accounts for Bitcoin mainnet using P2PKH address type. Provides default configuration for Bitcoin wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_MAINNET_P2PKH_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Viem Package\nDESCRIPTION: NPM installation command for the Turnkey Viem integration package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/viem/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install viem @turnkey/viem\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticators in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete authenticators using the Turnkey SDK. It takes an input of type TDeleteAuthenticatorsBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteAuthenticators(input: TDeleteAuthenticatorsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys in TypeScript\nDESCRIPTION: The `deleteApiKeys` function removes specified API keys based on the input of type `TDeleteApiKeysBody`. It returns a Promise that resolves to an object confirming the deletion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteApiKeys(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Raw Payload Result Structure in TypeScript\nDESCRIPTION: Defines the structure for results from signing a raw payload, including r, s, and v as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1User Interface in TypeScript\nDESCRIPTION: This snippet defines the v1User interface, which represents a user object with properties such as API keys, authenticators, timestamps, and personal information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1User {\n  apiKeys: v1ApiKey[];\n  authenticators: v1Authenticator[];\n  createdAt: externaldatav1Timestamp;\n  oauthProviders: v1OauthProvider[];\n  updatedAt: externaldatav1Timestamp;\n  userEmail?: string;\n  userId: string;\n  userName: string;\n  userPhoneNumber?: string;\n  userTags: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Structures\nDESCRIPTION: This snippet defines various result structures for activity-related outcomes in the API. It specifies objects for signatures, transactions, and policy updates, each with corresponding fields to capture unique identifiers or status data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n`s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining User Result Structures - TypeScript\nDESCRIPTION: Defines structures for updating users and their tags, with properties to hold user IDs and user tag IDs as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserTagResult: { userTagId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUsersInput Type in TypeScript\nDESCRIPTION: Type alias definition for the request input structure used when listing users via the Turnkey API. The type consists of a single required property 'body' of type TGetUsersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetUsersInput = object\n```\n\n----------------------------------------\n\nTITLE: Initialize User Email Recovery Endpoint\nDESCRIPTION: Describes the endpoint for initializing user email recovery. It specifies that a POST request should be made to `/public/v1/submit/init_user_email_recovery`. The endpoint requires an input parameter of type `TInitUserEmailRecoveryInput`, which likely contains the necessary information to initiate the email recovery process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nInit Email Recovery\n\nInitializes a new email recovery\n\n`POST /public/v1/submit/init_user_email_recovery`\n\n## Parameters\n\n### input\n\n[`TInitUserEmailRecoveryInput`](../type-aliases/TInitUserEmailRecoveryInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Initialize OTP Authentication\nDESCRIPTION: Initializes the One-Time Password authentication process. Takes a TInitOtpAuthBody input parameter and returns a Promise with object data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuth(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum in JavaScript\nDESCRIPTION: This snippet defines the possible statuses for activities within the SDK, allowing tracking of the progress of various operations. The statuses include created, pending, completed, failed, among others.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/rejectActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining TInitUserEmailRecoveryResponse Type in TypeScript\nDESCRIPTION: Creates a type alias that combines the init user email recovery result with the v1ActivityResponse definition from the Turnkey API. This type represents the structured response received when initializing email recovery for a user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitUserEmailRecoveryResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TInitUserEmailRecoveryResponse** = `operations`\\[`\"PublicApiService_InitUserEmailRecovery\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`\\]\\[`\"activity\"`\\]\\[`\"result\"`\\]\\[`\"initUserEmailRecoveryResult\"`\\] & `definitions`\\[`\"v1ActivityResponse\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Interface in TypeScript for Turnkey SDK\nDESCRIPTION: This snippet defines a TypeScript interface for representing timestamps in the Turnkey SDK. It includes fields for seconds and nanoseconds, both represented as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUsers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt: { nanos: string; seconds: string; };\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampDeleteOauthProviders` function accepts an input of type `TDeleteOauthProvidersBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This method is used for the removal of OAuth providers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampDeleteOauthProviders(input: TDeleteOauthProvidersBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportWalletRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to import a wallet, including organization and timestamp details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1ImportWalletRequest {\n  organizationId: string;\n  parameters: definitions[\"v1ImportWalletIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_IMPORT_WALLET\";\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallets Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting multiple wallets. It takes an input of type TGetWalletsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallets(input: TGetWalletsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Specifying Properties of TCreatePrivateKeyTagInput in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TCreatePrivateKeyTagInput type. It has a single property 'body' of type TCreatePrivateKeyTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreatePrivateKeyTagBody\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiKeysInput Type Alias - TypeScript\nDESCRIPTION: This code snippet defines a type alias `TCreateApiKeysInput` as an object to be used in the API for creating new API keys. It specifies that the input object must contain a property `body` of type `TCreateApiKeysBody`, ensuring that the structure of the input aligns with the required body for the API endpoint. This definition is crucial for TypeScript to provide type safety when dealing with API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateApiKeysInput = {\\n  body: TCreateApiKeysBody;\\n};\n```\n\n----------------------------------------\n\nTITLE: Stamp Activity Management Methods TypeScript Definitions\nDESCRIPTION: TypeScript method definitions for activity management operations including rejecting activities and managing organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nstampRejectActivity(input: TRejectActivityBody): Promise<undefined | TSignedRequest>\n\nstampRemoveOrganizationFeature(input: TRemoveOrganizationFeatureBody): Promise<undefined | TSignedRequest>\n\nstampSetOrganizationFeature(input: TSetOrganizationFeatureBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Solana SDK Using NPM\nDESCRIPTION: This snippet provides the command needed to install the @turnkey/solana SDK via npm. It is necessary for setting up the SDK before utilizing its functionalities for Solana blockchain interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/solana/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/solana\n```\n\n----------------------------------------\n\nTITLE: Defining updatePolicyIntentV2 Interface in TypeScript\nDESCRIPTION: TypeScript interface for the V2 version of updating a policy in an organization. Similar to updatePolicyIntent, it includes fields for specifying policy details and effects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePrivateKeyTagResult in TypeScript\nDESCRIPTION: This snippet defines the `updatePrivateKeyTagResult` type, which contains a `privateKeyTagId` string that represents the identifier for a private key tag post-update. This structure supports tag management for private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeysBody Type Alias in TypeScript\nDESCRIPTION: Type alias for the request body parameters of the createPrivateKeys API endpoint. Maps to the body parameter type of the PublicApiService_CreatePrivateKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePrivateKeysBody = operations[\"PublicApiService_CreatePrivateKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyBody Type Alias in TypeScript for Turnkey SDK\nDESCRIPTION: This code snippet defines a TypeScript type alias called TUpdatePolicyBody that combines the parameters from the PublicApiService_UpdatePolicy operation with commandOverrideParams. This type is used to structure the request body when updating policies via the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TUpdatePolicyBody** = `operations`[`\"PublicApiService_UpdatePolicy\"`][`\"parameters\"`][`\"body\"`][`\"body\"`][`\"parameters\"`] & `commandOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Private Key Export Intent Type Definition\nDESCRIPTION: TypeScript interface for exporting private keys with encryption. Specifies the private key ID and target public key for secure export.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{ `privateKeyId`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Initializing Private Key Import Function in JavaScript\nDESCRIPTION: The initImportPrivateKey function is intended to initialize the import of a private key and encapsulates various intents related to such actions. It promises structured data regarding the activity performed, including approval, rejection capabilities, and timestamps. It depends on structured intents and client-side data representations, such as attestation objects and client extensions. The function requires an input configuration and returns a promise that resolves detailed activity statuses and metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Function: initImportPrivateKey()\n\n> **initImportPrivateKey**(`input`): `Promise`<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \"public-key\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \"cross-platform\" | \"platform\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \"public-key\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\")[]; }; `importPrivateKeyIntentV2`: { ... }; `importPrivateKeyIntentV3`: { ... }; `importPrivateKeyIntentV4`: { ... }; `importPrivateKeyIntentV5`: { ... }; `importPrivateKeyIntentV6`: { ... }; `importPrivateKeyIntentV7`: { ... }; `importPrivateKeyIntentV8`: { ... }; `importPrivateKeyIntentV9`: { ... }; `importPrivateKeyIntentV10`: { ... }; `importPrivateKeyIntentV11`: { ... }; `importPrivateKeyIntentV12`: { ... }; `importPrivateKeyIntentV13`: { ... }; `importPrivateKeyIntentV14`: { ... }; `importPrivateKeyIntentV15`: { ... }; `importPrivateKeyIntentV16`: { ... }; `importPrivateKeyIntentV17`: { ... }; `importPrivateKeyIntentV18`: { ... }; `importPrivateKeyIntentV19`: { ... }; `importPrivateKeyIntentV20`: { ... }; `deletePaymentMethodIntentV2`: { ... }; `deletePolicyIntentV4`: { ... }; `deletePrivateKeyTagsIntentV2`: { ... }; `deletePrivateKeyTagsIntentV3`: { ... }; `deletePrivateKeyTagsIntentV4`: { ... }; `deletePrivateKeyTagsIntentV5`: { ... }; `deletePrivateKeyTagsIntentV6`: { ... }; `deletePrivateKeyTagsIntentV7`: { ... }; `deletePrivateKeyTagsIntentV8`: { ... }; `deletePrivateKeyTagsIntentV9`: { ... }; `deletePrivateKeyTagsIntentV10`: { ... }; `deletePrivateKeyTagsIntentV11`: { ... }; `deletePrivateKeyTagsIntentV12`: { ... }; `deletePrivateKeyTagsIntentV13`: { ... }; `deleteUserTagsIntentV2`: { ... }; `deleteUserTagsIntentV3`: { ... }; `deleteUserTagsIntentV4`: { ... }; `deleteUserTagsIntentV5`: { ... }; `deleteUserTagsIntentV6`: { ... }; `deleteUserTagsIntentV7`: { ... }; `deleteUserTagsIntentV8`: { ... }; `disableOtpEmailAuthIntent`: { ... }; `disableSmsAuthIntent`: { ... }; `emailAuthIntentV3`: { ... }; `emailAuthIntentV4`: { ... }; `emailAuthIntentV5`: { ... }; `emailCustomizationIntent`: { ... }; `emailCustomizationIntentV2`: { ... }; `emailCustomizationIntentV3`: { ... }; `emailCustomizationIntentV4`: { ... }; `exportPrivateKeyIntentV2`: { ... }; `exportPrivateKeyIntentV3`: { ... }; `exportPrivateKeyIntentV4`: { ... }; `exportPrivateKeyIntentV5`: { ... }; `exportPrivateKeyIntentV6`: { ... }; `exportPrivateKeyIntentV7`: { ... }; `exportPrivateKeyIntentV8`: { ... }; `exportPrivateKeyIntentV9`: { ... }; `removeOOBIntent`: { ... }; `secureMailIntent`: { ... }; `secureMailIntentV2`: { ... }; `sendPushTokenIntent`: { ... }; `testIntent`: { ... }; `testIntentV2`: { ... }; `testIntentV3`: { ... }; `testIntentV4`: { ... }; `uninstallProtectionIntent`: { ... }; `updateAuthenticatorIntent`: { ... }; `updateAuthenticatorIntentV2`: { ... }; `updateAuthenticatorIntentV3`: { ... }; `updateAuthenticatorIntentV4`: { ... }; `updateAuthenticatorIntentV5`: { ... }; `updateAuthenticatorIntentV6`: { ... }; `updateAuthenticatorIntentV7`: { ... }; `updateEmailCustomizationIntent`: { ... }; `updateEmailCustomizationIntentV2`: { ... }; `updateEmailCustomizationIntentV3`: { ... }; `updateProviderIntent`: { ... }; `updatePublicKeyIntent`: { ... }; `updateSessionPoliciesIntent`: { ... }; `updateSessionPoliciesIntentV2`: { ... }; `updateSessionPoliciesIntentV3`: { ... }; `updateSessionPoliciesIntentV4`: { ... }; `updateSessionPoliciesIntentV5`: { ... }; `updateSessionPoliciesIntentV6`: { ... }; `updateSessionPoliciesIntentV7`: { ... }; `updateSubOrganizationIntent`: { ... }; `updateSubOrganizationIntentV2`: { ... }; `withdrawInvitationIntent`: { ... }; };\n\n```\n\n----------------------------------------\n\nTITLE: Example Bitcoin Transaction Output\nDESCRIPTION: Sample output showing the transaction creation process using Turnkey. It demonstrates address verification, UTXO selection, fee calculation, and transaction signing, resulting in a transaction hex that can be broadcast.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-bitcoin/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n✅ Loaded configuration\n-> Source address: tb1qa6dqr8fkh34supp8gv4ges8y0pa8yeweffjf84\n-> Inferred address type: TestnetP2WPKH\nFetching UTXOs...\n✔ select UTXOS to spend › 11852 sats (tx # 0e5423d80d522d499d1379ec01b87eee36cec096c8b740fd5a9c128b2c810700 @ 0)\n✔ Destination BTC address … tb1phgfu8789qvd78mdxwdf84ak20yhvw79yv67r4dpe0z4z876wwyesetl7yz\n✅ Fee estimate: 180 sats\n✔ How much to you want to send to tb1phgfu8789qvd78mdxwdf84ak20yhvw79yv67r4dpe0z4z876wwyesetl7yz? (max: 11672 sats, the rest will go back to the source address as change) … 3000\n✔ change amount going back to your source address will be 8672. Looks good? … yes\n✅ Transaction signed! To broadcast it, copy and paste the hex payload to https://mempool.space/testnet/tx/push\n020000000001010007812c8b129c5afd40b7c896c0ce36ee7eb801ec79139d492d520dd823540e0000000000ffffffff02b80b000000000000225120ba13c3f8e5031be3eda673527af6ca792ec778a466bc3ab43978aa23fb4e7133e021000000000000160014ee9a019d36bc6b0e0427432a8cc0e4787a7265d902483045022100ba2189eb309bd9c1e417c50bd30e77b76faf565dd5b0f987bb991bb44312adf502200d15292e21380984a1d3cd4ad203ac1bcb632bdd0d3772eaf6f532dce53c8ca30121036f9d88ee0cceaffb044b1c113bbe6e48e8660fb6ef731d267c8ce7e3df8c10c700000000\n```\n\n----------------------------------------\n\nTITLE: Defining TTestRateLimitsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the TestRateLimits API response in the Turnkey SDK. It references the successful (200) response schema from the PublicApiService_TestRateLimits operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TTestRateLimitsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TTestRateLimitsResponse** = `operations`[`\"PublicApiService_TestRateLimits\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Activity Intent Types\nDESCRIPTION: This code defines a series of TypeScript type definitions representing different activity intents within the system. Each intent type specifies the structure and properties required for a particular action, such as creating users, organizations, or managing API keys. These definitions are used to ensure type safety and provide a clear interface for interacting with the system's activity processing logic.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiOnlyUsers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"Promise\"<{\n `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" | \\\"ADDRESS_FORMAT_SEI\\\" | \\\"ADDRESS_FORMAT_XLM\\\" | \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" | \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" | \\\"ADDRESS_FORMAT_TON_V3R2\\\" | \\\"ADDRESS_FORMAT_TON_V4R2\\\" | \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" | \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`;\n```\n\n----------------------------------------\n\nTITLE: Get OAuth Providers Method Definition - TypeScript\nDESCRIPTION: Method to retrieve OAuth providers list. Takes TGetOauthProvidersBody as input and returns Promise with array of provider objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetOauthProviders(input: TGetOauthProvidersBody): Promise<{ oauthProviders: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Documentation Navigation Links\nDESCRIPTION: Navigation links in markdown format for accessing different sections of the SDK documentation, including the main SDK documentation, packages documentation, and specific API method documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / deleteUserTags\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Statuses in TypeScript\nDESCRIPTION: Defines enums for activity types and statuses used in the Coordinator API. It includes a wide range of activity types such as creating API keys, users, policies, and performing various wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignRawPayloadIntent Type\nDESCRIPTION: Defines the structure `v1SignRawPayloadIntent` as an object type for signing a raw payload. It includes properties for encoding, hash function, payload, and private key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SignRawPayloadIntent\n\n> **v1SignRawPayloadIntent**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2412\n\n#### encoding\n\n> **encoding**: `definitions`[`\"v1PayloadEncoding\"`]\n\n##### Description\n\nEncoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8).\n\n#### hashFunction\n\n> **hashFunction**: `definitions`[`\"v1HashFunction\"`]\n\n##### Description\n\nHash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032.\n\n#### payload\n\n> **payload**: `string`\n\n##### Description\n\nRaw unsigned payload to be signed.\n\n#### privateKeyId\n\n> **privateKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given Private Key.\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUserTagsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteUserTagsBody type alias. It is derived from the 'body' property of the request parameters for the 'PublicApiService_DeleteUserTags' operation in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUserTagsBody = operations[\"PublicApiService_DeleteUserTags\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enum in JavaScript\nDESCRIPTION: This snippet lays out various types of activities that can occur in the SDK, such as creating users, signing transactions, and managing policies. This classification aids in the organization and processing of different interactions within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/rejectActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Intent Types\nDESCRIPTION: This TypeScript code defines the structure of various activity intents, encompassing a wide range of operations. These intents provide detailed information about the type of action, such as creating users, wallets, or organizations, along with specific parameters required for each action. The definition includes nested objects, enums, and optional properties to accommodate different scenarios.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePolicy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" | \\\"ADDRESS_FORMAT_SEI\\\" | \\\"ADDRESS_FORMAT_XLM\\\" | \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" | \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" | \\\"ADDRESS_FORMAT_TON_V3R2\\\" | \\\"ADDRESS_FORMAT_TON_V4R2\\\" | \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" | \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`; \n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intents and Results JavaScript\nDESCRIPTION: Defines a comprehensive set of intents and results used within an SDK for managing user accounts, authentication methods, and organizational settings. Each intent and result is represented as an object with various parameters and expected data types, encapsulating operations such as importing wallets, configuring OTP authentication, managing policies, and updating user information. This structure serves as a protocol for interacting with SDK functionalities, streamlining development and ensuring consistency.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nprivateKeyName: string; userId: string; }; importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; }; initImportPrivateKeyIntent: { userId: string; }; initImportWalletIntent: { userId: string; }; initOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initOtpAuthIntentV2: { alphanumeric: boolean; contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpLength: number; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; }; oauthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; oidcToken: string; targetPublicKey: string; }; otpAuthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; otpCode: string; otpId: string; targetPublicKey: string; }; recoverUserIntent: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; userId: string; }; rejectActivityIntent: { fingerprint: string; }; removeOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; }; setOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; }; setPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; }; setPaymentMethodIntentV2: { cardHolderEmail: string; cardHolderName: string; paymentMethodId: string; }; signRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; }; signRawPayloadIntentV2: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; signWith: string; }; signRawPayloadsIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payloads: string[]; signWith: string; }; signTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; signTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; updateAllowedOriginsIntent: { allowedOrigins: string[]; }; updatePolicyIntent: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePolicyIntentV2: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePrivateKeyTagIntent: { addPrivateKeyIds: string[]; newPrivateKeyTagName: string; privateKeyTagId: string; removePrivateKeyIds: string[]; }; updateRootQuorumIntent: { threshold: number; userIds: string[]; }; updateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; }; updateUserTagIntent: { addUserIds: string[]; newUserTagName: string; removeUserIds: string[]; userTagId: string; }; updateWalletIntent: { walletId: string; walletName: string; }; }; organizationId: string; result: { acceptInvitationResult: { invitationId: string; userId: string; }; activateBillingTierResult: { productId: string; }; createApiKeysResult: { apiKeyIds: string[]; }; createApiOnlyUsersResult: { userIds: string[]; }; createAuthenticatorsResult: { authenticatorIds: string[]; }; createInvitationsResult: { invitationIds: string[]; }; createOauthProvidersResult: { providerIds: string[]; }; createOrganizationResult: { organizationId: string; }; createPoliciesResult: { policyIds: string[]; }; createPolicyResult: { policyId: string; }; createPrivateKeysResult: { privateKeyIds: string[]; }; createPrivateKeysResultV2: { privateKeys: object[]; }; createPrivateKeyTagResult: { privateKeyIds: string[]; privateKeyTagId: string; }; createReadOnlySessionResult: { organizationId: string; organizationName: string; session: string; sessionExpiry: string; userId: string; username: string; }; createReadWriteSessionResult: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createReadWriteSessionResultV2: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createSubOrganizationResult: { rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV3: { privateKeys: object[]; rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV4: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV5: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV6: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV7: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createUsersResult: { userIds: string[]; }; createUserTagResult: { userIds: string[]; userTagId: string; }; createWalletAccountsResult: { addresses: string[]; }; createWalletResult: { addresses: string[]; walletId: string; }; deleteApiKeysResult: { apiKeyIds: string[]; }; deleteAuthenticatorsResult: { authenticatorIds: string[]; }; deleteInvitationResult: { invitationId: string; }; deleteOauthProvidersResult: { providerIds: string[]; }; deleteOrganizationResult: { organizationId: string; }; deletePaymentMethodResult: { paymentMethodId: string; }; deletePolicyResult: { policyId: string; }; deletePrivateKeysResult: { privateKeyIds: string[]; }; deletePrivateKeyTagsResult: { privateKeyIds: string[]; privateKeyTagIds: string[]; }; deleteSubOrganizationResult: { subOrganizationUuid: string; }; deleteUsersResult: { userIds: string[]; }; deleteUserTagsResult: { userIds: string[]; userTagIds: string[]; }; deleteWalletsResult: { walletIds: string[]; }; disablePrivateKeyResult: { privateKeyId: string; }; emailAuthResult: { apiKeyId: string; userId: string; }; exportPrivateKeyResult: { exportBundle: string; privateKeyId: string; }; exportWalletAccountResult: { address: string; exportBundle: string; }; exportWalletResult: { exportBundle: string; walletId: string; }; importPrivateKeyResult: { addresses: object[]; privateKeyId: string; }; importWalletResult: { addresses: string[]; walletId: string; }; initImportPrivateKeyResult: { importBundle: string; }; initImportWalletResult: { importBundle: string; }; initOtpAuthResult: { otpId: string; }; initOtpAuthResultV2: { otpId: string; }; initUserEmailRecoveryResult: { userId: string; }; oauthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; recoverUserResult: { authenticatorId: string[]; }; removeOrganizationFeatureResult: { features: object[]; }; setOrganizationFeatureResult: { features: object[]; }; setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; }; signRawPayloadResult: { r: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Return Type Structure in TypeScript\nDESCRIPTION: A detailed TypeScript type definition for the Promise return value from the SDK. The type includes activity information and a complex nested structure of possible intents for various operations like creating organizations, managing users, handling wallets, and authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/otpAuth.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: []; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: []; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; \n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference\nDESCRIPTION: The specific Git commit hash from which the webauthn-json package was vendored.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/src/webauthn-json/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ne932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f\n```\n\n----------------------------------------\n\nTITLE: Installing ApiKeyStamper with pnpm\nDESCRIPTION: Command to install the @turnkey/api-key-stamper package using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/api-key-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining Update Timestamp Structure - TypeScript\nDESCRIPTION: Defines the structure for representing the timestamp of the last update including seconds and nanos.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateUserTagRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to create a user tag, including organization ID, tag parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1CreateUserTagRequest: object\n{\n  organizationId: string,\n  parameters: definitions[\"v1CreateUserTagIntent\"],\n  timestampMs: string,\n  type: \"ACTIVITY_TYPE_CREATE_USER_TAG\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PublicKeyReady Enumeration\nDESCRIPTION: This snippet defines the PublicKeyReady event type in TypeScript, which indicates that the public key is ready for use.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nPublicKeyReady: \"PUBLIC_KEY_READY\"\n```\n\n----------------------------------------\n\nTITLE: Stamp Set Organization Feature with Turnkey SDK\nDESCRIPTION: This function `stampSetOrganizationFeature` is responsible for creating a signed request to set an organization feature using the Turnkey SDK. It takes a `TSetOrganizationFeatureBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampSetOrganizationFeature**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2374](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2374)\n\n#### Parameters\n\n##### input\n\n`TSetOrganizationFeatureBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPolicyResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting a single policy. It includes a policy object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPolicyResponse: object\n{\n  policy: definitions[\"v1Policy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity API Response Structure in TypeScript\nDESCRIPTION: This snippet defines a TypeScript Promise that represents the structure of the API response for various activity-related intents, such as approval and rejection of activities. It includes fields for success indications, error messages, and timestamps, among others.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\")[]; } }>\n```\n\n----------------------------------------\n\nTITLE: Defining Error Handling Utility Function in SDK - TypeScript\nDESCRIPTION: The function isTurnkeyActivityConsensusNeededError is designed to determine if an error is specifically related to activity consensus requirements within the Turnkey system. It accepts a parameter of any type and returns a result also of any type. The function is located in the viem package under src/index.ts. No explicit dependencies are mentioned, and it is used for identifying error states related to activity consensus.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/isTurnkeyActivityConsensusNeededError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **isTurnkeyActivityConsensusNeededError**(`error`): `any`\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletInput Type for Wallet Retrieval\nDESCRIPTION: Type definition for the input parameters when making a GET wallet request to the Turnkey API. The type consists of a body property that must conform to the TGetWalletBody type structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePolicyResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePolicyResponse type alias. It represents the schema of a successful (200) response when creating a new policy using the PublicApiService_CreatePolicy operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePolicyResponse = operations[\"PublicApiService_CreatePolicy\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TImportPrivateKeyBody Type Alias\nDESCRIPTION: Type definition for the private key import request body, specifying the structure and parameters required for importing a private key via the Turnkey API\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TImportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTImportPrivateKeyBody = operations[\"PublicApiService_ImportPrivateKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Policy Intent Structure in TypeScript\nDESCRIPTION: Type definition for individual policy creation intent. Includes the policy effect (allow/deny), optional notes, policy name, and an array of selector objects that define the policy's scope.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ `effect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Read-Only Session Input\nDESCRIPTION: This snippet defines a TypeScript type alias named 'TCreateReadOnlySessionInput', which is an object that includes a 'body' property. The 'body' property itself references another type, 'TCreateReadOnlySessionBody', aiming to structure the input for creating a read-only session in the Turnkey SDK. It is vital in ensuring that the API receives correctly formatted input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateReadOnlySessionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateReadOnlySessionInput = {\\n    body: TCreateReadOnlySessionBody\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportPrivateKeyRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to import a private key, including organization and timestamp details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1ImportPrivateKeyRequest {\n  organizationId: string;\n  parameters: definitions[\"v1ImportPrivateKeyIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivityResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetActivityResponse type alias. It represents the response schema for the 'PublicApiService_GetActivity' operation, specifically the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetActivityResponse = operations[\"PublicApiService_GetActivity\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TListPrivateKeyTagsResponse Type Alias\nDESCRIPTION: This snippet defines a TypeScript type alias named TListPrivateKeyTagsResponse that models the response structure of the Public API's list private key tags operation. It is utilized to enforce types in API response handling, ensuring that developers interact with the expected response shape derived from the operation schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TListPrivateKeyTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TListPrivateKeyTagsResponse** = `operations`\\[`\\\"PublicApiService_ListPrivateKeyTags\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining the stampUpdateWallet Method in TypeScript\nDESCRIPTION: Method declaration for stampUpdateWallet that updates a wallet and returns a promise with the signed request. Takes a TUpdateWalletBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_126\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateWallet(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUsersInput Type Alias (TypeScript)\nDESCRIPTION: This code snippet defines the `TDeleteUsersInput` type alias as an object with a single property `body` of type `TDeleteUsersBody`. It is used as the input type for the delete users API endpoint in the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TDeleteUsersInput\n *\n * > **TDeleteUsersInput** = `object`\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:555](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L555)\n */\n\n/**\n * @typedef TDeleteUsersInput\n * @property {object} body\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetAuthenticatorsResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting multiple authenticators, containing an array of Authenticator objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetAuthenticatorsResponse {\n  authenticators: definitions[\"v1Authenticator\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Structure for Activity Approval\nDESCRIPTION: This TypeScript definition outlines the expected structure for an API response related to activity approval, including properties such as approval status, user information, and error messages if applicable. It also encompasses the definitions for attestation and its related properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUserTags.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; ...\n```\n\n----------------------------------------\n\nTITLE: Declaring SignGetAuthenticators Function in TypeScript\nDESCRIPTION: This snippet defines the signGetAuthenticators function, which takes an input of type TGetAuthenticatorsInput and optional TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetAuthenticators: (input: TGetAuthenticatorsInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TImportPrivateKeyInput Type Alias in TypeScript\nDESCRIPTION: The TImportPrivateKeyInput type alias is an object that represents the structure of input data required for importing a private key. It includes necessary properties and is essential for type-checking within the SDK framework. This type is expected to streamline the handling of private key data securely within TypeScript applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TImportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TImportPrivateKeyInput = {\\n  body: TImportPrivateKeyBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Sub-Organization with Wallet in JavaScript\nDESCRIPTION: Example of creating a sub-organization with a wallet using the updated createSubOrganization function. This snippet demonstrates the new wallet parameter structure required for ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  wallet: {\n    walletName: \"Default Wallet\",\n    accounts: [\n      {\n        curve: \"CURVE_SECP256K1\",\n        pathFormat: \"PATH_FORMAT_BIP32\",\n        path: \"m/44'/60'/0'/0/0\",\n        addressFormat: \"ADDRESS_FORMAT_ETHEREUM\",\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for initializing email recovery in the TurnKey SDK. It specifies the HTTP method, path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initUserEmailRecovery.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nPOST /public/v1/submit/init_user_email_recovery\n\n## Parameters\n\n### input\n\n[`TInitUserEmailRecoveryInput`](../type-aliases/TInitUserEmailRecoveryInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Wallet Parameters Type Definition\nDESCRIPTION: Type definition for wallet creation parameters including account settings and mnemonic length.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1WalletParams = {\n  accounts: definitions[\"v1WalletAccountParams\"][];\n  mnemonicLength?: number;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for signUpdateUser in TypeScript\nDESCRIPTION: The signUpdateUser function requests a WebAuthn assertion and returns a signed UpdateUser request that can be sent to Turnkey. It takes a TUpdateUserInput object and optional TurnkeyCredentialRequestOptions as parameters and returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signUpdateUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignUpdateUser(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for importing a wallet. It includes properties such as `accounts`, `encryptedBundle`, `userId`, and `walletName`, which are necessary for the wallet import operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Invitation Deletion Intent - TypeScript\nDESCRIPTION: Represents the structure required to delete an invitation, which consists of an invitation ID. This plays a critical role in invitation management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteInvitationIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1191\n */\nexport interface v1DeleteInvitationIntent {\n  invitationId: string; // Unique identifier for a given Invitation object.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining body Property for TUpdateUserTagInput\nDESCRIPTION: Property definition for the body field in TUpdateUserTagInput type. The body must be of type TUpdateUserTagBody which contains the actual user tag update data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n**body**: [`TUpdateUserTagBody`](TUpdateUserTagBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Intent and Result Types in TypeScript\nDESCRIPTION: This code snippet defines a large set of TypeScript types for various intents and results used in a SDK. It includes types for operations such as user management, wallet handling, cryptographic signing, and organization settings. The types are structured to provide comprehensive coverage of SDK functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUsers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n};\nimportWalletIntent: {\n  accounts: object[];\n  encryptedBundle: string;\n  userId: string;\n  walletName: string;\n};\ninitImportPrivateKeyIntent: {\n  userId: string;\n};\ninitImportWalletIntent: {\n  userId: string;\n};\ninitOtpAuthIntent: {\n  contact: string;\n  emailCustomization: {\n    appName: string;\n    logoUrl: string;\n    magicLinkTemplate: string;\n    templateId: string;\n    templateVariables: string;\n  };\n  otpType: string;\n  sendFromEmailAddress: string;\n  sendFromEmailSenderName: string;\n  smsCustomization: {\n    template: string;\n  };\n  userIdentifier: string;\n};\n// ... (many more type definitions)\nsignRawPayloadResult: {\n  r: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TUpdatePrivateKeyTagBody in TypeScript\nDESCRIPTION: This snippet defines a type alias TUpdatePrivateKeyTagBody used for the 'UpdatePrivateKeyTag' operation in the SDK. It combines parameters from the operation's details and includes commandOverrideParams. This type is essential for ensuring the correct structure of request bodies when updating private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePrivateKeyTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TUpdatePrivateKeyTagBody = operations[\\\"PublicApiService_UpdatePrivateKeyTag\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining organizationId Type in TypeScript\nDESCRIPTION: TypeScript type definition for the organization ID, which is a string that uniquely identifies an organization in the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n`string`\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Endpoint in TypeScript\nDESCRIPTION: Documentation for the export wallet endpoint which allows exporting a wallet via a POST request to '/public/v1/submit/export_wallet'. The endpoint accepts an input parameter of type TExportWalletInput.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TExportWalletInput`](../type-aliases/TExportWalletInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining Set Organization Feature Result Structure in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript structure detailing the result of setting organization features, which includes an array of 'features' of type object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `features`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the response of the UpdateWallet operation in the Turnkey API. It references the schema for the 200 HTTP response of the PublicApiService_UpdateWallet operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TUpdateWalletResponse** = `operations`[`\"PublicApiService_UpdateWallet\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Timestamp and Votes in TypeScript\nDESCRIPTION: Type definition for activity metadata including update timestamp with seconds and nanoseconds precision, and an array of vote objects associated with the activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initOtpAuth.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n`updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }>`\n```\n\n----------------------------------------\n\nTITLE: Defining User Tags Body Type - TypeScript\nDESCRIPTION: This snippet defines the structure of the body expected in the TListUserTagsInput, which is elaborated in TListUserTagsBody. It is crucial for the correct formation of the API request to ensure that the server can process the intended data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListUserTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TListUserTagsBody;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Invitations with SDK JavaScript\nDESCRIPTION: The 'createInvitations' function is designed to handle various intents related to user and organizational management, such as creating users, organizations, and policies. It operates asynchronously, returning a Promise that resolves with a structured activity object. Key parameters include a comprehensive 'input' object detailing the user's intentions. Dependencies include a Promise-based environment in JavaScript. This function is part of a broader SDK architecture, requiring detailed 'input' specifications and supporting a wide range of use cases.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createInvitations = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CU\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias `TGetOrganizationResponse` in TypeScript.  It uses indexed access types to extract the schema for a successful (200) response from the `PublicApiService_GetOrganization` operation's response type, presumably defined elsewhere in the codebase. This type alias is used to represent the expected structure of the organization data returned by the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TGetOrganizationResponse\n *\n * > **TGetOrganizationResponse** = `operations`[`\"PublicApiService_GetOrganization\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:89](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L89)\n */\n```\n\n----------------------------------------\n\nTITLE: Type Definition for approveActivity Function\nDESCRIPTION: TypeScript type definition for the approveActivity function that handles various authentication and activity approval operations. The function returns a Promise containing activity details including approval status, timestamps, and various intent types for different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst approveActivity: (input) => Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Structure - TypeScript\nDESCRIPTION: This snippet specifies the OTP authentication result structure, which is similar to the OAuth results and is crucial for validating one-time password-based user authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeysRequest type\nDESCRIPTION: Defines the structure for a request to delete private keys. It includes the organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeletePrivateKeysRequest\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1277\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[``\"v1DeletePrivateKeysIntent\"``]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: ``\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"``\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Types in TypeScript\nDESCRIPTION: Provides an enumeration of possible activity statuses, representing different stages of an activity lifecycle from creation to completion\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeyTags.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`\n```\n\n----------------------------------------\n\nTITLE: Defining TOtpAuthBody Type Alias (TypeScript)\nDESCRIPTION: Defines the `TOtpAuthBody` type alias using the `operations` type, which is likely generated from an OpenAPI specification. This type represents the expected structure of the request body when calling the `PublicApiService_OtpAuth` operation's endpoint, specifically targeting the `body` parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TOtpAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TOtpAuthBody\n *\n * > **TOtpAuthBody** = `operations`[`\"PublicApiService_OtpAuth\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:3160](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L3160)\n *\n * `POST /public/v1/submit/otp_auth`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response in TypeScript\nDESCRIPTION: Defines a type alias TGetSubOrgIdsResponse for the response schema of the 'PublicApiService_GetSubOrgIds' operation. It allows TypeScript to enforce type checking on the API response, ensuring that the data structure matches the expected schema. This is crucial for maintaining type safety within the SDK when handling API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetSubOrgIdsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetSubOrgIdsResponse = operations[\\\"PublicApiService_GetSubOrgIds\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Sub-Organization Result Type Definition\nDESCRIPTION: Type definitions for sub-organization creation results including root users and wallet information\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  rootUserIds: string[];\n  subOrganizationId: string;\n  wallet?: {\n    addresses: string[];\n    walletId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Intent Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure for initiating a user email recovery intent, encapsulating properties such as `email`, `expirationSeconds`, and a customization object for email.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Result Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export wallet result, including export bundle and wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportWalletResult\n\n> **v1ExportWalletResult**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1633](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1633)\n\n#### exportBundle\n\n> **exportBundle**: `string`\n\n##### Description\n\nExport bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.\n\n#### walletId\n\n> **walletId**: `string`\n\n##### Description\n\nUnique identifier for a given Wallet.\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Results\nDESCRIPTION: This section provides TypeScript type definitions for the results of various operations, such as `acceptInvitationResult`, `activateBillingTierResult`, `createApiKeysResult`, etc. These results define the structure of the data returned after an operation is completed, including information about created entities, status codes, and error messages. The consistent type definitions help in handling responses in a predictable way throughout the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importPrivateKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`organizationId`: `string`; `result`: { `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierResult`: { `productId`: `string`; }; `createApiKeysResult`: { `apiKeyIds`: `string`[]; }; `createApiOnlyUsersResult`: { `userIds`: `string`[]; }; `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `createInvitationsResult`: { `invitationIds`: `string`[]; }; `createOauthProvidersResult`: { `providerIds`: `string`[]; }; `createOrganizationResult`: { `organizationId`: `string`; }; `createPoliciesResult`: { `policyIds`: `string`[]; }; `createPolicyResult`: { `policyId`: `string`; }; `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; }; `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResultV2`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createSubOrganizationResult`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV3`: { `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV4`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV5`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV6`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV7`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createUsersResult`: { `userIds`: `string`[]; }; `createUserTagResult`: { `userIds`: `string`[]; `userTagId`: `string`; }; `createWalletAccountsResult`: { `addresses`: `string`[]; }; `createWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `deleteApiKeysResult`: { `apiKeyIds`: `string`[]; }; `deleteAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `deleteInvitationResult`: { `invitationId`: `string`; }; `deleteOauthProvidersResult`: { `providerIds`: `string`[]; }; `deleteOrganizationResult`: { `organizationId`: `string`; }; `deletePaymentMethodResult`: { `paymentMethodId`: `string`; }; `deletePolicyResult`: { `policyId`: `string`; }; `deletePrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsResult`: { `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationResult`: { `subOrganizationUuid`: `string`; }; `deleteUsersResult`: { `userIds`: `string`[]; }; `deleteUserTagsResult`: { `userIds`: `string`[]; `userTagIds`: `string`[]; }; `deleteWalletsResult`: { `walletIds`: `string`[]; }; `disablePrivateKeyResult`: { `privateKeyId`: `string`; }; `emailAuthResult`: { `apiKeyId`: `string`; `userId`: `string`; }; `exportPrivateKeyResult`: { `exportBundle`: `string`; `privateKeyId`: `string`; }; `exportWalletAccountResult`: { `address`: `string`; `exportBundle`: `string`; }; `exportWalletResult`: { `exportBundle`: `string`; `walletId`: `string`; }; `importPrivateKeyResult`: { `addresses`: `object`[]; `privateKeyId`: `string`; }; `importWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `initImportPrivateKeyResult`: { `importBundle`: `string`; }; `initImportWalletResult`: { `importBundle`: `string`; }; `initOtpAuthResult`: { `otpId`: `string`; };`\n```\n\n----------------------------------------\n\nTITLE: Defining v1SetOrganizationFeatureResult Type\nDESCRIPTION: Defines the structure `v1SetOrganizationFeatureResult` as an object type, containing the `features` property as an array of `v1Feature` definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SetOrganizationFeatureResult\n\n> **v1SetOrganizationFeatureResult**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2408\n\n#### features\n\n> **features**: `definitions`[`\"v1Feature\"`][]\n\n##### Description\n\nResulting list of organization features.\n```\n\n----------------------------------------\n\nTITLE: Defining updateAllowedOriginsIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating allowed origins in an organization. It allows specifying additional origins from which requests are allowed besides Turnkey origins.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{ `allowedOrigins`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for API Responses\nDESCRIPTION: Defines the structures returned by API after operations like OTP authentication, user recovery, and wallet updates. Each type specifies the keys and expected data formats, assisting in parsing and consuming API responses. Types include identifiers such as `userId`, status values like `ACTIVITY_STATUS_CREATED`, and different activity types depending on the API endpoint used.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createWalletAccounts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`initOtpAuthResultV2`: \\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; `status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticators Creation Types\nDESCRIPTION: Complex TypeScript type definitions for creating authenticators, including input parameters, result types, and activity status and type enumerations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createAuthenticators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  `input`: TCreateAuthenticatorsInput;\n  `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`;\n  `type`: `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | ... (multiple other activity types);\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with TypeScript\nDESCRIPTION: The function \\\"signGetSubOrgIds\\\" requests a WebAuthn assertion and returns a signed \\\"GetSubOrgIds\\\" request as a Promise. It requires an input of type \\\"TGetSubOrgIdsInput\\\", and optionally, \\\"TurnkeyCredentialRequestOptions\\\". The function returns a \\\"SignedRequest\\\" object ready to be POSTed to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signGetSubOrgIds**(`input`, `options`?): `Promise`<`SignedRequest`>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUsersResponse Type Alias in TypeScript\nDESCRIPTION: Defines the TDeleteUsersResponse type alias as the schema for the 200 response of the PublicApiService_DeleteUsers operation. This type represents the structure of the response when successfully deleting users via the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUsersResponse = operations[\"PublicApiService_DeleteUsers\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin Accounts Constant in TypeScript\nDESCRIPTION: This TypeScript snippet defines a constant named DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS as an array of WalletAccount objects. It is used to specify default accounts for Bitcoin regtest in the SDK. There are no external dependencies, but it requires understanding of the WalletAccount interface. The input is the constant itself, and it outputs a predefined list of default accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Specifying TExportWalletInput Properties in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TExportWalletInput type alias. It has a single property 'body' of type TExportWalletBody, which contains the necessary information for exporting a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TExportWalletBody\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateWalletIntent Interface in TypeScript\nDESCRIPTION: Specifies the structure for creating a wallet, including accounts, optional mnemonic length, and wallet name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateWalletIntent {\n  accounts: v1WalletAccountParams[];\n  mnemonicLength?: number;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Type Definitions\nDESCRIPTION: Comprehensive enumeration of supported activity types for various SDK operations, including wallet and private key management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the EmailRecoveryResult API response, capturing the userId as a string. It allows developers to understand how to map the email recovery response data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining InjectKeyExportBundle Enumeration\nDESCRIPTION: This snippet defines the InjectKeyExportBundle event type in TypeScript, indicating the action of injecting a key export bundle into the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nInjectKeyExportBundle: \"INJECT_KEY_EXPORT_BUNDLE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Initialization Intents for User Authentication\nDESCRIPTION: This snippet defines the structure for different initialization intents such as 'initOtpAuthIntent' and 'initUserEmailRecoveryIntent'. These intents handle user authentication processes via OTP and email recovery, requiring user-specific data and customization details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"initOtpAuthIntent\": { \"contact\": \"string\", \"emailCustomization\": { \"appName\": \"string\", \"logoUrl\": \"string\", \"magicLinkTemplate\": \"string\", \"templateId\": \"string\", \"templateVariables\": \"string\" }, \"otpType\": \"string\", \"sendFromEmailAddress\": \"string\", \"sendFromEmailSenderName\": \"string\", \"smsCustomization\": { \"template\": \"string\" }, \"userIdentifier\": \"string\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"initUserEmailRecoveryIntent\": { \"email\": \"string\", \"emailCustomization\": { \"appName\": \"string\", \"logoUrl\": \"string\", \"magicLinkTemplate\": \"string\", \"templateId\": \"string\", \"templateVariables\": \"string\" }, \"expirationSeconds\": \"string\", \"targetPublicKey\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building the Turnkey SDK Example\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and prepare the delegated-access example for use.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/delegated-access/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/delegated-access/\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys in TypeScript SDK\nDESCRIPTION: The 'stampDeleteApiKeys' function is designed to delete API keys using a 'TDeleteApiKeysBody' as input and returning a Promise resolving to a TSignedRequest or undefined, with inheritance from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampDeleteApiKeys**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Create Sub Organization in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a sub-organization using the TurnkeyBrowserClient. It takes a `TCreateSubOrganizationBody` as input and returns a Promise that resolves to an object representing the created sub-organization.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> **createSubOrganization**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1225](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1225)\n\n#### Parameters\n\n##### input\n\n`TCreateSubOrganizationBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createSubOrganization`](TurnkeyBrowserClient.mdx#createsuborganization)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CreateSubOrganizationResult Interface\nDESCRIPTION: Defines the structure for the result of creating a sub-organization, containing root user IDs and the sub-organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `rootUserIds`: `string`[]; \n  `subOrganizationId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateInvitationsBody type alias\nDESCRIPTION: The TCreateInvitationsBody type alias is defined as an intersection of the parameters for the PublicApiService_CreateInvitations operation and the commandOverrideParams type. It specifies the shape of the request body when creating invitations through the Turnkey SDK Server's API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateInvitationsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"operations[`\\\"PublicApiService_CreateInvitations\\\"`][`\\\"parameters\\\"`][`\\\"body\\\"`][`\\\"body\\\"`][`\\\"parameters\\\"`] & commandOverrideParams\"\n```\n\n----------------------------------------\n\nTITLE: SDK Complex Return Type Definition - TypeScript Interface\nDESCRIPTION: Comprehensive TypeScript interface definition showing the complex return type structure for SDK promises. Includes activity properties, authentication flows, and various organizational management intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateRootQuorum.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      // Various intent definitions follow\n      acceptInvitationIntent: {...};\n      acceptInvitationIntentV2: {...};\n      activateBillingTierIntent: {...};\n      // Additional intent definitions...\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the `TurnkeyConfig` interface in TypeScript. This interface is used to configure the Turnkey SDK for React Native, providing options for the API base URL and session management callbacks.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * # Interface: TurnkeyConfig\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:90](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L90)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent\nDESCRIPTION: This snippet establishes parameters related to the OTP authentication process, focusing on the OTP code and associated metadata necessary for its validation and secure transmission. Ensures user-specific credential management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKeyName\": \"string\",\n  \"expirationSeconds\": \"string\",\n  \"invalidateExisting\": \"boolean\",\n  \"otpCode\": \"string\",\n  \"otpId\": \"string\",\n  \"targetPublicKey\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetSubOrgIdsRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get sub-organization IDs. It includes optional filter parameters and pagination options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetSubOrgIdsRequest: object\n{\n  filterType?: string\n  filterValue?: string\n  organizationId: string\n  paginationOptions?: definitions[\"v1Pagination\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Response Type for API-Only Users Creation\nDESCRIPTION: Type alias that defines the response schema for the POST endpoint that creates API-only users in the Turnkey SDK. Represents the successful 200 OK response from the PublicApiService_CreateApiOnlyUsers operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateApiOnlyUsersResponse = operations[\"PublicApiService_CreateApiOnlyUsers\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: updateUser Function Signature in TypeScript\nDESCRIPTION: The function signature for updateUser which accepts an input parameter and returns a Promise with activity data, including approval status, timestamps, and operation results. The function supports numerous intents for various user management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUser(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; /* ... many other properties ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Testnet P2TR Accounts\nDESCRIPTION: This snippet defines a constant `DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS`, which is an array of `WalletAccount` objects. It is primarily used to set up default accounts for Bitcoin transactions on the testnet environment, ensuring that developers have a starting point for wallet account management. This is essential for functions that operate with Bitcoin wallets in testing scenarios.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_TESTNET_P2TR_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Constants in JavaScript\nDESCRIPTION: This snippet defines constants representing various activity statuses and types handled within the SDK. It includes enumerations for statuses such as created, pending, completed, and failed, as well as types for activities related to user management and transaction processing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n`s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: \"ACTIVITY_STATUS_CREATED\" \\| \"ACTIVITY_STATUS_PENDING\" \\| \"ACTIVITY_STATUS_COMPLETED\" \\| \"ACTIVITY_STATUS_FAILED\" \\| \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \\| \"ACTIVITY_STATUS_REJECTED\"; `type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" \\| \"ACTIVITY_TYPE_CREATE_USERS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \\| \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION\" \\| \"ACTIVITY_TYPE_CREATE_POLICY\" \\| \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_DELETE_USERS\" \\| \"ACTIVITY_TYPE_DELETE_API_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_INVITATION\" \\| \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_DELETE_POLICY\" \\| \"ACTIVITY_TYPE_CREATE_USER_TAG\" \\| \"ACTIVITY_TYPE_DELETE_USER_TAGS\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION\" \\| \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" \\| \"ACTIVITY_TYPE_REJECT_ACTIVITY\" \\| \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" \\| \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V3\" \\| \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" \\| \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" \\| \"ACTIVITY_TYPE_UPDATE_USER_TAG\" \\| \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V2\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" \\| \"ACTIVITY_TYPE_UPDATE_USER\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" \\| \"ACTIVITY_TYPE_CREATE_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" \\| \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" \\| \"ACTIVITY_TYPE_RECOVER_USER\" \\| \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" \\| \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_CREATE_POLICIES\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" \\| \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" \\| \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" \\| \"ACTIVITY_TYPE_OAUTH\" \\| \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_WALLETS\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" \\| \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH\" \\| \"ACTIVITY_TYPE_OTP_AUTH\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" \\| \"ACTIVITY_TYPE_UPDATE_WALLET\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V3\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Structure for Activity and Intents in JavaScript\nDESCRIPTION: This snippet defines the Promise structure for a complex object that encompasses various activity intents, including properties like 'canApprove' and 'canReject' for activity permissions, and nested structures for intents such as 'createApiKeysIntent' and 'createOrganizationIntent'. Key parameters represent the different actions that can be performed within the SDK, including handling invitations, organization creation, and user management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteOauthProviders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; } } }>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response - TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TGetVerifiedSubOrgIdsResponse that corresponds to the response schema for the 'Get Verified Sub Organizations' API endpoint within the SDK. This type alias enhances type checks by ensuring that the response data conforms to the expected structure when utilizing the API, and is dependent on the operations defined within the provided fetcher file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetVerifiedSubOrgIdsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TGetVerifiedSubOrgIdsResponse** = `operations`[`\\\"PublicApiService_GetVerifiedSubOrgIds\\\"`]`[`\\\"responses\\\"`]`[`\\\"200\\\"`]`[`\\\"schema\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Export Private Key Result Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export private key result, including export bundle and private key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportPrivateKeyResult\n\n> **v1ExportPrivateKeyResult**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1589](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1589)\n\n#### exportBundle\n\n> **exportBundle**: `string`\n\n##### Description\n\nExport bundle containing a private key encrypted to the client's target public key.\n\n#### privateKeyId\n\n> **privateKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given Private Key.\n```\n\n----------------------------------------\n\nTITLE: Clearing Embedded Key in TurnkeyIframeClient\nDESCRIPTION: A method to clear embedded keys from the iframe. It returns a Promise that resolves to null when the operation completes successfully.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclearEmbeddedKey(): Promise<null>\n```\n\n----------------------------------------\n\nTITLE: Defining Data, Credential, and Timestamp Structures in TypeScript\nDESCRIPTION: This snippet includes type definitions for handling data tags, addresses, credentials, and timestamp formats used in various operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"### datav1Tag\\n\\n> **datav1Tag**: `object`\\n\\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:381\"\n```\n\n----------------------------------------\n\nTITLE: WalletInterface Type Definition\nDESCRIPTION: Union type definition combining Solana and EVM wallet interfaces.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/documents/WalletStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WalletInterface = SolanaWalletInterface | EvmWalletInterface;\n```\n\n----------------------------------------\n\nTITLE: Defining v1PrivateKeyResult Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of a private key operation, including optional addresses and private key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_120\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1PrivateKeyResult: object\n\naddresses?: definitions[\"immutableactivityv1Address\"][]\n\nprivateKeyId?: string\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias `TGetApiKeysInput` as an object in TypeScript within the SDK API types. It is designed to standardize the input structure for API key retrieval operations in an SDK context. The main property included is `body`, which is typed as `TGetApiKeysBody`. This alias is a part of the TypeScript codebase, requiring knowledge of interfaces and type definitions as prerequisites.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetApiKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TTurnkeyConsensusNeededErrorType Type Alias in TypeScript\nDESCRIPTION: Defines a type alias that combines TurnkeyConsensusNeededError class with an object containing a specific name property. This type is used for error handling in consensus operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/type-aliases/TTurnkeyConsensusNeededErrorType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TTurnkeyConsensusNeededErrorType = TurnkeyConsensusNeededError & {\n    name: \"TurnkeyConsensusNeededError\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorResponse Type Alias in TypeScript\nDESCRIPTION: The TGetAuthenticatorResponse type alias defines a response schema for the \\'PublicApiService_GetAuthenticator\\' operation in the Public API. This type is used in the SDK for handling responses received after performing a POST request to the \\'/public/v1/query/get_authenticator\\' endpoint. Checkout the dist \\_\\_generated\\_\\_ TypeScript files for more detailed structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetAuthenticatorResponse = operations[\"PublicApiService_GetAuthenticator\"][\"responses\"][\"200\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Defining v1OtpAuthResult type\nDESCRIPTION: Defines the structure for an OTP authentication result, including optional API key ID and credential bundle, and the user ID. The credential bundle is HPKE encrypted and contains the user's credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n            v1OtpAuthResult: {\n                name: \"v1OtpAuthResult\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        apiKeyId: {\n                            type: \"string\",\n                            description: \"Unique identifier for the created API key.\"\n                        },\n                        credentialBundle: {\n                            type: \"string\",\n                            description: \"HPKE encrypted credential bundle\"\n                        },\n                        userId: {\n                            type: \"string\",\n                            description: \"Unique identifier for the authenticating User.\",\n                            required: true\n                        }\n                    },\n                    required: [\"userId\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining the v1FeatureName type\nDESCRIPTION: Defines the string literal type v1FeatureName.  This represents the valid names for feature flags. These flags control various features, such as root user email recovery, webauthn origins, email auth, email recovery, webhooks, SMS auth, and OTP email auth.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1FeatureName\": \\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\" | \\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\" | \\\"FEATURE_NAME_EMAIL_AUTH\\\" | \\\"FEATURE_NAME_EMAIL_RECOVERY\\\" | \\\"FEATURE_NAME_WEBHOOK\\\" | \\\"FEATURE_NAME_SMS_AUTH\\\" | \\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsBody Type Alias in TypeScript\nDESCRIPTION: Creates a composite type that combines the parameters from the PublicApiService_DeleteAuthenticators operation with command override parameters. Used for structuring requests to delete authenticators through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteAuthenticatorsBody = operations[\"PublicApiService_DeleteAuthenticators\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Converting String to Base64URL String in TypeScript\nDESCRIPTION: Function signature for converting a regular string input to a base64url encoded string. The function takes a string parameter and returns the base64url encoded version of that string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/stringToBase64urlString.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstringToBase64urlString(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining API-only User Parameters in TypeScript\nDESCRIPTION: This snippet describes the structure of parameters related to API-only users, including API key associations and optional user details. It provides a basis for managing users with limited access privileges.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface v1ApiOnlyUserParams {\n  apiKeys: definitions[\"apiApiKeyParams\"][];\n  userEmail?: string;\n  userName: string;\n  userTags: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createInvitations in TypeScript\nDESCRIPTION: The createInvitations method generates invitations based on the provided TCreateInvitationsBody input. This method returns a Promise that resolves to an object, thus assisting in the management of user invitations on the platform.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createInvitations**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:905](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L905)\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Organization Intent with Advanced Configuration\nDESCRIPTION: Provides a detailed schema for creating a sub-organization with customizable authentication, wallet, and user settings\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nintent.createSubOrganizationIntentV7\n```\n\n----------------------------------------\n\nTITLE: Defining InjectCredentialBundle Enumeration\nDESCRIPTION: This snippet defines the InjectCredentialBundle event type in TypeScript, which represents an action to inject a credential bundle into the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nInjectCredentialBundle: \"INJECT_CREDENTIAL_BUNDLE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Transaction Sign Body in TypeScript\nDESCRIPTION: This TypeScript type alias, TSignTransactionBody, is defined to represent the body structure required for signing transaction requests to the Turnkey API. It utilizes a generic operations structure to ensure correctness and consistency across API calls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignTransactionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TSignTransactionBody = operations[\\\"PublicApiService_SignTransaction\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent Structure in TypeScript\nDESCRIPTION: This snippet establishes the intent structure for updating user-related information, including the email, name, phone number, and associated tags, ensuring comprehensive user management capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"updateUserIntent\": { \"userEmail\": \"string\"; \"userId\": \"string\"; \"userName\": \"string\"; \"userPhoneNumber\": \"string\"; \"userTagIds\": \"string\"[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiKeysBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the request body structure for the API endpoint that creates API keys. It references the body parameters from the PublicApiService_CreateApiKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateApiKeysBody** = `operations`\\[`\"PublicApiService_CreateApiKeys\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n```\n\n----------------------------------------\n\nTITLE: TOtpAuthResponse Type Alias Definition\nDESCRIPTION: Defines a type alias named TOtpAuthResponse. It represents the schema of the response received after a successful OTP authentication. This type alias is derived from the generated types for the PublicApiService_OtpAuth operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TOtpAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n  \"code\": \"type TOtpAuthResponse = `operations`[\\\"PublicApiService_OtpAuth\\\"][`\\\"responses\\\"][`\\\"200\\\"][`\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPolicyInput Type Alias in TypeScript\nDESCRIPTION: The TGetPolicyInput type alias defines an object structure representing the input parameters for a policy retrieval request in the Turnkey SDK. It outlines the required properties and their expected types, ensuring type safety when interacting with the SDK. The primary property, 'body', is of type TGetPolicyBody, which must be defined for the complete functionality of the type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetPolicyInput = {\\n    body: TGetPolicyBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivityBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named TGetActivityBody by omitting the 'organizationId' property from the parameters of the 'PublicApiService_GetActivity' operation's body and combining it with 'queryOverrideParams'. This structure is essential for making API requests without needing the organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetActivityBody = Omit<operations[\\\"PublicApiService_GetActivity\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"], \\\"organizationId\\\"> & queryOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Structure - TypeScript\nDESCRIPTION: The `initUserEmailRecoveryResult` interface defines the structure for the result of an email recovery process for a user, which includes `userId` of type string. This structure ensures that the necessary data is returned in a consistent format for email recovery operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteOrganizationResult Structure in TypeScript\nDESCRIPTION: Defines the result structure for deleting an organization, indicating the unique identifier of the organization that was deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteOrganizationResult {\n    organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for a User object containing core user properties including ID, username, contact information (email, phone), organization ID, and associated wallets. Some fields are optional while others are required.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/User.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nUser = {\n  id: string;\n  userName: string;\n  email?: string;\n  phoneNumber?: string;\n  organizationId: string;\n  wallets: Wallet[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportWalletIntent type\nDESCRIPTION: Defines the structure of the intent for importing a wallet. It includes a list of wallet accounts, an encrypted bundle containing the wallet mnemonic, the ID of the user importing the wallet, and a human-readable name for the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1ImportWalletIntent\n * @memberof definitions\n */\nexport interface v1ImportWalletIntent {\n  /**\n   * A list of wallet Accounts.\n   */\n  accounts: definitions[\"v1WalletAccountParams\"][];\n  /**\n   * Bundle containing a wallet mnemonic encrypted to the enclave's target public key.\n   */\n  encryptedBundle: string;\n  /**\n   * The ID of the User importing a Wallet.\n   */\n  userId: string;\n  /**\n   * Human-readable name for a Wallet.\n   */\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetVerifiedSubOrgIdsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias 'TGetVerifiedSubOrgIdsBody' which represents a modified shape of the request body for the 'PublicApiService_GetVerifiedSubOrgIds' operation. It utilizes TypeScript's Omit utility type to exclude 'organizationId' from the body structure while also merging 'queryOverrideParams'. This alias helps in maintaining type safety and clarity when working with API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetVerifiedSubOrgIdsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetVerifiedSubOrgIdsBody = Omit<operations[\\\"PublicApiService_GetVerifiedSubOrgIds\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"], \\\"organizationId\\\"> & queryOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Policy via Coordinator API in TypeScript\nDESCRIPTION: API endpoint documentation for creating a new policy through the Turnkey coordinator service. This HTTP POST endpoint accepts a policy creation input and is defined in the public API fetcher.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicy.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TCreatePolicyInput`](../type-aliases/TCreatePolicyInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Structure - TypeScript\nDESCRIPTION: Defines the structure for votes which contains an array of objects. This is useful for handling voting mechanisms within activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nvotes: object[]; \n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure\nDESCRIPTION: This snippet defines the structure used for OTP (One-Time Password) authentication. It includes parameters for the contact method, email and SMS customization options, as well as the user identifier and OTP type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteSubOrganization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAuthenticatorsIntent and CreateAuthenticatorsIntentV2 Types in TypeScript\nDESCRIPTION: These snippets define structures for creating authenticators, including a list of authenticator objects and the user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateAuthenticatorsIntent = {\n  authenticators: object[];\n  userId: string;\n};\n\ntype CreateAuthenticatorsIntentV2 = {\n  authenticators: object[];\n  userId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Authenticator Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for retrieving an authenticator. It takes a TGetAuthenticatorBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_105\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetAuthenticator(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: API Key Management Types - TypeScript Interface Definitions\nDESCRIPTION: Defines TypeScript interfaces for API key management including creation requests, results and parameters. These types handle API key operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateApiKeysRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateApiKeysIntentV2\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetPaymentMethodIntent Interface in TypeScript\nDESCRIPTION: Specifies the structure for setting a payment method. It includes details such as cardholder information, card number, expiry date, and CVV.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  cardHolderEmail: string;\n  cardHolderName: string;\n  cvv: string;\n  expiryMonth: string;\n  expiryYear: string;\n  number: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagResponse Type Alias in TypeScript\nDESCRIPTION: This code defines the TUpdateUserTagResponse type alias, which represents the schema for the 200 response from the PublicApiService_UpdateUserTag operation in the Turnkey API. Used when updating user tags via POST to /public/v1/submit/update_user_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TUpdateUserTagResponse** = `operations`[`\"PublicApiService_UpdateUserTag\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This snippet defines a complex Promise return type with nested objects for various blockchain activities and intents. It includes structures for authenticators, invitations, organizations, policies, wallets, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n            clientExtensionResults: { \n              appid: boolean; \n              appidExclude: boolean; \n              credProps: { \n                rk: boolean; \n              }; \n            }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n              clientDataJson: string; \n              transports: []; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      // ... many more intent types ...\n      importPrivateKeyIntent: { \n        addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; \n        curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; \n        encryptedBundle: string; \n      }; \n    }; \n  }; \n}>\n```\n\n----------------------------------------\n\nTITLE: TRemoveOrganizationFeatureInput Type Alias Definition\nDESCRIPTION: Defines the `TRemoveOrganizationFeatureInput` type alias as an object with a `body` property. The `body` property is of type `TRemoveOrganizationFeatureBody`, which likely contains the specifics of the organization feature to be removed. This input type is used with the `POST /public/v1/submit/remove_organization_feature` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRemoveOrganizationFeatureInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TRemoveOrganizationFeatureInput** = `object`\n\nDefined in: packages/http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.d.ts:62318\n\n`POST /public/v1/submit/remove_organization_feature`\n\n## Properties\n\n### body\n\n> **body**: [`TRemoveOrganizationFeatureBody`](TRemoveOrganizationFeatureBody.mdx)\n\nDefined in: packages/http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.d.ts:62319\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Delete User Tags Response in TypeScript\nDESCRIPTION: The TDeleteUserTagsResponse type alias represents the schema structure for the delete user tags result within the API response. It combines types from operations and definitions to enforce a consistent shape of the response data. There are dependencies on specific operation definitions and schema standards which this alias conforms to.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteUserTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TDeleteUserTagsResponse = operations[\\\"PublicApiService_DeleteUserTags\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"deleteUserTagsResult\\\"] & definitions[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Update User Tag Method Definition in TypeScript\nDESCRIPTION: Method to update a user tag. Takes a TUpdateUserTagBody input parameter and returns a Promise resolving to a combined object type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserTag(input: TUpdateUserTagBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Wallet Interface\nDESCRIPTION: TypeScript interface definition for Solana wallet implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport interface SolanaWalletInterface extends BaseWalletInterface {\n  recoverPublicKey: () => string;\n  type: \"solana\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinSignetP2PKHAccountAtIndex Function\nDESCRIPTION: This code snippet defines the `defaultBitcoinSignetP2PKHAccountAtIndex` function, which accepts a `pathIndex` number as a parameter.  The function is expected to return a `WalletAccount` object, presumably representing a Bitcoin Signet P2PKH account. The function is defined in `packages/sdk-server/src/turnkey-helpers.ts`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinSignetP2PKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: defaultBitcoinSignetP2PKHAccountAtIndex()\n *\n * > **defaultBitcoinSignetP2PKHAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n *\n * Defined in: [packages/sdk-server/src/turnkey-helpers.ts:214](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/turnkey-helpers.ts#L214)\n *\n * ## Parameters\n *\n * ### pathIndex\n *\n * `number`\n *\n * ## Returns\n *\n * [`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CreateSubOrganizationResultV3 Interface\nDESCRIPTION: Enhanced version of the sub-organization creation result that includes private keys information alongside root user IDs and sub-organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `privateKeys`: `object`[]; \n  `rootUserIds`: `string`[]; \n  `subOrganizationId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Structure in TypeScript\nDESCRIPTION: Defines the structure for timestamp objects used in the Turnkey SDK, including nanoseconds and seconds fields.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt: { nanos: string; seconds: string; };\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication Intent Type Definition\nDESCRIPTION: Type definition for OTP authentication intent including API key configuration, expiration settings, and validation parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `apiKeyName`: `string`; \n  `expirationSeconds`: `string`; \n  `invalidateExisting`: `boolean`; \n  `otpCode`: `string`; \n  `otpId`: `string`; \n  `targetPublicKey`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletAccountsResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing a list of wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletAccountsResponse {\n  accounts: definitions[\"v1WalletAccount\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPolicyRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a specific policy. It requires both organizationId and policyId as string properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPolicyRequest: object\n{\n  organizationId: string\n  policyId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining organizationId Type for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript type definition for the organizationId field used across Turnkey SDK. This field uniquely identifies organizations within the Turnkey platform.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n`string`\n```\n\n----------------------------------------\n\nTITLE: activityDecision method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, is used to make an activity decision. It takes a URL and a request body as input and returns a Promise that resolves to the response type `TResponseType`. The method is generic, allowing for different body and response types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    activityDecision<TBodyType, TResponseType>(\n        url: string,\n        body: TBodyType\n    ): Promise<TResponseType> {\n        return this.command<TBodyType, TResponseType>(url, body, \"activityDecision\");\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Curve Enums in TypeScript\nDESCRIPTION: Lists the cryptographic curves available for API key generation, each offering specific security properties. These curves determine the method used for signing and encryption, which is critical for secure API operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"API_KEY_CURVE_P256\" | \"API_KEY_CURVE_SECP256K1\" | \"API_KEY_CURVE_ED25519\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsResponse Type in TypeScript\nDESCRIPTION: Type alias that maps to the response schema of the DELETE authenticators endpoint using operations type intersection. The type represents the 200 success response schema for the PublicApiService_DeleteAuthenticators operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTDeleteAuthenticatorsResponse = operations[\"PublicApiService_DeleteAuthenticators\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Transaction Result Structure in TypeScript\nDESCRIPTION: Defines the structure for signing transaction results, including signedTransaction as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransactionResult`: \\{ `signedTransaction`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Deletion Intent - TypeScript\nDESCRIPTION: Represents the structure for deleting an organization, requiring the organization ID. This is necessary for managing organizational lifecycle within the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteOrganizationIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1227\n */\nexport interface v1DeleteOrganizationIntent {\n  organizationId: string; // Unique identifier for a given Organization.\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing ECDSA Signatures in TypeScript\nDESCRIPTION: Function that takes an ECDSA signature object containing r, s, and v components and serializes them into a single string. Each component represents a part of the cryptographic signature used in Ethereum transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/functions/serializeSignature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nserializeSignature(signature): string\n```\n\n----------------------------------------\n\nTITLE: Defining the WebauthnStamper Constructor in TypeScript\nDESCRIPTION: This snippet defines the constructor for the WebauthnStamper class, which takes a configuration object of type TWebauthnStamperConfig as a parameter and returns an instance of WebauthnStamper. It is critical for initializing the object with required settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/WebauthnStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew WebauthnStamper(config): WebauthnStamper\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOauthProvidersIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for creating OAuth providers, including a list of provider objects and the user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateOauthProvidersIntent = {\n  oauthProviders: object[];\n  userId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Flutter Demo App Details\nDESCRIPTION: This section describes the Flutter demo application that demonstrates how to use Turnkey's Dart packages. It covers user authentication, wallet creation, exporting wallets, and signing messages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/README.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Fetching Sub Organization IDs with SDK Client\nDESCRIPTION: The stampGetSubOrgIds method allows fetching sub-organization IDs using input of TGetSubOrgIdsBody. It returns a Promise resolving to either undefined or a TSignedRequest, supporting sub-organization ID retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_93\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetSubOrgIds**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Intent and Result Types\nDESCRIPTION: This code snippet defines a set of TypeScript types for various intents (actions) and their corresponding results. Each intent represents a specific operation, such as creating API keys, importing wallets, signing transactions, or managing organization features. The result types specify the data returned upon completion of each intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteInvitation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: { `userId`: `string`; \\}; `initImportWalletIntent`: { `userId`: `string`; \\}; `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: { `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: { `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; \\}; `setOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: { `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: { `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: { `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: { `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: { `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: { `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: { `walletId`: `string`; `walletName`: `string`; \\}; \\}; `organizationId`: `string`; `result`: { `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: { `productId`: `string`; \\}; `createApiKeysResult`: { `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: { `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: { `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: { `providerIds`: `string`[]; \\}; `createOrganizationResult`: { `organizationId`: `string`; \\}; `createPoliciesResult`: { `policyIds`: `string`[]; \\}; `createPolicyResult`: { `policyId`: `string`; \\}; `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: { `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: { `userIds`: `string`[]; \\}; `createUserTagResult`: { `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: { `addresses`: `string`[]; \\}; `createWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: { `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: { `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: { `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: { `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: { `organizationId`: `string`; \\}; `deletePaymentMethodResult`: { `paymentMethodId`: `string`; \\}; `deletePolicyResult`: { `policyId`: `string`; \\}; `deletePrivateKeysResult`: { `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: { `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: { `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: { `userIds`: `string`[]; \\}; `deleteUserTagsResult`: { `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: { `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: { `privateKeyId`: `string`; \\}; `emailAuthResult`: { `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: { `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: { `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: { `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: { `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: { `importBundle`: `string`; \\}; `initImportWalletResult`: { `importBundle`: `string`; \\}; `initOtpAuthResult`: { `otpId`: `string`; \\}; `init\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateInvitationsInput Type Alias in TypeScript\nDESCRIPTION: Represents the input structure for creating invitations in the Turnkey SDK Server, containing a body property of type TCreateInvitationsBody. Used for specifying invitation creation parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateInvitationsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateInvitationsInput = {\n  body: TCreateInvitationsBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Result Types in TypeScript\nDESCRIPTION: The snippet defines various result data types for activities such as email recovery, OAuth, OTP authentication, and several others, specifying the structure and content of the result objects. These types help standardize the data returned from different operations. No external dependencies are outlined, and all fields are strings or arrays of strings, with some types supporting enumerations for statuses and activity types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; `type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining type for walletId field within v1WalletResult\nDESCRIPTION: This snippet defines the type for the `walletId` field within the `v1WalletResult` object. The field is defined as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n> **walletId**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeysResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting all private keys. It includes an array of privateKey objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPrivateKeysResponse: object\n{\n  privateKeys: definitions[\"v1PrivateKey\"][]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Properties of TDeleteUserTagsInput in TypeScript\nDESCRIPTION: Defines the body property of the TDeleteUserTagsInput type alias. The body is of type TDeleteUserTagsBody, which likely contains the necessary data for deleting user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteUserTagsBody\n```\n\n----------------------------------------\n\nTITLE: Defining EVM Wallet Interface\nDESCRIPTION: TypeScript interface definition for EVM wallet implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport interface EvmWalletInterface extends BaseWalletInterface {\n  recoverPublicKey: (message: string, signature: string) => Promise<string>;\n  type: \"evm\";\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Login Credentials\nDESCRIPTION: Example of sending login credentials to a user's email address\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst sendCredentialResponse = await server.sendCredential({\n  email,\n  targetPublicKey: authIframeClient?.iframePublicKey!,\n  organizationId: suborgId!,\n  ...(apiKeyName && { apiKeyName }),\n  ...(sendFromEmailAddress && { sendFromEmailAddress }),\n  ...(sessionLengthSeconds && { sessionLengthSeconds }),\n  ...(invalidateExisting && { invalidateExisting }),\n  ...(emailCustomization && { emailCustomization }),\n  ...(sendFromEmailAddress && { sendFromEmailAddress }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining v1RecoverUserResult Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of a user recovery operation, including the ID of the created authenticator.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_124\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RecoverUserResult: object\n\nauthenticatorId: string[]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript for Turnkey SDK\nDESCRIPTION: This code snippet defines a complex type structure for various activity results in the Turnkey SDK. It includes types for email recovery, OAuth, OTP authentication, user management, organization features, payment methods, and blockchain-related functions. The type also includes activity status and type enums, as well as timestamp and voting information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult: { userId: string; };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Type in TypeScript\nDESCRIPTION: This snippet defines the type for the result of OTP (One-Time Password) authentication. It includes a single property, 'otpId', which is expected to be a string. The type provides clarity on the structure of the response when OTP-based authentication is executed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n`initOtpAuthResultV2`: \\{ `otpId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enums in TypeScript\nDESCRIPTION: Defines string literal types for activity statuses and types, representing various states and operations in the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining Email Authentication Result Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an email authentication result, including API key ID and user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1EmailAuthResult\n\n> **v1EmailAuthResult**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1556](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1556)\n\n#### apiKeyId\n\n> **apiKeyId**: `string`\n\n##### Description\n\nUnique identifier for the created API key.\n\n#### userId\n\n> **userId**: `string`\n\n##### Description\n\nUnique identifier for the authenticating User.\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateWalletIntent Interface in TypeScript\nDESCRIPTION: Interface for updating wallet information including wallet ID and name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n{ walletId: string; walletName: string; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TRecoverUserResponse in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TRecoverUserResponse, which represents the schema for successful responses from the 'PublicApiService_RecoverUser' operation. It is structured to reference the specific response schema for HTTP status 200.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRecoverUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TRecoverUserResponse = operations[\\\"PublicApiService_RecoverUser\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Type Definition for DeleteApiKeysResult Interface\nDESCRIPTION: Defines the structure for the result of deleting API keys, containing a list of API key IDs that were deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `apiKeyIds`: `string`[]; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a wallet, including organizationId and walletId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletRequest {\n  organizationId: string;\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining updateAllowedOriginsIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface definition for updating allowed origins in Turnkey. This intent allows specifying additional origins from which requests are permitted besides default Turnkey origins.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n{ `allowedOrigins`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TSetOrganizationFeatureResponse in TypeScript\nDESCRIPTION: This code snippet defines a type alias, TSetOrganizationFeatureResponse, which is used to specify the response structure expected from the SetOrganizationFeature API endpoint. It leverages TypeScript's type system to ensure the response conforms to the defined schema, facilitating safer and more predictable API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TSetOrganizationFeatureResponse = operations[\\\"PublicApiService_SetOrganizationFeature\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetVerifiedSubOrgIdsResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting verified sub-organization IDs. It includes an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_103\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetVerifiedSubOrgIdsResponse: object\n{\n  organizationIds: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: signWithApiKey() Function Signature\nDESCRIPTION: This snippet shows the function signature of `signWithApiKey`. It takes an input object containing `content`, `privateKey`, and `publicKey` strings, and returns a Promise that resolves to a string representing the signature. The function abstracts the signing process for different environments.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/signWithApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signWithApiKey**: (`input`) => `Promise`\\<`string`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Update Private Key Tag Body - TypeScript\nDESCRIPTION: Defines a type alias TUpdatePrivateKeyTagBody used for the body of the POST request to update a private key tag in the Turnkey API. This type is based on a specific operation defined in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdatePrivateKeyTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TUpdatePrivateKeyTagBody = operations[\\\"PublicApiService_UpdatePrivateKeyTag\\\"][\\\"parameters\\\"][\\\"body\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent Structure - JavaScript\nDESCRIPTION: This snippet defines the structure for importing a wallet which includes fields for accounts, the encrypted bundle, and user information. This is crucial for enabling wallet imports in applications that require user authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n`importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: TImportWalletBody Type Alias Definition\nDESCRIPTION: Defines the `TImportWalletBody` type alias. It specifies that this type is equivalent to the type of the `body` property within the `parameters` property of the `PublicApiService_ImportWallet` operation. This operation is likely associated with a `POST` request to the `/public/v1/submit/import_wallet` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TImportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TImportWalletBody** = `operations`[`\"PublicApiService_ImportWallet\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining ReadOnlySessionResult Object Definition in TypeScript\nDESCRIPTION: Defines the structure for the result of a read-only session creation request, detailing organization and session information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nv1CreateReadOnlySessionResult: object\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:838\n\norganizationId: string // Unique identifier for a given Organization.\norganizationName: string // Human-readable name for an Organization.\nsession: string // String representing a read-only session.\nsessionExpiry: string // UTC timestamp in seconds representing the expiry time for the read-only session.\nuserId: string // Unique identifier for a given User.\nusername: string // Human-readable name for a User.\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Turnkey SDK\nDESCRIPTION: Example of environment variables needed for configuring Turnkey SDK, including API keys, base URL, organization ID, and Infura key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/trading-runner/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: This TypeScript code snippet defines a type alias `TGetApiKeyResponse` that is used to specify the expected structure of a successful response (HTTP status 200) from the 'PublicApiService_GetApiKey' operation in the SDK. It serves to type the API response accurately and ensure reliable interaction with the API. There are no external dependencies mentioned for utilizing this type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetApiKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetApiKeyResponse = operations[\\\"PublicApiService_GetApiKey\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition - OAuth Request/Response\nDESCRIPTION: Defines types for OAuth authentication request and response objects including organization ID, parameters, timestamps and results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1OauthRequest {\n  organizationId: string;\n  parameters: definitions[\"v1OauthIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_OAUTH\";\n}\n\ninterface v1OauthResult {\n  apiKeyId: string;\n  credentialBundle: string; \n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsResponse Type in TypeScript\nDESCRIPTION: Type alias that combines the create wallet accounts result schema with v1ActivityResponse definitions from the Turnkey API operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletAccountsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateWalletAccountsResponse = operations[\"PublicApiService_CreateWalletAccounts\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createWalletAccountsResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Address Formats for Bitcoin and Other Cryptocurrencies - TypeScript\nDESCRIPTION: This snippet defines various address format types for different cryptocurrencies, ensuring the SDK can handle different formats during wallet operations. It includes Bitcoin formats for regtest, as well as formats for SEI, XLM, Dogecoin, TON, and XRP.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddressFormats = (\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];\n```\n\n----------------------------------------\n\nTITLE: Setting API Key as Signing Key in Telegram Cloud Storage - TypeScript\nDESCRIPTION: This snippet demonstrates how to set an API key as the signing key for stamping requests using TelegramCloudStorageStamper. It stores the key in a specified location and uses it for signing requests. Without an API key specified, the default location is used. Dependencies include @turnkey/telegram-cloud-storage-stamper, and the main input is a CloudStorageAPIKey object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/README.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// the API key to be set as the signing key\nconst apiKey: CloudStorageAPIKey = {\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n};\n\n// create a new Telegram Cloud Storage Stamper\nconst stamper = new TelegramCloudStorageStamper();\n\n// the key used to index Telegram Cloud Storage\nconst telegramCloudStorageKey = \"@turnkey/telegramCloudStorageKey\";\n\n// insert the API key in Telegram Cloud Storage\nawait stamper.setSigningKey({\n  cloudStorageAPIKey: apiKey,\n  cloudStorageKey: telegramCloudStorageKey,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining v1HashFunction Type in TypeScript\nDESCRIPTION: Defines a union type for various hash functions used in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype v1HashFunction = \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\";\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Intent Structure\nDESCRIPTION: This snippet describes the structure for setting a payment method, including card details such as holder's name, email, CVV, and expiration date. This structure is particularly useful during the payment setup process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Status Type Definitions\nDESCRIPTION: Defines an enumeration of possible activity statuses for tracking workflow progression in wallet import processes\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initImportWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Wallet Accounts - TypeScript\nDESCRIPTION: The `signGetWalletAccounts` function takes `input` and optional `options` parameters to return a signed `GetWalletAccounts` request. The function leverages TypeScript generics to ensure type safety for the inputs, ensuring compatibility with the expected structure of the `SignedRequest` type. This function returns a promise that resolves to a signed request, ready for submission to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetWalletAccounts = (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetSubOrgIdsBody Type Alias in TypeScript\nDESCRIPTION: The TGetSubOrgIdsBody type alias is defined using TypeScript's Omit utility type. It is designed to exclude the 'organizationId' from the body parameters of the 'PublicApiService_GetSubOrgIds' operation, while incorporating 'queryOverrideParams'. This customization tailors the API request format specific to sub-organization ID retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetSubOrgIdsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **TGetSubOrgIdsBody** = `Omit`\\<`operations`\\[`\"PublicApiService_GetSubOrgIds\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\], `\"organizationId\"`\\> & `queryOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Defining Intent and Result Interfaces\nDESCRIPTION: Provides comprehensive type structures for SDK operations covering authentication, wallet management, policy creation, and user management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    types include: \n    - organizationId\n    - various intent types\n    - result types for different operations\n}\n```\n\n----------------------------------------\n\nTITLE: Defining signRawPayload Function in JavaScript\nDESCRIPTION: The 'signRawPayload' function takes an input parameter and returns a promise that resolves to an object representing user activity intents. It includes various nested structures representing the expected response types, detailing properties for approvals, authenticator structures, and various user-related intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayload.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst signRawPayload = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SE\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteSubOrganizationRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to delete a sub-organization, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeleteSubOrganizationRequest {\n  organizationId: string;\n  parameters: definitions[\"v1DeleteSubOrganizationIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Email Authentication - TypeScript\nDESCRIPTION: This code snippet defines a type alias called TEmailAuthBody which represents the structure of the body for email authentication requests. It is specifically used when making a POST request to the '/public/v1/submit/email_auth' endpoint. The type ensures that the request body adheres to the expected structure as defined in the SDK operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TEmailAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TEmailAuthBody = operations[\\\"PublicApiService_EmailAuth\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Definition of TCreateApiKeysBody Type Alias\nDESCRIPTION: Defines the TCreateApiKeysBody type alias. This type alias combines the request body parameters required for the `PublicApiService_CreateApiKeys` operation, as specified in the API definition, with additional `commandOverrideParams`. The resulting type is used as the request body when creating new API keys using the Turnkey SDK Server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TCreateApiKeysBody** = `operations`[\\\"PublicApiService_CreateApiKeys\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & `commandOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteOrganizationIntent Structure in TypeScript\nDESCRIPTION: Defines the intent structure for deleting an organization, requiring the organization ID as a unique identifier.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteOrganizationIntent {\n    organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOauthProvidersResponse Type in TypeScript\nDESCRIPTION: Type alias definition that maps to the response schema of the PublicApiService_GetOauthProviders operation's 200 status code response. Used for typing the response from the POST /public/v1/query/get_oauth_providers endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetOauthProvidersResponse = operations[\"PublicApiService_GetOauthProviders\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Deletion Result Structure\nDESCRIPTION: This snippet describes the structure for 'deleteAuthenticatorsResult', which returns a unique identifier for each deleted Authenticator as an array of strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_75\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteAuthenticatorsResult?\n\\{ `authenticatorIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePrivateKeyTagInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TUpdatePrivateKeyTagInput type alias as an object with a single property 'body' of type TUpdatePrivateKeyTagBody. It is used for updating private key tags in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePrivateKeyTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTUpdatePrivateKeyTagInput = object\n```\n\n----------------------------------------\n\nTITLE: Specifying Properties of TDeleteSubOrganizationInput in TypeScript\nDESCRIPTION: This code specifies the properties of the TDeleteSubOrganizationInput type alias. It has a single property 'body' of type TDeleteSubOrganizationBody, which contains the necessary information for deleting a sub-organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteSubOrganizationBody\n```\n\n----------------------------------------\n\nTITLE: Injecting Credential Bundle in Turnkey Browser SDK\nDESCRIPTION: The `injectCredentialBundle` function injects a credential bundle into the Turnkey Browser SDK. It takes a `credentialBundle` string as input and returns a promise resolving to a boolean indicating success or failure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n> **injectCredentialBundle**(`credentialBundle`): `Promise`\\<`boolean`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:870](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L870)\n\n#### Parameters\n\n##### credentialBundle\n\n`string`\n\n#### Returns\n\n`Promise`\\<`boolean`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Types\nDESCRIPTION: These snippets define types for various intents used within the system.  Each intent represents a specific action, such as importing wallets, initiating OTP authentication, or signing payloads, and contains relevant data for executing that action. The snippets show different intent structures, each tailored to its specific operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteAuthenticators.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`importPrivateKeyIntent`: { `addresses`: (`\"ADDRESS_FORMAT_BITCOIN_LEGACY_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_LEGACY_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SEGWIT_P2SH_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SEGWIT_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SEGWIT_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TAPROOT_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`initImportPrivateKeyIntent`: { `userId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`initImportWalletIntent`: { `userId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`initOtpAuthIntentV2`: { `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`oauthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`otpAuthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`recoverUserIntent`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `userId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`rejectActivityIntent`: { `fingerprint`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`removeOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`setOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`setPaymentMethodIntent`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`setPaymentMethodIntentV2`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`signRawPayloadIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`signRawPayloadIntentV2`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`signRawPayloadsIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`signTransactionIntent`: { `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`signTransactionIntentV2`: { `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updateAllowedOriginsIntent`: { `allowedOrigins`: `string`[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePolicyIntentV2`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePrivateKeyTagIntent`: { `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updateRootQuorumIntent`: { `threshold`: `number`; `userIds`: `string`[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updateUserTagIntent`: { `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updateWalletIntent`: { `walletId`: `string`; `walletName`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Whoami Query\nDESCRIPTION: This snippet indicates the POST endpoint for the 'whoami' query in the Turnkey SDK. It serves as a reference for developers to understand where to send requests to retrieve the current user's information. Proper integration with this endpoint is crucial for any feature that requires user identity information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiResponse.mdx#2025-04-16_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n\"POST /public/v1/query/whoami\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Policy Management\nDESCRIPTION: Defines types for creating and managing policies including policy intents, requests and results. Contains fields for policy effects, conditions, selectors and consensus requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePolicyIntent {\n  effect: v1Effect;\n  notes?: string;\n  policyName: string;\n  selectors: v1Selector[];\n}\n\ninterface v1CreatePoliciesResult {\n  policyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: TSetOrganizationFeatureBody Type Alias Definition\nDESCRIPTION: Defines the TSetOrganizationFeatureBody type alias. It's used as the body for setting an organization feature via the PublicApiService_SetOrganizationFeature operation. The type is derived from the generated HTTP client definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TSetOrganizationFeatureBody** = `operations`[`\"PublicApiService_SetOrganizationFeature\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1RejectActivityIntent type\nDESCRIPTION: Defines the structure for an activity rejection intent, including a fingerprint artifact to verify the user's action. This is used when a user wants to reject a specific activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\n            v1RejectActivityIntent: {\n                name: \"v1RejectActivityIntent\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        fingerprint: {\n                            type: \"string\",\n                            description: \"An artifact verifying a User's action.\",\n                            required: true\n                        }\n                    },\n                    required: [\"fingerprint\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Key Stamper Configuration in TypeScript\nDESCRIPTION: This snippet defines the TApiKeyStamperConfig type alias, which is an object containing properties for API keys. It outlines the requirements for the private and public API keys that are essential for the functioning of the API key stamper.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TApiKeyStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TApiKeyStamperConfig = {\n    apiPrivateKey: string;\n    apiPublicKey: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserTagIntent Interface in TypeScript\nDESCRIPTION: Interface for managing user tags, allowing addition and removal of users from tags and updating tag names.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n{ addUserIds: string[]; newUserTagName: string; removeUserIds: string[]; userTagId: string; }\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateWalletResult in TypeScript\nDESCRIPTION: This snippet outlines the `updateWalletResult` type, which consists of a `walletId` string representing the identifier of the updated wallet. It is crucial for wallet management operations in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n`updateWalletResult`: \\{ `walletId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetActivitiesRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting activities, including optional filters and pagination options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetActivitiesRequest {\n  filterByStatus?: definitions[\"v1ActivityStatus\"][];\n  filterByType?: definitions[\"v1ActivityType\"][];\n  organizationId: string;\n  paginationOptions?: definitions[\"v1Pagination\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TImportWalletInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TImportWalletInput type alias as an object in TypeScript. It is used in the endpoint POST /public/v1/submit/import_wallet to handle wallet import requests. The body property references TImportWalletBody, which is detailed in a separate document.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TImportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TImportWalletInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the result of OTP authentication process including apiKeyId, credentialBundle, and userId as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Root User Parameters V3 Interface in TypeScript\nDESCRIPTION: This snippet defines the v1RootUserParamsV3 interface, similar to v1RootUserParamsV2 but with updated API key parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_134\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RootUserParamsV3: object\n\napiKeys: definitions[\"v1ApiKeyParamsV2\"][]\n\nDescription: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\nauthenticators: definitions[\"v1AuthenticatorParamsV2\"][]\n\nDescription: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\noauthProviders: definitions[\"v1OauthProviderParams\"][]\n\nDescription: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.\n\nuserEmail?: string\n\nDescription: The user's email address.\n\nuserName: string\n\nDescription: Human-readable name for a User.\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeysResult type\nDESCRIPTION: Defines the structure for the result of a private key deletion request, containing a list of private key IDs that were removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeletePrivateKeysResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1286\n\n#### privateKeyIds\n\n> **privateKeyIds**: `string`[]\n\n##### Description\n\nA list of private key unique identifiers that were removed\n```\n\n----------------------------------------\n\nTITLE: Updating User Information in Turnkey SDK (TypeScript)\nDESCRIPTION: The updateUser method updates user information. It takes a TUpdateUserBody input and returns a Promise that resolves to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_132\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUser(input: TUpdateUserBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Activity Rejection Intent Structure in TypeScript\nDESCRIPTION: Defines the structure for rejecting an activity intent. Contains a fingerprint field to verify the user's action.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `fingerprint`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: UserVerificationRequirement Type Definition\nDESCRIPTION: Type definition for user verification requirements in WebAuthn authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype UserVerificationRequirement = \"discouraged\" | \"preferred\" | \"required\";\n```\n\n----------------------------------------\n\nTITLE: Creating User Tag with TypeScript SDK\nDESCRIPTION: This code snippet defines the `createUserTag` function which returns a Promise. This function handles the creation of a user tag by processing various intents like authorization and billing tier activation. Dependencies include TypeScript for type definitions. The function is asynchronous, ensuring proper handling of user-related activity across multiple intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"# Function: createUserTag()\\n\\n> **createUserTag**(`input`): `Promise`<{ `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: ...; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` | \\\"cross-platform\\\" | \\\"platform\\\"; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\\\"AUTHENTICATOR_TRANSPORT_BLE\\\" | \\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\" | \\\"AUTHENTICATOR_TRANSPORT_NFC\\\" | \\\"AUTHENTICATOR_TRANSPORT_USB\\\" | \\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\")[]; };\"\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition: TGetPoliciesBody in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named `TGetPoliciesBody`. It's derived from the `PublicApiService_GetPolicies` operation's body parameters, omitting the `organizationId` property and including `queryOverrideParams`. This type is used to specify the structure of the request body for retrieving policies within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPoliciesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetPoliciesBody = `Omit`<`operations`[`\"PublicApiService_GetPolicies\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`> & `queryOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagResponse Type Alias in TypeScript\nDESCRIPTION: Defines a composite type that merges the create user tag operation response schema with the v1ActivityResponse definition from the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateUserTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateUserTagResponse = operations[\"PublicApiService_CreateUserTag\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createUserTagResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Funding Short Term Storage Addresses\nDESCRIPTION: Commands to transfer funds from the Distribution address to Short Term Storage addresses, with an option for continuous execution.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli fund\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli fund --interval=20000\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication Endpoint in TypeScript\nDESCRIPTION: Defines the OAuth authentication endpoint for the Coordinator API. This endpoint authenticates a user with an OIDC token and is currently in BETA.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Authenticate a user with an Oidc token (Oauth) - BETA\n *\n * POST /public/v1/submit/oauth\n *\n * @param input TOauthInput\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Private Key Export Response in TypeScript\nDESCRIPTION: This snippet defines a type alias called 'TExportPrivateKeyResponse' that corresponds to the response schema of the 'Export Private Key' operation from the Public API service. It utilizes TypeScript's capabilities to enhance type safety and clarity in API response handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TExportPrivateKeyResponse = operations[`\\\"PublicApiService_ExportPrivateKey\\\"]`[`\\\"responses\\\"]`[`\\\"200\\\"]`[`\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Creating User Tag with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateUserTag` function accepts an input of type `TCreateUserTagBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This method is typically used to create tags for users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateUserTag(input: TCreateUserTagBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Navigating SDK Documentation Links\nDESCRIPTION: Markdown navigation structure showing the documentation hierarchy for accessing createUserTag functionality in the Turnkey SDK server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createUserTag\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction Intent - JavaScript\nDESCRIPTION: This intent is used to sign a transaction by providing the transaction type and the unsigned transaction details, leveraging a private key for the signing process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: `string`; type: `TRANSACTION_TYPE_ETHEREUM` | `TRANSACTION_TYPE_SOLANA`; unsignedTransaction: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload Function - TypeScript\nDESCRIPTION: The signRawPayload function is designed to handle multiple intents for user management actions in a robust way. It returns a Promise that resolves with a structured response object that indicates the status and details of the signed payload. The function’s parameters and structure accommodate a wide variety of user authentication and billing intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayload.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayload(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | 'cross-platform' | 'platform'; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | 'cross-platform' | 'platform'; clientDataJson: string; transports: ...[]; }; type: 'public-key'; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | 'cross-platform' | 'platform'; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | 'cross-platform' | 'platform'; clientDataJson: string; transports: ...[]; }; type: 'public-key'; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: 'EFFECT_ALLOW' | 'EFFECT_DENY'; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: 'EFFECT_ALLOW' | 'EFFECT_DENY'; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: 'EFFECT_ALLOW' | 'EFFECT_DENY'; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: 'MNEMONIC_LANGUAGE_ENGLISH' | 'MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE' | 'MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE' | 'MNEMONIC_LANGUAGE_CZECH' | 'MNEMONIC_LANGUAGE_FRENCH' | 'MNEMONIC_LANGUAGE_ITALIAN' | 'MNEMONIC_LANGUAGE_JAPANESE' | 'MNEMONIC_LANGUAGE_KOREAN' | 'MNEMONIC_LANGUAGE_SPANISH'; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: ('ADDRESS_FORMAT_UNCOMPRESSED' | 'ADDRESS_FORMAT_COMPRESSED' | 'ADDRESS_FORMAT_ETHEREUM' | 'ADDRESS_FORMAT_SOLANA' | 'ADDRESS_FORMAT_COSMOS' | 'ADDRESS_FORMAT_TRON' | 'ADDRESS_FORMAT_SUI' | 'ADDRESS_FORMAT_APTOS' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH' | 'ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR')[]; };\n\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Ethers Dependencies\nDESCRIPTION: npm command to install the required packages: ethers and @turnkey/ethers\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ethers @turnkey/ethers\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPoliciesResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting policies. It includes an array of policy objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPoliciesResponse: object\n{\n  policies: definitions[\"v1Policy\"][]\n}\n```\n\n----------------------------------------\n\nTITLE: TurnkeyDirectWallet Initialization Methods\nDESCRIPTION: Static initialization methods including init() and initWithPublicKey() for creating wallet instances.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/classes/TurnkeyDirectWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic init(input: { config: TConfig, prefix?: string }): Promise<TurnkeyDirectWallet>;\nstatic initWithPublicKey(input: { config: TConfig, prefix?: string }): TurnkeyDirectWallet;\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletAccountInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TExportWalletAccountInput type alias as an object with a single property 'body' of type TExportWalletAccountBody. It is used for the input of the export wallet account API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTExportWalletAccountInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining the v1EmailCustomizationParams object\nDESCRIPTION: Defines the structure of the v1EmailCustomizationParams object, used to customize the content of emails sent during the email authentication process. It includes parameters for specifying the application name (appName), a URL for a logo (logoUrl), a template for a magic link (magicLinkTemplate), a unique identifier for an email template (templateId), and a JSON object of key/value pairs for custom templates (templateVariables). This object allows customization of the email's appearance and functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1EmailCustomizationParams\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1423\n\n#### appName?\n\n> `optional` **appName**: `string`\n\n##### Description\n\nThe name of the application.\n\n#### logoUrl?\n\n> `optional` **logoUrl**: `string`\n\n##### Description\n\nA URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.\n\n#### magicLinkTemplate?\n\n> `optional` **magicLinkTemplate**: `string`\n\n##### Description\n\nA template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.\n\n#### templateId?\n\n> `optional` **templateId**: `string`\n\n##### Description\n\nUnique identifier for a given Email Template. If not specified, the default is the most recent Email Template.\n\n#### templateVariables?\n\n> `optional` **templateVariables**: `string`\n\n##### Description\n\nJSON object containing key/value pairs to be used with custom templates.\"\n```\n\n----------------------------------------\n\nTITLE: Defining type for mnemonicLength field\nDESCRIPTION: This snippet defines the optional `mnemonicLength` field within `v1WalletParams`, which is a number. It provides the length of the mnemonic phrase used to generate the Wallet seed, defaulting to 12. Allowed values are 12, 15, 18, 21, and 24.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **mnemonicLength**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Create OAuth Providers Response in TypeScript\nDESCRIPTION: This snippet defines a type alias `TCreateOauthProvidersResponse` that maps to the response structure of the 'Create OAuth Providers' API operation. This is used to ensure type safety and predictability in handling API responses within TypeScript applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TCreateOauthProvidersResponse = operations[\\\"PublicApiService_CreateOauthProviders\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enums in TypeScript\nDESCRIPTION: Comprehensive type definitions for activity statuses, activity types, and result structures for various operations in the SDK. This includes user management, authentication, policy management, key operations, wallet operations, and organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/recoverUser.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Method Definition for createPolicies in TypeScript\nDESCRIPTION: The createPolicies method creates multiple policies using the provided input of type TCreatePoliciesBody, and returns a Promise of an object. The method is central to managing server-side policy administration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **createPolicies**(`input`): `Promise`<`object` & `object`>\n\nDefined in: [packages/sdk-server/src/__generated__/sdk-client-base.ts:971](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L971)\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePrivateKeysResult Type - TypeScript\nDESCRIPTION: Describes the result structure for creating private keys, which includes an array of private key IDs. This ensures that clients can easily retrieve identifiers for created keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeysResult {\n  privateKeyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Status Enums in TypeScript\nDESCRIPTION: Defines enums for activity types and status, used in the API for tracking various operations and their states within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUser.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Type and Result Interfaces\nDESCRIPTION: Defines TypeScript interfaces and enums for activity results including email recovery, OAuth, OTP auth, organization features, payments, signatures, and various administrative operations. Also defines activity status and type enums.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signTransaction.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersBody Type Alias in TypeScript\nDESCRIPTION: Type alias that merges the PublicApiService_CreateUsers operation parameters with commandOverrideParams. Used for structuring user creation request bodies in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateUsersBody = operations[\"PublicApiService_CreateUsers\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Listening to Private Key Tags TypeScript\nDESCRIPTION: This TypeScript snippet defines a type alias, TListPrivateKeyTagsInput, which is structured as an object type. The snippet is used within the Turnkey SDK to format API requests for listing private key tags. The alias is intended for use in HTTP POST requests and specifies the type for the 'body', which is expected to be of type TListPrivateKeyTagsBody. No additional dependencies are explicitly required for this definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TListPrivateKeyTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TListPrivateKeyTagsInput = object;\n```\n\n----------------------------------------\n\nTITLE: Defining Properties of TGetAuthenticatorsInput\nDESCRIPTION: This snippet details the properties of the TGetAuthenticatorsInput type, particularly the 'body' property which references another type, TGetAuthenticatorsBody. It outlines how the input structure is extended and ensures that the SDK adheres to the expected types when getting authenticators.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n### Properties\n\n### body\n\n> **body**: [`TGetAuthenticatorsBody`](TGetAuthenticatorsBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationResponse Type in TypeScript\nDESCRIPTION: Type alias definition that intersects the delete invitation operation response schema with the v1ActivityResponse definition. This type represents the complete response structure when deleting an invitation through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteInvitationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TDeleteInvitationResponse = operations[\"PublicApiService_DeleteInvitation\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"deleteInvitationResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Origins Update Result Structure in TypeScript\nDESCRIPTION: This snippet establishes an empty structure for the result of updating allowed origins, denoting that this particular operation does not require an output structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nupdateAllowedOriginsResult: {}; \n```\n\n----------------------------------------\n\nTITLE: Defining Encryption and User Identifiers - TypeScript\nDESCRIPTION: This snippet establishes necessary properties for user identification and encrypted wallet data, forming the backbone for secure wallet operations and user-specific transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImportWalletIntent = { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Providers Response Type in TypeScript\nDESCRIPTION: Type alias that combines response schema from operations and definitions, specifically for creating OAuth providers in the Turnkey SDK server\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateOauthProvidersResponse = operations[\"PublicApiService_CreateOauthProviders\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createOauthProvidersResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePrivateKeyTagBody Type Alias in TypeScript\nDESCRIPTION: Type alias that extracts the request body type from the PublicApiService_UpdatePrivateKeyTag operation parameters. Used for the POST /public/v1/submit/update_private_key_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdatePrivateKeyTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdatePrivateKeyTagBody = operations[\"PublicApiService_UpdatePrivateKeyTag\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1RemoveOrganizationFeatureResult Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of removing an organization feature, including the resulting list of organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_129\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RemoveOrganizationFeatureResult: object\n\nfeatures: definitions[\"v1Feature\"][]\n```\n\n----------------------------------------\n\nTITLE: Installing and Building the Solana Passkeys Demo\nDESCRIPTION: Commands to clone the repository, install dependencies, and build the project using pnpm package manager. Requires Node.js v18+ installed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana-passkeys/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-solana-passkeys/\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeyTagInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePrivateKeyTagInput type alias as an object with a body property of type TCreatePrivateKeyTagBody. It is used for the POST request to create a private key tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePrivateKeyTagInput = object\n```\n\n----------------------------------------\n\nTITLE: TurnkeyRequestError Class Definition in TypeScript\nDESCRIPTION: Class definition for TurnkeyRequestError that extends Error class. Includes constructor, properties for error code and details, and inherits standard Error properties and methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/classes/TurnkeyRequestError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TurnkeyRequestError extends Error {\n  details: null | any[];\n  code: number;\n  \n  constructor(input: GrpcStatus): TurnkeyRequestError;\n  \n  message: string;\n  name: string;\n  stack?: string;\n  static prepareStackTrace?: (err: Error, stackTraces: CallSite[]) => any;\n  static stackTraceLimit: number;\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Invitation Acceptance Intent Interface\nDESCRIPTION: Interface for accepting organization invitations with WebAuthN authenticator details. Includes attestation data, transport types, and user identification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  authenticator: {\n    attestation: {\n      attestationObject: string;\n      clientDataJson: string;\n      credentialId: string;\n      transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n    };\n    authenticatorName: string;\n    challenge: string;\n  };\n  invitationId: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CreateReadWriteSessionResult Interface\nDESCRIPTION: Defines the structure of the response when creating a read-write session, including organization details and user information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `apiKeyId`: `string`; \n  `credentialBundle`: `string`; \n  `organizationId`: `string`; \n  `organizationName`: `string`; \n  `userId`: `string`; \n  `username`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Private Key Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get a specific private key. Takes a TGetPrivateKeyBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPrivateKey(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Navigation Links\nDESCRIPTION: Navigation breadcrumb showing the path to createApiOnlyUsers documentation within SDK documentation structure\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiOnlyUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createApiOnlyUsers\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyInput Type in TypeScript for Turnkey API\nDESCRIPTION: A TypeScript type alias that defines the structure of the input required for deleting a policy via the Turnkey API. It includes a body property of type TDeletePolicyBody and is used for the POST /public/v1/submit/delete_policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TDeletePolicyInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining v1SignTransactionResult Interface in TypeScript\nDESCRIPTION: Defines the structure for the result of a sign transaction operation, containing the signed transaction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_138\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1SignTransactionResult: object {\n  signedTransaction: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Formats\nDESCRIPTION: This snippet defines a union type for address formats, including various blockchain types such as Bitcoin, Sei, XLM, Doge, TON, and XRP. It is used to specify the format of blockchain addresses in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteAuthenticators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"`ADDRESS_FORMAT_BITCOIN_LEGACY_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_LEGACY_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SEGWIT_P2SH_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SEGWIT_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_SEGWIT_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_TAPROOT_P2TR\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete API keys using the Turnkey SDK. It accepts an input of type TDeleteApiKeysBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteApiKeys(input: TDeleteApiKeysBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Declaring GetUsers Function in TypeScript\nDESCRIPTION: Declares the getUsers function as a constant that takes an input parameter and returns a Promise. The function lists all Users within an Organization using a POST request to /public/v1/query/list_users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getUsers: (input: TGetUsersInput) => Promise<{ users: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserInput Type Alias in TypeScript\nDESCRIPTION: The TRecoverUserInput type alias defines an object structure with a body property of type TRecoverUserBody. This type is used for user recovery operations in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRecoverUserInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TRecoverUserInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent - TypeScript\nDESCRIPTION: This snippet defines the structure for initializing an intent to import a wallet. It includes parameters like 'userId', 'encryptedBundle', and 'walletName', which are essential for identifying the user and the wallet data being imported.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum in TypeScript\nDESCRIPTION: Provides a detailed enumeration of possible activity statuses, including created, pending, completed, failed, consensus needed, and rejected states\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetOrganizationRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting an organization, requiring the organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetOrganizationRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1SetOrganizationFeatureRequest Type\nDESCRIPTION: Defines the structure `v1SetOrganizationFeatureRequest` as an object type, containing properties for `organizationId`, `parameters` (of type `v1SetOrganizationFeatureIntent`), `timestampMs`, and `type` (fixed string).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SetOrganizationFeatureRequest\n\n> **v1SetOrganizationFeatureRequest**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2399\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1SetOrganizationFeatureIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"`\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Organization Intent\nDESCRIPTION: This snippet defines the intent for deleting a sub-organization with an optional parameter to bypass certain export requirements, enhancing administrative capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteSubOrganizationIntent? \\n\\{ `deleteWithoutExport`: `boolean`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteSubOrganizationIntent.deleteWithoutExport? \\n`boolean` \\n\\n**Description** \\nSub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateUsersResponse type alias. It represents the response schema for the 'Create Users' API endpoint, specifically the 200 OK response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateUsersResponse = operations[\"PublicApiService_CreateUsers\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumInput Type Alias\nDESCRIPTION: Type alias representing an object with a body property of type TUpdateRootQuorumBody for configuring root quorum parameters\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateRootQuorumInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateRootQuorumInput = {\n  body: TUpdateRootQuorumBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Set Payment Method Intent Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for setting a payment method, including fields for cardHolderEmail, cardHolderName, cvv, and card details like expiry month and year. It is used for adding or updating payment methods in the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n```\n\n----------------------------------------\n\nTITLE: Turnkey apiClient Method\nDESCRIPTION: This method returns a `TurnkeyApiClient` instance. It optionally accepts `ApiCredentials` as a parameter. If no credentials are provided, it likely uses default or configured credentials to interact with the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/Turnkey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param apiCredentials\n */\napiClient(apiCredentials?: ApiCredentials): TurnkeyApiClient\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthn Stamp Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for WebAuthn authentication data structure containing authenticator data, client data, credential ID and signature. Used for web authentication flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WebAuthnStamp {\n  authenticatorData: string;\n  clientDataJson: string;\n  credentialId: string;\n  signature: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Tag in Turnkey SDK Browser Client (TypeScript)\nDESCRIPTION: The updateUserTag method updates a user tag. It takes an input of type TUpdateUserTagBody and returns a Promise that resolves to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_133\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserTag(input: TUpdateUserTagBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Updating User API Endpoint in TypeScript\nDESCRIPTION: Defines the API endpoint for updating a user within an organization. It specifies the HTTP method, path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUser.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nUpdate User\n\nUpdate a User in an existing Organization\n\n`POST /public/v1/submit/update_user`\n\n## Parameters\n\n### input\n\n[`TUpdateUserInput`](../type-aliases/TUpdateUserInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsInput Type Alias\nDESCRIPTION: This snippet defines a type alias for input parameters used in deleting private key tags. It is an object type that includes properties that are necessary for the operation. The primary property is 'body', which references another type, 'TDeletePrivateKeyTagsBody'. This is crucial for ensuring type safety and clarity when working with SDK functions that require this input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePrivateKeyTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Type Alias: TDeletePrivateKeyTagsInput\n\n> **TDeletePrivateKeyTagsInput** = `object`\n\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:515](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L515)\n\n## Properties\n\n### body\n\n> **body**: [`TDeletePrivateKeyTagsBody`](TDeletePrivateKeyTagsBody.mdx)\n\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:515](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L515)\n```\n\n----------------------------------------\n\nTITLE: Defining TExportPrivateKeyResponse Type Alias in TypeScript\nDESCRIPTION: Defines the TExportPrivateKeyResponse type alias as the response schema for the PublicApiService_ExportPrivateKey operation's 200 status code. This type represents the structure of the response when exporting a private key via the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TExportPrivateKeyResponse = operations[\"PublicApiService_ExportPrivateKey\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent in JavaScript\nDESCRIPTION: This snippet defines the intent for OTP authentication with parameters for contact information, email customization options, and SMS customization. It is used for sending OTP requests to users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/removeOrganizationFeature.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n`initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: TUpdateRootQuorumInput Property Definition\nDESCRIPTION: Defines the required 'body' property for the TUpdateRootQuorumInput type, which must be of type TUpdateRootQuorumBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TUpdateRootQuorumBody\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetVerifiedSubOrgIdsRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get verified sub-organization IDs, including optional filters and pagination.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetVerifiedSubOrgIdsRequest {\n  filterType?: string;\n  filterValue?: string;\n  organizationId: string;\n  paginationOptions?: definitions[\"v1Pagination\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create a local environment file for storing Turnkey API credentials and Movement-specific information. This file is essential for configuring the SDK to interact with Turnkey and the Movement network.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-movement/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining v1RemoveOrganizationFeatureIntent Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for the intent to remove an organization feature, including the name of the feature to remove.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_127\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RemoveOrganizationFeatureIntent: object\n\nname: definitions[\"v1FeatureName\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsBody Type in TypeScript\nDESCRIPTION: Type alias for the request body of the delete authenticators API endpoint. It's derived from the operations type for the PublicApiService_DeleteAuthenticators method parameter body.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteAuthenticatorsBody** = `operations`\\[`\"PublicApiService_DeleteAuthenticators\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Intent\nDESCRIPTION: This snippet sets the parameters for deleting an organization based on its unique ID, which is vital for administrative control.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteOrganizationIntent? \\n\\{ `organizationId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteOrganizationIntent.organizationId \\n`string` \\n\\n**Description** \\nUnique identifier for a given Organization.\n```\n\n----------------------------------------\n\nTITLE: Initializing Import Wallet Intent - TypeScript\nDESCRIPTION: Defines the structure for initiating the import of a cryptocurrency wallet. It includes details such as `userId` and the `walletName`, ensuring that the user's credentials and the wallet to be imported are properly handled.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninitImportWalletIntent: { userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitUserEmailRecoveryRequest Interface in TypeScript\nDESCRIPTION: This interface defines the structure for initiating a user email recovery request. It includes properties for organization ID, parameters for the recovery intent, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_108\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1InitUserEmailRecoveryRequest: object\n{\n  organizationId: string;\n  parameters: definitions[\"v1InitUserEmailRecoveryIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selector Interface in TypeScript\nDESCRIPTION: This snippet defines the v1Selector interface, which includes optional properties for operator, subject, and target.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1Selector {\n  operator?: definitions[\"v1Operator\"];\n  subject?: string;\n  target?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payload HTTP Endpoint Definition in TypeScript\nDESCRIPTION: Definition of the HTTP endpoint for signing a raw payload using the Turnkey API. The endpoint accepts a POST request to '/public/v1/submit/sign_raw_payload' with input parameters defined by the TSignRawPayloadInput type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayload.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nSign Raw Payload\n\nSign a raw payload\n\n`POST /public/v1/submit/sign_raw_payload`\n\n## Parameters\n\n### input\n\n[`TSignRawPayloadInput`](../type-aliases/TSignRawPayloadInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TInitUserEmailRecoveryBody Type Alias in TypeScript\nDESCRIPTION: Type alias that combines the parameters required for the PublicApiService_InitUserEmailRecovery operation with command override parameters. This type is used for initializing email-based user recovery in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitUserEmailRecoveryBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTInitUserEmailRecoveryBody = `operations`[`\"PublicApiService_InitUserEmailRecovery\"`][`\"parameters\"`][`\"body\"`][`\"body\"`][`\"parameters\"`] & `commandOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateInvitationsBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TCreateInvitationsBody that references the request body structure for the CreateInvitations API endpoint. It uses the operations type to extract the specific parameters from the PublicApiService_CreateInvitations operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateInvitationsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateInvitationsBody** = `operations`[`\"PublicApiService_CreateInvitations\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining API Intent Structure - JavaScript\nDESCRIPTION: This snippet defines the structure of various API request intents, detailing expected parameters for actions like creating users and organizations. The structure provides a clear schema for required fields across various functionalities, enabling consistent API interaction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\")[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias, TRecoverUserBody, that references the specific operations and parameters required for the API call to recover a user. It is used to ensure that the request body adheres to a strict structure based on the API's specifications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRecoverUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TRecoverUserBody = operations[\\\"PublicApiService_RecoverUser\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining activityPoller Property\nDESCRIPTION: Defines an optional property 'activityPoller' of type TActivityPollerConfig in the TurnkeySDKClientConfig interface. This property is used for configuring activity polling behavior in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/interfaces/TurnkeySDKClientConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// activityPoller?\n> `optional` **activityPoller**: `TActivityPollerConfig`\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiOnlyUsersResult Type\nDESCRIPTION: Defines the structure for the `v1CreateApiOnlyUsersResult` object, representing the result of creating API-only users. It includes an array of `userIds`. This structure is the response from the Coordinator service after a successful API-only user creation request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiOnlyUsersResult\n * @property {string[]} userIds A list of API-only User IDs.\n */\n```\n\n----------------------------------------\n\nTITLE: Authentication Process Intent Structures in TypeScript\nDESCRIPTION: This code snippet defines TypeScript types for various authentication intents, including OTP authentication, email recovery, and organization features. This structure helps manage user interactions and security processes by clarifying expected parameters such as contact information, OTP details, and customization options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Attestation Document Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for retrieving an attestation document. It takes a TGetAttestationDocumentBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_104\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetAttestationDocument(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Raw Payload Signing Intents in TypeScript\nDESCRIPTION: Defines structures for signing raw payloads. Includes fields for encoding type, hash function, payload data, and signing key information across multiple versions of the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Running the Gnosis Safe Integration Example\nDESCRIPTION: Command to start the example script which creates a Gnosis Safe, initiates a transaction, approves it with multiple signatures, and executes it.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-gnosis/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Activity Type Enumeration\nDESCRIPTION: Comprehensive list of activity types covering various organizational, authentication, and key management operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | ... 70+ additional activity types\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeyTagResponse Type Alias in TypeScript\nDESCRIPTION: This code defines the TCreatePrivateKeyTagResponse type alias which represents the response schema for the 'PublicApiService_CreatePrivateKeyTag' operation with a 200 response status. The type is used for handling responses from the POST /public/v1/submit/create_private_key_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreatePrivateKeyTagResponse** = `operations`[`\"PublicApiService_CreatePrivateKeyTag\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Complete WalletStamper Implementation Example\nDESCRIPTION: Full example showing how to implement and use WalletStamper with Solana wallet integration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/documents/WalletStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the dependencies for the Solana\nimport { Keypair } from \"@solana/web3.js\";\nimport { decodeUTF8 } from \"tweetnacl-util\";\nimport nacl from \"tweetnacl\";\n\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { WalletStamper, SolanaWalletInterface } from \"@turnkey/wallet-stamper\";\n\nclass SolanaWallet implements SolanaWalletInterface {\n  keypair = Keypair.fromSecretKey(SOLANA_PRIVATE_KEY);\n  type = \"solana\" as const;\n\n  async signMessage(message: string): Promise<string> {\n    const messageBytes = decodeUTF8(message);\n    const signature = nacl.sign.detached(messageBytes, this.keypair.secretKey);\n    return Buffer.from(signature).toString(\"hex\");\n  }\n\n  recoverPublicKey(): string {\n    // Convert the base24 encoded Solana wallet public key (the one displayed in the wallet)\n    // into the ed25519 decoded public key\n    const ed25519PublicKey = Buffer.from(\n      this.keypair.publicKey.toBuffer(),\n    ).toString(\"hex\");\n    return ed25519PublicKey;\n  }\n}\n\n// Instantiate the WalletStamper with the SolanaWallet\nconst walletStamper = new WalletStamper(new SolanaWallet());\n\n// Instantiate the TurnkeyClient with the WalletStamper\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n\n// You're now ready to make requests to Turnkey's API 🎉\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Result Types and Activity Status in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structures for various result types associated with SDK operations. It includes results for email recovery, OAuth, OTP authentication, and more. Additionally, it defines different statuses and types of activities that can be performed within the SDK. No external dependencies are required. These structures are important for handling responses from the SDK and managing activity workflows. Inputs and outputs are inferred from the type definitions, ensuring that the intended data architecture is preserved.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTI...*TRUNCATED*\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersInput Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for TCreateUsersInput used in the Turnkey API. It represents the input structure for the create_users endpoint, containing a body property of type TCreateUsersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateUsersInput = object\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticators with Turnkey SDK TypeScript\nDESCRIPTION: This function enables the deletion of authenticators, requiring `TDeleteAuthenticatorsBody` for input and returns a combined object Promise. It is used primarily for managing security credentials within Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteAuthenticators**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Response Type in TypeScript\nDESCRIPTION: This code snippet defines a complex TypeScript type for the response of an activity-related operation. It includes various intents such as accepting invitations, creating API keys, organizations, policies, and more. Each intent has its own set of properties and nested structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: {\n                rk: boolean;\n              };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n              clientDataJson: string;\n              transports: [...];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      // ... (other intents omitted for brevity)\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Intent Structure - TypeScript\nDESCRIPTION: This snippet provides the structure needed to update an existing policy. Key elements include policy condition, consensus, effect type (allow/deny), along with the policy ID, name, and notes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n`updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Viem Example\nDESCRIPTION: Commands for cloning the repository, installing dependencies and building the project using pnpm.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-viem/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-viem/\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for v1InvitationStatus in Turnkey SDK\nDESCRIPTION: This snippet defines the possible status values for an invitation in the Turnkey API, including created, accepted, and revoked states.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_112\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype v1InvitationStatus = \"INVITATION_STATUS_CREATED\" | \"INVITATION_STATUS_ACCEPTED\" | \"INVITATION_STATUS_REVOKED\";\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeletePolicyResponse type alias. It represents the response schema for the 200 status code of the PublicApiService_DeletePolicy operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePolicyResponse = operations[\"PublicApiService_DeletePolicy\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Structure in TypeScript\nDESCRIPTION: This snippet defines the result structure for initiating an email recovery process. It includes a 'userId' of type string to identify the user associated with the recovery request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining type for signature field\nDESCRIPTION: This snippet defines the type for the `signature` field within `v1WebAuthnStamp`, which is a `string`. It's the base64 url encoded signature bytes contained within the WebAuthn assertion response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n> **signature**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPoliciesRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting policies, requiring the organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPoliciesRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intent and Result Types for SDK Operations in TypeScript\nDESCRIPTION: This code snippet defines numerous TypeScript types for various intents and results used in SDK operations. It includes types for wallet management, user authentication, policy creation, and many other functionalities related to a cryptocurrency wallet system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"][]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }; `importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; `initImportPrivateKeyIntent`: { `userId`: `string`; }; `initImportWalletIntent`: { `userId`: `string`; }; `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initOtpAuthIntentV2`: { `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `oauthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; }; `otpAuthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; }; `recoverUserIntent`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `userId`: `string`; }; `rejectActivityIntent`: { `fingerprint`: `string`; }; `removeOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; }; `setOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; }; `setPaymentMethodIntent`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; }; `setPaymentMethodIntentV2`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; }; `signRawPayloadIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; }; `signRawPayloadIntentV2`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; }; `signRawPayloadsIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; }; `signTransactionIntent`: { `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; }; `signTransactionIntentV2`: { `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; }; `updateAllowedOriginsIntent`: { `allowedOrigins`: `string`[]; }; `updatePolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }; `updatePolicyIntentV2`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }; `updatePrivateKeyTagIntent`: { `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; }; `updateRootQuorumIntent`: { `threshold`: `number`; `userIds`: `string`[]; }; `updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }; `updateUserTagIntent`: { `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; }; `updateWalletIntent`: { `walletId`: `string`; `walletName`: `string`; }; }; `organizationId`: `string`; `result`: { `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierResult`: { `productId`: `string`; }; `createApiKeysResult`: { `apiKeyIds`: `string`[]; }; `createApiOnlyUsersResult`: { `userIds`: `string`[]; }; `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `createInvitationsResult`: { `invitationIds`: `string`[]; }; `createOauthProvidersResult`: { `providerIds`: `string`[]; }; `createOrganizationResult`: { `organizationId`: `string`; }; `createPoliciesResult`: { `policyIds`: `string`[]; }; `createPolicyResult`: { `policyId`: `string`; }; `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; }; `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResultV2`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createSubOrganizationResult`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV3`: { `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV4`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV5`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV6`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV7`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createUsersResult`: { `userIds`: `string`[]; }; `createUserTagResult`: { `userIds`: `string`[]; `userTagId`: `string`; }; `createWalletAccountsResult`: { `addresses`: `string`[]; }; `createWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `deleteApiKeysResult`: { `apiKeyIds`: `string`[]; }; `deleteAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `deleteInvitationResult`: { `invitationId`: `string`; }; `deleteOauthProvidersResult`: { `providerIds`: `string`[]; }; `deleteOrganizationResult`: { `organizationId`: `string`; }; `deletePaymentMethodResult`: { `paymentMethodId`: `string`; }; `deletePolicyResult`: { `policyId`: `string`; }; `deletePrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsResult`: { `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationResult`: { `subOrganizationUuid`: `string`; }; `deleteUsersResult`: { `userIds`: `string`[]; }; `deleteUserTagsResult`: { `userIds`: `string`[]; `userTagIds`: `string`[]; }; `deleteWalletsResult`: { `walletIds`: `string`[]; }; `disablePrivateKeyResult`: { `privateKeyId`: `string`; }; `emailAuthResult`: { `apiKeyId`: `string`; `userId`: `string`; }; `exportPrivateKeyResult`: { `exportBundle`: `string`; `privateKeyId`: `string`; }; `exportWalletAccountResult`: { `address`: `string`; `exportBundle`: `string`; }; `exportWalletResult`: { `exportBundle`: `string`; `walletId`: `string`; }; `importPrivateKeyResult`: { `addresses`: `object`[]; `privateKeyId`: `string`; }; `importWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `initImportPrivateKeyResult`: { `importBundle`: `string`; }; `initImportWalletResult`: { `importBundle`: `string`; }; `initOtpAuthResult`: { `otpId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: TDeleteWalletsBody Type Alias Definition\nDESCRIPTION: Defines the TDeleteWalletsBody type alias, which represents the request body structure for deleting wallets via the Turnkey Public API. It combines parameters from the `PublicApiService_DeleteWallets` operation with `commandOverrideParams` for flexible control.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteWalletsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"operations[`\\\"PublicApiService_DeleteWallets\\\"`][`\\\"parameters\\\"`][`\\\"body\\\"`][`\\\"body\\\"`][`\\\"parameters\\\"`] & `commandOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for Activity Status Updates\nDESCRIPTION: This snippet defines the various activity statuses and types associated with operations in the SDK, providing clear identifiers and descriptions for each status type. It aids developers in tracking activity progress throughout the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_99\n\nLANGUAGE: JSON\nCODE:\n```\nstatus\n\"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n\nDescription\n\nThe current processing status of a specified Activity.\n\ntype\n\"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... [and others]\n\nDescription\n\nType of Activity, such as Add User, or Sign Transaction.\n```\n\n----------------------------------------\n\nTITLE: Defining TGetSubOrgIdsBody Type Alias in Turnkey SDK (TypeScript)\nDESCRIPTION: This snippet defines the `TGetSubOrgIdsBody` type alias. It specifies the structure of the request body for the `PublicApiService_GetSubOrgIds` operation, used to retrieve sub-organization IDs. It references the generated TypeScript definition files.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TGetSubOrgIdsBody** = `operations`\\[`\"PublicApiService_GetSubOrgIds\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUserTagsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteUserTagsBody type alias. It represents the body parameters for the PublicApiService_DeleteUserTags operation, specifically for the POST /public/v1/submit/delete_user_tags endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUserTagsBody = operations[\"PublicApiService_DeleteUserTags\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteSubOrganizationIntent Structure in TypeScript\nDESCRIPTION: Defines the intent structure for deleting a sub-organization, including optional settings for whether to delete without export of associated wallets and private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteSubOrganizationIntent {\n    deleteWithoutExport?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Export Operations Stamp Methods\nDESCRIPTION: Methods for stamping various export operations including private keys, wallets and wallet accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportPrivateKey(input: TExportPrivateKeyBody): Promise<undefined | TSignedRequest>\n\nstampExportWallet(input: TExportWalletBody): Promise<undefined | TSignedRequest>\n\nstampExportWalletAccount(input: TExportWalletAccountBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyBody Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that references the request body parameters for the UpdatePolicy API endpoint. The type maps to the body parameter of the PublicApiService_UpdatePolicy operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdatePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdatePolicyBody = operations[\"PublicApiService_UpdatePolicy\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication Intent Type Definition\nDESCRIPTION: Type definition for OTP authentication intent including customization options for email and SMS delivery.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  \"alphanumeric\": boolean;\n  \"contact\": string;\n  \"emailCustomization\": {\n    \"appName\": string;\n    \"logoUrl\": string;\n    \"magicLinkTemplate\": string;\n    \"templateId\": string;\n    \"templateVariables\": string;\n  };\n  \"otpLength\": number;\n  \"otpType\": string;\n  \"sendFromEmailAddress\": string;\n  \"sendFromEmailSenderName\": string;\n  \"smsCustomization\": {\n    \"template\": string;\n  };\n  \"userIdentifier\": string;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Organization Creation Types\nDESCRIPTION: TypeScript interface definitions for creating organizations, including intent v1 and v2, and result types. Defines structures for organization name, root user details, and authentication parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOrganizationIntent {\n  organizationName: string;\n  rootAuthenticator: definitions[\"v1AuthenticatorParams\"];\n  rootEmail: string;\n  rootUserId?: string;\n}\n\ninterface v1CreateOrganizationIntentV2 {\n  organizationName: string;\n  rootAuthenticator: definitions[\"v1AuthenticatorParamsV2\"];\n  rootEmail: string;\n  rootUserId?: string;\n}\n\ninterface v1CreateOrganizationResult {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for User Recovery and Authentication\nDESCRIPTION: This snippet provides result structures for user recovery and authentication processes. It includes results for email recovery, OAuth, and OTP authentication, detailing identifiers and credential bundles necessary for secure operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_95\n\nLANGUAGE: JSON\nCODE:\n```\nresult.initUserEmailRecoveryResult?\n{ userId: string; }\n\nresult.initUserEmailRecoveryResult.userId\n\nstring\n\nDescription\n\nUnique identifier for the user being recovered.\n\nresult.oauthResult?\n{ apiKeyId: string; credentialBundle: string; userId: string; }\n\nresult.oauthResult.apiKeyId\n\nstring\n\nDescription\n\nUnique identifier for the created API key.\n\nresult.oauthResult.credentialBundle\n\nstring\n\nDescription\n\nHPKE encrypted credential bundle.\n\nresult.oauthResult.userId\n\nstring\n\nDescription\n\nUnique identifier for the authenticating User.\n```\n\n----------------------------------------\n\nTITLE: Static StackTraceLimit Property Definition in TypeScript\nDESCRIPTION: Definition of the static stackTraceLimit property that controls the maximum number of stack frames captured in error.stack property.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/TurnkeyActivityConsensusNeededError.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic stackTraceLimit: number\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletInput Type Alias in TypeScript\nDESCRIPTION: Type definition for the TUpdateWalletInput object used as the input for the wallet update endpoint. It consists of a body property of type TUpdateWalletBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TUpdateWalletInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Deletion Intent - TypeScript\nDESCRIPTION: Provides the structure for the intent to delete a specific policy identified by its ID. This helps in managing policy lifecycle in the context of organizational configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeletePolicyIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1235\n */\nexport interface v1DeletePolicyIntent {\n  policyId: string; // Unique identifier for a given Policy.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TApiKeyStamperConfig Type Alias\nDESCRIPTION: This snippet defines a TypeScript type alias named TApiKeyStamperConfig which is used to specify the expected structure of an object containing API key configurations. It has properties for both the private and public API keys, allowing developers to instantiate objects that conform to this structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TApiKeyStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TApiKeyStamperConfig = {\\n    apiPrivateKey: string;\\n    apiPublicKey: string;\\n};\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration Template\nDESCRIPTION: Command to create a local environment configuration file from the example template\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/react-components/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationBody Type Alias in TypeScript\nDESCRIPTION: Defines the TGetOrganizationBody type alias as the body parameters for the PublicApiService_GetOrganization operation. This type is used for the POST request to the /public/v1/query/get_organization endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetOrganizationBody = operations[\"PublicApiService_GetOrganization\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivitiesInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TGetActivitiesInput type alias as an object that contains a body of type TGetActivitiesBody. It is used to structure input for API calls that require activities data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetActivitiesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetActivitiesInput = {\\n  body: TGetActivitiesBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Status Enum in TypeScript\nDESCRIPTION: This snippet defines the `status` type, which is an enumeration of possible activity statuses such as created, pending, completed, and failed. This is essential for tracking the state of activities within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`;\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Enums - TypeScript Type Definitions\nDESCRIPTION: Defines the possible status values and activity types for operations in the system. Includes comprehensive activity tracking for various operations like key management, user management, authentication, and organization operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Intent Interface in TypeScript\nDESCRIPTION: This snippet defines the v1RecoverUserIntent interface, which specifies the structure for user recovery requests. It includes fields for the new authenticator and the user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1RecoverUserIntent {\n  authenticator: v1AuthenticatorParamsV2;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining updatePrivateKeyTagIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for updating private key tags in Turnkey. This intent allows adding or removing private keys from a tag and updating the tag's name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition that extracts the 200 response schema from the PublicApiService_CreateUsers operation type. This type represents the successful response structure when creating users via POST /public/v1/submit/create_users endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateUsersResponse = operations[\"PublicApiService_CreateUsers\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePrivateKeyTagInput Type in TypeScript\nDESCRIPTION: Type definition for the request input when updating private key tags. The type is an object containing a body property of type TUpdatePrivateKeyTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdatePrivateKeyTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTUpdatePrivateKeyTagInput = object {\n  body: TUpdatePrivateKeyTagBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Creation Intent Types in TypeScript\nDESCRIPTION: Type definitions for policy creation intents including policy arrays and individual policy structures. Specifies the effect, name, and selectors for policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policies`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Structure - TypeScript\nDESCRIPTION: This snippet specifies the structure for the result of user email recovery, which contains a userId represented as a string. It aims to facilitate email recovery processes in the SDK's API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitUserEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreateApiKeysInput Properties in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TCreateApiKeysInput type alias. It has a single property 'body' of type TCreateApiKeysBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiKeysInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateApiKeysBody\n```\n\n----------------------------------------\n\nTITLE: POST Request Definition for Signing Raw Payload\nDESCRIPTION: This snippet describes the HTTP POST request for submitting a sign raw payload to the public API. It specifies the endpoint being used and indicates that the body of the request should conform to the structure defined by TSignRawPayloadBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"POST /public/v1/submit/sign_raw_payload\"\n```\n\n----------------------------------------\n\nTITLE: Defining Email Customization Parameters Type in TypeScript\nDESCRIPTION: This snippet defines the structure for email customization parameters, including optional fields for app name, logo URL, magic link template, template ID, and template variables.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1EmailCustomizationParams\n\n> **v1EmailCustomizationParams**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1562](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1562)\n\n#### appName?\n\n> `optional` **appName**: `string`\n\n##### Description\n\nThe name of the application.\n\n#### logoUrl?\n\n> `optional` **logoUrl**: `string`\n\n##### Description\n\nA URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.\n\n#### magicLinkTemplate?\n\n> `optional` **magicLinkTemplate**: `string`\n\n##### Description\n\nA template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.\n\n#### templateId?\n\n> `optional` **templateId**: `string`\n\n##### Description\n\nUnique identifier for a given Email Template. If not specified, the default is the most recent Email Template.\n\n#### templateVariables?\n\n> `optional` **templateVariables**: `string`\n\n##### Description\n\nJSON object containing key/value pairs to be used with custom templates.\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Intent Structure\nDESCRIPTION: This snippet defines the 'initUserEmailRecoveryIntent', which includes the email to recover, expiration time for the recovery request, and customization options for the recovery communication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateWalletIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a wallet in an organization. This intent specifies the wallet ID to update and optionally a new name for the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{ `walletId`: `string`; `walletName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagBody Type Alias in TypeScript for Turnkey API\nDESCRIPTION: Type alias definition for the request body of the CreateUserTag operation in the Turnkey API. This type represents the structure of the body parameter for the POST request to the '/public/v1/submit/create_user_tag' endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUserTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateUserTagBody** = `operations`[`\"PublicApiService_CreateUserTag\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOauthProvidersRequest Object in TypeScript\nDESCRIPTION: This snippet defines the request object for creating OAuth providers, which includes the organization ID, parameters, timestamp, and type of activity. It ensures requests contain all necessary data for processing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreateOauthProvidersRequest\": {\\n    \"organizationId\": string,\\n    \"parameters\": definitions[\\\"v1CreateOauthProvidersIntent\\\"],\\n    \"timestampMs\": string,\\n    \"type\": \\\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagInput Type in TypeScript\nDESCRIPTION: TypeScript type definition for the input parameter when updating user tags via the Turnkey API. It specifies that the input must be an object containing a body property of type TUpdateUserTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TUpdateUserTagInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Mnemonic Languages in TypeScript\nDESCRIPTION: This snippet enumerates various languages supported for mnemonic operations in the TypeScript type definitions. Languages include English, Chinese (Simplified and Traditional), Czech, French, Italian, Japanese, Korean, and Spanish, aiding in multilingual mnemonic functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"v1MnemonicLanguage\": \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetEmbeddedPublicKey Enumeration\nDESCRIPTION: This snippet defines the GetEmbeddedPublicKey event type in TypeScript, which is used to request the public key from the embedded iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nGetEmbeddedPublicKey: \"GET_EMBEDDED_PUBLIC_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Result Type Structures\nDESCRIPTION: Complex result type definitions for different SDK operations including user creation, wallet management, and authentication processes\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUserTags.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  createUsersResult: {\n    userIds: string[]\n  },\n  createWalletResult: {\n    addresses: string[],\n    walletId: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TStamper Interface Definition\nDESCRIPTION: TypeScript interface definition for the stamper object used to create signatures for API request authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninterface TStamper {\n  stamp: (input: string) => Promise<TStamp>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the v1Feature object\nDESCRIPTION: Defines the structure of the v1Feature object, representing a feature flag. It contains an optional feature name (name) and an optional value (value). This object is used to represent enabled or disabled features within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1Feature\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1500\n\n#### name?\n\n> `optional` **name**: `definitions`[\\\"v1FeatureName\\\"]\n\n#### value?\n\n> `optional` **value**: `string`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This snippet defines a complex type structure for activities in an SDK. It includes various result types for different operations, activity statuses, and a comprehensive list of activity types. The structure also includes timestamps and vote information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadOnlySession.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  result: {\n    createApiKeysResult: { apiKeyId: string };\n    createInvitationsResult: { invitationId: string };\n    createOrganizationResult: { organizationId: string };\n    createPolicyResult: { policyId: string };\n    createPrivateKeysResult: { privateKeyId: string };\n    createUserTagResult: { userTagId: string };\n    createUsersResult: { userId: string };\n    createWalletResult: { walletId: string };\n    disablePrivateKeyResult: { privateKeyId: string };\n    exportPrivateKeyResult: { privateKey: string };\n    exportWalletResult: { wallet: string };\n    recoverUserResult: { userId: string };\n    signRawPayloadResult: { s: string; v: string };\n    signRawPayloadsResult: { signatures: object[] };\n    signTransactionResult: { signedTransaction: string };\n    updateAllowedOriginsResult: {};\n    updatePolicyResult: { policyId: string };\n    updatePolicyResultV2: { policyId: string };\n    updatePrivateKeyTagResult: { privateKeyTagId: string };\n    updateRootQuorumResult: {};\n    updateUserResult: { userId: string };\n    updateUserTagResult: { userTagId: string };\n    updateWalletResult: { walletId: string };\n  };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attestation Document with SDK Client\nDESCRIPTION: The stampGetAttestationDocument method aims to retrieve attestation documents, requiring input of type TGetAttestationDocumentBody. It returns a Promise which resolves to either undefined or a TSignedRequest, facilitating attestation document collection.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetAttestationDocument**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Set Payment Method Intent V2\nDESCRIPTION: Defines the structure for the `setPaymentMethodIntentV2`, designed to set payment methods using a `paymentMethodId` created client-side. It also includes `cardHolderEmail` and `cardHolderName`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_32\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteWalletsRequest type\nDESCRIPTION: Defines the structure for a request to delete wallets. It includes the organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteWalletsRequest\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1349\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[``\"v1DeleteWalletsIntent\"``]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: ``\"ACTIVITY_TYPE_DELETE_WALLETS\"``\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeyResponse Type Alias in TypeScript\nDESCRIPTION: Defines the TGetApiKeyResponse type alias as the schema for the 200 response of the PublicApiService_GetApiKey operation. This type represents the structure of the response when retrieving an API key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetApiKeyResponse = operations[\"PublicApiService_GetApiKey\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Activity Status and Type Enums in TypeScript\nDESCRIPTION: TypeScript type definitions for activity statuses and result types. Includes enums for activity statuses (CREATED, PENDING, etc.) and extensive list of activity types for various operations like key management, user management, and authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Policy Engine Permission Error in JSON\nDESCRIPTION: This JSON snippet shows the error message returned when a token transfer is attempted without proper policy, indicating that no policies evaluated to an 'Allow' outcome.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndetails: [\n    {\n      '@type': 'type.googleapis.com/errors.v1.PolicyEnginePermissionError',\n      message: 'No policies evaluated to outcome: Allow',\n      policyEvaluations: []\n    }\n  ],\n  code: 7\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Intent in JavaScript\nDESCRIPTION: This snippet defines the `initUserEmailRecoveryIntent` for handling user email recovery processes, including fields for email, email customization, expiration time, and target public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"initUserEmailRecoveryIntent\": { \"email\": \"string\", \"emailCustomization\": { \"appName\": \"string\", \"logoUrl\": \"string\", \"magicLinkTemplate\": \"string\", \"templateId\": \"string\", \"templateVariables\": \"string\" }, \"expirationSeconds\": \"string\", \"targetPublicKey\": \"string\" };\n```\n\n----------------------------------------\n\nTITLE: Defining Delete API Keys Endpoint in TypeScript\nDESCRIPTION: This code snippet defines the type structure and HTTP method for the Delete API Keys endpoint. It specifies the input parameter type and the expected response format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nPOST /public/v1/submit/delete_api_keys\n\n## Parameters\n\n### input\n\n[`TDeleteApiKeysInput`](../type-aliases/TDeleteApiKeysInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for v1Invitation in Turnkey SDK\nDESCRIPTION: This snippet defines the structure of an invitation object in the Turnkey API, including properties like access type, creation timestamp, invitation ID, and recipient details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_111\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1Invitation {\n  accessType: definitions[\"v1AccessType\"];\n  createdAt: definitions[\"externaldatav1Timestamp\"];\n  invitationId: string;\n  receiverEmail: string;\n  receiverUserName: string;\n  receiverUserTags: string[];\n  senderUserId: string;\n  status: definitions[\"v1InvitationStatus\"];\n  updatedAt: definitions[\"externaldatav1Timestamp\"];\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Endpoint for OAuth Submission - TypeScript\nDESCRIPTION: This snippet documents the POST endpoint used to submit OAuth requests in the SDK. It indicates the path that developers should use to interact with the OAuth service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOauthResponse.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"`POST /public/v1/submit/oauth`\"\n```\n\n----------------------------------------\n\nTITLE: Stamping User Tag Creation Request in TypeScript\nDESCRIPTION: Method to prepare a signed request for creating user tags. Takes a TCreateUserTagBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUserTag(input: TCreateUserTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining defaultXlmAccountAtIndex Function\nDESCRIPTION: This function, defaultXlmAccountAtIndex, accepts a numerical index as a parameter and returns a WalletAccount object. It is part of the Turnkey SDK’s functionality for handling wallet accounts and is defined in TypeScript. The function requires a single parameter, pathIndex, which determines the index of the account to be retrieved. The function’s output is an instance of the WalletAccount interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultXlmAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultXlmAccountAtIndex(pathIndex: number): WalletAccount {\n    // Implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Organization in Turnkey Browser SDK\nDESCRIPTION: Method to create a sub-organization with specified input parameters. Returns a Promise resolving to an object containing the new sub-organization's details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSubOrganization(input: TCreateSubOrganizationBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the NextJS development server locally\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana-passkeys/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Response Type\nDESCRIPTION: Type alias that describes the structure of a successful user update response, extracted from the generated Turnkey HTTP service types. Represents the schema for a 200 OK response from the update user endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateUserResponse = operations[\"PublicApiService_UpdateUser\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Email Recovery Options\nDESCRIPTION: This snippet defines boolean parameters to control email recovery and authentication options for a sub-organization. These parameters are critical to managing security settings for the organizational structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.disableEmailRecovery? \\n`boolean` \\n\\n**Description** \\nDisable email recovery for the sub-organization\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.disableOtpEmailAuth? \\n`boolean` \\n\\n**Description** \\nDisable OTP email auth for the sub-organization\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.disableSmsAuth? \\n`boolean` \\n\\n**Description** \\nDisable OTP SMS auth for the sub-organization\n```\n\n----------------------------------------\n\nTITLE: TDeleteSubOrganizationInput Property Definition\nDESCRIPTION: Property definition for the body field within the TDeleteSubOrganizationInput type. The body property is required and must conform to the TDeleteSubOrganizationBody type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TDeleteSubOrganizationBody\n```\n\n----------------------------------------\n\nTITLE: Environment File Setup\nDESCRIPTION: Command to create a local environment configuration file from the example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth-local-storage/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Getting API Key - TypeScript\nDESCRIPTION: Fetches API keys based on TGetApiKeyBody input, utilizing TSignedRequest to return a promise. Operation success is contingent on the accuracy of input parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetApiKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Removal Result Structure in TypeScript\nDESCRIPTION: This snippet specifies the structure for the result of removing an organization feature, which includes an array of features as objects. This aligns with the operations available in managing organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1SelectorV2 Type\nDESCRIPTION: Defines the structure `v1SelectorV2` as an object type, which contains optional properties for `operator`, `subject`, and `targets` (array of strings).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\n### v1SelectorV2\n\n> **v1SelectorV2**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2388\n\n#### operator?\n\n> `optional` **operator**: `definitions`[`\"v1Operator\"`]\n\n#### subject?\n\n> `optional` **subject**: `string`\n\n#### targets?\n\n> `optional` **targets**: `string`[]\n```\n\n----------------------------------------\n\nTITLE: Defining v1Selector Type\nDESCRIPTION: Defines the structure `v1Selector` as an object type, which contains optional properties for `operator`, `subject`, and `target`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\n### v1Selector\n\n> **v1Selector**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2383\n\n#### operator?\n\n> `optional` **operator**: `definitions`[`\"v1Operator\"`]\n\n#### subject?\n\n> `optional` **subject**: `string`\n\n#### target?\n\n> `optional` **target**: `string`\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys with Turnkey SDK TypeScript\nDESCRIPTION: This function deletes API keys, using `TDeleteApiKeysBody` as input and resulting in a Promise with a combined object. The operation is asynchronous, supporting application security within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteApiKeys**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining PasskeyStamper Class in TypeScript\nDESCRIPTION: This snippet defines the PasskeyStamper class with its constructor, properties, and stamp method. It is used for passkey-based authentication in React Native applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/classes/PasskeyStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PasskeyStamper {\n  rpId: string;\n  timeout: number;\n  userVerification: UserVerificationRequirement;\n  allowCredentials: PublicKeyCredentialDescriptor[];\n  extensions: Record<string, unknown>;\n  forcePlatformKey: boolean;\n  forceSecurityKey: boolean;\n\n  constructor(config: TPasskeyStamperConfig) {\n    // Constructor implementation\n  }\n\n  stamp(payload: string): Promise<{ stampHeaderName: string; stampHeaderValue: string; }> {\n    // Method implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetVerifiedSubOrgIdsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the API response schema for the PublicApiService_GetVerifiedSubOrgIds operation's 200 response. Used for handling responses from the POST /public/v1/query/list_verified_suborgs endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetVerifiedSubOrgIdsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetVerifiedSubOrgIdsResponse = operations[\"PublicApiService_GetVerifiedSubOrgIds\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying API Endpoint for OTP Authentication in TypeScript\nDESCRIPTION: This snippet indicates the HTTP method and endpoint URL for submitting OTP authentication requests. It documents the intended usage context for the defined TOtpAuthBody type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOtpAuthBody.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"`POST /public/v1/submit/otp_auth`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types\nDESCRIPTION: This code snippet defines various types for activity results within the coordinator service.  It specifies the structure for successful operations like OTP authentication, user recovery, and setting organization features.  Each result type includes specific fields relevant to the corresponding operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`hResultV2`: \\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\};`\n```\n\n----------------------------------------\n\nTITLE: TRemoveOrganizationFeatureBody Type Alias Definition\nDESCRIPTION: Defines the `TRemoveOrganizationFeatureBody` type alias, which corresponds to the request body required for the `PublicApiService_RemoveOrganizationFeature` operation. This operation is part of the Turnkey Public API and is used to remove a specific feature from an organization. The type is derived from the automatically generated TypeScript definitions based on the API schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRemoveOrganizationFeatureBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **TRemoveOrganizationFeatureBody** = `operations`\\[`\"PublicApiService_RemoveOrganizationFeature\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:62324\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountInput Type in TypeScript\nDESCRIPTION: TypeScript type alias that defines the structure of the input object for getting wallet account details. The type consists of a body property that contains TGetWalletAccountBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletAccountInput = object\n```\n\n----------------------------------------\n\nTITLE: TStamp Type Definition\nDESCRIPTION: TypeScript type definition for the stamp object returned by the stamp method. It contains the header name and value used for API authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ntype TStamp = {\n  stampHeaderName: string;\n  stampHeaderValue: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Credential Types - TypeScript\nDESCRIPTION: Describes a union type for various credential types used in the authentication process. This is essential for specifying the different credentials supported by the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CredentialType: \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | \"CREDENTIAL_TYPE_API_KEY_P256\" | \"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\" | \"CREDENTIAL_TYPE_API_KEY_SECP256K1\" | \"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\" | \"CREDENTIAL_TYPE_API_KEY_ED25519\" | \"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\" | \"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\" | \"CREDENTIAL_TYPE_OAUTH_KEY_P256\"\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1150\n */\nexport type v1CredentialType = \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | \"CREDENTIAL_TYPE_API_KEY_P256\" | \"CREDENTIAL_TYPE_RECOVER_USER_KEY_P256\" | \"CREDENTIAL_TYPE_API_KEY_SECP256K1\" | \"CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256\" | \"CREDENTIAL_TYPE_API_KEY_ED25519\" | \"CREDENTIAL_TYPE_OTP_AUTH_KEY_P256\" | \"CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256\" | \"CREDENTIAL_TYPE_OAUTH_KEY_P256\";\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of OTP authentication activities, containing an 'otpId' of type string. It is used to convey the result of OTP-related actions in the public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `otpId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining Import Private Key Input Type in TypeScript\nDESCRIPTION: This snippet outlines the parameters required for importing a private key through the API. It references a type alias defined elsewhere, ensuring that the input structure is properly validated.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninput: TImportPrivateKeyInput;\n```\n\n----------------------------------------\n\nTITLE: PublicKeyCredentialDescriptor Interface Definition\nDESCRIPTION: TypeScript interface definition for PublicKeyCredentialDescriptor, used to specify allowed credentials in WebAuthn authentication, including id, optional transports, and credential type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ninterface PublicKeyCredentialDescriptor {\n  id: BufferSource;\n  transports?: AuthenticatorTransport[];\n  type: PublicKeyCredentialType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Curve Types in TypeScript\nDESCRIPTION: This snippet outlines the possible cryptographic curves used for API keys, allowing for structure and consistency in API key signature processing across the service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type v1ApiKeyCurve = \"API_KEY_CURVE_P256\" | \"API_KEY_CURVE_SECP256K1\" | \"API_KEY_CURVE_ED25519\";\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Turnkey SDK Activity Results and Status Enumerations\nDESCRIPTION: Complex TypeScript type definitions for various operation results in the Turnkey SDK, including user management, authentication, key management, and organization settings. It also defines comprehensive enumerations for activity status (e.g., CREATED, PENDING) and activity types (e.g., CREATE_API_KEYS, SIGN_TRANSACTION).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetAuthenticatorInput type alias as an object with a single property 'body' of type TGetAuthenticatorBody. It is used as the input structure for the GET /public/v1/query/get_authenticator API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetAuthenticatorInput = object\n```\n\n----------------------------------------\n\nTITLE: Updating TurnkeySDKBrowserConfig Type in TypeScript\nDESCRIPTION: Updates the TurnkeySDKBrowserConfig type to include an optional iframeUrl field. The TurnkeyContext provider will check for an iframeUrl, otherwise falling back to the default.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TurnkeySDKBrowserConfig = {\n  // ... existing fields\n  iframeUrl?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Transaction Signing Intent Structures in TypeScript\nDESCRIPTION: This snippet includes TypeScript definitions for intents that handle signing transactions and raw payloads. It specifies the parameters necessary to perform these actions securely and accurately, including private keys and transaction types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`signTransactionIntent`: { `privateKeyId`: `string`; `type`: \"TRANSACTION_TYPE_ETHEREUM\" \\| \"TRANSACTION_TYPE_SOLANA\"; `unsignedTransaction`: `string`; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`signRawPayloadIntent`: { `encoding`: \"PAYLOAD_ENCODING_HEXADECIMAL\" \\| \"PAYLOAD_ENCODING_TEXT_UTF8\"; `hashFunction`: \"HASH_FUNCTION_NO_OP\" \\| \"HASH_FUNCTION_SHA256\" \\| \"HASH_FUNCTION_KECCAK256\" \\| \"HASH_FUNCTION_NOT_APPLICABLE\"; `payload`: `string`; `privateKeyId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Types for Organization Management in TypeScript\nDESCRIPTION: This snippet outlines the intent types for creating and deleting organizations, specifying parameters such as organization name and root authenticators.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePolicy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteOrganizationIntent: { organizationId: string; }\n```\n\n----------------------------------------\n\nTITLE: Private Key Import - TypeScript SDK\nDESCRIPTION: Handles importing private keys with complex returned object structure in a Promise. Involves `TImportPrivateKeyBody` type for input and the function is inherited from `TurnkeySDKClientBase`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportPrivateKey(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining API Request Body - JavaScript SDK\nDESCRIPTION: This snippet defines a type alias for TGetPoliciesInput, which represents the structure of API request bodies when querying policy lists. It's part of the generated TypeScript definitions, ensuring typed interactions with API endpoints. Requires understanding of TypeScript and the specific APIs being used.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n`TGetPoliciesInput` = \"object\"\n```\n\n----------------------------------------\n\nTITLE: TListUserTagsResponse Type Alias Definition\nDESCRIPTION: Defines the TListUserTagsResponse type alias, representing the schema for a successful (200) response from the PublicApiService_ListUserTags operation. This alias is defined in the specified TypeScript declaration file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListUserTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TListUserTagsResponse** = `operations`[`\"PublicApiService_ListUserTags\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining ReadOnlySessionRequest Object Definition in TypeScript\nDESCRIPTION: Defines the structure for a request to create a read-only session, including organization ID and request timestamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nv1CreateReadOnlySessionRequest: object\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:829\n\norganizationId: string // Unique identifier for a given Organization.\nparameters: definitions[\"v1CreateReadOnlySessionIntent\"]\ntimestampMs: string // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\ntype: \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"\n```\n\n----------------------------------------\n\nTITLE: Compressing Raw Public Keys with compressRawPublicKey() in TypeScript\nDESCRIPTION: This function converts an uncompressed public key to its compressed format. It accepts a raw public key as a Uint8Array parameter and returns a Uint8Array containing the compressed version of the public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/compressRawPublicKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncompressRawPublicKey(rawPublicKey: Uint8Array): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Sub-Organization Request in TypeScript\nDESCRIPTION: This method stamps a request to create a sub-organization. It takes a TCreateSubOrganizationBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateSubOrganization(input: TCreateSubOrganizationBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateInvitationsInput Type in TypeScript\nDESCRIPTION: Type alias definition for TCreateInvitationsInput used in the POST /public/v1/submit/create_invitations endpoint. Specifies the structure of the request input with a body property of type TCreateInvitationsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateInvitationsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateInvitationsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeletePrivateKeyTagsResponse type alias. It represents the response schema for the PublicApiService_DeletePrivateKeyTags operation, specifically the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePrivateKeyTagsResponse = operations[\"PublicApiService_DeletePrivateKeyTags\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Structure for User Management\nDESCRIPTION: This TypeScript type describes the response structure for user management API intents, covering functions like creating users, deleting users, and managing user tags, ensuring consistent schemas in API communications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUserTags.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; };\n```\n\n----------------------------------------\n\nTITLE: Defining Update User Intent - JavaScript\nDESCRIPTION: This snippet details the `updateUserIntent` object structure, which outlines the parameters needed to update user information, including user email, username, phone number, and related user tag identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Types in TypeScript\nDESCRIPTION: Type definitions for email authentication including request parameters for customization, expiration, and validation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1EmailAuthIntentV2 {\n  apiKeyName?: string;\n  email: string;\n  emailCustomization?: v1EmailCustomizationParams;\n  expirationSeconds?: string;\n  invalidateExisting?: boolean;\n  sendFromEmailAddress?: string;\n  sendFromEmailSenderName?: string;\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitImportWalletIntent type\nDESCRIPTION: Defines the intent structure for initializing wallet import, which includes the ID of the user importing the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitImportWalletIntent\n * @memberof definitions\n */\nexport interface v1InitImportWalletIntent {\n  /**\n   * The ID of the User importing a Wallet.\n   */\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsResponse Type in TypeScript\nDESCRIPTION: Type alias definition that maps to the success response schema for the delete private key tags API endpoint. This type represents the structure of the response when calling POST /public/v1/submit/delete_private_key_tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePrivateKeyTagsResponse = operations[\"PublicApiService_DeletePrivateKeyTags\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: A complex TypeScript type definition documenting the return structure of a Promise. It includes activity objects, authentication data, and numerous intent types for various operations such as creating organizations, users, wallets, and authenticators.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { nanos: string; seconds: string; }; \n    failure: { code: number; details: object & object[]; message: string; }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n            clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n              clientDataJson: string; \n              transports: ...[]; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      /* Additional intent types truncated for brevity */\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: TStamp and TStamper Interface Definitions\nDESCRIPTION: TypeScript interface definitions for stamp types used in authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/documents/WalletStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype TStamp = {\n  stampHeaderName: string;\n  stampHeaderValue: string;\n};\n\ninterface TStamper {\n  stamp: (input: string) => Promise<TStamp>;\n}\n```\n\n----------------------------------------\n\nTITLE: TUpdateUserTagInput Properties (TypeScript)\nDESCRIPTION: This snippet defines the `body` property of the `TUpdateUserTagInput` type. It specifies that the `body` property is of type `TUpdateUserTagBody`, which likely represents the data to be used when updating a user tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserTagInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  body: TUpdateUserTagBody\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Wallet Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a wallet. It takes an input of type TCreateWalletBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWallet(input: TCreateWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1InvitationStatus Enum in TypeScript\nDESCRIPTION: TypeScript type definition for invitation status enumeration, representing the possible states of an invitation (created, accepted, or revoked).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1InvitationStatus\n\n> **v1InvitationStatus**: `\"INVITATION_STATUS_CREATED\"` | `\"INVITATION_STATUS_ACCEPTED\"` | `\"INVITATION_STATUS_REVOKED\"`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2028\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Private Key Tag Request in TypeScript\nDESCRIPTION: This method stamps a request to create a private key tag. It takes a TCreatePrivateKeyTagBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePrivateKeyTag(input: TCreatePrivateKeyTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TurnKey SDK Types and Interfaces in TypeScript\nDESCRIPTION: This code snippet defines various types and interfaces for the TurnKey SDK, including result types for different operations, activity statuses, and a comprehensive list of activity types. It covers a wide range of functionalities such as user management, API key handling, policy creation, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePolicy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult: { userId: string; };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetApiKeyResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting an API key, containing an ApiKey object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetApiKeyResponse {\n  apiKey: definitions[\"v1ApiKey\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1AcceptInvitationResult Type\nDESCRIPTION: Defines the structure for the `v1AcceptInvitationResult` object, representing the result of accepting an invitation. It contains the invitation ID and the user ID associated with the accepted invitation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1AcceptInvitationResult**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:443](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L443)\n\n#### invitationId\n\n> **invitationId**: `string`\n\n##### Description\n\nUnique identifier for a given Invitation.\n\n#### userId\n\n> **userId**: `string`\n\n##### Description\n\nUnique identifier for a given User.\n```\n\n----------------------------------------\n\nTITLE: Defining type for path field\nDESCRIPTION: This snippet defines the type for the `path` field within `v1WalletAccountParams`, which is a `string`. The description indicates this represents the derivation path used to generate a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\n> **path**: `string`\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Offline Signing Script\nDESCRIPTION: Example output showing the generated request URL, stamp header, POST body, and a cURL command for testing the signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-offline/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n\nConfiguration loaded!\nCreating a new Private Key for organization b8d8fa59-e1b7-4897-866a-551c32d061fa using the configured Turnkey API key...\n? New Private Key Name: Hello\nYour signed request details:\n✅ Request URL:\n        https://api.turnkey.com/public/v1/submit/create_private_keys\n✅ Stamp header name and value\n        X-Stamp: eyJwdWJsaWNLZXkiOiIwM2JmMTYyNTc2ZWI4ZGZlY2YzM2Q5Mjc1ZDA5NTk1Mjg0ZjZjNGRmMGRiNjE1NmMzYzU4Mjc3Nzg4NmEwZWUwYWMiLCJzY2hlbWUiOiJTSUdOQVRVUkVfU0NIRU1FX1RLX0FQSV9QMjU2Iiwic2lnbmF0dXJlIjoiMzA0NTAyMjAxOGNkNzVhYzUyZjhhMGQzMzdkZTZjMzJjOGNhODUyNDdlODQwYzQ2MDIxZWY1MjQ0MTJlYzFhNGFlNTAyNDMxMDIyMTAwZjRlZWQwZTJlMzExYTkyMDAzZmQ4MmFkMmQ2MTRkMDI2NGI2ZjUxNjkwNzA5MWFmMmFmZGNmOGZiOTVlY2IxMSJ9\n✅ POST body:\n        {\"timestampMs\":\"1692804998969\",\"type\":\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\",\"organizationId\":\"b8d8fa59-e1b7-4897-866a-551c32d061fa\",\"parameters\":{\"privateKeys\":[{\"privateKeyName\":\"Hello\",\"curve\":\"CURVE_SECP256K1\",\"addressFormats\":[\"ADDRESS_FORMAT_ETHEREUM\"],\"privateKeyTags\":[]}]}}\n\nFor example, you can send this request to Turnkey by running the following cURL command:\n        curl -X POST -d'{\"timestampMs\":\"1692804998969\",\"type\":\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\",\"organizationId\":\"b8d8fa59-e1b7-4897-866a-551c32d061fa\",\"parameters\":{\"privateKeys\":[{\"privateKeyName\":\"Hello\",\"curve\":\"CURVE_SECP256K1\",\"addressFormats\":[\"ADDRESS_FORMAT_ETHEREUM\"],\"privateKeyTags\":[]}]}}' -H'X-Stamp:eyJwdWJsaWNLZXkiOiIwM2JmMTYyNTc2ZWI4ZGZlY2YzM2Q5Mjc1ZDA5NTk1Mjg0ZjZjNGRmMGRiNjE1NmMzYzU4Mjc3Nzg4NmEwZWUwYWMiLCJzY2hlbWUiOiJTSUdOQVRVUkVfU0NIRU1FX1RLX0FQSV9QMjU2Iiwic2lnbmF0dXJlIjoiMzA0NTAyMjAxOGNkNzVhYzUyZjhhMGQzMzdkZTZjMzJjOGNhODUyNDdlODQwYzQ2MDIxZWY1MjQ0MTJlYzFhNGFlNTAyNDMxMDIyMTAwZjRlZWQwZTJlMzExYTkyMDAzZmQ4MmFkMmQ2MTRkMDI2NGI2ZjUxNjkwNzA5MWFmMmFmZGNmOGZiOTVlY2IxMSJ9' -v 'https://api.turnkey.com/public/v1/submit/create_private_keys'\n\nImportant note: this request is only valid for 24hrs. After that, a new request needs to be generated.\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Types\nDESCRIPTION: Type definitions for various authentication and session result structures, including OAuth, OTP, and email authentication results\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n`oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: TypeScript OAuth Provider Creation Type Definition\nDESCRIPTION: Type definition for createOauthProviders function that handles OAuth provider creation along with extensive activity tracking and various authentication intents. This type system includes comprehensive definitions for authentication flows, organizational management, and user management capabilities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createOauthProviders: (input) => Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyBody Type Alias in TypeScript\nDESCRIPTION: Type definition for the request body of the PublicApiService_DeletePolicy operation. This type maps to the expected parameters when making a POST request to '/public/v1/submit/delete_policy' endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeletePolicyBody** = `operations`[`\"PublicApiService_DeletePolicy\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Activity Type Definitions in TypeScript\nDESCRIPTION: Defines TypeScript interfaces and types for activity objects including status enums, type enums, and various result type definitions. Includes timestamps, voting data, and specific result objects for different activity types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ns: string; \nv: string; \nsignRawPayloadsResult: { \n  signatures: object[]; \n}; \nsignTransactionResult: { \n  signedTransaction: string; \n}; \nupdateAllowedOriginsResult: {}; \nupdatePolicyResult: { \n  policyId: string; \n}; \nupdatePolicyResultV2: { \n  policyId: string; \n}; \nupdatePrivateKeyTagResult: { \n  privateKeyTagId: string; \n}; \nupdateRootQuorumResult: {}; \nupdateUserResult: { \n  userId: string; \n}; \nupdateUserTagResult: { \n  userTagId: string; \n}; \nupdateWalletResult: { \n  walletId: string; \n}; \nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; \ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; \nupdatedAt: { \n  nanos: string; \n  seconds: string; \n}; \nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagInput Type Alias in TypeScript\nDESCRIPTION: Defines the TCreateUserTagInput type alias as an object with a body property of type TCreateUserTagBody. This type is used for creating user tags via the POST /public/v1/submit/create_user_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUserTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TCreateUserTagInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteWalletsBody Type Alias (TypeScript)\nDESCRIPTION: Defines the `TDeleteWalletsBody` type alias. This type represents the structure of the request body for the `PublicApiService_DeleteWallets` operation. It is derived from the `operations` type definition, accessing specific nested properties to define the body structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteWalletsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TDeleteWalletsBody** = `operations`\\[`\"PublicApiService_DeleteWallets\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Signing Multiple Raw Transaction Payloads\nDESCRIPTION: Method for signing multiple raw transaction payloads simultaneously. Returns a signed request or undefined. Enables batch processing of transaction signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nstampSignRawPayloads(input: TSignRawPayloadsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure in TypeScript\nDESCRIPTION: This TypeScript interface outlines the structure for initiating an OTP authentication process. It includes fields like contact information and email customization options necessary for sending OTPs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TInitImportWalletBody in TypeScript\nDESCRIPTION: This code snippet defines the type alias TInitImportWalletBody, which encompasses the parameters needed to perform the operation 'PublicApiService_InitImportWallet'. It combines the necessary parameters with optional command overrides to facilitate importing a wallet. This type is crucial for ensuring proper data structure when calling the import wallet API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitImportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **TInitImportWalletBody** = `operations`[`\\\"PublicApiService_InitImportWallet\\\"]`[`\\\"parameters\\\"]`[`\\\"body\\\"]`[`\\\"body\\\"]`[`\\\"parameters\\\"]` & `commandOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining WalletResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for WalletResult, containing the result of wallet creation or retrieval, including addresses and walletId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WalletResult {\n  addresses: string[];\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signed Transaction Result Type in TypeScript\nDESCRIPTION: This snippet outlines the structure for results from signing transactions. It includes a single property for the signed transaction string, ensuring developers know the expected format when handling signed transaction data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n`signTransactionResult`: \\{ `signedTransaction`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiKeysRequest Type\nDESCRIPTION: Defines the structure for the `v1CreateApiKeysRequest` object, representing the request to create API keys. It includes the `organizationId`, `parameters` (of type `v1CreateApiKeysIntentV2`), `timestampMs`, and `type`. This is the top-level request structure sent to the Coordinator service to create API keys within a specific organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiKeysRequest\n * @property {string} organizationId Unique identifier for a given Organization.\n * @property {definitions[\"v1CreateApiKeysIntentV2\"]} parameters\n * @property {string} timestampMs Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n * @property {(\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\")} type\n */\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAllowedOriginsIntent Interface in TypeScript\nDESCRIPTION: Interface for updating allowed origins for requests. Defines allowedOrigins as an array of strings representing additional allowed origins besides Turnkey origins.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n{ allowedOrigins: string[]; }\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Intent Type Definition (v1EmailAuthIntentV2)\nDESCRIPTION: Defines the structure for initiating email-based authentication with optional customization parameters, including email, expiration, and key invalidation options\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1EmailAuthIntentV2 {\n  apiKeyName?: string;\n  email: string;\n  emailCustomization?: v1EmailCustomizationParams;\n  expirationSeconds?: string;\n  invalidateExisting?: boolean;\n  sendFromEmailAddress?: string;\n  sendFromEmailSenderName?: string;\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for OAuth Providers Creation TypeScript\nDESCRIPTION: This TypeScript type alias is used to define a structured format for parameters related to creating OAuth providers within the SDK. It combines operation parameters with command override parameters. This alias helps ensure that the required structure and types are maintained across SDK implementations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateOauthProvidersBody = operations[\"PublicApiService_CreateOauthProviders\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Example\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and navigate to the offline example directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-offline/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-offline/\n```\n\n----------------------------------------\n\nTITLE: Creating User Intent - JavaScript\nDESCRIPTION: This intent is designed to create a new user with associated attributes such as email, phone number, and tags. It is essential for setting up user accounts in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateUserIntent: { userEmail: `string`; userId: `string`; userName: `string`; userPhoneNumber: `string`; userTagIds: `string`[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorBody Type Alias (TypeScript)\nDESCRIPTION: This snippet defines the `TGetAuthenticatorBody` type alias in TypeScript. It uses `Omit` to exclude the `organizationId` property from the body parameters of the `PublicApiService_GetAuthenticator` operation and intersects the resulting type with `queryOverrideParams`. This is likely used to structure the request body for retrieving an authenticator via an API, providing flexibility to override default query parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetAuthenticatorBody = `Omit`<`operations`[`\"PublicApiService_GetAuthenticator\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`> & `queryOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Import Component in React\nDESCRIPTION: Sets up the Import component from @turnkey/sdk-react for wallet import functionality with success and error handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Import } from \"@turnkey/sdk-react\";\nimport { toast } from \"sonner\";\n\nfunction ImportWallet() {\n  const handleImportSuccess = () => {\n    toast.success(\"Wallet successfully imported!\");\n  };\n\n  const handleImportError = (errorMessage: string) => {\n    toast.error(errorMessage);\n  };\n\n  return (\n    <Import\n      onHandleImportSuccess={handleImportSuccess}\n      onError={handleImportError}\n    />\n  );\n}\n\nexport default ImportWallet;\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a user in an organization. This intent includes fields for user identification, contact information, and tag assignments.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Recover User Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the recoverUserResult API response, which includes an array of authenticatorId strings. It signifies the result of user recovery operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1PayloadEncoding type\nDESCRIPTION: Defines a type for payload encoding, allowing either hexadecimal or UTF-8 text encoding.  This specifies how data is represented when transmitted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n            v1PayloadEncoding: {\n                name: \"v1PayloadEncoding\";\n                schema: {\n                    type: \"string\",\n                    enum: [\"PAYLOAD_ENCODING_HEXADECIMAL\", \"PAYLOAD_ENCODING_TEXT_UTF8\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This snippet defines a complex type structure for various activity types and their corresponding result structures. It includes operations like creating API keys, managing users, signing transactions, and handling organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUserTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nhResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Importing Turnkey Styles in Next.js\nDESCRIPTION: Import statement for including Turnkey's default styles in a Next.js application layout file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@turnkey/sdk-react/styles\";\n```\n\n----------------------------------------\n\nTITLE: Defining v1RemoveOrganizationFeatureResult Interface in TypeScript\nDESCRIPTION: This interface represents the result of removing an organization feature. It contains a list of remaining features after the removal operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1RemoveOrganizationFeatureResult {\n  features: definitions[\"v1Feature\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsBody Type Alias in TypeScript\nDESCRIPTION: Defines the TDeletePrivateKeyTagsBody type alias as the body parameters for the PublicApiService_DeletePrivateKeyTags operation. This type is used for the POST request to delete private key tags via the /public/v1/submit/delete_private_key_tags endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePrivateKeyTagsBody = operations[\"PublicApiService_DeletePrivateKeyTags\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining v1AcceptInvitationIntentV2 Type\nDESCRIPTION: Defines the structure for the `v1AcceptInvitationIntentV2` object, which is likely an updated version of `v1AcceptInvitationIntent`. Similar to the previous type, it includes authenticator details, invitation ID, and user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1AcceptInvitationIntentV2**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:435](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L435)\n\n#### authenticator\n\n> **authenticator**: `definitions`[`\"v1AuthenticatorParamsV2\"`]\n\n##### Description\n\nWebAuthN hardware devices that can be used to log in to the Turnkey web app.\n\n#### invitationId\n\n> **invitationId**: `string`\n\n##### Description\n\nUnique identifier for a given Invitation object.\n\n#### userId\n\n> **userId**: `string`\n\n##### Description\n\nUnique identifier for a given User.\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateRootQuorumResult in TypeScript\nDESCRIPTION: This snippet depicts the `updateRootQuorumResult` type, indicating the result of a root quorum update action. It does not carry any additional data, showing that the operation's success is the primary outcome.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n`updateRootQuorumResult`: \\{ \\};\n```\n\n----------------------------------------\n\nTITLE: TGetOrganizationInput Properties Definition\nDESCRIPTION: Property definition for the TGetOrganizationInput type, specifying the required body property and its type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetOrganizationBody\n```\n\n----------------------------------------\n\nTITLE: Defining getEmbeddedPublicKey Method in TypeScript\nDESCRIPTION: This method retrieves an embedded public key. It returns a Promise that resolves to either a string (the public key) or null.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetEmbeddedPublicKey(): Promise<null | string>\n```\n\n----------------------------------------\n\nTITLE: Creating User Intent Structures for Authentication - TypeScript\nDESCRIPTION: This code snippet defines several user-related intent structures for wallet operations, allowing for actions like user recovery and organization feature management, crucial for maintaining user data integrity and operational functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype RecoverUserIntent = { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; }; authenticatorName: string; challenge: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Interface in TypeScript\nDESCRIPTION: This snippet defines the v1OtpAuthIntent interface, which specifies the structure for OTP (One-Time Password) authentication requests. It includes fields for API key naming, expiration, OTP details, and public key for encryption.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1OtpAuthIntent {\n  apiKeyName?: string;\n  expirationSeconds?: string;\n  invalidateExisting?: boolean;\n  otpCode: string;\n  otpId: string;\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: apiPrivateKey Property\nDESCRIPTION: This property holds the private API key as a string, essential for authentication when using the ApiKeyStamper class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiPrivateKey: string\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Method Intent - JavaScript\nDESCRIPTION: This intent sets a user's payment method by specifying attributes including the cardholder's name, email, and card particulars such as CVV and expiry date.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetPaymentMethodIntent: { cardHolderEmail: `string`; cardHolderName: `string`; cvv: `string`; expiryMonth: `string`; expiryYear: `string`; number: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining TImportWalletBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the body parameters for the POST /public/v1/submit/import_wallet endpoint. It extracts the body type from the operations object's ImportWallet operation definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TImportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TImportWalletBody = operations[\"PublicApiService_ImportWallet\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Promise Type Definition for Activity Return\nDESCRIPTION: This code defines the structure of a Promise that resolves to an object containing an `activity` property. The `activity` property itself is a complex object with properties related to approval, creation timestamps, failure details, fingerprint, ID, and an `intent` property that can take different forms depending on the specific action being performed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" | \\\"ADDRESS_FORMAT_SEI\\\" | \\\"ADDRESS_FORMAT_XLM\\\" | \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" | \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" | \\\"ADDRESS_FORMAT_TON_V3R2\\\" | \\\"ADDRESS_FORMAT_TON_V4R2\\\" | \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" | \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`; `\"\n```\n\n----------------------------------------\n\nTITLE: Defining TActivityId Type Alias in TypeScript\nDESCRIPTION: This code defines the TActivityId type alias which references the 'id' property of the TActivity type. This alias helps provide type safety when working with activity identifiers in the Turnkey HTTP SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TActivityId.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTActivityId = TActivity[\"id\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletInput Type Alias in TypeScript\nDESCRIPTION: Defines the TCreateWalletInput type alias as an object with a body property of type TCreateWalletBody. This type is used for the POST request to the /public/v1/submit/create_wallet endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateWalletInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPoliciesResponse Type in TypeScript\nDESCRIPTION: Type alias that maps to the 200 response schema of the PublicApiService_GetPolicies operation. Used for typing the response of policy listing endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetPoliciesResponse = operations[\"PublicApiService_GetPolicies\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Update Wallet Result Structure in TypeScript\nDESCRIPTION: Defines the structure for updating wallet results, including walletId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWalletResult`: \\{ `walletId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy with Turnkey SDK TypeScript\nDESCRIPTION: This function is responsible for deleting policy settings, requiring a `TDeletePolicyBody` input. It results in a Promise of a combined object, targeting policy management functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deletePolicy**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Invitations Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating invitations. It takes an input of type TCreateInvitationsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateInvitations(input: TCreateInvitationsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/sdk-react Package\nDESCRIPTION: Command to install the @turnkey/sdk-react package using npm.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Defining TListUserTagsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TListUserTagsResponse, which maps to the response schema of the PublicApiService_ListUserTags operation with a 200 status code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListUserTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TListUserTagsResponse** = `operations`[`\"PublicApiService_ListUserTags\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyBody Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that combines the DeletePolicy operation parameters with command override parameters. It represents the expected request body structure when deleting a policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeletePolicyBody = operations[\"PublicApiService_DeletePolicy\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Updating User Intent - TypeScript\nDESCRIPTION: Defines the structure for updating user details in the wallet management system. This includes fields for `userEmail`, `userName`, and `userPhoneNumber`, allowing for comprehensive updates to user information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete API Keys Request in TypeScript\nDESCRIPTION: This method stamps a request to delete API keys. It takes a TDeleteApiKeysBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteApiKeys(input: TDeleteApiKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportPrivateKeyResult type\nDESCRIPTION: Defines the structure for the result of importing a private key. It includes a list of addresses and a unique identifier for the private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1ImportPrivateKeyResult\n * @memberof definitions\n */\nexport interface v1ImportPrivateKeyResult {\n  /**\n   * A list of addresses.\n   */\n  addresses: definitions[\"immutableactivityv1Address\"][];\n  /**\n   * Unique identifier for a Private Key.\n   */\n  privateKeyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Promise Return Type Structure for TurnKey SDK Activities\nDESCRIPTION: A TypeScript type definition showing the comprehensive structure of a Promise return from TurnKey SDK. The structure includes activity details such as approval status, timestamps, identifiers, and a large variety of possible intents for operations like creating organizations, managing users, and handling authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      // Many different intent types defined here\n      // Including organization management, user management, authentication, etc.\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definitions for PKH SDK Intents\nDESCRIPTION: This snippet defines various TypeScript types representing different intents (requests) that can be sent to the PKH SDK. Each type represents a specific action, such as importing a private key, authenticating with OTP, updating policies, signing payloads, or creating organizations. The types specify the required and optional parameters for each intent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"PKH` \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\"` \\| `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\"` \\| `\\\"ADDRESS_FORMAT_SEI\\\"` \\| `\\\"ADDRESS_FORMAT_XLM\\\"` \\| `\\\"ADDRESS_FORMAT_DOGE_MAINNET\\\"` \\| `\\\"ADDRESS_FORMAT_DOGE_TESTNET\\\"` \\| `\\\"ADDRESS_FORMAT_TON_V3R2\\\"` \\| `\\\"ADDRESS_FORMAT_TON_V4R2\\\"` \\| `\\\"ADDRESS_FORMAT_XRP\\\"`)[]; `curve`: `\\\"CURVE_SECP256K1\\\"` \\| `\\\"CURVE_ED25519\\\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\\\"AUTHENTICATOR_TRANSPORT_BLE\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_INTERNAL\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_NFC\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_USB\\\"` \\| `\\\"AUTHENTICATOR_TRANSPORT_HYBRID\\\")[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: `\\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\"` \\| `\\\"FEATURE_NAME_EMAIL_AUTH\\\"` \\| `\\\"FEATURE_NAME_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBHOOK\\\"` \\| `\\\"FEATURE_NAME_SMS_AUTH\\\"` \\| `\\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"`; \\}; `setOrganizationFeatureIntent`: \\{ `name`: `\\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\"` \\| `\\\"FEATURE_NAME_EMAIL_AUTH\\\"` \\| `\\\"FEATURE_NAME_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBHOOK\\\"` \\| `\\\"FEATURE_NAME_SMS_AUTH\\\"` \\| `\\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: `\\\"PAYLOAD_ENCODING_HEXADECIMAL\\\"` \\| `\\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"`; `hashFunction`: `\\\"HASH_FUNCTION_NO_OP\\\"` \\| `\\\"HASH_FUNCTION_SHA256\\\"` \\| `\\\"HASH_FUNCTION_KECCAK256\\\"` \\| `\\\"HASH_FUNCTION_NOT_APPLICABLE\\\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: `\\\"PAYLOAD_ENCODING_HEXADECIMAL\\\"` \\| `\\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"`; `hashFunction`: `\\\"HASH_FUNCTION_NO_OP\\\"` \\| `\\\"HASH_FUNCTION_SHA256\\\"` \\| `\\\"HASH_FUNCTION_KECCAK256\\\"` \\| `\\\"HASH_FUNCTION_NOT_APPLICABLE\\\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: `\\\"PAYLOAD_ENCODING_HEXADECIMAL\\\"` \\| `\\\"PAYLOAD_ENCODING_TEXT_UTF8\\\"`; `hashFunction`: `\\\"HASH_FUNCTION_NO_OP\\\"` \\| `\\\"HASH_FUNCTION_SHA256\\\"` \\| `\\\"HASH_FUNCTION_KECCAK256\\\"` \\| `\\\"HASH_FUNCTION_NOT_APPLICABLE\\\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\\\"TRANSACTION_TYPE_ETHEREUM\\\"` \\| `\\\"TRANSACTION_TYPE_SOLANA\\\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\\\"TRANSACTION_TYPE_ETHEREUM\\\"` \\| `\\\"TRANSACTION_TYPE_SOLANA\\\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\\\"EFFECT_ALLOW\\\"` \\| `\\\"EFFECT_DENY\\\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Feature and Feature Name Types in TypeScript\nDESCRIPTION: This snippet defines the structure for a feature object and an enum for feature names.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1Feature\n\n> **v1Feature**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1639](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1639)\n\n#### name?\n\n> `optional` **name**: `definitions`[`\"v1FeatureName\"`]\n\n#### value?\n\n> `optional` **value**: `string`\n\n### v1FeatureName\n\n> **v1FeatureName**: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1644](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1644)\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Intent in TypeScript\nDESCRIPTION: This snippet specifies the structure for 'setPaymentMethodIntent', encapsulating necessary payment details such as cardholder information and card details. This is critical for handling payment method setups in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/emailAuth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TActivity Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named TActivity. It is derived from the TurnkeyApiTypes interface, specifically accessing the 'v1Activity' property. This type alias is likely used to represent activity-related data structures in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTActivity = TurnkeyApiTypes[\"v1Activity\"]\n```\n\n----------------------------------------\n\nTITLE: Type Definitions - SDK Interfaces\nDESCRIPTION: Comprehensive type definitions covering API requests and responses for wallet management, authentication flows, organization settings, and transaction signing capabilities. Includes enums for supported chains, curves, and various formatting options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayloads.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  addressFormats: (\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];\n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n  // Additional type definitions truncated for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1PrivateKeyParams Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for private key parameters, including address formats, cryptographic curve, name, and tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_119\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1PrivateKeyParams: object\n\naddressFormats: definitions[\"v1AddressFormat\"][]\n\ncurve: definitions[\"v1Curve\"]\n\nprivateKeyName: string\n\nprivateKeyTags: string[]\n```\n\n----------------------------------------\n\nTITLE: Defining TImportPrivateKeyBody Type in TypeScript\nDESCRIPTION: Type alias defining the request body structure for the import private key endpoint. Maps to the body parameters of the PublicApiService_ImportPrivateKey operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TImportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTImportPrivateKeyBody = operations[\"PublicApiService_ImportPrivateKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TListUserTagsInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TListUserTagsInput type alias as an object with a single property 'body' of type TListUserTagsBody. It is part of the Turnkey SDK API types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListUserTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTListUserTagsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateSubOrganizationResponse Type in TypeScript\nDESCRIPTION: Type alias that combines the create sub-organization response schema with v1ActivityResponse definitions from the Turnkey API. This type represents the successful response (HTTP 200) structure when creating a new sub-organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateSubOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateSubOrganizationResponse = operations[\"PublicApiService_CreateSubOrganization\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createSubOrganizationResultV7\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status String Literal Types\nDESCRIPTION: This snippet defines a TypeScript string literal type for representing the status of an activity. It restricts the possible values to a predefined set of strings, ensuring that only valid activity statuses can be used.  This enhances code clarity and helps prevent errors related to invalid status values.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n}; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining Type Enum in TypeScript\nDESCRIPTION: This snippet defines the `type` type, which is an enumeration of different activity types including actions like creating users, signing transactions, and managing API keys. It provides a structured way to categorize SDK activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `...`;\n```\n\n----------------------------------------\n\nTITLE: Specifying Properties of TUpdatePolicyInput in TypeScript\nDESCRIPTION: This code snippet defines the 'body' property of the TUpdatePolicyInput type alias. The body is of type TUpdatePolicyBody, which likely contains the details required for updating a policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePolicyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TUpdatePolicyBody\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletBody Type Alias in TypeScript\nDESCRIPTION: Creates a composite type for wallet update operations by merging parameters from PublicApiService_UpdateWallet with additional command override parameters\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTUpdateWalletBody = operations[\"PublicApiService_UpdateWallet\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining v1RejectActivityRequest Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for a request to reject an activity, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_126\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RejectActivityRequest: object\n\norganizationId: string\n\nparameters: definitions[\"v1RejectActivityIntent\"]\n\ntimestampMs: string\n\ntype: \"ACTIVITY_TYPE_REJECT_ACTIVITY\"\n```\n\n----------------------------------------\n\nTITLE: TRemoveOrganizationFeatureBody Type Alias Definition\nDESCRIPTION: Defines the TRemoveOrganizationFeatureBody type alias. This alias maps to the request body parameters of the PublicApiService_RemoveOrganizationFeature operation. It specifies the structure of the data required to remove an organization feature via the public API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRemoveOrganizationFeatureBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TRemoveOrganizationFeatureBody** = `operations`[`\"PublicApiService_RemoveOrganizationFeature\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPolicyInput Type in TypeScript\nDESCRIPTION: Type alias definition for TGetPolicyInput object used in policy retrieval API requests. Specifies the structure for POST requests to /public/v1/query/get_policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetPolicyInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TInitUserEmailRecoveryInput Type Alias in TypeScript\nDESCRIPTION: Type definition for TInitUserEmailRecoveryInput, which is an object containing a body property of type TInitUserEmailRecoveryBody. This type is used for initializing user email recovery processes in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitUserEmailRecoveryInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTInitUserEmailRecoveryInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthInput Type Alias in TypeScript\nDESCRIPTION: Defines the TOauthInput type alias as an object with a body property of type TOauthBody. This type is used for OAuth-related input in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOauthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTOauthInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Root User Parameters Interface in TypeScript\nDESCRIPTION: This snippet defines the v1RootUserParams interface with properties for API keys, authenticators, user email, and username. It includes descriptions for each property.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_132\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RootUserParams: object\n\napiKeys: definitions[\"apiApiKeyParams\"][]\n\nDescription: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.\n\nauthenticators: definitions[\"v1AuthenticatorParamsV2\"][]\n\nDescription: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.\n\nuserEmail?: string\n\nDescription: The user's email address.\n\nuserName: string\n\nDescription: Human-readable name for a User.\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitOtpAuthIntentV2 type\nDESCRIPTION: Defines the structure for the intent to initialize OTP authentication (version 2), including contact information, OTP customization, and a user identifier for rate limiting.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitOtpAuthIntentV2\n * @memberof definitions\n */\nexport interface v1InitOtpAuthIntentV2 {\n  /**\n   * Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true\n   */\n  alphanumeric?: boolean;\n  /**\n   * Email or phone number to send the OTP code to\n   */\n  contact: string;\n  /**\n   * Optional parameters for customizing emails. If not provided, the default email will be used.\n   */\n  emailCustomization?: definitions[\"v1EmailCustomizationParams\"];\n  /**\n   * Optional length of the OTP code. Default = 9\n   * @format int32\n   */\n  otpLength?: number;\n  /**\n   * Enum to specifiy whether to send OTP via SMS or email\n   */\n  otpType: string;\n  /**\n   * Optional custom email address from which to send the OTP email\n   */\n  sendFromEmailAddress?: string;\n  /**\n   * Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'\n   */\n  sendFromEmailSenderName?: string;\n  /**\n   * Optional parameters for customizing SMS message. If not provided, the default sms message will be used.\n   */\n  smsCustomization?: definitions[\"v1SmsCustomizationParams\"];\n  /**\n   * Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.\n   */\n  userIdentifier?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOrganizationIntent Object in TypeScript\nDESCRIPTION: This snippet describes the parameters required to create an organization, including the organization's name and authenticator details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreateOrganizationIntent\": {\\n    \"organizationName\": string,\\n    \"rootAuthenticator\": definitions[\\\"v1AuthenticatorParams\\\"],\\n    \"rootEmail\": string,\\n    \"rootUserId?\": string\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetWalletResponse in TypeScript\nDESCRIPTION: This code snippet defines a type alias 'TGetWalletResponse' that represents the structure of the response expected from the public API service when retrieving a wallet. The type is derived from the schema defined in the API documentation, ensuring type safety and clarity when working with wallet data. This is particularly useful for frontend applications that interact with the SDK to fetch wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetWalletResponse = operations[\\\"PublicApiService_GetWallet\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/sdk-server using npm\nDESCRIPTION: This snippet demonstrates how to install the @turnkey/sdk-server package via npm. It is required to enable server-side interactions with the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-server\n```\n\n----------------------------------------\n\nTITLE: User Management Interface Definitions\nDESCRIPTION: TypeScript interfaces for user management operations including user creation, updates, and tag management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1User {\n  apiKeys: v1ApiKey[]\n  authenticators: v1Authenticator[]\n  createdAt: externaldatav1Timestamp\n  oauthProviders: v1OauthProvider[]\n  updatedAt: externaldatav1Timestamp\n  userEmail?: string\n  userId: string\n  userName: string\n  userPhoneNumber?: string\n  userTags: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TRejectActivityBody Type Alias in TypeScript\nDESCRIPTION: Type definition for TRejectActivityBody, which combines PublicApiService_RejectActivity operation parameters with command override parameters. This type is used for rejecting activities in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRejectActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TRejectActivityBody** = `operations`[`\"PublicApiService_RejectActivity\"`][`\"parameters\"`][`\"body\"`][`\"body\"`][`\"parameters\"`] & `commandOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Template\nDESCRIPTION: Command to create a local environment file from the example template for configuring Turnkey API credentials and other settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/deployer/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining GetWalletAccount Function in TypeScript\nDESCRIPTION: The getWalletAccount function is designed to return a promise containing the wallet account details when provided with the appropriate input. It requires a definition for TGetWalletAccountInput and is used to make a POST request to retrieve data from the public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getWalletAccount = (input) => Promise<{ account: { address: string; addressFormat: \"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"; createdAt: { nanos: string; seconds: string; }; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; organizationId: string; path: string; pathFormat: \"PATH_FORMAT_BIP32\"; updatedAt: { nanos: string; seconds: string; }; walletAccountId: string; walletId: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Activity Type and Status Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for activity statuses, results, and action types. Includes definitions for email recovery, OAuth, OTP authentication, organization features, payment methods, signatures, and various administrative operations. Contains timestamps and voting functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUserTag.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Organization with Turnkey SDK TypeScript\nDESCRIPTION: This function allows for the deletion of sub-organizations, taking `TDeleteSubOrganizationBody` as input; it returns a Promise object, thereby aiding in hierarchical organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteSubOrganization**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Turnkey SDK Promise Return Type\nDESCRIPTION: A TypeScript type definition showing the complex Promise return structure for Turnkey SDK operations. The structure contains activity information including approval status, creation timestamps, and various intents for different operations like invitations, organization management, authentication, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayload.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\n```\n\n----------------------------------------\n\nTITLE: Attempting Token Transfer in Solana (Expected to Fail)\nDESCRIPTION: This snippet shows the command to attempt a token transfer, which is expected to fail due to lack of proper policy. It prompts for the originating wallet address and token mint address.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm token-transfer-policy attempt-transfer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verified Sub-Organization IDs in TypeScript\nDESCRIPTION: stampGetVerifiedSubOrgIds extracts verified sub-organization IDs via TGetVerifiedSubOrgIdsBody input, outputting a Promise of undefined or TSignedRequest. It inherits functionality from the TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_117\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetVerifiedSubOrgIds(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This code snippet defines a complex Promise return type for an SDK function. It includes an activity object with numerous nested properties covering various aspects of the SDK's functionality, such as authentication, invitations, and organizational operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createAuthenticators.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n            clientExtensionResults: { \n              appid: boolean; \n              appidExclude: boolean; \n              credProps: { \n                rk: boolean; \n              }; \n            }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n              clientDataJson: string; \n              transports: []; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      // ... (other intent types omitted for brevity)\n    }; \n  }; \n}>\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/api-key-stamper via pnpm\nDESCRIPTION: Installation command for the @turnkey/api-key-stamper package using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/api-key-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Response Structure in TypeScript\nDESCRIPTION: Defines the structure of the response received from the API after submitting a wallet update request. The response includes the wallet identifier, which helps in tracking or verifying the updated wallet details. It requires TypeScript for type safety and clarity in interacting with API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUsersBody Type Alias in TypeScript\nDESCRIPTION: Defines the TDeleteUsersBody type alias as the body parameters for the PublicApiService_DeleteUsers operation. This type is used for the POST request to the /public/v1/submit/delete_users endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUsersBody = operations[\"PublicApiService_DeleteUsers\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for SDK Documentation\nDESCRIPTION: Navigation breadcrumb links for accessing the approveActivity documentation within the SDK hierarchy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / approveActivity\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for OTP Authentication Body in TypeScript\nDESCRIPTION: This code defines a type alias named TOtpAuthBody that represents the expected structure of the request body for the OTP authentication in the Public API service. The alias utilizes TypeScript's operations and parameter specifications to ensure type safety across the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOtpAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TOtpAuthBody** = `operations`\\[`\\\"PublicApiService_OtpAuth\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1RemoveOrganizationFeatureIntent type\nDESCRIPTION: Defines the structure for removing an organization feature, including the name of the feature to remove. This intent is used to disable or remove specific features from an organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\n            v1RemoveOrganizationFeatureIntent: {\n                name: \"v1RemoveOrganizationFeatureIntent\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        name: {\n                            $ref: \"#/definitions/v1FeatureName\",\n                            description: \"Name of the feature to remove\",\n                            required: true\n                        }\n                    },\n                    required: [\"name\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagInput Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for the input parameters when creating user tags in the Turnkey API. The type represents the payload structure for POST requests to the /public/v1/submit/create_user_tag endpoint, containing a body property of type TCreateUserTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUserTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * TCreateUserTagInput = `object`\n * \n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:22066\n * \n * `POST /public/v1/submit/create_user_tag`\n */\n\n/**\n * Properties\n * \n * body: TCreateUserTagBody\n * \n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:22067\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitImportPrivateKeyIntent type\nDESCRIPTION: Defines the intent structure for initializing the import of a private key, including the ID of the user importing the private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitImportPrivateKeyIntent\n * @memberof definitions\n */\nexport interface v1InitImportPrivateKeyIntent {\n  /**\n   * The ID of the User importing a Private Key.\n   */\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TApproveActivityInput Type in TypeScript for Turnkey API\nDESCRIPTION: Type alias definition for the TApproveActivityInput object that specifies the structure for approving activities via the Turnkey API. It's used as the input for the POST request to /public/v1/submit/approve_activity endpoint and contains a body property of type TApproveActivityBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TApproveActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TApproveActivityInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorBody Type Alias in TypeScript\nDESCRIPTION: Type alias for the request body of the GetAuthenticator API endpoint. It uses the TypeScript type system to reference the body parameter structure from the PublicApiService_GetAuthenticator operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetAuthenticatorBody** = `operations`[`\"PublicApiService_GetAuthenticator\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining BundleInjected Enumeration\nDESCRIPTION: This snippet defines the BundleInjected event type in TypeScript, which indicates that a bundle has been injected into the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nBundleInjected: \"BUNDLE_INJECTED\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure - TypeScript\nDESCRIPTION: This snippet defines the OAuth result structure, which contains an apiKeyId, a credential bundle, and a userId. It is critical for managing OAuth-based authentication processes within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Definition of getOauthProviders Function in TypeScript\nDESCRIPTION: TypeScript function signature for getOauthProviders, which retrieves details about OAuth providers for a user through a POST request to the /public/v1/query/get_oauth_providers endpoint. It accepts an input parameter of type TGetOauthProvidersInput and returns a Promise containing an array of OAuth provider objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getOauthProviders: (input) => Promise<{ oauthProviders: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: TStamp Type Definition for WebAuthn Authentication\nDESCRIPTION: TypeScript type definition for the stamp object returned by the WebauthnStamper.stamp() method, containing the header name and value for authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ntype TStamp = {\n  stampHeaderName: string;\n  stampHeaderValue: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Authenticator Response in TypeScript\nDESCRIPTION: This snippet defines a type alias named TGetAuthenticatorResponse which represents the structure of the response from the 'PublicApiService_GetAuthenticator' operation when the response status code is 200. It provides a clear structure for handling the response from the API, ensuring type safety in handling data received from this operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetAuthenticatorResponse = operations[\\\"PublicApiService_GetAuthenticator\\\"] [\\\"responses\\\"] [\\\"200\\\"] [\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOauthProvidersIntent Object in TypeScript\nDESCRIPTION: Defines the structure of a request to create OAuth providers, including details like userId and oauthProviders. This snippet is essential for understanding how to format requests in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreateOauthProvidersIntent\": {\\n    \"oauthProviders\": definitions[\\\"v1OauthProviderParams\\\"],\\n    \"userId\": string\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enums in TypeScript\nDESCRIPTION: Defines a union type for possible activity statuses in the Coordinator Service API. These statuses represent the various states an activity can be in during its lifecycle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityStatus =\n  | \"ACTIVITY_STATUS_CREATED\"\n  | \"ACTIVITY_STATUS_PENDING\"\n  | \"ACTIVITY_STATUS_COMPLETED\"\n  | \"ACTIVITY_STATUS_FAILED\"\n  | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\"\n  | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enumeration - TypeScript\nDESCRIPTION: This snippet defines an enumeration for the possible statuses of an activity, outlining various states such as created, pending, and completed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ActivityStatus**: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:480\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition: TGetAuthenticatorsBody\nDESCRIPTION: Defines a type alias `TGetAuthenticatorsBody` as an Omit of a larger type, removing the `organizationId` property and intersecting with `queryOverrideParams`. This type is likely used as the body for a request to retrieve authenticators, allowing for customized querying.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetAuthenticatorsBody** = `Omit`\\<`operations`[`\\\"PublicApiService_GetAuthenticators\\\"`] [`\\\"parameters\\\"`] [`\\\"body\\\"`] [`\\\"body\\\"`], `\\\"organizationId\\\"`\\> & `queryOverrideParams`\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateApiOnlyUsersIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for creating API-only users, including a list of user objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateApiOnlyUsersIntent = {\n  apiOnlyUsers: object[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Result Type in TypeScript\nDESCRIPTION: TypeScript interface definition for the result of an email recovery operation. Contains the recovered user's ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1InitUserEmailRecoveryResult = {\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Invitation with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampDeleteInvitation` function takes an input of type `TDeleteInvitationBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is used to delete an invitation sent through the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampDeleteInvitation(input: TDeleteInvitationBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining TSignTransactionInput Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for the input structure required to sign a transaction through Turnkey's API, with a mandatory body property of type TSignTransactionBody\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignTransactionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TSignTransactionInput = {\n  body: TSignTransactionBody\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file by copying the example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eip-1193-provider/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Stamping Single Policy Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get a specific policy. Takes a TGetPolicyBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPolicy(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition: TUpdateWalletResponse\nDESCRIPTION: Defines the `TUpdateWalletResponse` type alias. It represents the schema for a successful (200) response from the `PublicApiService_UpdateWallet` operation, which corresponds to a `POST /public/v1/submit/update_wallet` request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TUpdateWalletResponse** = `operations`[`\"PublicApiService_UpdateWallet\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Read-Write Session Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a read-write session. It takes an input of type TCreateReadWriteSessionBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateReadWriteSession(input: TCreateReadWriteSessionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Project Dependencies\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and building the project using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/oauth/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/oauth/\n```\n\n----------------------------------------\n\nTITLE: Defining TEmailAuthInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TEmailAuthInput type as an object in TypeScript, detailing its associated properties. It specifically includes a body property of type TEmailAuthBody. The snippet is essential for ensuring that email authentication inputs conform to a specified structure, improving code reliability when handling such data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TEmailAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"// Type Alias: TEmailAuthInput\\n> **TEmailAuthInput** = `object`\\n\\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:575](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L575)\\n\\n## Properties\\n\\n### body\\n> **body**: [`TEmailAuthBody`](TEmailAuthBody.mdx)\\n\\nDefined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:575](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L575)\"\n```\n\n----------------------------------------\n\nTITLE: List Private Key Tags\nDESCRIPTION: Retrieves a list of private key tags based on the provided input parameters. Returns a Promise containing an array of privateKeyTags objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nlistPrivateKeyTags(input): Promise<{ privateKeyTags: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TInitUserEmailRecoveryBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the `TInitUserEmailRecoveryBody` type alias. It specifies the structure of the request body for the `PublicApiService_InitUserEmailRecovery` operation, referencing the generated types from the OpenAPI specification. The type alias is defined within the `@turnkey/http` package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitUserEmailRecoveryBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TInitUserEmailRecoveryBody\n *\n * > **TInitUserEmailRecoveryBody** = `operations`[`\"PublicApiService_InitUserEmailRecovery\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:3062](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L3062)\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that references the response schema for the 'CreateApiKeys' endpoint in the PublicApiService. This type represents the successful response (200) from the POST request to '/public/v1/submit/create_api_keys'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateApiKeysResponse** = `operations`[`\"PublicApiService_CreateApiKeys\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletAccountResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletAccountResponse {\n  account: definitions[\"v1WalletAccount\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyInput Type Alias in TypeScript\nDESCRIPTION: The TUpdatePolicyInput type alias is defined as an object type used in HTTP POST requests to update policies through the public API. It includes a 'body' property of type TUpdatePolicyBody, which delineates the expected content structure of the update payload. The implementation is located in the public_api.fetcher.ts file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdatePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTUpdatePolicyInput = object; // Definition of the type alias as an object\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Statuses in TypeScript\nDESCRIPTION: Enumerates possible activity types and statuses for the Coordinator API. This includes various operations like creating API keys, users, policies, and performing authentication actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype status = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype type = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining Intent for Signing Transactions\nDESCRIPTION: This snippet outlines the structure for signing transactions in the SDK, indicating the type of transaction (e.g., Ethereum or Solana) along with the required private key and unsigned transaction details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteSubOrganization.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Account Request Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export wallet account request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportWalletAccountRequest\n\n> **v1ExportWalletAccountRequest**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1601](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1601)\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1ExportWalletAccountIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"`\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Intent\nDESCRIPTION: This snippet outlines the parameters for setting up email authentication, including options for customization and settings for expiration and sender information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent? \\n\\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.apiKeyName? \\n`string` \\n\\n**Description** \\nOptional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.email \\n`string` \\n\\n**Description** \\nEmail of the authenticating user.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.emailCustomization? \\n\\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\} \\n\\n**Description** \\nOptional parameters for customizing emails. If not provided, the default email will be used.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.emailCustomization.appName? \\n`string` \\n\\n**Description** \\nThe name of the application.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.emailCustomization.logoUrl? \\n`string` \\n\\n**Description** \\nA URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.emailCustomization.magicLinkTemplate? \\n`string` \\n\\n**Description** \\nA template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.emailCustomization.templateId? \\n`string` \\n\\n**Description** \\nUnique identifier for a given Email Template. If not specified, the default is the most recent Email Template.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.emailCustomization.templateVariables? \\n`string` \\n\\n**Description** \\nJSON object containing key/value pairs to be used with custom templates.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.expirationSeconds? \\n`string` \\n\\n**Description** \\nExpiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.invalidateExisting? \\n`boolean` \\n\\n**Description** \\nInvalidate all other previously generated Email Auth API keys.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.sendFromEmailAddress? \\n`string` \\n\\n**Description** \\nOptional custom email address from which to send the email.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.sendFromEmailSenderName? \\n`string` \\n\\n**Description** \\nOptional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.emailAuthIntent.targetPublicKey \\n`string` \\n\\n**Description** \\nClient-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.\n```\n\n----------------------------------------\n\nTITLE: Defining Turnkey Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines TypeScript type interfaces and string literal union types for Turnkey SDK activities. It includes result structures for operations like creating API keys, signing transactions, and managing users, as well as activity status and type enumerations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteOauthProviders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n`s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Blockchain SDK\nDESCRIPTION: This code snippet defines a large set of TypeScript interfaces and types for various operations in a blockchain SDK. It includes definitions for intents (input operations) and results (output data) for functions like creating wallets, managing users, setting policies, and signing transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/oauth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  // ... (previous code)\n  \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"][]; \n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n  encryptedBundle: string;\n  privateKeyName: string;\n  userId: string;\n};\nimportWalletIntent: {\n  accounts: object[];\n  encryptedBundle: string;\n  userId: string;\n  walletName: string;\n};\ninitImportPrivateKeyIntent: {\n  userId: string;\n};\n// ... (more intent definitions)\nsignTransactionIntentV2: {\n  signWith: string;\n  type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\";\n  unsignedTransaction: string;\n};\n// ... (result definitions)\ncreateReadWriteSessionResultV2: {\n  apiKeyId: string;\n  credentialBundle: string;\n  organizationId: string;\n  organizationName: string;\n  userId: string;\n  username: string;\n};\n// ... (more result definitions)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateOrganizationIntent Type - TypeScript\nDESCRIPTION: Defines the structure for the intent to create a new organization, including necessary fields such as organization name and root user details. This type ensures that all requisite information is provided when creating an organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOrganizationIntent {\n  organizationName: string;\n  rootAuthenticator: definitions[\"v1AuthenticatorParams\"];\n  rootEmail: string;\n  rootUserId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Organization Feature Intent Type Definition\nDESCRIPTION: Type definitions for adding and removing organization features, including supported feature names and values.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n{ name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; }\n```\n\n----------------------------------------\n\nTITLE: Define v1AuthenticatorParamsV2 Type\nDESCRIPTION: Defines the structure for the v1AuthenticatorParamsV2 object, which includes properties for attestation, authenticatorName, and challenge.  This structure is likely used when creating or updating authenticators via the Coordinator API. The type definition is located in a generated file within the tkhq/sdk project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1AuthenticatorParamsV2\n * @property {definitions[\"v1Attestation\"]} attestation The attestation that proves custody of the authenticator and provides metadata about it.\n * @property {string} authenticatorName Human-readable name for an Authenticator.\n * @property {string} challenge Challenge presented for authentication purposes.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Create Organization Result Structure - TypeScript\nDESCRIPTION: This snippet defines the result structure for creating an organization, capturing the new organizationId returned upon the successful creation of an organization in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreateOrganizationResult: { organizationId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePolicyInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePolicyInput type alias as an object with a single property 'body' of type TCreatePolicyBody. It is used for the request body when creating a new policy via the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePolicyInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Email Authentication Intent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an email authentication intent, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1EmailAuthIntentV2\n\n> **v1EmailAuthIntentV2**: `object`\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1EmailAuthIntentV2\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"`\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Project Dependencies\nDESCRIPTION: Commands for cloning the repository, installing dependencies with pnpm, and building the project\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-cosmjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-cosmjs/\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Parameters - V1\nDESCRIPTION: This snippet defines the parameters required for initializing OTP authentication through email or SMS. It includes customizable options for the email sender and SMS template, along with identifiers for user rates. Dependent on user-initialized variables for customization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appName\": \"string\",\n  \"logoUrl\": \"string\",\n  \"magicLinkTemplate\": \"string\",\n  \"templateId\": \"string\",\n  \"templateVariables\": \"string\",\n  \"otpType\": \"string\",\n  \"sendFromEmailAddress\": \"string\",\n  \"sendFromEmailSenderName\": \"string\",\n  \"smsCustomization\": {\n    \"template\": \"string\"\n  },\n  \"userIdentifier\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Intent Interface in TypeScript\nDESCRIPTION: This snippet defines the v1SignRawPayloadIntent interface, which includes properties for encoding, hash function, payload, and private key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1SignRawPayloadIntent {\n  encoding: definitions[\"v1PayloadEncoding\"];\n  hashFunction: definitions[\"v1HashFunction\"];\n  payload: string;\n  privateKeyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remove Organization Feature Result Structure in TypeScript\nDESCRIPTION: This snippet defines the result structure for removing organization features with an array of 'features' of type object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `features`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Constructor Initialization with TurnkeyApiClient in TypeScript\nDESCRIPTION: The constructor initializes a new instance of the TurnkeyApiClient using the provided configuration. It requires a parameter 'config' of type TurnkeySDKClientConfig and returns an instance of TurnkeyApiClient. This constructor overrides the one in TurnkeyServerClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **new TurnkeyApiClient**(`config`): `TurnkeyApiClient`\n\nDefined in: [packages/sdk-server/src/sdk-client.ts:133](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/sdk-client.ts#L133)\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Management Request/Response Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for listing user tags and private key tags, including request parameters and response structures for organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ListPrivateKeyTagsRequest\n\n> **v1ListPrivateKeyTagsRequest**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2029\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n***\n\n### v1ListPrivateKeyTagsResponse\n\n> **v1ListPrivateKeyTagsResponse**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2033\n\n#### privateKeyTags\n\n> **privateKeyTags**: `definitions`[`\"datav1Tag\"`][]\n\n##### Description\n\nA list of Private Key Tags\n\n***\n\n### v1ListUserTagsRequest\n\n> **v1ListUserTagsRequest**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2037\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n***\n\n### v1ListUserTagsResponse\n\n> **v1ListUserTagsResponse**: `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:2041\n\n#### userTags\n\n> **userTags**: `definitions`[`\"datav1Tag\"`][]\n\n##### Description\n\nA list of User Tags\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Intent in TypeScript\nDESCRIPTION: The `updateWalletIntent` interface includes the properties needed to update a wallet's details, specifically the wallet ID and name. This functionality is key for wallet management tasks where wallets must be modified.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ `updateWalletIntent`: { `walletId`: `string`; `walletName`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining Property body of TGetWalletInput in TypeScript\nDESCRIPTION: This snippet outlines the property `body` of the type alias `TGetWalletInput`, which is of type `TGetWalletBody`. This structure is crucial for defining the specific body format required when interacting with wallet-related API endpoints, ensuring that the data passed conforms to the expected structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TGetWalletBody;\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeyTagsIntent Structure in TypeScript\nDESCRIPTION: Defines the intent structure for deleting private key tags, which includes a list of private key tag IDs to be deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePrivateKeyTagsIntent {\n    privateKeyTagIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure - TypeScript\nDESCRIPTION: This code snippet defines the structure for the import wallet intent, which holds the information necessary for users to import their wallet. It includes accounts, encrypted bundle, user ID, and wallet name as key parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n`importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response\nDESCRIPTION: This snippet defines a type alias called TSignRawPayloadResponse, which represents the structure of the response returned from the API endpoint for signing raw payloads. This type alias will ensure that the responses conform to the expected schema, enhancing type safety across the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TSignRawPayloadResponse** = `operations\\[`\\\"PublicApiService_SignRawPayload\\\"\\]\\[`responses`\\]\\[`200`\\]\\[`schema`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsResponse Type Alias in TypeScript\nDESCRIPTION: Defines the TCreateWalletAccountsResponse type alias as the schema for the 200 response from the PublicApiService_CreateWalletAccounts operation. This type represents the structure of the response when successfully creating wallet accounts via the POST /public/v1/submit/create_wallet_accounts endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateWalletAccountsResponse** = `operations`[`\"PublicApiService_CreateWalletAccounts\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Public API Private Keys Response Type\nDESCRIPTION: Type alias that represents the response schema for retrieving private keys from the Turnkey Public API service. Maps to the 200 status code response for the GetPrivateKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetPrivateKeysResponse = operations[\"PublicApiService_GetPrivateKeys\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Results Structure - TypeScript\nDESCRIPTION: The `removeOrganizationFeatureResult` and `setOrganizationFeatureResult` interfaces are focused on the results of modifying organization features, which consist of an array of feature objects. They ensure that modifications to organization features are clearly defined with appropriate type safety.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Result Types\nDESCRIPTION: This code snippet defines various TypeScript type aliases that represent the structure of different API call results. Each type alias specifies the shape of the data returned by a specific API operation, such as initializing OTP authentication, creating users, signing payloads, and updating policies. These types are crucial for ensuring type safety and data consistency when working with the TKHQ SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeyTags.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\n}; `initOtpAuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; \n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Statuses\nDESCRIPTION: Defines the possible values for `status` and `type` properties within the Coordinator Public API. These values represent different states of an activity and specific actions that can be performed. They are used to track the progress and type of operations within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines an extensive object structure that includes various activity types, their possible statuses, and result structures for different operations. It covers a wide range of functionalities including user management, authentication, policy creation, wallet operations, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Result Structures - TypeScript\nDESCRIPTION: Defines the structures for signing raw payloads and raw payloads results which include fields such as r, s, and v, represented as strings. Essential for handling cryptographic operations in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Blockchain SDK Operations\nDESCRIPTION: This code snippet defines numerous TypeScript interfaces for various blockchain SDK operations, including wallet management, user authentication, and organization settings. It covers intents and results for actions like creating API keys, managing users, handling policies, and interacting with blockchain wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; privateKeyName: string; userId: string; };\n  importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n  initImportPrivateKeyIntent: { userId: string; };\n  initImportWalletIntent: { userId: string; };\n  initOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n  initOtpAuthIntentV2: { alphanumeric: boolean; contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpLength: number; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n  initUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n  oauthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; oidcToken: string; targetPublicKey: string; };\n  otpAuthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; otpCode: string; otpId: string; targetPublicKey: string; };\n  recoverUserIntent: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; userId: string; };\n  rejectActivityIntent: { fingerprint: string; };\n  removeOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; };\n  setOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; };\n  setPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n  setPaymentMethodIntentV2: { cardHolderEmail: string; cardHolderName: string; paymentMethodId: string; };\n  signRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; };\n  signRawPayloadIntentV2: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; signWith: string; };\n  signRawPayloadsIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payloads: string[]; signWith: string; };\n  signTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n  signTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n  updateAllowedOriginsIntent: { allowedOrigins: string[]; };\n  updatePolicyIntent: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; };\n  updatePolicyIntentV2: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; };\n  updatePrivateKeyTagIntent: { addPrivateKeyIds: string[]; newPrivateKeyTagName: string; privateKeyTagId: string; removePrivateKeyIds: string[]; };\n  updateRootQuorumIntent: { threshold: number; userIds: string[]; };\n  updateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n  updateUserTagIntent: { addUserIds: string[]; newUserTagName: string; removeUserIds: string[]; userTagId: string; };\n  updateWalletIntent: { walletId: string; walletName: string; };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing IframeStamper Package\nDESCRIPTION: Commands for installing the @turnkey/iframe-stamper package using different package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/iframe-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/iframe-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/iframe-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivityInput Type in TypeScript\nDESCRIPTION: Defines the TGetActivityInput type as an object with a single property 'body' of type TGetActivityBody. This type is used for requests to the 'GET /public/v1/query/get_activity' endpoint in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TGetActivityInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Key Retrieval\nDESCRIPTION: Defines a type alias 'TGetApiKeysBody' that utilizes the 'Omit' utility type to exclude 'organizationId' from the request body parameters of the 'PublicApiService_GetApiKeys' operation. This alias is then combined with additional query override parameters, facilitating API request customization and execution in the SDK server. The type is a vital component in handling API requests structured around the retrieval of API keys within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetApiKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **TGetApiKeysBody** = `Omit`\\<`operations`\\[`\\\"PublicApiService_GetApiKeys\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\], `\\\"organizationId\\\"`\\> & `queryOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: SDK Activity Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for SDK activities including email recovery, OAuth, OTP authentication, organization features, payment methods, transaction signing and other operations. Includes status enums and result interfaces.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUserTags.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[]; };\n  removeOrganizationFeatureResult: { features: object[]; };\n  setOrganizationFeatureResult: { features: object[]; };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n  signRawPayloadResult: { r: string; s: string; v: string; };\n  signRawPayloadsResult: { signatures: object[]; };\n  signTransactionResult: { signedTransaction: string; };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string; };\n  updatePolicyResultV2: { policyId: string; };\n  updatePrivateKeyTagResult: { privateKeyTagId: string; };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string; };\n  updateUserTagResult: { userTagId: string; };\n  updateWalletResult: { walletId: string; };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Response Structure in TypeScript\nDESCRIPTION: This snippet provides the TypeScript definition for a Promise object that encapsulates various properties related to activity approvals and user invitations. The object outlines the expected structure for responses from SDK operations related to user activities and authenticator actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\")[]; };\n```\n\n----------------------------------------\n\nTITLE: Stamp Import Wallet with Turnkey SDK\nDESCRIPTION: This function `stampImportWallet` is responsible for creating a signed request to import a wallet using the Turnkey SDK. It accepts `TImportWalletBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampImportWallet**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2015](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2015)\n\n#### Parameters\n\n##### input\n\n`TImportWalletBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Cubist SDK\nDESCRIPTION: This snippet contains a large set of TypeScript interfaces defining the structure of various intents and results used in the Cubist SDK. It includes definitions for operations like creating API keys, managing users, handling wallets, and configuring organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteAuthenticators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; privateKeyName: string; userId: string; }; importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; }; initImportPrivateKeyIntent: { userId: string; }; initImportWalletIntent: { userId: string; }; initOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initOtpAuthIntentV2: { alphanumeric: boolean; contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpLength: number; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; }; oauthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; oidcToken: string; targetPublicKey: string; }; otpAuthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; otpCode: string; otpId: string; targetPublicKey: string; }; recoverUserIntent: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; userId: string; }; rejectActivityIntent: { fingerprint: string; }; removeOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; }; setOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; }; setPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; }; setPaymentMethodIntentV2: { cardHolderEmail: string; cardHolderName: string; paymentMethodId: string; }; signRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; }; signRawPayloadIntentV2: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; signWith: string; }; signRawPayloadsIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payloads: string[]; signWith: string; }; signTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; signTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; updateAllowedOriginsIntent: { allowedOrigins: string[]; }; updatePolicyIntent: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePolicyIntentV2: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePrivateKeyTagIntent: { addPrivateKeyIds: string[]; newPrivateKeyTagName: string; privateKeyTagId: string; removePrivateKeyIds: string[]; }; updateRootQuorumIntent: { threshold: number; userIds: string[]; }; updateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; }; updateUserTagIntent: { addUserIds: string[]; newUserTagName: string; removeUserIds: string[]; userTagId: string; }; updateWalletIntent: { walletId: string; walletName: string; }; }; organizationId: string; result: { acceptInvitationResult: { invitationId: string; userId: string; }; activateBillingTierResult: { productId: string; }; createApiKeysResult: { apiKeyIds: string[]; }; createApiOnlyUsersResult: { userIds: string[]; }; createAuthenticatorsResult: { authenticatorIds: string[]; }; createInvitationsResult: { invitationIds: string[]; }; createOauthProvidersResult: { providerIds: string[]; }; createOrganizationResult: { organizationId: string; }; createPoliciesResult: { policyIds: string[]; }; createPolicyResult: { policyId: string; }; createPrivateKeysResult: { privateKeyIds: string[]; }; createPrivateKeysResultV2: { privateKeys: object[]; }; createPrivateKeyTagResult: { privateKeyIds: string[]; privateKeyTagId: string; }; createReadOnlySessionResult: { organizationId: string; organizationName: string; session: string; sessionExpiry: string; userId: string; username: string; }; createReadWriteSessionResult: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createReadWriteSessionResultV2: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createSubOrganizationResult: { rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV3: { privateKeys: object[]; rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV4: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV5: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV6: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV7: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createUsersResult: { userIds: string[]; }; createUserTagResult: { userIds: string[]; userTagId: string; }; createWalletAccountsResult: { addresses: string[]; }; createWalletResult: { addresses: string[]; walletId: string; }; deleteApiKeysResult: { apiKeyIds: string[]; }; deleteAuthenticatorsResult: { authenticatorIds: string[]; }; deleteInvitationResult: { invitationId: string; }; deleteOauthProvidersResult: { providerIds: string[]; }; deleteOrganizationResult: { organizationId: string; }; deletePaymentMethodResult: { paymentMethodId: string; }; deletePolicyResult: { policyId: string; }; deletePrivateKeysResult: { privateKeyIds: string[]; }; deletePrivateKeyTagsResult: { privateKeyIds: string[]; privateKeyTagIds: string[]; }; deleteSubOrganizationResult: { subOrganizationUuid: string; }; deleteUsersResult: { userIds: string[]; }; deleteUserTagsResult: { userIds: string[]; userTagIds: string[]; }; deleteWalletsResult: { walletIds: string[]; }; disablePrivateKeyResult: { privateKeyId: string; }; emailAuthResult: { apiKeyId: string; userId: string; }; exportPrivateKeyResult: { exportBundle: string; privateKeyId: string; }; exportWalletAccountResult: { address: string; exportBundle: string; }; exportWalletResult: { exportBundle: string; walletId: string; }; importPrivateKeyResult: { addresses: object[]; privateKeyId: string; }; importWalletResult: { addresses: string[]; walletId: string; }; initImportPrivateKeyResult: { importBundle: string; }; initImportWalletResult: { importBundle: string; }; initOtpAuthResult: { otpId: string; }; initOtpAuthResultV2: { otpId: string; }; initUserEmailRecoveryResult: { userId: string; }; oauthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; recoverUserResult: { authenticatorId: string[]; }; removeOrganizationFeatureResult: { features: object[]; }; setOrganizationFeatureResult: { features: object[]; }; setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: str\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntentV2 - JSON Object\nDESCRIPTION: This JSON object variant specifies the parameters for creating a sub-organization, focusing on root quorum thresholds and the list of root users. It's crucial for controlling organizational governance through voting thresholds.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Returning Promise with Activity Details - TypeScript\nDESCRIPTION: This code snippet defines a TypeScript Promise that returns an object containing activity details such as approval status, creation timestamps, and various user and invitation IDs. It also includes various intents that can be performed relating to API key creation, organization management, user authentications, and policy handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeyTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string;\n```\n\n----------------------------------------\n\nTITLE: Specifying TGetAuthenticatorInput Properties in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TGetAuthenticatorInput type alias. It has a single property 'body' of type TGetAuthenticatorBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TGetAuthenticatorBody\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationConfigsBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetOrganizationConfigsBody type alias. It represents the body parameters for the PublicApiService_GetOrganizationConfigs operation in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationConfigsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetOrganizationConfigsBody = operations[\"PublicApiService_GetOrganizationConfigs\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Returning a Promise Object Specification in TypeScript\nDESCRIPTION: This TypeScript snippet defines a Promise return object containing structured information about various intents and activities such as creating organizations, managing API keys, user authentications, and more. Dependencies include a TypeScript-compatible environment. Inputs are intents with structured data, while outputs conform to the described object structure, allowing application integrations to handle actions and transitions effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\\\"cross-platform\\\"` | `\\\"platform\\\"` | `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` | `\\\"platform\\\"` | `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: `\\\"public-key\\\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; ... \\}; \\}; \\}`\n```\n\n----------------------------------------\n\nTITLE: Deleting Users Intent\nDESCRIPTION: This snippet creates the structure necessary for deleting user accounts based on their unique identifiers, which is essential for user lifecycle management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteUsersIntent? \\n\\{ `userIds`: `string`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteUsersIntent.userIds \\n`string`[] \\n\\n**Description** \\nA list of User IDs.\n```\n\n----------------------------------------\n\nTITLE: Defining Properties of TDeletePrivateKeyTagsInput in TypeScript\nDESCRIPTION: Definition of the body property of the TDeletePrivateKeyTagsInput type, which is of type TDeletePrivateKeyTagsBody. This property contains the main payload for the request to delete private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n**body**: [`TDeletePrivateKeyTagsBody`](TDeletePrivateKeyTagsBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Activities Request Body - TypeScript\nDESCRIPTION: This snippet defines a type alias named 'TGetActivitiesBody', which represents the expected structure of the request body when making a POST request to the 'PublicApiService_GetActivities' endpoint. It is used to enforce type safety and ensure the correct data format is adhered to when sending requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TGetActivitiesBody** = `operations`\\[`\\\"PublicApiService_GetActivities\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Invitation Deletion Result Structure\nDESCRIPTION: This snippet outlines the 'deleteInvitationResult' structure, which encapsulates the unique invitation ID for a deleted invitation formatted as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_76\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteInvitationResult?\n\\{ `invitationId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Auth Result Structure in TypeScript\nDESCRIPTION: Defines the structure for OTP authentication results, including apiKeyId, credentialBundle, and userId as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: TStamper Interface Definition\nDESCRIPTION: Interface definition for the stamper used to create signatures for API request authentication\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/documents/TurnkeyClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TStamper {\n  stamp: (input: string) => Promise<TStamp>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1UpdatePolicyIntentV2 Interface in TypeScript\nDESCRIPTION: Specifies the structure for updating a policy, including policy ID, name, conditions, consensus, effect, and notes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_139\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1UpdatePolicyIntentV2: object {\n  policyCondition?: string;\n  policyConsensus?: string;\n  policyEffect?: definitions[\"v1Effect\"];\n  policyId: string;\n  policyName?: string;\n  policyNotes?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWhoamiInput Type Alias\nDESCRIPTION: Type alias for a TypeScript object representing the input structure for a Whoami API request, containing a body property of type TGetWhoamiBody\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetWhoamiInput = {\n  body: TGetWhoamiBody\n}\n```\n\n----------------------------------------\n\nTITLE: TGetActivitiesInput Properties Definition\nDESCRIPTION: Property definition for the body field within the TGetActivitiesInput type, which must be of type TGetActivitiesBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetActivitiesBody\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Intent Parameters\nDESCRIPTION: This snippet outlines the configuration settings for generating OAuth API keys, including optional identification names, expiration settings, and whether to invalidate existing keys. This is vital for managing secure API access and credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKeyName\": \"string\",\n  \"expirationSeconds\": \"string\",\n  \"invalidateExisting\": \"boolean\",\n  \"oidcToken\": \"string\",\n  \"targetPublicKey\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Promise Return Type for SDK Activity\nDESCRIPTION: Defines a Promise return type with comprehensive activity and intent details, including nested objects for various SDK operations and authentication intents\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; ... } }>\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication in Browser SDK\nDESCRIPTION: Performs OAuth authentication with provided input parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\noauth(input: TOauthBody): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: TCreatePoliciesBody Type Alias Definition\nDESCRIPTION: Defines the `TCreatePoliciesBody` type alias. This type represents the structure of the request body for the `PublicApiService_CreatePolicies` operation. It is a TypeScript type alias, defined in a generated TypeScript file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePoliciesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TCreatePoliciesBody** = `operations`\\[`\"PublicApiService_CreatePolicies\"`]\\[`\"parameters\"`]\\[`\"body\"`]\\[`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Installing ApiKeyStamper with npm\nDESCRIPTION: Command to install the @turnkey/api-key-stamper package using npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/api-key-stamper\n```\n\n----------------------------------------\n\nTITLE: Setting Signing Key for Telegram Storage\nDESCRIPTION: Configures the signing key for the Telegram cloud storage stamper. Allows optional configuration to customize the storage authentication mechanism.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/classes/TelegramCloudStorageStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetSigningKey(config?: TTelegramCloudStorageStamperConfig): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining iframeUrl Property\nDESCRIPTION: This snippet defines the iframeUrl property of the TIframeStamperConfig type, specifying that it must be a string. This property represents the URL to be loaded within the iframe, which is essential for dynamic content rendering.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TIframeStamperConfig.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\niframeUrl: string;\n```\n\n----------------------------------------\n\nTITLE: Stamp Remove Organization Feature with Turnkey SDK\nDESCRIPTION: This function `stampRemoveOrganizationFeature` is responsible for creating a signed request to remove an organization feature using the Turnkey SDK. It takes a `TRemoveOrganizationFeatureBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampRemoveOrganizationFeature**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2337](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2337)\n\n#### Parameters\n\n##### input\n\n`TRemoveOrganizationFeatureBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreateWalletInput Properties in TypeScript\nDESCRIPTION: Defines the body property of TCreateWalletInput, which is of type TCreateWalletBody. This property contains the necessary information for creating a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateWalletBody\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for API Methods\nDESCRIPTION: Type definitions for various SDK client methods including getActivity, getApiKey, getApiKeys, getAttestationDocument, and getAuthenticator. Includes complex return type definitions with nested objects and enums.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivity(input): Promise<{\n  activity: {\n    activityId: string;\n    status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n    type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | // ... many more types ...\n    updatedAt: {\n      nanos: string;\n      seconds: string;\n    };\n    votes: object[];\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Creating User Management Intents\nDESCRIPTION: This snippet establishes structures for creating users through various intent versions, which allow flexibility in user creation across different SDK versions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUsersIntent? \\n\\{ `users`: `object`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUsersIntent.users \\n`object`[] \\n\\n**Description** \\nA list of Users.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUsersIntentV2? \\n\\{ `users`: `object`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUsersIntentV2.users \\n`object`[] \\n\\n**Description** \\nA list of Users.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUsersIntentV3? \\n\\{ `users`: `object`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createUsersIntentV3.users \\n`object`[] \\n\\n**Description** \\nA list of Users.\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUserResponse Type Alias\nDESCRIPTION: This snippet defines the TGetUserResponse type alias. It represents the response schema for the `PublicApiService_GetUser` operation, specifically the successful (200) response.  It is a type alias for accessing the schema of a specific response from an API operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TGetUserResponse** = `operations`\\[`\"PublicApiService_GetUser\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining TImportWalletInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines the type alias TImportWalletInput as an object type in TypeScript, which includes a property called body that is of type TImportWalletBody. This is essential for structuring the data input for wallet import functionality in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TImportWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TImportWalletInput = {\\n  body: TImportWalletBody;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: Comprehensive type definitions for activity statuses, types and result interfaces covering operations like API key management, user management, authentication, wallet operations, and policy management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTransaction.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: TRejectActivityBody Type Alias Definition\nDESCRIPTION: Defines the TRejectActivityBody type alias, which represents the structure for the request body of the `PublicApiService_RejectActivity` operation.  It is used when making a POST request to the `/public/v1/submit/reject_activity` endpoint to reject an activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRejectActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n> **TRejectActivityBody** = `operations`[`\"PublicApiService_RejectActivity\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePrivateKeyTagIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a private key tag in an organization. This intent allows adding or removing private keys from a tag and updating the tag's name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Deleting User Authentication Factors in Turnkey SDK\nDESCRIPTION: This function removes authentication factors like phone number, email, authenticators, OAuth providers, and API keys from a user. It takes a `DeleteUserAuthParams` object as input and returns a promise that resolves to an array of results from each removal operation. Removal operations are executed in parallel.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteUserAuth**(`params`): `Promise`\\<`any`[]\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:477](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L477)\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Deleting User Tags in TypeScript\nDESCRIPTION: Defines the API endpoint for deleting user tags within an organization. The endpoint uses the POST method with a specific path and accepts input of type TDeleteUserTagsInput.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUserTags.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nDelete User Tags\n\nDelete User Tags within an Organization\n\n`POST /public/v1/submit/delete_user_tags`\n\n## Parameters\n\n### input\n\n[`TDeleteUserTagsInput`](../type-aliases/TDeleteUserTagsInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent in TypeScript\nDESCRIPTION: This snippet defines the structure for an intent related to importing a wallet. It includes properties to hold the user's ID, the name of the wallet, and the encrypted bundle associated with it. The intent ensures proper data structure is adhered to when importing wallets in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Initialize OTP Authentication Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for initializing one-time password (OTP) based authentication. Includes contact information, customization options for email and SMS, and user identification parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n{ `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserInput Type Alias\nDESCRIPTION: Type definition for a user update request payload, containing a body property of type TUpdateUserBody. Used for submitting user updates via the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateUserInput = {\n  body: TUpdateUserBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining type for authenticatorData field\nDESCRIPTION: This snippet defines the type for the `authenticatorData` field within `v1WebAuthnStamp`, which is a `string`. It's a base64 encoded payload containing metadata about the authenticator used in WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\n> **authenticatorData**: `string`\n```\n\n----------------------------------------\n\nTITLE: Specifying TListPrivateKeyTagsInput Properties in TypeScript\nDESCRIPTION: Defines the body property of TListPrivateKeyTagsInput, which is of type TListPrivateKeyTagsBody. This structure is used to input data for listing private key tags in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListPrivateKeyTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TListPrivateKeyTagsBody\n```\n\n----------------------------------------\n\nTITLE: Defining id property in PublicKeyCredentialDescriptor\nDESCRIPTION: This snippet defines the 'id' property of the PublicKeyCredentialDescriptor interface as a string. It is a required property that uniquely identifies the credential.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/interfaces/PublicKeyCredentialDescriptor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: react-native-passkey-stamper/src/index.ts:17\n\n// id property\nid: string\n```\n\n----------------------------------------\n\nTITLE: Defining User Tags Deletion Result Structure\nDESCRIPTION: This snippet defines 'deleteUserTagsResult', outlining a structure that includes lists of User IDs and User Tag IDs for the tags that were deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_85\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteUserTagsResult?\n\\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Default SEI Accounts Constant in JavaScript\nDESCRIPTION: This snippet defines a constant, DEFAULT_SEI_ACCOUNTS, which is an array of WalletAccount objects. It is utilized in the Turnkey SDK Browser and is critical for managing wallet accounts in the SDK. The snippet relies on the WalletAccount interface defined elsewhere in the project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_SEI_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst DEFAULT_SEI_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Transaction Signing Intent Type Definition\nDESCRIPTION: Type definitions for transaction signing intents supporting Ethereum and Solana transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n{ privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePoliciesIntent Object in TypeScript\nDESCRIPTION: Defines the intent structure for creating multiple policies, which is essential for specifying the policy definitions needed during the creation process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1CreatePoliciesIntent\": {\\n    \"policies\": definitions[\\\"v1CreatePolicyIntentV3\\\"],\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePolicyInput Type Alias in TypeScript\nDESCRIPTION: Defines the TCreatePolicyInput type alias as an object with a body property of type TCreatePolicyBody. This type is used for creating policies in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreatePolicyInput = object\n```\n\n----------------------------------------\n\nTITLE: Activity Approval Request Definition\nDESCRIPTION: TypeScript interface for activity approval requests containing organization ID, parameters and timestamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1ApproveActivityRequest {\n  organizationId: string;\n  parameters: definitions[\"v1ApproveActivityIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_APPROVE_ACTIVITY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWhoamiBody Type Alias - TypeScript\nDESCRIPTION: This code snippet defines a type alias 'TGetWhoamiBody' for the request body structure expected by the 'PublicApiService_GetWhoami' operation. It serves to ensure type safety when constructing the body of requests for this API endpoint. The alias references a nested structure within operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetWhoamiBody = operations[`\\\"PublicApiService_GetWhoami\\\"]`[`\\\"parameters\\\"]`[`\\\"body\\\"]`[`\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enums in TypeScript\nDESCRIPTION: Defines various statuses that an activity can have within the system, ranging from creation to failure states. These statuses are used to track the progress and outcome of a given activity, helping in audit and process management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signature Result Structure - TypeScript\nDESCRIPTION: This snippet outlines the structure for signing raw payloads, which includes r, s, and v parameters as strings. It is important for cryptographic operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1ActivityResponse Type\nDESCRIPTION: Defines the structure for the `v1ActivityResponse` object, which encapsulates a `v1Activity` object. This is likely used as the response type for API calls related to activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ActivityResponse**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:475](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L475)\n\n#### activity\n\n> **activity**: `definitions`[`\"v1Activity\"`]\n\n##### Description\n\nAn action that can that can be taken within the Turnkey infrastructure.\n```\n\n----------------------------------------\n\nTITLE: Importing Telegram Cloud Storage Stamper (Pre v2.0.0)\nDESCRIPTION: Shows the package import syntax for versions prior to 2.0.0, using default export alongside named exports.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinRegtestP2WPKHAccountAtIndex Function in Typescript\nDESCRIPTION: This function creates a Bitcoin regtest P2WPKH wallet account at a specified path index. It takes a numeric path index as input and returns a WalletAccount object. The function is defined in the turnkey-helpers.ts file of the sdk-browser package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinRegtestP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultBitcoinRegtestP2WPKHAccountAtIndex(pathIndex): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enums in TypeScript\nDESCRIPTION: Enumerates all possible activity types that users can perform within the Turnkey environment. Activity types include user management, transaction signing, and organization maintenance, facilitating role-based access control and activity tracking.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Turnkey SDK\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and building the project using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-federated-passkeys/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-federated-passkeys/\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the version update to 1.0.4 and lists the dependency updates for @turnkey/http and @turnkey/crypto packages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.4\n\n### Patch Changes\n\n- Updated dependencies [d1083bd]\n- Updated dependencies [f94d36e]\n  - @turnkey/http@3.0.0\n  - @turnkey/crypto@2.3.1\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript SDK\nDESCRIPTION: This TypeScript code defines a type alias 'TGetUsersBody' for use in an SDK. It omits the 'organizationId' from the 'PublicApiService_GetUsers' operation parameters and combines it with additional query override parameters. The type alias is important for managing user data queries in a structured manner.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **TGetUsersBody** = `Omit`<`operations`[`\"PublicApiService_GetUsers\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`> & `queryOverrideParams`\n```\n\n----------------------------------------\n\nTITLE: Defining the nOOPCodegenAnchor Function\nDESCRIPTION: This function sends a POST request to the Turnkey API endpoint to retrieve anchor data, which includes various credentials. It returns a Promise containing a structured object with the anchor information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/nOOPCodegenAnchor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction nOOPCodegenAnchor(): Promise<{ stamp: { authenticatorData: string; clientDataJson: string; credentialId: string; signature: string; }; }> {\n    // Implementation of the function\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines a complex TypeScript type that includes various activity results, status enumerations, and activity types. It covers a wide range of operations from user management to authentication and authorization processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntentV7 - JSON Object\nDESCRIPTION: The latest version expands on disabling features by including options for OTP email and SMS authentication. It complements existing email and wallet settings to provide comprehensive customization of sub-organization security measures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Signing CreatePrivateKeyTag Request in TypeScript\nDESCRIPTION: The function signCreatePrivateKeyTag is designed to request a WebAuthn assertion and generate a signed CreatePrivateKeyTag request that can be posted to Turnkey. It takes an input of type TCreatePrivateKeyTagInput and optional options of type TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest object, which is ready for submission to Turnkey. Ensure WebAuthn support on client environments is enabled for proper functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreatePrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **signCreatePrivateKeyTag**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUsersRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get all users for an organization. It requires the organizationId as a string property.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetUsersRequest: object\n{\n  organizationId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize User Email Recovery Request in TypeScript\nDESCRIPTION: Method to stamp a request for initializing user email recovery. It takes an input of type TInitUserEmailRecoveryBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitUserEmailRecovery(input: TInitUserEmailRecoveryBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Account Defaults in TypeScript\nDESCRIPTION: This snippet defines a constant named DEFAULT_TON_V4R2_ACCOUNTS as an array of WalletAccount objects. This is used to provide default configurations for wallet accounts. The WalletAccount interface must be imported from the specified module. The variable is meant for internal use within the Turnkey SDK server components and is defined in turnkey-helpers.ts file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_TON_V4R2_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_TON_V4R2_ACCOUNTS: WalletAccount[];\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Setting Result Structure in TypeScript\nDESCRIPTION: This snippet specifies the structure for the result of setting a payment method, requiring the card holder's email, name, and the last four digits of the card number, which are used for transaction confirmations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Deletion Result - TypeScript\nDESCRIPTION: Defines the output returned after successfully deleting an organization, which includes the organization ID of the deleted entity. This is crucial for validation that the operation has completed successfully.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteOrganizationResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1231\n */\nexport interface v1DeleteOrganizationResult {\n  organizationId: string; // Unique identifier for a given Organization.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey User Recovery Method\nDESCRIPTION: Method for recovering a user account with specified input parameters. Returns a signed request or undefined. Part of the Turnkey browser client SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nstampRecoverUser(input: TRecoverUserBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Private Key Tag Response in TypeScript\nDESCRIPTION: This snippet defines a type alias `TCreatePrivateKeyTagResponse` that represents the structure of the response from the Public API when creating a private key tag. It combines elements from existing schema definitions to create a comprehensive type that will help ensure type safety within the SDK. This alias is useful for developers interacting with the API as it clarifies the expected response shape.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePrivateKeyTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TCreatePrivateKeyTagResponse\" = `operations`[`\"PublicApiService_CreatePrivateKeyTag\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"createPrivateKeyTagResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript SDK\nDESCRIPTION: This snippet defines a type alias, TInitOtpAuthBody, used in the Turnkey SDK related to OTP authentication initialization. It is derived from parameters in PublicApiService and involves a POST request to initialize OTP authentication. Requires understanding of the SDK structure, specifically the operations in 'public_api.fetcher.d.ts'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitOtpAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TInitOtpAuthBody = operations[\\\"PublicApiService_InitOtpAuth\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure - TypeScript\nDESCRIPTION: Defines the structure for results related to payment methods, which includes properties for card holder's email, name, and the last four digits of the card.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOauthProvidersBody Type Alias in TypeScript\nDESCRIPTION: Defines the TGetOauthProvidersBody type alias as the request body for the PublicApiService_GetOauthProviders operation. This type is used for the POST request to /public/v1/query/get_oauth_providers endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetOauthProvidersBody = operations[\"PublicApiService_GetOauthProviders\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TActivityResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TActivityResponse type alias by referencing the 'v1ActivityResponse' type from the TurnkeyApiTypes collection. This type is used for handling activity responses in the Turnkey HTTP package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TActivityResponse** = [`TurnkeyApiTypes`](TurnkeyApiTypes.mdx)[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletsRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get multiple wallets, including organizationId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletsRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TOtpAuthInput Type Alias\nDESCRIPTION: This code snippet defines the `TOtpAuthInput` type alias as an object containing a `body` property of type `TOtpAuthBody`. This input is used when submitting OTP authentication via a POST request to `/public/v1/submit/otp_auth`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TOtpAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\n\n/**\n * Type that represents the type of the input of submitOtpAuth\n *\n * Input of `POST /public/v1/submit/otp_auth`\n */\nexport type TSubmitOtpAuthInput = {\n  body: TSubmitOtpAuthBody;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Key Export Bundle with TurnkeyIframeClient\nDESCRIPTION: Shows how to inject a key export bundle into an iframe with optional key format specification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects a key export bundle with an optional key format\nconst success = await iframeClient.injectKeyExportBundle(\n  \"key-bundle\",\n  \"org-id\",\n  \"PEM\",\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOauthProvidersInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters required when making a POST request to /public/v1/query/get_oauth_providers endpoint. Contains a body property of type TGetOauthProvidersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetOauthProvidersInput = object\n```\n\n----------------------------------------\n\nTITLE: Disabling Private Key Intent\nDESCRIPTION: This snippet specifies the parameters required to disable a private key by its unique identifier, which is critical for managing cryptographic security.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nintent.disablePrivateKeyIntent? \\n\\{ `privateKeyId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.disablePrivateKeyIntent.privateKeyId \\n`string` \\n\\n**Description** \\nUnique identifier for a given Private Key.\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Result Structures - TypeScript\nDESCRIPTION: Defines structures for managing organization features including removing or setting features, both represented by arrays of objects detailing features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: TStamper Interface Definition in JavaScript\nDESCRIPTION: Interface definition for the TStamper, which ApiKeyStamper implements. It defines a stamp method that takes a string input and returns a Promise resolving to a TStamp object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/documents/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ninterface TStamper {\n  stamp: (input: string) => Promise<TStamp>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeyRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting a private key, requiring organization and private key IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPrivateKeyRequest {\n  organizationId: string;\n  privateKeyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Tag Update Result Structure in TypeScript\nDESCRIPTION: This snippet establishes the structure for the result of updating a private key tag, which includes a private key tag ID as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum in TypeScript\nDESCRIPTION: Defines the activity status enumeration including various states (created, pending, completed, etc.).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus`: \\\"ACTIVITY_STATUS_CREATED\\\" \\| \\\"ACTIVITY_STATUS_PENDING\\\" \\| \\\"ACTIVITY_STATUS_COMPLETED\\\" \\| \\\"ACTIVITY_STATUS_FAILED\\\" \\| \\\"ACTIVITY_STATUS_CONSENSUS_NEEDED\\\" \\| \\\"ACTIVITY_STATUS_REJECTED\\\";\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Read-Write Session Request in TypeScript\nDESCRIPTION: This method stamps a request to create a read-write session. It takes a TCreateReadWriteSessionBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateReadWriteSession(input: TCreateReadWriteSessionBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatedAt Structure in TypeScript\nDESCRIPTION: Defines a structure for updatedAt including seconds and nanos as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags with POST Request\nDESCRIPTION: This snippet documents the process of deleting private key tags within an organization using a POST request to the `/public/v1/submit/delete_private_key_tags` endpoint. It requires a `TDeletePrivateKeyTagsInput` parameter as input. The request deletes the specified private key tags from the organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeyTags.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`POST /public/v1/submit/delete_private_key_tags`\n\n## Parameters\n\n### input\n\n[`TDeletePrivateKeyTagsInput`](../type-aliases/TDeletePrivateKeyTagsInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Get Wallet Account Response in TypeScript\nDESCRIPTION: The TGetWalletAccountResponse type alias is defined to correspond with the schema of the 200 response for the PublicApiService_GetWalletAccount operation. This type alias is automatically generated and defined within the SDK to facilitate type checking and ensure consistency across API interactions. The code snippet shows the reference path to where this alias is defined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetWalletAccountResponse = operations[\\\"PublicApiService_GetWalletAccount\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Invitation Status States in TypeScript\nDESCRIPTION: This snippet defines the possible states of an invitation in the TypeScript type system, allowing developers to handle different stages of invitation workflows with specific constants. There are no direct dependencies, and the key states include CREATED, ACCEPTED, and REVOKED.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"v1InvitationStatus\": \\\"INVITATION_STATUS_CREATED\\\" | \\\"INVITATION_STATUS_ACCEPTED\\\" | \\\"INVITATION_STATUS_REVOKED\\\"\n```\n\n----------------------------------------\n\nTITLE: TCreateApiOnlyUsersBody Type Alias\nDESCRIPTION: Defines the TCreateApiOnlyUsersBody type alias, which represents the structure of the request body for the PublicApiService_CreateApiOnlyUsers operation. This operation is used to create API-only users via a POST request to the /public/v1/submit/create_api_only_users endpoint. The type alias is defined in the specified TypeScript definition file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Type Alias: TCreateApiOnlyUsersBody\n *\n * > **TCreateApiOnlyUsersBody** = `operations`\\[`\\\"PublicApiService_CreateApiOnlyUsers\\\"`\\]\\[`\\\"parameters\\\"`\\]\\[`\\\"body\\\"`\\]\\[`\\\"body\\\"`\\]\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:6804\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\"\n```\n\n----------------------------------------\n\nTITLE: Defining type for credentialId field\nDESCRIPTION: This snippet defines the type for the `credentialId` field within `v1WebAuthnStamp`, which is a `string`. It represents a base64 url encoded unique identifier for a WebAuthn credential.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\n> **credentialId**: `string`\n```\n\n----------------------------------------\n\nTITLE: Get Activities Stamp Methods\nDESCRIPTION: Methods for stamping requests to get activity information, including both single activity and multiple activities queries.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivities(input: TGetActivitiesBody): Promise<undefined | TSignedRequest>\n\nstampGetActivity(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types Enum in TypeScript\nDESCRIPTION: Enumerates various types of activities related to the API, allowing for clear categorization and type-checking in TypeScript applications. The use of enums ensures that only predefined activity types are utilized, enhancing code reliability.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | ... ;\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumInput Type in TypeScript\nDESCRIPTION: TypeScript type alias that defines the structure for the root quorum update request input. Contains a single required property 'body' of type TUpdateRootQuorumBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTUpdateRootQuorumInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAllowedOriginsIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating allowed origins in an organization. This intent specifies additional origins from which requests are allowed besides Turnkey origins.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n{ `allowedOrigins`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Result Structure\nDESCRIPTION: This snippet specifies the 'exportWalletResult', which includes the wallet's export bundle and the unique wallet identifier, both required to be strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_91\n\nLANGUAGE: json\nCODE:\n```\nresult.exportWalletResult?\n\\{ `exportBundle`: `string`; `walletId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Blockchain SDK\nDESCRIPTION: Comprehensive TypeScript type definitions for handling blockchain wallet operations, user management, authentication flows, and transaction signing. Includes interfaces for API responses and request payloads.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n  importWalletIntent: {\n    accounts: object[];\n    encryptedBundle: string;\n    userId: string;\n    walletName: string;\n  };\n  initImportPrivateKeyIntent: {\n    userId: string;\n  };\n  // ... additional type definitions\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Intents\nDESCRIPTION: This snippet defines TypeScript types for various intents, including `acceptInvitationIntent`, `activateBillingTierIntent`, `createApiKeysIntent`, and many others. Each intent type specifies the structure of the data required to perform a specific action, such as accepting an invitation or creating API keys. These intents are structured as object types with specific properties and their corresponding types, including strings, numbers, booleans, and arrays.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"`acceptInvitationIntent`: { `invitationId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `createApiKeysIntent`: { `apiKeyName`: `string`; `expiresInSeconds`: `string`; `invalidateExisting`: `boolean`; }; `createApiOnlyUsersIntent`: { `organizationUserInviteEmail`: `string`; `userDescription`: `string`; `userInviteExpirationSeconds`: `string`; `userName`: `string`; }; `createAuthenticatorsIntent`: { `authenticatorName`: `string`; `challenge`: `string`; `credentialName`: `string`; `userId`: `string`; }; `createInvitationsIntent`: { `organizationUserInviteEmail`: `string`; `organizationUserRole`: `string`; `userDescription`: `string`; `userInviteExpirationSeconds`: `string`; `userName`: `string`; }; `createOauthProvidersIntent`: { `accessTokenExpirationSeconds`: `string`; `name`: `string`; `redirectUris`: `string`[]; `refreshTokenExpirationSeconds`: `string`; }; `createOrganizationIntent`: { `contactEmail`: `string`; `contactName`: `string`; `contactPhoneNumber`: `string`; `organizationDescription`: `string`; `organizationName`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyName`: `string`; `policyNotes`: `string`; }; `createPrivateKeysIntent`: { `keyNames`: `string`[]; `privateKeyCurve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; }; `createPrivateKeysIntentV2`: { `keys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: { `username`: `string`; }; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `username`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `username`: `string`; }; `createSubOrganizationIntent`: { `organizationName`: `string`; `rootUserEmail`: `string`; `rootUserName`: `string`; }; `createSubOrganizationIntentV3`: { `organizationName`: `string`; `rootUserEmail`: `string`; `rootUserName`: `string`; }; `createSubOrganizationIntentV4`: { `organizationName`: `string`; `rootUserEmail`: `string`; `rootUserName`: `string`; }; `createSubOrganizationIntentV5`: { `organizationName`: `string`; `rootUserEmail`: `string`; `rootUserName`: `string`; }; `createSubOrganizationIntentV6`: { `organizationName`: `string`; `rootUserEmail`: `string`; `rootUserName`: `string`; }; `createSubOrganizationIntentV7`: { `organizationName`: `string`; `rootUserEmail`: `string`; `rootUserName`: `string`; }; `createUsersIntent`: { `organizationUserInviteEmail`: `string`; `userDescription`: `string`; `userInviteExpirationSeconds`: `string`; `userName`: `string`; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `addressFormat`: `\"ADDRESS_FORMAT_BIP44\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `privateKeyName`: `string`; `userId`: `string`; }; `createWalletIntent`: { `addressFormat`: (`\"ADDRESS_FORMAT_BIP44\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `userId`: `string`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `subOrganizationUuid`: `string`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `emailAddress`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `walletId`: `string`; `targetPublicKey`: `string`; }; `importPrivateKeyIntent`: { `accounts`: `object`[]; `addressFormat`: (`\"ADDRESS_FORMAT_BIP44\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` | `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` | `\"ADDRESS_FORMAT_SEI\"` | `\"ADDRESS_FORMAT_XLM\"` | `\"ADDRESS_FORMAT_DOGE_MAINNET\"` | `\"ADDRESS_FORMAT_DOGE_TESTNET\"` | `\"ADDRESS_FORMAT_TON_V3R2\"` | `\"ADDRESS_FORMAT_TON_V4R2\"` | `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }; `importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; `initImportPrivateKeyIntent`: { `userId`: `string`; }; `initImportWalletIntent`: { `userId`: `string`; }; `initOtpAuthIntent`: { `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initOtpAuthIntentV2`: { `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: { `template`: `string`; }; `userIdentifier`: `string`; }; `initUserEmailRecoveryIntent`: { `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `oauthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; }; `otpAuthIntent`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; }; `recoverUserIntent`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `userId`: `string`; }; `rejectActivityIntent`: { `fingerprint`: `string`; }; `removeOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; }; `setOrganizationFeatureIntent`: { `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; }; `setPaymentMethodIntent`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; }; `setPaymentMethodIntentV2`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; }; `signRawPayloadIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; }; `signRawPayloadIntentV2`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; }; `signRawPayloadsIntent`: { `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` | `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` | `\"HASH_FUNCTION_SHA256\"` | `\"HASH_FUNCTION_KECCAK256\"` | `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; }; `signTransactionIntent`: { `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; }; `signTransactionIntentV2`: { `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` | `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; }; `updateAllowedOriginsIntent`: { `allowedOrigins`: `string`[]; }; `updatePolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }; `updatePolicyIntentV2`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }; `updatePrivateKeyTagIntent`: { `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; }; `updateRootQuorumIntent`: { `threshold`: `number`; `userIds`: `string`[]; }; `updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }; `updateUserTagIntent`: { `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; }; `updateWalletIntent`: { `walletId`: `string`; `walletName`: `string`; };`\n```\n\n----------------------------------------\n\nTITLE: Running the Example Script\nDESCRIPTION: Command to execute the example script and sample output showing successful transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-viem/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\nFetching Node.js 18.0.0 ...\n\n> @turnkey/example-with-viem@0.0.0 start /Users/rno/tkhq/code/sdk/examples/with-viem\n> pnpm -w run build-all && tsx src/index.ts\n\n\n> @turnkey/oss@ build-all /Users/rno/tkhq/code/sdk\n> tsc --build tsconfig.mono.json\n\nSource address\n        0xDC608F098255C89B36da905D9132A9Ee3DD266D9\n\nTransaction\n        https://sepolia.etherscan.io/tx/0xf21c98e02dc987c1987da06cab7523c0de6cb3a275064c918001907d9adfc11d\n\nTurnkey-powered signature:\n        0x83d002f3b5b0de4f4532c402efdc8544a1986c73207e63e6b743900ac1387125012b39c0918fafb9cde4293480f670c007c84c6c63e149cb0c8ca9409a36ca351b\n\nRecovered address:\n        0xDC608F098255C89B36da905D9132A9Ee3DD266D9\n```\n\n----------------------------------------\n\nTITLE: Organization Management Type Definitions\nDESCRIPTION: Type definitions for organization and sub-organization management intents including authentication settings, root users, and wallet configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateSubOrganizationIntentV7 {\n  disableEmailRecovery?: boolean;\n  disableOtpEmailAuth?: boolean;\n  disableSmsAuth?: boolean;\n  rootQuorumThreshold: number;\n  rootUsers: object[];\n  subOrganizationName: string;\n  wallet?: {\n    accounts: object[];\n    mnemonicLength: number;\n    walletName: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining signUpdatePolicy Function in JavaScript\nDESCRIPTION: This snippet defines the 'signUpdatePolicy' function which takes an input of type 'TUpdatePolicyInput' and optional 'TurnkeyCredentialRequestOptions'. It returns a Promise that resolves to a 'SignedRequest', allowing developers to create a signed update policy request for WebAuthn operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signUpdatePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst signUpdatePolicy = (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Rejecting an Activity in Turnkey SDK (TS)\nDESCRIPTION: This method rejects an activity using the Turnkey SDK. It takes a `TRejectActivityBody` as input and returns a Promise that resolves to a `TRejectActivityResponse` object, representing the result of rejecting the activity. This method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n> **rejectActivity**(`input`): `Promise`\\<[`TRejectActivityResponse`](../namespaces/TurnkeySDKApiTypes/type-aliases/TRejectActivityResponse.mdx)\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2113](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2113)\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for TDeleteUsersInput\nDESCRIPTION: This snippet outlines the properties associated with TDeleteUsersInput, specifically the body property. It links to another type alias, TDeleteUsersBody, establishing a clear contract for the data structure that the API expects in delete user requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TDeleteUsersBody;\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Billing Activation and Payment Method Types in TypeScript\nDESCRIPTION: This snippet defines several billing-related types including activation intents, deletion intents, and payment method settings, facilitating various billing operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"### billingActivateBillingTierIntent\\n\\n> **billingActivateBillingTierIntent**: `object`\\n\\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:335\"\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Structure - TypeScript\nDESCRIPTION: This snippet details the OTP authentication structure, which includes an apiKeyId, a credential bundle, and a userId. It supports authentication flows involving one-time passwords.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportPrivateKeyResult object\nDESCRIPTION: Defines the structure of the v1ExportPrivateKeyResult object, representing the result of exporting a private key. It contains the export bundle (exportBundle), which includes the private key encrypted to the client's target public key, and the unique identifier for the private key (privateKeyId). This object is returned by the server upon successful export of the private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportPrivateKeyResult\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1450\n\n#### exportBundle\n\n> **exportBundle**: `string`\n\n##### Description\n\nExport bundle containing a private key encrypted to the client's target public key.\n\n#### privateKeyId\n\n> **privateKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given Private Key.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Type Property\nDESCRIPTION: Property definition that specifies the wallet type as Ethereum.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/EthereumWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype: Ethereum = WalletType.Ethereum\n```\n\n----------------------------------------\n\nTITLE: Defining TTestRateLimitsInput Type Alias in TypeScript\nDESCRIPTION: Type definition for TTestRateLimitsInput, defined as an object with a body property of type TTestRateLimitsBody. This type is used for testing rate limits in the Turnkey SDK API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TTestRateLimitsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTTestRateLimitsInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Result Structure - TypeScript\nDESCRIPTION: Defines the structure for updating policies which includes a policyId of type string. This is essential for managing updates to policies in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResult: { policyId: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResultV2: { policyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type Alias for API Request Body\nDESCRIPTION: This snippet provides a TypeScript type alias for the request body parameter used in the 'PublicApiService_GetUsers' operation. It is part of the automatically generated SDK files, and essential for defining the structure of POST requests to the '/public/v1/query/list_users' endpoint. Developers should ensure that any object matching this type alias correctly reflects the necessary parameters for successful API interaction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"POST /public/v1/query/list_users\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteAuthenticatorsIntent Interface in TypeScript\nDESCRIPTION: Outlines the structure for deleting authenticators, including a list of authenticator IDs and the associated user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeleteAuthenticatorsIntent {\n  authenticatorIds: string[];\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserResponse Type in TypeScript\nDESCRIPTION: Type alias that maps to the response schema of the PublicApiService_UpdateUser operation's 200 status code. This type is used for handling responses from the POST /public/v1/submit/update_user endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateUserResponse = operations[\"PublicApiService_UpdateUser\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias TGetPolicyResponse which represents the response schema for the 'GetPolicy' operation in the Public API service. This type alias is part of the SDK and specifies the shape of a successful 200 HTTP response for the mentioned service. It includes nested properties mimicking the operational response structure. Users must have access to the SDK package to leverage this type alias in their TypeScript projects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetPolicyResponse = operations[\\\"PublicApiService_GetPolicy\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Timestamp Interface Definition\nDESCRIPTION: Interface defining the structure for timestamp objects with seconds and nanoseconds precision.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n{ nanos: string; seconds: string; }\n```\n\n----------------------------------------\n\nTITLE: Defining User Tag Result Structure\nDESCRIPTION: This snippet outlines the 'createUserTagResult' structure, which includes userIds as well as a unique identifier for a user tag, formatted as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_71\n\nLANGUAGE: json\nCODE:\n```\nresult.createUserTagResult?\n\\{ `userIds`: `string`[]; `userTagId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Wallet Management Type Definitions\nDESCRIPTION: Type definitions for wallet-related operations including wallet updates and identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1UpdateWalletIntent {\n  walletId: string\n  walletName?: string\n}\n\ninterface v1UpdateWalletResult {\n  walletId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPoliciesInput Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for the input parameters when querying policies. The type represents an object containing a body property of type TGetPoliciesBody, used as the request payload for the list_policies API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetPoliciesInput = object\n```\n\n----------------------------------------\n\nTITLE: Migration Changes for ethers v6 - Chain ID\nDESCRIPTION: Example showing how to migrate chain ID retrieval from ethers v5 to v6. The getChainId method is moved from signer to provider's network object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nconst chainId = await connectedSigner.getChainId();\n\n// after\nconst chainId = (await connectedSigner.provider?.getNetwork())?.chainId;\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This snippet defines a complex type structure for activity results, statuses, and types used in the SDK. It includes various result types for different operations, activity status enums, and an extensive list of activity type enums.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult: { userId: string; };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportPrivateKeyResult Interface in TypeScript\nDESCRIPTION: Defines the structure for the result of importing a private key, including addresses and key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1ImportPrivateKeyResult {\n  addresses: definitions[\"immutableactivityv1Address\"][];\n  privateKeyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RecoverUserIntent Authenticator Interface in TypeScript\nDESCRIPTION: Defines the structure for a new authenticator to be registered during user recovery. It includes attestation details, authenticator name, and challenge.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  attestation: {\n    attestationObject: string;\n    clientDataJson: string;\n    credentialId: string;\n    transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n  };\n  authenticatorName: string;\n  challenge: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Structure in SubOrganization Result\nDESCRIPTION: This snippet articulates the wallet structure in createSubOrganizationResultV4, highlighting the components of addresses and walletId, both presented as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_68\n\nLANGUAGE: json\nCODE:\n```\nresult.createSubOrganizationResultV4.wallet?\n\\{ `addresses`: `string`[]; `walletId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Deleting User Tags in TypeScript\nDESCRIPTION: Method to delete user tags using the Turnkey Browser SDK. Requires input parameters defining the tags to be removed. Returns a Promise with the operation result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteUserTags(input: TDeleteUserTagsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: TDeletePrivateKeysInput Properties Definition\nDESCRIPTION: Property definition for the TDeletePrivateKeysInput type, specifying the body property of type TDeletePrivateKeysBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TDeletePrivateKeysBody\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Root Quorum Update\nDESCRIPTION: Defines the interface for updating root quorum settings including threshold and user IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_144\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1UpdateRootQuorumIntent {\n  threshold: number;\n  userIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Creation Body Type Alias\nDESCRIPTION: Type alias that specifies the structure for creating a sub-organization in the Turnkey SDK. Used in the POST request to /public/v1/submit/create_sub_organization endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateSubOrganizationBody = operations[\"PublicApiService_CreateSubOrganization\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enums in TypeScript\nDESCRIPTION: This snippet defines TypeScript enums for activity statuses and types used in the Turnkey SDK. It includes various statuses like 'CREATED', 'PENDING', 'COMPLETED', and a wide range of activity types for different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUsers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining TInitOtpAuthResponse Type Alias in TypeScript\nDESCRIPTION: Defines a type alias named `TInitOtpAuthResponse` representing the successful response schema (status code 200) from the `PublicApiService_InitOtpAuth` operation. This operation is associated with a POST request to the `/public/v1/submit/init_otp_auth` endpoint. The type alias essentially provides a structured representation of the data returned by this API endpoint upon successful initialization of OTP authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitOtpAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Type Alias: TInitOtpAuthResponse\n *\n * > **TInitOtpAuthResponse** = `operations`[\\\"PublicApiService_InitOtpAuth\\\"][`\\\"responses\\\"`][`\\\"200\\\"`][`\\\"schema\\\"`]\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:3005](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L3005)\n *\n * `POST /public/v1/submit/init_otp_auth`\n */\n\"\n```\n\n----------------------------------------\n\nTITLE: TListPrivateKeyTagsResponse Type Alias Definition\nDESCRIPTION: Defines the TListPrivateKeyTagsResponse type alias, which represents the response schema for listing private key tags using the PublicApiService_ListPrivateKeyTags operation.  It is extracted from the generated OpenAPI types for the Turnkey Public API's list_private_key_tags endpoint, specifically targeting the successful 200 response and its schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListPrivateKeyTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TListPrivateKeyTagsResponse** = `operations`[`\"PublicApiService_ListPrivateKeyTags\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Type Alias Links\nDESCRIPTION: Markdown list of links to type alias documentation files organized by functionality groups including authentication, users, wallets, policies, and organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Type Aliases\n\n- [TApproveActivityBody](type-aliases/TApproveActivityBody.mdx)\n- [TApproveActivityInput](type-aliases/TApproveActivityInput.mdx)\n- [TApproveActivityResponse](type-aliases/TApproveActivityResponse.mdx)\n[...additional type aliases...]\n```\n\n----------------------------------------\n\nTITLE: Implementing User Recovery with POST Request in TypeScript\nDESCRIPTION: Endpoint documentation for completing the process of recovering a user by adding an authenticator. The request is made via POST to /public/v1/submit/recover_user and requires TRecoverUserInput as a parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nRecover a user\n\nCompletes the process of recovering a user by adding an authenticator\n\n`POST /public/v1/submit/recover_user`\n\n## Parameters\n\n### input\n\n[`TRecoverUserInput`](../type-aliases/TRecoverUserInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent Structure\nDESCRIPTION: This snippet establishes the structure for updating user information, including fields such as user email, username, phone number, and a list of user tags that can be added or removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteSubOrganization.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TExportWalletAccountBody in TypeScript\nDESCRIPTION: This snippet defines a type alias TExportWalletAccountBody that represents the structure of the body required for the PublicApiService_ExportWalletAccount operation. This type alias combines existing types from the SDK while allowing for additional command parameters to be included.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportWalletAccountBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TExportWalletAccountBody = operations[\\\"PublicApiService_ExportWalletAccount\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Using serverSign to Proxy Requests in TurnkeyBrowserSDK\nDESCRIPTION: The serverSign function proxies requests from a root parent organization to a child organization. This approach is necessary because API keys cannot be stored client-side, so requests are forwarded via a backend proxy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n    apiBaseUrl: \"https://api.turnkey.com\",\n    defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n    serverSignUrl: \"https://your-server-sign-url.com\",\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst subOrgIdsResponse = await turnkeySDK.serverSign(\n \"getSubOrgIds\",\n   [{\n     filterType: \"EMAIL\",\n     filterValue: email\n   }]\n )!\n\nif (subOrgIdsResponse.organizationIds?.length > 0) {\n const emailAuthResponse = await turnkeySDK.serverSign(\n   \"emailAuth\",\n   [{\n     email: email,\n     targetPublicKey: <iframeClient.iframePublicKey>,\n     organizationId: subOrgIdsResponse.organizationIds[0]\n   }]\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountsInput Properties in TypeScript\nDESCRIPTION: Property definition for the TGetWalletAccountsInput type, specifying the required body parameter and its type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetWalletAccountsBody\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Deletion Result Structure\nDESCRIPTION: This snippet specifies the structure for 'deletePolicyResult', which includes a unique identifier for the deleted policy formed as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_80\n\nLANGUAGE: json\nCODE:\n```\nresult.deletePolicyResult?\n\\{ `policyId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Define Result Structures in JavaScript\nDESCRIPTION: This snippet outlines result structures such as `createApiKeysResult`, `deleteUsersResult`, and `exportPrivateKeyResult` which detail the expected outcomes for various operations. Each object lists specific fields like `apiKeyIds`, `userIds`, and `exportBundle` to capture operation results within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/otpAuth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"createApiKeysResult\": { \"apiKeyIds\": \"string\"[] }, \"deleteUsersResult\": { \"userIds\": \"string\"[] }, \"exportPrivateKeyResult\": { \"exportBundle\": \"string\", \"privateKeyId\": \"string\" }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Key using TypeScript\nDESCRIPTION: The 'stampGetPrivateKey' function retrieves a private key and accepts 'TGetPrivateKeyBody' as input. It returns a Promise that resolves to either 'undefined' or 'TSignedRequest'. This method is inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPrivateKey**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetPrivateKeyBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserResponse Type Alias in Turnkey SDK\nDESCRIPTION: This code snippet defines the TRecoverUserResponse type alias. It is derived from the operations type, specifically targeting the PublicApiService_RecoverUser operation's response schema for a 200 OK status code. This structure is part of the Turnkey SDK's HTTP layer for interacting with the coordinator's public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRecoverUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TRecoverUserResponse\n *\n * > **TRecoverUserResponse** = `operations`[`\"PublicApiService_RecoverUser\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:59538\n *\n * `POST /public/v1/submit/recover_user`\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TRecoverUserResponse\n *\n * > **TRecoverUserResponse** = `operations`[`\"PublicApiService_RecoverUser\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n */\n```\n\n----------------------------------------\n\nTITLE: Defining User Tag Update Result Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for updating user tags, including the userTagId, essential for managing user attributes in a multitudes of operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserTagResult: { userTagId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1Pagination type\nDESCRIPTION: Defines the structure for pagination parameters, including optional 'after' and 'before' cursors, and a 'limit' parameter. Cursors are object IDs used to fetch objects after or before a specific point, and the limit controls the number of objects returned.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\n            v1Pagination: {\n                name: \"v1Pagination\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        after: {\n                            type: \"string\",\n                            description: \"A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.\"\n                        },\n                        before: {\n                            type: \"string\",\n                            description: \"A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.\"\n                        },\n                        limit: {\n                            type: \"string\",\n                            description: \"A limit of the number of object to be returned, between 1 and 100. Defaults to 10.\"\n                        }\n                    }\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Account Result Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export wallet account result, including address and export bundle.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportWalletAccountResult\n\n> **v1ExportWalletAccountResult**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1610](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1610)\n\n#### address\n\n> **address**: `string`\n\n##### Description\n\nAddress to identify Wallet Account.\n\n#### exportBundle\n\n> **exportBundle**: `string`\n\n##### Description\n\nExport bundle containing a private key encrypted by the client's target public key.\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent in JavaScript\nDESCRIPTION: This snippet specifies the intent for updating user details such as email, name, phone number, and associated tags in the SDK. It is crucial for maintaining up-to-date user profiles.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/removeOrganizationFeature.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n`updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Testing Environment\nDESCRIPTION: Series of bash commands for setting up and running local tests using Foundry and Anvil.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/viem/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.example .env\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=\"$PATH:$HOME/.foundry/bin\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ source ~/.zshrc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ foundryup\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm anvil\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Activity Structure for Intent Management in TypeScript\nDESCRIPTION: This snippet defines a TypeScript `Promise` structure that outlines the expected response for various user activity intents. It includes properties like 'canApprove', 'canReject', 'createdAt', and nested structures for handling user invitations, authenticator details, and associated messages. The well-defined types facilitate easier integration and error handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string;\n```\n\n----------------------------------------\n\nTITLE: Defining SignTransactionResult in TypeScript\nDESCRIPTION: This snippet defines the `signTransactionResult` type, which holds the result of a transaction signing operation, specifically the signed transaction string. This structure is crucial for handling transaction results in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n`signTransactionResult`: \\{ `signedTransaction`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeysBody Type Alias in TypeScript\nDESCRIPTION: Defines a type alias that maps to the request body parameters for the DELETE private keys API endpoint. The type is derived from the operations object's PublicApiService_DeletePrivateKeys path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TDeletePrivateKeysBody = operations[\"PublicApiService_DeletePrivateKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Storage Key: UserSession definition\nDESCRIPTION: Defines the 'UserSession' member of the `StorageKeys` enumeration. It uses the string literal \"@turnkey/session/v1\" as the key for storing the user session in the browser's storage. This key is used to persist the user session details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> **UserSession**: `\"@turnkey/session/v1\"`\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserTagResult in TypeScript\nDESCRIPTION: This snippet describes the `updateUserTagResult` type, which includes a `userTagId` string indicating the identifier for a user tag that was updated. This structure helps in managing user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n`updateUserTagResult`: \\{ `userTagId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Update Private Key Tag Result Structure in TypeScript\nDESCRIPTION: Defines the structure for updating private key tag results, including privateKeyTagId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1PathFormat type\nDESCRIPTION: Defines a type for the path format, specifically BIP32. This likely refers to a hierarchical key derivation scheme used in cryptocurrencies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\n            v1PathFormat: {\n                name: \"v1PathFormat\";\n                schema: {\n                    type: \"string\",\n                    enum: [\"PATH_FORMAT_BIP32\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntentV6 - JSON Object\nDESCRIPTION: This version mirrors the previous intent version, allowing for the same levels of configuration across email and wallet functionalities, enabling consistent ease of use and adoption.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: User Wallet Management Intent Structures in TypeScript\nDESCRIPTION: This snippet defines several TypeScript interfaces for intents related to wallet management, including importing wallets, managing private keys, and handling user identifiers. It outlines the data structure for each action to be performed within the SDK, ensuring type safety and better code reliability.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; `initImportPrivateKeyIntent`: { `userId`: `string`; }; `initImportWalletIntent`: { `userId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure - TypeScript\nDESCRIPTION: The `recoverUserResult` interface is structured to include an array of `authenticatorId`, allowing for multiple authenticator IDs in recovery responses. This design facilitates the retrieval of all necessary authenticators that are associated with the user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPolicyResponse Type Alias in TypeScript\nDESCRIPTION: Defines a type alias TGetPolicyResponse that maps to the 200 response schema of the PublicApiService_GetPolicy operation. This type is used for handling responses from the POST /public/v1/query/get_policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetPolicyResponse = operations[\"PublicApiService_GetPolicy\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying TGetApiKeysInput Properties in TypeScript\nDESCRIPTION: Defines the body property of the TGetApiKeysInput type alias. The body is of type TGetApiKeysBody, which likely contains the necessary parameters for retrieving API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeysInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TGetApiKeysBody\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyActivityError Constructor and Properties in TypeScript\nDESCRIPTION: This snippet defines the `TurnkeyActivityError` class constructor with named parameters, which allows specifying an activity's ID, status, and a message. The class extends `BaseError` providing additional context relevant to activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TurnkeyActivityError extends BaseError {\n    activityId?: string;\n    activityStatus?: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n    constructor({ activityId, activityStatus, message = \"Received unexpected Turnkey activity status.\" }: { activityId?: string; activityStatus?: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\"; message?: string; }) {\n        super(message);\n        this.activityId = activityId;\n        this.activityStatus = activityStatus;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Wallet Retrieval Input in TypeScript\nDESCRIPTION: This TypeScript code snippet defines a type alias 'TGetWalletsInput' as an object, which includes the structure and expected properties for API input related to wallet retrieval operations. The primary property is 'body' of type 'TGetWalletsBody', essential for specifying the contents of the API request body. The definition is crucial for ensuring type safety and consistency when interacting with the SDK's wallet retrieval features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWalletsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletsInput = object\n```\n\n----------------------------------------\n\nTITLE: Initializing OTP Authentication - TypeScript SDK\nDESCRIPTION: Begins OTP authentication setup, returning merged object results in a Promise. Needs `TInitOtpAuthBody` for inputs and is a part of the `TurnkeySDKClientBase` functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuth(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Deleting Invitation in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete an invitation using the Turnkey SDK. It accepts an input of type TDeleteInvitationBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteInvitation(input: TDeleteInvitationBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Rejection API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for rejecting an activity. It specifies the HTTP method, path, and input parameter type for the reject activity operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/rejectActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nReject Activity\n\nReject an Activity\n\n`POST /public/v1/submit/reject_activity`\n\n## Parameters\n\n### input\n\n[`TRejectActivityInput`](../type-aliases/TRejectActivityInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining OrganizationId Type in TypeScript\nDESCRIPTION: Defines the type for organization ID used throughout the SDK. The organization ID serves as a unique identifier for a given organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n`string`\n```\n\n----------------------------------------\n\nTITLE: Defining stamper Property\nDESCRIPTION: Defines the 'stamper' property of type TStamper in the TurnkeySDKClientConfig interface, which is used to handle timestamping functionalities within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/interfaces/TurnkeySDKClientConfig.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// stamper\n> **stamper**: `TStamper`\n```\n\n----------------------------------------\n\nTITLE: Defining TSignedRequest Type in TypeScript\nDESCRIPTION: Definition of the TSignedRequest type alias which represents a signed request ready to be POSTed to Turnkey. It contains the body, stamp, and url properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TSignedRequest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TSignedRequest = object\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletInput Body Property\nDESCRIPTION: Property definition for the required body parameter in the TGetWalletInput type, which must be of type TGetWalletBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetWalletBody\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeysInput Type in TypeScript\nDESCRIPTION: Type alias definition for the request input when creating private keys through the Turnkey API. The type is a simple object containing a body property of type TCreatePrivateKeysBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreatePrivateKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatedAt Structure in TypeScript\nDESCRIPTION: This snippet defines the `updatedAt` structure that contains timestamps, represented in both nanoseconds and seconds. It captures the timing of activity updates for record-keeping purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n`updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Creating Express API Proxy Handler\nDESCRIPTION: Implementation of an Express middleware proxy handler for forwarding authenticated requests to Turnkey API\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst turnkeyProxyHandler = turnkey.expressProxyHandler({\n  allowedMethods: [\"createSubOrganization\", \"emailAuth\", \"getSubOrgIds\"],\n});\n\napp.post(\"/apiProxy\", turnkeyProxyHandler);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Dogecoin Testnet Wallet Accounts in TypeScript\nDESCRIPTION: Declares a constant array of predefined wallet accounts for Dogecoin testnet, likely used for testing or initialization purposes. The accounts are of type WalletAccount interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_DOGE_TESTNET_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_DOGE_TESTNET_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Deleting Invitations Intent\nDESCRIPTION: This snippet specifies the structure for deleting invitations by identifying them through a unique ID, thereby managing user access effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteInvitationIntent? \\n\\{ `invitationId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteInvitationIntent.invitationId \\n`string` \\n\\n**Description** \\nUnique identifier for a given Invitation object.\n```\n\n----------------------------------------\n\nTITLE: WebAuthN Authenticator Attestation Configuration\nDESCRIPTION: Defines WebAuthN hardware device authentication configuration with detailed attestation properties for secure login mechanisms\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  authenticatorAttachment: null | \"cross-platform\" | \"platform\",\n  clientExtensionResults: {\n    appid: boolean,\n    appidExclude: boolean,\n    credProps: { rk: boolean }\n  },\n  id: string,\n  rawId: string,\n  response: {\n    attestationObject: string,\n    authenticatorAttachment: null | \"cross-platform\" | \"platform\",\n    clientDataJson: string,\n    transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")\n  },\n  type: \"public-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Verified Sub-Organization IDs Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting verified sub-organization IDs. It takes an input of type TGetVerifiedSubOrgIdsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_85\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetVerifiedSubOrgIds(input: TGetVerifiedSubOrgIdsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Turnkey API Types in TypeScript\nDESCRIPTION: The snippet defines the `TurnkeyApiTypes` type alias as an object, representing the structure of API properties and types used within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **TurnkeyApiTypes** = `object`\\n\\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:326\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Iframe Public Key in JavaScript\nDESCRIPTION: Example of how to retrieve the public key of the iframe using the publicKey method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init the IframeStamper\n\nconst iframePublicKey = iframeStamper.publicKey();\n```\n\n----------------------------------------\n\nTITLE: Extracting Wallet Bundle with TurnkeyIframeClient\nDESCRIPTION: Shows how to extract an encrypted wallet bundle from an iframe for secure credential retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Extracts the encrypted wallet bundle from the iframe\nconst walletBundle = await iframeClient.extractWalletEncryptedBundle();\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structure\nDESCRIPTION: This snippet presents the structure for results returned after signing transactions, including necessary attributes that reflect the signed transaction state.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`signTransactionResult`: \\{ `signedTransaction`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallet Account Request in TypeScript\nDESCRIPTION: Method to stamp a request for getting a wallet account. It takes an input of type TGetWalletAccountBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccount(input: TGetWalletAccountBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TIframeSettings Type Alias\nDESCRIPTION: This code snippet defines the `TIframeSettings` type alias as an object with an optional `styles` property of type `TIframeStyles`. It is used to configure the settings of an iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/type-aliases/TIframeSettings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TIframeSettings = `object`\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account API Endpoint in TypeScript\nDESCRIPTION: Defines the API endpoint for exporting a wallet account. It specifies the HTTP method, path, and input parameter type for the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"Export Wallet Account\n\nExports a Wallet Account\n\n`POST /public/v1/submit/export_wallet_account`\n\n## Parameters\n\n### input\n\n[`TExportWalletAccountInput`](../type-aliases/TExportWalletAccountInput.mdx)\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the request body structure used when calling the delete sub-organization API endpoint. It references the body parameter type from the PublicApiService_DeleteSubOrganization operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteSubOrganizationBody** = `operations`\\[`\"PublicApiService_DeleteSubOrganization\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining TExportPrivateKeyBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TExportPrivateKeyBody type alias. It represents the body parameters for the PublicApiService_ExportPrivateKey operation, specifically for the POST /public/v1/submit/export_private_key endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TExportPrivateKeyBody = operations[\"PublicApiService_ExportPrivateKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TCreateWalletAccountsBody which represents the request body parameters for the wallet account creation endpoint. It is derived from the operations object for PublicApiService_CreateWalletAccounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateWalletAccountsBody** = `operations`[`\"PublicApiService_CreateWalletAccounts\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthInput Type Alias\nDESCRIPTION: This code snippet defines the `TOauthInput` type alias as an object containing a `body` property of type `TOauthBody`. This input structure is used for the `POST /public/v1/submit/oauth` API endpoint within the Turnkey HTTP SDK. The `TOauthBody` type itself would need to be defined elsewhere.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TOauthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TOauthInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Import Wallet API Parameters - TypeScript\nDESCRIPTION: This snippet outlines the parameters required for the 'Import Wallet' API operation, specifically focusing on the input type that facilitates the importing process of a wallet. It ensures type safety by specifying the structure of the input data that the API expects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n`POST /public/v1/submit/import_wallet`\n\n## Parameters\n\n### input\n\n[`TImportWalletInput`](../type-aliases/TImportWalletInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Timestamp and Votes in TypeScript\nDESCRIPTION: This snippet defines the structure for activity timestamps and votes in the Turnkey SDK. It includes fields for the update timestamp and an array of vote objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for GetAuthenticators Response in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias for the response of the GetAuthenticators API call, specifying the expected structure of the response according to the OpenAPI schema definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetAuthenticatorsResponse = operations[\\\"PublicApiService_GetAuthenticators\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TExportWalletAccountInput in TypeScript\nDESCRIPTION: The snippet defines a type alias named 'TExportWalletAccountInput' that represents an object used in the TypeScript API for exporting wallet account information. This alias specifies the properties and types of data structure needed for the API. This alias is required for correctly interfacing with the public API that submits wallet account data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TExportWalletAccountInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion - Turnkey API - TypeScript\nDESCRIPTION: This function requests a WebAuthn assertion to create OAuth providers. It takes an input object as parameters and optional credential request options. The function returns a promise that resolves to a signed request which is intended to be sent to the Turnkey API for further processing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreateOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signCreateOauthProviders = (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Vote Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a Vote object, including properties like message, publicKey, scheme, selection, signature, user, and userId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Vote {\n  message: string;\n  publicKey: string;\n  scheme: string;\n  selection: \"VOTE_SELECTION_APPROVED\" | \"VOTE_SELECTION_REJECTED\";\n  signature: string;\n  user: definitions[\"v1User\"];\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TNOOPCodegenAnchorResponse\nDESCRIPTION: This snippet defines a type alias, TNOOPCodegenAnchorResponse, for a specific API response schema. It is utilized within the TypeScript SDK for strong typing and validation of the response returned from the POST /tkhq/api/v1/noop-codegen-anchor endpoint. This type alias directly refers to the schema associated with a successful response (HTTP status 200).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TNOOPCodegenAnchorResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TNOOPCodegenAnchorResponse = operations[\\\"PublicApiService_NOOPCodegenAnchor\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the Sign Transaction Result, which includes a signedTransaction string. This is critical for managing transaction signing responses in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery and Update Intents\nDESCRIPTION: This snippet provides intents for user account recovery and updating user information, combining parameters necessary for user identification and account management. It specifies data fields required for user email recovery and information updates.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TInitImportWalletResponse Type Alias - TypeScript\nDESCRIPTION: This type alias defines the expected schema for the response when initializing the import of a wallet via the Public API Service. There are no dependencies aside from the project’s established operation and response conventions. It primarily serves to ensure type safety and consistency across the SDK's handling of import wallet responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitImportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TInitImportWalletResponse = operations[\\\"PublicApiService_InitImportWallet\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining WalletType Enum in TypeScript\nDESCRIPTION: Enum definition for wallet types that can be used for stamping. Includes support for Ethereum and Solana blockchain wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/enumerations/WalletType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum WalletType {\n  Ethereum = \"ethereum\",\n  Solana = \"solana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Create User Tag Result in JavaScript\nDESCRIPTION: This object defines the result structure for creating user tags within the SDK, encapsulating user IDs and the associated tag ID, essential for user management and categorization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n`createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Organization Feature Management Intents in TypeScript\nDESCRIPTION: Defines structures for adding and removing organization features. Includes feature name constants for different capabilities like email recovery, WebAuthn origins, and authentication methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Attestation Document Method\nDESCRIPTION: Method for generating a signed request to get an attestation document. Takes TGetAttestationDocumentBody input and returns a Promise resolving to undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_83\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetAttestationDocument(input: TGetAttestationDocumentBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddedKey Constant in TypeScript\nDESCRIPTION: This snippet defines the EmbeddedKey constant, which is used to uniquely identify an embedded key within the SDK. It serves as a standard reference across the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const EmbeddedKey = \"@turnkey/embedded-key\";\n```\n\n----------------------------------------\n\nTITLE: Getting Session in Turnkey\nDESCRIPTION: This method attempts to retrieve a valid, active READ_WRITE session. If a session is found, it's returned as a Promise that resolves to a `Session` object (defined by the `Session` type alias). Otherwise, the Promise resolves to `undefined`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * If there is a valid, active READ_WRITE session, this will return it\n */\ngetSession(): Promise<undefined | Session>\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Feature in Turnkey SDK (TS)\nDESCRIPTION: This method removes a feature from an organization using the Turnkey SDK. It requires a `TRemoveOrganizationFeatureBody` as input and returns a Promise that resolves to an object indicating the result of the removal operation. The method is inherited from the `TurnkeyServerClient` class.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n> **removeOrganizationFeature**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-server/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2142](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk-client-base.ts#L2142)\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Intent Structures\nDESCRIPTION: This snippet articulates the structures for updating policies within the system, including conditions, consensus, and effects. These definitions are crucial for maintaining the security and compliance of user policies over time.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; }\n```\n\n----------------------------------------\n\nTITLE: Defining TListPrivateKeyTagsBody Type Alias in TypeScript\nDESCRIPTION: This type alias combines the body parameters of the PublicApiService_ListPrivateKeyTags operation, omitting the organizationId, and includes queryOverrideParams. It's used for structuring the request body when listing private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListPrivateKeyTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TListPrivateKeyTagsBody = Omit<operations[\"PublicApiService_ListPrivateKeyTags\"][\"parameters\"][\"body\"][\"body\"], \"organizationId\"> & queryOverrideParams\n```\n\n----------------------------------------\n\nTITLE: TUpdateUserBody Type Alias Definition\nDESCRIPTION: This snippet shows the definition of the `TUpdateUserBody` type alias. It is extracted from the auto-generated TypeScript file defining the API client. It corresponds to the body parameter of the `PublicApiService_UpdateUser` operation, which is used for the `POST /public/v1/submit/update_user` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @internal\n */\nexport type TUpdateUserBody = operations[\"PublicApiService_UpdateUser\"][\"parameters\"][\"body\"][\"body\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enum - TypeScript\nDESCRIPTION: This snippet defines an enum for various types of activities that can be conducted through the API. It helps standardize activity operations and ensures type safety when managing different activity types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiOnlyUsers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"type\": \\\"ACTIVITY_TYPE_CREATE_API_KEYS\\\" | \\\"ACTIVITY_TYPE_CREATE_USERS\\\" | \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\\\" | \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\\\" | \\\"ACTIVITY_TYPE_CREATE_INVITATIONS\\\" | \\\"ACTIVITY_TYPE_ACCEPT_INVITATION\\\" | \\\"ACTIVITY_TYPE_CREATE_POLICY\\\" | \\\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\\\" | \\\"ACTIVITY_TYPE_DELETE_USERS\\\" | \\\"ACTIVITY_TYPE_DELETE_API_KEYS\\\" | \\\"ACTIVITY_TYPE_DELETE_INVITATION\\\" | \\\"ACTIVITY_TYPE_DELETE_ORGANIZATION\\\" | \\\"ACTIVITY_TYPE_DELETE_POLICY\\\" | \\\"ACTIVITY_TYPE_CREATE_USER_TAG\\\" | \\\"ACTIVITY_TYPE_DELETE_USER_TAGS\\\" | \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION\\\" | \\\"ACTIVITY_TYPE_SIGN_TRANSACTION\\\" | \\\"ACTIVITY_TYPE_APPROVE_ACTIVITY\\\" | \\\"ACTIVITY_TYPE_REJECT_ACTIVITY\\\" | \\\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\\\" | \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\\\" | \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\\\" | \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\\\" | \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\\\" | \\\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\\\" | \\\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\\\" | \\\"ACTIVITY_TYPE_CREATE_POLICY_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_POLICY_V3\\\" | \\\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\\\" | \\\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\\\" | \\\"ACTIVITY_TYPE_UPDATE_USER_TAG\\\" | \\\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\\\" | \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_USERS_V2\\\" | \\\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\\\" | \\\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\\\" | \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\\\" | \\\"ACTIVITY_TYPE_UPDATE_USER\\\" | \\\"ACTIVITY_TYPE_UPDATE_POLICY\\\" | \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\\\" | \\\"ACTIVITY_TYPE_CREATE_WALLET\\\" | \\\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\\\" | \\\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\\\" | \\\"ACTIVITY_TYPE_RECOVER_USER\\\" | \\\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\\\" | \\\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\\\" | \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\\\" | \\\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\\\" | \\\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\\\" | \\\"ACTIVITY_TYPE_EXPORT_WALLET\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\\\" | \\\"ACTIVITY_TYPE_EMAIL_AUTH\\\" | \\\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\\\" | \\\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\\\" | \\\"ACTIVITY_TYPE_IMPORT_WALLET\\\" | \\\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\\\" | \\\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\\\" | \\\"ACTIVITY_TYPE_CREATE_POLICIES\\\" | \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\\\" | \\\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\\\" | \\\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\\\" | \\\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\\\" | \\\"ACTIVITY_TYPE_OAUTH\\\" | \\\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\\\" | \\\"ACTIVITY_TYPE_EMAIL_AUTH_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\\\" | \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\\\" | \\\"ACTIVITY_TYPE_DELETE_WALLETS\\\" | \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\\\" | \\\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\\\" | \\\"ACTIVITY_TYPE_INIT_OTP_AUTH\\\" | \\\"ACTIVITY_TYPE_OTP_AUTH\\\" | \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\\\" | \\\"ACTIVITY_TYPE_UPDATE_WALLET\\\" | \\\"ACTIVITY_TYPE_UPDATE_POLICY_V2\\\" | \\\"ACTIVITY_TYPE_CREATE_USERS_V3\\\" | \\\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\\\";\n```\n\n----------------------------------------\n\nTITLE: SDK Type Definitions - TypeScript Interfaces\nDESCRIPTION: Extensive TypeScript interface and type definitions for a blockchain SDK covering wallet operations, authentication flows, organization management, and transaction signing. Includes detailed type definitions for input parameters and result objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/rejectActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  privateKeyName: string;\n  userId: string;\n  importWalletIntent: {\n    accounts: object[];\n    encryptedBundle: string;\n    userId: string;\n    walletName: string;\n  };\n  initImportPrivateKeyIntent: {\n    userId: string;\n  };\n  // Additional interface definitions omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remove Organization Feature Result Structure in TypeScript\nDESCRIPTION: Defines the structure for removing organization feature results, including an array of feature objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure in TypeScript\nDESCRIPTION: This snippet defines a result structure for payment method settings, including fields for 'cardHolderEmail', 'cardHolderName', and 'lastFour', all of type string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Structure - TypeScript\nDESCRIPTION: The `otpAuthResult` interface describes the structure of the result from OTP authentication, which includes an `apiKeyId`, `credentialBundle`, and `userId`, all of string type. This ensures that the data returned from OTP authentication operations is structured and strongly typed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: TurnkeyActivityError Class Definition\nDESCRIPTION: Class definition for TurnkeyActivityError that extends Error. Includes constructor and properties for handling Turnkey activity errors with specific activity statuses and types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TurnkeyActivityError extends Error {\n  activityId: undefined | string;\n  activityStatus: undefined | \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  activityType: undefined | string;\n  cause: undefined | Error;\n  constructor(input: {\n    activityId?: string;\n    activityStatus?: string;\n    activityType?: string;\n    cause?: Error;\n    message: string;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePrivateKeyTagsRequest Structure in TypeScript\nDESCRIPTION: Defines the request structure for deleting private key tags, requiring the organization ID, parameters of type 'v1DeletePrivateKeyTagsIntent', and a timestamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePrivateKeyTagsRequest {\n    organizationId: string;\n    parameters: definitions[\"v1DeletePrivateKeyTagsIntent\"];\n    timestampMs: string;\n    type: \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to export a private key using the Turnkey SDK. It accepts an input of type TExportPrivateKeyBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexportPrivateKey(input: TExportPrivateKeyBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Get Organization Configs Method Definition - TypeScript\nDESCRIPTION: Method to retrieve organization configuration including features and quorum settings. Takes TGetOrganizationConfigsBody as input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetOrganizationConfigs(input: TGetOrganizationConfigsBody): Promise<{ configs: { features: object[]; quorum: { threshold: number; userIds: string[]; }; }; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting Invitation in Turnkey SDK\nDESCRIPTION: Method for deleting an invitation with input parameters. Returns a Promise containing a signed request or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteInvitation(input: TDeleteInvitationBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining apiBaseUrl Property\nDESCRIPTION: Defines the 'apiBaseUrl' property as a string, indicating the base URL for the API used by the Turnkey SDK. This property is essential for routing API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/interfaces/TurnkeySDKClientConfig.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// apiBaseUrl\n> **apiBaseUrl**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Transports\nDESCRIPTION: Enumeration of possible authenticator transport methods used for authentication devices\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1AuthenticatorTransport = \"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\"\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Type in TypeScript\nDESCRIPTION: This snippet outlines the type for representing a collection of votes as an array of objects. This provides developers with a clear structure for handling voting-related data in API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n`votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Setting New Signing Key with Storage Location\nDESCRIPTION: Demonstrates how to set a new API key as the signing key for the stamper at a specified storage location.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// the API key to be set as the signing key\nconst apiKey: CloudStorageAPIKey = {\n  apiPublicKey: \"...\",\n  apiPrivateKey: \"...\",\n};\n\n// create a new Telegram Cloud Storage Stamper\nconst stamper = new TelegramCloudStorageStamper();\n\n// the key used to index Telegram Cloud Storage\nconst telegramCloudStorageKey = \"@turnkey/telegramCloudStorageKey\";\n\n// insert the API key in Telegram Cloud Storage\nawait stamper.setSigningKey({\n  cloudStorageAPIKey: apiKey,\n  cloudStorageKey: telegramCloudStorageKey,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TTelegramCloudStorageStamperConfig in TypeScript\nDESCRIPTION: This snippet defines a type alias called TTelegramCloudStorageStamperConfig as an object in TypeScript. It includes optional properties for cloud storage API key and cloud storage key, which are essential for configuration when interacting with the Telegram Cloud Storage API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/type-aliases/TTelegramCloudStorageStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TTelegramCloudStorageStamperConfig = {\\n  cloudStorageAPIKey?: CloudStorageAPIKey;\\n  cloudStorageKey?: string;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TRejectActivityInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias called TRejectActivityInput as an object. The TRejectActivityInput type is used to structure input for rejecting an activity in the SDK server. One of its properties, body, is expected to be of type TRejectActivityBody, which is detailed in a separate documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRejectActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TRejectActivityInput = {\\n  body: TRejectActivityBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetVerifiedSubOrgIdsResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing a list of verified sub-organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetVerifiedSubOrgIdsResponse {\n  organizationIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: PasskeyConfig Interface Definition\nDESCRIPTION: TypeScript interface definition for configuring passkey settings with optional display name and name parameters\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PasskeyConfig {\n  displayName?: string;\n  name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the OTP Authentication Result, which includes similar fields as the oauthResult, for managing responses from OTP authentication in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining ExtractWalletEncryptedBundle Enumeration\nDESCRIPTION: This snippet defines the ExtractWalletEncryptedBundle event type in TypeScript, indicating that a wallet's encrypted bundle has been extracted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nExtractWalletEncryptedBundle: \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeyTagInput Type Alias in TypeScript\nDESCRIPTION: Type definition for the input structure used when creating a private key tag via the Turnkey API. It is a simple object with a body property of type TCreatePrivateKeyTagBody. This type is used for the POST /public/v1/submit/create_private_key_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreatePrivateKeyTagInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Initializing Import Private Key in TypeScript\nDESCRIPTION: The `TInitImportPrivateKeyBody` type alias combines parameters required for the `PublicApiService_InitImportPrivateKey` operation with `commandOverrideParams`. There are no additional dependencies aside from the SDK itself, and this type helps in ensuring type safety when handling API call parameters. It is expected to be used wherever these parameter structures are involved within the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitImportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TInitImportPrivateKeyBody = operations[\\\"PublicApiService_InitImportPrivateKey\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sub Organizations - TypeScript\nDESCRIPTION: The `stampCreateSubOrganization` function requires an input of type `TCreateSubOrganizationBody` and returns a promise that resolves to either undefined or a `TSignedRequest`, aimed at creating sub-organizations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateSubOrganization(input: TCreateSubOrganizationBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUserRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a specific user. It requires both organizationId and userId as string properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetUserRequest: object\n{\n  organizationId: string\n  userId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Stamp List User Tags with Turnkey SDK\nDESCRIPTION: This function `stampListUserTags` creates a signed request to list user tags within the Turnkey SDK. It takes `TListUserTagsBody` as input, and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampListUserTags**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:645](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L645)\n\n#### Parameters\n\n##### input\n\n`TListUserTagsBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Result Structure - TypeScript\nDESCRIPTION: The `updateWalletResult` interface is structured to include a `walletId`, representing the ID of the updated wallet. This clarity in the response is essential for updates to wallet-related actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Injecting Wallet Export Bundle with TurnkeyIframeClient\nDESCRIPTION: Demonstrates injecting a wallet export bundle into an iframe for secure wallet credential transfer.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects a credential bundle into the iframe for session management\nconst success = await iframeClient.injectWalletExportBundle(\n  \"wallet-bundle\",\n  \"org-id\",\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Private Key Response - TypeScript\nDESCRIPTION: The type alias TGetPrivateKeyResponse maps to the schema defined for the response of the Public API service endpoint that retrieves a private key. It enhances type safety in applications by providing a clear structure for the expected data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetPrivateKeyResponse\" = `operations`[\\\"PublicApiService_GetPrivateKey\\\"] [\\\"responses\\\"] [\\\"200\\\"] [\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1ImportWalletIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for an intent to import a wallet, including accounts and encryption details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1ImportWalletIntent {\n  accounts: definitions[\"v1WalletAccountParams\"][];\n  encryptedBundle: string;\n  userId: string;\n  walletName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: EvmWalletInterface TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for EVM wallet implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/documents/WalletStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EvmWalletInterface extends BaseWalletInterface {\n  recoverPublicKey: (message: string, signature: string) => Promise<string>;\n  type: \"evm\";\n}\n```\n\n----------------------------------------\n\nTITLE: Activity Type and Status Enums - TypeScript\nDESCRIPTION: Defines TypeScript enums and interfaces for activity statuses and types including operation results for API keys, users, authentication, policies, and wallet operations. Includes timestamps and vote tracking.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ActivityStatus = \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype ActivityType = \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\ninterface ActivityResult {\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  // ... other result types\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetActivityRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting a specific activity, requiring activity and organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetActivityRequest {\n  activityId: string;\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex deletePrivateKeys Function Type\nDESCRIPTION: Defines a constant function type with a Promise return representing a deletion operation with extensive type annotations for activity and intent tracking\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst deletePrivateKeys: (`input`) => `Promise`<{ `activity`: { ... }}>\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TUpdateRootQuorumResponse type alias. It combines the update root quorum result from the PublicApiService_UpdateRootQuorum operation with the v1ActivityResponse definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateRootQuorumResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TUpdateRootQuorumResponse = operations[\"PublicApiService_UpdateRootQuorum\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"updateRootQuorumResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining InitImportWallet Response Type\nDESCRIPTION: Type alias that maps to the 200 OK response schema for the wallet import initialization endpoint. Specifies the structure of the successful response when initiating a wallet import process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitImportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTInitImportWalletResponse = operations[\"PublicApiService_InitImportWallet\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines a complex TypeScript type that includes various activity results, status enums, and activity types. It covers a wide range of operations from user management to transaction signing and organizational features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for User Update Response\nDESCRIPTION: Defines a type alias named TUpdateUserResponse that combines the response schema for a user update operation from the SDK's public API service. This type consists of two parts: the operations schema for the update user response and the definitions for the v1 activity response. It ensures type safety for the response structure in TypeScript implementations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TUpdateUserResponse = operations[\\\"PublicApiService_UpdateUser\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"updateUserResult\\\"] & definitions[\\\"v1ActivityResponse\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Export and Import Parameters\nDESCRIPTION: This snippet describes the structure for exporting and importing wallet data. It captures required parameters such as wallet ID and target public key for secure transfers of sensitive wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n\\{ `address`: `string`; `targetPublicKey`: `string`; \\}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" \\| \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_CZECH\\\" \\| \\\"MNEMONIC_LANGUAGE_FRENCH\\\" \\| \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" \\| \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" \\| \\\"MNEMONIC_LANGUAGE_KOREAN\\\" \\| \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\\{ `userId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: TRejectActivityBody Type Alias Definition\nDESCRIPTION: This code snippet defines the TRejectActivityBody type alias. It represents the structure of the request body for the PublicApiService_RejectActivity operation, specifically the 'body' parameter within the 'body' section. It is located within the packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts file at line 60936.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRejectActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Type Alias: TRejectActivityBody\n *\n * > **TRejectActivityBody** = `operations`[\\\"PublicApiService_RejectActivity\\\"][`\\\"parameters\\\"`][`\\\"body\\\"`][`\\\"body\\\"`]\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:60936\n *\n * `POST /public/v1/submit/reject_activity`\n */\"\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey SDK React Package\nDESCRIPTION: Command to install the @turnkey/sdk-react package using npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Defining Result Interfaces for Turnkey SDK Operations in TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for various result structures returned by Turnkey SDK operations. It includes results for operations like creating API keys, signing transactions, updating policies, and managing users and wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUsers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ns: string; v: string; }; signRawPayloadsResult: { signatures: object[]; }; signTransactionResult: { signedTransaction: string; }; updateAllowedOriginsResult: {}; updatePolicyResult: { policyId: string; }; updatePolicyResultV2: { policyId: string; }; updatePrivateKeyTagResult: { privateKeyTagId: string; }; updateRootQuorumResult: {}; updateUserResult: { userId: string; }; updateUserTagResult: { userTagId: string; }; updateWalletResult: { walletId: string; }; };\n```\n\n----------------------------------------\n\nTITLE: Markdown Update Private Key Tag API Description\nDESCRIPTION: This section documents the `updatePrivateKeyTag` API, detailing the endpoint, HTTP method, and input parameters.  It specifies that the update operation is atomic, meaning either all updates succeed or none.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nUpdate Private Key Tag\n\nUpdate human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n\n`POST /public/v1/submit/update_private_key_tag`\n\n## Parameters\n\n### input\n\n[`TUpdatePrivateKeyTagInput`](../type-aliases/TUpdatePrivateKeyTagInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserBody Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the request body parameters for the PublicApiService_UpdateUser operation. Located in the coordinator public API v1 TypeScript definition files.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateUserBody = operations[\"PublicApiService_UpdateUser\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Result V2 Structure in TypeScript\nDESCRIPTION: This snippet introduces the structure for policy update result version 2, which also consists of a policy ID string, maintaining consistency across different versions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResultV2: { policyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Stamping Organization Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get organization details. Takes a TGetOrganizationBody input object and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOrganization(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Removal Result Structure - TypeScript\nDESCRIPTION: This snippet outlines the result structure for removing organization features, consisting of an array of feature objects. It is useful for managing organization capabilities in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Importing Private Key in TurnKey SDK API\nDESCRIPTION: This snippet defines the API endpoint and input type for importing a private key in the TurnKey SDK. It uses the POST method and requires a TImportPrivateKeyInput parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importPrivateKey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nImport Private Key\n\nImports a private key\n\n`POST /public/v1/submit/import_private_key`\n\n## Parameters\n\n### input\n\n[`TImportPrivateKeyInput`](../type-aliases/TImportPrivateKeyInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetOauthProvidersResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting OAuth providers, containing an array of OauthProvider objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetOauthProvidersResponse {\n  oauthProviders: definitions[\"v1OauthProvider\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TTurnkeyActivityErrorType Type Alias in TypeScript\nDESCRIPTION: Defines a type alias that combines the TurnkeyActivityError class with an object containing a name property set to 'TurnkeyActivityError'. This type is used for error handling and type checking in the Turnkey Viem SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/type-aliases/TTurnkeyActivityErrorType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTTurnkeyActivityErrorType = TurnkeyActivityError & { name: \"TurnkeyActivityError\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Otp Auth Intent Structure in JSON\nDESCRIPTION: This snippet outlines the structure for an OTP authentication intent which includes parameters like `contact`, `otpType`, and `userIdentifier`. It also incorporates customization options for SMS and email to tailor the OTP process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ `initOtpAuthIntent`: { `contact`: `string`, `emailCustomization`: { `appName`: `string`, `logoUrl`: `string`, `magicLinkTemplate`: `string`, `templateId`: `string`, `templateVariables`: `string` }, `otpType`: `string`, `sendFromEmailAddress`: `string`, `sendFromEmailSenderName`: `string`, `smsCustomization`: { `template`: `string` }, `userIdentifier`: `string` } }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias: TSignRawPayloadInput in TypeScript\nDESCRIPTION: This snippet defines the type alias TSignRawPayloadInput as an object in TypeScript, which is used as the expected payload structure when making POST requests to the API endpoint for signing raw payloads. The alias references TSignRawPayloadBody which outlines the required structure of the body property.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TSignRawPayloadInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type String Literal Types\nDESCRIPTION: This snippet defines a TypeScript string literal type for representing the type of an activity. It restricts the possible values to a predefined set of activity types. This ensures only valid activity types are used. This type definition appears extensive, covering a wide range of operations within the system, from creating API keys to signing transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Intent in TypeScript\nDESCRIPTION: This snippet outlines an intent for initiating user email recovery. It includes parameters for the user's email, email customization options, and a public key. This structure is essential for allowing users to recover their accounts securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Definition of TCreateReadWriteSessionInput Type in TypeScript\nDESCRIPTION: Type alias definition for TCreateReadWriteSessionInput used in the Turnkey API for creating read-write sessions. It's a simple object type with a body property that contains the session creation parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadWriteSessionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias for creating read-write sessions input\n * Used with POST /public/v1/submit/create_read_write_session\n */\nTCreateReadWriteSessionInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Introducing @turnkey/encoding Package in Markdown\nDESCRIPTION: This snippet presents the @turnkey/encoding package, explaining its purpose and usage. It warns users about potential future interface changes when importing functions into their own applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/encoding/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @turnkey/encoding\n\nThis is a package containing decoding and encoding functions. This is used by other Turnkey packages. Feel free to import exported functions into your own apps, but be aware that there may be significant interface changes in the future.\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Turnkey SDK Documentation\nDESCRIPTION: A set of markdown navigation links for traversing the Turnkey SDK documentation hierarchy, including paths to README files and package documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / deleteAuthenticators\n```\n\n----------------------------------------\n\nTITLE: Delete Invitation in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to delete an invitation using the TurnkeyBrowserClient. It takes a `TDeleteInvitationBody` as input and returns a Promise that resolves to an object.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> **deleteInvitation**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1482](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1482)\n\n#### Parameters\n\n##### input\n\n`TDeleteInvitationBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`deleteInvitation`](TurnkeyBrowserClient.mdx#deleteinvitation)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Markdown Changelog\nDESCRIPTION: This snippet shows the format used to document version updates and dependency changes in a Markdown changelog file. It includes version numbers, change types (Patch, Minor), and specific dependency updates.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/cosmjs/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.5\n\n### Patch Changes\n\n- Updated dependencies [7b72769]\n  - @turnkey/sdk-server@3.0.1\n\n## 0.7.4\n\n### Patch Changes\n\n- Updated dependencies [e501690]\n- Updated dependencies [d1083bd]\n- Updated dependencies [f94d36e]\n  - @turnkey/sdk-browser@4.0.0\n  - @turnkey/sdk-server@3.0.0\n  - @turnkey/http@3.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Structure - TypeScript\nDESCRIPTION: This snippet defines the structure of the OTP authentication result, including an otpId as a string. It is part of the broader API response definitions aimed at managing user authentication workflows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nOtpAuthResultV2: { otpId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining OTP ID Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the OTP ID result with a single string property. This structure is used for OTP authentication results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nhResultV2: { otpId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteInvitationResponse type alias. It represents the response schema for the PublicApiService_DeleteInvitation operation, specifically the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteInvitationResponse = operations[\"PublicApiService_DeleteInvitation\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: TWebauthnStamperConfig Type Definition\nDESCRIPTION: TypeScript type definition for the WebauthnStamper configuration object, specifying the required rpId and optional parameters like timeout, userVerification, and allowCredentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntype TWebauthnStamperConfig = {\n  rpId: string;\n  timeout?: number;\n  userVerification?: UserVerificationRequirement;\n  allowCredentials?: PublicKeyCredentialDescriptor[];\n};\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Deleting Private Keys - TypeScript\nDESCRIPTION: The HTTP POST request to the endpoint `/public/v1/submit/delete_private_keys` is designed to delete user private keys from the server. This endpoint processes the deletion operation and responds with the necessary status and data related to the request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysResponse.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"`POST /public/v1/submit/delete_private_keys`\"\n```\n\n----------------------------------------\n\nTITLE: Defining WalletAccountParams Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for WalletAccountParams, specifying parameters for generating a wallet account, including addressFormat, curve, path, and pathFormat.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1WalletAccountParams {\n  addressFormat: definitions[\"v1AddressFormat\"];\n  curve: definitions[\"v1Curve\"];\n  path: string;\n  pathFormat: definitions[\"v1PathFormat\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Key: Client definition\nDESCRIPTION: Defines the 'Client' member of the `StorageKeys` enumeration. It uses the string literal \"@turnkey/client\" as the key for storing the client information in the browser's storage. This key is used to persist client specific parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **Client**: `\"@turnkey/client\"`\n```\n\n----------------------------------------\n\nTITLE: API Response Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for API response objects covering operations like invitation management, session creation, authentication, wallet management, and organization administration. Each type includes specific fields with string or array properties representing operation results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{ acceptInvitationResult: { invitationId: string; userId: string; }; activateBillingTierResult: { productId: string; }; createApiKeysResult: { apiKeyIds: string[]; }; createApiOnlyUsersResult: { userIds: string[]; }; createAuthenticatorsResult: { authenticatorIds: string[]; }; createInvitationsResult: { invitationIds: string[]; }; createOauthProvidersResult: { providerIds: string[]; }; createOrganizationResult: { organizationId: string; }; createPoliciesResult: { policyIds: string[]; }; createPolicyResult: { policyId: string; }; createPrivateKeysResult: { privateKeyIds: string[]; }; createPrivateKeysResultV2: { privateKeys: object[]; }; createPrivateKeyTagResult: { privateKeyIds: string[]; privateKeyTagId: string; }; createReadOnlySessionResult: { organizationId: string; organizationName: string; session: string; sessionExpiry: string; userId: string; username: string; }; createReadWriteSessionResult: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; } }\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS in TypeScript\nDESCRIPTION: This code snippet shows the definition of the DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS constant variable. It's an array of `WalletAccount` objects and likely contains predefined accounts for Bitcoin Signet P2WPKH setup. Dependencies include the `WalletAccount` interface, probably defined in the same project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @const` **DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n */\n```\n\n----------------------------------------\n\nTITLE: Running the Offline Signing Script\nDESCRIPTION: Command to execute the script that generates a signed Turnkey request for creating a new private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-offline/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TUpdateWalletInput type alias as an object with a single property 'body' of type TUpdateWalletBody. It is used in the Turnkey SDK for updating wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTUpdateWalletInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteSubOrganizationRequest type\nDESCRIPTION: Defines the structure for a request to delete a sub-organization. It includes the organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteSubOrganizationRequest\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1294\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[``\"v1DeleteSubOrganizationIntent\"``]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: ``\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"``\n```\n\n----------------------------------------\n\nTITLE: Defining v1RejectActivityRequest type\nDESCRIPTION: Defines the structure for an activity rejection request, including organization ID, parameters (v1RejectActivityIntent), timestamp, and request type. This encapsulates the data required to reject a specific activity.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\n            v1RejectActivityRequest: {\n                name: \"v1RejectActivityRequest\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        organizationId: {\n                            type: \"string\",\n                            description: \"Unique identifier for a given Organization.\",\n                            required: true\n                        },\n                        parameters: {\n                            $ref: \"#/definitions/v1RejectActivityIntent\",\n                            required: true\n                        },\n                        timestampMs: {\n                            type: \"string\",\n                            description: \"Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\",\n                            required: true\n                        },\n                        type: {\n                            type: \"string\",\n                            enum: [\"ACTIVITY_TYPE_REJECT_ACTIVITY\"],\n                            required: true\n                        }\n                    },\n                    required: [\"organizationId\", \"parameters\", \"timestampMs\", \"type\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Type in TypeScript\nDESCRIPTION: This snippet establishes the type for the result of user email recovery, containing a single property 'userId'. This structure represents the outcome of operations that relate to recovering a user's email, helping to ensure that the returned data is correctly typed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n`initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Signet P2PKH Accounts Using TypeScript\nDESCRIPTION: This snippet defines a constant named DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS which holds an array of WalletAccount objects. This is essential for initializing default accounts in a Bitcoin Signet context, allowing developers to manage wallet accounts more easily. The WalletAccount interface must be imported from the relevant file for proper type checking.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_SIGNET_P2PKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Response Structure for Activity\nDESCRIPTION: This snippet defines a TypeScript promise response structure for various user activity intents including invitation management and authenticator details. It specifies the types of data returned for each activity, including boolean flags, timestamps, and differing response formats based on user actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUserTag.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; ...\n```\n\n----------------------------------------\n\nTITLE: Defining User Parameters Interface in TypeScript\nDESCRIPTION: This snippet defines the v1RootUserParamsV2 interface, which includes properties for API keys, authenticators, OAuth providers, user email, and username.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1RootUserParamsV2 {\n  apiKeys: definitions[\"apiApiKeyParams\"][];\n  authenticators: definitions[\"v1AuthenticatorParamsV2\"][];\n  oauthProviders: definitions[\"v1OauthProviderParams\"][];\n  userEmail?: string;\n  userName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Complex Intent Type Definitions\nDESCRIPTION: Detailed type definitions for multiple intent types covering organization, authentication, user management, and blockchain interactions with complex nested object structures\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteApiKeysIntent Interface in TypeScript\nDESCRIPTION: Outlines the structure for deleting API keys, including a list of API key IDs and the associated user ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeleteApiKeysIntent {\n  apiKeyIds: string[];\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TStamp and TStamper Types\nDESCRIPTION: TypeScript type definitions for stamp related interfaces used in the WalletStamper implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/documents/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntype TStamp = {\n  stampHeaderName: string;\n  stampHeaderValue: string;\n};\n\ninterface TStamper {\n  stamp: (input: string) => Promise<TStamp>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Doge Mainnet Accounts\nDESCRIPTION: Defines a constant array of WalletAccount instances for the Doge mainnet. This array is utilized to provide default account configurations when interacting with the respective blockchain environment. `WalletAccount` is expected to be imported from the relevant interfaces and is crucial for assuring proper type safety.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_DOGE_MAINNET_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const DEFAULT_DOGE_MAINNET_ACCOUNTS: WalletAccount[] = [];\"\n```\n\n----------------------------------------\n\nTITLE: Defining TSignRawPayloadInput Type Alias in TypeScript\nDESCRIPTION: Type definition for TSignRawPayloadInput which represents an object containing a body property of type TSignRawPayloadBody. This type is used for raw payload signing operations in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSignRawPayloadInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TSignRawPayloadInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePolicyIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a policy in an organization. This intent includes fields for policy identification, conditions, consensus rules, and effect (allow or deny).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: API Key Object Structure in Cloud Storage\nDESCRIPTION: Defines the structure of how API keys are stored within Telegram Cloud Storage as JSON strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  apiPublicKey: \"compressedApiPublicKeyHex\",\n  apiPrivateKey: \"apiPrivateKeyHex\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Statuses in TypeScript\nDESCRIPTION: This snippet defines various activity types and statuses as string literal types. It includes a wide range of activity types and possible status values for activities in the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/rejectActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Testnet P2SH Accounts\nDESCRIPTION: This code defines a constant array named `DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS` of type `WalletAccount[]`. It's used to provide a set of default Bitcoin testnet P2SH accounts. These accounts are used in the Turnkey SDK for testing and demonstration purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport const DEFAULT_BITCOIN_TESTNET_P2SH_ACCOUNTS: WalletAccount[] = [\n  {\n    accountName: \"Bitcoin Testnet Account 1 (P2SH)\",\n    curve: \"secp256k1\",\n    addressFormat: \"p2sh\",\n  },\n  {\n    accountName: \"Bitcoin Testnet Account 2 (P2SH)\",\n    curve: \"secp256k1\",\n    addressFormat: \"p2sh\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that combines the OAuth provider deletion operation response schema with base activity response definitions. It represents the structure of the response returned when deleting OAuth providers through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteOauthProvidersResponse = operations[\"PublicApiService_DeleteOauthProviders\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"deleteOauthProvidersResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampDeletePolicy` function takes an input of type `TDeletePolicyBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is important for removing policies from the Turnkey system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampDeletePolicy(input: TDeletePolicyBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Intent Attestation Response Types in TypeScript\nDESCRIPTION: Type definition for the attestation response structure used in organization creation intents. Includes fields for attestation data, authenticator attachment type, client data, and transport methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ `attestationObject`: `string`; `authenticatorAttachment`: `null` | `\"cross-platform\"` | `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Email Authentication in TypeScript SDK\nDESCRIPTION: This snippet defines a TypeScript type alias named TEmailAuthResponse, representing the schema of a successful (status 200) email authentication response from the Public API Service. This type is essential for handling API responses in a structured manner. It requires the operations module from the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TEmailAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TEmailAuthResponse = operations[\\\"PublicApiService_EmailAuth\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using TurnkeySigner with Ethers\nDESCRIPTION: This snippet demonstrates how to set up a TurnkeySigner, connect it to a provider, and perform various operations including signing and sending a transaction.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"ethers\";\nimport { TurnkeySigner } from \"@turnkey/ethers\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { ApiKeyStamper } from \"@turnkey/api-key-stamper\";\n\nasync function main() {\n  const network = \"goerli\";\n  const provider = new ethers.providers.InfuraProvider(network);\n\n  const turnkeyClient = new TurnkeyClient(\n    {\n      baseUrl: \"https://api.turnkey.com\",\n    },\n    // This uses API key credentials.\n    // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:\n    // new WebauthnStamper({...options...})\n    new ApiKeyStamper({\n      apiPublicKey: \"...\",\n      apiPrivateKey: \"...\",\n    }),\n  );\n\n  // Initialize a Turnkey Signer\n  const turnkeySigner = new TurnkeySigner({\n    client: turnkeyClient,\n    organizationId: \"...\",\n    signWith: \"...\",\n  });\n\n  // Connect it with a Provider (https://docs.ethers.org/v6/api/providers/)\n  const connectedSigner = turnkeySigner.connect(provider);\n\n  const chainId = await connectedSigner.getChainId();\n  const address = await connectedSigner.getAddress();\n  const balance = await connectedSigner.getBalance();\n  const transactionCount = await connectedSigner.getTransactionCount();\n\n  console.log(`Network\\n\\t${network} (chain ID ${chainId})`);\n  console.log(`Address\\n\\t${address}`);\n  console.log(`Balance\\n\\t${String(balance)}`);\n  console.log(`Transaction count\\n\\t${transactionCount}`);\n\n  const transactionRequest = {\n    to: \"0x2Ad9eA1E677949a536A270CEC812D6e868C88108\",\n    value: ethers.utils.parseEther(\"0.0001\"),\n    type: 2,\n  };\n\n  const signedTx = await connectedSigner.signTransaction(transactionRequest);\n\n  console.log(`Signed transaction\\n\\t${signedTx}`);\n\n  if (balance.isZero()) {\n    let warningMessage =\n      \"\\nWarning: the transaction won't be broadcasted because your account balance is zero.\\n\";\n    if (network === \"goerli\") {\n      warningMessage +=\n        \"Use https://goerlifaucet.com/ to request funds on Goerli, then run the script again.\\n\";\n    }\n\n    console.warn(warningMessage);\n    return;\n  }\n\n  const sentTx = await connectedSigner.sendTransaction(transactionRequest);\n\n  console.log(\n    `Transaction sent!\\n\\thttps://${network}.etherscan.io/tx/${sentTx.hash}`,\n  );\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the response schema for the GetAuthenticator API endpoint. It specifically targets the 200 success response schema from the PublicApiService_GetAuthenticator operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetAuthenticatorResponse** = `operations`[`\"PublicApiService_GetAuthenticator\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Initializing Import Wallet Intent\nDESCRIPTION: This snippet defines the structure for initiating the import of a wallet in the SDK. It captures the necessary details including user ID, wallet name, and the encrypted bundle of accounts. This structure ensures a standardized way of importing wallets across different parts of the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Deletion Request - TypeScript\nDESCRIPTION: Specifies the structure for a request to delete API keys, aggregating organization IDs, parameters, timestamps, and request types. This facilitates structured requests for key deletions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteApiKeysRequest: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1159\n */\nexport interface v1DeleteApiKeysRequest {\n  organizationId: string; // Unique identifier for a given Organization.\n  parameters: definitions[\"v1DeleteApiKeysIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n  type: \"ACTIVITY_TYPE_DELETE_API_KEYS\";\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Feature - TypeScript\nDESCRIPTION: The removeOrganizationFeature function returns a Promise that resolves to a detailed activity object, which contains various organizational intents such as approving activities, creating authenticator intents, and managing users and policies. It requires complex TypeScript interfaces to define the data structure for each intent, ensuring type safety and predictability in handling organization-related functionalities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function removeOrganizationFeature(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; ... more intents ... } } }>\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPolicyResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting a specific policy, containing a Policy object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPolicyResponse {\n  policy: definitions[\"v1Policy\"];\n}\n```\n\n----------------------------------------\n\nTITLE: GetWalletAccount Endpoint Parameters\nDESCRIPTION: Parameter definition for the GetWalletAccount endpoint that retrieves wallet account information using organization ID, wallet ID, and optional address or path parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @description Unique identifier for a given Organization. */\norganizationId: string;\n/** @description Unique identifier for a given Wallet. */\nwalletId: string;\n/** @description Address corresponding to a Wallet Account. */\naddress?: string;\n/** @description Path corresponding to a Wallet Account. */\npath?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Result Types\nDESCRIPTION: Comprehensive result type definitions for various SDK operations, including user creation, authentication, and wallet management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResultTypes = {\n  createUsersResult: {\n    userIds: string[];\n  };\n  createWalletResult: {\n    addresses: string[];\n    walletId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intent in JavaScript\nDESCRIPTION: This snippet defines the `signTransactionIntent` which allows for signing transactions with fields for the private key ID, transaction type (Ethereum/Solana), and the unsigned transaction data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"signTransactionIntent\": { \"privateKeyId\": \"string\", \"type\": \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\", \"unsignedTransaction\": \"string\" };\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationBody Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias that extends the PublicApiService_DeleteInvitation operation parameters with additional command override parameters. Used for handling invitation deletion requests in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteInvitationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTDeleteInvitationBody = operations[\"PublicApiService_DeleteInvitation\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsInput Type in TypeScript\nDESCRIPTION: Declaration of the TDeletePrivateKeyTagsInput type alias which represents the request payload structure for the POST /public/v1/submit/delete_private_key_tags endpoint. It contains a body property of type TDeletePrivateKeyTagsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeyTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeletePrivateKeyTagsInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Provider Deletion Result - TypeScript\nDESCRIPTION: Defines the output after successfully deleting OAuth providers, confirming the identifiers of the deleted providers. This is important for client-side validation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteOauthProvidersResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1223\n */\nexport interface v1DeleteOauthProvidersResult {\n  providerIds: string[]; // A list of unique identifiers for Oauth Providers\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteOauthProvidersResult Structure in TypeScript\nDESCRIPTION: Defines the result structure for the deleting OAuth providers operation, including an array of unique identifiers of the OAuth providers that were deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteOauthProvidersResult {\n    providerIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping List User Tags Request in TypeScript\nDESCRIPTION: Method signature for stampListUserTags which prepares a signed request for listing user tags. It accepts a TListUserTagsBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampListUserTags(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Blockchain SDK Interface\nDESCRIPTION: Comprehensive TypeScript type definitions for SDK operations including account management, authentication flows, wallet operations, and transaction signing. The definitions cover parameters for API calls and their corresponding result types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayload.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"][]; `curve`: `\"CURVE_SECP256K1\"` | `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet Account API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for exporting a wallet account in the Turnkey SDK. It specifies the HTTP method, path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nExport Wallet Account\n\nExports a Wallet Account\n\n`POST /public/v1/submit/export_wallet_account`\n\n## Parameters\n\n### input\n\n[`TExportWalletAccountInput`](../type-aliases/TExportWalletAccountInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Declaring SignGetPolicy Function in TypeScript\nDESCRIPTION: Defines the signGetPolicy function that takes an input of type TGetPolicyInput and optional TurnkeyCredentialRequestOptions. It returns a Promise resolving to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetPolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetPolicy: (input: TGetPolicyInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: ApiPrivateKey Property\nDESCRIPTION: Defines the private API key as a string property of the ApiKeyStamper class. This property is utilized in API interactions requiring a private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiPrivateKey: string\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Structure in TypeScript\nDESCRIPTION: This snippet outlines a generic structure for the votes property as an array of objects. While the specifics of the objects are not defined, it shows the collection of votes associated with activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Structure - TypeScript\nDESCRIPTION: Defines the structure for votes represented as an array of objects, which is typically used to handle user feedback or decisions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nvotes`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Providers in TypeScript\nDESCRIPTION: The stampGetOauthProviders function retrieves a list of OAuth providers using TGetOauthProvidersBody input. It returns a Promise with either undefined or a TSignedRequest. The function is inherited from TurnkeyBrowserClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_107\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetOauthProviders(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining the STAMP_HEADER_NAME Constant in TypeScript\nDESCRIPTION: Defines a constant named STAMP_HEADER_NAME with the value 'X-Stamp', which is likely used as a HTTP header name for wallet stamping/signing mechanisms in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/variables/STAMP_HEADER_NAME.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **STAMP_HEADER_NAME**: `\"X-Stamp\"` = `\"X-Stamp\"`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Users in TypeScript\nDESCRIPTION: The 'stampGetUsers' function is used to get information on multiple users. The input required is 'TGetUsersBody', and it returns a Promise that resolves to 'undefined' or 'TSignedRequest'. It inherits from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetUsers**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetUsersBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUserResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting a single user. It includes a user object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetUserResponse: object\n{\n  user: definitions[\"v1User\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Example File\nDESCRIPTION: Command to create a local environment configuration file from the provided example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eth-passkeys-galore/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey HTTP Client Package\nDESCRIPTION: NPM installation command for the @turnkey/http package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/http\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type\nDESCRIPTION: This code snippet defines TypeScript type aliases for activity status and activity types.  `status` is a union of string literals representing the possible states of an activity (e.g., created, pending, completed). `type` is a union of string literals representing different types of activities within the system (e.g., creating API keys, signing transactions, updating policies).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeyTags.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n\n```\n\n----------------------------------------\n\nTITLE: Signing WebAuthn Assertions for Invitation Creation in TypeScript\nDESCRIPTION: Function that creates a signed request for creating invitations in Turnkey. It takes an input object of type TCreateInvitationsInput and optional credential request options, returning a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signCreateInvitations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignCreateInvitations(input: TCreateInvitationsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation for Update Policy Operation\nDESCRIPTION: Documentation for the Update Policy API endpoint. This endpoint allows updating an existing policy via a POST request to '/public/v1/submit/update_policy'. It accepts a TUpdatePolicyInput parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePolicy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nUpdate Policy\n\nUpdate an existing Policy\n\n`POST /public/v1/submit/update_policy`\n\n## Parameters\n\n### input\n\n[`TUpdatePolicyInput`](../type-aliases/TUpdatePolicyInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Users Deletion Result Structure\nDESCRIPTION: This snippet describes the result structure for 'deleteUsersResult', which includes an array of User IDs for the users that were deleted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_84\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteUsersResult?\n\\{ `userIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining TStamp Type Alias in TypeScript\nDESCRIPTION: Type alias definition for TStamp which is an object with stampHeaderName and stampHeaderValue properties. The stampHeaderName is fixed as \"X-Stamp\" and stampHeaderValue is a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/type-aliases/TStamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TStamp** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Intent for User Update in TypeScript\nDESCRIPTION: This snippet describes the structure for updating a user's information, including fields for `userEmail`, `userId`, `userName`, `userPhoneNumber`, and associated `userTagIds`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyProxyHandlerConfig Interface\nDESCRIPTION: This code snippet defines the `TurnkeyProxyHandlerConfig` interface.  It includes an optional property `allowedMethods` which is an array of strings, representing the HTTP methods allowed for the proxy handler. This allows for restricting which HTTP methods can be proxied through the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/interfaces/TurnkeyProxyHandlerConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport interface TurnkeyProxyHandlerConfig {\n  /**\n   * HTTP methods to allow (e.g. `POST`, `GET`). If not specified, all methods are allowed.\n   */\n  allowedMethods?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: API Key and Authenticator Deletion Intent\nDESCRIPTION: Explains how to structure deletion requests for API keys and authenticators, including a focus on identifiers related to users. These operations depend on having correct identifiers to facilitate secure deletions. Inputs include lists of string IDs, resulting in the removal of specified objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"apiKeyIds\\\": \\\"string[]\\\",\\n  \\\"authenticatorIds\\\": \\\"string[]\\\",\\n  \\\"userId\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Private Key Tag Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating a private key tag. It takes an input of type TCreatePrivateKeyTagBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreatePrivateKeyTag(input: TCreatePrivateKeyTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Activities Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for retrieving multiple activities. It takes a TGetActivitiesBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivities(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum - TypeScript\nDESCRIPTION: This snippet defines an enum for different statuses of an activity. It ranges from created to failed, providing a way to easily manage and check activity statuses in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiOnlyUsers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"status\": \\\"ACTIVITY_STATUS_CREATED\\\" | \\\"ACTIVITY_STATUS_PENDING\\\" | \\\"ACTIVITY_STATUS_COMPLETED\\\" | \\\"ACTIVITY_STATUS_FAILED\\\" | \\\"ACTIVITY_STATUS_CONSENSUS_NEEDED\\\" | \\\"ACTIVITY_STATUS_REJECTED\\\";\n```\n\n----------------------------------------\n\nTITLE: Wallet Export Intent Interface Definition\nDESCRIPTION: TypeScript interface for wallet export functionality with support for multiple languages and encryption settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` | `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` | `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` | `\"MNEMONIC_LANGUAGE_CZECH\"` | `\"MNEMONIC_LANGUAGE_FRENCH\"` | `\"MNEMONIC_LANGUAGE_ITALIAN\"` | `\"MNEMONIC_LANGUAGE_JAPANESE\"` | `\"MNEMONIC_LANGUAGE_KOREAN\"` | `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that combines the delete authenticators result schema from API operations with v1ActivityResponse definitions. This type represents the response structure when deleting authenticators through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteAuthenticatorsResponse = operations[\"PublicApiService_DeleteAuthenticators\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"deleteAuthenticatorsResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Turnkey and ZeroDev\nDESCRIPTION: Command to copy the example environment file and instructions to add necessary environment variables for Turnkey and ZeroDev configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-zerodev-aa/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining TListUserTagsInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines the `TListUserTagsInput` type alias as an object with a `body` property. The `body` property is of type `TListUserTagsBody`, which likely contains the parameters needed for filtering or specifying the user tags to be listed. This input type is used for the `POST /public/v1/query/list_user_tags` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TListUserTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TListUserTagsInput\n *\n * > **TListUserTagsInput** = `object`\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:939](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L939)\n *\n * `POST /public/v1/query/list_user_tags`\n */\n\n/**\n * Properties\n */\n\n/**\n * ### body\n *\n * > **body**: [`TListUserTagsBody`](TListUserTagsBody.mdx)\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:939](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L939)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Types for Comparisons in TypeScript\nDESCRIPTION: Defines a set of operators for various comparison operations in TypeScript, used primarily for querying and filtering data structures. These operators support equality checks, comparisons, and set membership tests, assisting developers in building complex data operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"v1Operator\": \\\"OPERATOR_EQUAL\\\" | \\\"OPERATOR_MORE_THAN\\\" | \\\"OPERATOR_MORE_THAN_OR_EQUAL\\\" | \\\"OPERATOR_LESS_THAN\\\" | \\\"OPERATOR_LESS_THAN_OR_EQUAL\\\" | \\\"OPERATOR_CONTAINS\\\" | \\\"OPERATOR_NOT_EQUAL\\\" | \\\"OPERATOR_IN\\\" | \\\"OPERATOR_NOT_IN\\\" | \\\"OPERATOR_CONTAINS_ONE\\\" | \\\"OPERATOR_CONTAINS_ALL\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagInput Type Alias (TypeScript)\nDESCRIPTION: This snippet defines the TUpdateUserTagInput type alias as an object in TypeScript. The object has a 'body' property, which is expected to be of type TUpdateUserTagBody. This input type is likely used as the input for an API endpoint that updates a user tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserTagInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TUpdateUserTagInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivitiesInput Type in TypeScript\nDESCRIPTION: Type definition for the input parameters of the list_activities API endpoint. The type consists of an object with a body property of type TGetActivitiesBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetActivitiesInput = object\n```\n\n----------------------------------------\n\nTITLE: Sending Credential in Turnkey SDK\nDESCRIPTION: Method for sending an authentication credential with the provided request. Returns a promise that resolves to void.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsendCredential: (request: InitEmailAuthRequest) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Init OTP Authentication Intent in JavaScript\nDESCRIPTION: This intent defines the parameters needed to initiate OTP authentication, including user contact information, email and SMS customization for OTP delivery, and the OTP type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n`initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Activity Method in Turnkey Browser SDK\nDESCRIPTION: This method creates a signed request for retrieving a specific activity. It takes a TGetActivityBody input and returns either undefined or a signed request object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_101\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetActivity(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePrivateKeyTagIntent Type - TypeScript\nDESCRIPTION: Defines the intent for creating a tag associated with private keys, outlining fields for private key IDs and the tag's name. This type facilitates organization and management of private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeyTagIntent {\n  privateKeyIds: string[];\n  privateKeyTagName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Set Organization Feature Intent\nDESCRIPTION: Defines the structure for the `setOrganizationFeatureIntent`, consisting of a `name` and `value`. The `name` indicates the feature to set, while the `value` allows overriding existing settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_30\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `name`: `\\\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBAUTHN_ORIGINS\\\"` \\| `\\\"FEATURE_NAME_EMAIL_AUTH\\\"` \\| `\\\"FEATURE_NAME_EMAIL_RECOVERY\\\"` \\| `\\\"FEATURE_NAME_WEBHOOK\\\"` \\| `\\\"FEATURE_NAME_SMS_AUTH\\\"` \\| `\\\"FEATURE_NAME_OTP_EMAIL_AUTH\\\"; `value`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPolicyInput Type Alias in TypeScript\nDESCRIPTION: The TGetPolicyInput type alias defines an object structure required for querying policy details via a POST request. It relies on the TGetPolicyBody type and is used in the Turnkey SDK's HTTP service at the /public/v1/query/get_policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetPolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetPolicyInput = object\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TGetPolicyBody\n```\n\n----------------------------------------\n\nTITLE: Storage Key: CurrentUser definition\nDESCRIPTION: Defines the 'CurrentUser' member of the `StorageKeys` enumeration. It uses the string literal \"@turnkey/current_user\" as the key for storing the current user in the browser's storage. This key is used to persist the logged-in user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **CurrentUser**: `\"@turnkey/current_user\"`\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent in JavaScript\nDESCRIPTION: This snippet defines an intent to import a wallet with necessary parameters including accounts, encrypted bundle, user ID, and wallet name. It is essential for enabling wallet import functionalities in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/removeOrganizationFeature.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Structure for Activity Management\nDESCRIPTION: This snippet defines the structure of a Promise that returns an object containing various activity-related intents. Each intent captures specific actions that can be performed, such as creating users, managing policies, and handling authenticator actions. The structure includes specific fields like 'canApprove', 'canReject', and various intents with their respective parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\")[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for OTP Authentication\nDESCRIPTION: This snippet defines the result structures for OTP authentication, including the initialization results for OTP and its version 2. Each result returns a unique identifier for the OTP authentication process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_94\n\nLANGUAGE: JSON\nCODE:\n```\nresult.initOtpAuthResult?\n{ otpId: string; }\n\nresult.initOtpAuthResult.otpId\n\nstring\n\nDescription\n\nUnique identifier for an OTP authentication\n\nresult.initOtpAuthResultV2?\n{ otpId: string; }\n\nresult.initOtpAuthResultV2.otpId\n\nstring\n\nDescription\n\nUnique identifier for an OTP authentication.\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteInvitation Function in JavaScript\nDESCRIPTION: This code snippet defines the deleteInvitation function which takes an input parameter and returns a promise. The promise resolution includes an object with various fields such as activity status, invitation details, and user identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteInvitation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deleteInvitation = (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: boolean; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: \"cross-platform\" | \"platform\" | null; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[]; curve: \"CURV\";\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateInvitationsInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias for TCreateInvitationsInput, which is an object used as a parameter in the API call for creating invitations. The body property must conform to the TCreateInvitationsBody type. It is essential for ensuring that the data structures used in API calls are correctly typed, enhancing type safety in TypeScript applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateInvitationsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateInvitationsInput = {\\n  body: TCreateInvitationsBody;\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Activity Response Type Definition in TypeScript\nDESCRIPTION: Defines the complex return type structure for activity responses in the SDK. This includes fields for approval states, timestamps, failure information, and a wide variety of intent types covering organization management, authentication, wallets, and policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUserTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: { \n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: { /* ... extensive intent type definitions ... */ }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Default JWK Member Byte Length in TypeScript\nDESCRIPTION: Declares a constant that specifies the default byte length (32) for JWK (JSON Web Key) members. This constant is derived from the webauthn-json project and is used for encoding operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/variables/DEFAULT_JWK_MEMBER_BYTE_LENGTH.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_JWK_MEMBER_BYTE_LENGTH: 32 = 32\n```\n\n----------------------------------------\n\nTITLE: Defining v1DisablePrivateKeyResult type\nDESCRIPTION: Defines the structure for the result of a disable private key request, containing privateKeyId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DisablePrivateKeyResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1366\n\n#### privateKeyId\n\n> **privateKeyId**: `string`\n\n##### Description\n\nUnique identifier for a given Private Key.\n```\n\n----------------------------------------\n\nTITLE: Configuring API Base URL in TurnkeyConfig\nDESCRIPTION: This code snippet defines the `apiBaseUrl` property within the `TurnkeyConfig` interface. This property specifies the base URL for the Turnkey API, which is used for making requests to the Turnkey service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * **apiBaseUrl**: `string`\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:91](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L91)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Result Structures - TypeScript\nDESCRIPTION: Defines structures used for adding/removing organization features which include an array of features as objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthResponse Type Alias in TypeScript\nDESCRIPTION: The TOauthResponse type alias is part of the operations object, specifically for the 'PublicApiService_Oauth' endpoint. It maps to the schema of a successful 200 response, ensuring type safety and clarity when handling OAuth responses in the API client. The alias is defined as part of the automatically generated HTTP fetching services in Turnkey's SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TOauthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TOauthResponse = operations[\\\"PublicApiService_Oauth\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias: TRemoveOrganizationFeatureResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias called TRemoveOrganizationFeatureResponse, which is used to dictate the structure of the API response from the remove organization feature operation. The alias references a specific schema within the larger operations object of the PublicApiService.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRemoveOrganizationFeatureResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TRemoveOrganizationFeatureResponse\" = `operations`\\[`\"PublicApiService_RemoveOrganizationFeature\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Wallet Export Bundle in JavaScript\nDESCRIPTION: Example of how to inject a wallet export bundle into the iframe using the injectWalletExportBundle method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init the IframeStamper\n\n// Pasted into the iFrame by the user\nconst walletExportBundle = \"<your-encrypted-wallet-export-bundle>\";\n\nconst injected = await iframeStamper.injectWalletExportBundle(walletExportBundle);\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey React SDK using Package Managers\nDESCRIPTION: Commands to install the @turnkey/sdk-react package using npm or yarn package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/documents/React.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-react\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Extracting a Key Encrypted Bundle in TypeScript\nDESCRIPTION: Method to extract an encrypted private key bundle from the iframe. The bundle is encrypted to Turnkey's Signer enclave's initial public key using HPKE.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nextractKeyEncryptedBundle(keyFormat?): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Define TypeScript Type Alias: TGetAttestationDocumentBody\nDESCRIPTION: This code defines a TypeScript type alias named `TGetAttestationDocumentBody`. It uses `Omit` to exclude the `organizationId` property from the original type and then uses an intersection type (`&`) to add `queryOverrideParams`. The original type is retrieved from the operations type associated with the `PublicApiService_GetAttestationDocument` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAttestationDocumentBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TGetAttestationDocumentBody\n *\n * > **TGetAttestationDocumentBody** = `Omit`\\<`operations`[`\"PublicApiService_GetAttestationDocument\"`][`\"parameters\"`][`\"body\"`][`\"body\"`], `\"organizationId\"`\\> & `queryOverrideParams`\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:50](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L50)\n */\n```\n\n----------------------------------------\n\nTITLE: TImportPrivateKeyResponse Type Alias Definition\nDESCRIPTION: Defines a type alias named `TImportPrivateKeyResponse` representing the response schema when importing a private key. It's derived from the `operations` type, specifically targeting the 'PublicApiService_ImportPrivateKey' operation, its '200' response, and the associated schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TImportPrivateKeyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * # Type Alias: TImportPrivateKeyResponse\n *\n * > **TImportPrivateKeyResponse** = `operations`[`\"PublicApiService_ImportPrivateKey\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n *\n * Defined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:2803](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2803)\n *\n * `POST /public/v1/submit/import_private_key`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreateSubOrganizationRequest Interface in TypeScript\nDESCRIPTION: Defines the structure of a request to create a sub-organization, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1CreateSubOrganizationRequest: object\n{\n  organizationId: string,\n  parameters: definitions[\"v1CreateSubOrganizationIntentV7\"],\n  timestampMs: string,\n  type: \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint: Create User Tag\nDESCRIPTION: This defines the API endpoint for creating a user tag and associating it with users. It specifies the HTTP method (POST) and the endpoint URL (/public/v1/submit/create_user_tag).  The input is defined by the `TCreateUserTagInput` type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`POST /public/v1/submit/create_user_tag`\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Endpoint - Update Private Key Tag\nDESCRIPTION: Endpoint for updating human-readable name or associated private keys. The operation is atomic - all updates either succeed or fail together.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePrivateKeyTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /public/v1/submit/update_private_key_tag\n```\n\n----------------------------------------\n\nTITLE: Wallet Deletion Result Types\nDESCRIPTION: TypeScript interface defining the result structure for wallet deletion operations, including wallet ID tracking\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteWallets.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`updateWalletResult`: { `walletId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Version Release Entry\nDESCRIPTION: Example of a version release entry with change categories\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.1\n\n### Patch Changes\n\n- 7b72769: Add sendFromEmailSenderName to sendOtp server action\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Key Tags Intent\nDESCRIPTION: This snippet structures the intent for deleting tags associated with private keys, providing a critical functionality for managing cryptographic metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePrivateKeyTagsIntent? \\n\\{ `privateKeyTagIds`: `string`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deletePrivateKeyTagsIntent.privateKeyTagIds \\n`string`[] \\n\\n**Description** \\nA list of Private Key Tag IDs.\n```\n\n----------------------------------------\n\nTITLE: Activity Status Enumeration\nDESCRIPTION: Defines comprehensive enumeration of possible activity statuses representing different stages of an organizational or authentication process\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`\n```\n\n----------------------------------------\n\nTITLE: Defining TEmailAuthInput Type in TypeScript\nDESCRIPTION: Type definition for email authentication input that specifies the structure of requests to the email authentication endpoint. The type requires a body parameter of type TEmailAuthBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TEmailAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTEmailAuthInput = object\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Type Definitions\nDESCRIPTION: Comprehensive type definitions for activity statuses, result types, and activity types. Includes various operation results like email recovery, OAuth, OTP auth, and organizational management functions. Defines timestamps and vote structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteInvitation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nEmailRecoveryResult: { userId: string; };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Running the Stackblitz Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Stackblitz example environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eth-passkeys-galore/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Legacy Transaction Output\nDESCRIPTION: Sample console output showing successful legacy transaction details including network info, address, balance and transaction hashes\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-ethers/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNetwork:\n\tsepolia (chain ID 11155111)\n\nAddress:\n\t0xc4f1EF91ea582E3020E9ac155c3b5B27ce1185Dd\n\nBalance:\n\t0.049896964862611 Ether\n\nTransaction count:\n\t4\n\nTurnkey-signed transaction:\n\t0xf86c048308b821825208942ad9ea1e677949a536a270cec812d6e868c881088609184e72a000808401546d72a0883137063bfa04e1c6be6f79789f53e4226455ae1cbc4d610d164334a6e12c83a06dae6bd75b6cb28a7ed2548f207f860dd56a49c4bd63a642d7728d592225e408\n```\n\n----------------------------------------\n\nTITLE: Documenting the 'body' Property of TGetPrivateKeyInput\nDESCRIPTION: This code snippet documents the 'body' property within the TGetPrivateKeyInput type alias.  It specifies that 'body' is of type TGetPrivateKeyBody, likely defining the specific parameters needed for the private key retrieval request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPrivateKeyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n### body\n\n> **body**: [`TGetPrivateKeyBody`](TGetPrivateKeyBody.mdx)\n```\n\n----------------------------------------\n\nTITLE: TurnkeyDirectWallet Class Properties\nDESCRIPTION: Core properties of the TurnkeyDirectWallet class including organizationId, prefix, and signWith fields.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/classes/TurnkeyDirectWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly organizationId: string;\nreadonly prefix: string;\nreadonly signWith: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TEmailAuthResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named TEmailAuthResponse, which is a combination of a specific API operation's response schema and a general activity response definition. It leverages TypeScript's ability to create composite types using the '&' operator, making it suitable for use in applications that interact with the Turnkey SDK's email authentication service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TEmailAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TEmailAuthResponse = operations[\"PublicApiService_EmailAuth\"] [\"responses\"] [\"200\"] [\"schema\"] [\"activity\"] [\"result\"] [\"emailAuthResult\"] & definitions[\"v1ActivityResponse\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication FilterType Enum in TypeScript\nDESCRIPTION: Enumeration defining different types of authentication filters used in the Turnkey React SDK. Includes options for email, phone number, OIDC token, and public key based filtering.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/enumerations/FilterType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum FilterType {\n  Email = \"EMAIL\",\n  PhoneNumber = \"PHONE_NUMBER\",\n  OidcToken = \"OIDC_TOKEN\",\n  PublicKey = \"PUBLIC_KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links\nDESCRIPTION: Documentation navigation links showing the hierarchical structure from root SDK docs down to the exportPrivateKey documentation\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / exportPrivateKey\n```\n\n----------------------------------------\n\nTITLE: Clearing the Embedded Key in TypeScript\nDESCRIPTION: Method to clear the embedded key within the iframe. Used when you want to reset the iframe's state.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclearEmbeddedKey(): Promise<null>\n```\n\n----------------------------------------\n\nTITLE: Wallet Deletion Activity Status Types\nDESCRIPTION: Defines the possible status states for wallet deletion activities, including created, pending, completed, failed, and consensus states\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteWallets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatus`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure - TypeScript\nDESCRIPTION: This snippet outlines the result structure for the OAuth operation, including parameters such as apiKeyId, credentialBundle, and userId, which are essential for managing OAuth sessions and user identifications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent Structure - JavaScript\nDESCRIPTION: Outlines the 'updateUserIntent', which allows for updating user information such as name, email, and phone number. This structure supports maintaining user profiles and ensuring accurate communication channels.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n`updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Activity Interface Type Definitions in TypeScript\nDESCRIPTION: Defines the structure of activity results and enums including email recovery, OAuth, OTP authentication, organization features, payment methods, signatures, and various activity statuses and types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePrivateKeyTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PathFormat Type Alias in TypeScript\nDESCRIPTION: Creates a type alias PathFormat that references the v1PathFormat property from TurnkeyApiTypes interface. This type definition is used for path formatting in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/PathFormat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPathFormat = TurnkeyApiTypes[\"v1PathFormat\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication\nDESCRIPTION: Example of completing OAuth authentication flow with OIDC token\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst oauthSession = await server.oauth({\n  suborgID: suborgId!,\n  oidcToken: credential,\n  targetPublicKey: authIframeClient?.iframePublicKey!,\n  sessionLengthSeconds: authConfig.sessionLengthSeconds,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Rate Limits Response Type\nDESCRIPTION: Type alias that specifies the structure of the rate limits test response from the Turnkey Public API service. Represents the schema for a successful 200 OK response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TTestRateLimitsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTTestRateLimitsResponse = operations[\"PublicApiService_TestRateLimits\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining type v1WalletResult\nDESCRIPTION: This snippet defines the type `v1WalletResult` as an object. This type represents the result of a wallet creation or retrieval operation, including the wallet's addresses and ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1WalletResult**: `object`\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: The `stampCreatePrivateKeys` function manages the creation of private keys, accepting TCreatePrivateKeysBody as input. It returns a promise with possibly TSignedRequest, meeting needs for secure private key generation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreatePrivateKeys**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:1134](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1134)\n\n#### Parameters\n\n##### input\n\n`TCreatePrivateKeysBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Type Definition for TCreateReadOnlySessionInput in TypeScript\nDESCRIPTION: Defines the TCreateReadOnlySessionInput type alias used for the API endpoint POST /public/v1/submit/create_read_only_session. This type has a single property 'body' of type TCreateReadOnlySessionBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadOnlySessionInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TCreateReadOnlySessionInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Clearing the IframeStamper from DOM in TypeScript\nDESCRIPTION: Method to remove the iframe from the DOM. Used for cleanup when the stamper is no longer needed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for setOrganizationFeature in TypeScript\nDESCRIPTION: The function signature for setOrganizationFeature, which accepts an input parameter and returns a Promise containing a complex object structure with organization activity data, authentication information, and various intent configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOrganizationFeature(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { ... }; ... }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Status and Type Constants in TypeScript\nDESCRIPTION: This snippet creates enumerations for the various activity statuses and types that the application may handle. The structure enhances the readability and maintainability of the code by providing meaningful names for these constants.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: \\\"ACTIVITY_STATUS_CREATED\\\" \\| \\\"ACTIVITY_STATUS_PENDING\\\" \\| \\\"ACTIVITY_STATUS_COMPLETED\\\" \\| \\\"ACTIVITY_STATUS_FAILED\\\" \\| \\\"ACTIVITY_STATUS_CONSENSUS_NEEDED\\\" \\| \\\"ACTIVITY_STATUS_REJECTED\\\";\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`type`: \\\"ACTIVITY_TYPE_CREATE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_INVITATIONS\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USER_TAGS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION\\\" \\| \\\"ACTIVITY_TYPE_APPROVE_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_REJECT_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V2\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\\\" \\| \\\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\\\" \\| \\\"ACTIVITY_TYPE_RECOVER_USER\\\" \\| \\\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICIES\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\\\" \\| \\\"ACTIVITY_TYPE_OAUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_WALLETS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\\\" \\| \\\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V3\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\\\";\n```\n\n----------------------------------------\n\nTITLE: Delete OAuth Providers Stamp Method\nDESCRIPTION: Method to stamp requests for deleting OAuth providers. Accepts a TDeleteOauthProvidersBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteOauthProviders(input: TDeleteOauthProvidersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation: Delete Sub Organization\nDESCRIPTION: This section documents the API endpoint for deleting a sub-organization.  It specifies that the endpoint is `POST /public/v1/submit/delete_sub_organization` and that it takes an input of type `TDeleteSubOrganizationInput`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteSubOrganization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nDelete Sub Organization\n\nDeletes a sub organization\n\n`POST /public/v1/submit/delete_sub_organization`\n\n## Parameters\n\n### input\n\n[`TDeleteSubOrganizationInput`](../type-aliases/TDeleteSubOrganizationInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Converting Hex String to Base64URL in TypeScript\nDESCRIPTION: Function signature for converting a hexadecimal string to base64url format. Takes a string input parameter and an optional length parameter, returning the converted string in base64url encoding.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/hexStringToBase64url.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhexStringToBase64url(input: string, length?: number): string\n```\n\n----------------------------------------\n\nTITLE: Specifying TOauthInput Properties in TypeScript\nDESCRIPTION: Defines the body property of the TOauthInput type alias. The body is of type TOauthBody, which likely contains OAuth-related information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOauthInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TOauthBody\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enum in TypeScript\nDESCRIPTION: This snippet creates a TypeScript union type for activity types, facilitating error-free usage across the SDK by restricting values to a predefined set of activity type constants.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/setOrganizationFeature.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_APTOS_ACCOUNTS as WalletAccount Array in TypeScript\nDESCRIPTION: Defines DEFAULT_APTOS_ACCOUNTS as a constant array consisting of objects of type WalletAccount. This variable is intended to centralize the initialization and usage of default Aptos accounts within the SDK. Prerequisites include familiarity with the WalletAccount type and the overall structure of the Turnkey SDK’s browser version.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_APTOS_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_APTOS_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Navigation Links for Turnkey SDK Documentation\nDESCRIPTION: Markdown links forming the navigation breadcrumb structure for the SDK documentation, leading to the createSubOrganization method documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createSubOrganization\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumInput Type Alias - TypeScript\nDESCRIPTION: This snippet defines the type alias TUpdateRootQuorumInput as an object that includes a single property named body, which is of type TUpdateRootQuorumBody. This type alias is intended for use with the API endpoint that updates the root quorum configuration in a system, specifying the structure of the request body for that operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TUpdateRootQuorumInput = {\\n    body: TUpdateRootQuorumBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for importing wallets within the SDK. It specifies the necessary parameters such as 'accounts,' 'encryptedBundle,' 'userId,' and 'walletName' which are required to initiate the wallet import process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteSubOrganization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: apiPublicKey Property\nDESCRIPTION: This property holds the public API key as a string, used for public authentication when interacting with the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/ApiKeyStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napiPublicKey: string\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure in TypeScript\nDESCRIPTION: Defines the structure for OAuth results, including apiKeyId, credentialBundle, and userId as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\noauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication\nDESCRIPTION: Handles OAuth authentication process. Takes a TOauthBody input parameter and returns a Promise with object data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\noauth(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetSubOrgIdsInput Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for the input parameters of the sub-organization IDs query endpoint. The type consists of a single required property 'body' which is of type TGetSubOrgIdsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetSubOrgIdsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Result Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for the result of updating a user, which includes a userId as a string. It facilitates user management operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Invitation Deletion Result - TypeScript\nDESCRIPTION: Describes the result returned after deleting an invitation, confirming the unique invitation ID of the deleted object. This is vital for feedback to the requester.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteInvitationResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1204\n */\nexport interface v1DeleteInvitationResult {\n  invitationId: string; // Unique identifier for a given Invitation.\n}\n```\n\n----------------------------------------\n\nTITLE: TImportPrivateKeyInput Type Alias Definition\nDESCRIPTION: Defines the structure for the input of the `import_private_key` API call. The input consists of a `body` property, which is of type `TImportPrivateKeyBody`. This definition is used when submitting a request to import a private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TImportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **TImportPrivateKeyInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:48438\n *\n * `POST /public/v1/submit/import_private_key`\n */\n\n/**\n * ### body\n *\n * > **body**: [`TImportPrivateKeyBody`](TImportPrivateKeyBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:48439\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent in JavaScript\nDESCRIPTION: This intent is part of the SDK's operations for importing a user's wallet. It includes various parameters such as accounts, encrypted bundle, and the wallet name, facilitating a secure wallet import process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n`importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining styles Property in TIframeSettings\nDESCRIPTION: This code snippet defines the optional `styles` property within the `TIframeSettings` type. The `styles` property is of type `TIframeStyles`, which presumably contains styling information for the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/type-aliases/TIframeSettings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **styles**: [`TIframeStyles`](TIframeStyles.mdx)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Parsing API Keys\nDESCRIPTION: Provides methods to retrieve, parse, and validate cloud storage API keys. Supports key extraction, format checking, and string representation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/classes/TelegramCloudStorageStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetAPIKey(key: string = DEFAULT_TURNKEY_CLOUD_STORAGE_KEY): Promise<null | CloudStorageAPIKey>\nparseAPIKey(apiKey: string): null | { apiPrivateKey: any; apiPublicKey: any; }\nstringifyAPIKey(apiPublicKey: string, apiPrivateKey: string): string\nisCloudStorageAPIKey(apiKey: CloudStorageAPIKey): boolean\n```\n\n----------------------------------------\n\nTITLE: Declaring TSignRawPayloadsResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias named TSignRawPayloadsResponse, which is a specific schema response for the 'PublicApiService_SignRawPayloads' operation. It is used to handle HTTP 200 responses from the /public/v1/submit/sign_raw_payloads endpoint. The alias is a part of type definitions generated within the 'public_api.fetcher' module.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TSignRawPayloadsResponse = operations[\\\"PublicApiService_SignRawPayloads\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining defaultXrpAccountAtIndex Function in TypeScript\nDESCRIPTION: This function retrieves a WalletAccount at a specified index, allowing for flexible access to different wallet accounts based on the provided pathIndex parameter. It is defined in the turnkey-helpers module and returns an instance of the WalletAccount interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultXrpAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultXrpAccountAtIndex(pathIndex: number): WalletAccount { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining ApplySettings Enumeration\nDESCRIPTION: This snippet defines the ApplySettings event type as part of an enumeration in TypeScript, representing an action to apply settings in the iframe context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nApplySettings: \"APPLY_SETTINGS\"\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Sign Result Structure in TypeScript\nDESCRIPTION: This code snippet details the result of signing raw payloads, with properties 'r', 's', and 'v', all being strings, useful for cryptographic signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `r`: `string`; `s`: `string`; `v`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Type Enum in TypeScript\nDESCRIPTION: Enumeration defining the available OTP (One-Time Password) delivery methods: Email and SMS. Used for specifying the authentication method in the Turnkey SDK React components.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/enumerations/OtpType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum OtpType {\n  Email = \"OTP_TYPE_EMAIL\",\n  Sms = \"OTP_TYPE_SMS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Create API Keys Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for creating API keys. It specifies the HTTP method (POST), the endpoint URL, and the input parameter type for the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nCreate API Keys\n\nAdd api keys to an existing User\n\n`POST /public/v1/submit/create_api_keys`\n\n## Parameters\n\n### input\n\n[`TCreateApiKeysInput`](../type-aliases/TCreateApiKeysInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys via API Endpoint in TypeScript\nDESCRIPTION: This code snippet defines an API endpoint for deleting private keys in an organization. It uses a POST request to '/public/v1/submit/delete_private_keys' and expects an input of type TDeletePrivateKeysInput.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Delete Private Keys\n *\n * Deletes private keys for an organization\n *\n * POST /public/v1/submit/delete_private_keys\n *\n * @param input TDeletePrivateKeysInput\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Update User Tag API Endpoint in TypeScript\nDESCRIPTION: This snippet defines the API endpoint for updating a user tag. It specifies the HTTP method, path, and input parameter type for the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUserTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nUpdate User Tag\n\nUpdate human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n\n`POST /public/v1/submit/update_user_tag`\n\n## Parameters\n\n### input\n\n[`TUpdateUserTagInput`](../type-aliases/TUpdateUserTagInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Initializing Iframe Client\nDESCRIPTION: This snippet explains how to initialize the Iframe client to interact with hosted iframes for sensitive operations. It specifies the iframeContainer and iframeUrl parameters, demonstrating interaction with an Email Auth process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/README.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst iframeClient = await turnkey.iframeClient({\n  // The container element that will host the iframe\n  iframeContainer: document.getElementById(\"<iframe container id>\"),\n  iframeUrl: \"https://auth.turnkey.com\",\n});\n\nconst injectedResponse = await iframeClient.injectCredentialBundle(\n  \"<Credential from Email>\",\n);\nif (injectedResponse) {\n  await iframeClient.getWallets();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActivateBillingTierIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for activating a billing tier, including the product ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ActivateBillingTierIntent = {\n  productId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Types in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for activity statuses and types in the Coordinator API. It includes various status values and a comprehensive list of activity types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWhoamiRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get the current user's information, including organizationId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWhoamiRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This snippet defines a detailed TypeScript type for a Promise return value. It includes nested objects for activities, intents, and various crypto-related operations. The structure is highly complex, covering numerous use cases for the Turkeydao SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/rejectActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: {\n                rk: any;\n              };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n              clientDataJson: string;\n              transports: any[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      // ... (many more intent types)\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the version update to 0.1.1 and lists the dependency updates for @turnkey/http and @turnkey/crypto packages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [3c44c4a]\n  - @turnkey/http@2.20.0\n  - @turnkey/crypto@2.3.1\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Intents\nDESCRIPTION: This snippet includes intent structures necessary for signing transactions within the cryptocurrency SDK environment. It details required fields for transaction signing type specifications and payload handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Creation Intents in TypeScript\nDESCRIPTION: This snippet describes the structure of different intents related to user creation, including API keys, authentications, and other user-associated objects. It outlines properties for defining users, their roles, and their authenticator methods.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTransaction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`createApiKeysIntent`: \\{ `apiKeys`: `object`\\[]; `userId`: `string`; \\};`\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication Intent Definitions\nDESCRIPTION: TypeScript interfaces for OTP authentication with extensive customization options for email and SMS templates\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activities in TypeScript\nDESCRIPTION: Method to fetch activities using the Turnkey Browser SDK. Accepts optional input parameters and returns a Promise with a list of activity objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ngetActivities(input: TGetActivitiesBody = {}): Promise<{ activities: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePoliciesResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias 'TCreatePoliciesResponse' which represents the structure of the response returned by the 'create_policies' endpoint in the Public API of the SDK. The type encapsulates the operation and expected schema of a successful response. No additional dependencies are required beyond standard TypeScript functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreatePoliciesResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePoliciesResponse = operations[\"PublicApiService_CreatePolicies\"][\"responses\"][\"200\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Setting Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the result of setting organization features, which includes an array of feature objects. It is essential for tracking the outcomes of feature updates.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_SOLANA_ACCOUNTS Constant in TypeScript\nDESCRIPTION: This snippet defines a constant 'DEFAULT_SOLANA_ACCOUNTS' that holds an array of WalletAccount objects, intended for use in the Solana SDK functionalities. The WalletAccount interface is defined in a separate file. The constant is critical for initializing default accounts when the SDK interacts with the Solana blockchain.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_SOLANA_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_SOLANA_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining iframeElementId Property\nDESCRIPTION: This snippet specifies the iframeElementId property of the TIframeStamperConfig type, which is expected to be a string. This property holds the unique identifier for the iframe element in the DOM, enabling efficient selection and manipulation of the element.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TIframeStamperConfig.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\niframeElementId: string;\n```\n\n----------------------------------------\n\nTITLE: Converting Uint8Array to Hex String - TypeScript Function Signature\nDESCRIPTION: Function signature for uint8ArrayToHexString that takes a Uint8Array parameter and returns a hexadecimal string representation. Function is located in index.ts file of the encoding package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/uint8ArrayToHexString.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction uint8ArrayToHexString(input: Uint8Array): string\n```\n\n----------------------------------------\n\nTITLE: Extracting Key Bundle with TurnkeyIframeClient\nDESCRIPTION: Demonstrates extracting an encrypted key bundle from an iframe for secure key credential retrieval.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Extracts the encrypted key bundle from the iframe\nconst keyBundle = await iframeClient.extractKeyEncryptedBundle();\n```\n\n----------------------------------------\n\nTITLE: Defining the v1ExportWalletResult object\nDESCRIPTION: Defines the structure of the v1ExportWalletResult object, representing the result of exporting a wallet. It contains the export bundle (exportBundle), which includes a wallet mnemonic and optional newline passphrase encrypted by the client's target public key, and the unique identifier for the wallet (walletId). This object is returned by the server upon successful export of the wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1ExportWalletResult\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1494\n\n#### exportBundle\n\n> **exportBundle**: `string`\n\n##### Description\n\nExport bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.\n\n#### walletId\n\n> **walletId**: `string`\n\n##### Description\n\nUnique identifier for a given Wallet.\"\n```\n\n----------------------------------------\n\nTITLE: Invitation Intent Authentication Structure\nDESCRIPTION: Defines the structure for accepting invitations with WebAuthN authenticator details, including user identification and challenge verification\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  authenticator: {\n    attestation: WebAuthNAttestation,\n    authenticatorName: string,\n    challenge: string,\n    userId: string\n  },\n  invitationId: string,\n  userId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tags - TypeScript\nDESCRIPTION: The function `stampCreatePrivateKeyTag` requires input of type `TCreatePrivateKeyTagBody` and returns a promise resolving to undefined or a `TSignedRequest`, facilitating the creation of private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreatePrivateKeyTag(input: TCreatePrivateKeyTagBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the updateRootQuorum Method in TypeScript\nDESCRIPTION: Method declaration for updateRootQuorum that updates root quorum settings and returns a promise with the response object. Takes a TUpdateRootQuorumBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_130\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateRootQuorum(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Turnkey SDK Documentation\nDESCRIPTION: Navigation breadcrumb links for accessing SDK documentation, connecting the main SDK docs to the specific API endpoint documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createApiOnlyUsers\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateRootQuorum API Endpoint in TypeScript\nDESCRIPTION: Specifies the API endpoint for updating the root quorum. It includes the HTTP method, path, and input parameter type for the operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateRootQuorum.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TUpdateRootQuorumInput`](../type-aliases/TUpdateRootQuorumInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: Sample Trading Commands Using CLI\nDESCRIPTION: Examples of trading commands showing how to exchange assets using the CLI tool, demonstrating both ETH/WETH and USDC trading pairs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/trading-runner/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli trade --baseAsset=ETH --quoteAsset=USDC --baseAmount=0.001 --key=bob # will auto-wrap ETH into WETH\npnpm cli trade --baseAsset=WETH --quoteAsset=USDC --baseAmount=0.001 --key=bob\npnpm cli trade --baseAsset=USDC --quoteAsset=WETH --baseAmount=1000 --key=bob\npnpm cli trade --baseAsset=USDC --quoteAsset=ETH --baseAmount=1000 --key=bob # will auto-unwrap WETH into ETH\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/webauthn-stamper via npm\nDESCRIPTION: Command to install the @turnkey/webauthn-stamper package using npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/webauthn-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining TInitOtpAuthInput Alias in TypeScript\nDESCRIPTION: The TInitOtpAuthInput type alias represents an object used in the SDK for initializing OTP (One-Time Password) authentication. It includes a property 'body' that references the TInitOtpAuthBody type. This type is defined in the sdk_api_types.ts file at line 655. The type ensures that all necessary fields for initializing OTP authentication are available and correctly typed. It relies on TypeScript for type-checking and static analysis.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TInitOtpAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TInitOtpAuthInput = {\n  body: TInitOtpAuthBody\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Update User Result Structure in TypeScript\nDESCRIPTION: Defines the structure for updating user results, including userId as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserResult`: \\{ `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Export Wallet Account Result Structure\nDESCRIPTION: This snippet outlines the 'exportWalletAccountResult', defining the address and export bundle for the wallet account, both formatted as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_90\n\nLANGUAGE: json\nCODE:\n```\nresult.exportWalletAccountResult?\n\\{ `address`: `string`; `exportBundle`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Rebalancer Example\nDESCRIPTION: Commands to clone the SDK repository, install dependencies, and set up the rebalancer example project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/rebalancer/\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payloads Signing Results Structure in TypeScript\nDESCRIPTION: Provides the structure for the response obtained when signing multiple raw payloads, which includes an array of signatures. This structure aids in managing and interpreting responses when multiple payloads are processed simultaneously in a TypeScript environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and build the source code before navigating to the wallet-import-export example directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/wallet-import-export/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/wallet-import-export/\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticators with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: The function `stampCreateAuthenticators` is to create authenticators, taking TCreateAuthenticatorsBody as input. It provides a promise resulting in either a TSignedRequest or undefined, fulfilling needs for managing authentication mechanisms securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreateAuthenticators**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:913](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L913)\n\n#### Parameters\n\n##### input\n\n`TCreateAuthenticatorsBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Getting Read-Write Session (Deprecated) in Turnkey\nDESCRIPTION: This method is deprecated and superseded by `getSession`. If a valid, current read-session exists, this method returns an authentication bundle and its expiration. This bundle can then be used with an iframe stamper to establish a read + write session. The method returns a Promise resolving to a `ReadWriteSession` or `undefined`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * If there is a valid, current read-session, this will return an auth bundle and its expiration. This auth bundle can be used in conjunction with an iframeStamper to create a read + write session.\n *\n * @deprecated use `getSession` instead\n */\ngetReadWriteSession(): Promise<undefined | ReadWriteSession>\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Result Structure in TypeScript\nDESCRIPTION: This snippet defines the result structure for updating a policy, which includes a policy ID as a string to reference the updated policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nupdatePolicyResult: { policyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining stampImportPrivateKey Method in TypeScript\nDESCRIPTION: Method to create a signed request for importing a private key. Takes a TImportPrivateKeyBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_123\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportPrivateKey(input: TImportPrivateKeyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining signGetWallet Function\nDESCRIPTION: The signGetWallet function is defined using TypeScript and is responsible for requesting a WebAuthn assertion. It accepts input parameters of type TGetWalletInput and an optional options parameter of type TurnkeyCredentialRequestOptions. The function returns a Promise that resolves to a SignedRequest, which can be used for POSTing to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signGetWallet: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeyClient and TurnkeySigner with API Key in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a TurnkeyClient using API key credentials and create a TurnkeySigner. It shows the updated interface supporting signing with wallet account addresses, private key addresses, or private key IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst turnkeyClient = new TurnkeyClient(\n  {\n    baseUrl: \"https://api.turnkey.com\",\n  },\n  // This uses API key credentials.\n  // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:\n  // new WebauthnStamper({...options...})\n  new ApiKeyStamper({\n    apiPublicKey: \"...\",\n    apiPrivateKey: \"...\",\n  }),\n);\n\n// Initialize a Turnkey Signer\nconst turnkeySigner = new TurnkeySigner({\n  client: turnkeyClient,\n  organizationId: \"...\",\n  signWith: \"...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersInput Type in TypeScript\nDESCRIPTION: Type alias definition for the input structure used when making DELETE requests to the OAuth providers endpoint. It contains a body property of type TDeleteOauthProvidersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteOauthProvidersInput = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePolicyResponse Type Alias in TypeScript\nDESCRIPTION: Defines a type alias that maps to the response schema of the POST /public/v1/submit/create_policy endpoint. The type references the operations object structure specifically for the 200 success response of the PublicApiService_CreatePolicy operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreatePolicyResponse = operations[\"PublicApiService_CreatePolicy\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumBody Type in TypeScript\nDESCRIPTION: Type alias that references the request body parameters for the PublicApiService_UpdateRootQuorum operation. The type is extracted from the operations object's nested structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateRootQuorumBody = operations[\"PublicApiService_UpdateRootQuorum\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Expiry Property Explanation\nDESCRIPTION: Represents the token's expiration time in seconds since the Unix epoch, indicating when the token becomes invalid\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/interfaces/ReadOnlySession.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** Token expiry time in Unix epoch seconds */\nexpiry: number;\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition that maps to the response schema of the GetAuthenticators API endpoint. The type corresponds to the 200 success response schema from the PublicApiService_GetAuthenticators operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetAuthenticatorsResponse = operations[\"PublicApiService_GetAuthenticators\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure - TypeScript\nDESCRIPTION: This snippet describes the user recovery result structure containing an array of authenticatorIds. It is used to handle user recovery processes in the SDK effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Field Values in TypeScript\nDESCRIPTION: This snippet sets the possible string values representing the status of an activity, including options like 'ACTIVITY_STATUS_CREATED', 'ACTIVITY_STATUS_PENDING', and others.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining SettingsApplied Enumeration\nDESCRIPTION: This snippet defines the SettingsApplied event type in TypeScript, indicating that settings have been successfully applied in the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nSettingsApplied: \"SETTINGS_APPLIED\"\n```\n\n----------------------------------------\n\nTITLE: Defining VERSION Constant for @turnkey/http Package in TypeScript\nDESCRIPTION: This snippet defines a constant VERSION with the current version of the @turnkey/http package. It's typed as a string literal for precise version control.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/variables/VERSION.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst VERSION: \"@turnkey/http@3.0.0\" = \"@turnkey/http@3.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1RecoverUserIntent type\nDESCRIPTION: Defines the structure for a user recovery intent, including the new authenticator to register and the user ID performing the recovery. This structure facilitates the process of recovering a user account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\n            v1RecoverUserIntent: {\n                name: \"v1RecoverUserIntent\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        authenticator: {\n                            $ref: \"#/definitions/v1AuthenticatorParamsV2\",\n                            description: \"The new authenticator to register.\",\n                            required: true\n                        },\n                        userId: {\n                            type: \"string\",\n                            description: \"Unique identifier for the user performing recovery.\",\n                            required: true\n                        }\n                    },\n                    required: [\"authenticator\", \"userId\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for various activity results in the Coordinator API. It includes structures for OTP authentication, user recovery, organization features, payment methods, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nOtpAuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorsInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias for TGetAuthenticatorsInput as an object. It contains a property 'body' which is of the type TGetAuthenticatorsBody. This alias is essential for ensuring type safety when working with authenticator inputs within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Type Alias: TGetAuthenticatorsInput\n\n> **TGetAuthenticatorsInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Importing Telegram Cloud Storage Stamper (v2.0.0+)\nDESCRIPTION: Demonstrates the updated import syntax for version 2.0.0 and later, using only named exports for consistency.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TelegramCloudStorageStamper,\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enumeration in JavaScript\nDESCRIPTION: This snippet defines a string enumeration for various activity statuses, including created, pending, completed, and failed. These constants help maintain consistency when checking the activity states within the SDK operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUser.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n`status`: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining the testRateLimits Method in TypeScript\nDESCRIPTION: Method declaration for testRateLimits that tests API rate limits and returns a promise with an empty object. Takes a TTestRateLimitsBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_127\n\nLANGUAGE: TypeScript\nCODE:\n```\ntestRateLimits(input): Promise<{}>\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application\nDESCRIPTION: Command to start the example application which performs a Whoami request to the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sdk-server/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run start\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Wallet Accounts Request in TypeScript\nDESCRIPTION: Method to stamp a request for creating wallet accounts. It takes an input of type TCreateWalletAccountsBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWalletAccounts(input: TCreateWalletAccountsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Payment Method Management Intents in TypeScript\nDESCRIPTION: Defines structures for setting payment methods. Includes fields for card details in the original version and payment method ID in the v2 implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for signDeleteOauthProviders in TypeScript\nDESCRIPTION: Declaration of the signDeleteOauthProviders function that creates a WebAuthn-authenticated request to delete OAuth providers. It takes an input parameter of type TDeleteOauthProvidersInput and optional credential request options, returning a Promise containing a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeleteOauthProviders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeleteOauthProviders: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining type for curve field\nDESCRIPTION: This snippet defines the type for the `curve` field within `v1WalletAccountParams`. It uses a type alias `definitions` with the key `v1Curve` to specify the cryptographic curve used for generating a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n> **curve**: `definitions`[`\"v1Curve\"`]\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateAuthenticatorsIntent Type\nDESCRIPTION: Defines the structure for the `v1CreateAuthenticatorsIntent` object, representing the intent to create authenticators. It contains an array of `v1AuthenticatorParams` and a `userId`. This intent is likely passed as part of a request to the Coordinator service to create authenticators for a specific user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateAuthenticatorsIntent\n * @property {definitions[\"v1AuthenticatorParams\"][]} authenticators A list of Authenticators.\n * @property {string} userId Unique identifier for a given User.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Delete Users Parameters - TypeScript\nDESCRIPTION: The TDeleteUsersBody type alias is defined to specify the structure of the request body for the PublicApiService_DeleteUsers operation. It combines parameters from the specified operation along with any commandOverrideParams to allow for flexible and safe API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TDeleteUsersBody = operations[\\\"PublicApiService_DeleteUsers\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response - TypeScript\nDESCRIPTION: Defines a type alias TListUserTagsResponse for handling HTTP response schemas in TypeScript. This alias represents the schema for a successful 200 HTTP response from the PublicApiService_ListUserTags operation. Dependencies include correct import of the 'operations' type from the Turnkey API SDK generated services. It is used to standardize response handling for API queries related to user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TListUserTagsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TListUserTagsResponse = operations[\\\"PublicApiService_ListUserTags\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Turnkey SDK Repository (Bash)\nDESCRIPTION: Commands to clone the Turnkey SDK repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk/\n$ cd sdk/\n```\n\n----------------------------------------\n\nTITLE: Installing WebauthnStamper Package\nDESCRIPTION: Commands for installing the @turnkey/webauthn-stamper package using different package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/webauthn-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/webauthn-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/webauthn-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: Defines a complex type for activity results, including various subtypes for different activity outcomes such as API key creation, user management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityResult = {\n  createApiKeysResult: { apiKeyId: string; };\n  createUsersResult: { userId: string; };\n  // ... many other result types\n  updateWalletResult: { walletId: string; };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Default Bitcoin Regtest P2PKH Accounts in TypeScript\nDESCRIPTION: This snippet defines a constant named DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS, which is an array of WalletAccount objects intended for use in Bitcoin regtest transactions. It is essential for developers working with the Turnkey SDK to interact with Bitcoin accounts in a test environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2PKH_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies using pnpm, and build the source code before navigating to the example directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eip-1193-provider/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-eip-1193-provider/\n```\n\n----------------------------------------\n\nTITLE: Normalizing Byte Array Padding in TypeScript\nDESCRIPTION: Function that takes a Uint8Array and normalizes its length by either padding with zeros or trimming to match a target length. Returns a new Uint8Array of the specified length.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/normalizePadding.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnormalizePadding(byteArray: Uint8Array, targetLength: number): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Setting up Iframe Client Integration\nDESCRIPTION: Implementation of Iframe client for handling sensitive operations through hosted iframes, specifically for Email Auth flow\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst iframeClient = await turnkey.iframeClient({\n  // The container element that will host the iframe\n  iframeContainer: document.getElementById(\"<iframe container id>\"),\n  iframeUrl: \"https://auth.turnkey.com\",\n});\n\nconst injectedResponse = await iframeClient.injectCredentialBundle(\n  \"<Credential from Email>\",\n);\nif (injectedResponse) {\n  await iframeClient.getWallets();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias: TGetVerifiedSubOrgIdsResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias named TGetVerifiedSubOrgIdsResponse, representing the structure of the response object returned by the PublicApiService_GetVerifiedSubOrgIds operation. It maps to the status '200' schema for responses, providing a structured way to handle these API results throughout the SDK implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetVerifiedSubOrgIdsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetVerifiedSubOrgIdsResponse = operations[\\\"PublicApiService_GetVerifiedSubOrgIds\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Migration Changes for ethers v6 - BigNumber to bigint\nDESCRIPTION: Example showing how to migrate from BigNumber to native ES6 bigint for numerical comparisons.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nif (balance.isZero()) {...}\n\n// after\nif (balance === 0n) {...}\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Result Structure in TypeScript\nDESCRIPTION: This snippet defines the result structure for updating a wallet, which includes a wallet ID string to ensure that the correct wallet is referenced in the response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Starting the NextJS Development Server\nDESCRIPTION: Command to start the NextJS development server which runs the OAuth example application on port 3000.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/oauth/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown links showing the documentation hierarchy and navigation structure for the createInvitations API method documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/sdk-server](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createInvitations\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Result Structure - TypeScript\nDESCRIPTION: Defines the structure for wallet update results which holds an identifier for the updated wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Deleting Wallets Intent\nDESCRIPTION: This snippet sets up the intent for deleting wallets associated with a user or organization, including optional parameters to manage export requirements.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteWalletsIntent? \\n\\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteWalletsIntent.deleteWithoutExport? \\n`boolean` \\n\\n**Description** \\nOptional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteWalletsIntent.walletIds \\n`string`[] \\n\\n**Description** \\nList of unique identifiers for wallets within an organization.\n```\n\n----------------------------------------\n\nTITLE: Defining Turnkey SDK Activity Types and Result Structures in TypeScript\nDESCRIPTION: This code defines TypeScript type definitions for various result objects returned by Turnkey API operations, along with enumerations for activity statuses and types. It covers a wide range of functionality including authentication, user management, key management, transaction signing, and organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsBody Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the request body parameters for the PublicApiService_CreateWalletAccounts operation. Used for creating wallet accounts through the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateWalletAccountsBody = operations[\"PublicApiService_CreateWalletAccounts\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Example Project\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and set up the ZeroDev account abstraction example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-zerodev-aa/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-zerodev-aa/\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersInput Type in TypeScript\nDESCRIPTION: Type definition for the request input when creating users through the Turnkey API POST /public/v1/submit/create_users endpoint. The type consists of a body property that must conform to the TCreateUsersBody type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateUsersInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateOauthProvidersBody Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias for the request body when creating OAuth providers through the Turnkey API. It references the body parameter type from the PublicApiService_CreateOauthProviders operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateOauthProvidersBody** = `operations`\\[`\"PublicApiService_CreateOauthProviders\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Wallet Structure in Organization Results\nDESCRIPTION: Defines the wallet structure used in various sub-organization result interfaces, containing addresses and wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `addresses`: `string`[]; \n  `walletId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Update Result Structure - TypeScript\nDESCRIPTION: This snippet defines the result structure for updating wallet information, including the walletId. This is essential for managing financial accounts and transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Raw Payload Intent Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for the intent that handles signing a raw payload. It specifies encoding types, hash functions, the payload to be signed, and the associated private key ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n`signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Provider Packages\nDESCRIPTION: Command line instructions for installing the required Turnkey packages using different package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/eip-1193-provider/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/eip-1193-provider @turnkey/http @turnkey/webauthn-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @turnkey/eip-1193-provider @turnkey/http @turnkey/webauthn-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/eip-1193-provider @turnkey/http @turnkey/webauthn-stamper\n```\n\n----------------------------------------\n\nTITLE: Getting Iframe Public Key\nDESCRIPTION: Example of retrieving the public key from an initialized IframeStamper instance.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init the IframeStamper\n\nconst iframePublicKey = iframeStamper.publicKey();\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Management Intents\nDESCRIPTION: Includes intents related to wallet management such as importing, updating, and deleting wallets. Parameters encompass wallet identifiers and configuration details necessary for the respective operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletIntent: { walletId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TNOOPCodegenAnchorResponse Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias called TNOOPCodegenAnchorResponse which references the schema of the 200 response for the PublicApiService_NOOPCodegenAnchor operation in the Turnkey SDK API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TNOOPCodegenAnchorResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TNOOPCodegenAnchorResponse** = `operations`[`\"PublicApiService_NOOPCodegenAnchor\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Server SDK\nDESCRIPTION: Commands to install the @turnkey/sdk-server package using npm or yarn package managers\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-server\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/sdk-server\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TDeleteAuthenticatorsResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias 'TDeleteAuthenticatorsResponse' that represents the response schema for the 'delete_authenticators' operation in the Public API. It is used to ensure that the response structure adheres to expected types when interacting with the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteAuthenticatorsResponse = operations[\"PublicApiService_DeleteAuthenticators\"][\"responses\"][\"200\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Import Private Key - TypeScript\nDESCRIPTION: This type alias TImportPrivateKeyBody is defined to represent the parameters structure for the 'PublicApiService_ImportPrivateKey' API operation within the Turnkey SDK. It combines specific API parameters with any command override parameters that might be necessary for executing the API call.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TImportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TImportPrivateKeyBody = operations[\\\"PublicApiService_ImportPrivateKey\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Approval Activity in TypeScript\nDESCRIPTION: The signApproveActivity function is designed to request a WebAuthn assertion. It takes an input parameter of type TApproveActivityInput and an optional parameter for TurnkeyCredentialRequestOptions, returning a Promise that resolves to a SignedRequest object. This setup allows the function to be utilized for preparing a signed request to be POSTed to Turnkey's API for processing approval activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signApproveActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"const signApproveActivity = (input, options?) => Promise<SignedRequest>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining TActivityStatus Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named TActivityStatus. It is derived from the 'status' property of the TActivity type, suggesting it represents the possible status values for an activity in the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TActivityStatus.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TActivityStatus = TActivity[\"status\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Updated At Timestamp Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for timestamps regarding updates, containing 'nanos' and 'seconds' as string types for precision in recording update times.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `nanos`: `string`; `seconds`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadOnlySessionResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateReadOnlySessionResponse type alias. It represents the response schema for the 'CreateReadOnlySession' operation in the PublicApiService, specifically for the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateReadOnlySessionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateReadOnlySessionResponse = operations[\"PublicApiService_CreateReadOnlySession\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for 'Recover User' Result\nDESCRIPTION: This snippet outlines the expected result for the user recovery process. It provides a structured type that returns an array of authenticator IDs, facilitating better handling of user recovery flows in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUsers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response in TypeScript\nDESCRIPTION: This TypeScript snippet defines a type alias for the `TRejectActivityResponse`, representing the schema of a successful API rejection activity response (HTTP 200). This alias binds to the `PublicApiService_RejectActivity` operation's response schema, ensuring that any response adhering to this alias will follow the expected data structure. It relies heavily on the assumed structure and existence of associated type definitions, reflecting successful operation activity rejections.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TRejectActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TRejectActivityResponse = operations[\\\"PublicApiService_RejectActivity\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Attestation Structure for WebAuthn - TypeScript\nDESCRIPTION: This snippet specifies the structure for user attestation data, including payloads for authenticator data, client data, and credential IDs, relevant for secure interactions with WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1Attestation**: `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:535\n\n#### attestationObject\n\n> **attestationObject**: `string`\n\n##### Description\n\nA base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.\n\n#### clientDataJson\n\n> **clientDataJson**: `string`\n\n##### Description\n\nA base64 url encoded payload containing metadata about the signing context and the challenge.\n\n#### credentialId\n\n> **credentialId**: `string`\n\n##### Description\n\nThe cbor encoded then base64 url encoded id of the credential.\n```\n\n----------------------------------------\n\nTITLE: defaultSolanaAccountAtIndex Function Definition (TypeScript)\nDESCRIPTION: This snippet defines the `defaultSolanaAccountAtIndex` function, which takes a path index (number) as input and returns a `WalletAccount`. It is located in the `turnkey-helpers.ts` file within the `@turnkey/sdk-server` package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultSolanaAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **defaultSolanaAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Approving Recycle Transaction\nDESCRIPTION: Command to approve the recycle transaction using a specific activity ID and user key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli approveActivity --key=alice --id=<ID>\n```\n\n----------------------------------------\n\nTITLE: Defining v1RejectActivityIntent Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for rejecting an activity, including a fingerprint for verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_125\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RejectActivityIntent: object\n\nfingerprint: string\n```\n\n----------------------------------------\n\nTITLE: Complex Promise Return Type Definition in TypeScript\nDESCRIPTION: A complex TypeScript type definition representing the Promise return structure for the tkhq SDK. It includes nested objects for activities, intents, and various data structures related to authentication, organization management, and key handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createReadWriteSession.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; /* Many more intent types omitted for brevity */ }; /* Rest of type definition truncated */ }\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticatorTransport Enumeration Members in TypeScript\nDESCRIPTION: This code snippet defines the enumeration members for AuthenticatorTransport, including various transport types for authentication. The key members include 'ble', 'hybrid', 'internal', 'nfc', 'smartCard', and 'usb', enabling flexible transport option handling in React Native applications. Each member is represented as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/enumerations/AuthenticatorTransport.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AuthenticatorTransport {\n    ble = \"ble\",\n    hybrid = \"hybrid\",\n    internal = \"internal\",\n    nfc = \"nfc\",\n    smartCard = \"smart-card\",\n    usb = \"usb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Creation Intents in TypeScript\nDESCRIPTION: This snippet outlines the structures necessary for creating organizations, specifying properties like organization name and root authenticator details. The data types are defined to enforce consistency in organizational structure creation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signTransaction.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n`createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: `\"cross-platform\"` \\| `\"platform\"` \\| `null`; `clientDataJson`: `string`; `transports`: ...\\[]; \\}; `type`: `\"public-key\"`; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\};`\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Provider Deletion Intent - TypeScript\nDESCRIPTION: Defines the structure for intent to delete OAuth providers, including provider IDs and user ID. This is critical for managing OAuth integrations and user associations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteOauthProvidersIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1208\n */\nexport interface v1DeleteOauthProvidersIntent {\n  providerIds: string[]; // Unique identifier for a given Provider.\n  userId: string; // The ID of the User to remove an Oauth provider from\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Sweeper Example Project\nDESCRIPTION: Commands for cloning the SDK repository, installing dependencies with pnpm, building the source code, and navigating to the sweeper example directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/sweeper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/sweeper/\n```\n\n----------------------------------------\n\nTITLE: Ethereum Wallet Implementation Example\nDESCRIPTION: Example showing how to use the new EthereumWallet implementation with WalletStamper and TurnkeyClient.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst wallet = new EthereumWallet();\n\n// Instantiate the WalletStamper with the EthereumWallet\nconst walletStamper = new WalletStamper(wallet);\n\n// Instantiate the TurnkeyClient with the WalletStamper\nconst client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyActivityError Class in TypeScript\nDESCRIPTION: This code snippet defines the TurnkeyActivityError class, which extends the Error class. It includes a constructor and properties for activityId, activityStatus, activityType, and cause.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/classes/TurnkeyActivityError.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TurnkeyActivityError extends Error {\n  activityId: undefined | string;\n  activityStatus: undefined | \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  activityType: undefined | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_CREATE_API_KEYS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n  cause: undefined | Error;\n\n  constructor(input: {\n    activityId?: string;\n    activityStatus?: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n    activityType?: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_CREATE_API_KEYS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n    cause?: Error;\n    message: string;\n  }) {\n    super(input.message);\n    // Implementation details not provided\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Creation Intent Type\nDESCRIPTION: Defines the structure for creating API keys with user ID and API key parameters\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1CreateApiKeysIntent: {\n  apiKeys: definitions[\"apiApiKeyParams\"][];\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure - TypeScript\nDESCRIPTION: This snippet specifies the structure for the result of setting a payment method, including fields for cardHolderEmail, cardHolderName, and lastFour digits. It is essential for handling payment information securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This code snippet defines a complex type structure for activity types, statuses, and result interfaces used in the Turnkey SDK. It includes enumerations for activity types and statuses, as well as interfaces for various activity results such as OTP authentication, user recovery, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Result Structure - TypeScript\nDESCRIPTION: The `updateUserResult` interface defines the result of updating a user, ensuring that the returned data includes `userId` as a string. This supports a clear understanding of the outcome of user update operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Using POST Endpoint for Creating Users in TurboKey SDK\nDESCRIPTION: API endpoint definition for creating users in an existing organization. This requires a TCreateUsersInput parameter and is called via a POST request to the specified path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUsers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nPOST /public/v1/submit/create_users\n```\n\n----------------------------------------\n\nTITLE: Initializing intent.createSubOrganizationIntentV3 - JSON Object\nDESCRIPTION: The third version of the intent includes support for private keys, strengthening security protocols in sub-organization creation. It balances security through additional cryptographic measures in conjunction with quorum thresholds and user management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining type for pathFormat field\nDESCRIPTION: This snippet defines the type for the `pathFormat` field within `v1WalletAccountParams`. It uses a type alias `definitions` with the key `v1PathFormat` to specify the path format used for generating a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\n> **pathFormat**: `definitions`[`\"v1PathFormat\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Email Recovery Intent Structure\nDESCRIPTION: This snippet outlines the structure for the user email recovery intent, defining necessary parameters such as the email address, expiration time, and email customization options. It is used in scenarios where a user needs to recover access to their account via email.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Identifier Result Structure\nDESCRIPTION: This snippet outlines the structure for the 'userId' result of API responses, providing a unique identifier for a given user, represented as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_59\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResult.userId\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Migration Changes for ethers v6 - Fee Data\nDESCRIPTION: Example showing how to migrate fee data retrieval from ethers v5 to v6. The getFeeData method is moved from signer to provider.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nconst feeData = await connectedSigner.getFeeData();\n\n// after\nconst feeData = await connectedSigner.provider?.getFeeData();\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Raw Payloads Result Structure in TypeScript\nDESCRIPTION: This snippet provides a structure for the result of signing multiple raw payloads, which consists of an array of 'signatures' of type object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `signatures`: `object`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bitcoin Regtest P2TR Wallet Accounts\nDESCRIPTION: Declares a constant array of wallet accounts for Bitcoin Regtest network with Taproot (P2TR) address type. Used for testing and development purposes in a local Bitcoin regression testing environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_BITCOIN_REGTEST_P2TR_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Turnkey Configuration\nDESCRIPTION: Command to create a local environment file from the provided example. This file will store API keys and other configuration needed for Turnkey integration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-nonce-manager/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/ethers and ethers packages\nDESCRIPTION: Command to install the required npm packages for using Turnkey Signer with Ethers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/ethers/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ethers @turnkey/ethers\n```\n\n----------------------------------------\n\nTITLE: Running the Token Sweeper Script\nDESCRIPTION: Command to start the sweeper script that will construct, sign, and broadcast token transfer transactions via Turnkey and Infura.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/sweeper/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Turnkey Configuration\nDESCRIPTION: Command to create a local environment configuration file from the example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-federated-passkeys/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Deleting User Tags in Turnkey SDK (TypeScript)\nDESCRIPTION: Method to delete user tags using the Turnkey SDK. It takes an input of type TDeleteUserTagsBody and returns a Promise resolving to an object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteUserTags(input: TDeleteUserTagsBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: THttpConfig Type Definition\nDESCRIPTION: Type definition for the HTTP client configuration object requiring a baseUrl parameter\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/documents/TurnkeyClient.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype THttpConfig = {\n  baseUrl: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Configurations in TypeScript\nDESCRIPTION: The 'stampGetOrganizationConfigs' function is used to fetch organization configurations. It requires 'TGetOrganizationConfigsBody' as input and returns a Promise that resolves to either 'undefined' or 'TSignedRequest'. This method is inherited from the 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetOrganizationConfigs**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetOrganizationConfigsBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Installing WalletStamper Package\nDESCRIPTION: Different package manager commands to install the @turnkey/wallet-stamper package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/documents/WalletStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/wallet-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/wallet-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/wallet-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Result Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure for the update user result, which includes a user ID as a string to reference the updated user profile.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Feature Flag\nDESCRIPTION: Command to enable email authentication feature flag for a standalone parent organization using tkcli.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth-local-storage/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nturnkey request --host api.turnkey.com --path /public/v1/submit/set_organization_feature --body '{\n    \"timestampMs\": \"'\"$(date +%s)\"'000\",\n    \"type\": \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\",\n    \"organizationId\": \"<your organization ID>\",\n    \"parameters\": {\n            \"name\": \"FEATURE_NAME_EMAIL_AUTH\"\n    }\n}' --organization <your organization ID>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateInvitationsResponse Type in TypeScript\nDESCRIPTION: Type alias definition that represents the response schema for the Create Invitations API endpoint. Maps to the 200 success response schema of the PublicApiService_CreateInvitations operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateInvitationsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateInvitationsResponse = operations[\"PublicApiService_CreateInvitations\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: User Recovery Intent Type Definition\nDESCRIPTION: Type definition for user recovery intent with email customization options.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"email\": string;\n  \"emailCustomization\": {\n    \"appName\": string;\n    \"logoUrl\": string;\n    \"magicLinkTemplate\": string;\n    \"templateId\": string;\n    \"templateVariables\": string;\n  };\n  \"expirationSeconds\": string;\n  \"targetPublicKey\": string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Setting Result Structure - TypeScript\nDESCRIPTION: This snippet defines the result structure for setting organization features, containing an array of feature objects. It facilitates the configuration of features for organizations in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Setting Result Structure - TypeScript\nDESCRIPTION: Defines the structure for setting the payment method which requires fields like cardHolderEmail, cardHolderName, and lastFour as strings. This is crucial for managing payment methods in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Structured changelog entries detailing version changes, dependency updates, and bug fixes for the @turnkey/api-key-stamper package across multiple releases.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @turnkey/api-key-stamper\n\n## 0.4.4\n\n### Patch Changes\n\n- 2d5977b: Update error messaging around api key and target public key usage\n\n## 0.4.3\n\n### Patch Changes\n\n- Updated dependencies [e5c4fe9]\n  - @turnkey/encoding@0.4.0\n\n## 0.4.2\n\n### Patch Changes\n\n- Updated dependencies [93666ff]\n  - @turnkey/encoding@0.3.0\n\n## 0.4.1\n\n### Patch Changes\n\n- Changes: Resolves bugs where byte arrays might not be sufficiently padded (32 bytes are expected for x, y, and d elements of a JWK)\n\n- Updated dependencies\n  - @turnkey/encoding@0.2.1\n\n## 0.4.0\n\n### Minor Changes\n\n- New PureJS implementation for `@turnkey/api-key-stamper`` to support React Native\n- Introduce a dependency on `@turnkey/encoding` to consolidate utility functions\n\n## 0.3.1\n\n### Patch Changes\n\n- Upgrade to Node v18 (#184)\n\n## 0.3.0\n\n### Minor Changes\n\n- Use rollup to build ESM and CommonJS, fix ESM support (#174)\n\n## 0.2.0\n\n### Minor Changes\n\n- Add ESM support (#154)\n\n## 0.1.1\n\n### Patch Changes\n\n- Hint for web bundlers not to polyfill Node crypto\n\n## 0.1.0\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePrivateKeyTagBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreatePrivateKeyTagBody type alias, which is derived from the request body parameters of the PublicApiService_CreatePrivateKeyTag operation. It is used for creating a private key tag via the POST /public/v1/submit/create_private_key_tag endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePrivateKeyTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreatePrivateKeyTagBody = operations[\"PublicApiService_CreatePrivateKeyTag\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Turnkey SDK Repository and Setting Up the Environment\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and build the source code before navigating to the Gnosis example directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-gnosis/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-gnosis/\n```\n\n----------------------------------------\n\nTITLE: Requesting and Signing CreatePolicies Request in JavaScript\nDESCRIPTION: The 'signCreatePolicies' function requests a WebAuthn assertion and returns a signed 'CreatePolicies' request for posting to Turnkey. It takes 'input', of type 'TCreatePoliciesInput', and optional 'options' of type 'TurnkeyCredentialRequestOptions'. The function ultimately returns a promise containing a 'SignedRequest'. This procedure relies on specific type definitions and SDK structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreatePolicies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst signCreatePolicies: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Example Transaction Output\nDESCRIPTION: Sample output showing wallet details and transaction confirmation on Celestia testnet\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-cosmjs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCompressed public key:\n\t025adbb33ec36206ae2e022ddc55d3d083aeb9959311227a7699dcb31068286c79\n\nWallet address:\n\tcelestia160pdug04aedlqhfeue5vhjjke5zgmtyruzk6w7\n\nWallet on explorer:\n\thttps://arabica.celenium.io/address/celestia160pdug04aedlqhfeue5vhjjke5zgmtyruzk6w7\n\nAccount balance:\n\t[{\"denom\":\"utia\",\"amount\":\"4979900\"}]\n\nSent 0.0001 TIA to celestia1vsvx8n7f8dh5udesqqhgrjutyun7zqrgehdq2l:\n\thttps://arabica.celenium.io/tx/933236071C0AFEC756E09F4C2F14F52FAD56971FBD5E83D9E405B4A538D10E63\n```\n\n----------------------------------------\n\nTITLE: Declaring signDeletePolicy Function in TypeScript for Turnkey SDK\nDESCRIPTION: The signDeletePolicy function is used to request a WebAuthn assertion and prepare a signed DeletePolicy request. It takes an input parameter of type TDeletePolicyInput and optional credential request options, returning a Promise containing a SignedRequest that can be sent to Turnkey's API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signDeletePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signDeletePolicy: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/cosmjs Package\nDESCRIPTION: Command to install the @turnkey/cosmjs npm package which provides Turnkey Cosmos Signer functionality for CosmJS applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/cosmjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/cosmjs\n```\n\n----------------------------------------\n\nTITLE: Running the NextJS Application\nDESCRIPTION: Command to start the development server for the NextJS application which will run on port 3000.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eip-1193-provider/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interfaces and Enums for Activity Management\nDESCRIPTION: This code defines TypeScript interfaces for various activity result types and enums for activity statuses and types. It includes definitions for operations like email recovery, OAuth, user management, organization features, payment methods, transaction signing, and policy management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeyTags.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to copy the example environment file to create a local configuration file for storing Turnkey API credentials and configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/otp-auth/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Provider Packages\nDESCRIPTION: Commands for installing the required Turnkey packages using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/eip-1193-provider/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/eip-1193-provider @turnkey/http @turnkey/webauthn-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @turnkey/eip-1193-provider @turnkey/http @turnkey/webauthn-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/eip-1193-provider @turnkey/http @turnkey/webauthn-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitOtpAuthResultV2 type\nDESCRIPTION: Defines the result structure for initializing OTP authentication version 2, also containing the OTP ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitOtpAuthResultV2\n * @memberof definitions\n */\nexport interface v1InitOtpAuthResultV2 {\n  /**\n   * Unique identifier for an OTP authentication\n   */\n  otpId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Tags with Promise-based TypeScript SDK\nDESCRIPTION: This snippet defines a complex function, 'createUserTag', which returns a Promise. The promise, when resolved, provides detailed information about an activity, including permissions, timestamps, failure details, and various intents such as creating API keys, managing users, and organizational data. Dependencies include Promise support and TypeScript language features. Important parameters include a single 'input' which dictates the operation to be performed. The structure anticipates extensive configuration for user and organizational intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUserTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst createUserTag: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { ... }; }... }>\n```\n\n----------------------------------------\n\nTITLE: Creating Invitations with Stamp in SDK Browser Client in TypeScript\nDESCRIPTION: This function, `stampCreateInvitations`, serves the purpose of creating and managing invitations, with input specified by TCreateInvitationsBody. It returns a promise with TSignedRequest or undefined, critical for invitation management flows in secure contexts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **stampCreateInvitations**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\nDefined in: [packages/sdk-browser/src/__generated__/sdk-client-base.ts:950](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L950)\n\n#### Parameters\n\n##### input\n\n`TCreateInvitationsBody`\n\n#### Returns\n\n`Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeysBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeletePrivateKeysBody type alias, which is derived from the body parameter of the PublicApiService_DeletePrivateKeys operation. It is used for the POST request to delete private keys in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeletePrivateKeysBody = operations[\"PublicApiService_DeletePrivateKeys\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Oauth Providers in TypeScript SDK\nDESCRIPTION: The 'stampCreateOauthProviders' function enables the creation of OAuth providers by taking 'TCreateOauthProvidersBody' as an input and returning a Promise with an optional TSignedRequest. It is inherited from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampCreateOauthProviders**(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Bash Script\nDESCRIPTION: Installs the necessary packages 'viem' and '@turnkey/viem' via npm. This is a prerequisite for using the functionality provided by the @turnkey/viem SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install viem @turnkey/viem\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Type in TypeScript\nDESCRIPTION: This snippet defines the structure of the OAuth result, which includes properties for the API key ID, credential bundle, and user ID. This gives a clear representation of what data is returned after an OAuth operation, ensuring type safety in client-server interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n`oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPoliciesResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting policies, containing an array of Policy objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPoliciesResponse {\n  policies: definitions[\"v1Policy\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Deletion Result - TypeScript\nDESCRIPTION: This snippet specifies the structure of the result returned after a user deletion operation, providing a simple success response with the affected user IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteUsersResult: { userIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Environment File Setup\nDESCRIPTION: Command to copy the example environment file to create a local configuration\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-ethers/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Turnkey API\nDESCRIPTION: Commands to prepare the environment variables needed for connecting to the Turnkey API. Involves copying the example .env file and manually adding required credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/export-in-node/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining v1ActivityStatus Enum\nDESCRIPTION: Defines the `v1ActivityStatus` enum, representing the different possible statuses of an activity. These statuses include `ACTIVITY_STATUS_CREATED`, `ACTIVITY_STATUS_PENDING`, `ACTIVITY_STATUS_COMPLETED`, `ACTIVITY_STATUS_FAILED`, `ACTIVITY_STATUS_CONSENSUS_NEEDED`, and `ACTIVITY_STATUS_REJECTED`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1ActivityStatus**: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:480](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L480)\n```\n\n----------------------------------------\n\nTITLE: Defining TStamper Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TStamper which includes a stamp() method that takes a string input and returns a Promise of TStamp type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/interfaces/TStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TStamper {\n    stamp: (input: string) => Promise<TStamp>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetAuthenticatorsRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting multiple authenticators, requiring organization and user IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetAuthenticatorsRequest {\n  organizationId: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands for cloning the Turnkey SDK repository, installing dependencies, and building the source code before navigating to the OTP authentication example directory.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/otp-auth/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/otp-auth/\n```\n\n----------------------------------------\n\nTITLE: Defining SessionKeys Constant in TypeScript\nDESCRIPTION: This snippet creates the SessionKeys constant, which is utilized to uniquely identify session keys used throughout the SDK. It serves to provide a consistent reference point in the code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SessionKeys = \"@turnkey/session-keys\";\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.0.0\nDESCRIPTION: Major release integrating with Turnkey's Sign Transaction endpoint, adding support for both legacy and versioned Solana transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/solana/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0\n\n### Major Changes\n\n- a4f0f69: Integrate @turnkey/solana with Turnkey's Sign Transaction endpoint. There are no breaking changes, but a major release felt right given this is effectively adding \"full\" Solana support.\n\n  This release introduces a new method: `signTransaction`. Under the hood, this creates an activity of type `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`. There is **no action required** for existing users of `addSignature`.\n\n  - `addSignature` does not use our Policy Engine, and instead signs a transaction's message straight up\n  - While `addSignature` mutates the incoming transaction by adding a signature to it directly, `signTransaction` returns a new transaction object\n  - Both legacy and versioned (V0) transactions are supported\n```\n\n----------------------------------------\n\nTITLE: Static CaptureStackTrace Method Definition in TypeScript\nDESCRIPTION: Definition of the static captureStackTrace method used to create a .stack property on a target object with optional constructor parameter. This method allows customization of stack trace generation for error objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/TurnkeyActivityConsensusNeededError.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Example Whoami Response\nDESCRIPTION: Sample response from a successful Whoami API request showing organization and user details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sdk-server/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organizationId\": \"4c9c6e70-d30b-405f-ae30-41e766279eb6\",\n  \"organizationName\": \"Test\",\n  \"userId\": \"7fd1bc44-9a4f-47ec-aad2-8a4a2a5de82e\",\n  \"username\": \"Root user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/http Package\nDESCRIPTION: Command to install the @turnkey/http package using npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/http\n```\n\n----------------------------------------\n\nTITLE: Injecting a Credential Bundle in TypeScript\nDESCRIPTION: Method to inject a new credential bundle into the iframe. The bundle should be encrypted to the iframe's initial public key using HPKE (RFC 9180).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninjectCredentialBundle(bundle): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Intent Types Schema\nDESCRIPTION: Complex TypeScript schema defining multiple intent types for various SDK operations including authentication, organization creation, user management, and wallet interactions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  acceptInvitationIntent: { ... },\n  createOrganizationIntent: { ... },\n  createUsersIntent: { ... },\n  createWalletIntent: { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This snippet defines a complex return type for a Promise, including nested objects for activity details and various intent types. It covers a wide range of operations such as user management, authentication, organization creation, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUserTags.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { nanos: string; seconds: string; };\n    failure: { code: number; details: object & object[]; message: string; };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: { /* ... */ };\n      acceptInvitationIntentV2: { /* ... */ };\n      activateBillingTierIntent: { /* ... */ };\n      approveActivityIntent: { /* ... */ };\n      createApiKeysIntent: { /* ... */ };\n      createApiKeysIntentV2: { /* ... */ };\n      createApiOnlyUsersIntent: { /* ... */ };\n      createAuthenticatorsIntent: { /* ... */ };\n      createAuthenticatorsIntentV2: { /* ... */ };\n      createInvitationsIntent: { /* ... */ };\n      createOauthProvidersIntent: { /* ... */ };\n      createOrganizationIntent: { /* ... */ };\n      createOrganizationIntentV2: { /* ... */ };\n      createPoliciesIntent: { /* ... */ };\n      createPolicyIntent: { /* ... */ };\n      createPolicyIntentV2: { /* ... */ };\n      createPolicyIntentV3: { /* ... */ };\n      createPrivateKeysIntent: { /* ... */ };\n      createPrivateKeysIntentV2: { /* ... */ };\n      createPrivateKeyTagIntent: { /* ... */ };\n      createReadOnlySessionIntent: {};\n      createReadWriteSessionIntent: { /* ... */ };\n      createReadWriteSessionIntentV2: { /* ... */ };\n      createSubOrganizationIntent: { /* ... */ };\n      createSubOrganizationIntentV2: { /* ... */ };\n      createSubOrganizationIntentV3: { /* ... */ };\n      createSubOrganizationIntentV4: { /* ... */ };\n      createSubOrganizationIntentV5: { /* ... */ };\n      createSubOrganizationIntentV6: { /* ... */ };\n      createSubOrganizationIntentV7: { /* ... */ };\n      createUsersIntent: { /* ... */ };\n      createUsersIntentV2: { /* ... */ };\n      createUsersIntentV3: { /* ... */ };\n      createUserTagIntent: { /* ... */ };\n      createWalletAccountsIntent: { /* ... */ };\n      createWalletIntent: { /* ... */ };\n      deleteApiKeysIntent: { /* ... */ };\n      deleteAuthenticatorsIntent: { /* ... */ };\n      deleteInvitationIntent: { /* ... */ };\n      deleteOauthProvidersIntent: { /* ... */ };\n      deleteOrganizationIntent: { /* ... */ };\n      deletePaymentMethodIntent: { /* ... */ };\n      deletePolicyIntent: { /* ... */ };\n      deletePrivateKeysIntent: { /* ... */ };\n      deletePrivateKeyTagsIntent: { /* ... */ };\n      deleteSubOrganizationIntent: { /* ... */ };\n      deleteUsersIntent: { /* ... */ };\n      deleteUserTagsIntent: { /* ... */ };\n      deleteWalletsIntent: { /* ... */ };\n      disablePrivateKeyIntent: { /* ... */ };\n      emailAuthIntent: { /* ... */ };\n      emailAuthIntentV2: { /* ... */ };\n      exportPrivateKeyIntent: { /* ... */ };\n      exportWalletAccountIntent: { /* ... */ };\n      exportWalletIntent: { /* ... */ };\n      importPrivateKeyIntent: { /* ... */ };\n      // ... (truncated due to length)\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePolicyRequest Structure in TypeScript\nDESCRIPTION: Defines the request structure for deleting a policy, including the organization ID and timestamp, alongside parameters of type 'v1DeletePolicyIntent'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePolicyRequest {\n    organizationId: string;\n    parameters: definitions[\"v1DeletePolicyIntent\"];\n    timestampMs: string;\n    type: \"ACTIVITY_TYPE_DELETE_POLICY\";\n}\n```\n\n----------------------------------------\n\nTITLE: Sign NOOPCodegenAnchor Function Definition (TypeScript)\nDESCRIPTION: Defines the `signNOOPCodegenAnchor` function, which returns a Promise that resolves to a `SignedRequest`. This request is a signed `NOOPCodegenAnchor` suitable for posting to Turnkey. It leverages WebAuthn for authentication and signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signNOOPCodegenAnchor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signNOOPCodegenAnchor**: () => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetOrganizationResponse in TypeScript\nDESCRIPTION: This code snippet defines a type alias named TGetOrganizationResponse. It represents the schema of the HTTP response when the Get Organization API endpoint is called. The type is derived from a specific structure within the operations of the PublicApiService, specifically for a 200 response status.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetOrganizationResponse = operations[\\\"PublicApiService_GetOrganization\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersBody Type in TypeScript\nDESCRIPTION: Type alias definition that combines API operation parameters for deleting OAuth providers with command override parameters. Used in the Turnkey SDK server implementation for type safety when making OAuth provider deletion requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TDeleteOauthProvidersBody = operations[\"PublicApiService_DeleteOauthProviders\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Project Dependencies\nDESCRIPTION: Commands for cloning the repository, installing dependencies with pnpm, and building the project source code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth-local-storage/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/email-auth-local-storage/\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey SDK Browser Package\nDESCRIPTION: NPM installation command for the @turnkey/sdk-browser package\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/sdk-browser\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration - Bash Copy Command\nDESCRIPTION: Command to create local environment configuration file from template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Turnkey\nDESCRIPTION: Command to create local environment file from template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-viem/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Turnkey Configuration\nDESCRIPTION: Command to create a local environment file from the example template. This file will store the Turnkey API keys and other required configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/delegated-access/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Response Types\nDESCRIPTION: This snippet defines the structure of the API response related to organization features, ensuring that the data returned includes necessary identifiers and attributes for each operation conducted on organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Environment File\nDESCRIPTION: Command to copy the example environment file and instructions for adding necessary API credentials and configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-offline/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the Recover User Result, which contains an array of authenticatorIds. This structure is used to represent the results from user recovery processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrecoverUserResult: { authenticatorId: string[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Raw Payloads Result Structure in TypeScript\nDESCRIPTION: Defines the structure for signing raw payloads, including an array of signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadsResult`: \\{ `signatures`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1RootUserParams Interface in TypeScript\nDESCRIPTION: This interface defines the parameters for creating or updating a root user. It includes properties for API keys, authenticators, and optional user email and name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1RootUserParams {\n  apiKeys: definitions[\"apiApiKeyParams\"][];\n  authenticators: definitions[\"v1AuthenticatorParamsV2\"][];\n  userEmail?: string;\n  userName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Changes for ethers v6 - Balance Check\nDESCRIPTION: Example showing how to migrate balance checking code from ethers v5 to v6. The getBalance method is moved from signer to provider and requires an address parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nconst balance = await connectedSigner.getBalance();\n\n// after\n// first get the address\nconst address = await connectedSigner.getAddress()\n// then pass it in\nconst balance = await connectedSigner.provider?.getBalance(address)\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/sdk-browser Package\nDESCRIPTION: Commands to install the @turnkey/sdk-browser package using npm or Yarn package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/sdk-browser\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/sdk-browser\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/http Package\nDESCRIPTION: Package installation commands using different package managers (npm, pnpm, yarn)\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/documents/TurnkeyClient.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/http\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/http\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/http\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_COSMOS_ACCOUNTS in Turnkey SDK Browser\nDESCRIPTION: This code snippet defines a constant array named DEFAULT_COSMOS_ACCOUNTS. The array contains elements of type `WalletAccount`, likely representing predefined Cosmos accounts used within the Turnkey SDK browser environment. The code resides in the `turnkey-helpers.ts` file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_COSMOS_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **DEFAULT_COSMOS_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building the Project (Bash)\nDESCRIPTION: Commands to install project dependencies recursively and build all packages in the workspace.\nSOURCE: https://github.com/tkhq/sdk/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install -r\n$ pnpm run -w build-all\n```\n\n----------------------------------------\n\nTITLE: Package Path Structure in Markdown\nDESCRIPTION: Directory structure showing three different implementation approaches for Turnkey requests - HTTP, SDK server, and SDK browser (work in progress).\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/kitchen-sink/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `src/http`: create Turnkey requests in the most primitive way, using `@turnkey/http` and a stamper (e.g. `@turnkey/api-key-stamper`)\n- `src/sdk-server`: create Turnkey requests using `@turnkey/sdk-server`, which abstracts away some of the internals in the above method\n- 🚧 WIP `src/sdk-browser`: create Turnkey requests using `@turnkey/sdk-browser`, which also abstracts away some of the internals from the `@turnkey/http` approach. Note that `@turnkey/sdk-browser` has an interface identical to `@turnkey/sdk-server`\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the NextJS development server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth-local-storage/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Suborganizations in Turnkey SDK\nDESCRIPTION: Method for fetching suborganizations based on the provided request. Returns a promise resolving to a GetSuborgsResponse or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetSuborgs: (request: GetSuborgsRequest) => Promise<undefined | GetSuborgsResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript SDK\nDESCRIPTION: The TCreateApiOnlyUsersResponse type alias is defined to structure the response schema for API-only user creation operations. It combines the operation's result path with a predefined activity response type to manage expected API responses. This alias integrates with other API definitions to ensure consistent response handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateApiOnlyUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TCreateApiOnlyUsersResponse = operations[\\\"PublicApiService_CreateApiOnlyUsers\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"createApiOnlyUsersResult\\\"] & definitions[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for User Management\nDESCRIPTION: This snippet describes result structures involved in user management tasks, including the unique identifiers for the users, user tags, and features of the organization. It offers a clear overview of how user information is structured within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_96\n\nLANGUAGE: JSON\nCODE:\n```\nresult.updateUserResult?\n{ userId: string; }\n\nresult.updateUserResult.userId\n\nstring\n\nDescription\n\nA User ID.\n\nresult.updateUserTagResult?\n{ userTagId: string; }\n\nresult.updateUserTagResult.userTagId\n\nstring\n\nDescription\n\nUnique identifier for a given User Tag.\n\nresult.removeOrganizationFeatureResult?\n{ features: object[]; }\n\nresult.removeOrganizationFeatureResult.features\n\nobject[]\n\nDescription\n\nResulting list of organization features.\n```\n\n----------------------------------------\n\nTITLE: Running the Sui Transaction Script\nDESCRIPTION: Command to execute the example script that will create and send a Sui transaction using the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sui/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Result Structure in TypeScript\nDESCRIPTION: This snippet provides a TypeScript definition for the user recovery results, which denotes an array of authenticators identified by 'authenticatorId'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `authenticatorId`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Version 4 Result Structure for SubOrganization\nDESCRIPTION: This snippet defines the structure of createSubOrganizationResultV4, which includes details about rootUserIds, subOrganizationId, and wallet information encapsulated in a specific object format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_67\n\nLANGUAGE: json\nCODE:\n```\nresult.createSubOrganizationResultV4?\n\\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js API Proxy Handler\nDESCRIPTION: Implementation of a Next.js middleware proxy handler for forwarding authenticated requests to Turnkey API\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/documents/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst turnkeyProxyHandler = turnkey.nextProxyHandler({\n  allowedMethods: [\"createSubOrganization\", \"emailAuth\", \"getSubOrgIds\"],\n});\n\nexport default turnkeyProxyHandler;\n```\n\n----------------------------------------\n\nTITLE: Clearing Iframe in TypeScript\nDESCRIPTION: Removes the iframe from the DOM without returning any value.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/IframeStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclear()\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CreateWalletResult Interface\nDESCRIPTION: Defines the structure for the result of creating a wallet, containing a list of account addresses and the wallet ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `addresses`: `string`[]; \n  `walletId`: `string`; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining nOOPCodegenAnchor Function in TypeScript\nDESCRIPTION: A constant function that returns a Promise with a WebAuthn authentication stamp containing authenticator data, client data JSON, credential ID, and signature\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/nOOPCodegenAnchor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nOOPCodegenAnchor: () => Promise<{ stamp: { authenticatorData: string; clientDataJson: string; credentialId: string; signature: string; }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Types for Creating API Keys in TypeScript\nDESCRIPTION: This snippet defines the types corresponding to intents related to API key management, particularly for creation. It specifies required input parameters such as user ID and API keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePolicy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateApiKeysIntent: { apiKeys: object[]; userId: string; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateApiKeysIntentV2: { apiKeys: object[]; userId: string; }\n```\n\n----------------------------------------\n\nTITLE: Sample Asset Sweep Commands\nDESCRIPTION: Examples of sweep commands for moving assets between accounts, including a case that demonstrates policy restrictions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/trading-runner/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli sweep --asset=USDC --amount=1 --key=bob\npnpm cli sweep --asset=USDC --amount=1 --key=bob --destination=0xf0609e87Dfa4DA10f38313868b15296f7B30c00A # will get denied\n```\n\n----------------------------------------\n\nTITLE: SolanaWalletInterface TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for Solana wallet implementation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/documents/WalletStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SolanaWalletInterface extends BaseWalletInterface {\n  recoverPublicKey: () => string;\n  type: \"solana\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rate Limits Test Body Type in TypeScript\nDESCRIPTION: Type alias for the request body parameters used in rate limit testing endpoint. Represents the body structure for the PublicApiService_TestRateLimits operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TTestRateLimitsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTTestRateLimitsBody = operations[\"PublicApiService_TestRateLimits\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Intent and Result Types for SDK Operations in TypeScript\nDESCRIPTION: This code snippet defines TypeScript types for various intents and results used within the SDK. Intents represent actions or requests, while results represent the outcome of those actions. The definitions cover operations related to wallets, users, authentication, organizations, payments, signing, transactions, and policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"T_P2PKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\"` \\| `\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\"` \\| `\"ADDRESS_FORMAT_SEI\"` \\| `\"ADDRESS_FORMAT_XLM\"` \\| `\"ADDRESS_FORMAT_DOGE_MAINNET\"` \\| `\"ADDRESS_FORMAT_DOGE_TESTNET\"` \\| `\"ADDRESS_FORMAT_TON_V3R2\"` \\| `\"ADDRESS_FORMAT_TON_V4R2\"` \\| `\"ADDRESS_FORMAT_XRP\"`)[]; `curve`: `\"CURVE_SECP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` \\| `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` \\| `\"AUTHENTICATOR_TRANSPORT_NFC\"` \\| `\"AUTHENTICATOR_TRANSPORT_USB\"` \\| `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; \\}; `setOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}; `organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\}; `initOtpAut\n```\n\n----------------------------------------\n\nTITLE: SDK Promise Return Type Definition\nDESCRIPTION: Detailed TypeScript interface definition showing the structure of Promise return types for the SDK. Includes activity status, authentication, and various organizational management intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUser.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...}; // Intent definitions truncated for brevity\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Starting the NextJS Development Server\nDESCRIPTION: Command to start the NextJS development server for the Turnkey SDK example application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eth-passkeys-galore/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: Command to start the application using pnpm\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-cosmjs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Expiration Constant in TypeScript\nDESCRIPTION: This code snippet shows the declaration of the `OTP_AUTH_DEFAULT_EXPIRATION_SECONDS` constant, which is assigned a numeric value. This constant likely represents the default duration, in seconds, for which an OTP (One-Time Password) remains valid during an authentication process within the Turnkey SDK's React Native module. The constant is defined in `sdk-react-native/src/constants.ts`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/variables/OTP_AUTH_DEFAULT_EXPIRATION_SECONDS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport const OTP_AUTH_DEFAULT_EXPIRATION_SECONDS = 60 * 5; // 5 minutes\n```\n\n----------------------------------------\n\nTITLE: Defining ExtractKeyEncryptedBundle Enumeration\nDESCRIPTION: This snippet defines the ExtractKeyEncryptedBundle event type in TypeScript, which signals that the key for an encrypted bundle has been extracted.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nExtractKeyEncryptedBundle: \"EXTRACT_KEY_ENCRYPTED_BUNDLE\"\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/api-key-stamper via npm\nDESCRIPTION: Installation command for the @turnkey/api-key-stamper package using npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/api-key-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Type Structures in TypeScript\nDESCRIPTION: This snippet defines multiple result types for different operations like signing payloads, updating policies, and creating wallets using TypeScript structures. Dependencies include a TypeScript environment and project-specific interfaces. Key elements include various result objects and enumerations representing activity statuses and types. The structure ensures clear data organization and consistent return types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePolicy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"s\": \"string\"; \"v\": \"string\"; \\}; \"signRawPayloadsResult\": \\{ \"signatures\": \"object\"[]; \\}; \"signTransactionResult\": \\{ \"signedTransaction\": \"string\"; \\}; \"updateAllowedOriginsResult\": \\{\\}; \"updatePolicyResult\": \\{ \"policyId\": \"string\"; \\}; \"updatePolicyResultV2\": \\{ \"policyId\": \"string\"; \\}; \"updatePrivateKeyTagResult\": \\{ \"privateKeyTagId\": \"string\"; \\}; \"updateRootQuorumResult\": \\{\\}; \"updateUserResult\": \\{ \"userId\": \"string\"; \\}; \"updateUserTagResult\": \\{ \"userTagId\": \"string\"; \\}; \"updateWalletResult\": \\{ \"walletId\": \"string\"; \\}; \\}; \"status\": \\\"ACTIVITY_STATUS_CREATED\\\" \\| \\\"ACTIVITY_STATUS_PENDING\\\" \\| \\\"ACTIVITY_STATUS_COMPLETED\\\" \\| \\\"ACTIVITY_STATUS_FAILED\\\" \\| \\\"ACTIVITY_STATUS_CONSENSUS_NEEDED\\\" \\| \\\"ACTIVITY_STATUS_REJECTED\\\"; \"type\": \\\"ACTIVITY_TYPE_CREATE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_INVITATIONS\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USER_TAGS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION\\\" \\| \\\"ACTIVITY_TYPE_APPROVE_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_REJECT_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V2\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\\\" \\| \\\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\\\" \\| \\\"ACTIVITY_TYPE_RECOVER_USER\\\" \\| \\\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICIES\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\\\" \\| \\\"ACTIVITY_TYPE_OAUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_WALLETS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\\\" \\| \\\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V3\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\\\"; \"updatedAt\": \\{ \"nanos\": \"string\"; \"seconds\": \"string\"; \\}; \"votes\": \"object\"[]; \\}; \\}\\>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateSubOrganizationBody Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the request body parameters for the create sub-organization API endpoint. Maps to the body parameters of the PublicApiService_CreateSubOrganization operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateSubOrganizationBody = operations[\"PublicApiService_CreateSubOrganization\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sub Organization in TypeScript\nDESCRIPTION: The `deleteSubOrganization` function allows for the removal of a specified sub-organization. It takes an input parameter of type `TDeleteSubOrganizationBody` and returns a Promise that resolves to an object confirming the deletion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteSubOrganization(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key with SDK JavaScript\nDESCRIPTION: The exportPrivateKey function is an asynchronous operation returning a promise. It encapsulates various intents related to authentication, billing, key management, organization creation, session handling, user management, and other operations. The function primarily deals with exporting private keys securely. This function requires a valid input to trigger the export operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"exportPrivateKey(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: ...; }>;\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Command to copy the environment variables template file for configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-aptos/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivityInput Type Alias\nDESCRIPTION: This code defines the `TGetActivityInput` type alias as an object with a `body` property of type `TGetActivityBody`. This input is used for making a POST request to the `/public/v1/query/get_activity` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TGetActivityInput** = `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:10\n\n`POST /public/v1/query/get_activity`\n\n## Properties\n\n### body\n\n> **body**: [`TGetActivityBody`](TGetActivityBody.mdx)\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:11\n\n```\n\n----------------------------------------\n\nTITLE: Running the Validation Script for Delegated Permissions\nDESCRIPTION: Command to execute the validation script that tests the permissions of the Delegated account according to the configured policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/delegated-access/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm validate\n```\n\n----------------------------------------\n\nTITLE: Defining Init OTP Auth Intent Structure - JavaScript\nDESCRIPTION: Establishes the parameters for the 'initOtpAuthIntent', which prepares the system for OTP-based authentication. Key fields include contact information and email customization parameters. This intent is essential for securing user verification processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n`initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Viewing Cloud Storage Entry Without API Key\nDESCRIPTION: Demonstrates how to view an entry in Telegram Cloud Storage without inserting or using an API key for signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper, {\n  CloudStorageAPIKey,\n} from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// create a new Telegram Cloud Storage Stamper, \"new\" is used when you don't want to store or retrieve any API keys, and just need an interface into Cloud Storage\nconst stamper = new TelegramCloudStorageStamper();\n\n// the key used to index Telegram Cloud Storage\nconst telegramCloudStorageKey = \"@turnkey/telegramCloudStorageKey\";\n\n// get the item stored in Telegram Cloud Storage returned as a string\nconst item = await stamper.getItem(telegramCloudStorageKey);\n\nif (!item) {\n  // failed retrieving item\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Config in Turnkey HTTP SDK - TypeScript\nDESCRIPTION: A deprecated function that initializes global configuration with a TConfig value. This function has been superseded by the TurnkeyClient class which provides better initialization patterns.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/init.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninit(value: TConfig): void\n```\n\n----------------------------------------\n\nTITLE: Running the NextJS OTP Authentication Example App\nDESCRIPTION: Command to start the NextJS development server that runs the OTP authentication example application on port 3000.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/otp-auth/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticators Intent\nDESCRIPTION: This snippet establishes the intent for deleting authenticators linked to a user, which is crucial for user security management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteAuthenticatorsIntent? \\n\\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteAuthenticatorsIntent.authenticatorIds \\n`string`[] \\n\\n**Description** \\nA list of Authenticator IDs.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteAuthenticatorsIntent.userId \\n`string` \\n\\n**Description** \\nUnique identifier for a given User.\n```\n\n----------------------------------------\n\nTITLE: Vote System Type Definition\nDESCRIPTION: Type definition for vote tracking and management within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1Vote {\n  activityId: string\n  createdAt: externaldatav1Timestamp\n  id: string\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring exportPrivateKey Function in TypeScript\nDESCRIPTION: This code snippet declares a constant function exportPrivateKey that takes an input and returns a Promise. The Promise resolves to a complex object containing activity details and various intents for key management and organizational operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst exportPrivateKey: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... various intents ... */ }; /* ... more properties ... */ }>;\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Timestamp and Votes in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for activity timestamps and votes in the Coordinator API. It includes structures for the updated timestamp and an array of vote objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportPrivateKey.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Installing Node Version Manager (NVM) (Bash)\nDESCRIPTION: Command to download and install NVM (Node Version Manager) using a shell script.\nSOURCE: https://github.com/tkhq/sdk/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountsInput Type in TypeScript\nDESCRIPTION: Type alias definition for the input structure of the GET wallet accounts API endpoint. It consists of a single required property 'body' of type TGetWalletAccountsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetWalletAccountsInput = object\n```\n\n----------------------------------------\n\nTITLE: TInitUserEmailRecoveryBody Type Alias\nDESCRIPTION: Defines the `TInitUserEmailRecoveryBody` type alias, representing the structure of the request body for the `PublicApiService_InitUserEmailRecovery` operation. This is part of the generated TypeScript client for the public API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitUserEmailRecoveryBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TInitUserEmailRecoveryBody** = `operations`[`\"PublicApiService_InitUserEmailRecovery\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: This snippet defines a complex type structure for various activity results in the Coordinator API. It includes result types for operations like OTP authentication, OAuth, user recovery, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining v1AccessType Enum\nDESCRIPTION: Defines the `v1AccessType` enum, representing the different access types available: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, and `ACCESS_TYPE_ALL`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **v1AccessType**: `\"ACCESS_TYPE_WEB\"` \\| `\"ACCESS_TYPE_API\"` \\| `\"ACCESS_TYPE_ALL\"`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:450](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L450)\n```\n\n----------------------------------------\n\nTITLE: Defining WalletInterface Union Type in TypeScript\nDESCRIPTION: Declaration of a TypeScript union type that represents either a Solana or Ethereum wallet interface, allowing for blockchain-agnostic wallet implementations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/type-aliases/WalletInterface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nWalletInterface = SolanaWalletInterface | EthereumWalletInterface\n```\n\n----------------------------------------\n\nTITLE: Defining signGetSubOrgIds Function in TypeScript\nDESCRIPTION: This code snippet defines the signGetSubOrgIds function, which takes an input of type TGetSubOrgIdsInput and optional TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetSubOrgIds.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetSubOrgIds: (input: TGetSubOrgIdsInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: SDK Interface Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for a blockchain SDK, including intent and result types for operations like wallet management, authentication, key management, and organization administration. The types cover various authentication methods, transaction signing, policy management, and user management features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; privateKeyName: string; userId: string; }; importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; }; initImportPrivateKeyIntent: { userId: string; }; initImportWalletIntent: { userId: string; }; initOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Updating Version and Changes in package.json for @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the version update to 1.0.5 and describes the changes made in this patch release, including new optional parameters and functions added to the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.5\n\n### Patch Changes\n\n- 3b5b360: - Adds optional parameter for createEmbeddedKey():\n  - You can now pass a sessionKey to createEmbeddedKey() to generate separate embedded keys for different sessions, which is helpful when running multiple authentication flows concurrently.\n  - Introduces onSessionExpiryWarning():\n    - You can now add a callback via the provider config that triggers 15 seconds before a session expires.\n  - Introduces refreshSession():\n    - You now can refresh an active session that is about to expire.\n```\n\n----------------------------------------\n\nTITLE: Version Heading Example\nDESCRIPTION: Example of version heading format used in the changelog\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-server/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @turnkey/sdk-server\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file from the example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/import-in-node/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Running the Export Script\nDESCRIPTION: Command to start the export script which allows exporting a private key, wallet, or wallet account from a Turnkey organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/export-in-node/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining TIframeStamperConfig Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias for TIframeStamperConfig which is an object containing properties related to iframe configuration. It includes specifications for the iframe container, element ID, and URL. This type alias is utilized in applications that require dynamic iframe handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TIframeStamperConfig.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TIframeStamperConfig = {\\n  iframeContainer: HTMLElement | null | undefined;\\n  iframeElementId: string;\\n  iframeUrl: string;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TSignature Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TSignature type alias using the TurnkeyApiTypes interface. It specifically references the 'v1SignRawPayloadResult' property of the interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TSignature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TSignature = TurnkeyApiTypes[\"v1SignRawPayloadResult\"]\n```\n\n----------------------------------------\n\nTITLE: Running the Delegated Access Setup Script\nDESCRIPTION: Command to start the script that configures the Delegated Access setup in Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/delegated-access/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining User Tag Update Result Structure in TypeScript\nDESCRIPTION: This snippet describes the structure for the result of updating a user tag, which refers to a user tag ID as a string for managing user-tag relationships.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserTagResult: { userTagId: string; };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Interface Definitions\nDESCRIPTION: Comprehensive type definitions for activity statuses, types and result interfaces covering operations like user management, authentication, wallet operations, and organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ns: string;\nv: string;\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\nupdatedAt: { nanos: string; seconds: string; };\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationInput Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for the input parameters of the delete sub-organization API endpoint. The type represents the request structure for POST /public/v1/submit/delete_sub_organization with a body property of type TDeleteSubOrganizationBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteSubOrganizationInput = object\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP in TypeScript\nDESCRIPTION: This snippet verifies the OTP code sent to the user via email or SMS. If successful, a session is returned for user login. It uses the verifyOtp method from the Turnkey SDK for this process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from \"@turnkey/sdk-server\";\n\nconst authSession = await server.verifyOtp({\n  suborgID: suborgId,\n  otpId,\n  otpCode: otp,\n  targetPublicKey: authIframeClient!.iframePublicKey!,\n  sessionLengthSeconds,\n});\n\nif (authSession?.token) {\n  // log in with Session\n  await authIframeClient!.loginWithSession(authSession);\n  // call onValidateSuccess callback\n  await onValidateSuccess();\n} else {\n  // error handling\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Root Quorum Result Structure in TypeScript\nDESCRIPTION: This snippet specifies an empty structure for the result of updating the root quorum, indicating that no data is returned for this operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nupdateRootQuorumResult: {}; \n```\n\n----------------------------------------\n\nTITLE: Promise Return Type Definition - TypeScript\nDESCRIPTION: Type definition for a Promise that resolves to a hex string value with 0x prefix.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/createAccountWithAddress.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<`0x${string}`>\n```\n\n----------------------------------------\n\nTITLE: Running the Aptos Transaction Script\nDESCRIPTION: Command to execute the Aptos transaction example and its expected output format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-aptos/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n? Recipient address: (<recipient_aptos_address>)\n\nSending 100 Octas (0.000001 APT) to <recipient_aptos_address>\n\nTransaction Hash: <aptos_transaction_hash>\n```\n\n----------------------------------------\n\nTITLE: Specifying TDeleteInvitationInput Properties in TypeScript\nDESCRIPTION: Defines the body property of the TDeleteInvitationInput type alias. The body is of type TDeleteInvitationBody, which likely contains the necessary information for deleting an invitation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteInvitationBody\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Raw Payload Intent - JavaScript\nDESCRIPTION: This snippet specifies the `signRawPayloadIntent` used for signing a payload with a specified encoding and hash function. It includes parameters for private key identification and the payload to be signed, aimed for transactions that require signature validation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsignRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for SDK Operations\nDESCRIPTION: Comprehensive type definitions for various SDK operations including authentication, wallet management, organization management, and policy controls. Defines input parameters and result objects for API operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddressFormat = \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\"\n```\n\n----------------------------------------\n\nTITLE: Defining type for clientDataJson field\nDESCRIPTION: This snippet defines the type for the `clientDataJson` field within `v1WebAuthnStamp`, which is a `string`. It's a base64 encoded payload containing metadata about the signing context and challenge in WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\n> **clientDataJson**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining the stamp Method in TypeScript\nDESCRIPTION: This snippet defines the stamp method of the WebauthnStamper class. It takes a string payload as input and returns a Promise that resolves to an object containing stampHeaderName and stampHeaderValue. This is essential for executing the credential stamping functionality.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/WebauthnStamper.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstamp(payload): Promise<{ stampHeaderName: string; stampHeaderValue: string; }>\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadInput Body Property\nDESCRIPTION: Describes the `body` property within the `TSignRawPayloadInput` type alias.  This property is of type `TSignRawPayloadBody` and represents the actual data to be signed. The `TSignRawPayloadBody` type likely contains the raw payload and any other required parameters for the signing operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **body**: [`TSignRawPayloadBody`](TSignRawPayloadBody.mdx)\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the version update to 1.0.1 and lists the dependency updates for @turnkey/http and @turnkey/crypto packages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.1\n\n### Patch Changes\n\n- Updated dependencies [56a307e]\n  - @turnkey/http@2.21.0\n  - @turnkey/crypto@2.3.1\n```\n\n----------------------------------------\n\nTITLE: Running Ethers Implementation\nDESCRIPTION: Command to execute the Ethers-based implementation for transaction broadcasting.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-biconomy-aa/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start-ethers\n```\n\n----------------------------------------\n\nTITLE: Turnkey SDK Activity Status and Type Enumerations\nDESCRIPTION: A comprehensive set of TypeScript type definitions including activity statuses (like CREATED, PENDING, COMPLETED) and activity types (like CREATE_API_KEYS, SIGN_TRANSACTION, etc.) used in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayload.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CreateUsersResult Interface\nDESCRIPTION: Defines the structure for the result of creating users, containing a list of user IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  `userIds`: `string`[]; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Result Structures in TypeScript\nDESCRIPTION: This snippet defines two structures: removeOrganizationFeatureResult and setOrganizationFeatureResult, both including an array of feature objects. It sets up standard responses for managing organization features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinSignetP2SHAccountAtIndex Function in TypeScript\nDESCRIPTION: This function takes a pathIndex as a number parameter and returns a WalletAccount object. It is used to generate a default Bitcoin Signet P2SH account at a specified index.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinSignetP2SHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefaultBitcoinSignetP2SHAccountAtIndex(pathIndex: number): WalletAccount\n```\n\n----------------------------------------\n\nTITLE: Storage Key: Session definition\nDESCRIPTION: Defines the 'Session' member of the `StorageKeys` enumeration. It uses the string literal \"@turnkey/session/v2\" as the key for storing the current session in the browser's storage. This key is used to persist overall session data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> **Session**: `\"@turnkey/session/v2\"`\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference\nDESCRIPTION: The specific commit SHA from the original webauthn-json repository that was vendored.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/src/webauthn-json/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ne932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f\n```\n\n----------------------------------------\n\nTITLE: Injecting Credential Bundle in JavaScript\nDESCRIPTION: Example of how to inject a credential bundle into the iframe using the injectCredentialBundle method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init iframeStamper\n\n// Pasted into the iFrame by the user\nconst credentialBundle = \"<your-encrypted-credentials-bundle>\";\n\n// Injects a new credential in the iframe\nconst injected = await iframeStamper.injectCredentialBundle(credentialBundle);\n```\n\n----------------------------------------\n\nTITLE: Running Viem Implementation\nDESCRIPTION: Command to execute the Viem-based implementation for transaction broadcasting.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-biconomy-aa/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start-viem\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript for Turnkey SDK\nDESCRIPTION: This TypeScript code defines an extensive set of activity types, statuses, and result structures for Turnkey SDK operations. It includes types for wallet management, user authentication, organization features, and transaction signing operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file from the example template\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana-passkeys/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Type in TypeScript\nDESCRIPTION: This snippet defines the type for results from setting payment methods, encompassing properties for card holder email, name, and last four digits of the card. This ensures accurate data types are used when processing payment information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n`setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace Capture Method TypeScript Definition\nDESCRIPTION: Static method definition for capturing stack traces in Node.js. The method creates a .stack property on a target object and optionally allows specifying a constructor to limit the stack trace.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/classes/InvalidArgumentError.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Defining Version 3 Result Structure for SubOrganization\nDESCRIPTION: This snippet describes the structure for the createSubOrganizationResult in its third version, encapsulating private keys, root user IDs, and sub-organization ID within an object format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_65\n\nLANGUAGE: json\nCODE:\n```\nresult.createSubOrganizationResultV3?\n\\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining updateWalletIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for updating wallet information in Turnkey. This intent allows modification of a wallet's name by referencing its unique identifier.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n{ `walletId`: `string`; `walletName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Parameters in TypeScript\nDESCRIPTION: This snippet specifies the structure for API key parameters, including an optional expiration time and mandatory public key and name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"### apiApiKeyParams\\n\\n> **apiApiKeyParams**: `object`\\n\\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:327\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in Turnkey SDK\nDESCRIPTION: This TypeScript type alias, TUpdateRootQuorumBody, is part of the Turnkey SDK and specifies the structure for the body parameter in the 'UpdateRootQuorum' API operation. It comes with a dependency on the 'PublicApiService_UpdateRootQuorum' operation's body parameters, which shapes the expected input for this API endpoint. The alias facilitates the integration of the SDK with API calls aimed at updating root quorum, ensuring type safety and adherence to the defined API schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TUpdateRootQuorumBody = operations[\\\"PublicApiService_UpdateRootQuorum\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response\nDESCRIPTION: This code snippet defines a TypeScript type alias for the response structure of the 'create invitations' API operation. It specifies the expected response schema as per the operations defined in the PublicAPI service.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateInvitationsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateInvitationsResponse = operations[\\\"PublicApiService_CreateInvitations\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Return Type for Activity\nDESCRIPTION: This code snippet defines the TypeScript type for the Promise return of an activity. It specifies the structure of the activity object, including fields like `canApprove`, `canReject`, `createdAt`, `failure`, `fingerprint`, `id`, and `intent`. The intent field is a discriminated union, representing different actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" \\| \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_CZECH\\\" \\| \\\"MNEMONIC_LANGUAGE_FRENCH\\\" \\| \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" \\| \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" \\| \\\"MNEMONIC_LANGUAGE_KOREAN\\\" \\| \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_COMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_ETHEREUM\\\" \\| \\\"ADDRESS_FORMAT_SOLANA\\\" \\| \\\"ADDRESS_FORMAT_COSMOS\\\" \\| \\\"ADDRESS_FORMAT_TRON\\\" \\| \\\"ADDRESS_FORMAT_SUI\\\" \\| \\\"ADDRESS_FORMAT_APTOS\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" \\| \\\"ADDRESS_FORMAT_SEI\\\" \\| \\\"ADDRESS_FORMAT_XLM\\\" \\| \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" \\| \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" \\| \\\"ADDRESS_FORMAT_TON_V3R2\\\" \\| \\\"ADDRESS_FORMAT_TON_V4R2\\\" \\| \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" \\| \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`; \"\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Write Session Intent in TypeScript\nDESCRIPTION: Type definition for creating a read-write session. Includes API key name, user email, expiration time in seconds, and target public key for secure credential transmission.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePolicyInput Type in TypeScript\nDESCRIPTION: Type definition for the input required to delete a policy in the Turnkey SDK. The type is an object containing a body property of type TDeletePolicyBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePolicyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeletePolicyInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletAccountsRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get multiple wallet accounts, including optional pagination.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletAccountsRequest {\n  organizationId: string;\n  paginationOptions?: definitions[\"v1Pagination\"];\n  walletId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structures in TypeScript\nDESCRIPTION: This snippet defines the structures for signRawPayloadResult, signRawPayloadsResult, and signTransactionResult, detailing the outputs of different signing operations as strings or arrays of objects. These are crucial for transaction and payload management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TTestRateLimitsInput Type Alias in TypeScript\nDESCRIPTION: Type alias that defines an object structure for testing rate limits in the Turnkey API. Contains a required 'body' property of type TTestRateLimitsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TTestRateLimitsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TTestRateLimitsInput = {\n  body: TTestRateLimitsBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Update Intent in JavaScript\nDESCRIPTION: This snippet outlines the `updatePolicyIntent`, specifying the necessary parameters for updating a policy. It includes fields for the policy condition, consensus, effect, ID, name, and notes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportPrivateKey.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"updatePolicyIntent\": { \"policyCondition\": \"string\", \"policyConsensus\": \"string\", \"policyEffect\": \"EFFECT_ALLOW\" | \"EFFECT_DENY\", \"policyId\": \"string\", \"policyName\": \"string\", \"policyNotes\": \"string\" };\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdatePolicyResponse Type in TypeScript\nDESCRIPTION: Type alias definition for the Update Policy API response. It references the response schema from the PublicApiService_UpdatePolicy operation's 200 status code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdatePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdatePolicyResponse = operations[\"PublicApiService_UpdatePolicy\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateSubOrganizationResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateSubOrganizationResponse type alias. It represents the schema of the 200 status response for the PublicApiService_CreateSubOrganization operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateSubOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateSubOrganizationResponse = operations[\"PublicApiService_CreateSubOrganization\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enum Values in TypeScript\nDESCRIPTION: Extensive enumeration of activity types covering operations like creating API keys, managing users, signing payloads, policy management, invitation handling, authentication, wallet operations, and many other platform-specific functions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initOtpAuth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Interface in TypeScript\nDESCRIPTION: Specifies the structure for authenticator information, including properties like ID, name, credential details, and supported transports.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAuthenticator(input: TGetAuthenticatorBody): Promise<{\n  authenticator: {\n    authenticatorId: string;\n    authenticatorName: string;\n    credential: {\n      publicKey: string;\n      type: \"CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR\" | /* ... other credential types ... */;\n    };\n    // ... other properties ...\n    transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n  };\n}>;\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePolicyIntentV2 Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a policy in an organization using the V2 API. This intent includes the same fields as UpdatePolicyIntent but with potentially different implementation details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateRootQuorumResponse Type in TypeScript\nDESCRIPTION: Type alias definition that maps to the response schema of the POST /public/v1/submit/update_root_quorum endpoint. It references the operations object type structure with specific path to the 200 response schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateRootQuorumResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdateRootQuorumResponse = operations[\"PublicApiService_UpdateRootQuorum\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys Intent\nDESCRIPTION: This snippet defines the structure required for deleting API keys associated with a specific user, enhancing security by removing unnecessary keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteApiKeysIntent? \\n\\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteApiKeysIntent.apiKeyIds \\n`string`[] \\n\\n**Description** \\nA list of API Key IDs.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.deleteApiKeysIntent.userId \\n`string` \\n\\n**Description** \\nUnique identifier for a given User.\n```\n\n----------------------------------------\n\nTITLE: Defining the stampUpdateUserTag Method in TypeScript\nDESCRIPTION: Method declaration for stampUpdateUserTag that updates a user tag and returns a promise with the signed request. Takes a TUpdateUserTagBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_125\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateUserTag(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - Wallet Account Responses\nDESCRIPTION: Interface definitions for wallet account response objects including account details and pagination options\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1GetWalletAccountResponse {\n  account: definitions[\"v1WalletAccount\"];\n}\n\ninterface v1GetWalletAccountsRequest {\n  organizationId: string;\n  walletId: string;\n  paginationOptions?: definitions[\"v1Pagination\"];\n}\n\ninterface v1GetWalletAccountsResponse {\n  accounts: definitions[\"v1WalletAccount\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown links showing the documentation hierarchy and navigation path to the deleteWallets API endpoint documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteWallets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / deleteWallets\n```\n\n----------------------------------------\n\nTITLE: TCreateUsersInput Properties Definition\nDESCRIPTION: Definition of the required body property for the TCreateUsersInput type, which must be of type TCreateUsersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateUsersInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TCreateUsersBody\n```\n\n----------------------------------------\n\nTITLE: TGetOrganizationConfigsResponse Type Alias Definition\nDESCRIPTION: Defines the `TGetOrganizationConfigsResponse` type alias, which is derived from the schema of a successful response (status code 200) from the `PublicApiService_GetOrganizationConfigs` operation. This type likely contains the structure of the organization configuration data returned by the API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationConfigsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TGetOrganizationConfigsResponse** = `operations`\\[`\"PublicApiService_GetOrganizationConfigs\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Stamp Get Activities in TurnkeyBrowserClient\nDESCRIPTION: This TypeScript function, `stampGetActivities`, is responsible for generating a signed request to retrieve activities within the Turnkey system. It takes a `TGetActivitiesBody` object as input, which can specify filters or parameters for retrieving activities. The function returns a Promise that resolves to either `undefined` or a `TSignedRequest`, representing the signed request needed to fetch the desired activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\n> **stampGetActivities**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:518](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L518)\n\n#### Parameters\n\n##### input\n\n`TGetActivitiesBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`stampGetActivities`](TurnkeyBrowserClient.mdx#stampgetactivities)\n```\n\n----------------------------------------\n\nTITLE: Setting up Turnkey SDK Environment\nDESCRIPTION: Initial setup commands for cloning the repository, installing dependencies and building the source code using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/import-in-node/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/import-in-node/\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Rate Limits in TypeScript\nDESCRIPTION: This TypeScript snippet defines a type alias `TTestRateLimitsBody`, which represents the structure of the request body parameters for testing rate limits in the Public API Service. This alias is utilized in the coordinator service and ties specifically to the `test_rate_limits` endpoint. It assumes the presence of certain parameter definitions in the Public API service, particularly under the 'operations' object path. No specific dependencies apart from TypeScript macros are mentioned, and it's defined in a generated file structure, indicating automatic generation of this code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TTestRateLimitsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TTestRateLimitsBody = operations[\\\"PublicApiService_TestRateLimits\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Import Private Key Request in TypeScript\nDESCRIPTION: Method signature for stampImportPrivateKey which prepares a signed request for importing a private key. It accepts a TImportPrivateKeyBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportPrivateKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorsInput Type Alias in TypeScript\nDESCRIPTION: Type definition for the input parameter of the GET authenticators endpoint. This type requires a body parameter containing authentication details and is used for making POST requests to '/public/v1/query/get_authenticators'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetAuthenticatorsInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Feature with Complex Type Definition\nDESCRIPTION: TypeScript function that sets organization features using a Promise with an extensive input configuration supporting multiple intent types and authentication methods\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/setOrganizationFeature.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst setOrganizationFeature: (input) => Promise<{ activity: { ... }}>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePolicyResultV2 in TypeScript\nDESCRIPTION: This snippet illustrates the `updatePolicyResultV2` type, similar to `updatePolicyResult`, it includes a `policyId` string representing the updated policy identifier. This version is intended for newer implementations or additional features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePolicyResultV2`: \\{ `policyId`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Users Result Structure\nDESCRIPTION: This snippet specifies the structure for 'createUsersResult', which encapsulates a list of unique User IDs returned from an API operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_70\n\nLANGUAGE: json\nCODE:\n```\nresult.createUsersResult?\n\\{ `userIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands to clone the Turnkey SDK repository, navigate to the example directory, enable pnpm package manager, install dependencies, and build the source code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-eth-passkeys-galore/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk.git\n$ cd sdk/examples/with-\n$ corepack enable  # Install `pnpm`\n$ pnpm install # Install dependencies\n$ pnpm run build  # Compile source code\n```\n\n----------------------------------------\n\nTITLE: Specifying TExportWalletAccountInput Properties in TypeScript\nDESCRIPTION: This code snippet defines the 'body' property of the TExportWalletAccountInput type. It is of type TExportWalletAccountBody, which likely contains the necessary information for exporting a wallet account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TExportWalletAccountBody\n```\n\n----------------------------------------\n\nTITLE: Defining Get Activity API Endpoint in TypeScript\nDESCRIPTION: Specifies the API endpoint for getting activity details, including the HTTP method and path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"POST /public/v1/query/get_activity\"\n```\n\n----------------------------------------\n\nTITLE: Defining the stampTestRateLimits Method in TypeScript\nDESCRIPTION: Method declaration for stampTestRateLimits that tests rate limits and returns a promise with the signed request. Takes a TTestRateLimitsBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_120\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampTestRateLimits(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Clearing IframeStamper\nDESCRIPTION: Example of removing the iframe from the DOM using the clear method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init the IframeStamper\n\niframeStamper.clear();\n```\n\n----------------------------------------\n\nTITLE: Defining READ_ONLY SessionType\nDESCRIPTION: Defines the READ_ONLY session type as a member of the SessionType enumeration. It's assigned the string literal value \"SESSION_TYPE_READ_ONLY\", indicating a session with read-only permissions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/enumerations/SessionType.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"code\": \"READ_ONLY: \\\"SESSION_TYPE_READ_ONLY\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet with Turnkey SDK - TypeScript\nDESCRIPTION: The `stampCreateWallet` function requires an input of type `TCreateWalletBody` and returns a Promise that resolves to either undefined or a `TSignedRequest`. This function is essential for wallet creation in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateWallet(input: TCreateWalletBody): Promise<undefined | TSignedRequest> { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Specifying Properties of TUpdatePrivateKeyTagInput in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TUpdatePrivateKeyTagInput type alias. It has a single property 'body' of type TUpdatePrivateKeyTagBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdatePrivateKeyTagInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TUpdatePrivateKeyTagBody\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUserTagResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the response of the create user tag API endpoint. It maps to the success response schema (200) of the PublicApiService_CreateUserTag operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateUserTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateUserTagResponse** = `operations`[`\"PublicApiService_CreateUserTag\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Intent V2 Structure in TypeScript\nDESCRIPTION: Type definition for the second version of organization creation intent. Includes organization name, root authenticator details, and root user information required for organization setup.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Using currentUserSession for Read-only Operations in TurnkeyBrowserSDK\nDESCRIPTION: Creates a TurnkeyBrowserClient instance that allows multiple read-only requests to Turnkey's API without requiring the user to authenticate each time. This improves UX by reducing friction after the initial login.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\nconst passkeyClient = turnkeySDK.passkeyClient();\nawait passkeySigner.login();\n\n// when a user logs in with the Turnkey SDK, a read-only API credential is saved in localStorage and can be used to make API read requests on their behalf\n\nconst userSessionClient = await turnkeySDK.currentUserSession();\nconst walletsResponse = await userSessionClient.getWallets();\n\n// this API call happens without any confirmation step because the user now has an active read-only session\n```\n\n----------------------------------------\n\nTITLE: Specifying TListUserTagsInput Properties in TypeScript\nDESCRIPTION: This code snippet specifies the 'body' property of the TListUserTagsInput type alias. The property is of type TListUserTagsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TListUserTagsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TListUserTagsBody\n```\n\n----------------------------------------\n\nTITLE: Defining Body Property for Whoami Input - TypeScript\nDESCRIPTION: This snippet defines the body property of the TGetWhoamiInput type alias in TypeScript. The body property is expected to conform to the TGetWhoamiBody type, providing a structured payload when making a POST request to the whoami API endpoint. This structure ensures that the required data format is maintained for the API call to function correctly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWhoamiInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TGetWhoamiBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Types in TypeScript\nDESCRIPTION: This snippet defines a comprehensive set of activity statuses and types using TypeScript's union types. It outlines possible actions and states, facilitating robust type-checking and ensuring that only valid statuses and types can be used throughout the application. Dependencies include TypeScript to utilize type definitions effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createOauthProviders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| ... // Other activity types omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Types in TypeScript\nDESCRIPTION: Defines a complex type for activity results, including various subtypes for different activity outcomes such as OTP authentication, email recovery, OAuth, and more.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nitOtpAuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Name\nDESCRIPTION: This snippet defines a string parameter for naming a sub-organization, which is essential for organizational identity and management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.subOrganizationName \\n`string` \\n\\n**Description** \\nName for this sub-organization\n```\n\n----------------------------------------\n\nTITLE: Defining AuthClient Enum in TypeScript\nDESCRIPTION: Introduces a new enum to track which client is authenticated (Passkey, Wallet, or Iframe).\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nenum AuthClient {\n  Passkey,\n  Wallet,\n  Iframe\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Deletion Result Structure\nDESCRIPTION: This snippet describes 'deleteOrganizationResult', which returns a unique identifier for a deleted organization, expected to be a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_78\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteOrganizationResult?\n\\{ `organizationId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Accounts Intent\nDESCRIPTION: This snippet sets up the parameters for creating wallet accounts linked to a specific wallet, facilitating financial operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletAccountsIntent? \\n\\{ `accounts`: `object`[]; `walletId`: `string`; \\}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletAccountsIntent.accounts \\n`object`[] \\n\\n**Description** \\nA list of wallet Accounts.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createWalletAccountsIntent.walletId \\n`string` \\n\\n**Description** \\nUnique identifier for a given Wallet.\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Solana SDK\nDESCRIPTION: Command to install the @turnkey/solana package via npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/solana/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/solana\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Input in TypeScript\nDESCRIPTION: This type alias defines the structure of the input object for the 'init_import_private_key' API endpoint within the Turnkey SDK. It includes the body property which is of type TInitImportPrivateKeyBody, referencing another type definition that specifies the permissible structure for the request payload.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitImportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TInitImportPrivateKeyInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Management Intent Structure - JavaScript\nDESCRIPTION: This snippet outlines the intent for user email recovery which requires user email, expiration time, and related customizations. It is essential for applications providing password recovery features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n`initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface: Organization Feature Request Type\nDESCRIPTION: Interface definition for removing organization features, including organization ID, parameters, timestamp and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1RemoveOrganizationFeatureRequest {\n  organizationId: string; // Unique identifier for a given Organization\n  parameters: definitions[\"v1RemoveOrganizationFeatureIntent\"];\n  timestampMs: string; // Timestamp (in milliseconds) of the request\n  type: \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\";\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Account Information in TypeScript\nDESCRIPTION: The 'stampGetWalletAccount' function retrieves wallet account details. It requires an input of type 'TGetWalletAccountBody' and returns a Promise resolving to either 'undefined' or 'TSignedRequest'. It inherits its functionality from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetWalletAccount**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetWalletAccountBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Email Auth Example\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, build the source code, and navigate to the email-auth example directory. Requires Node v18+ and uses pnpm as the package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/email-auth/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/email-auth/\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateOauthProvidersBody type alias\nDESCRIPTION: The TCreateOauthProvidersBody type alias is defined as part of the Turnkey SDK.  It corresponds to the request body for the PublicApiService_CreateOauthProviders operation, specifically used with the `POST /public/v1/submit/create_oauth_providers` endpoint. This alias is defined in the public_api.fetcher.d.ts file.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TCreateOauthProvidersBody** = `operations`[`\"PublicApiService_CreateOauthProviders\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining the stampUpdatePolicy Method in TypeScript\nDESCRIPTION: Method declaration for stampUpdatePolicy that updates a policy and returns a promise with the signed request. Takes a TUpdatePolicyBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_121\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdatePolicy(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Activity Type and Status Enums - TypeScript\nDESCRIPTION: Comprehensive type definitions for activity statuses and types, including operations like key management, user management, authentication, and organization management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initOtpAuth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Oauth Providers - TypeScript\nDESCRIPTION: This function, `stampCreateOauthProviders`, takes a `TCreateOauthProvidersBody` as input and returns a promise, which may resolve to undefined or a `TSignedRequest`. It serves to create OAuth providers within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateOauthProviders(input: TCreateOauthProvidersBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateWalletBody Type in TypeScript\nDESCRIPTION: Type alias for the request body parameters used in the PublicApiService_UpdateWallet operation. This type is used for POST requests to /public/v1/submit/update_wallet endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TUpdateWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TUpdateWalletBody = operations[\"PublicApiService_UpdateWallet\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining updateRootQuorumIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for updating root quorum settings in Turnkey. This intent configures the approval threshold and the set of users who can participate in the quorum.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n{ `threshold`: `number`; `userIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateUsersResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that merges the CreateUsers operation response schema with v1ActivityResponse definitions. Used for typing API responses when creating users through the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCreateUsersResponse = operations[\"PublicApiService_CreateUsers\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"createUsersResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.0.21\nDESCRIPTION: Patch update with dependency changes to @turnkey/sdk-server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/solana/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.21\n\n### Patch Changes\n\n- Updated dependencies [7b72769]\n  - @turnkey/sdk-server@3.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Address Format Enums in TypeScript\nDESCRIPTION: Specifies the acceptable address formats for various blockchain and crypto technologies, ensuring compatibility with different protocols and standards. Each format is designed for a specific network, such as Bitcoin's mainnet or testnet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | ... | \"ADDRESS_FORMAT_XRP\"\n```\n\n----------------------------------------\n\nTITLE: Converting Hexadecimal String to Uint8Array in TypeScript\nDESCRIPTION: This function converts a hexadecimal string to a Uint8Array. It takes an optional length parameter to specify the desired array length. The function is defined in the index.ts file of the @turnkey/encoding package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/uint8ArrayFromHexString.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nuint8ArrayFromHexString(hexString: string, length?: number): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure of the OAuth result, which includes an API key ID, a credential bundle, and a user ID, all as strings. This is crucial for handling OAuth-related responses in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetApiKeyRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting an API key, requiring API key and organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetApiKeyRequest {\n  apiKeyId: string;\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Credential Bundle\nDESCRIPTION: Example of injecting an encrypted credential bundle into the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/iframe-stamper/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .. Add imports and init iframeStamper\n\n// Pasted into the iFrame by the user\nconst credentialBundle = \"<your-encrypted-credentials-bundle>\";\n\n// Injects a new credential in the iframe\nconst injected = await iframeStamper.injectCredentialBundle(credentialBundle);\n```\n\n----------------------------------------\n\nTITLE: Defining TGetVerifiedSubOrgIdsBody Type Alias in TypeScript\nDESCRIPTION: Creates a type alias that represents the request body parameters for the PublicApiService_GetVerifiedSubOrgIds operation. This type maps to the body parameter of the POST /public/v1/query/list_verified_suborgs endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetVerifiedSubOrgIdsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetVerifiedSubOrgIdsBody = operations[\"PublicApiService_GetVerifiedSubOrgIds\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Inserting API Key at Specific Location\nDESCRIPTION: Shows how to insert a new API key into Cloud Storage at a specified key location without setting it as the signing key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/telegram-cloud-storage-stamper/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport TelegramCloudStorageStamper from \"@turnkey/telegram-cloud-storage-stamper\";\n\n// create a new Telegram Cloud Storage Stamper\nconst stamper = new TelegramCloudStorageStamper();\n\nconst apiPublicKey = \"...\";\nconst apiPrivateKey = \"...\";\n\n// the key used to index Telegram Cloud Storage\nconst telegramCloudStorageKey = \"@turnkey/telegramCloudStorageKey\";\n\n// insert the API key in Telegram Cloud Storage\nawait stamper.insertAPIKey(\n  apiPublicKey,\n  apiPrivateKey,\n  telegramCloudStorageKey,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Activity and Invitation Types for Turnkey API in TypeScript\nDESCRIPTION: This snippet defines types for managing activities and invitations within the Turnkey platform, providing structures for acceptance intents and activity statuses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"### v1AcceptInvitationIntent\\n\\n> **v1AcceptInvitationIntent**: `object`\\n\\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:427\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Response Type\nDESCRIPTION: Type alias that defines the structure of the response for initializing user email recovery in the Turnkey public API service\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitUserEmailRecoveryResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTInitUserEmailRecoveryResponse = `operations`[`\"PublicApiService_InitUserEmailRecovery\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Feature Parameters in TypeScript SDK\nDESCRIPTION: This snippet defines a type alias `TSetOrganizationFeatureBody` which combines various parameters for setting organization features. It utilizes the `operations`, `parameters`, and `commandOverrideParams` for constructing the type. This structure is crucial for maintaining structured data handling when interacting with the SDK's API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TSetOrganizationFeatureBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TSetOrganizationFeatureBody = operations[\\\"PublicApiService_SetOrganizationFeature\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"][\\\"parameters\\\"] & commandOverrideParams\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Result Type Definitions\nDESCRIPTION: This snippet defines various TypeScript type aliases for the results of different API calls. Each type alias specifies the structure of the result object, including the names and types of its properties. These definitions ensure type safety and facilitate data validation when interacting with the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportPrivateKey.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n}; `initOtpAuthResultV2`: { `otpId`: `string`; }; `initUserEmailRecoveryResult`: { `userId`: `string`; }; `oauthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `otpAuthResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; }; `recoverUserResult`: { `authenticatorId`: `string`[]; }; `removeOrganizationFeatureResult`: { `features`: `object`[]; }; `setOrganizationFeatureResult`: { `features`: `object`[]; }; `setPaymentMethodResult`: { `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; }; `signRawPayloadResult`: { `r`: `string`; `s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Define Intent Structures in JavaScript\nDESCRIPTION: This code snippet defines various intent structures such as `importWalletIntent`, `initOtpAuthIntentV2`, and `signTransactionIntent`. These objects specify required parameters like `userId`, `otpType`, and `privateKeyId` for initializing different intents within the SDK. The definitions are used to standardize input requirements for SDK operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/otpAuth.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"importWalletIntent\": { \"accounts\": \"object\"[], \"encryptedBundle\": \"string\", \"userId\": \"string\", \"walletName\": \"string\" }, \"initOtpAuthIntentV2\": { \"alphanumeric\": \"boolean\", \"contact\": \"string\", \"emailCustomization\": { \"appName\": \"string\", \"logoUrl\": \"string\", \"magicLinkTemplate\": \"string\", \"templateId\": \"string\", \"templateVariables\": \"string\" }, \"otpLength\": \"number\", \"otpType\": \"string\", \"sendFromEmailAddress\": \"string\", \"sendFromEmailSenderName\": \"string\", \"smsCustomization\": { \"template\": \"string\" }, \"userIdentifier\": \"string\" }, \"signTransactionIntent\": { \"privateKeyId\": \"string\", \"type\": \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\", \"unsignedTransaction\": \"string\" } }\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountsBody Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the body parameters of the GetWalletAccounts operation in the PublicApiService. Used for POST requests to /public/v1/query/list_wallet_accounts endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetWalletAccountsBody = operations[\"PublicApiService_GetWalletAccounts\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Intent Definitions\nDESCRIPTION: This JSON-like structure defines the various intents used in the application. Each intent object specifies the data required to perform a specific action. These intents cover a wide range of operations, including user management, authentication, key management, and organization setup.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"{ `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `type`: `\"public-key\"`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `null` || `\"cross-platform\"` || `\"platform\"`; `clientDataJson`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `type`: `\"public-key\"`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: `\"EFFECT_ALLOW\"` || `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: `\"EFFECT_ALLOW\"` || `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` || `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` || `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` || `\"AUTHENTICATOR_TRANSPORT_NFC\"` || `\"AUTHENTICATOR_TRANSPORT_USB\"` || `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` || `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` || `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` || `\"MNEMONIC_LANGUAGE_CZECH\"` || `\"MNEMONIC_LANGUAGE_FRENCH\"` || `\"MNEMONIC_LANGUAGE_ITALIAN\"` || `\"MNEMONIC_LANGUAGE_JAPANESE\"` || `\"MNEMONIC_LANGUAGE_KOREAN\"` || `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (`\"ADDRESS_FORMAT_UNCOMPRESSED\"` || `\"ADDRESS_FORMAT_COMPRESSED\"` || `\"ADDRESS_FORMAT_ETHEREUM\"` || `\"ADDRESS_FORMAT_SOLANA\"` || `\"ADDRESS_FORMAT_COSMOS\"` || `\"ADDRESS_FORMAT_TRON\"` || `\"ADDRESS_FORMAT_SUI\"` || `\"ADDRESS_FORMAT_APTOS\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\"` || `\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\"` || `\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\"` || `\"ADDRESS_FORMAT_BITCOIN_SIGNET\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Tags Deletion Result Structure\nDESCRIPTION: This snippet outlines 'deletePrivateKeyTagsResult', detailing a structure that includes a list of Private Key IDs and their corresponding Tag IDs, both formatted as arrays of strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_82\n\nLANGUAGE: json\nCODE:\n```\nresult.deletePrivateKeyTagsResult?\n\\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/sdk-server using Yarn\nDESCRIPTION: This snippet shows how to install the @turnkey/sdk-server package using Yarn. This package is necessary for building server-side functionalities that interact with the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/documents/docs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/sdk-server\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Intent Types\nDESCRIPTION: This snippet defines the TypeScript types for various activity intents, including those for creating users, organizations, wallets, and managing API keys and authenticators. Each intent includes specific properties related to its function, such as user IDs, organization names, API key lists, and authenticator details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteSubOrganization.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"Promise`<{\n  `activity`: { `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: { `nanos`: `string`; `seconds`: `string`; }; `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; }; `fingerprint`: `string`; `id`: `string`; `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: `\\\"cross-platform\\\"` | `\\\"platform\\\"` | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` | `\\\"platform\\\"` | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: `\\\"public-key\\\"`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: `\\\"cross-platform\\\"` | `\\\"platform\\\"` | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: `\\\"cross-platform\\\"` | `\\\"platform\\\"` | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: `\\\"public-key\\\"`; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: `\\\"EFFECT_ALLOW\\\"` | `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: `\\\"EFFECT_ALLOW\\\"` | `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: `\\\"EFFECT_ALLOW\\\"` | `\\\"EFFECT_DENY\\\"`; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: `\\\"MNEMONIC_LANGUAGE_ENGLISH\\\"` | `\\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\"` | `\\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\"` | `\\\"MNEMONIC_LANGUAGE_CZECH\\\"` | `\\\"MNEMONIC_LANGUAGE_FRENCH\\\"` | `\\\"MNEMONIC_LANGUAGE_ITALIAN\\\"` | `\\\"MNEMONIC_LANGUAGE_JAPANESE\\\"` | `\\\"MNEMONIC_LANGUAGE_KOREAN\\\"` | `\\\"MNEMONIC_LANGUAGE_SPANISH\\\"`; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (`\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\"` | `\\\"ADDRESS_FORMAT_COMPRESSED\\\"` | `\\\"ADDRESS_FORMAT_ETHEREUM\\\"` | `\\\"ADDRESS_FORMAT_SOLANA\\\"` | `\\\"ADDRESS_FORMAT_COSMOS\\\"` | `\\\"ADDRESS_FORMAT_TRON\\\"` | `\\\"ADDRESS_FORMAT_SUI\\\"` | `\\\"ADDRESS_FORMAT_APTOS\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\"` | `\\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\"` | `\\\"ADDRESS_FORMAT_SEI\\\"` | `\\\"ADDRESS_FORMAT_XLM\\\"` | `\\\"ADDRESS_FORMAT_DOGE_MAINNET\\\"` | `\\\"ADDRESS_FORMAT_DOGE_TESTNET\\\"` | `\\\"ADDRESS_FORMAT_TON_V3R2\\\"` | `\\\"ADDRESS_FORMAT_TON_V4R2\\\"` | `\\\"ADDRESS_FORMAT_XRP\\\"`)[]; `curve`: `\\\"CURVE_SECP256K1\\\"` | `\\\"CURVE_ED25519\\\"`; `encryptedBundle`: `string`;\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the NextJS development server on port 3000\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/react-components/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Stamping Delete Users Request in TypeScript\nDESCRIPTION: Method to prepare a signed request for deleting users. Takes a TDeleteUsersBody input parameter and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_84\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteUsers(input: TDeleteUsersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TExportWalletInput Body Property\nDESCRIPTION: Describes the 'body' property within the TExportWalletInput type alias.  The body property is of type TExportWalletBody, which likely defines the specific parameters required for the wallet export operation within the Turnkey SDK server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TExportWalletInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **body**: [`TExportWalletBody`](TExportWalletBody.mdx)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Intent and Result Types\nDESCRIPTION: This code snippet defines various intent and result types for different operations within the SDK. Intents represent actions a user wants to perform (e.g., importing a wallet, initiating OTP authentication), while results represent the outcome of those actions (e.g., successful wallet import, OTP ID generation). These types are used to structure the data exchanged between different parts of the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayload.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`CP256K1\"` \\| `\"CURVE_ED25519\"`; `encryptedBundle`: `string`; `privateKeyName`: `string`; `userId`: `string`; \\}; `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; `initImportPrivateKeyIntent`: \\{ `userId`: `string`; \\}; `initImportWalletIntent`: \\{ `userId`: `string`; \\}; `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initOtpAuthIntentV2`: \\{ `alphanumeric`: `boolean`; `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpLength`: `number`; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `oauthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `oidcToken`: `string`; `targetPublicKey`: `string`; \\}; `otpAuthIntent`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `otpCode`: `string`; `otpId`: `string`; `targetPublicKey`: `string`; \\}; `recoverUserIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `userId`: `string`; \\}; `rejectActivityIntent`: \\{ `fingerprint`: `string`; \\}; `removeOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; \\}; `setOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` \\| `\"FEATURE_NAME_EMAIL_AUTH\"` \\| `\"FEATURE_NAME_EMAIL_RECOVERY\"` \\| `\"FEATURE_NAME_WEBHOOK\"` \\| `\"FEATURE_NAME_SMS_AUTH\"` \\| `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\}; `setPaymentMethodIntent`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `cvv`: `string`; `expiryMonth`: `string`; `expiryYear`: `string`; `number`: `string`; \\}; `setPaymentMethodIntentV2`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `paymentMethodId`: `string`; \\}; `signRawPayloadIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `privateKeyId`: `string`; \\}; `signRawPayloadIntentV2`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payload`: `string`; `signWith`: `string`; \\}; `signRawPayloadsIntent`: \\{ `encoding`: `\"PAYLOAD_ENCODING_HEXADECIMAL\"` \\| `\"PAYLOAD_ENCODING_TEXT_UTF8\"`; `hashFunction`: `\"HASH_FUNCTION_NO_OP\"` \\| `\"HASH_FUNCTION_SHA256\"` \\| `\"HASH_FUNCTION_KECCAK256\"` \\| `\"HASH_FUNCTION_NOT_APPLICABLE\"`; `payloads`: `string`[]; `signWith`: `string`; \\}; `signTransactionIntent`: \\{ `privateKeyId`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `signTransactionIntentV2`: \\{ `signWith`: `string`; `type`: `\"TRANSACTION_TYPE_ETHEREUM\"` \\| `\"TRANSACTION_TYPE_SOLANA\"`; `unsignedTransaction`: `string`; \\}; `updateAllowedOriginsIntent`: \\{ `allowedOrigins`: `string`[]; \\}; `updatePolicyIntent`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePolicyIntentV2`: \\{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` \\| `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; \\}; `updatePrivateKeyTagIntent`: \\{ `addPrivateKeyIds`: `string`[]; `newPrivateKeyTagName`: `string`; `privateKeyTagId`: `string`; `removePrivateKeyIds`: `string`[]; \\}; `updateRootQuorumIntent`: \\{ `threshold`: `number`; `userIds`: `string`[]; \\}; `updateUserIntent`: \\{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; \\}; `updateUserTagIntent`: \\{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; \\}; `updateWalletIntent`: \\{ `walletId`: `string`; `walletName`: `string`; \\}; \\}; `organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\}; `createPolicyResult`: \\{ `policyId`: `string`; \\}; `createPrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `createPrivateKeysResultV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; \\}; `createReadOnlySessionResult`: \\{ `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createReadWriteSessionResultV2`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; \\}; `createSubOrganizationResult`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV3`: \\{ `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; \\}; `createSubOrganizationResultV4`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV5`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV6`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createSubOrganizationResultV7`: \\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}; `createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletAccountsResult`: \\{ `addresses`: `string`[]; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `deleteApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `deleteAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `deleteInvitationResult`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `deleteOrganizationResult`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodResult`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyResult`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysResult`: \\{ `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsResult`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationResult`: \\{ `subOrganizationUuid`: `string`; \\}; `deleteUsersResult`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsResult`: \\{ `userIds`: `string`[]; `userTagIds`: `string`[]; \\}; `deleteWalletsResult`: \\{ `walletIds`: `string`[]; \\}; `disablePrivateKeyResult`: \\{ `privateKeyId`: `string`; \\}; `emailAuthResult`: \\{ `apiKeyId`: `string`; `userId`: `string`; \\}; `exportPrivateKeyResult`: \\{ `exportBundle`: `string`; `privateKeyId`: `string`; \\}; `exportWalletAccountResult`: \\{ `address`: `string`; `exportBundle`: `string`; \\}; `exportWalletResult`: \\{ `exportBundle`: `string`; `walletId`: `string`; \\}; `importPrivateKeyResult`: \\{ `addresses`: `object`[]; `privateKeyId`: `string`; \\}; `importWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; `initImportPrivateKeyResult`: \\{ `importBundle`: `string`; \\}; `initImportWalletResult`: \\{ `importBundle`: `string`; \\}; `initOtpAuthResult`: \\{ `otpId`: `string`; \\}; `initOtpAuthResultV2`: \\{ `otpId`: `string`; \\}; `initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `oauthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `otpAuthResult`: \\{ `apiKeyId`: `string`; `credentialBundle`: `string`; `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\}; `removeOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setOrganizationFeatureResult`: \\{ `features`: `object`[]; \\}; `setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastF\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadOnlySessionResponse Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias that represents the response structure from the Turnkey API's create read-only session endpoint. The type references the response schema for the 200 status code of the PublicApiService_CreateReadOnlySession operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadOnlySessionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateReadOnlySessionResponse** = `operations`[`\"PublicApiService_CreateReadOnlySession\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limits\nDESCRIPTION: Method for testing and evaluating API rate limit configurations. Returns an empty object. Helps in understanding and managing API request constraints.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\ntestRateLimits(input: TTestRateLimitsBody): Promise<{}>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Cubist SDK\nDESCRIPTION: This code snippet defines numerous TypeScript interfaces for various intents and results used in the Cubist SDK. It includes types for operations such as creating users, managing wallets, handling authentication, and interacting with organizational features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createOauthProviders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"CURVE_SECP256K1\" | \"CURVE_ED25519\"; encryptedBundle: string; privateKeyName: string; userId: string; }; importWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; }; initImportPrivateKeyIntent: { userId: string; }; initImportWalletIntent: { userId: string; }; initOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initOtpAuthIntentV2: { alphanumeric: boolean; contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpLength: number; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; }; initUserEmailRecoveryIntent: { email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; targetPublicKey: string; }; oauthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; oidcToken: string; targetPublicKey: string; }; otpAuthIntent: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; otpCode: string; otpId: string; targetPublicKey: string; }; recoverUserIntent: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (... | ... | ... | ... | ...)[]; }; authenticatorName: string; challenge: string; }; userId: string; }; rejectActivityIntent: { fingerprint: string; }; removeOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; }; setOrganizationFeatureIntent: { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; }; setPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; }; setPaymentMethodIntentV2: { cardHolderEmail: string; cardHolderName: string; paymentMethodId: string; }; signRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; }; signRawPayloadIntentV2: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; signWith: string; }; signRawPayloadsIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payloads: string[]; signWith: string; }; signTransactionIntent: { privateKeyId: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; signTransactionIntentV2: { signWith: string; type: \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\"; unsignedTransaction: string; }; updateAllowedOriginsIntent: { allowedOrigins: string[]; }; updatePolicyIntent: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePolicyIntentV2: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyId: string; policyName: string; policyNotes: string; }; updatePrivateKeyTagIntent: { addPrivateKeyIds: string[]; newPrivateKeyTagName: string; privateKeyTagId: string; removePrivateKeyIds: string[]; }; updateRootQuorumIntent: { threshold: number; userIds: string[]; }; updateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; }; updateUserTagIntent: { addUserIds: string[]; newUserTagName: string; removeUserIds: string[]; userTagId: string; }; updateWalletIntent: { walletId: string; walletName: string; }; }; organizationId: string; result: { acceptInvitationResult: { invitationId: string; userId: string; }; activateBillingTierResult: { productId: string; }; createApiKeysResult: { apiKeyIds: string[]; }; createApiOnlyUsersResult: { userIds: string[]; }; createAuthenticatorsResult: { authenticatorIds: string[]; }; createInvitationsResult: { invitationIds: string[]; }; createOauthProvidersResult: { providerIds: string[]; }; createOrganizationResult: { organizationId: string; }; createPoliciesResult: { policyIds: string[]; }; createPolicyResult: { policyId: string; }; createPrivateKeysResult: { privateKeyIds: string[]; }; createPrivateKeysResultV2: { privateKeys: object[]; }; createPrivateKeyTagResult: { privateKeyIds: string[]; privateKeyTagId: string; }; createReadOnlySessionResult: { organizationId: string; organizationName: string; session: string; sessionExpiry: string; userId: string; username: string; }; createReadWriteSessionResult: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createReadWriteSessionResultV2: { apiKeyId: string; credentialBundle: string; organizationId: string; organizationName: string; userId: string; username: string; }; createSubOrganizationResult: { rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV3: { privateKeys: object[]; rootUserIds: string[]; subOrganizationId: string; }; createSubOrganizationResultV4: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV5: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV6: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createSubOrganizationResultV7: { rootUserIds: string[]; subOrganizationId: string; wallet: { addresses: string[]; walletId: string; }; }; createUsersResult: { userIds: string[]; }; createUserTagResult: { userIds: string[]; userTagId: string; }; createWalletAccountsResult: { addresses: string[]; }; createWalletResult: { addresses: string[]; walletId: string; }; deleteApiKeysResult: { apiKeyIds: string[]; }; deleteAuthenticatorsResult: { authenticatorIds: string[]; }; deleteInvitationResult: { invitationId: string; }; deleteOauthProvidersResult: { providerIds: string[]; }; deleteOrganizationResult: { organizationId: string; }; deletePaymentMethodResult: { paymentMethodId: string; }; deletePolicyResult: { policyId: string; }; deletePrivateKeysResult: { privateKeyIds: string[]; }; deletePrivateKeyTagsResult: { privateKeyIds: string[]; privateKeyTagIds: string[]; }; deleteSubOrganizationResult: { subOrganizationUuid: string; }; deleteUsersResult: { userIds: string[]; }; deleteUserTagsResult: { userIds: string[]; userTagIds: string[]; }; deleteWalletsResult: { walletIds: string[]; }; disablePrivateKeyResult: { privateKeyId: string; }; emailAuthResult: { apiKeyId: string; userId: string; }; exportPrivateKeyResult: { exportBundle: string; privateKeyId: string; }; exportWalletAccountResult: { address: string; exportBundle: string; }; exportWalletResult: { exportBundle: string; walletId: string; }; importPrivateKeyResult: { addresses: object[]; privateKeyId: string; }; importWalletResult: { addresses: string[]; walletId: string; }; initImportPrivateKeyResult: { importBundle: string; }; initImportWalletResult: { importBundle: string; }; initOtpAuthResult: { otpId: string; }; initOtpAuthResultV2: { otpId: string; }; initUserEmailRecoveryResult: { userId: string; }; oauthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; }; recoverUserResult: { authenticatorId: string[]; }; removeOrganizationFeatureResult: { features: object[]; }; setOrganizationFeatureResult: { features: object[]; }; setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: str\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the version update to 1.0.2 and lists the dependency updates for @turnkey/http and @turnkey/crypto packages.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.2\n\n### Patch Changes\n\n- Updated dependencies [ecdb29a]\n  - @turnkey/http@2.22.0\n  - @turnkey/crypto@2.3.1\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Result Types in TypeScript\nDESCRIPTION: Comprehensive type definitions for various authentication and activity-related result objects, including OTP authentication, user recovery, OAuth, and policy management results\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  initOtpAuthResultV2: { otpId: string };\n  initUserEmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining signGetApiKey Function in TypeScript\nDESCRIPTION: Declares a constant function signGetApiKey that takes input and optional options parameters, and returns a Promise of SignedRequest. It's used to request a WebAuthn assertion and generate a signed GetApiKey request for Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetApiKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetApiKey: (input: TGetApiKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Configuring TurnkeyProvider in React Native\nDESCRIPTION: Sets up the TurnkeyProvider component with configuration options including API base URL, organization ID, and callback functions for various session events. This wrapper component should be used to enclose the main application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TurnkeyProvider } from \"@turnkey/sdk-react-native\";\nimport { useRouter } from \"expo-router\";\nimport React from \"react\";\n\nexport const AppProviders = ({ children }: { children: React.ReactNode }) => {\n  const router = useRouter();\n\n  const turnkeyConfig = {\n    apiBaseUrl: \"https://api.turnkey.com\",\n    organizationId: \"<your organization id>\",\n    onSessionCreated: (session) => {\n      console.log(\"Session Created\", session);\n    },\n    onSessionSelected: (session) => {\n      console.log(\"Session Selected\", session);\n      router.replace(\"/dashboard\");\n    },\n    onSessionExpired: (session) => {\n      console.log(\"Session Expired\", session);\n      router.push(\"/\");\n    },\n    onSessionCleared: (session) => {\n      console.log(\"Session Cleared\", session);\n      router.push(\"/\");\n    },\n    onSessionExpiryWarning: (session) => {\n      console.log(\"Session is expiring in 15 seconds\", session);\n    },\n  };\n\n  return <TurnkeyProvider config={turnkeyConfig}>{children}</TurnkeyProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Stamping Import Private Key Request in TypeScript\nDESCRIPTION: This method creates a signed request to import a private key. It takes a TImportPrivateKeyBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportPrivateKey(input: TImportPrivateKeyBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining type property in PublicKeyCredentialDescriptor\nDESCRIPTION: This snippet defines the 'type' property of the PublicKeyCredentialDescriptor interface as a string. It specifies the type of the credential being described.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/interfaces/PublicKeyCredentialDescriptor.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: react-native-passkey-stamper/src/index.ts:16\n\ntype: string\n```\n\n----------------------------------------\n\nTITLE: Stamping Get Wallets Request in TypeScript\nDESCRIPTION: Method signature for stampGetWallets which prepares a signed request for retrieving wallets. It accepts a TGetWalletsBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWallets(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivityInput Type Alias\nDESCRIPTION: This snippet defines the `TGetActivityInput` type alias as an object with a `body` property of type `TGetActivityBody`. It specifies the input structure for retrieving an activity in the Turnkey SDK Server.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: TGetActivityInput\n *\n * > **TGetActivityInput** = `object`\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:13](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L13)\n *\n * ## Properties\n *\n * ### body\n *\n * > **body**: [`TGetActivityBody`](TGetActivityBody.mdx)\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:13](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L13)\n */\n```\n\n----------------------------------------\n\nTITLE: signGetPolicy Function in Typescript\nDESCRIPTION: The `signGetPolicy` function is responsible for requesting a WebAuthn assertion and returning a signed `GetPolicy` request, which can then be sent to Turnkey. It accepts a `TGetPolicyInput` object and optional `TurnkeyCredentialRequestOptions` as input. It returns a Promise that resolves to a `SignedRequest` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetPolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **signGetPolicy**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.ts:494](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L494)\n\nRequest a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n\nSee GetPolicy\n\n## Parameters\n\n### input\n\n[`TGetPolicyInput`](../type-aliases/TGetPolicyInput.mdx)\n\n### options?\n\n`TurnkeyCredentialRequestOptions`\n\n## Returns\n\n`Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: signInitImportPrivateKey Function in Turnkey API\nDESCRIPTION: This snippet defines the `signInitImportPrivateKey` function, which is responsible for requesting a WebAuthn assertion and returning a signed `InitImportPrivateKey` request. It accepts an input of type `TInitImportPrivateKeyInput` and an optional `TurnkeyCredentialRequestOptions` object. The function returns a Promise that resolves to a `SignedRequest` object, representing the signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signInitImportPrivateKey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See InitImportPrivateKey\n */\n> **signInitImportPrivateKey**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.ts:2940](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.ts#L2940)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional API Response Types in TypeScript\nDESCRIPTION: This snippet defines optional properties for various API response types using TypeScript. Each property references a specific definition type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_131\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateSubOrganizationResultV5?: definitions[\"v1CreateSubOrganizationResultV5\"];\ncreateSubOrganizationResultV6?: definitions[\"v1CreateSubOrganizationResultV6\"];\ncreateSubOrganizationResultV7?: definitions[\"v1CreateSubOrganizationResultV7\"];\ncreateUsersResult?: definitions[\"v1CreateUsersResult\"];\ncreateUserTagResult?: definitions[\"v1CreateUserTagResult\"];\ncreateWalletAccountsResult?: definitions[\"v1CreateWalletAccountsResult\"];\ncreateWalletResult?: definitions[\"v1CreateWalletResult\"];\ndeleteApiKeysResult?: definitions[\"v1DeleteApiKeysResult\"];\ndeleteAuthenticatorsResult?: definitions[\"v1DeleteAuthenticatorsResult\"];\ndeleteInvitationResult?: definitions[\"v1DeleteInvitationResult\"];\ndeleteOauthProvidersResult?: definitions[\"v1DeleteOauthProvidersResult\"];\ndeleteOrganizationResult?: definitions[\"v1DeleteOrganizationResult\"];\ndeletePaymentMethodResult?: definitions[\"billingDeletePaymentMethodResult\"];\ndeletePolicyResult?: definitions[\"v1DeletePolicyResult\"];\ndeletePrivateKeysResult?: definitions[\"v1DeletePrivateKeysResult\"];\ndeletePrivateKeyTagsResult?: definitions[\"v1DeletePrivateKeyTagsResult\"];\ndeleteSubOrganizationResult?: definitions[\"v1DeleteSubOrganizationResult\"];\ndeleteUsersResult?: definitions[\"v1DeleteUsersResult\"];\ndeleteUserTagsResult?: definitions[\"v1DeleteUserTagsResult\"];\ndeleteWalletsResult?: definitions[\"v1DeleteWalletsResult\"];\ndisablePrivateKeyResult?: definitions[\"v1DisablePrivateKeyResult\"];\nemailAuthResult?: definitions[\"v1EmailAuthResult\"];\nexportPrivateKeyResult?: definitions[\"v1ExportPrivateKeyResult\"];\nexportWalletAccountResult?: definitions[\"v1ExportWalletAccountResult\"];\nexportWalletResult?: definitions[\"v1ExportWalletResult\"];\nimportPrivateKeyResult?: definitions[\"v1ImportPrivateKeyResult\"];\nimportWalletResult?: definitions[\"v1ImportWalletResult\"];\ninitImportPrivateKeyResult?: definitions[\"v1InitImportPrivateKeyResult\"];\ninitImportWalletResult?: definitions[\"v1InitImportWalletResult\"];\ninitOtpAuthResult?: definitions[\"v1InitOtpAuthResult\"];\ninitOtpAuthResultV2?: definitions[\"v1InitOtpAuthResultV2\"];\ninitUserEmailRecoveryResult?: definitions[\"v1InitUserEmailRecoveryResult\"];\noauthResult?: definitions[\"v1OauthResult\"];\notpAuthResult?: definitions[\"v1OtpAuthResult\"];\nrecoverUserResult?: definitions[\"v1RecoverUserResult\"];\nremoveOrganizationFeatureResult?: definitions[\"v1RemoveOrganizationFeatureResult\"];\nsetOrganizationFeatureResult?: definitions[\"v1SetOrganizationFeatureResult\"];\nsetPaymentMethodResult?: definitions[\"billingSetPaymentMethodResult\"];\nsignRawPayloadResult?: definitions[\"v1SignRawPayloadResult\"];\nsignRawPayloadsResult?: definitions[\"v1SignRawPayloadsResult\"];\nsignTransactionResult?: definitions[\"v1SignTransactionResult\"];\nupdateAllowedOriginsResult?: definitions[\"v1UpdateAllowedOriginsResult\"];\nupdatePolicyResult?: definitions[\"v1UpdatePolicyResult\"];\nupdatePolicyResultV2?: definitions[\"v1UpdatePolicyResultV2\"];\nupdatePrivateKeyTagResult?: definitions[\"v1UpdatePrivateKeyTagResult\"];\nupdateRootQuorumResult?: definitions[\"v1UpdateRootQuorumResult\"];\nupdateUserResult?: definitions[\"v1UpdateUserResult\"];\nupdateUserTagResult?: definitions[\"v1UpdateUserTagResult\"];\nupdateWalletResult?: definitions[\"v1UpdateWalletResult\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Return Type for TurnKey SDK in TypeScript\nDESCRIPTION: This snippet defines a complex return type for a Promise, including detailed structures for activities, intents, and various crypto-related operations. It covers functionalities like creating organizations, managing users, handling wallets, and performing authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n            clientExtensionResults: { \n              appid: boolean; \n              appidExclude: boolean; \n              credProps: { \n                rk: ...; \n              }; \n            }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: null | \"cross-platform\" | \"platform\"; \n              clientDataJson: string; \n              transports: ...[]; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      // ... more intent types ...\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Client\nDESCRIPTION: This snippet outlines how to create a wallet client using an Ethereum wallet to authenticate requests to the Turnkey API. It emphasizes the use of a signature to validate activity requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/README.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createWalletClient,\n  custom,\n  recoverPublicKey,\n  hashMessage,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { mainnet } from \"viem/chains\";\n\nimport { WalletStamper, EthereumWallet } from \"@turnkey/wallet-stamper\";\n\nconst walletClient = turnkey.walletClient(new EthereumWallet());\n\n// Make authenticated requests to Turnkey API, such as listing user's wallets\n// User will be prompted to sign a message to authenticate the request\nconst walletsResponse = await walletClient.getWallets();\n```\n\n----------------------------------------\n\nTITLE: Defining API Types - DeletePolicy\nDESCRIPTION: Type definitions for deleting policies including request and result interfaces\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1DeletePolicyRequest {\n  organizationId: string;\n  parameters: definitions[\"v1DeletePolicyIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_DELETE_POLICY\";\n}\n\ninterface v1DeletePolicyResult {\n  policyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining updateUserTag Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the function signature for updateUserTag. It takes an input parameter and returns a Promise that resolves to an object containing detailed activity information, including approval status, creation time, and various intent types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateUserTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserTag(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... various intent types ... */ }; /* ... more properties ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Activity Response Schema\nDESCRIPTION: This snippet outlines a detailed JSON schema structure for the resolved value of a Promise, which encapsulates different activity intents such as handling invitations, authentication, and organization management. Key parameters include activity types and properties such as user identifiers, invitation IDs, and authenticator details. It is essential that the caller adheres to intended property types and hierarchy to interact correctly with intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`Promise`\\<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[];...\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Providers in Fireblocks API (TypeScript)\nDESCRIPTION: API endpoint definition for removing OAuth providers for a specified user. This is marked as a BETA feature and requires a POST request to /public/v1/submit/delete_oauth_providers with a TDeleteOauthProvidersInput parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteOauthProviders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Delete Oauth Providers\n *\n * Removes Oauth providers for a specified user - BETA\n *\n * `POST /public/v1/submit/delete_oauth_providers`\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TDeleteOauthProvidersInput`](../type-aliases/TDeleteOauthProvidersInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the response schema for successful API key retrieval operations. It corresponds to the 200 response schema of the PublicApiService_GetApiKeys operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetApiKeysResponse = operations[\"PublicApiService_GetApiKeys\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum in TypeScript\nDESCRIPTION: This snippet defines possible activity statuses as a TypeScript union type, allowing predefined statuses for activities. It enhances type safety by restricting status values to a fixed set.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/setOrganizationFeature.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteInvitationIntent Interface in TypeScript\nDESCRIPTION: Specifies the structure for deleting an invitation, including the invitation ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1DeleteInvitationIntent {\n  invitationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamp Otp Auth with Turnkey SDK\nDESCRIPTION: This function `stampOtpAuth` is responsible for creating a signed request for OTP authentication using the Turnkey SDK. It takes `TOtpAuthBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. This function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampOtpAuth**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2234](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2234)\n\n#### Parameters\n\n##### input\n\n`TOtpAuthBody`\n\n#### Returns\n\n`Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining ApproveActivityIntent Type in TypeScript\nDESCRIPTION: This snippet defines the structure for approving an activity, including a fingerprint for verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApproveActivityIntent = {\n  fingerprint: string;\n};\n```\n\n----------------------------------------\n\nTITLE: PublicKeyCredentialDescriptor Interface Definition\nDESCRIPTION: Interface defining the structure of public key credential descriptors for WebAuthn.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninterface PublicKeyCredentialDescriptor {\n  id: BufferSource;\n  transports?: AuthenticatorTransport[];\n  type: PublicKeyCredentialType;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack and Verifying PNPM Installation (Bash)\nDESCRIPTION: Commands to enable corepack for managing pnpm and verify the installed pnpm version.\nSOURCE: https://github.com/tkhq/sdk/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ corepack enable\n$ pnpm --version # Should output \"8.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteUsersRequest type\nDESCRIPTION: Defines the structure for a request to delete users. It includes the organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteUsersRequest\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1330\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[``\"v1DeleteUsersIntent\"``]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: ``\"ACTIVITY_TYPE_DELETE_USERS\"``\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteUserTagsRequest type\nDESCRIPTION: Defines the structure for a request to delete user tags. It includes the organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteUserTagsRequest\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1311\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[``\"v1DeleteUserTagsIntent\"``]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: ``\"ACTIVITY_TYPE_DELETE_USER_TAGS\"``\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payloads Signature Result Structure - TypeScript\nDESCRIPTION: This snippet defines the result structure for signing multiple raw payloads, which contains an array of signatures. This is critical in batch processing of cryptographic signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initImportWallet.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1FeatureName Enum in TypeScript\nDESCRIPTION: Defines an enum-like type for feature names used in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype v1FeatureName = \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\";\n```\n\n----------------------------------------\n\nTITLE: Environment File Setup\nDESCRIPTION: Command to create a local environment file from the example template.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-biconomy-aa/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Defining optional transports property in PublicKeyCredentialDescriptor\nDESCRIPTION: This snippet defines the optional 'transports' property of the PublicKeyCredentialDescriptor interface as an array of AuthenticatorTransport enums. This property specifies the transport methods that can be used with the credential.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/interfaces/PublicKeyCredentialDescriptor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in: react-native-passkey-stamper/src/index.ts:18\n\n// optional transports property\ntransports?: AuthenticatorTransport[]\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Management Intent Structure - JavaScript\nDESCRIPTION: This snippet captures the structure for setting and removing organization features, specifically naming and toggling features for user authentication. This is important for feature management within the software.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeys.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n`setOrganizationFeatureIntent`: \\{ `name`: `\"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBAUTHN_ORIGINS\"` | `\"FEATURE_NAME_EMAIL_AUTH\"` | `\"FEATURE_NAME_EMAIL_RECOVERY\"` | `\"FEATURE_NAME_WEBHOOK\"` | `\"FEATURE_NAME_SMS_AUTH\"` | `\"FEATURE_NAME_OTP_EMAIL_AUTH\"`; `value`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Documenting 'Delete Private Keys' API Endpoint\nDESCRIPTION: Provides documentation for the 'Delete Private Keys' API endpoint, including the HTTP method, path, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nDelete Private Keys\n\nDeletes private keys for an organization\n\n`POST /public/v1/submit/delete_private_keys`\n\n## Parameters\n\n### input\n\n[`TDeletePrivateKeysInput`](../type-aliases/TDeletePrivateKeysInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining v1CreatePrivateKeyTagResult Type - TypeScript\nDESCRIPTION: Specifies the result structure for private key tag creation, including private key IDs and the unique tag ID. This type is crucial for responding to requests related to private key tagging.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeyTagResult {\n  privateKeyIds: string[];\n  privateKeyTagId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users with CREATE_USERS_V3 Activity Parameters\nDESCRIPTION: Type definition for the users parameter in CREATE_USERS_V3 activity. Supports user name, email, phone number, API keys, authenticators, OAuth providers and user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/http/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @description A list of Users. */\nusers: {\n  /** @description Human-readable name for a User. */\n  userName: string;\n  /** @description The user's email address. */\n  userEmail?: string;\n  /** @description The user's phone number in E.164 format e.g. +13214567890 */\n  userPhoneNumber?: string;\n  /** @description A list of API Key parameters. This field, if not needed, should be an empty array in your request body. */\n  apiKeys: definitions[\"v1ApiKeyParamsV2\"][];\n  /** @description A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body. */\n  authenticators: definitions[\"v1AuthenticatorParamsV2\"][];\n  /** @description A list of Oauth providers. This field, if not needed, should be an empty array in your request body. */\n  oauthProviders: definitions[\"v1OauthProviderParams\"][];\n  /** @description A list of User Tag IDs. This field, if not needed, should be an empty array in your request body. */\n  userTags: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Simple Sequential Transaction Script\nDESCRIPTION: Command to execute the script that demonstrates sending transactions sequentially, where each transaction waits for the previous one to be confirmed before proceeding.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-nonce-manager/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start-simple-sequential\n```\n\n----------------------------------------\n\nTITLE: Defining the body Property for TGetApiKeyInput in TypeScript\nDESCRIPTION: This snippet defines a single property 'body' for the TGetApiKeyInput, which is expected to be of type TGetApiKeyBody. This property outlines the structure of the data that must be sent in the request body when calling the get_api_key API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TGetApiKeyBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Recover User Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the result of a user recovery operation containing an array of authenticatorIds.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nrecoverUserResult`: \\{ `authenticatorId`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetAuthenticatorRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting an authenticator, requiring authenticator and organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetAuthenticatorRequest {\n  authenticatorId: string;\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: command method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, is a generic command execution function. It takes a URL, a request body, and a result key as input. It returns a Promise that resolves to the response type `TResponseType`. The method is used internally by other methods to execute API commands.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    command<TBodyType, TResponseType>(\n        url: string,\n        body: TBodyType,\n        resultKey: string\n    ): Promise<TResponseType> {\n        return this.stamper.stamp<TBodyType, TResponseType>(url, body, resultKey);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default TON V4R2 Wallet Accounts in TypeScript\nDESCRIPTION: Provides a constant array of predefined wallet accounts for TON blockchain, likely used for initialization or reference purposes in the Turnkey SDK\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_TON_V4R2_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_TON_V4R2_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure - JSON\nDESCRIPTION: This snippet defines the structure for the import wallet intent, which includes parameters for accounts, an encrypted bundle, user ID, and wallet name. It provides a schema for handling the importation of wallet data securely and effectively.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"importWalletIntent\": { \"accounts\": \"object\"[], \"encryptedBundle\": \"string\", \"userId\": \"string\", \"walletName\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreatePolicyInput Properties in TypeScript\nDESCRIPTION: Defines the body property of the TCreatePolicyInput type alias. The body is of type TCreatePolicyBody and is used to provide the necessary information for creating a policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePolicyInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreatePolicyBody\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Activity Statuses in TypeScript\nDESCRIPTION: Declaration of a constant array containing all terminal (final) activity statuses for the Turnkey API. This is used to determine when an activity has reached its end state.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/variables/TERMINAL_ACTIVITY_STATUSES.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst TERMINAL_ACTIVITY_STATUSES: [`TurnkeyApiTypes`](../type-aliases/TurnkeyApiTypes.mdx)[`\"v1ActivityStatus\"`][]\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Stamp Type Definition\nDESCRIPTION: Type definition for WebAuthn authentication data including credential and signature information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1WebAuthnStamp = {\n  authenticatorData: string;\n  clientDataJson: string;\n  credentialId: string;\n  signature: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defaultBitcoinTestnetP2WSHAccountAtIndex Function using TypeScript\nDESCRIPTION: The defaultBitcoinTestnetP2WSHAccountAtIndex function generates a WalletAccount instance for the Bitcoin testnet based on the provided path index. It requires a number input that specifies the index in the derivation path for the account. The function returns an instance of WalletAccount, which contains methods and properties for managing the Bitcoin account on the testnet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinTestnetP2WSHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction defaultBitcoinTestnetP2WSHAccountAtIndex(pathIndex: number): WalletAccount {\n    // Implementation here...\n}\n```\n\n----------------------------------------\n\nTITLE: Private Key Intent Types in TypeScript\nDESCRIPTION: Type definitions for creating private keys including request parameters, response types and metadata fields.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeysIntentV2 {\n  privateKeys: definitions[\"v1PrivateKeyParams\"][];\n}\n\ninterface v1CreatePrivateKeysRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreatePrivateKeysIntentV2\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateApiOnlyUsersInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript type alias `TCreateApiOnlyUsersInput`, which represents an object used as input for the API endpoint that creates users. The type includes a property called `body` that expects a structure defined by `TCreateApiOnlyUsersBody`. It is essential to correctly implement this type when constructing requests to the related endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TCreateApiOnlyUsersInput = {\\n  body: TCreateApiOnlyUsersBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for User Tag List Input - TypeScript\nDESCRIPTION: This snippet defines a type alias TListUserTagsInput as an object, which is essential for structuring requests to the list user tags endpoint in the public API. This type ensures that the request body adheres to the expected shape defined by TListUserTagsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListUserTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TListUserTagsInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Building SDK Dependencies\nDESCRIPTION: Commands for cloning the repository, installing dependencies with pnpm, and building the source code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-aptos/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-aptos/\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pnpm - Bash Script\nDESCRIPTION: Executes tests using pnpm in a shell linked to the local Ethereum node provided by Anvil. Assumes the environment is correctly configured with necessary packages and pathways.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/README.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining TOauthBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TOauthBody type alias. It combines the parameters from the PublicApiService_Oauth operation with commandOverrideParams. This type is likely used for structuring the body of OAuth-related requests in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOauthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TOauthBody = operations[\"PublicApiService_Oauth\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Login with Passkey in Turnkey Browser SDK\nDESCRIPTION: The `loginWithPasskey` function allows users to log in using a passkey.  It accepts a `LoginWithPasskeyParams` object as input and returns a promise that resolves to void. The function is designed to be used with a `passkeyStamper` and is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n> **loginWithPasskey**(`params`): `Promise`\\<`void`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_clients\\_\\_/browser-clients.ts:262](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__clients__/browser-clients.ts#L262)\n\nLog in with a passkey.\nTo be used in conjunction with a `passkeyStamper`\n\n#### Parameters\n\n##### params\n\n`LoginWithPasskeyParams`\n\n#### Returns\n\n`Promise`\\<`void`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`loginWithPasskey`](TurnkeyBrowserClient.mdx#loginwithpasskey)\n```\n\n----------------------------------------\n\nTITLE: Activity Interface Definitions in TypeScript\nDESCRIPTION: Comprehensive TypeScript interface definitions covering activity statuses, types and result objects. Includes definitions for email recovery, OAuth, OTP authentication, organization management, wallet operations, and blockchain transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRawPayload.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nEmailRecoveryResult: { userId: string };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Type Aliases Index\nDESCRIPTION: Markdown listing of available TypeScript type aliases organized by functionality. Includes input/output types for API operations like activity approval, API key management, user management, authentication, policies, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Type Aliases\n\n- [TApproveActivityBody](type-aliases/TApproveActivityBody.mdx)\n- [TApproveActivityInput](type-aliases/TApproveActivityInput.mdx)\n- [TApproveActivityResponse](type-aliases/TApproveActivityResponse.mdx)\n...\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for SDK Operations\nDESCRIPTION: This code snippet defines numerous TypeScript interfaces for various SDK operations, including authentication, wallet management, policy creation, and more. It covers both input (intent) and output (result) interfaces for different SDK functions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPolicies.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivateKeyName: string;\nuserId: string;\n};\nimportWalletIntent: {\naccounts: object[];\nencryptedBundle: string;\nuserId: string;\nwalletName: string;\n};\ninitImportPrivateKeyIntent: {\nuserId: string;\n};\ninitImportWalletIntent: {\nuserId: string;\n};\ninitOtpAuthIntent: {\ncontact: string;\nemailCustomization: {\nappName: string;\nlogoUrl: string;\nmagicLinkTemplate: string;\ntemplateId: string;\ntemplateVariables: string;\n};\notpType: string;\nsendFromEmailAddress: string;\nsendFromEmailSenderName: string;\nsmsCustomization: {\ntemplate: string;\n};\nuserIdentifier: string;\n};\n// ... (many more interfaces defined) ...\nresult: {\nacceptInvitationResult: {\ninvitationId: string;\nuserId: string;\n};\nactivateBillingTierResult: {\nproductId: string;\n};\ncreateApiKeysResult: {\napiKeyIds: string[];\n};\n// ... (many more result interfaces defined) ...\nsignRawPayloadResult: {\nr: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Provider\nDESCRIPTION: Example of implementing the TurnkeyThemeProvider for customizing component styling using CSS variables.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/README.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TurnkeyThemeProvider } from \"@turnkey/sdk-react\";\n\nconst customTheme = {\n  \"--text-primary\": \"#333333\",\n  \"--button-bg\": \"#4c48ff\",\n  \"--button-hover-bg\": \"#3b38e6\",\n};\n\nexport default function App() {\n  return (\n    <TurnkeyThemeProvider theme={customTheme}>\n      <YourComponent />\n    </TurnkeyThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Response Type Alias\nDESCRIPTION: Type alias that maps the response schema for the wallet import operation in the Turnkey public API service. Represents the successful (200 OK) response structure for importing a wallet.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TImportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTImportWalletResponse = operations[\"PublicApiService_ImportWallet\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for TurnKey SDK API in TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for various result structures returned by different API operations in the TurnKey SDK. It includes structures for authentication, organization management, and cryptographic operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importPrivateKey.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nOtpAuthResultV2: { otpId: string; };\ninitUserEmailRecoveryResult: { userId: string; };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetOauthProvidersRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting OAuth providers, with an optional user ID filter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetOauthProvidersRequest {\n  organizationId: string;\n  userId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Test Rate Limits Method Definition in TypeScript\nDESCRIPTION: Method to test API rate limits. Takes a TTestRateLimitsBody input parameter and returns an empty object Promise.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\ntestRateLimits(input: TTestRateLimitsBody): Promise<{}>\n```\n\n----------------------------------------\n\nTITLE: TurnkeyDirectWallet Account Methods\nDESCRIPTION: Implementation of getAccounts() method that returns a Promise of readonly AccountData array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/index/classes/TurnkeyDirectWallet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAccounts(): Promise<readonly AccountData[]>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePoliciesResponse Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the TCreatePoliciesResponse which maps to the 200 response schema of the PublicApiService_CreatePolicies operation. This type represents the structure of the response received when creating policies via the POST /public/v1/submit/create_policies endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePoliciesResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreatePoliciesResponse** = `operations`[`\"PublicApiService_CreatePolicies\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Structure for Signing Raw Payloads\nDESCRIPTION: This snippet defines the intent structure for signing raw payloads, specifying the encoding method, hash function to be used, the payload itself, and the private key ID for signing. This structure is critical for ensuring signed transactions are authentic.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteSubOrganization.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadIntent: { encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\"; hashFunction: \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\"; payload: string; privateKeyId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Email Authentication Result Structure\nDESCRIPTION: This snippet defines 'emailAuthResult', which includes unique identifiers for the created API key and the authenticating User, formatted as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_88\n\nLANGUAGE: json\nCODE:\n```\nresult.emailAuthResult?\n\\{ `apiKeyId`: `string`; `userId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiOnlyUsersRequest Type\nDESCRIPTION: Defines the structure for the `v1CreateApiOnlyUsersRequest` object, representing the request to create API-only users. It includes the `organizationId`, `parameters` (of type `v1CreateApiOnlyUsersIntent`), `timestampMs`, and `type`. This is the top-level request structure sent to the Coordinator service to create API-only users within a specific organization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiOnlyUsersRequest\n * @property {string} organizationId Unique identifier for a given Organization.\n * @property {definitions[\"v1CreateApiOnlyUsersIntent\"]} parameters\n * @property {string} timestampMs Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\n * @property {(\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\")} type\n */\n```\n\n----------------------------------------\n\nTITLE: Defining v1RecoverUserResult type\nDESCRIPTION: Defines the structure for a user recovery result, including the ID of the authenticator created. This represents the outcome of a user recovery operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\n            v1RecoverUserResult: {\n                name: \"v1RecoverUserResult\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        authenticatorId: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\"\n                            },\n                            description: \"ID of the authenticator created.\",\n                            required: true\n                        }\n                    },\n                    required: [\"authenticatorId\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Type Alias in TypeScript\nDESCRIPTION: Creates a type alias 'Timestamp' that references the 'externaldatav1Timestamp' type from the TurnkeyApiTypes interface. This provides a more convenient way to reference timestamp-related types in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/Timestamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Timestamp = TurnkeyApiTypes[\"externaldatav1Timestamp\"]\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Deletion Result - TypeScript\nDESCRIPTION: Describes the result returned after deleting API keys, confirming the identifiers of keys that were successfully deleted. This is crucial for reporting back to the client on deletion success.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteApiKeysResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1168\n */\nexport interface v1DeleteApiKeysResult {\n  apiKeyIds: string[]; // A list of API Key IDs.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPolicyRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting a specific policy, requiring organization and policy IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPolicyRequest {\n  organizationId: string;\n  policyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeysRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting multiple private keys, requiring the organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetPrivateKeysRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building SDK Dependencies\nDESCRIPTION: Commands for cloning the repository, enabling pnpm package manager, installing dependencies, and building the source code\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/react-components/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/react-components/\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Organization Management\nDESCRIPTION: Contains type definitions for creating and managing organizations including organization intents, requests and results. Includes fields for organization name, root user details and authentication parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreateOrganizationIntent {\n  organizationName: string;\n  rootAuthenticator: v1AuthenticatorParams;\n  rootEmail: string;\n  rootUserId?: string;\n}\n\ninterface v1CreateOrganizationResult {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TGetPoliciesInput Properties Definition\nDESCRIPTION: Defines the required body property for the TGetPoliciesInput type, which must be of type TGetPoliciesBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPoliciesInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetPoliciesBody\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure\nDESCRIPTION: This snippet outlines the structure of 'initOtpAuthIntent', including parameters for user identification and customization options for email and SMS. This intent facilitates the OTP authentication process for users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Types Enumeration\nDESCRIPTION: This TypeScript snippet defines various activity statuses and types as string literals. These types cover a broad range of operations such as user creation, key management, and authentication processes, among others. This setup ensures type safety across the application where these statuses and types are used.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signRawPayloads.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \\\"ACTIVITY_STATUS_CREATED\\\" \\| \\\"ACTIVITY_STATUS_PENDING\\\" \\| \\\"ACTIVITY_STATUS_COMPLETED\\\" \\| \\\"ACTIVITY_STATUS_FAILED\\\" \\| \\\"ACTIVITY_STATUS_CONSENSUS_NEEDED\\\" \\| \\\"ACTIVITY_STATUS_REJECTED\\\"; \\ntype: \\\"ACTIVITY_TYPE_CREATE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_INVITATIONS\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USERS\\\" \\| ...\n```\n\n----------------------------------------\n\nTITLE: Defining API Result Types in TypeScript\nDESCRIPTION: This snippet defines various result types for different API operations in the TurnKey SDK. It includes types for authentication, organization management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initUserEmailRecovery.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuthResultV2: { otpId: string; };\ninitUserEmailRecoveryResult: { userId: string; };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\nrecoverUserResult: { authenticatorId: string[]; };\nremoveOrganizationFeatureResult: { features: object[]; };\nsetOrganizationFeatureResult: { features: object[]; };\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\nsignRawPayloadResult: { r: string; s: string; v: string; };\nsignRawPayloadsResult: { signatures: object[]; };\nsignTransactionResult: { signedTransaction: string; };\nupdateAllowedOriginsResult: {};\nupdatePolicyResult: { policyId: string; };\nupdatePolicyResultV2: { policyId: string; };\nupdatePrivateKeyTagResult: { privateKeyTagId: string; };\nupdateRootQuorumResult: {};\nupdateUserResult: { userId: string; };\nupdateUserTagResult: { userTagId: string; };\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining updateUserTagIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for updating user tags in Turnkey. This intent allows adding or removing users from a tag and updating the tag's name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: This TypeScript snippet defines a type alias TGetWhoamiResponse used within the Turnkey SDK server. It represents the schema for a 200 HTTP status response from the 'PublicApiService_GetWhoami' operation. There are no external dependencies for this type alias.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetWhoamiResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TGetWhoamiResponse = operations[\\\"PublicApiService_GetWhoami\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Requesting WebAuthn Assertion with Turnkey API in TypeScript\nDESCRIPTION: The `signGetAuthenticators` function requests a WebAuthn assertion and returns a promise that resolves to a signed 'GetAuthenticators' request. This request is ready to be POSTed to Turnkey. It requires input defined by `TGetAuthenticatorsInput` and accepts optional 'TurnkeyCredentialRequestOptions'. The function returns a promise resolving to `SignedRequest`. Ensure necessary type aliases and interfaces are available, and handle promise resolution accordingly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signGetAuthenticators**(`input`, `options`?): `Promise`<`SignedRequest`>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and build the source code before accessing the nonce manager example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-nonce-manager/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-nonce-manager/\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUserTagsInput Type Alias in TypeScript\nDESCRIPTION: Defines the TDeleteUserTagsInput type alias as an object with a single property 'body' of type TDeleteUserTagsBody. This type is used for the POST request to delete user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteUserTagsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteUserTagsInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TInitImportPrivateKeyInput Type Alias\nDESCRIPTION: Defines a type alias `TInitImportPrivateKeyInput` as an object.  This type is used as the input for the `init_import_private_key` endpoint of the Turnkey API.  It specifies that the input contains a `body` property, which is of type `TInitImportPrivateKeyBody`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitImportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @deprecated\n */\n\n> **TInitImportPrivateKeyInput** = `object`\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:51214\n\n`POST /public/v1/submit/init_import_private_key`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n### body\n\n> **body**: [`TInitImportPrivateKeyBody`](TInitImportPrivateKeyBody.mdx)\n\nDefined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:51215\n```\n\n----------------------------------------\n\nTITLE: Defining apiPublicKey Property in CloudStorageAPIKey\nDESCRIPTION: This snippet defines the property `apiPublicKey` of the type alias `CloudStorageAPIKey`, indicating that it is a string type. The public key is generally used for identifying the API and managing access to resources.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/type-aliases/CloudStorageAPIKey.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napiPublicKey: string\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Interface Types in TypeScript\nDESCRIPTION: This code snippet defines a large set of TypeScript interfaces for various SDK operations. It includes types for intents (input parameters) and results (output data) for operations like user creation, authentication, wallet management, and organization settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivateKeyName: string;\nuserId: string;\n};\nimportWalletIntent: {\naccounts: object[];\nencryptedBundle: string;\nuserId: string;\nwalletName: string;\n};\ninitImportPrivateKeyIntent: {\nuserId: string;\n};\ninitImportWalletIntent: {\nuserId: string;\n};\ninitOtpAuthIntent: {\ncontact: string;\nemailCustomization: {\nappName: string;\nlogoUrl: string;\nmagicLinkTemplate: string;\ntemplateId: string;\ntemplateVariables: string;\n};\notpType: string;\nsendFromEmailAddress: string;\nsendFromEmailSenderName: string;\nsmsCustomization: {\ntemplate: string;\n};\nuserIdentifier: string;\n};\n// ... (many more interface definitions)\n```\n\n----------------------------------------\n\nTITLE: Defining type for updatedAt field\nDESCRIPTION: This snippet defines the type for the `updatedAt` field. It uses a type alias `definitions` with a key `externaldatav1Timestamp` to define the structure of the `updatedAt` field. This is likely part of a larger interface or type definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\n> **updatedAt**: `definitions`[`\"externaldatav1Timestamp\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Set Payment Method Result Structure in TypeScript\nDESCRIPTION: Defines the structure for setting a payment method result, including cardHolderEmail, cardHolderName, and lastFour as strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Deletion Result Structure\nDESCRIPTION: This snippet outlines 'deletePaymentMethodResult', which provides information about the unique identifier of the removed payment method as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_79\n\nLANGUAGE: json\nCODE:\n```\nresult.deletePaymentMethodResult?\n\\{ `paymentMethodId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining User Votes Structure - TypeScript\nDESCRIPTION: This snippet defines the structure for user votes on a Consensus request, capturing approval or rejection metadata. It uses 'definitions' to reference external types for votes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **votes**: `definitions`[`\"v1Vote\"`][]\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteWalletsResult type\nDESCRIPTION: Defines the structure for the result of a wallet deletion request, containing a list of wallet IDs that were removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteWalletsResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1358\n\n#### walletIds\n\n> **walletIds**: `string`[]\n\n##### Description\n\nA list of wallet unique identifiers that were removed\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Get Activity Response in TypeScript\nDESCRIPTION: This snippet defines the TGetActivityResponse type alias which represents the structure of a successful response from the PublicApiService_GetActivity operation. It is essential for type safety and improving code readability in TypeScript applications that interact with this SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **TGetActivityResponse** = `operations`\\[`\\\"PublicApiService_GetActivity\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreatePoliciesBody Type Alias in TypeScript\nDESCRIPTION: Defines a type alias that represents the body parameters for the CreatePolicies API endpoint. It maps to the body parameter type from the PublicApiService_CreatePolicies operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreatePoliciesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreatePoliciesBody = operations[\"PublicApiService_CreatePolicies\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring SignGetUser Function in TypeScript\nDESCRIPTION: This code snippet defines the signGetUser function, which takes an input of type TGetUserInput and optional TurnkeyCredentialRequestOptions. It returns a Promise that resolves to a SignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetUser.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signGetUser: (input: TGetUserInput, options?: TurnkeyCredentialRequestOptions) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Username Result Structure\nDESCRIPTION: This snippet describes the 'username' result structure, which offers a human-readable name for a user, formatted as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_60\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResult.username\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TGetWalletResponse in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias named TGetWalletResponse that corresponds to the expected schema of the API response when invoking the get wallet operation. It is based on the response from the PublicApiService_GetWallet operation under the 200 status success response. This type is used for strong typing in TypeScript applications to ensure that the API response conforms to this expected structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TGetWalletResponse = operations[\\\"PublicApiService_GetWallet\\\"] [\\\"responses\\\"] [\\\"200\\\"] [\\\"schema\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsInput Type Alias in TypeScript\nDESCRIPTION: Defines the TCreateWalletAccountsInput type alias as an object with a body property of type TCreateWalletAccountsBody. This type is used for the POST request to create wallet accounts in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateWalletAccountsInput = object\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Repository\nDESCRIPTION: Commands for cloning the Turnkey SDK repository, installing dependencies, and building the source code. This prepares the environment for running the export-in-node example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/export-in-node/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/export-in-node/\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletAccountsResponse Type Alias\nDESCRIPTION: Defines a type alias named `TCreateWalletAccountsResponse`. It is derived from the TypeScript type definitions within the SDK, specifically the response schema for a successful call to the `PublicApiService_CreateWalletAccounts` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletAccountsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TCreateWalletAccountsResponse** = `operations`[`\"PublicApiService_CreateWalletAccounts\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Timestamp Structure in TypeScript\nDESCRIPTION: Defines the structure for activity timestamps, including nanos and seconds as string properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"updatedAt\": { \"nanos\": \"string\"; \"seconds\": \"string\"; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias: TListPrivateKeyTagsBody in TypeScript\nDESCRIPTION: The snippet defines a type alias named TListPrivateKeyTagsBody, which represents the structure of the request body for the 'list_private_key_tags' API operation. This type alias captures the hierarchical nature of the API's expected parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TListPrivateKeyTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"TListPrivateKeyTagsBody\" = `operations`[`\\\"PublicApiService_ListPrivateKeyTags\\\"]`[`\\\"parameters\\\"]`[`\\\"body\\\"]`[`\\\"body\\\"]`\n```\n\n----------------------------------------\n\nTITLE: isSupported Function Definition\nDESCRIPTION: This snippet defines the isSupported function, which returns a boolean indicating whether a certain feature is supported. The function is defined within the react-native-passkey-stamper package and re-exports the underlying library's method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/react-native-passkey-stamper/functions/isSupported.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **isSupported**(): `boolean`\n```\n\n----------------------------------------\n\nTITLE: Fixing Compatibility Issue in @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the version update to 1.0.3 and describes a minor change to fix a compatibility issue with @turnkey/viem.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.3\n\n### Minor Changes\n\n- a7e7de0: Fixed compatibility issue with `@turnkey/viem`\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteApiKeysResponse type alias that represents the schema of the response returned when making a POST request to the /public/v1/submit/delete_api_keys endpoint. It extracts the response schema type from the operations object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteApiKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteApiKeysResponse** = `operations`[`\"PublicApiService_DeleteApiKeys\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Delete Users Body in TypeScript\nDESCRIPTION: This snippet specifies the type alias TDeleteUsersBody, which is used to define the expected structure of the request body when deleting users via the Turnkey API. It is based on the operations specified in the API service, ensuring correct parameterization for the POST request to the delete_users endpoint. Dependencies include the overall structure defined in the API documentation, ensuring consistent data handling.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TDeleteUsersBody = operations[\\\"PublicApiService_DeleteUsers\\\"][\\\"parameters\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Request WebAuthn and Generate Signed ExportWalletAccount Request in TypeScript\nDESCRIPTION: The signExportWalletAccount function requests a WebAuthn assertion and returns a signed ExportWalletAccount request ready for POSTing to Turnkey. It takes input parameters specified by TExportWalletAccountInput and optional parameters by TurnkeyCredentialRequestOptions. The function returns a Promise of SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signExportWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"> **signExportWalletAccount**(`input`, `options`?): `Promise`\\u003C[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\u003E\\n\\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts:2790](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L2790)\\n\\nRequest a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\\n\\nSee ExportWalletAccount\"\n```\n\n----------------------------------------\n\nTITLE: TInitUserEmailRecoveryResponse Type Alias Definition\nDESCRIPTION: Defines the `TInitUserEmailRecoveryResponse` type alias. It represents the schema of the successful (200) response from the `PublicApiService_InitUserEmailRecovery` operation. This is part of the Turnkey HTTP SDK for handling email recovery initialization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitUserEmailRecoveryResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"/**\n * Type Alias: TInitUserEmailRecoveryResponse\n *\n * > **TInitUserEmailRecoveryResponse** = `operations`[`\\\"PublicApiService_InitUserEmailRecovery\\\"`][`\\\"responses\\\"`][`\\\"200\\\"`][`\\\"schema\\\"`]\n *\n * Defined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.ts:3051](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.ts#L3051)\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Activity Interface Definition for TK SDK\nDESCRIPTION: Represents a partial TypeScript interface defining activity properties for the TK SDK. It includes result types for operations like signing transactions, updating policies, and creating various resources. It also defines activity status and type enumerations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ns`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }\n```\n\n----------------------------------------\n\nTITLE: WebauthnStamper Configuration Type Definition\nDESCRIPTION: TypeScript interface defining the configuration options for WebauthnStamper initialization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper/documents/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype TWebauthnStamperConfig = {\n  rpId: string;\n  timeout?: number;\n  userVerification?: UserVerificationRequirement;\n  allowCredentials?: PublicKeyCredentialDescriptor[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Import Intent in TypeScript\nDESCRIPTION: This snippet describes the `importWalletIntent` interface, which includes information required to import a wallet, such as accounts, encrypted bundle, user ID, and wallet name. The interface is essential for organizing wallet import processes in a TypeScript application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ `importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }; }\n```\n\n----------------------------------------\n\nTITLE: Creating API Only Users - TypeScript\nDESCRIPTION: The `stampCreateApiOnlyUsers` function accepts a `TCreateApiOnlyUsersBody` as input and returns a promise resolving to either undefined or a `TSignedRequest`. It is used to create API-only users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreateApiOnlyUsers(input: TCreateApiOnlyUsersBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying TDeleteWalletsInput Property in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TDeleteWalletsInput type. It has a single property 'body' of type TDeleteWalletsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteWalletsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteWalletsBody\n```\n\n----------------------------------------\n\nTITLE: Stamping Wallet Accounts Request in TypeScript\nDESCRIPTION: Method for creating a signed request to get multiple wallet accounts. Takes a TGetWalletAccountsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetWalletAccounts(`input`): `Promise`<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)>\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result Structure in TypeScript\nDESCRIPTION: This snippet similarly defines another structure for the OTP authentication result, capturing the API key ID, credential bundle, and user ID, facilitating the processing of such responses securely.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitUserEmailRecoveryResult Object in TypeScript\nDESCRIPTION: The `v1InitUserEmailRecoveryResult` object holds the result of a user email recovery process, primarily storing the `userId` which is a string representing the user being recovered. This object is part of the email recovery result response and represents minimal properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"v1InitUserEmailRecoveryResult: {\\n  userId: string;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteInvitationResponse Type in TypeScript\nDESCRIPTION: Defines a type alias that represents the response schema for the DELETE invitation endpoint. The type is mapped from the generated API operations response type for a successful (200) request to /public/v1/submit/delete_invitation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteInvitationResponse = operations[\"PublicApiService_DeleteInvitation\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Export Private Key Request Type in TypeScript\nDESCRIPTION: This snippet defines the structure for an export private key request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\n### v1ExportPrivateKeyRequest\n\n> **v1ExportPrivateKeyRequest**: `object`\n\nDefined in: [packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts:1580](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L1580)\n\n#### organizationId\n\n> **organizationId**: `string`\n\n##### Description\n\nUnique identifier for a given Organization.\n\n#### parameters\n\n> **parameters**: `definitions`[`\"v1ExportPrivateKeyIntent\"`]\n\n#### timestampMs\n\n> **timestampMs**: `string`\n\n##### Description\n\nTimestamp (in milliseconds) of the request, used to verify liveness of user requests.\n\n#### type\n\n> **type**: `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"`\n```\n\n----------------------------------------\n\nTITLE: Defining AddressFormat Type Alias in TypeScript\nDESCRIPTION: Type alias that maps AddressFormat to the v1AddressFormat type from TurnkeyApiTypes interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/AddressFormat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAddressFormat = TurnkeyApiTypes[\"v1AddressFormat\"]\n```\n\n----------------------------------------\n\nTITLE: Defining SubOrganization Deletion Result Structure\nDESCRIPTION: This snippet defines 'deleteSubOrganizationResult', which specifies the structure that returns a unique identifier for the removed sub-organization as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_83\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteSubOrganizationResult?\n\\{ `subOrganizationUuid`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Organization Quorum and Users\nDESCRIPTION: This snippet defines parameters related to root user management and quorum settings for a sub-organization. The quorum threshold is essential for security approvals, and root users are necessary to manage organizational functions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.rootQuorumThreshold \\n`number` \\nFormat: int32 \\n\\n**Description** \\nThe threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users\n```\n\nLANGUAGE: javascript\nCODE:\n```\nintent.createSubOrganizationIntentV7.rootUsers \\n`object`[] \\n\\n**Description** \\nRoot users to create within this sub-organization\n```\n\n----------------------------------------\n\nTITLE: Defining TGetUserInput Type Alias\nDESCRIPTION: Defines a type alias `TGetUserInput` as an object in TypeScript. It has one property, `body`, which is of type `TGetUserBody`. This type represents the input structure for getting user information, requiring a body property that conforms to the `TGetUserBody` type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetUserInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Type Alias: TGetUserInput\n *\n * > **TGetUserInput** = `object`\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:138](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L138)\n */\n\n/**\n * ## Properties\n */\n\n/**\n * ### body\n *\n * > **body**: [`TGetUserBody`](TGetUserBody.mdx)\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:138](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L138)\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Array in TypeScript for Turnkey SDK\nDESCRIPTION: This snippet defines a TypeScript array of objects to represent votes in the Turnkey SDK. The exact structure of the vote objects is not detailed in the provided code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUsers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nvotes: object[];\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Result Type Interfaces in TypeScript\nDESCRIPTION: Type definitions for activity result structures including various operation results like signing transactions, updating policies, managing users, keys, and wallets. Each result type contains specific fields related to the corresponding operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initOtpAuth.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n`s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; };\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Providers TypeScript Endpoint\nDESCRIPTION: API endpoint for creating OAuth providers with support for multiple activity types and status tracking. Allows creating authentication mechanisms for users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createOauthProviders.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`POST /public/v1/submit/create_oauth_providers`\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure\nDESCRIPTION: This snippet defines the structure for importing a wallet, including attributes like accounts, encrypted bundle, user ID, and wallet name. It is essential for enabling wallet import functionality within the application. Required dependencies include user authentication and account management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ `importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\}; }\n```\n\n----------------------------------------\n\nTITLE: Defining TRecoverUserInput Type Alias in Turnkey SDK\nDESCRIPTION: This code defines the `TRecoverUserInput` type alias as an object with a `body` property. The `body` property is typed as `TRecoverUserBody`, indicating the structure expected for the request body when submitting a `recover_user` request. This is part of the public API fetcher within the coordinator service of the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRecoverUserInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  `POST /public/v1/submit/recover_user`\n */\n\n/**\n * @typedef\n */\nexport type TRecoverUserInput = object & {\n  body: TRecoverUserBody;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Template\nDESCRIPTION: Command to create a new configuration file from the example template for storing API credentials.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-sdk-server/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp config.json.example config.json\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteOauthProvidersResponse type alias. It represents the response schema for the 'PublicApiService_DeleteOauthProviders' operation, specifically the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteOauthProvidersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteOauthProvidersResponse = operations[\"PublicApiService_DeleteOauthProviders\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining updateUserIntent Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for updating user information in Turnkey. This intent allows modification of user details like name, email, phone number, and associated tag IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Getting Embedded Public Key in TypeScript\nDESCRIPTION: Fetches the public key from the iframe, returning null if not initialized properly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/IframeStamper.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetEmbeddedPublicKey()\n```\n\n----------------------------------------\n\nTITLE: Defining SelectedSession Constant in TypeScript\nDESCRIPTION: This snippet establishes the SelectedSession constant, providing a standardized key for identifying the currently selected session within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SelectedSession = \"@turnkey/selected-session\";\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Intent Structure\nDESCRIPTION: This snippet lays out the structure for a user email recovery intent, which includes parameters like the user email, email customization options, expiration time, and target public key. This is critical for user recovery procedures when users cannot access their accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ `initUserEmailRecoveryIntent`: \\{ `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; }\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TInitOtpAuthInput in TypeScript\nDESCRIPTION: This snippet defines a type alias named TInitOtpAuthInput, which represents an object structure used in a POST request to initialize OTP authentication. It specifies that the body property must adhere to the structure of TInitOtpAuthBody, linking it to another type definition. This alias is essential for TypeScript applications to ensure type safety in API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitOtpAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TInitOtpAuthInput = {\\n  body: TInitOtpAuthBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Navigation Links for createAuthenticators Documentation\nDESCRIPTION: A hierarchical navigation structure showing the documentation path from root to the createAuthenticators functionality within the Turnkey HTTP SDK\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createAuthenticators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / createAuthenticators\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TCreateOauthProvidersInput - TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named TCreateOauthProvidersInput, which represents the structure of the input object necessary for creating OAuth providers through the designated API endpoint. The type is constructed as an object type and is closely tied to the body property which must be of type TCreateOauthProvidersBody. This type alias helps in ensuring that the data sent to the API conforms to the expected structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"type TCreateOauthProvidersInput = {\\n  body: TCreateOauthProvidersBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Specifying TDeleteAuthenticatorsInput Properties in TypeScript\nDESCRIPTION: This code snippet details the property of the TDeleteAuthenticatorsInput type. It has a single property 'body' of type TDeleteAuthenticatorsBody, which likely contains the necessary information for deleting authenticators.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteAuthenticatorsBody\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Enumerations - TypeScript\nDESCRIPTION: Defines enumerations for possible activity statuses and types used throughout the API to represent the state of an operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus`: \"ACTIVITY_STATUS_CREATED\" \\| \"ACTIVITY_STATUS_PENDING\" \\| \"ACTIVITY_STATUS_COMPLETED\" \\| \"ACTIVITY_STATUS_FAILED\" \\| \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \\| \"ACTIVITY_STATUS_REJECTED\";\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" \\| \"ACTIVITY_TYPE_CREATE_USERS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \\| \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION\" \\| ...;\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePrivateKeyTagIntent Interface in TypeScript\nDESCRIPTION: Interface for managing private key tags, allowing addition and removal of private keys from tags and updating tag names.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n{ addPrivateKeyIds: string[]; newPrivateKeyTagName: string; privateKeyTagId: string; removePrivateKeyIds: string[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletBody Type Alias in TypeScript\nDESCRIPTION: Type alias that combines the PublicApiService_CreateWallet operation parameters with command override parameters for wallet creation requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateWalletBody = operations[\"PublicApiService_CreateWallet\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining SDK Activity Status Enumeration\nDESCRIPTION: Provides a comprehensive list of possible activity statuses representing different stages of operation completion\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createUsers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`\n```\n\n----------------------------------------\n\nTITLE: Defining v1OtpAuthRequest type\nDESCRIPTION: Defines the structure for an OTP authentication request, including organization ID, parameters (v1OtpAuthIntent), timestamp, and request type. The timestamp ensures the request's liveness, and the type specifies the activity as OTP authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n            v1OtpAuthRequest: {\n                name: \"v1OtpAuthRequest\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        organizationId: {\n                            type: \"string\",\n                            description: \"Unique identifier for a given Organization.\",\n                            required: true\n                        },\n                        parameters: {\n                            $ref: \"#/definitions/v1OtpAuthIntent\",\n                            required: true\n                        },\n                        timestampMs: {\n                            type: \"string\",\n                            description: \"Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\",\n                            required: true\n                        },\n                        type: {\n                            type: \"string\",\n                            enum: [\"ACTIVITY_TYPE_OTP_AUTH\"],\n                            required: true\n                        }\n                    },\n                    required: [\"organizationId\", \"parameters\", \"timestampMs\", \"type\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Wallets Deletion Result Structure\nDESCRIPTION: This snippet describes the structure for 'deleteWalletsResult', which returns a list of unique identifiers for deleted wallets, formatted as an array of strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_86\n\nLANGUAGE: json\nCODE:\n```\nresult.deleteWalletsResult?\n\\{ `walletIds`: `string`[]; \\}\n```\n\n----------------------------------------\n\nTITLE: Specifying TDeleteInvitationInput Properties in TypeScript\nDESCRIPTION: This code snippet shows the property definition for the TDeleteInvitationInput type alias. It has a single property 'body' of type TDeleteInvitationBody, which contains the necessary information for deleting an invitation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteInvitationInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteInvitationBody\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the `TUpdateUserTagBody` type alias using TypeScript. It combines parameters from the `PublicApiService_UpdateUserTag` operation with `commandOverrideParams` to form the complete structure for updating a user tag. It relies on the definition of `operations` and `commandOverrideParams` which are expected to be defined elsewhere within the project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserTagBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TUpdateUserTagBody** = `operations`[`\"PublicApiService_UpdateUserTag\"`][`\"parameters\"`][`\"body\"`][`\"body\"`][`\"parameters\"`] & `commandOverrideParams`\n\n```\n\n----------------------------------------\n\nTITLE: Stamping Import Wallet Request in TypeScript\nDESCRIPTION: Method to stamp a request for importing a wallet. It takes an input of type TImportWalletBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampImportWallet(input: TImportWalletBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript types for timestamps and votes.\nDESCRIPTION: This snippet defines TypeScript types for the 'updatedAt' timestamp, representing the last update time of an activity, which includes 'nanos' and 'seconds', both as strings. It also includes the 'votes' property, which is an array of objects, likely representing votes related to the activity. These types facilitate tracking activity updates and related voting processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n`updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Defining v1PublicKeyCredentialWithAttestation type\nDESCRIPTION: Defines the structure for a public key credential with attestation, including authenticator attachment, client extension results, ID, raw ID, response, and type. Represents a WebAuthn credential.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\n            v1PublicKeyCredentialWithAttestation: {\n                name: \"v1PublicKeyCredentialWithAttestation\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        authenticatorAttachment: {\n                            type: \"string\",\n                            enum: [\"cross-platform\", \"platform\", null]\n                        },\n                        clientExtensionResults: {\n                            $ref: \"#/definitions/v1SimpleClientExtensionResults\",\n                            required: true\n                        },\n                        id: {\n                            type: \"string\",\n                            required: true\n                        },\n                        rawId: {\n                            type: \"string\",\n                            required: true\n                        },\n                        response: {\n                            $ref: \"#/definitions/v1AuthenticatorAttestationResponse\",\n                            required: true\n                        },\n                        type: {\n                            type: \"string\",\n                            enum: [\"public-key\"],\n                            required: true\n                        }\n                    },\n                    required: [\"clientExtensionResults\", \"id\", \"rawId\", \"response\", \"type\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-Session Support to @turnkey/sdk-react-native\nDESCRIPTION: This snippet shows the major version update to 1.0.0 and describes the breaking changes introduced to support multiple sessions, including session selection and session limits.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react-native/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0\n\n### Major Changes\n\n- fcf9503: This breaking change adds support for multiple sessions:\n\n  - The concept of a **selected session** has been introduced:\n    - Users can switch between sessions using `setSelectedSession({ sessionKey: <key> })`.\n    - The selected session determines the active `client`, `user`, and `session` state.\n    - API calls such as `updateUser`, `createWallet`, and `signRawPayload` now apply to the selected session.\n  - A session limit of **15 active sessions** has been enforced:\n    - If the limit is reached, users must remove an existing session before creating a new one.\n    - Expired or invalid sessions are automatically cleaned up.\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/iframe-stamper Package\nDESCRIPTION: Commands to install the @turnkey/iframe-stamper package using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/documents/IframeStamper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @turnkey/iframe-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @turnkey/iframe-stamper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/iframe-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining Property body for TExportWalletAccountInput\nDESCRIPTION: This snippet defines a property called 'body' within the type alias 'TExportWalletAccountInput', which refers to another type 'TExportWalletAccountBody'. This body property is essential for holding the necessary input data structure for the API call to export a wallet account. It ensures that the API receives the correct data format as defined in the associated TypeScript documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"body: TExportWalletAccountBody;\"\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/webauthn-stamper via yarn\nDESCRIPTION: Command to install the @turnkey/webauthn-stamper package using yarn package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/webauthn-stamper/documents/WebauthnStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/webauthn-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enumerations - TypeScript\nDESCRIPTION: Defines an enumeration for various activity statuses, such as CREATED, PENDING, COMPLETED, etc. This provides a standard reference for tracking the state of activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: TSignRawPayloadsBody Type Alias Definition\nDESCRIPTION: Defines the `TSignRawPayloadsBody` type alias, which represents the structure of the request body for the `PublicApiService_SignRawPayloads` operation. This type is used when submitting a request to sign raw payloads using the Turnkey API. The type is derived from the generated HTTP client code.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignRawPayloadsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TSignRawPayloadsBody** = `operations`\\[`\"PublicApiService_SignRawPayloads\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Signing and Signing Transactions Intents\nDESCRIPTION: This snippet defines intents for signing payloads and transactions, such as 'signRawPayloadIntent' and 'signTransactionIntent'. Each intent specifies the necessary parameters, including encoding types, hash functions, and transaction specifics, ensuring structured signing operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"signRawPayloadIntent\": { \"encoding\": \"PAYLOAD_ENCODING_HEXADECIMAL\" | \"PAYLOAD_ENCODING_TEXT_UTF8\", \"hashFunction\": \"HASH_FUNCTION_NO_OP\" | \"HASH_FUNCTION_SHA256\" | \"HASH_FUNCTION_KECCAK256\" | \"HASH_FUNCTION_NOT_APPLICABLE\", \"payload\": \"string\", \"privateKeyId\": \"string\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"signTransactionIntent\": { \"privateKeyId\": \"string\", \"type\": \"TRANSACTION_TYPE_ETHEREUM\" | \"TRANSACTION_TYPE_SOLANA\", \"unsignedTransaction\": \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Intent Structure\nDESCRIPTION: This snippet establishes the structure for an OTP authentication intent, detailing parameters such as contact methods, email and SMS customization, and OTP characteristics. It's used to implement secure multi-factor authentication in the SDK, relying on valid user contact details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ `initOtpAuthIntent`: \\{ `contact`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `otpType`: `string`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `smsCustomization`: \\{ `template`: `string`; \\}; `userIdentifier`: `string`; \\}; }\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Interface Type\nDESCRIPTION: TypeScript type definition combining both Solana and EVM wallet interfaces.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/documents/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport type WalletInterface = SolanaWalletInterface | EvmWalletInterface;\n```\n\n----------------------------------------\n\nTITLE: Using Turnkey React SDK in Components\nDESCRIPTION: Example of using the useTurnkey hook to access Turnkey functionality within a React component, including methods for passkey login, email authentication, and iframe login.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-react/documents/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTurnkey } from \"@turnkey/sdk-react\";\nconst { turnkey, passkeyClient, authIframeClient } = useTurnkey();\n\nconst loginWithPasskey = async () => {\n  await passkeyClient?.login();\n};\n\nconst initEmailAuth = async () => {\n  await turnkey?.serverSign(\"emailAuth\", [\n    {\n      email: \"<target user email>\",\n      targetPublicKey: authIframeClient.iframePublicKey,\n      organizationId: \"<target user suborg-id>\",\n    },\n  ]);\n};\n\nconst loginWithIframe = async (credentialBundle: string) => {\n  await authIframeClient?.injectCredentialBundle(credentialBundle);\n  await authIframeClient?.login();\n};\n```\n\n----------------------------------------\n\nTITLE: UpdateWallet Function Type Definition in TypeScript\nDESCRIPTION: Complex type definition for the updateWallet function that handles various wallet-related operations including authentication, organization management, policy creation, and blockchain operations. The function processes multiple intent types for different blockchain operations and wallet management tasks.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateWallet(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {...};\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payloads Signing Result Structure - TypeScript\nDESCRIPTION: The `signRawPayloadsResult` interface defines the result structure for signing multiple raw payloads, with an array of `signatures`. This design allows for a flexible and structured response containing all generated signatures from the signing operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadsResult: { signatures: object[]; };\n```\n\n----------------------------------------\n\nTITLE: TExportWalletAccountBody Type Alias Definition\nDESCRIPTION: Defines the `TExportWalletAccountBody` type alias, which represents the structure of the request body for the `PublicApiService_ExportWalletAccount` operation. It is defined within the `packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts` file, specifically at line 47056. This body is intended to be used with a `POST` request to the `/public/v1/submit/export_wallet_account` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletAccountBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TExportWalletAccountBody** = `operations`\\[`\"PublicApiService_ExportWalletAccount\"`]\\[`\"parameters\"`]\\[`\"body\"`]\\[`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetAttestationDocumentRequest Interface in TypeScript\nDESCRIPTION: Defines the request structure for getting an attestation document, specifying enclave type and organization ID.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetAttestationDocumentRequest {\n  enclaveType: string;\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining deletePrivateKeyTags Function in TypeScript\nDESCRIPTION: Declares a constant function 'deletePrivateKeyTags' that takes an input and returns a Promise. The function is likely used to remove tags associated with private keys in a cryptographic system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deletePrivateKeyTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deletePrivateKeyTags: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* ... */ }; /* ... */ } }>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysInput Type in TypeScript\nDESCRIPTION: Type alias definition for TDeleteApiKeysInput that specifies the structure of API key deletion input. Contains a single property 'body' of type TDeleteApiKeysBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteApiKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAuthenticatorInput type alias\nDESCRIPTION: This snippet defines the `TGetAuthenticatorInput` type alias as an object with a `body` property. The `body` property is of type `TGetAuthenticatorBody`. This type alias is used as the input for the `POST /public/v1/query/get_authenticator` API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Type Alias: TGetAuthenticatorInput\n *\n * > **TGetAuthenticatorInput** = `object`\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1520\n *\n * `POST /public/v1/query/get_authenticator`\n *\n * ## Properties\n *\n * ### body\n *\n * > **body**: [`TGetAuthenticatorBody`](TGetAuthenticatorBody.mdx)\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.d.ts:1521\n */\"\n```\n\n----------------------------------------\n\nTITLE: Defining Results Structure in TypeScript\nDESCRIPTION: This TypeScript snippet outlines the result structures corresponding to specific intents in the SDK. Each result object carries data related to the successful completion of an intent, such as API key creations, session details, and user operations. By defining these result structures, the SDK facilitates the retrieval and processing of operation outputs, requiring specific string or array formats for fields.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/initUserEmailRecovery.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n`organizationId`: `string`; `result`: \\{ `acceptInvitationResult`: \\{ `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierResult`: \\{ `productId`: `string`; \\}; `createApiKeysResult`: \\{ `apiKeyIds`: `string`[]; \\}; `createApiOnlyUsersResult`: \\{ `userIds`: `string`[]; \\}; `createAuthenticatorsResult`: \\{ `authenticatorIds`: `string`[]; \\}; `createInvitationsResult`: \\{ `invitationIds`: `string`[]; \\}; `createOauthProvidersResult`: \\{ `providerIds`: `string`[]; \\}; `createOrganizationResult`: \\{ `organizationId`: `string`; \\}; `createPoliciesResult`: \\{ `policyIds`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Signing Reject Activity Request in Turnkey SDK\nDESCRIPTION: A TypeScript function that generates a signed request for rejecting an activity using WebAuthn. It takes input parameters for the reject activity and optional credential request options, and returns a Promise with a signed request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signRejectActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignRejectActivity(input: TRejectActivityInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey SDK Server Package\nDESCRIPTION: Command to install the @turnkey/sdk-server package using npm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/sdk-server\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal KeyFormat Member\nDESCRIPTION: Defines the Hexadecimal member of the KeyFormat enumeration. It represents a key encoded in hexadecimal format. This value is a string literal \"HEXADECIMAL\".\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/KeyFormat.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport enum KeyFormat {\n  Hexadecimal = \"HEXADECIMAL\",\n  Solana = \"SOLANA\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetApiKeysResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting multiple API keys, containing an array of ApiKey objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetApiKeysResponse {\n  apiKeys: definitions[\"v1ApiKey\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeyTagsBody Type Alias in TypeScript\nDESCRIPTION: Type alias that combines operation parameters for the PublicApiService_DeletePrivateKeyTags endpoint with command override parameters. Used for structuring request body when deleting private key tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeletePrivateKeyTagsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeletePrivateKeyTagsBody = operations[\"PublicApiService_DeletePrivateKeyTags\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining TDeletePrivateKeysInput Type in TypeScript\nDESCRIPTION: Type definition for the input structure used in the DELETE private keys API endpoint. The type consists of a body property that must conform to the TDeletePrivateKeysBody interface.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeletePrivateKeysInput = object\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Reject Activity Intent\nDESCRIPTION: Defines the structure for the `rejectActivityIntent`, which contains a `fingerprint` property. This artifact serves to verify a user's action, enabling the rejection of specific activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_28\n\nLANGUAGE: JSON Schema\nCODE:\n```\n\"{ `fingerprint`: `string`; }\"\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Wallet Accounts Request in TypeScript\nDESCRIPTION: This method stamps a request to create wallet accounts. It takes a TCreateWalletAccountsBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateWalletAccounts(input: TCreateWalletAccountsBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: createApiOnlyUsers method in TypeScript\nDESCRIPTION: This method, inherited from `TurnkeySDKClientBase`, creates API-only users. It takes a `TCreateApiOnlyUsersBody` object as input and returns a Promise that resolves to an object. This function is used to create users who can only access the API and do not have console access.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * @inheritdoc\n     */\n    createApiOnlyUsers(input: TurnkeySDKApiTypes.TCreateApiOnlyUsersBody): Promise<object & object> {\n        return this.command<TurnkeySDKApiTypes.TCreateApiOnlyUsersBody, object & object>(\n            `/turnkey/create_api_only_users`,\n            input,\n            \"apiOnlyUsers\"\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript types for activity types.\nDESCRIPTION: This snippet defines a TypeScript type that enumerates all possible activity types. These types cover a wide range of operations, including user management, key creation, signing operations, invitation management, policy management, organization management, payment method handling, wallet operations, and more. This type provides a comprehensive overview of the actions that can be performed within the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n`type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for createReadOnlySession\nDESCRIPTION: Function signature for creating a read-only session that returns a complex Promise type containing activity details and various intent types for authentication, organization management, and wallet operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createReadOnlySession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateReadOnlySession(input): Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    // ... additional intent types truncated for brevity\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Complex Promise Return Type Definition in TypeScript\nDESCRIPTION: Extensive TypeScript type definition for a Promise return value that includes activity status, authentication details, and various organizational management intents like invitation acceptance, API key creation, and wallet management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/importPrivateKey.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        /* Intent definitions continued... */\n      }\n      /* Additional intent definitions... */\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Example Transaction Output\nDESCRIPTION: Sample console output showing successful transaction details including network info, address, balance and transaction hashes\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-ethers/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNetwork:\n\tsepolia (chain ID 11155111)\n\nAddress:\n\t0x064c0CfDD7C485Eba21988Ded4dbCD9358556842\n\nBalance:\n\t0.07750465249126655 Ether\n\nTransaction count:\n\t14\n\nTurnkey-powered signature:\n\t0x97da598ac1ad566e77be7c7d9cc77339730e48c557c5d6f32f93d9fdeeed13472b1faf20f1e457a897a409f31b9e680ad6b02086ac4fb9aa693ce10374976b201c\n\nRecovered address:\n\t0x064c0CfDD7C485Eba21988Ded4dbCD9358556842\n\nTurnkey-signed transaction:\n\t0x02f8668080808080942ad9ea1e677949a536a270cec812d6e868c881088609184e72a00080c001a09881f59e48500ef8960ae1cb94e0c862e7d613f961c250b6f07b546a1b058b1da06ba1871d7aed5eb8ea8cb211a0e3e22a1c6b54b34b4376d0ef5b1daef4100c8f\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS in TypeScript\nDESCRIPTION: This code snippet defines a constant variable `DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS` of type `WalletAccount` array. This variable likely contains a set of default Bitcoin mainnet P2SH accounts used within the Turnkey SDK browser environment. The accounts are defined as an array of `WalletAccount` objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **DEFAULT_BITCOIN_MAINNET_P2SH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: signTransaction Function Definition\nDESCRIPTION: Defines the `signTransaction` function, which asynchronously signs a transaction using a provided Turnkey client. It uses a transaction serializer, an organization ID, and a signing key ID to produce a signed transaction hash.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/viem/index/functions/signTransaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: signTransaction()\n *\n * > **signTransaction**\\<`TTransactionSerializable`\\>(`client`, `transaction`, `serializer`, `organizationId`, `signWith`): `Promise`\\<`` `0x${string}` ``\\>\n *\n * Defined in: [packages/viem/src/index.ts:309](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/viem/src/index.ts#L309)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining API Result Types in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for various API response structures, including activity statuses and result types for creating wallets, users, and policies. It enhances type safety when working with API responses in a TypeScript environment.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createWalletAccounts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CreateWalletAccountsResult = {\n  walletId: string;\n};\n\n// other result types\n\ntype UpdatePolicyResult = {\n  policyId: string;\n};\n\ntype UpdateUserResult = {\n  userId: string;\n};\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Status = \n  | \"ACTIVITY_STATUS_CREATED\" \n  | \"ACTIVITY_STATUS_PENDING\" \n  | \"ACTIVITY_STATUS_COMPLETED\" \n  | \"ACTIVITY_STATUS_FAILED\" \n  | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \n  | \"ACTIVITY_STATUS_REJECTED\";\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityType = \n  | \"ACTIVITY_TYPE_CREATE_API_KEYS\" \n  | \"ACTIVITY_TYPE_CREATE_USERS\" \n  | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \n  | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \n  | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \n  | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" \n  | \"ACTIVITY_TYPE_REJECT_ACTIVITY\";\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Intent Type Definition\nDESCRIPTION: TypeScript interface defining the structure for email-based authentication with customization options. Includes parameters for email templates, expiration settings, and encryption keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub Organization IDs in TypeScript\nDESCRIPTION: The function 'stampGetSubOrgIds' retrieves sub-organization IDs and takes 'TGetSubOrgIdsBody' as input. It returns a Promise resolving to either 'undefined' or 'TSignedRequest'. It inherits its functionality from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetSubOrgIds**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetSubOrgIdsBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/cosmjs Package via NPM\nDESCRIPTION: Command to install the @turnkey/cosmjs package using NPM. This is the first step for integrating Turnkey's Cosmos signer with CosmJS applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/cosmjs/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @turnkey/cosmjs\n```\n\n----------------------------------------\n\nTITLE: Initializing defaultBitcoinMainnetP2WPKHAccount in TypeScript\nDESCRIPTION: The `defaultBitcoinMainnetP2WPKHAccountAtIndex` function initializes a P2WPKH account on the Bitcoin Mainnet at a specified path index, which is passed as a numerical argument. The function returns a `WalletAccount`, an object defined in the SDK as per the provided interface. This setup requires the @turnkey/sdk-server package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultBitcoinMainnetP2WPKHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **defaultBitcoinMainnetP2WPKHAccountAtIndex**(\\\"pathIndex\\\"): [\\\"WalletAccount\\\"](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enum in TypeScript\nDESCRIPTION: This snippet defines an enumeration for the types of activities that can be performed by the API, such as creating API keys, users, and signing transactions. This structure makes it easier to track and handle different activity types programmatically.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUsers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | ... ; // and more activity types\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Request Body in TypeScript\nDESCRIPTION: The 'TGetActivitiesBody' type alias is created to represent the structure of the request body for the 'PublicApiService_GetActivities' operation by omitting the 'organizationId' parameter and including additional query override parameters. This helps to enforce type safety when constructing API calls.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetActivitiesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetActivitiesBody = Omit<operations[\\\"PublicApiService_GetActivities\\\"] [\\\"parameters\\\"] [\\\"body\\\"] [\\\"body\\\"], \\\"organizationId\\\"] & queryOverrideParams;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Statuses and Types in TypeScript\nDESCRIPTION: This snippet defines enums for activity statuses and types used in the TurnKey SDK. It covers various operations such as API key management, user management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/initUserEmailRecovery.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\ntype: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | \"ACTIVITY_TYPE_CREATE_INVITATIONS\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION\" | \"ACTIVITY_TYPE_CREATE_POLICY\" | \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" | \"ACTIVITY_TYPE_DELETE_USERS\" | \"ACTIVITY_TYPE_DELETE_API_KEYS\" | \"ACTIVITY_TYPE_DELETE_INVITATION\" | \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" | \"ACTIVITY_TYPE_DELETE_POLICY\" | \"ACTIVITY_TYPE_CREATE_USER_TAG\" | \"ACTIVITY_TYPE_DELETE_USER_TAGS\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION\" | \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" | \"ACTIVITY_TYPE_REJECT_ACTIVITY\" | \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" | \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" | \"ACTIVITY_TYPE_CREATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_POLICY_V3\" | \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" | \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" | \"ACTIVITY_TYPE_UPDATE_USER_TAG\" | \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" | \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" | \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V2\" | \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" | \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" | \"ACTIVITY_TYPE_UPDATE_USER\" | \"ACTIVITY_TYPE_UPDATE_POLICY\" | \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" | \"ACTIVITY_TYPE_CREATE_WALLET\" | \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" | \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" | \"ACTIVITY_TYPE_RECOVER_USER\" | \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" | \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" | \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_EXPORT_WALLET\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" | \"ACTIVITY_TYPE_EMAIL_AUTH\" | \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" | \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" | \"ACTIVITY_TYPE_IMPORT_WALLET\" | \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" | \"ACTIVITY_TYPE_CREATE_POLICIES\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" | \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" | \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" | \"ACTIVITY_TYPE_OAUTH\" | \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" | \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" | \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_DELETE_WALLETS\" | \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" | \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH\" | \"ACTIVITY_TYPE_OTP_AUTH\" | \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" | \"ACTIVITY_TYPE_UPDATE_WALLET\" | \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" | \"ACTIVITY_TYPE_CREATE_USERS_V3\" | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining TImportPrivateKeyInput Type in TypeScript\nDESCRIPTION: TypeScript type definition for the input parameters of the private key import endpoint POST /public/v1/submit/import_private_key. The type requires a body parameter of type TImportPrivateKeyBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TImportPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTImportPrivateKeyInput = object\n```\n\n----------------------------------------\n\nTITLE: Complex Return Type Definition in TypeScript\nDESCRIPTION: Comprehensive type definition for SDK return value that includes activity status, timestamps, authentication data, and various intent types for organization management, wallet operations, and user administration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      // Various intent definitions...\n    }\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateAuthenticatorsResult Type\nDESCRIPTION: Defines the structure for the `v1CreateAuthenticatorsResult` object, representing the result of creating authenticators. It includes an array of `authenticatorIds`. This structure is the response from the Coordinator service after a successful authenticator creation request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateAuthenticatorsResult\n * @property {string[]} authenticatorIds A list of Authenticator IDs.\n */\n```\n\n----------------------------------------\n\nTITLE: SDK Result Type Definitions\nDESCRIPTION: TypeScript interfaces representing result objects for various SDK operations including user creation, authentication, and organization management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createSubOrganization.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n`createUsersResult`: \\{ `userIds`: `string`[]; \\}; `createUserTagResult`: \\{ `userIds`: `string`[]; `userTagId`: `string`; \\}; `createWalletResult`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadWriteSessionBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateReadWriteSessionBody type alias. It represents the body parameters for the PublicApiService_CreateReadWriteSession operation in the Turnkey API. The type is derived from the body property of the request parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateReadWriteSessionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TCreateReadWriteSessionBody = operations[\"PublicApiService_CreateReadWriteSession\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Result Structure - TypeScript\nDESCRIPTION: The `setPaymentMethodResult` interface captures the result of setting a payment method, detailing properties such as `cardHolderEmail`, `cardHolderName`, and `lastFour`, which are all strings. This ensures structured data return when a payment method is specified.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string; };\n```\n\n----------------------------------------\n\nTITLE: DeleteUserTags Function Type Definition in TypeScript SDK\nDESCRIPTION: Type definition for the deleteUserTags function which accepts input parameters and returns a Promise containing activity information. The function is used to delete user tags by their IDs through a deleteUserTagsIntent.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteUserTags.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deleteUserTags: (input) => Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { /* various intent types including deleteUserTagsIntent */ }; /* additional properties */ }; }>\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPolicyBody Type Alias for Policy Requests\nDESCRIPTION: TypeScript type alias that references the body parameters for the PublicApiService_GetPolicy operation. This type is used for making requests to the POST /public/v1/query/get_policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetPolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetPolicyBody = operations[\"PublicApiService_GetPolicy\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Updated Ethereum Wallet Method Signature\nDESCRIPTION: New implementation of the public key getter method introduced in version 1.0.0, simplified to take no parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetPublicKey(): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersBody Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias for the request body of the DeleteOauthProviders API operation. It references the body parameter of the PublicApiService_DeleteOauthProviders operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteOauthProvidersBody** = `operations`[`\"PublicApiService_DeleteOauthProviders\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TApproveActivityResponse\nDESCRIPTION: This snippet defines a type alias named TApproveActivityResponse that represents a specific response structure from the PublicApiService. It combines properties from the operations and definitions schemas, particularly focusing on the success response structure under the activity result.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TApproveActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TApproveActivityResponse\" = `operations`[`\\\"PublicApiService_ApproveActivity\\\"`][`\\\"responses\\\"`][`\\\"200\\\"`][`\\\"schema\\\"`][`\\\"activity\\\"`][`\\\"result\\\"`] & `definitions`[`\\\"v1ActivityResponse\\\"`]\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationConfigsBody Type Alias\nDESCRIPTION: Defines a TypeScript type alias named `TGetOrganizationConfigsBody`. This alias represents the structure of the request body for the `PublicApiService_GetOrganizationConfigs` operation, specifically the `body` property within the `parameters` object. It is used for making POST requests to the `/public/v1/query/get_organization_configs` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationConfigsBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TGetOrganizationConfigsBody** = `operations`\\[`\"PublicApiService_GetOrganizationConfigs\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n\n```\n\n----------------------------------------\n\nTITLE: Managing User and Organization Features - TypeScript\nDESCRIPTION: This snippet focuses on the intents for setting and removing organization features, defining their names and values, vital for ensuring each user's permissions and capabilities are correctly configured.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetOrganizationFeatureIntent = { name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\"; value: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Intent - TypeScript\nDESCRIPTION: This snippet defines the structure for initializing OTP (One-Time Password) authentication intent. It encompasses parameters for contact details, email and SMS customization, and identification parameters for the user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitOtpAuthIntent: { contact: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; otpType: string; sendFromEmailAddress: string; sendFromEmailSenderName: string; smsCustomization: { template: string; }; userIdentifier: string; };\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for email-based authentication in the TurnKey SDK. The intent includes settings for the email recipient, customization options, expiration settings, and security parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Policy and User Update Intent Structures in TypeScript\nDESCRIPTION: This snippet outlines TypeScript interfaces for updating user information and organization policies. It defines the structure of required and optional fields necessary for managing business rules and user-specific attributes within the SDK context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`updateUserIntent`: { `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n`updatePolicyIntent`: { `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: \"EFFECT_ALLOW\" \\| \"EFFECT_DENY\"; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Environment - Bash Setup\nDESCRIPTION: Commands for cloning the repository, installing dependencies and building the project using pnpm package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-solana/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-solana/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Data using TypeScript\nDESCRIPTION: The function 'stampGetOrganization' retrieves organization details. It takes an input of the type 'TGetOrganizationBody' and returns a Promise resolving to 'undefined' or a 'TSignedRequest'. It is an inherited function from 'TurnkeyBaseClient'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetOrganization**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\\n#### Parameters\\n\\n##### input\\n\\n`TGetOrganizationBody`\\n\\n#### Returns\\n\\n`Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status and Type Constants - TypeScript\nDESCRIPTION: This snippet defines constants for various activity types and statuses used in the SDK. Each activity relates to a specific action such as creating users, signing transactions, or updating policies. It is essential for maintaining a standardized reference when tracking or processing these activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadOnlySession.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"status\": \\\"ACTIVITY_STATUS_CREATED\\\" \\| \\\"ACTIVITY_STATUS_PENDING\\\" \\| \\\"ACTIVITY_STATUS_COMPLETED\\\" \\| \\\"ACTIVITY_STATUS_FAILED\\\" \\| \\\"ACTIVITY_STATUS_CONSENSUS_NEEDED\\\" \\| \\\"ACTIVITY_STATUS_REJECTED\\\"; \"type\": \\\"ACTIVITY_TYPE_CREATE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_INVITATIONS\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USER_TAGS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION\\\" \\| \\\"ACTIVITY_TYPE_APPROVE_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_REJECT_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V2\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\\\" \\| \\\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\\\" \\| \\\"ACTIVITY_TYPE_RECOVER_USER\\\" \\| \\\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICIES\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\\\" \\| \\\"ACTIVITY_TYPE_OAUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_WALLETS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\\\" \\| \\\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V3\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\\\";\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Status Enum in TypeScript\nDESCRIPTION: Defines an enumerated type for various activity statuses in the API, helping standardize the values returned when querying the status of different activities. This structure is crucial for maintaining strong type-checking within TypeScript applications.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Function in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript function for recovering a user by adding an authenticator. It specifies the HTTP method, endpoint, and input parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/recoverUser.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nRecover a user\n\nCompletes the process of recovering a user by adding an authenticator\n\n`POST /public/v1/submit/recover_user`\n\n## Parameters\n\n### input\n\n[`TRecoverUserInput`](../type-aliases/TRecoverUserInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Get Activity Body in TypeScript\nDESCRIPTION: This snippet defines the type alias 'TGetActivityBody' for the body of the 'get_activity' API request. The alias specifies the expected structure of the request body when interacting with the 'PublicApiService_GetActivity' operation. It is utilized in the context of a POST request to the endpoint '/public/v1/query/get_activity'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetActivityBody = operations[\\\"PublicApiService_GetActivity\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Property body in TypeScript for Organization Features\nDESCRIPTION: This snippet defines the body property of the TSetOrganizationFeatureInput type, which should match the structure of TSetOrganizationFeatureBody. It is important for ensuring that the data sent to the POST endpoint conforms to the expected structure.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSetOrganizationFeatureInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"body: TSetOrganizationFeatureBody;\"\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_ETHEREUM_ACCOUNTS constant array\nDESCRIPTION: This code snippet defines a constant variable named DEFAULT_ETHEREUM_ACCOUNTS. It's an array of WalletAccount objects, suggesting a collection of pre-defined Ethereum accounts. The `const` keyword indicates that the variable cannot be reassigned after initialization.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_ETHEREUM_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport const DEFAULT_ETHEREUM_ACCOUNTS: WalletAccount[] = [];\n```\n\n----------------------------------------\n\nTITLE: Defining Credential Props Authentication Extensions Client Outputs - TypeScript\nDESCRIPTION: Defines an object representing the output structure for credential properties related to client extensions. This is used to support additional information during authentication.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CredPropsAuthenticationExtensionsClientOutputs: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1146\n */\nexport interface v1CredPropsAuthenticationExtensionsClientOutputs {\n  rk: boolean; // Represents the presence of the rk extension.\n}\n```\n\n----------------------------------------\n\nTITLE: TDeleteUsersResponse Type Alias Definition\nDESCRIPTION: Defines the `TDeleteUsersResponse` type alias, which represents the response schema for deleting users using the PublicApiService. The alias is derived from the `operations` type, targeting the \"PublicApiService_DeleteUsers\" operation's successful (200) response schema.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n> **TDeleteUsersResponse** = `operations`[\"PublicApiService_DeleteUsers\"][\"responses\"][\"200\"][\"schema\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAttestationDocumentResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetAttestationDocumentResponse type alias. It represents the response schema for the 200 status code of the PublicApiService_GetAttestationDocument operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetAttestationDocumentResponse = operations[\"PublicApiService_GetAttestationDocument\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Result Structure - TypeScript\nDESCRIPTION: The `signRawPayloadResult` interface outlines the result of signing a raw payload, encapsulating parameters `r`, `s`, and `v` as strings. This structure is vital to ensure the secure and structured return of signed payload information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Signed Transaction Result Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for signing transaction results, including 'signedTransaction' of type string, critical for confirming completed transactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `signedTransaction`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Result Structures - TypeScript\nDESCRIPTION: Defines the structures for removing and setting organization features which both contain an array of features represented as objects. This is vital for managing features associated with organizations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOrganizationFeatureResult: { features: object[]; };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrganizationFeatureResult: { features: object[]; };\n```\n\n----------------------------------------\n\nTITLE: Defining v1RecoverUserRequest Interface in TypeScript\nDESCRIPTION: This snippet defines the structure for a user recovery request, including organization ID, parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_123\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1RecoverUserRequest: object\n\norganizationId: string\n\nparameters: definitions[\"v1RecoverUserIntent\"]\n\ntimestampMs: string\n\ntype: \"ACTIVITY_TYPE_RECOVER_USER\"\n```\n\n----------------------------------------\n\nTITLE: Defining TRejectActivityInput Type in TypeScript\nDESCRIPTION: Type alias that represents the input structure for rejecting an activity, containing a body property of type TRejectActivityBody\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TRejectActivityInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TRejectActivityInput = {\n  body: TRejectActivityBody\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok for OAuth Testing\nDESCRIPTION: Command to start ngrok for exposing localhost to enable OAuth authentication flows\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/react-components/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Requesting a WebAuthn Assertion - TypeScript\nDESCRIPTION: The function signNOOPCodegenAnchor() creates and returns a Promise that resolves to a signed NOOPCodegenAnchor request. This method is implemented in TypeScript and is intended to be used by developers for requesting WebAuthn assertions. The resulting signed request can then be posted to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signNOOPCodegenAnchor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function signNOOPCodegenAnchor(): Promise<SignedRequest> {\n    // Implementation details go here\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version Changes\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, dependency updates, and bug fixes across multiple SDK releases\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/viem/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [bb6ea0b]\n  - @turnkey/http@2.1.0\n\n## 0.2.6\n\n### Patch Changes\n\n- 59dcd2f: Unpin typescript\n- da7c960: Bump Viem dependency to fix `getAddresses()` for LocalAccount\n- Updated dependencies\n  - @turnkey/http@2.0.0\n- Updated the shape of signing\n\n## 0.2.5\n\n### Patch Changes\n\n- Updated dependencies\n  - @turnkey/http@1.3.0\n\n## 0.2.4\n\n### Patch Changes\n\n- 0ec2d94: Addresses a bug when signing raw messages (see https://github.com/tkhq/sdk/issues/116)\n\n## 0.2.3\n\n### Patch Changes\n\n- Updated dependencies\n  - @turnkey/http@1.2.0\n\n## 0.2.2\n\n### Patch Changes\n\n- Updated dependencies\n  - @turnkey/api-key-stamper@0.1.1\n  - @turnkey/http@1.1.1\n\n## 0.2.1\n\n### Patch Changes\n\n- Fix code sample in the README; add more details and links\n\n## 0.2.0\n\n### Minor Changes\n\n- Add new `createAccount` method and deprecates the existing `createApiAccount`. `createAccount` offers a superset of functionality and works with stampers (`@turnkey/api-key-stamper` / `@turnkey/webauthn-stamper`) to integrate with API keys or passkeys.\n\n### Patch Changes\n\n- Updated dependencies: @turnkey/http@1.1.0\n- New dependency: @turnkey/api-key-stamper@0.1.0\n\n## 0.1.1\n\n### Patch Changes\n\n- README updates\n\n## 0.1.0\n\nInitial release!\n```\n\n----------------------------------------\n\nTITLE: Defining Curve Types - TypeScript\nDESCRIPTION: Represents a union type for various curve identifiers used in cryptographic operations, such as 'CURVE_SECP256K1' and 'CURVE_ED25519'. This is important for specifying supported cryptographic curves.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1Curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1152\n */\nexport type v1Curve = \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure in JSON\nDESCRIPTION: This snippet defines the structure for an intent related to importing a wallet in the application. The intent includes parameters like `accounts`, `encryptedBundle`, `userId`, and `walletName`, which are essential for the wallet import process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ `importWalletIntent`: { `accounts`: `object`[], `encryptedBundle`: `string`, `userId`: `string`, `walletName`: `string` } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Turnkey and Movement\nDESCRIPTION: List of required environment variables to be added to the .env.local file. These variables include Turnkey API credentials, organization ID, and Movement-specific addresses and keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-movement/README.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_PUBLIC_KEY\nAPI_PRIVATE_KEY\nBASE_URL\nORGANIZATION_ID\nMOVEMENT_ADDRESS\nMOVEMENT_PUBLIC_KEY\n```\n\n----------------------------------------\n\nTITLE: Initializing TurnkeySigner with Provider Connection\nDESCRIPTION: Demonstrates how to create a TurnkeySigner instance and connect it to an external provider like Infura. The signer needs to be connected to a provider to interact with the blockchain network.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/ethers/documents/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize a Turnkey Signer\nconst turnkeySigner = new TurnkeySigner({\n  ...\n});\n\n// Bring your own provider (such as Alchemy or Infura: https://docs.ethers.org/v6/api/providers/)\nconst network = \"goerli\";\nconst provider = new ethers.providers.InfuraProvider(network);\nconst connectedSigner = turnkeySigner.connect(provider);\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for 'Update Wallet' Result\nDESCRIPTION: This snippet defines the expected result structure when updating a wallet through the API. The result includes the walletId as a string, ensuring developers can leverage TypeScript's type safety when handling this response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUsers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Update Root Quorum Endpoint in TypeScript\nDESCRIPTION: Specifies the endpoint for updating the root quorum, including the HTTP method, path, and input parameter type. This operation requires approval from the current root quorum.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateRootQuorum.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"POST /public/v1/submit/update_root_quorum\"\n\n## Parameters\n\n### input\n\n[`TUpdateRootQuorumInput`](../type-aliases/TUpdateRootQuorumInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Payload Signing Result Structure in TypeScript\nDESCRIPTION: Describes the structure of the signing result for raw payloads, detailing the components of the result such as `r`, `s`, and `v` used in cryptographic operations. It is intended for use in TypeScript applications to ensure proper handling of cryptographic signatures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsignRawPayloadResult: { r: string; s: string; v: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatedAt Type\nDESCRIPTION: This code defines the type for `updatedAt`, which includes nanos and seconds represented as strings.  This is likely representing a timestamp with nanosecond precision.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deletePrivateKeyTags.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }> \n\n```\n\n----------------------------------------\n\nTITLE: Defining User Tag Creation Request (TypeScript)\nDESCRIPTION: TypeScript interface for v1CreateUserTagRequest, which represents the API request for creating a user tag. It includes the organization ID, tag creation parameters, timestamp, and activity type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1CreateUserTagRequest {\n  organizationId: string;\n  parameters: definitions[\"v1CreateUserTagIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_CREATE_USER_TAG\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Intent V3 with Condition and Consensus in TypeScript\nDESCRIPTION: Type definition for the third version of policy intent that introduces condition and consensus expressions. Includes effect, notes, and policy name alongside the new expression-based policy configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{ `condition`: `string`; `consensus`: `string`; `effect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `notes`: `string`; `policyName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize User Email Recovery Request in TypeScript\nDESCRIPTION: Method signature for stampInitUserEmailRecovery which prepares a signed request for initializing user recovery via email. It accepts a TInitUserEmailRecoveryBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitUserEmailRecovery(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Update User Intent Structure in JSON\nDESCRIPTION: This snippet specifies the structure for updating user details within the system. It includes parameters that allow updating of user email, name, phone number, and associated tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/recoverUser.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ `updateUserIntent`: { `userEmail`: `string`, `userId`: `string`, `userName`: `string`, `userPhoneNumber`: `string`, `userTagIds`: `string[]` } }\n```\n\n----------------------------------------\n\nTITLE: TInitImportPrivateKeyBody Type Alias Definition\nDESCRIPTION: Defines the `TInitImportPrivateKeyBody` type alias. This type represents the structure expected in the body of the `POST /public/v1/submit/init_import_private_key` request to initialize the import of a private key. It is derived from the `operations` type associated with the `PublicApiService_InitImportPrivateKey` operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TInitImportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TInitImportPrivateKeyBody** = `operations`[`\"PublicApiService_InitImportPrivateKey\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Stamping OAuth Request in TypeScript\nDESCRIPTION: Method to stamp an OAuth request. It takes an input of type TOauthBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampOauth(input: TOauthBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TStamper Interface Definition\nDESCRIPTION: TypeScript interface that defines the structure of a stamper object. It requires a stamp method that takes a string input and returns a Promise of TStamp.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ninterface TStamper {\n  stamp: (input: string) => Promise<TStamp>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TGetAttestationDocumentInput in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias `TGetAttestationDocumentInput`, which represents an object used as the input body for the POST API endpoint `/public/v1/query/get_attestation`. The body property of this object is expected to comply with the `TGetAttestationDocumentBody` type, ensuring structured data is sent to the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TGetAttestationDocumentInput = {\\n    body: TGetAttestationDocumentBody;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Interface in TypeScript\nDESCRIPTION: This snippet defines the v1Policy interface, which represents a policy object in the system. It includes fields for conditions, consensus, effect, notes, and identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1Policy {\n  condition: string;\n  consensus: string;\n  createdAt: externaldatav1Timestamp;\n  effect: v1Effect;\n  notes: string;\n  policyId: string;\n  policyName: string;\n  updatedAt: externaldatav1Timestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Type Alias in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias for an API response schema. The type alias 'TGetAttestationDocumentResponse' is used to provide structured type information for handling the response of the PublicApiService_GetAttestationDocument endpoint. Developers using this SDK need TypeScript support, as this alias depends on the accurate inclusion of specific API operations. This alias references the 200 response schema structure from the API operations documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetAttestationDocumentResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`operations`\\[`\\\"PublicApiService_GetAttestationDocument\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TCreateInvitationsResponse in TypeScript\nDESCRIPTION: This TypeScript type alias, TCreateInvitationsResponse, defines the expected structure for a successful 'create invitations' operation response within the PublicApiService of the Turnkey SDK. Its definition combines results from the operation's activity schema and the v1 activity response from definitions. This alias is integral for ensuring response structures adhere to expected formats, thereby ensuring compatibility and seamless integration across the SDK's operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreateInvitationsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TCreateInvitationsResponse = operations[\\\"PublicApiService_CreateInvitations\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"][\\\"activity\\\"][\\\"result\\\"][\\\"createInvitationsResult\\\"] & definitions[\\\"v1ActivityResponse\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Embedded Public Key from Iframe\nDESCRIPTION: Demonstrates how to fetch the live public key of a target embedded key within an iframe using the getEmbeddedPublicKey() method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\n// create an instance of TurnkeyBrowserSDK\nconst turnkeyBrowserSDK = new Turnkey(config);\n\n// create an instance of TurnkeyIframeClient\nconst iframeClient = await turnkeyBrowserSDK.iframeClient({\n  iframeContainer: document.getElementById(\n    \"turnkey-auth-iframe-container-id\",\n  ),\n  iframeUrl: \"https://auth.turnkey.com\",\n  iframeElementId: \"turnkey-auth-iframe-element-id\",\n});\n\nconst publicKey = await iframeClient.getEmbeddedPublicKey();\n```\n\n----------------------------------------\n\nTITLE: Fetching Attestation Document using Turnkey API - TypeScript\nDESCRIPTION: Function that retrieves an attestation document from an enclave via a POST request to /public/v1/query/get_attestation endpoint. It accepts a TGetAttestationDocumentInput parameter and returns a Promise containing the attestation document as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getAttestationDocument.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetAttestationDocument(input: TGetAttestationDocumentInput): Promise<{ attestationDocument: string; }>\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateInvitationsIntent Type\nDESCRIPTION: Defines the structure for the `v1CreateInvitationsIntent` object, representing the intent to create invitations. It contains an array of `v1InvitationParams`. This intent is likely passed as part of a request to the Coordinator service to create invitations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateInvitationsIntent\n * @property {definitions[\"v1InvitationParams\"][]} invitations A list of Invitations.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteUsersInput Type Alias in TypeScript\nDESCRIPTION: This snippet defines the type alias TDeleteUsersInput as an object for API input related to user deletion requests. It specifies the structure of the request body needed by the delete_users endpoint, ensuring that it adheres to expected types and facilitating type-checking during development.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteUsersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TDeleteUsersInput = object;\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadWriteSessionResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that references the response schema for the PublicApiService_CreateReadWriteSessionResponse operation, specifically targeting the 200 success response schema. Used when creating read-write sessions via POST /public/v1/submit/create_read_write_session endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadWriteSessionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TCreateReadWriteSessionResponse** = `operations`[`\"PublicApiService_CreateReadWriteSession\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Wallet Export Intent Type Definition\nDESCRIPTION: TypeScript interface for wallet export functionality with language support. Includes parameters for mnemonic language selection and encryption.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{ `language`: `\"MNEMONIC_LANGUAGE_ENGLISH\"` | `\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\"` | `\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\"` | `\"MNEMONIC_LANGUAGE_CZECH\"` | `\"MNEMONIC_LANGUAGE_FRENCH\"` | `\"MNEMONIC_LANGUAGE_ITALIAN\"` | `\"MNEMONIC_LANGUAGE_JAPANESE\"` | `\"MNEMONIC_LANGUAGE_KOREAN\"` | `\"MNEMONIC_LANGUAGE_SPANISH\"`; `targetPublicKey`: `string`; `walletId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Signing Create Policy Request in Turnkey SDK\nDESCRIPTION: A function that requests a WebAuthn assertion to generate a signed CreatePolicy request. Accepts policy input and optional credential request options, and returns a Promise with a signed request ready for submission to Turnkey.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signCreatePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signCreatePolicy: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Version 7 Result Structure for SubOrganization\nDESCRIPTION: This snippet details createSubOrganizationResultV7, outlining its structure which shares similarities with earlier versions while allowing for updated wallet information.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_69\n\nLANGUAGE: json\nCODE:\n```\nresult.createSubOrganizationResultV7?\n\\{ `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: \\{ `addresses`: `string`[]; `walletId`: `string`; \\}; \\}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Accounts using Turnkey SDK\nDESCRIPTION: A function that lists all wallet accounts by making a POST request to the Turnkey API. Requires a valid input parameter of type TGetWalletAccountsInput and returns a Promise with an array of account objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/getWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetWalletAccounts(input: TGetWalletAccountsInput): Promise<{ accounts: object[] }>\n```\n\n----------------------------------------\n\nTITLE: Import Wallet Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for importing wallets into the TurnKey platform. Includes wallet accounts, encrypted mnemonic bundle, user identification, and wallet naming parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Declaration of signExportWalletAccount Function in TypeScript\nDESCRIPTION: Function declaration for signExportWalletAccount that generates a signed export wallet account request. It takes an input parameter of type TExportWalletAccountInput and an optional TurnkeyCredentialRequestOptions parameter, returning a Promise that resolves to a SignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signExportWalletAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signExportWalletAccount: (input, options?) => Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Stamping Policy and Key Related Request Methods\nDESCRIPTION: Methods for stamping requests related to policies, private keys and user management. These methods handle request signing for security policy and key operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampGetPolicies(input: TGetPoliciesBody): Promise<undefined | TSignedRequest>\n\nstampGetPolicy(input: TGetPolicyBody): Promise<undefined | TSignedRequest>\n\nstampGetPrivateKey(input: TGetPrivateKeyBody): Promise<undefined | TSignedRequest>\n\nstampGetPrivateKeys(input: TGetPrivateKeysBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Structure\nDESCRIPTION: This code defines the structure for a timestamp, including nanoseconds and seconds components.  It's used to represent the update time of an activity. The values are strings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\};`\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication POST Endpoint in Turnkey SDK\nDESCRIPTION: Defines an endpoint for authenticating users with a one-time password (OTP) sent via email or SMS. The endpoint accepts a TOtpAuthInput object as a parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/otpAuth.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * OTP auth\n *\n * Authenticate a user with an OTP code sent via email or SMS\n *\n * `POST /public/v1/submit/otp_auth`\n *\n * ## Parameters\n *\n * ### input\n *\n * [`TOtpAuthInput`](../type-aliases/TOtpAuthInput.mdx)\n */\n\n```\n\n----------------------------------------\n\nTITLE: POST Request Endpoint Definition - TypeScript\nDESCRIPTION: This snippet provides a description of the POST request URL associated with the 'PublicApiService_GetActivities' operation. It specifies the endpoint to which the request should be sent, detailing the use case of querying a list of activities from the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesBody.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"`POST /public/v1/query/list_activities`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Accounts Constant in JavaScript\nDESCRIPTION: This snippet defines a constant named DEFAULT_TON_V3R2_ACCOUNTS, which is an array of WalletAccount objects. It serves as a predefined list of accounts accessible throughout the SDK. The snippet assumes that the WalletAccount interface is properly defined and imported for use.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_TON_V3R2_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst DEFAULT_TON_V3R2_ACCOUNTS: WalletAccount[] = []; // Defined in: packages/sdk-browser/src/turnkey-helpers.ts:545\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationInput Type Alias in TypeScript\nDESCRIPTION: This code defines the TDeleteSubOrganizationInput type alias as an object with a body property of type TDeleteSubOrganizationBody. It is used for the POST request to delete a sub-organization in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteSubOrganizationInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining TGetVerifiedSubOrgIdsInput Type in TypeScript\nDESCRIPTION: Type alias definition for the input parameters of the POST /public/v1/query/list_verified_suborgs endpoint. The type consists of a body property that contains TGetVerifiedSubOrgIdsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetVerifiedSubOrgIdsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetVerifiedSubOrgIdsInput = object\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key - TypeScript\nDESCRIPTION: Provides functionality to export private keys using TExportPrivateKeyBody input and outputs a promise. The operation relies on TSignedRequest for successful completion, requiring precise input.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampExportPrivateKey(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Types in TypeScript\nDESCRIPTION: Type definitions for organization-related operations including organization ID and root quorum management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1UpdateRootQuorumResult = {\n  [key: string]: unknown\n}\n\ntype organizationId = string\n```\n\n----------------------------------------\n\nTITLE: React Functional Component Definition\nDESCRIPTION: Defines a React functional component named `Export`. It leverages TypeScript's `React.FC` to ensure type safety and expects props of type `ExportProps`. The component is defined as a constant.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/Export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst **Export**: `React.FC`\\<`ExportProps`\\> = () => { /* Component implementation */ }\n```\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * Example component using the `useActivity` hook.\n */\nconst Export: React.FC<ExportProps> = () => {\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\n\nexport interface ExportProps {\n  activityId?: string;\n}\n\n/**\n * Example component using the `useActivity` hook.\n */\nconst Export: React.FC<ExportProps> = () => {\n  return <div>Export component</div>;\n};\n\nexport default Export;\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserTagResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TUpdateUserTagResponse type alias. It combines the update user tag result from the PublicApiService_UpdateUserTag operation with the v1ActivityResponse definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserTagResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TUpdateUserTagResponse = operations[\"PublicApiService_UpdateUserTag\"][\"responses\"][\"200\"][\"schema\"][\"activity\"][\"result\"][\"updateUserTagResult\"] & definitions[\"v1ActivityResponse\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TGetPrivateKeyInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TGetPrivateKeyInput type alias as an object with a single property, 'body', which is of type TGetPrivateKeyBody.  It specifies the input structure for an operation that retrieves a private key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetPrivateKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @deprecated\n */\n\n\n> **TGetPrivateKeyInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structure - TypeScript\nDESCRIPTION: The `signTransactionResult` interface specifies the structure of the signing result for a transaction, containing `signedTransaction`. This ensures that the transaction data returned is precisely defined and accessible.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createInvitations.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateUserTagIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a user tag in an organization. This intent allows adding or removing users from a tag and updating the tag's name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{ `addUserIds`: `string`[]; `newUserTagName`: `string`; `removeUserIds`: `string`[]; `userTagId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining updateUserIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating a user in an organization. It allows updating user details such as email, name, phone number, and associated tag IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n{ `userEmail`: `string`; `userId`: `string`; `userName`: `string`; `userPhoneNumber`: `string`; `userTagIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: SDK Intent Types Definition\nDESCRIPTION: Complex TypeScript type definitions for various SDK intents covering authentication, wallet creation, transaction signing, and organization management\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUserTags.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  addressFormats: string[],\n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\",\n  encryptedBundle: string,\n  privateKeyName: string,\n  userId: string\n}\n```\n\n----------------------------------------\n\nTITLE: BaseEthereumWallet Class Definition\nDESCRIPTION: Abstract class implementing EthereumWalletInterface with basic wallet functionality including message signing and public key retrieval. The class must be extended to implement custom signing logic.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/index/classes/BaseEthereumWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class BaseEthereumWallet {\n  type: Ethereum = WalletType.Ethereum;\n\n  abstract signMessage(message: string): Promise<`0x${string}`>;\n\n  getPublicKey(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Votes Structure in TypeScript\nDESCRIPTION: This snippet denotes an array of 'votes' as objects that are recorded as part of an activity, allowing for tracking decisions or consensus related to user activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n`votes`: `object`[];\n```\n\n----------------------------------------\n\nTITLE: Extracting Wallet Encrypted Bundle with TurnkeyIframeClient\nDESCRIPTION: Shows how to securely extract an encrypted wallet bundle from an iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Extracts the encrypted wallet bundle from the iframe\nconst walletBundle = await iframeClient.extractWalletEncryptedBundle();\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey Browser SDK Constructor\nDESCRIPTION: This constructor creates a new instance of the `TurnkeyBrowserSDK` class. It accepts a `TurnkeySDKBrowserConfig` object as a parameter, which is used to configure the SDK. The constructor returns a `TurnkeyBrowserSDK` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/Turnkey.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param config\n */\nconstructor(config: TurnkeySDKBrowserConfig): TurnkeyBrowserSDK\n```\n\n----------------------------------------\n\nTITLE: Result Type Definitions - TypeScript Interfaces\nDESCRIPTION: Defines the structure of various operation result types including OTP authentication, user recovery, organization features, payment methods, and signature operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthResultV2: { otpId: string };\ninitUserEmailRecoveryResult: { userId: string };\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\notpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeyBody Type Alias in TypeScript\nDESCRIPTION: This type alias defines the structure for the request body when making a POST request to the /public/v1/query/get_api_key endpoint. It extracts the body type from the PublicApiService_GetApiKey operation parameters.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetApiKeyBody** = `operations`\\[`\"PublicApiService_GetApiKey\"`\\]\\[`\"parameters\"`\\]\\[`\"body\"`\\]\\[`\"body\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining the v1GetActivitiesResponse object\nDESCRIPTION: Defines the structure of the v1GetActivitiesResponse object. This object represents the response received after requesting activities. It contains data related to the activities that match the request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1GetActivitiesResponse\": `object`\n\nDefined in: http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1516\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteSubOrganizationResult type\nDESCRIPTION: Defines the structure for the result of a sub-organization deletion request, containing the unique identifier of the sub-organization that was removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n\"v1DeleteSubOrganizationResult\": `object`\n\nDefined in: http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.types.d.ts:1303\n\n#### subOrganizationUuid\n\n> **subOrganizationUuid**: `string`\n\n##### Description\n\nUnique identifier of the sub organization that was removed\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAllowedOriginsResult in TypeScript\nDESCRIPTION: This snippet outlines the `updateAllowedOriginsResult` type, which indicates the result of an update operation on allowed origins. This structure signifies the absence of additional data upon the successful update of allowed origins.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createReadWriteSession.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n`updateAllowedOriginsResult`: \\{ \\};\n```\n\n----------------------------------------\n\nTITLE: Initialize Import Private Key Intent Type Definition in TypeScript\nDESCRIPTION: Defines the structure for initializing the process of importing a private key. Requires user identification to associate the import with a specific user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n{ `userId`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Request Body Type\nDESCRIPTION: Type alias for the body parameters used in initializing OTP authentication via the PublicApiService. This type is extracted from the generated API service definition for submitting an initial OTP authentication request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitOtpAuthBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TInitOtpAuthBody = operations[\"PublicApiService_InitOtpAuth\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: TApproveActivityInput Properties\nDESCRIPTION: The `TApproveActivityInput` type alias has a single property named `body`, which is of type `TApproveActivityBody`. This property holds the data needed for approving the activity. The `TApproveActivityBody` type is presumably defined elsewhere, providing the detailed structure for the approval data.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TApproveActivityInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"body\": `TApproveActivityBody`\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for SDK Documentation\nDESCRIPTION: A series of markdown links forming the navigation breadcrumb path to the deleteUserTags API documentation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteUserTags.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**SDK Documentation**](../../../../../../README.mdx)\n\n***\n\n[SDK Documentation](../../../../../../packages.mdx) / [@turnkey/http](../../../../README.mdx) / [index](../../../README.mdx) / [TurnkeyApi](../README.mdx) / deleteUserTags\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for API Response - TypeScript\nDESCRIPTION: The `TDeletePrivateKeysResponse` type alias represents the structure of the response received from the Public API after a request to delete private keys. It captures the response schema for a successful deletion operation and ensures type safety when handling API responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePrivateKeysResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Type Alias: TDeletePrivateKeysResponse\\n\\n> **TDeletePrivateKeysResponse** = `operations`\\[`\\\"PublicApiService_DeletePrivateKeys\\\"`\\]\\[`\\\"responses\\\"`\\]\\[`\\\"200\\\"`\\]\\[`\\\"schema\\\"`\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining the otpAuth function\nDESCRIPTION: This code snippet defines the structure and expected return type of the `otpAuth` function. It takes an `input` argument and returns a Promise that resolves to an object containing details about an authentication activity. The activity includes various attributes like approval/rejection permissions, timestamps, error codes and detailed information about the intended actions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/otpAuth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"`const` **otpAuth**: (`input`) => `Promise`\\<{\n  `activity`: {\n    `canApprove`: `boolean`;\n    `canReject`: `boolean`;\n    `createdAt`: { `nanos`: `string`; `seconds`: `string`; };\n    `failure`: { `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; };\n    `fingerprint`: `string`;\n    `id`: `string`;\n    `intent`: { `acceptInvitationIntent`: { `authenticator`: { `attestation`: { `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `acceptInvitationIntentV2`: { `authenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierIntent`: { `productId`: `string`; }; `approveActivityIntent`: { `fingerprint`: `string`; }; `createApiKeysIntent`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiKeysIntentV2`: { `apiKeys`: `object`[]; `userId`: `string`; }; `createApiOnlyUsersIntent`: { `apiOnlyUsers`: `object`[]; }; `createAuthenticatorsIntent`: { `authenticators`: `object`[]; `userId`: `string`; }; `createAuthenticatorsIntentV2`: { `authenticators`: `object`[]; `userId`: `string`; }; `createInvitationsIntent`: { `invitations`: `object`[]; }; `createOauthProvidersIntent`: { `oauthProviders`: `object`[]; `userId`: `string`; }; `createOrganizationIntent`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientExtensionResults`: { `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: { `rk`: `boolean`; }; }; `id`: `string`; `rawId`: `string`; `response`: { `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" | \\\"platform\\\" | `null`; `clientDataJson`: `string`; `transports`: ...[]; }; `type`: \\\"public-key\\\"; }; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createOrganizationIntentV2`: { `organizationName`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; `rootEmail`: `string`; `rootUserId`: `string`; }; `createPoliciesIntent`: { `policies`: `object`[]; }; `createPolicyIntent`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV2`: { `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; }; `createPolicyIntentV3`: { `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" | \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; }; `createPrivateKeysIntent`: { `privateKeys`: `object`[]; }; `createPrivateKeysIntentV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagIntent`: { `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }; `createReadOnlySessionIntent`: {}; `createReadWriteSessionIntent`: { `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; }; `createReadWriteSessionIntentV2`: { `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; }; `createSubOrganizationIntent`: { `name`: `string`; `rootAuthenticator`: { `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... | ... | ... | ... | ...)[]; }; `authenticatorName`: `string`; `challenge`: `string`; }; }; `createSubOrganizationIntentV2`: { `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV3`: { `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; }; `createSubOrganizationIntentV4`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV5`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV6`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createSubOrganizationIntentV7`: { `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; }; `createUsersIntent`: { `users`: `object`[]; }; `createUsersIntentV2`: { `users`: `object`[]; }; `createUsersIntentV3`: { `users`: `object`[]; }; `createUserTagIntent`: { `userIds`: `string`[]; `userTagName`: `string`; }; `createWalletAccountsIntent`: { `accounts`: `object`[]; `walletId`: `string`; }; `createWalletIntent`: { `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; }; `deleteApiKeysIntent`: { `apiKeyIds`: `string`[]; `userId`: `string`; }; `deleteAuthenticatorsIntent`: { `authenticatorIds`: `string`[]; `userId`: `string`; }; `deleteInvitationIntent`: { `invitationId`: `string`; }; `deleteOauthProvidersIntent`: { `providerIds`: `string`[]; `userId`: `string`; }; `deleteOrganizationIntent`: { `organizationId`: `string`; }; `deletePaymentMethodIntent`: { `paymentMethodId`: `string`; }; `deletePolicyIntent`: { `policyId`: `string`; }; `deletePrivateKeysIntent`: { `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsIntent`: { `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationIntent`: { `deleteWithoutExport`: `boolean`; }; `deleteUsersIntent`: { `userIds`: `string`[]; }; `deleteUserTagsIntent`: { `userTagIds`: `string`[]; }; `deleteWalletsIntent`: { `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; }; `disablePrivateKeyIntent`: { `privateKeyId`: `string`; }; `emailAuthIntent`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `emailAuthIntentV2`: { `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: { `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; }; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; }; `exportPrivateKeyIntent`: { `privateKeyId`: `string`; `targetPublicKey`: `string`; }; `exportWalletAccountIntent`: { `address`: `string`; `targetPublicKey`: `string`; }; `exportWalletIntent`: { `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" | \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" | \\\"MNEMONIC_LANGUAGE_CZECH\\\" | \\\"MNEMONIC_LANGUAGE_FRENCH\\\" | \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" | \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" | \\\"MNEMONIC_LANGUAGE_KOREAN\\\" | \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; }; `importPrivateKeyIntent`: { `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" | \\\"ADDRESS_FORMAT_COMPRESSED\\\" | \\\"ADDRESS_FORMAT_ETHEREUM\\\" | \\\"ADDRESS_FORMAT_SOLANA\\\" | \\\"ADDRESS_FORMAT_COSMOS\\\" | \\\"ADDRESS_FORMAT_TRON\\\" | \\\"ADDRESS_FORMAT_SUI\\\" | \\\"ADDRESS_FORMAT_APTOS\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" | \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" | \\\"ADDRESS_FORMAT_SEI\\\" | \\\"ADDRESS_FORMAT_XLM\\\" | \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" | \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" | \\\"ADDRESS_FORMAT_TON_V3R2\\\" | \\\"ADDRESS_FORMAT_TON_V4R2\\\" | \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" | `\"\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateRootQuorumIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for updating a root quorum in an organization. This intent specifies the threshold of approvals needed and the user IDs that comprise the quorum set.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n{ `threshold`: `number`; `userIds`: `string`[]; }\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Disable Result Structure\nDESCRIPTION: This snippet outlines the structure for the 'disablePrivateKeyResult', specifying a unique identifier for the disabled private key as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_87\n\nLANGUAGE: json\nCODE:\n```\nresult.disablePrivateKeyResult?\n\\{ `privateKeyId`: `string`; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteOauthProvidersInput Type in TypeScript\nDESCRIPTION: This code defines the TDeleteOauthProvidersInput type alias as an object that contains a body property of type TDeleteOauthProvidersBody. This type is used for the POST request to the /public/v1/submit/delete_oauth_providers endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTDeleteOauthProvidersInput = object\n```\n\n----------------------------------------\n\nTITLE: Initializing User Email Recovery Intent - JavaScript\nDESCRIPTION: This intent initializes email recovery for a user, requiring an email address, customization parameters for the email, and a target public key for the recovery process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitUserEmailRecoveryIntent: { email: `string`; emailCustomization: { appName: `string`; logoUrl: `string`; magicLinkTemplate: `string`; templateId: `string`; templateVariables: `string`; }; expirationSeconds: `string`; targetPublicKey: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining User Update Intent - TypeScript\nDESCRIPTION: This snippet defines the parameters necessary for updating user information, including user name, email, and additional attributes. It is crucial for maintaining accurate user records within the wallet management system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateUserIntent: { userEmail: string; userId: string; userName: string; userPhoneNumber: string; userTagIds: string[]; };\n```\n\n----------------------------------------\n\nTITLE: TDeleteWalletsResponse Type Alias Definition\nDESCRIPTION: Defines the `TDeleteWalletsResponse` type alias. This type represents the expected response schema when deleting wallets via the Turnkey Public API.  It combines the `deleteWalletsResult` schema with the generic `v1ActivityResponse` schema to provide a comprehensive view of the operation's outcome.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteWalletsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"operations\"[`\"PublicApiService_DeleteWallets\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"deleteWalletsResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Authentication Result V2 Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for the OTP authentication result in version 2, which includes the OTP ID as a string. It serves to ensure type safety for the response received from the related API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/removeOrganizationFeature.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninitOtpAuthResultV2: { otpId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining TUpdateUserBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TUpdateUserBody type alias. It combines the parameters from the PublicApiService_UpdateUser operation with command override parameters, likely used for updating user information in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TUpdateUserBody = operations[\"PublicApiService_UpdateUser\"][\"parameters\"][\"body\"][\"body\"][\"parameters\"] & commandOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Payloads with WebAuthn Assertion\nDESCRIPTION: Function that requests a WebAuthn assertion and returns a signed request for SignRawPayloads, ready to be sent to Turnkey's API. Supports optional credential request configuration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signSignRawPayloads.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignSignRawPayloads(input: TSignRawPayloadsInput, options?: TurnkeyCredentialRequestOptions): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateWalletInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TCreateWalletInput type alias as an object with a single property 'body' of type TCreateWalletBody. It is used for structuring the input for creating a wallet in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateWalletInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateWalletInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining exportWallet Function TypeScript Type\nDESCRIPTION: Comprehensive type definition for wallet export functionality with complex nested type structures representing various intent types, authentication methods, and wallet export parameters\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWallet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportWallet(`input`): `Promise`<{ `activity`: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Initiating Recycle Operation\nDESCRIPTION: Command to initiate the transfer of funds from Long Term Storage back to Distribution, requiring approval from another manager or admin.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli recycle --key=bob\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Provider Deletion Input Type in TypeScript\nDESCRIPTION: Type alias definition for the input structure used when deleting OAuth providers. The type specifies that the input must be an object containing a body property of type TDeleteOauthProvidersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeleteOauthProvidersInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining User Email Recovery Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the User Email Recovery Result, which contains a userId of type string. This is necessary for handling email recovery processes in the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninitUserEmailRecoveryResult: { userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Deletion Response Type\nDESCRIPTION: Type alias representing the successful response structure for deleting a policy via the Turnkey Public API. Specifically mapped to the 200 OK response schema for the delete policy endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeletePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTDeletePolicyResponse = operations[\"PublicApiService_DeletePolicy\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationBody Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteSubOrganizationBody type alias. It represents the body parameters for the PublicApiService_DeleteSubOrganization operation, specifically for the POST /public/v1/submit/delete_sub_organization endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteSubOrganizationBody = operations[\"PublicApiService_DeleteSubOrganization\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining the updatePrivateKeyTag Method in TypeScript\nDESCRIPTION: Method declaration for updatePrivateKeyTag that updates a private key tag and returns a promise with the response object. Takes a TUpdatePrivateKeyTagBody input parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_129\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePrivateKeyTag(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Stamp User and Policy Management Methods TypeScript Definitions\nDESCRIPTION: TypeScript method definitions for user and policy management operations including updating policies, users, and related tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nstampUpdatePolicy(input: TUpdatePolicyBody): Promise<undefined | TSignedRequest>\n\nstampUpdateUser(input: TUpdateUserBody): Promise<undefined | TSignedRequest>\n\nstampUpdateUserTag(input: TUpdateUserTagBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Deleting Wallets - TypeScript\nDESCRIPTION: Executes wallet deletions based on input type TDeleteWalletsBody, with TSignedRequest handling the promise return. Input precision is crucial for successful operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteWallets(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining Curve Type Alias in TypeScript\nDESCRIPTION: Creates a type alias named Curve that references the v1Curve type from the TurnkeyApiTypes interface. This type is used for curve-related functionality in the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/Curve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCurve = TurnkeyApiTypes[\"v1Curve\"]\n```\n\n----------------------------------------\n\nTITLE: Defining rejectActivity Function with Complex Types\nDESCRIPTION: A constant function that returns a Promise with an activity rejection payload, containing multiple nested type definitions for various organizational and authentication intents\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/rejectActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rejectActivity: (input) => Promise<{ activity: { ... } }>\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationResponse Type Alias in TypeScript\nDESCRIPTION: This snippet defines the TDeleteSubOrganizationResponse type alias. It represents the response schema for the PublicApiService_DeleteSubOrganization operation, specifically the 200 status code response.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteSubOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteSubOrganizationResponse = operations[\"PublicApiService_DeleteSubOrganization\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining defaultTonV4r2AccountAtIndex Function in TypeScript\nDESCRIPTION: The defaultTonV4r2AccountAtIndex function retrieves a WalletAccount instance based on the provided path index. It accepts a number parameter, pathIndex, which specifies the index of the account to be retrieved. The function returns a WalletAccount object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/functions/defaultTonV4r2AccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTonV4r2AccountAtIndex(pathIndex: number): WalletAccount {\n    // Function implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for SDK Activities and Results\nDESCRIPTION: Defines TypeScript interfaces and types for activity statuses, result structures, and activity types. Includes definitions for operations like email recovery, OAuth, OTP authentication, organization management, and transaction signing.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePolicy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  EmailRecoveryResult: { userId: string };\n  oauthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  otpAuthResult: { apiKeyId: string; credentialBundle: string; userId: string };\n  recoverUserResult: { authenticatorId: string[] };\n  removeOrganizationFeatureResult: { features: object[] };\n  setOrganizationFeatureResult: { features: object[] };\n  setPaymentMethodResult: { cardHolderEmail: string; cardHolderName: string; lastFour: string };\n  signRawPayloadResult: { r: string; s: string; v: string };\n  signRawPayloadsResult: { signatures: object[] };\n  signTransactionResult: { signedTransaction: string };\n  updateAllowedOriginsResult: {};\n  updatePolicyResult: { policyId: string };\n  updatePolicyResultV2: { policyId: string };\n  updatePrivateKeyTagResult: { privateKeyTagId: string };\n  updateRootQuorumResult: {};\n  updateUserResult: { userId: string };\n  updateUserTagResult: { userTagId: string };\n  updateWalletResult: { walletId: string };\n  status: \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n  type: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | [...]\n  updatedAt: { nanos: string; seconds: string };\n  votes: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Response Type\nDESCRIPTION: Type alias for the response schema of the sign transaction API endpoint, representing the successful response structure when signing a transaction\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TSignTransactionResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTSignTransactionResponse = operations[\"PublicApiService_SignTransaction\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Stamping Create Users Request in TypeScript\nDESCRIPTION: This method stamps a request to create users. It takes a TCreateUsersBody input and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampCreateUsers(input: TCreateUsersBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletBody Type Alias in TypeScript\nDESCRIPTION: The `TExportWalletBody` type alias refers to a specific section of the parameters for the `POST /public/v1/submit/export_wallet` API endpoint. It directs to a type within a nested structure, indicating a definition fetchable within the SDK service's HTTP operations. This alias assists in establishing a predictable shape for request bodies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TExportWalletBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TExportWalletBody = operations['PublicApiService_ExportWallet']['parameters']['body']['body']\"\n```\n\n----------------------------------------\n\nTITLE: Defining TOtpAuthResponse Type Alias\nDESCRIPTION: This snippet defines the `TOtpAuthResponse` type alias. It specifies the structure of the successful (200) response schema returned by the `PublicApiService_OtpAuth` operation, specifically the `POST /public/v1/submit/otp_auth` endpoint. The type alias is derived from a nested structure within the `operations` object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOtpAuthResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TOtpAuthResponse** = `operations`[`\"PublicApiService_OtpAuth\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Providers Input Type in TypeScript\nDESCRIPTION: Type alias for the input object used in querying OAuth providers, containing a body property of type TGetOauthProvidersBody\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetOauthProvidersInput = {\n  body: TGetOauthProvidersBody\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Enumeration\nDESCRIPTION: This snippet defines the Error event type, which is triggered in the event of an error within the iframe communication processes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nError: \"ERROR\"\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Feature Intent Interface in TypeScript\nDESCRIPTION: This snippet defines the v1SetOrganizationFeatureIntent interface, which includes properties for feature name and value.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1SetOrganizationFeatureIntent {\n  name: definitions[\"v1FeatureName\"];\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Tag Intent in TypeScript\nDESCRIPTION: Type definition for creating a private key tag. Specifies an array of private key IDs to be tagged and the name for the tag.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Input Type in TypeScript\nDESCRIPTION: Type alias for OAuth input configuration with a required body property of type TOauthBody. Used for submitting OAuth-related requests to the Turnkey public API endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TOauthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TOauthInput = {\n  body: TOauthBody\n}\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating Suborganization in Turnkey SDK\nDESCRIPTION: Method for retrieving an existing suborganization or creating a new one if it doesn't exist. Returns a promise resolving to a GetOrCreateSuborgResponse or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetOrCreateSuborg: (request: GetOrCreateSuborgRequest) => Promise<undefined | GetOrCreateSuborgResponse>\n```\n\n----------------------------------------\n\nTITLE: SDK Intents Type Definitions\nDESCRIPTION: Complex type definitions for various intent actions including authentication, wallet management, user operations, and security configurations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUserTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Complex intent type definitions covering multiple organizational actions\n  // Includes authentication, wallet management, security, and user management intents\n}\n```\n\n----------------------------------------\n\nTITLE: Email Authentication - TypeScript\nDESCRIPTION: This function initiates email authentication using the input of type TEmailAuthBody, returning a promise designed by TSignedRequest. The functionality hinges on proper input format.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampEmailAuth(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Tag Management Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for stamping requests to update private key and user tags. These methods prepare signed requests for tag management operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_129\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdatePrivateKeyTag(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampUpdateUserTag(input): Promise<undefined | TSignedRequest>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePrivateKeyTag(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Sign Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the result of a signed transaction operation which includes a signedTransaction as a string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/exportWalletAccount.mdx#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransactionResult`: \\{ `signedTransaction`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining updateWalletIntent Interface in TypeScript\nDESCRIPTION: TypeScript interface for updating a wallet in an organization. It allows specifying the wallet ID and optionally updating the wallet name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignatureFromActivity.mdx#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n{ `walletId`: `string`; `walletName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Sending OTP in Turnkey SDK\nDESCRIPTION: Method for sending a One-Time Password with the provided request. Returns a promise resolving to a SendOtpResponse or undefined.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/server.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsendOtp: (request: SendOtpRequest) => Promise<undefined | SendOtpResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structure - TypeScript\nDESCRIPTION: Defines the result structure for signing transactions, consisting of a single property that holds the signed transaction string.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteApiKeys.mdx#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Declaring OtpVerification React Component Type\nDESCRIPTION: Type declaration for a React functional component that handles OTP verification. The component accepts OtpVerificationProps as its props type parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/OtpVerification.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst OtpVerification: React.FC<OtpVerificationProps>\n```\n\n----------------------------------------\n\nTITLE: Updating User Tag with Turnkey SDK in TypeScript\nDESCRIPTION: Method for updating a user tag through the Turnkey API. It accepts a TUpdateUserTagBody parameter and returns a Promise containing the response object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUserTag(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: The Type Alias TGetSubOrgIdsResponse is defined for the response schema of a specific API service. It specifies the successful response structure (with HTTP code 200) for the \\'PublicApiService\\_GetSubOrgIds\\' operation. Dependencies include having access to the operations and schema defined in the types package. It is associated with the endpoint \\'POST /public/v1/query/list_suborgs\\'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetSubOrgIdsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetSubOrgIdsResponse = operations[\\\"PublicApiService_GetSubOrgIds\\\"][\\\"responses\\\"][\\\"200\\\"][\\\"schema\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: SDK Intent Types Definition\nDESCRIPTION: Complex TypeScript type definitions for various SDK intent types covering authentication, wallet, transaction, and organization management operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPolicy.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  addressFormats: string[];\n  curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\";\n  encryptedBundle: string;\n  privateKeyName: string;\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TurnkeyInitMessageChannel Enumeration\nDESCRIPTION: This snippet defines the TurnkeyInitMessageChannel event type in TypeScript, used to initiate message communication channels within the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nTurnkeyInitMessageChannel: \"TURNKEY_INIT_MESSAGE_CHANNEL\"\n```\n\n----------------------------------------\n\nTITLE: Converting Base64 to Base64URL String in TypeScript\nDESCRIPTION: Function signature for converting a standard Base64 string to a Base64URL encoded string. Takes a Base64 string input parameter and returns the Base64URL encoded string output.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/encoding/functions/base64StringToBase64UrlEncodedString.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbase64StringToBase64UrlEncodedString(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining type for walletAccountId field\nDESCRIPTION: This snippet defines the type for the `walletAccountId` field, which is a `string`. It also includes a description indicating that this field represents the unique identifier for a given Wallet Account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\n> **walletAccountId**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetAttestationDocumentResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting an attestation document, containing the raw CBOR-encoded document.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetAttestationDocumentResponse {\n  attestationDocument: string; // Format: byte\n}\n```\n\n----------------------------------------\n\nTITLE: Defining optional onSessionCreated callback\nDESCRIPTION: This code snippet defines the optional `onSessionCreated` callback function within the `TurnkeyConfig` interface. It's called when a new session is created, passing the created session object as an argument.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/interfaces/TurnkeyConfig.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * `optional` **onSessionCreated**: (`session`) => `void`\n *\n * Defined in: [sdk-react-native/src/contexts/TurnkeyContext.tsx:93](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-react-native/src/contexts/TurnkeyContext.tsx#L93)\n *\n * #### Parameters\n *\n * ##### session\n *\n * [`Session`](../type-aliases/Session.mdx)\n *\n * #### Returns\n *\n * `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Injecting an Import Bundle in TypeScript\nDESCRIPTION: Method to inject an import bundle into the iframe to initiate either wallet import or private key import flows.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/classes/IframeStamper.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninjectImportBundle(bundle, organizationId, userId): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Authenticator Recovery Intent Structure in TypeScript\nDESCRIPTION: Defines the structure for authenticator recovery intent, including attestation details for WebAuthn authentication. Contains fields for authenticator metadata, challenge, and transport types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ `attestation`: { `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (`\"AUTHENTICATOR_TRANSPORT_BLE\"` | `\"AUTHENTICATOR_TRANSPORT_INTERNAL\"` | `\"AUTHENTICATOR_TRANSPORT_NFC\"` | `\"AUTHENTICATOR_TRANSPORT_USB\"` | `\"AUTHENTICATOR_TRANSPORT_HYBRID\"`)[];}; `authenticatorName`: `string`; `challenge`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: OAuth Intent Type Definition\nDESCRIPTION: Type definition for OAuth intent including API key configuration and token management.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/assertActivityCompleted.mdx#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"apiKeyName\": string;\n  \"expirationSeconds\": string;\n  \"invalidateExisting\": boolean;\n  \"oidcToken\": string;\n  \"targetPublicKey\": string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Turnkey Wallet Stamper Dependencies\nDESCRIPTION: Command to install the required NPM packages @turnkey/wallet-stamper and @turnkey/http using package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/wallet-stamper/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @turnkey/wallet-stamper @turnkey/http\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface: Organization Feature Result Type\nDESCRIPTION: Interface definition for the result of removing organization features, containing the updated list of features.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1RemoveOrganizationFeatureResult {\n  features: definitions[\"v1Feature\"][]; // Resulting list of organization features\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetActivitiesBody Type in TypeScript\nDESCRIPTION: Type alias definition for the request body parameters of the GetActivities API endpoint. This type maps to the body parameters of the PublicApiService_GetActivities operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetActivitiesBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetActivitiesBody = operations[\"PublicApiService_GetActivities\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Set Organization Feature Result Structure in TypeScript\nDESCRIPTION: Defines the structure for setting organization feature results, including an array of feature objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOrganizationFeatureResult`: \\{ `features`: `object`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUsersResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting all users. It includes an array of user objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_101\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetUsersResponse: object\n{\n  users: definitions[\"v1User\"][]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetOrganizationResponse Interface in TypeScript\nDESCRIPTION: Defines the response structure for getting an organization, containing an OrganizationData object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetOrganizationResponse {\n  organizationData: definitions[\"v1OrganizationData\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetSubOrgIdsResponse Interface in TypeScript\nDESCRIPTION: Specifies the structure for the response when getting sub-organization IDs. It includes an array of organization IDs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetSubOrgIdsResponse: object\n{\n  organizationIds: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Private Keys in TypeScript\nDESCRIPTION: The `deletePrivateKeys` function handles the deletion of specified private keys. It accepts input of type `TDeletePrivateKeysBody` and returns a Promise that resolves to an object with a confirmation message.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndeletePrivateKeys(input): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitImportPrivateKeyResult type\nDESCRIPTION: Defines the result structure for initializing private key import, containing the import bundle with the public key and signature.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef v1InitImportPrivateKeyResult\n * @memberof definitions\n */\nexport interface v1InitImportPrivateKeyResult {\n  /**\n   * Import bundle containing a public key and signature to use for importing client data.\n   */\n  importBundle: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Wallet Result Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the result of updating a wallet, specifying that the response will contain a wallet ID. This allows developers to reliably handle the response from the API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importPrivateKey.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWalletResult: { walletId: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias TGetApiKeyInput\nDESCRIPTION: This snippet defines the type alias `TGetApiKeyInput` as an object structure that includes properties for making requests related to API key generation in a TypeScript environment. It references another type alias, `TGetApiKeyBody`, implying the structure expected in requests. This alias is fundamental for ensuring type safety when dealing with API inputs.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetApiKeyInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetApiKeyInput = {\\n    body: TGetApiKeyBody\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Types - TypeScript\nDESCRIPTION: This snippet defines various TypeScript types for API responses, covering objects that summarize results of operations, including user updates, wallet imports, and activity statuses. It provides a structure for developers to ensure consistent handling of responses throughout the API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: \"ACTIVITY_STATUS_CREATED\" \\| \"ACTIVITY_STATUS_PENDING\" \\| \"ACTIVITY_STATUS_COMPLETED\" \\| \"ACTIVITY_STATUS_FAILED\" \\| \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \\| \"ACTIVITY_STATUS_REJECTED\"; `type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" \\| \"ACTIVITY_TYPE_CREATE_USERS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \\| \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION\" \\| \"ACTIVITY_TYPE_CREATE_POLICY\" \\| \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_DELETE_USERS\" \\| \"ACTIVITY_TYPE_DELETE_API_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_INVITATION\" \\| \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_DELETE_POLICY\" \\| \"ACTIVITY_TYPE_CREATE_USER_TAG\" \\| \"ACTIVITY_TYPE_DELETE_USER_TAGS\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION\" \\| \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" \\| \"ACTIVITY_TYPE_REJECT_ACTIVITY\" \\| \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" \\| \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V3\" \\| \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" \\| \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" \\| \"ACTIVITY_TYPE_UPDATE_USER_TAG\" \\| \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V2\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" \\| \"ACTIVITY_TYPE_UPDATE_USER\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" \\| \"ACTIVITY_TYPE_CREATE_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" \\| \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" \\| \"ACTIVITY_TYPE_RECOVER_USER\" \\| \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" \\| \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_CREATE_POLICIES\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" \\| \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" \\| \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" \\| \"ACTIVITY_TYPE_OAUTH\" \\| \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_WALLETS\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" \\| \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH\" \\| \"ACTIVITY_TYPE_OTP_AUTH\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" \\| \"ACTIVITY_TYPE_UPDATE_WALLET\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V3\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Results in TypeScript\nDESCRIPTION: This snippet defines complex TypeScript types for various blockchain activities and their results. It includes enums for activity status and types, as well as detailed result structures for different operations like creating API keys, signing transactions, and managing policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/approveActivity.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActivityResult = {\n  createApiKeysResult: { apiKeyId: string; };\n  signRawPayloadResult: { r: string; s: string; v: string; };\n  signTransactionResult: { signedTransaction: string; };\n  updatePolicyResult: { policyId: string; };\n  // ... many more result types\n};\n\ntype ActivityStatus =\n  | \"ACTIVITY_STATUS_CREATED\"\n  | \"ACTIVITY_STATUS_PENDING\"\n  | \"ACTIVITY_STATUS_COMPLETED\"\n  | \"ACTIVITY_STATUS_FAILED\"\n  | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\"\n  | \"ACTIVITY_STATUS_REJECTED\";\n\ntype ActivityType =\n  | \"ACTIVITY_TYPE_CREATE_API_KEYS\"\n  | \"ACTIVITY_TYPE_CREATE_USERS\"\n  | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"\n  | \"ACTIVITY_TYPE_CREATE_POLICY\"\n  // ... many more activity types\n  | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n\ntype Activity = {\n  result: ActivityResult;\n  status: ActivityStatus;\n  type: ActivityType;\n  updatedAt: { nanos: string; seconds: string; };\n  votes: object[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SetOrganizationFeatureIntent Interface in TypeScript\nDESCRIPTION: Defines the structure for setting an organization feature. It includes the name of the feature to set and an optional value that will override existing values if the feature is already set.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBAUTHN_ORIGINS\" | \"FEATURE_NAME_EMAIL_AUTH\" | \"FEATURE_NAME_EMAIL_RECOVERY\" | \"FEATURE_NAME_WEBHOOK\" | \"FEATURE_NAME_SMS_AUTH\" | \"FEATURE_NAME_OTP_EMAIL_AUTH\";\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Import React Component Type\nDESCRIPTION: Type declaration for a React Functional Component named Import that accepts ImportProps as its parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/Import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Import: React.FC<ImportProps>\n```\n\n----------------------------------------\n\nTITLE: Defining getActivity Function Signature in TypeScript\nDESCRIPTION: This snippet defines the function signature for getActivity, which takes an input parameter and returns a Promise with a complex activity object. The activity object includes details like approval status, creation time, failure information, and various intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetActivity(input): Promise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      // Various intent types...\n    };\n  }\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeletePolicyResult Structure in TypeScript\nDESCRIPTION: Defines the result structure for deleting a policy, including the policy ID of the deleted policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeletePolicyResult {\n    policyId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1RemoveOrganizationFeatureRequest Interface in TypeScript\nDESCRIPTION: This interface defines the structure of a request to remove an organization feature. It includes properties for organization ID, parameters, timestamp, and request type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1RemoveOrganizationFeatureRequest {\n  organizationId: string;\n  parameters: definitions[\"v1RemoveOrganizationFeatureIntent\"];\n  timestampMs: string;\n  type: \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\";\n}\n```\n\n----------------------------------------\n\nTITLE: Stamping Initialize OTP Authentication Request in TypeScript\nDESCRIPTION: Method to stamp a request for initializing OTP (One-Time Password) authentication. It takes an input of type TInitOtpAuthBody and returns a Promise that resolves to either undefined or a TSignedRequest object.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyServerClient.mdx#2025-04-16_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampInitOtpAuth(input: TInitOtpAuthBody): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Project\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and building the project before running the deployer example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/deployer/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/deployer/\n```\n\n----------------------------------------\n\nTITLE: Defining updatePolicyIntentV2 Interface for Turnkey SDK in TypeScript\nDESCRIPTION: TypeScript interface for the V2 version of policy update operations in Turnkey. Similar to updatePolicyIntent, it allows configuration of policy behavior and metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n{ `policyCondition`: `string`; `policyConsensus`: `string`; `policyEffect`: `\"EFFECT_ALLOW\"` | `\"EFFECT_DENY\"`; `policyId`: `string`; `policyName`: `string`; `policyNotes`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_SEI_ACCOUNTS constant array\nDESCRIPTION: This snippet defines a constant array named DEFAULT_SEI_ACCOUNTS, containing WalletAccount objects. This is likely a list of default or example accounts for use with the Turnkey SDK server. The type is specified as an array of WalletAccount interfaces.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/variables/DEFAULT_SEI_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n> `const` **DEFAULT_SEI_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Return Type for Activity Operation in TypeScript\nDESCRIPTION: This snippet defines a complex Promise return type for an activity operation. It includes nested objects for activity details, user intents, and various operation-specific data structures.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createApiKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{ \n  activity: { \n    canApprove: boolean; \n    canReject: boolean; \n    createdAt: { \n      nanos: string; \n      seconds: string; \n    }; \n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    }; \n    fingerprint: string; \n    id: string; \n    intent: { \n      acceptInvitationIntent: { \n        authenticator: { \n          attestation: { \n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n            clientExtensionResults: { \n              appid: boolean; \n              appidExclude: boolean; \n              credProps: { \n                rk: boolean; \n              }; \n            }; \n            id: string; \n            rawId: string; \n            response: { \n              attestationObject: string; \n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null; \n              clientDataJson: string; \n              transports: []; \n            }; \n            type: \"public-key\"; \n          }; \n          authenticatorName: string; \n          challenge: string; \n          userId: string; \n        }; \n        invitationId: string; \n        userId: string; \n      }; \n      // ... many more intent types ...\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for Activity Types and Results\nDESCRIPTION: Comprehensive type definitions for activity statuses, types, and result objects used throughout the SDK. Includes detailed enumerations for various activity types and structured result interfaces for different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n`s`: `string`; `v`: `string`; }; `signRawPayloadsResult`: { `signatures`: `object`[]; }; `signTransactionResult`: { `signedTransaction`: `string`; }; `updateAllowedOriginsResult`: {}; `updatePolicyResult`: { `policyId`: `string`; }; `updatePolicyResultV2`: { `policyId`: `string`; }; `updatePrivateKeyTagResult`: { `privateKeyTagId`: `string`; }; `updateRootQuorumResult`: {}; `updateUserResult`: { `userId`: `string`; }; `updateUserTagResult`: { `userTagId`: `string`; }; `updateWalletResult`: { `walletId`: `string`; }; }; `status`: `\"ACTIVITY_STATUS_CREATED\"` | `\"ACTIVITY_STATUS_PENDING\"` | `\"ACTIVITY_STATUS_COMPLETED\"` | `\"ACTIVITY_STATUS_FAILED\"` | `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` | `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` | `\"ACTIVITY_TYPE_CREATE_USERS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` | `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` | `\"ACTIVITY_TYPE_CREATE_POLICY\"` | `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_DELETE_USERS\"` | `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_INVITATION\"` | `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_DELETE_POLICY\"` | `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` | `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` | `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` | `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` | `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` | `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` | `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` | `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` | `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` | `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` | `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` | `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` | `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` | `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` | `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` | `\"ACTIVITY_TYPE_UPDATE_USER\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY\"` | `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` | `\"ACTIVITY_TYPE_CREATE_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` | `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` | `\"ACTIVITY_TYPE_RECOVER_USER\"` | `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` | `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` | `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH\"` | `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_IMPORT_WALLET\"` | `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` | `\"ACTIVITY_TYPE_CREATE_POLICIES\"` | `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` | `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` | `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` | `\"ACTIVITY_TYPE_OAUTH\"` | `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` | `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` | `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` | `\"ACTIVITY_TYPE_DELETE_WALLETS\"` | `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` | `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` | `\"ACTIVITY_TYPE_OTP_AUTH\"` | `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` | `\"ACTIVITY_TYPE_UPDATE_WALLET\"` | `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` | `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` | `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: { `nanos`: `string`; `seconds`: `string`; }; `votes`: `object`[]; }; }\n```\n\n----------------------------------------\n\nTITLE: Declaring DEFAULT_TRON_ACCOUNTS Constant in TypeScript\nDESCRIPTION: Constant declaration for DEFAULT_TRON_ACCOUNTS which is typed as an array of WalletAccount interface objects for TRON blockchain accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_TRON_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_TRON_ACCOUNTS: WalletAccount[]\n```\n\n----------------------------------------\n\nTITLE: Stamping OTP Authentication Request in TypeScript\nDESCRIPTION: Method signature for stampOtpAuth which prepares a signed request for OTP authentication. It accepts a TOtpAuthBody input parameter and returns a Promise with either undefined or a TSignedRequest.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampOtpAuth(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Wallet Update\nDESCRIPTION: Defines the interface for updating wallet properties including wallet ID and name.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_143\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1UpdateWalletIntent {\n  walletId: string;\n  walletName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Email Customization Parameters Type Definition\nDESCRIPTION: Provides optional customization settings for email authentication, including application branding, logo, and template configuration\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1EmailCustomizationParams {\n  appName?: string;\n  logoUrl?: string;\n  magicLinkTemplate?: string;\n  templateId?: string;\n  templateVariables?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Intent in TypeScript\nDESCRIPTION: This snippet outlines the structure for defining a payment method intent, encapsulating properties such as cardholder information and card details necessary for processing a payment method.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiKeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetPaymentMethodIntent: { cardHolderEmail: string; cardHolderName: string; cvv: string; expiryMonth: string; expiryYear: string; number: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Get API Key Body\nDESCRIPTION: The TGetApiKeyBody type alias is defined by omitting the organizationId from the body parameters of the PublicApiService_GetApiKey operation. This type is important for ensuring correct parameter structures when making API requests.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetApiKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetApiKeyBody = Omit<operations[\"PublicApiService_GetApiKey\"][\"parameters\"][\"body\"][\"body\"], \"organizationId\"> & queryOverrideParams\n```\n\n----------------------------------------\n\nTITLE: Defining Stamp Enumeration\nDESCRIPTION: This snippet defines the Stamp event type in TypeScript, representing a stamp action that occurs within the iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/IframeEventType.mdx#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nStamp: \"STAMP\"\n```\n\n----------------------------------------\n\nTITLE: Defining TGetAttestationDocumentBody Type in TypeScript\nDESCRIPTION: Type alias that references the body parameter of the PublicApiService_GetAttestationDocument operation. This type is used for structuring requests to the /public/v1/query/get_attestation endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetAttestationDocumentBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TGetAttestationDocumentBody** = `operations`[`\"PublicApiService_GetAttestationDocument\"`][`\"parameters\"`][`\"body\"`][`\"body\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAuthenticators Response Type in TypeScript\nDESCRIPTION: Type alias that maps the response schema for the create authenticators API endpoint, specifically the successful 200 response from the PublicApiService\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TCreateAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTCreateAuthenticatorsResponse = `operations`\\[`\"PublicApiService_CreateAuthenticators\"`\\]\\[`\"responses\"`\\]\\[`\"200\"`\\]\\[`\"schema\"`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in TypeScript\nDESCRIPTION: Defines a constant, DEFAULT_TURNKEY_CLOUD_STORAGE_KEY, which holds the value 'TURNKEY_API_KEY'. This constant is likely used for API authentication or configuration within the Telegram Cloud Storage Stamper module. There are no external dependencies required to define this constant. It acts as a string literal placeholder for storing the API key, which may be used elsewhere in the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/variables/DEFAULT_TURNKEY_CLOUD_STORAGE_KEY.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEFAULT_TURNKEY_CLOUD_STORAGE_KEY = \"TURNKEY_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Private Key Tag Management Types in TypeScript\nDESCRIPTION: Type definitions for managing private key tags, including creation requests and results with associated metadata.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ninterface v1CreatePrivateKeyTagIntent {\n  privateKeyIds: string[];\n  privateKeyTagName: string;\n}\n\ninterface v1CreatePrivateKeyTagResult {\n  privateKeyIds: string[];\n  privateKeyTagId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the NextJS development server for the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-federated-passkeys/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Policy with SDK Client\nDESCRIPTION: Using stampGetPolicy, a specific policy can be fetched with input of TGetPolicyBody. The method returns a Promise resolving to either undefined or a TSignedRequest to retrieve the specified policy.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **stampGetPolicy**(`input`): `Promise`\\<`undefined` \\| [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for SDK Operations\nDESCRIPTION: This code snippet defines TypeScript interfaces for various intents and results used in the SDK. It includes types for operations like user authentication, key management, and organization administration.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SDKTypes {\n  intent: {\n    acceptInvitationIntent: { invitationId: string; userId: string; };\n    activateBillingTierIntent: { productId: string; };\n    createApiKeysIntent: { apiKeyName: string; expirationSeconds: string; };\n    createApiOnlyUsersIntent: { userEmails: string[]; };\n    createAuthenticatorsIntent: { authenticatorName: string; userId: string; };\n    createInvitationsIntent: { emails: string[]; };\n    createOauthProvidersIntent: { name: string; clientId: string; clientSecret: string; };\n    createOrganizationIntent: { organizationName: string; rootUserEmail: string; rootUserName: string; };\n    createPoliciesIntent: { policyCondition: string; policyConsensus: string; policyEffect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; policyName: string; policyNotes: string; };\n    createPrivateKeysIntent: { curve: \"CURVE_SECP256K1\" | \"CURVE_ED25519\"; privateKeyName: string; userId: string; };\n    // ... (more intent definitions)\n  };\n  result: {\n    acceptInvitationResult: { invitationId: string; userId: string; };\n    activateBillingTierResult: { productId: string; };\n    createApiKeysResult: { apiKeyIds: string[]; };\n    createApiOnlyUsersResult: { userIds: string[]; };\n    createAuthenticatorsResult: { authenticatorIds: string[]; };\n    createInvitationsResult: { invitationIds: string[]; };\n    createOauthProvidersResult: { providerIds: string[]; };\n    createOrganizationResult: { organizationId: string; };\n    // ... (more result definitions)\n  };\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCreateReadWriteSessionBody Type Alias in TypeScript\nDESCRIPTION: Type alias definition for read-write session request body parameters. Maps to the body parameter type of the PublicApiService_CreateReadWriteSession operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateReadWriteSessionBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTCreateReadWriteSessionBody = operations[\"PublicApiService_CreateReadWriteSession\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: TGetUsersInput Properties Declaration\nDESCRIPTION: Property declaration for the body field within TGetUsersInput type. The body property is required and must be of type TGetUsersBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetUsersInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody: TGetUsersBody\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Signing Result Structure - TypeScript\nDESCRIPTION: This snippet specifies the result structure for signing a transaction, which includes the signed transaction represented as a string. It is crucial for ensuring the integrity and authenticity of financial operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createUsers.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nsignTransactionResult: { signedTransaction: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Promise Return Type in TypeScript\nDESCRIPTION: This code snippet defines a complex Promise return type with nested objects and various properties. It includes details about activities, authentication processes, and various intents for different operations within the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: {\n      nanos: string;\n      seconds: string;\n    };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: {\n                rk: ...\n              };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n              clientDataJson: string;\n              transports: ...[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      // ... (many more intent types omitted for brevity)\n    };\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Defining Update Policy Type Alias in TypeScript\nDESCRIPTION: Type alias that represents the body structure for updating a policy in the Turnkey public API. It is extracted from the generated API service type definitions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TUpdatePolicyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TUpdatePolicyBody = operations[\"PublicApiService_UpdatePolicy\"][\"parameters\"][\"body\"][\"body\"];\n```\n\n----------------------------------------\n\nTITLE: Defining apiPrivateKey Property in CloudStorageAPIKey\nDESCRIPTION: This snippet defines the property `apiPrivateKey` of the type alias `CloudStorageAPIKey`, specifying that it should be a string. This key is essential for secure API interactions.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/telegram-cloud-storage-stamper/type-aliases/CloudStorageAPIKey.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiPrivateKey: string\n```\n\n----------------------------------------\n\nTITLE: Setting Up Organizational Structure\nDESCRIPTION: Command to set up the organizational structure required for the demo, including users, private keys, and policies.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/rebalancer/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli setup\n```\n\n----------------------------------------\n\nTITLE: Defining v1DeleteSubOrganizationResult Structure in TypeScript\nDESCRIPTION: Defines the result structure for deleting a sub-organization, providing the unique identifier of the sub-organization that was removed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface v1DeleteSubOrganizationResult {\n    subOrganizationUuid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Solana KeyFormat Member\nDESCRIPTION: Defines the Solana member of the KeyFormat enumeration.  It indicates that the key is in a Solana-specific format. The underlying string value assigned to this enum member is \"SOLANA\".\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/iframe-stamper/index/enumerations/KeyFormat.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internal\n */\nexport enum KeyFormat {\n  Hexadecimal = \"HEXADECIMAL\",\n  Solana = \"SOLANA\",\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Import Bundle with TurnkeyIframeClient\nDESCRIPTION: Demonstrates how to inject an import bundle for secure credential import within an iframe.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// Create a Passkey client instance\nconst iframeClient = turnkeySDK.iframeClient();\n\n// Injects an import bundle for a specific organization and user\nconst success = await iframeClient.injectImportBundle(\n  \"import-bundle\",\n  \"org-id\",\n  \"user-id\"\n);\n```\n\n----------------------------------------\n\nTITLE: TDeleteSubOrganizationResponse Type Alias Definition\nDESCRIPTION: Defines the TDeleteSubOrganizationResponse type alias. It is constructed as an intersection of types derived from the OpenAPI specification for the Turnkey Public API, specifically for the `PublicApiService_DeleteSubOrganization` operation's successful (200) response, schema, activity, result, and deleteSubOrganizationResult, combined with the `v1ActivityResponse` definition.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteSubOrganizationResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **TDeleteSubOrganizationResponse** = `operations`[`\"PublicApiService_DeleteSubOrganization\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"deleteSubOrganizationResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Enumerating Activity Status and Types\nDESCRIPTION: This snippet enumerates possible statuses and types for activities within the API context, providing a clear mapping of all possible activity outcomes and their respective identifiers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/importWallet.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n`status`: \"ACTIVITY_STATUS_CREATED\" \\| \"ACTIVITY_STATUS_PENDING\" \\| \"ACTIVITY_STATUS_COMPLETED\" \\| \"ACTIVITY_STATUS_FAILED\" \\| \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" \\| \"ACTIVITY_STATUS_REJECTED\"; `type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" \\| \"ACTIVITY_TYPE_CREATE_USERS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" \\| \"ACTIVITY_TYPE_CREATE_INVITATIONS\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION\" \\| \"ACTIVITY_TYPE_CREATE_POLICY\" \\| \"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_DELETE_USERS\" \\| \"ACTIVITY_TYPE_DELETE_API_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_INVITATION\" \\| \"ACTIVITY_TYPE_DELETE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_DELETE_POLICY\" \\| \"ACTIVITY_TYPE_CREATE_USER_TAG\" \\| \"ACTIVITY_TYPE_DELETE_USER_TAGS\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION\" \\| \"ACTIVITY_TYPE_APPROVE_ACTIVITY\" \\| \"ACTIVITY_TYPE_REJECT_ACTIVITY\" \\| \"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\" \\| \"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_POLICY_V3\" \\| \"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\" \\| \"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\" \\| \"ACTIVITY_TYPE_UPDATE_USER_TAG\" \\| \"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\" \\| \"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\" \\| \"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V2\" \\| \"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\" \\| \"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\" \\| \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\" \\| \"ACTIVITY_TYPE_UPDATE_USER\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY\" \\| \"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\" \\| \"ACTIVITY_TYPE_CREATE_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\" \\| \"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\" \\| \"ACTIVITY_TYPE_RECOVER_USER\" \\| \"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\" \\| \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\" \\| \"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH\" \\| \"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_IMPORT_WALLET\" \\| \"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\" \\| \"ACTIVITY_TYPE_CREATE_POLICIES\" \\| \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\" \\| \"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\" \\| \"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\" \\| \"ACTIVITY_TYPE_OAUTH\" \\| \"ACTIVITY_TYPE_CREATE_API_KEYS_V2\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\" \\| \"ACTIVITY_TYPE_EMAIL_AUTH_V2\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\" \\| \"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\" \\| \"ACTIVITY_TYPE_DELETE_WALLETS\" \\| \"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\" \\| \"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH\" \\| \"ACTIVITY_TYPE_OTP_AUTH\" \\| \"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\" \\| \"ACTIVITY_TYPE_UPDATE_WALLET\" \\| \"ACTIVITY_TYPE_UPDATE_POLICY_V2\" \\| \"ACTIVITY_TYPE_CREATE_USERS_V3\" \\| \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Defining TExportWalletResponse Type in TypeScript\nDESCRIPTION: Type definition for the wallet export operation response. This type alias references the 200 response schema from the PublicApiService_ExportWallet operation, used for POST requests to /public/v1/submit/export_wallet endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TExportWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TExportWalletResponse** = `operations`[`\"PublicApiService_ExportWallet\"`][`\"responses\"`][`\"200\"`][`\"schema\"`]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: The TGetOauthProvidersInput type alias is defined as an object in TypeScript. It encapsulates the required structure for OAuth provider inputs. The body property of this type references another defined type, TGetOauthProvidersBody, indicating a dependency on its structure. This type is used within the SDK to shuttle specific input parameters related to OAuth providers.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOauthProvidersInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTGetOauthProvidersInput = object\n```\n\n----------------------------------------\n\nTITLE: Typescript Activity Type Definitions\nDESCRIPTION: Defines various TypeScript type definitions related to activities, including possible statuses, types, and result structures. These types are used throughout the application to represent the state and outcome of different operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updatePrivateKeyTag.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ng`; `lastFour`: `string`; \\}; `signRawPayloadResult`: \\{ `r`: `string`; `s`: `string`; `v`: `string`; \\}; `signRawPayloadsResult`: \\{ `signatures`: `object`[]; \\}; `signTransactionResult`: \\{ `signedTransaction`: `string`; \\}; `updateAllowedOriginsResult`: \\{\\}; `updatePolicyResult`: \\{ `policyId`: `string`; \\}; `updatePolicyResultV2`: \\{ `policyId`: `string`; \\}; `updatePrivateKeyTagResult`: \\{ `privateKeyTagId`: `string`; \\}; `updateRootQuorumResult`: \\{\\}; `updateUserResult`: \\{ `userId`: `string`; \\}; `updateUserTagResult`: \\{ `userTagId`: `string`; \\}; `updateWalletResult`: \\{ `walletId`: `string`; \\}; \\}; `status`: `\"ACTIVITY_STATUS_CREATED\"` \\| `\"ACTIVITY_STATUS_PENDING\"` \\| `\"ACTIVITY_STATUS_COMPLETED\"` \\| `\"ACTIVITY_STATUS_FAILED\"` \\| `\"ACTIVITY_STATUS_CONSENSUS_NEEDED\"` \\| `\"ACTIVITY_STATUS_REJECTED\"`; `type`: `\"ACTIVITY_TYPE_CREATE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\"` \\| `\"ACTIVITY_TYPE_CREATE_INVITATIONS\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY\"` \\| `\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_DELETE_USERS\"` \\| `\"ACTIVITY_TYPE_DELETE_API_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_INVITATION\"` \\| `\"ACTIVITY_TYPE_DELETE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_DELETE_POLICY\"` \\| `\"ACTIVITY_TYPE_CREATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_USER_TAGS\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION\"` \\| `\"ACTIVITY_TYPE_APPROVE_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_REJECT_ACTIVITY\"` \\| `\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\"` \\| `\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICY_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\"` \\| `\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER_TAG\"` \\| `\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\"` \\| `\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V2\"` \\| `\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\"` \\| `\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_UPDATE_USER\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY\"` \\| `\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\"` \\| `\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\"` \\| `\"ACTIVITY_TYPE_RECOVER_USER\"` \\| `\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\"` \\| `\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\"` \\| `\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH\"` \\| `\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_IMPORT_WALLET\"` \\| `\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\"` \\| `\"ACTIVITY_TYPE_CREATE_POLICIES\"` \\| `\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\"` \\| `\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\"` \\| `\"ACTIVITY_TYPE_OAUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\"` \\| `\"ACTIVITY_TYPE_EMAIL_AUTH_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\"` \\| `\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\"` \\| `\"ACTIVITY_TYPE_DELETE_WALLETS\"` \\| `\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\"` \\| `\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_OTP_AUTH\"` \\| `\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\"` \\| `\"ACTIVITY_TYPE_UPDATE_WALLET\"` \\| `\"ACTIVITY_TYPE_UPDATE_POLICY_V2\"` \\| `\"ACTIVITY_TYPE_CREATE_USERS_V3\"` \\| `\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\"`; `updatedAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `votes`: `object`[]; \\}; \\}>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for v1OauthIntent in Turnkey SDK\nDESCRIPTION: This snippet defines the structure of an OAuth intent object in the Turnkey API, including optional API key name, expiration time, and required OIDC token and public key.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_113\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1OauthIntent {\n  apiKeyName?: string;\n  expirationSeconds?: string;\n  invalidateExisting?: boolean;\n  oidcToken: string;\n  targetPublicKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOrganizationConfigsResponse Type in TypeScript\nDESCRIPTION: Type alias definition for the response structure of the PublicApiService_GetOrganizationConfigs endpoint. This type represents the schema of a successful (200) response when querying organization configurations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationConfigsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetOrganizationConfigsResponse = operations[\"PublicApiService_GetOrganizationConfigs\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining type for walletId field\nDESCRIPTION: This snippet defines the type for the `walletId` field, which is a `string`. It includes a description explaining that the field represents the Wallet the Account was derived from.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\n> **walletId**: `string`\n```\n\n----------------------------------------\n\nTITLE: Deprecated Ethereum Wallet Method Signature\nDESCRIPTION: Previous implementation of the public key recovery method that was deprecated in version 1.0.0.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/wallet-stamper/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrecoverPublicKey(message: string): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Update Allowed Origins Result Structure in TypeScript\nDESCRIPTION: Defines the structure for updating allowed origins results.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateAllowedOriginsResult`: \\{\\};\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Account Creation Result - TypeScript\nDESCRIPTION: Accommodates the structure for results obtained from creating wallet accounts, specifically the derived addresses. This is crucial in providing confirmation and feedback upon request completion.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1CreateWalletAccountsResult: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1116\n */\nexport interface v1CreateWalletAccountsResult {\n  addresses: string[]; // A list of derived addresses.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetPrivateKeyRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get a private key. It requires organizationId and privateKeyId as string properties.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1GetPrivateKeyRequest: object\n{\n  organizationId: string\n  privateKeyId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Types - Effect and EmailAuth\nDESCRIPTION: Type definitions for effect enum and email authentication intent\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype v1Effect = \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n\ninterface v1EmailAuthIntent {\n  apiKeyName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Node.js with NVM (Bash)\nDESCRIPTION: Commands to install the Node.js version specified in .nvmrc and activate it using NVM.\nSOURCE: https://github.com/tkhq/sdk/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm install # Install the version specified in `.nvmrc`\n$ nvm use # Activate the local version\n```\n\n----------------------------------------\n\nTITLE: SDK Activity Response Type Definition\nDESCRIPTION: TypeScript type definition for a complex Promise return type representing an activity response with multiple nested intent types and metadata\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteApiKeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise<{ activity: { canApprove: boolean; canReject: boolean; ... } }>\n```\n\n----------------------------------------\n\nTITLE: Installing @turnkey/api-key-stamper via yarn\nDESCRIPTION: Installation command for the @turnkey/api-key-stamper package using yarn package manager.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/api-key-stamper/documents/ApiKeyStamper.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @turnkey/api-key-stamper\n```\n\n----------------------------------------\n\nTITLE: Defining body Property of TGetOrganizationConfigsInput in TypeScript\nDESCRIPTION: This code snippet defines the 'body' property of the TGetOrganizationConfigsInput type. It is of type TGetOrganizationConfigsBody, which likely contains the specific configuration parameters for the API request.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetOrganizationConfigsInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TGetOrganizationConfigsBody\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enumerations in TypeScript\nDESCRIPTION: This snippet establishes the various possible types of activities that can be performed, ranging from creating API keys to approving activities, all represented as string literals.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/approveActivity.mdx#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n`type`: \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | ... ;\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys - TypeScript\nDESCRIPTION: The `stampCreatePrivateKeys` function takes as input `TCreatePrivateKeysBody` and returns a promise that resolves to either undefined or a `TSignedRequest`, aimed at creating private keys.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/classes/TurnkeyApiClient.mdx#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nasync stampCreatePrivateKeys(input: TCreatePrivateKeysBody): Promise<undefined | TSignedRequest> {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: TCreatePolicyResponse Type Alias Definition\nDESCRIPTION: Defines the `TCreatePolicyResponse` type alias.  It combines types from `operations` and `definitions` to represent the full response structure when creating a policy. It specifies the exact location where the type is defined in the project.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TCreatePolicyResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **TCreatePolicyResponse** = `operations`[`\"PublicApiService_CreatePolicy\"`][`\"responses\"`][`\"200\"`][`\"schema\"`][`\"activity\"`][`\"result\"`][`\"createPolicyResult\"`] & `definitions`[`\"v1ActivityResponse\"`]\n\n```\n\n----------------------------------------\n\nTITLE: Defining TGetWalletAccountResponse Type in TypeScript\nDESCRIPTION: TypeScript type alias that defines the response schema for the GET wallet account API endpoint. It extracts the 200 response schema from the PublicApiService_GetWalletAccount operation type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TGetWalletAccountResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TGetWalletAccountResponse = operations[\"PublicApiService_GetWalletAccount\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteSubOrganizationInput Type Alias\nDESCRIPTION: This snippet defines the 'TDeleteSubOrganizationInput' type alias as an object in TypeScript. It serves as a structured input for the deletion of a sub-organization, ensuring that the data adheres to a predefined format. The body property is expected to be of type 'TDeleteSubOrganizationBody'.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteSubOrganizationInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TDeleteSubOrganizationInput = object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUsersResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing a list of users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetUsersResponse {\n  users: definitions[\"v1User\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TGetApiKeyBody Type Alias\nDESCRIPTION: Type alias representing the request body structure for retrieving an API key via the PublicApiService_GetApiKey operation. Extracted from generated TypeScript type definitions for the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetApiKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetApiKeyBody = operations[\"PublicApiService_GetApiKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteWalletsResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that maps to the schema of the 200 response from the DeleteWallets endpoint. This type is used for the response when making POST requests to the /public/v1/submit/delete_wallets endpoint in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteWalletsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteWalletsResponse = operations[\"PublicApiService_DeleteWallets\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Type Enum in TypeScript\nDESCRIPTION: Defines the activity type enumeration including various operation types (create users, sign transaction, etc.).\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteOauthProviders.mdx#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype`: \\\"ACTIVITY_TYPE_CREATE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_INVITATIONS\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_DISABLE_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_API_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_INVITATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_DELETE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_USER_TAGS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION\\\" \\| \\\"ACTIVITY_TYPE_APPROVE_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_REJECT_ACTIVITY\\\" \\| \\\"ACTIVITY_TYPE_DELETE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_ACTIVATE_BILLING_TIER\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PAYMENT_METHOD\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICY_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_ONLY_USERS\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ROOT_QUORUM\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER_TAG\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG\\\" \\| \\\"ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V2\\\" \\| \\\"ACTIVITY_TYPE_ACCEPT_INVITATION_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_USER\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY\\\" \\| \\\"ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS\\\" \\| \\\"ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY\\\" \\| \\\"ACTIVITY_TYPE_RECOVER_USER\\\" \\| \\\"ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\\\" \\| \\\"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH\\\" \\| \\\"ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_WALLET\\\" \\| \\\"ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_IMPORT_PRIVATE_KEY\\\" \\| \\\"ACTIVITY_TYPE_CREATE_POLICIES\\\" \\| \\\"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION\\\" \\| \\\"ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5\\\" \\| \\\"ACTIVITY_TYPE_OAUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_API_KEYS_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION\\\" \\| \\\"ACTIVITY_TYPE_EMAIL_AUTH_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6\\\" \\| \\\"ACTIVITY_TYPE_DELETE_PRIVATE_KEYS\\\" \\| \\\"ACTIVITY_TYPE_DELETE_WALLETS\\\" \\| \\\"ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2\\\" \\| \\\"ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_OTP_AUTH\\\" \\| \\\"ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_WALLET\\\" \\| \\\"ACTIVITY_TYPE_UPDATE_POLICY_V2\\\" \\| \\\"ACTIVITY_TYPE_CREATE_USERS_V3\\\" \\| \\\"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\\\";\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK with Uniswap Example\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and build the project. These steps prepare the environment for running the Uniswap integration example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-uniswap/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-uniswap/\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteAuthenticatorsInput Type in TypeScript\nDESCRIPTION: Type definition for the input object required when making a POST request to the /public/v1/submit/delete_authenticators endpoint in the Turnkey API. It contains a body property of type TDeleteAuthenticatorsBody.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TDeleteAuthenticatorsInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**TDeleteAuthenticatorsInput** = `object`\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Get Authenticators Response Type\nDESCRIPTION: Type alias that specifies the structure of the response for the get authenticators API call, extracted from the generated TypeScript definitions\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetAuthenticatorsResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTGetAuthenticatorsResponse = operations[\"PublicApiService_GetAuthenticators\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Name Result Structure\nDESCRIPTION: This snippet defines the structure for the 'organizationName' result of API responses, intended to provide a human-readable name for an organization. It requires a string input to function properly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_58\n\nLANGUAGE: json\nCODE:\n```\nresult.createReadWriteSessionResult.organizationName\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Defining TDeleteApiKeysInput Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TDeleteApiKeysInput type alias as an object with a single property 'body' of type TDeleteApiKeysBody. It is used for the POST request to delete API keys in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TDeleteApiKeysInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TDeleteApiKeysInput = object\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TDeleteApiKeysBody\n```\n\n----------------------------------------\n\nTITLE: Defining TApproveActivityResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the TApproveActivityResponse type alias. It represents the response schema for the POST /public/v1/submit/approve_activity endpoint in the Turnkey API.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TApproveActivityResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TApproveActivityResponse = operations[\"PublicApiService_ApproveActivity\"][\"responses\"][\"200\"][\"schema\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Result Structures for API Operations in TypeScript\nDESCRIPTION: Defines complex result structures for various API operations including creating API keys, signing transactions, updating policies, and managing wallets. These structures specify the expected response formats for different API endpoints.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWalletAccount.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"createApiKeysResult\": { \"apiKeyId\": \"string\"; };\n\"signRawPayloadResult\": { \"r\": \"string\"; \"s\": \"string\"; \"v\": \"string\"; };\n\"updatePolicyResult\": { \"policyId\": \"string\"; };\n\"updateWalletResult\": { \"walletId\": \"string\"; };\n```\n\n----------------------------------------\n\nTITLE: Intent Type Definitions in TypeScript\nDESCRIPTION: Extensive type definitions for SDK intents including user management, authentication, organization management, and wallet operations. The types define the structure of intent objects used for various operations in the system.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignedTransactionFromActivity.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  acceptInvitationIntent: {\n    authenticator: {\n      attestation: {\n        authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n        clientExtensionResults: {\n          appid: boolean;\n          appidExclude: boolean;\n          credProps: {\n            rk: boolean;\n          };\n        };\n        id: string;\n        rawId: string;\n        response: {\n          attestationObject: string;\n          authenticatorAttachment: null | \"cross-platform\" | \"platform\";\n          clientDataJson: string;\n          transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[];\n        };\n        type: \"public-key\";\n      };\n      authenticatorName: string;\n      challenge: string;\n      userId: string;\n    };\n    invitationId: string;\n    userId: string;\n  }\n  // Additional intent definitions follow similar pattern...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Deletion Intent - TypeScript\nDESCRIPTION: This structure represents the intent to delete authenticators, including identifiers for authenticators and a user ID. It's integral for managing authentication devices linked to users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * v1DeleteAuthenticatorsIntent: object\n *\n * Defined in: packages/http/dist/__generated__/services/coordinator/public/v1/public_api.types.d.ts:1172\n */\nexport interface v1DeleteAuthenticatorsIntent {\n  authenticatorIds: string[]; // A list of Authenticator IDs.\n  userId: string; // Unique identifier for a given User.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS in TypeScript\nDESCRIPTION: This code snippet defines the DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS constant as an array of WalletAccount objects. It is located in the turnkey-helpers.ts file within the @turnkey/sdk-browser package. This variable likely represents a set of default Bitcoin Signet P2WPKH accounts.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/variables/DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **DEFAULT_BITCOIN_SIGNET_P2WPKH_ACCOUNTS**: [`WalletAccount`](../interfaces/WalletAccount.mdx)[]\n```\n\n----------------------------------------\n\nTITLE: Defining v1RecoverUserRequest type\nDESCRIPTION: Defines the structure for a user recovery request, including organization ID, parameters (v1RecoverUserIntent), timestamp, and request type.  Specifies the necessary data for initiating a user recovery process.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\n            v1RecoverUserRequest: {\n                name: \"v1RecoverUserRequest\";\n                schema: {\n                    type: \"object\";\n                    properties: {\n                        organizationId: {\n                            type: \"string\",\n                            description: \"Unique identifier for a given Organization.\",\n                            required: true\n                        },\n                        parameters: {\n                            $ref: \"#/definitions/v1RecoverUserIntent\",\n                            required: true\n                        },\n                        timestampMs: {\n                            type: \"string\",\n                            description: \"Timestamp (in milliseconds) of the request, used to verify liveness of user requests.\",\n                            required: true\n                        },\n                        type: {\n                            type: \"string\",\n                            enum: [\"ACTIVITY_TYPE_RECOVER_USER\"],\n                            required: true\n                        }\n                    },\n                    required: [\"organizationId\", \"parameters\", \"timestampMs\", \"type\"]\n                };\n            },\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TUpdateWalletResponse in TypeScript\nDESCRIPTION: This snippet defines a type alias for the response structure expected from the update wallet operation in the Turnkey SDK. The type combines specific operation responses and activity definitions for type checking and validation purposes.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TUpdateWalletResponse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TUpdateWalletResponse = operations[\\\"PublicApiService_UpdateWallet\\\"]\\[\\\"responses\\\"]\\[\\\"200\\\"]\\[\\\"schema\\\"]\\[\\\"activity\\\"]\\[\\\"result\\\"]\\[\\\"updateWalletResult\\\"]\\] & definitions[\\\"v1ActivityResponse\\\"];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias `TGetUserBody` for a specific API operation in the SDK. It details the path in the project's TypeScript files where this type is defined, specifically pointing to a user data retrieval operation. This alias represents the expected structure for the body of a POST request to the `/public/v1/query/get_user` endpoint.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TGetUserBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"TGetUserBody = operations[\\\"PublicApiService_GetUser\\\"][\\\"parameters\\\"][\\\"body\\\"][\\\"body\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure - JavaScript\nDESCRIPTION: Defines the structure of the 'importWalletIntent', which is used to facilitate the import of wallet accounts along with user details. It requires the userId, walletName, accounts, and an encrypted bundle. The structure is crucial for transaction processing and user identity verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteWallets.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n`importWalletIntent`: \\{ `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Defining a Type Alias for Turnkey API\nDESCRIPTION: This snippet declares a TypeScript type alias, `TInitImportPrivateKeyBody`, which is part of the operations parameters for the 'PublicApiService_InitImportPrivateKey'. This alias is used to define the structure of the request body expected by the relevant POST API endpoint. The definition is autogenerated and ensures consistent usage of expected parameters throughout the codebase.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TInitImportPrivateKeyBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTInitImportPrivateKeyBody = operations[\"PublicApiService_InitImportPrivateKey\"][\"parameters\"][\"body\"][\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Extracting Signatures from Turnkey Activity - TypeScript\nDESCRIPTION: A helper function that processes a signing activity object and extracts signature strings. The function takes an activity parameter containing approval status, timestamps, potential failure information, and activity identification details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetSignaturesFromActivity(activity): object[] {\n  // Parameters:\n  // activity: {\n  //   canApprove: boolean,\n  //   canReject: boolean,\n  //   createdAt: { nanos: string, seconds: string },\n  //   failure?: { \n  //     code?: number,\n  //     details?: object[],\n  //     message?: string \n  //   },\n  //   fingerprint: string,\n  //   id: string\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Wallets in Turnkey SDK (TypeScript)\nDESCRIPTION: Method for retrieving all wallets. Takes an optional input parameter and returns a Promise that resolves to an object containing an array of wallet objects.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWallets(input): Promise<{ wallets: object[]; }>\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Organization using JavaScript Promise\nDESCRIPTION: This code snippet defines a constant `deleteSubOrganization` as a function that takes an `input` parameter and returns a Promise. The Promise resolves to an object representing the activity of deleting a sub-organization, including attributes like `canApprove`, `canReject`, activity timestamps, and a variety of intents related to authentication, organization creation, and other system processes. Dependencies for this function include a working environment capable of executing JavaScript and handling Promises.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/deleteSubOrganization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deleteSubOrganization = (input) => Promise<{\n  activity: {\n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { nanos: string; seconds: string; };\n    failure: {\n      code: number;\n      details: object & object[];\n      message: string;\n    };\n    fingerprint: string;\n    id: string;\n    intent: {\n      acceptInvitationIntent: {\n        authenticator: {\n          attestation: {\n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: { rk: boolean; };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n              clientDataJson: string;\n              transports: ...[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      acceptInvitationIntentV2: {\n        authenticator: {\n          attestation: {\n            attestationObject: string;\n            clientDataJson: string;\n            credentialId: string;\n            transports: (... | ... | ... | ... | ...)[];\n          };\n          authenticatorName: string;\n          challenge: string;\n        };\n        invitationId: string;\n        userId: string;\n      };\n      activateBillingTierIntent: { productId: string; };\n      approveActivityIntent: { fingerprint: string; };\n      createApiKeysIntent: { apiKeys: object[]; userId: string; };\n      createApiKeysIntentV2: { apiKeys: object[]; userId: string; };\n      createApiOnlyUsersIntent: { apiOnlyUsers: object[]; };\n      createAuthenticatorsIntent: { authenticators: object[]; userId: string; };\n      createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; };\n      createInvitationsIntent: { invitations: object[]; };\n      createOauthProvidersIntent: { oauthProviders: object[]; userId: string; };\n      createOrganizationIntent: {\n        organizationName: string;\n        rootAuthenticator: {\n          attestation: {\n            authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n            clientExtensionResults: {\n              appid: boolean;\n              appidExclude: boolean;\n              credProps: { rk: boolean; };\n            };\n            id: string;\n            rawId: string;\n            response: {\n              attestationObject: string;\n              authenticatorAttachment: \"cross-platform\" | \"platform\" | null;\n              clientDataJson: string;\n              transports: ...[];\n            };\n            type: \"public-key\";\n          };\n          authenticatorName: string;\n          challenge: string;\n          userId: string;\n        };\n        rootEmail: string;\n        rootUserId: string;\n      };\n      createOrganizationIntentV2: {\n        organizationName: string;\n        rootAuthenticator: {\n          attestation: {\n            attestationObject: string;\n            clientDataJson: string;\n            credentialId: string;\n            transports: (... | ... | ... | ... | ...)[];\n          };\n          authenticatorName: string;\n          challenge: string;\n        };\n        rootEmail: string;\n        rootUserId: string;\n      };\n      createPoliciesIntent: { policies: object[]; };\n      createPolicyIntent: {\n        effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n        notes: string;\n        policyName: string;\n        selectors: object[];\n      };\n      createPolicyIntentV2: {\n        effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n        notes: string;\n        policyName: string;\n        selectors: object[];\n      };\n      createPolicyIntentV3: {\n        condition: string;\n        consensus: string;\n        effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\";\n        notes: string;\n        policyName: string;\n      };\n      createPrivateKeysIntent: { privateKeys: object[]; };\n      createPrivateKeysIntentV2: { privateKeys: object[]; };\n      createPrivateKeyTagIntent: {\n        privateKeyIds: string[];\n        privateKeyTagName: string;\n      };\n      createReadOnlySessionIntent: {};\n      createReadWriteSessionIntent: {\n        apiKeyName: string;\n        email: string;\n        expirationSeconds: string;\n        targetPublicKey: string;\n      };\n      createReadWriteSessionIntentV2: {\n        apiKeyName: string;\n        expirationSeconds: string;\n        invalidateExisting: boolean;\n        targetPublicKey: string;\n        userId: string;\n      };\n      createSubOrganizationIntent: {\n        name: string;\n        rootAuthenticator: {\n          attestation: {\n            attestationObject: string;\n            clientDataJson: string;\n            credentialId: string;\n            transports: (... | ... | ... | ... | ...)[];\n          };\n          authenticatorName: string;\n          challenge: string;\n        };\n      };\n      createSubOrganizationIntentV2: {\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n      };\n      createSubOrganizationIntentV3: {\n        privateKeys: object[];\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n      };\n      createSubOrganizationIntentV4: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createSubOrganizationIntentV5: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createSubOrganizationIntentV6: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createSubOrganizationIntentV7: {\n        disableEmailAuth: boolean;\n        disableEmailRecovery: boolean;\n        disableOtpEmailAuth: boolean;\n        disableSmsAuth: boolean;\n        rootQuorumThreshold: number;\n        rootUsers: object[];\n        subOrganizationName: string;\n        wallet: {\n          accounts: object[];\n          mnemonicLength: number;\n          walletName: string;\n        };\n      };\n      createUsersIntent: { users: object[]; };\n      createUsersIntentV2: { users: object[]; };\n      createUsersIntentV3: { users: object[]; };\n      createUserTagIntent: {\n        userIds: string[];\n        userTagName: string;\n      };\n      createWalletAccountsIntent: {\n        accounts: object[];\n        walletId: string;\n      };\n      createWalletIntent: {\n        accounts: object[];\n        mnemonicLength: number;\n        walletName: string;\n      };\n      deleteApiKeysIntent: {\n        apiKeyIds: string[];\n        userId: string;\n      };\n      deleteAuthenticatorsIntent: {\n        authenticatorIds: string[];\n        userId: string;\n      };\n      deleteInvitationIntent: { invitationId: string; };\n      deleteOauthProvidersIntent: {\n        providerIds: string[];\n        userId: string;\n      };\n      deleteOrganizationIntent: {\n        organizationId: string;\n      };\n      deletePaymentMethodIntent: {\n        paymentMethodId: string;\n      };\n      deletePolicyIntent: { policyId: string; };\n      deletePrivateKeysIntent: {\n        deleteWithoutExport: boolean;\n        privateKeyIds: string[];\n      };\n      deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; };\n      deleteSubOrganizationIntent: { deleteWithoutExport: boolean; };\n      deleteUsersIntent: { userIds: string[]; };\n      deleteUserTagsIntent: { userTagIds: string[]; };\n      deleteWalletsIntent: {\n        deleteWithoutExport: boolean;\n        walletIds: string[];\n      };\n      disablePrivateKeyIntent: { privateKeyId: string; };\n      emailAuthIntent: {\n        apiKeyName: string;\n        email: string;\n        emailCustomization: {\n          appName: string;\n          logoUrl: string;\n          magicLinkTemplate: string;\n          templateId: string;\n          templateVariables: string;\n        };\n        expirationSeconds: string;\n        invalidateExisting: boolean;\n        sendFromEmailAddress: string;\n        sendFromEmailSenderName: string;\n        targetPublicKey: string;\n      };\n      emailAuthIntentV2: {\n        apiKeyName: string;\n        email: string;\n        emailCustomization: {\n          appName: string;\n          logoUrl: string;\n          magicLinkTemplate: string;\n          templateId: string;\n          templateVariables: string;\n        };\n        expirationSeconds: string;\n        invalidateExisting: boolean;\n        sendFromEmailAddress: string;\n        sendFromEmailSenderName: string;\n        targetPublicKey: string;\n      };\n      exportPrivateKeyIntent: {\n        privateKeyId: string;\n        targetPublicKey: string;\n      };\n      exportWalletAccountIntent: {\n        address: string;\n        targetPublicKey: string;\n      };\n      exportWalletIntent: {\n        language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\";\n        targetPublicKey: string;\n        walletId: string;\n      };\n      importPrivateKeyIntent: {\n        addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\" | \"ADDRESS_FORMAT_SEI\" | \"ADDRESS_FORMAT_XLM\" | \"ADDRESS_FORMAT_DOGE_MAINNET\" | \"ADDRESS_FORMAT_DOGE_TESTNET\" | \"ADDRESS_FORMAT_TON_V3R2\" | \"ADDRESS_FORMAT_TON_V4R2\" | \"ADDRESS_FORMAT_XRP\")[];\n        curv\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultSession Constant in TypeScript\nDESCRIPTION: This snippet defines the DefaultSession constant for session management in the Turnkey SDK. It helps in maintaining a standard reference to the session identifier used throughout the application.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/enumerations/StorageKeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DefaultSession = \"@turnkey/session\";\n```\n\n----------------------------------------\n\nTITLE: Signing Initial User Email Recovery Request in TypeScript\nDESCRIPTION: The function `signInitUserEmailRecovery` is designed to request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request. This request is ready to be POSTed to the Turnkey system. The function takes an `input` of type `TInitUserEmailRecoveryInput` and optional `options` of type `TurnkeyCredentialRequestOptions`. It returns a `Promise` containing a `SignedRequest`. This function depends on the project's pre-defined type aliases and requires proper API and type declarations to function correctly.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signInitUserEmailRecovery.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignInitUserEmailRecovery(input, options?): Promise<SignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Extracting Wallet Encrypted Bundle in TypeScript\nDESCRIPTION: Extracts an encrypted bundle from the iframe, used during the wallet import process. The encryption should be compatible with the Turnkey's Signer enclave.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/IframeStamper.mdx#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nextractWalletEncryptedBundle()\n```\n\n----------------------------------------\n\nTITLE: Specifying TCreateApiOnlyUsersInput Properties in TypeScript\nDESCRIPTION: This code snippet details the properties of the TCreateApiOnlyUsersInput type. It has a single property 'body' of type TCreateApiOnlyUsersBody, which contains the necessary information for creating API-only users.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/type-aliases/TCreateApiOnlyUsersInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbody: TCreateApiOnlyUsersBody\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a credential bundle in JavaScript\nDESCRIPTION: Shows how to use the loginWithBundle method of TurnkeyBrowserClient to authenticate a user with a credential bundle and create a read-write session.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/documents/JavaScript-Browser.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TurnkeyBrowserClient } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst browserClient = new TurnkeyBrowserClient(config);\n\n// Authenticate with a credential bundle from email\nconst session = await browserClient.loginWithBundle({\n  bundle: \"credential-bundle-from-email\",\n  expirationSeconds: \"900\", // 15 minutes\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TOtpAuthInput Type Alias in TypeScript\nDESCRIPTION: Defines the TOtpAuthInput type alias as an object with a body property of type TOtpAuthBody. This type is used for OTP (One-Time Password) authentication input in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TOtpAuthInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTOtpAuthInput = object\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Return Structure in TypeScript\nDESCRIPTION: This TypeScript snippet defines the return type of a Promise that handles various intents related to user and organization actions in the SDK. Dependencies include the TypeScript language and an understanding of basic object structures. Key parameters represent different intents like invitation acceptance, organization creation, and policy intent, among others. Expected inputs and outputs are detailed structured objects that align with the intents. Limitations include a dependency on the overall SDK environment for the successful handling of these intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/getActivity.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`Promise`<\\{ `activity`: \\{ `canApprove`: `boolean`; `canReject`: `boolean`; `createdAt`: \\{ `nanos`: `string`; `seconds`: `string`; \\}; `failure`: \\{ `code`: `number`; `details`: `object` & `object`[]; `message`: `string`; \\}; `fingerprint`: `string`; `id`: `string`; `intent`: \\{ `acceptInvitationIntent`: \\{ `authenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `acceptInvitationIntentV2`: \\{ `authenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `invitationId`: `string`; `userId`: `string`; \\}; `activateBillingTierIntent`: \\{ `productId`: `string`; \\}; `approveActivityIntent`: \\{ `fingerprint`: `string`; \\}; `createApiKeysIntent`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiKeysIntentV2`: \\{ `apiKeys`: `object`[]; `userId`: `string`; \\}; `createApiOnlyUsersIntent`: \\{ `apiOnlyUsers`: `object`[]; \\}; `createAuthenticatorsIntent`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createAuthenticatorsIntentV2`: \\{ `authenticators`: `object`[]; `userId`: `string`; \\}; `createInvitationsIntent`: \\{ `invitations`: `object`[]; \\}; `createOauthProvidersIntent`: \\{ `oauthProviders`: `object`[]; `userId`: `string`; \\}; `createOrganizationIntent`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientExtensionResults`: \\{ `appid`: `boolean`; `appidExclude`: `boolean`; `credProps`: \\{ `rk`: `boolean`; \\}; \\}; `id`: `string`; `rawId`: `string`; `response`: \\{ `attestationObject`: `string`; `authenticatorAttachment`: \\\"cross-platform\\\" \\| \\\"platform\\\" \\| `null`; `clientDataJson`: `string`; `transports`: ...[]; \\}; `type`: \\\"public-key\\\"; \\}; `authenticatorName`: `string`; `challenge`: `string`; `userId`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createOrganizationIntentV2`: \\{ `organizationName`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; `rootEmail`: `string`; `rootUserId`: `string`; \\}; `createPoliciesIntent`: \\{ `policies`: `object`[]; \\}; `createPolicyIntent`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV2`: \\{ `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; `selectors`: `object`[]; \\}; `createPolicyIntentV3`: \\{ `condition`: `string`; `consensus`: `string`; `effect`: \\\"EFFECT_ALLOW\\\" \\| \\\"EFFECT_DENY\\\"; `notes`: `string`; `policyName`: `string`; \\}; `createPrivateKeysIntent`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeysIntentV2`: \\{ `privateKeys`: `object`[]; \\}; `createPrivateKeyTagIntent`: \\{ `privateKeyIds`: `string`[]; `privateKeyTagName`: `string`; \\}; `createReadOnlySessionIntent`: \\{\\}; `createReadWriteSessionIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `expirationSeconds`: `string`; `targetPublicKey`: `string`; \\}; `createReadWriteSessionIntentV2`: \\{ `apiKeyName`: `string`; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `targetPublicKey`: `string`; `userId`: `string`; \\}; `createSubOrganizationIntent`: \\{ `name`: `string`; `rootAuthenticator`: \\{ `attestation`: \\{ `attestationObject`: `string`; `clientDataJson`: `string`; `credentialId`: `string`; `transports`: (... \\| ... \\| ... \\| ... \\| ...)[]; \\}; `authenticatorName`: `string`; `challenge`: `string`; \\}; \\}; `createSubOrganizationIntentV2`: \\{ `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV3`: \\{ `privateKeys`: `object`[]; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; \\}; `createSubOrganizationIntentV4`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV5`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV6`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createSubOrganizationIntentV7`: \\{ `disableEmailAuth`: `boolean`; `disableEmailRecovery`: `boolean`; `disableOtpEmailAuth`: `boolean`; `disableSmsAuth`: `boolean`; `rootQuorumThreshold`: `number`; `rootUsers`: `object`[]; `subOrganizationName`: `string`; `wallet`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; \\}; `createUsersIntent`: \\{ `users`: `object`[]; \\}; `createUsersIntentV2`: \\{ `users`: `object`[]; \\}; `createUsersIntentV3`: \\{ `users`: `object`[]; \\}; `createUserTagIntent`: \\{ `userIds`: `string`[]; `userTagName`: `string`; \\}; `createWalletAccountsIntent`: \\{ `accounts`: `object`[]; `walletId`: `string`; \\}; `createWalletIntent`: \\{ `accounts`: `object`[]; `mnemonicLength`: `number`; `walletName`: `string`; \\}; `deleteApiKeysIntent`: \\{ `apiKeyIds`: `string`[]; `userId`: `string`; \\}; `deleteAuthenticatorsIntent`: \\{ `authenticatorIds`: `string`[]; `userId`: `string`; \\}; `deleteInvitationIntent`: \\{ `invitationId`: `string`; \\}; `deleteOauthProvidersIntent`: \\{ `providerIds`: `string`[]; `userId`: `string`; \\}; `deleteOrganizationIntent`: \\{ `organizationId`: `string`; \\}; `deletePaymentMethodIntent`: \\{ `paymentMethodId`: `string`; \\}; `deletePolicyIntent`: \\{ `policyId`: `string`; \\}; `deletePrivateKeysIntent`: \\{ `deleteWithoutExport`: `boolean`; `privateKeyIds`: `string`[]; \\}; `deletePrivateKeyTagsIntent`: \\{ `privateKeyTagIds`: `string`[]; \\}; `deleteSubOrganizationIntent`: \\{ `deleteWithoutExport`: `boolean`; \\}; `deleteUsersIntent`: \\{ `userIds`: `string`[]; \\}; `deleteUserTagsIntent`: \\{ `userTagIds`: `string`[]; \\}; `deleteWalletsIntent`: \\{ `deleteWithoutExport`: `boolean`; `walletIds`: `string`[]; \\}; `disablePrivateKeyIntent`: \\{ `privateKeyId`: `string`; \\}; `emailAuthIntent`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `emailAuthIntentV2`: \\{ `apiKeyName`: `string`; `email`: `string`; `emailCustomization`: \\{ `appName`: `string`; `logoUrl`: `string`; `magicLinkTemplate`: `string`; `templateId`: `string`; `templateVariables`: `string`; \\}; `expirationSeconds`: `string`; `invalidateExisting`: `boolean`; `sendFromEmailAddress`: `string`; `sendFromEmailSenderName`: `string`; `targetPublicKey`: `string`; \\}; `exportPrivateKeyIntent`: \\{ `privateKeyId`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletAccountIntent`: \\{ `address`: `string`; `targetPublicKey`: `string`; \\}; `exportWalletIntent`: \\{ `language`: \\\"MNEMONIC_LANGUAGE_ENGLISH\\\" \\| \\\"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\\\" \\| \\\"MNEMONIC_LANGUAGE_CZECH\\\" \\| \\\"MNEMONIC_LANGUAGE_FRENCH\\\" \\| \\\"MNEMONIC_LANGUAGE_ITALIAN\\\" \\| \\\"MNEMONIC_LANGUAGE_JAPANESE\\\" \\| \\\"MNEMONIC_LANGUAGE_KOREAN\\\" \\| \\\"MNEMONIC_LANGUAGE_SPANISH\\\"; `targetPublicKey`: `string`; `walletId`: `string`; \\}; `importPrivateKeyIntent`: \\{ `addressFormats`: (\\\"ADDRESS_FORMAT_UNCOMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_COMPRESSED\\\" \\| \\\"ADDRESS_FORMAT_ETHEREUM\\\" \\| \\\"ADDRESS_FORMAT_SOLANA\\\" \\| \\\"ADDRESS_FORMAT_COSMOS\\\" \\| \\\"ADDRESS_FORMAT_TRON\\\" \\| \\\"ADDRESS_FORMAT_SUI\\\" \\| \\\"ADDRESS_FORMAT_APTOS\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH\\\" \\| \\\"ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR\\\" \\| \\\"ADDRESS_FORMAT_SEI\\\" \\| \\\"ADDRESS_FORMAT_XLM\\\" \\| \\\"ADDRESS_FORMAT_DOGE_MAINNET\\\" \\| \\\"ADDRESS_FORMAT_DOGE_TESTNET\\\" \\| \\\"ADDRESS_FORMAT_TON_V3R2\\\" \\| \\\"ADDRESS_FORMAT_TON_V4R2\\\" \\| \\\"ADDRESS_FORMAT_XRP\\\")[]; `curve`: \\\"CURVE_SECP256K1\\\" \\| \\\"CURVE_ED25519\\\"; `encryptedBundle`: `string`; `; }...; }...;\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Types and Status Codes in TypeScript\nDESCRIPTION: Enumerates possible activity types and status codes for the Turnkey API. This includes operations like creating API keys, users, and policies, as well as various authentication and transaction signing activities.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updateRootQuorum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"status\": \"ACTIVITY_STATUS_CREATED\" | \"ACTIVITY_STATUS_PENDING\" | \"ACTIVITY_STATUS_COMPLETED\" | \"ACTIVITY_STATUS_FAILED\" | \"ACTIVITY_STATUS_CONSENSUS_NEEDED\" | \"ACTIVITY_STATUS_REJECTED\";\n\"type\": \"ACTIVITY_TYPE_CREATE_API_KEYS\" | \"ACTIVITY_TYPE_CREATE_USERS\" | \"ACTIVITY_TYPE_CREATE_PRIVATE_KEYS\" | \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD\" | ... | \"ACTIVITY_TYPE_INIT_OTP_AUTH_V2\";\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown\nDESCRIPTION: This snippet shows the changelog format used to document version history for the @turnkey/encoding package. It includes version numbers, change types (Minor, Patch), and descriptions of changes made in each release.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/encoding/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @turnkey/encoding\n\n## 0.4.0\n\n### Minor Changes\n\n- added hexToAscii function, useful for converting a raw hex string to a (wallet) mnemonic\n\n## 0.3.0\n\n### Minor Changes\n\n- 93666ff: turnkey/crypto standard HPKE encryption, first major release. Allows for programmatic importing in environments like node. Moved some encoding helper functions to turnkey/encoding\n\n## 0.2.1\n\n### Patch Changes\n\n- 2d7e5a9: include additional utility functions\n\n## 0.2.0\n\n### Minor Changes\n\n- fac7770: Add uint8ArrayFromHexstring and drop language saying this is an internal package\n\n## 0.1.0\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Defining TGetOauthProvidersBody Type Alias in Typescript\nDESCRIPTION: The TGetOauthProvidersBody type alias is constructed by omitting the 'organizationId' parameter from the 'PublicApiService_GetOauthProviders' operation's body parameters and merging it with queryOverrideParams. This composite type helps in structuring requests that interact with Oauth providers while adhering to the expected inputs for the Turnkey SDK API. Dependencies include the operations and types defined within the Turnkey SDK context.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TGetOauthProvidersBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TGetOauthProvidersBody = Omit<operations[\"PublicApiService_GetOauthProviders\"][\"parameters\"][\"body\"][\"body\"], \"organizationId\"> & queryOverrideParams;\n```\n\n----------------------------------------\n\nTITLE: Defining v1InitUserEmailRecoveryResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure for the result of initiating a user email recovery. It contains a single property for the user ID of the recovered account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_109\n\nLANGUAGE: TypeScript\nCODE:\n```\nv1InitUserEmailRecoveryResult: object\n{\n  userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Stamp Sign Raw Payload with Turnkey SDK\nDESCRIPTION: This function `stampSignRawPayload` creates a signed request for signing a raw payload using the Turnkey SDK. It takes `TSignRawPayloadBody` as input and returns a Promise that resolves to either `undefined` or a `TSignedRequest`. The function is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\n\n> **stampSignRawPayload**(`input`): `Promise`\\<`undefined` | [`TSignedRequest`](../type-aliases/TSignedRequest.mdx)\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:2411](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L2411)\n\n#### Parameters\n\n##### input\n\n`TSignRawPayloadBody`\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Invitation with Turnkey SDK TypeScript\nDESCRIPTION: This function handles the deletion of invitations and accepts `TDeleteInvitationBody` as the input. It returns a Promise with a combined object, facilitating the management of user invitations in Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyWalletClient.mdx#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **deleteInvitation**(\\\"input\\\"): `Promise`\\<`object` & `object`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Result Types\nDESCRIPTION: These snippets define the types for the results returned after executing the corresponding intents. Each result type contains information about the outcome of the operation, such as created IDs, addresses, or error messages. These snippets demonstrate various result structures based on the type of operation performed.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/deleteAuthenticators.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`result`: { `acceptInvitationResult`: { `invitationId`: `string`; `userId`: `string`; }; `activateBillingTierResult`: { `productId`: `string`; }; `createApiKeysResult`: { `apiKeyIds`: `string`[]; }; `createApiOnlyUsersResult`: { `userIds`: `string`[]; }; `createAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `createInvitationsResult`: { `invitationIds`: `string`[]; }; `createOauthProvidersResult`: { `providerIds`: `string`[]; }; `createOrganizationResult`: { `organizationId`: `string`; }; `createPoliciesResult`: { `policyIds`: `string`[]; }; `createPolicyResult`: { `policyId`: `string`; }; `createPrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `createPrivateKeysResultV2`: { `privateKeys`: `object`[]; }; `createPrivateKeyTagResult`: { `privateKeyIds`: `string`[]; `privateKeyTagId`: `string`; }; `createReadOnlySessionResult`: { `organizationId`: `string`; `organizationName`: `string`; `session`: `string`; `sessionExpiry`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResult`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createReadWriteSessionResultV2`: { `apiKeyId`: `string`; `credentialBundle`: `string`; `organizationId`: `string`; `organizationName`: `string`; `userId`: `string`; `username`: `string`; }; `createSubOrganizationResult`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV3`: { `privateKeys`: `object`[]; `rootUserIds`: `string`[]; `subOrganizationId`: `string`; }; `createSubOrganizationResultV4`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV5`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV6`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createSubOrganizationResultV7`: { `rootUserIds`: `string`[]; `subOrganizationId`: `string`; `wallet`: { `addresses`: `string`[]; `walletId`: `string`; }; }; `createUsersResult`: { `userIds`: `string`[]; }; `createUserTagResult`: { `userIds`: `string`[]; `userTagId`: `string`; }; `createWalletAccountsResult`: { `addresses`: `string`[]; }; `createWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `deleteApiKeysResult`: { `apiKeyIds`: `string`[]; }; `deleteAuthenticatorsResult`: { `authenticatorIds`: `string`[]; }; `deleteInvitationResult`: { `invitationId`: `string`; }; `deleteOauthProvidersResult`: { `providerIds`: `string`[]; }; `deleteOrganizationResult`: { `organizationId`: `string`; }; `deletePaymentMethodResult`: { `paymentMethodId`: `string`; }; `deletePolicyResult`: { `policyId`: `string`; }; `deletePrivateKeysResult`: { `privateKeyIds`: `string`[]; }; `deletePrivateKeyTagsResult`: { `privateKeyIds`: `string`[]; `privateKeyTagIds`: `string`[]; }; `deleteSubOrganizationResult`: { `subOrganizationUuid`: `string`; }; `deleteUsersResult`: { `userIds`: `string`[]; }; `deleteUserTagsResult`: { `userIds`: `string`[]; `userTagIds`: `string`[]; }; `deleteWalletsResult`: { `walletIds`: `string`[]; }; `disablePrivateKeyResult`: { `privateKeyId`: `string`; }; `emailAuthResult`: { `apiKeyId`: `string`; `userId`: `string`; }; `exportPrivateKeyResult`: { `exportBundle`: `string`; `privateKeyId`: `string`; }; `exportWalletAccountResult`: { `address`: `string`; `exportBundle`: `string`; }; `exportWalletResult`: { `exportBundle`: `string`; `walletId`: `string`; }; `importPrivateKeyResult`: { `addresses`: `object`[]; `privateKeyId`: `string`; }; `importWalletResult`: { `addresses`: `string`[]; `walletId`: `string`; }; `initImportPrivateKeyResult`: { `importBundle`: `string`; }; `initImportWalletResult`: { `importBundle`: `string`; }; `initOtpAuthResult`: { `otpId`: `string`; }; `initOtpAuthResultV2`: { `otpId`: `string`; };\n```\n\n----------------------------------------\n\nTITLE: Defining signGetWhoami Function in Turnkey SDK\nDESCRIPTION: This TypeScript code defines the `signGetWhoami` function. It's an asynchronous function that takes an input of type `TGetWhoamiInput` and optional `TurnkeyCredentialRequestOptions`. It returns a Promise that resolves to a `SignedRequest` object, effectively creating a signed request ready to be sent to Turnkey for identity verification.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/signGetWhoami.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`const` **signGetWhoami**: (`input`, `options`?) => `Promise`\\<[`SignedRequest`](../../../../../http/index/type-aliases/SignedRequest.mdx)\\>\n\nDefined in: packages/http/dist/\\_\\_generated\\_\\_/services/coordinator/public/v1/public\\_api.fetcher.d.ts:4014\n\nRequest a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetUsersRequest Interface in TypeScript\nDESCRIPTION: Defines the structure for a request to get multiple users, including organizationId.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetUsersRequest {\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Read Write Session in TurnkeyBrowserClient\nDESCRIPTION: This method allows you to create a read-write session using the TurnkeyBrowserClient. It takes a `TCreateReadWriteSessionBody` as input and returns a Promise that resolves to an object representing the created session.  It is inherited from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyPasskeyClient.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **createReadWriteSession**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1188](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1188)\n\n#### Parameters\n\n##### input\n\n`TCreateReadWriteSessionBody`\n\n#### Returns\n\n`Promise`\\<`object` & `object`\\>\n\n#### Inherited from\n\n[`TurnkeyBrowserClient`](TurnkeyBrowserClient.mdx).[`createReadWriteSession`](TurnkeyBrowserClient.mdx#createreadwritesession)\n```\n\n----------------------------------------\n\nTITLE: Define v1CreateApiKeysIntent Type\nDESCRIPTION: Defines the structure for the `v1CreateApiKeysIntent` object, representing the intent to create API keys. It contains an array of `apiApiKeyParams` and a `userId`. This intent is likely passed as part of a request to the Coordinator service to create API keys for a specific user.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typedef {object} v1CreateApiKeysIntent\n * @property {definitions[\"apiApiKeyParams\"][]} apiKeys A list of API Keys.\n * @property {string} userId Unique identifier for a given User.\n */\n```\n\n----------------------------------------\n\nTITLE: Define defaultBitcoinMainnetP2SHAccountAtIndex Function (TypeScript)\nDESCRIPTION: This function derives a Bitcoin mainnet P2SH account at a specific index.  It takes a numerical `pathIndex` as input and returns a `WalletAccount` object, allowing the user to manage Bitcoin accounts derived from a specific path.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/functions/defaultBitcoinMainnetP2SHAccountAtIndex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Function: defaultBitcoinMainnetP2SHAccountAtIndex()\n *\n * > **defaultBitcoinMainnetP2SHAccountAtIndex**(`pathIndex`): [`WalletAccount`](../interfaces/WalletAccount.mdx)\n *\n * Defined in: [packages/sdk-browser/src/turnkey-helpers.ts:158](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/turnkey-helpers.ts#L158)\n *\n * ## Parameters\n *\n * ### pathIndex\n *\n * `number`\n *\n * ## Returns\n *\n * [`WalletAccount`](../interfaces/WalletAccount.mdx)\n```\n\n----------------------------------------\n\nTITLE: Using getReadWriteSession in TurnkeyBrowserSDK\nDESCRIPTION: Retrieves an auth bundle and its expiration if there is a valid, current read-session. This auth bundle can be used with an iframeStamper to create a read+write session for more privileged operations.\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/documents/docs.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst config = {\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n};\n\n// Create a client instance\nconst turnkeySDK = new Turnkey(config);\n\n// gets auth bundle to be used with an iframeStamperto create a read write session\nconst readWriteSession = await turnkeySDK.getReadWriteSession();\n```\n\n----------------------------------------\n\nTITLE: Defining TRemoveOrganizationFeatureInput Type in TypeScript\nDESCRIPTION: Type definition for TRemoveOrganizationFeatureInput, which is an object type with a body property of type TRemoveOrganizationFeatureBody. This type is used for removing organization features in the Turnkey SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TRemoveOrganizationFeatureInput.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nTRemoveOrganizationFeatureInput = object\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tags in Turnkey Browser SDK\nDESCRIPTION: Method to create tags for private keys with specified input parameters. Returns a Promise resolving to an object containing the created private key tags' details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePrivateKeyTag(input: TCreatePrivateKeyTagBody): Promise<object & object>\n```\n\n----------------------------------------\n\nTITLE: Hybrid Public Key Encryption (HPKE) Function Signature in TypeScript\nDESCRIPTION: Function signature for hpkeEncrypt which encrypts data using the HPKE standard (RFC 9180). It takes HpkeEncryptParams including plain text, encapsulated key, and sender private key, and returns encrypted data as a Uint8Array.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/crypto/functions/hpkeEncrypt.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**hpkeEncrypt**(`params`): `Uint8Array`\n```\n\n----------------------------------------\n\nTITLE: TDeleteUsersInput Properties (TypeScript)\nDESCRIPTION: This snippet describes the `body` property within the `TDeleteUsersInput` type alias. The `body` property is of type `TDeleteUsersBody` and contains the request body for the delete users API call.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeySDKApiTypes/type-aliases/TDeleteUsersInput.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * ### body\n *\n * > **body**: [`TDeleteUsersBody`](TDeleteUsersBody.mdx)\n *\n * Defined in: [packages/sdk-server/src/__generated__/sdk_api_types.ts:555](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-server/src/__generated__/sdk_api_types.ts#L555)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining ReadWriteSession Interface in TypeScript\nDESCRIPTION: The TypeScript interface `ReadWriteSession` encapsulates properties crucial for managing an expiring read-write session, including `credentialBundle` and `expiry`. The `credentialBundle` is a string generated by specific methods in the SDK classes to handle read-write operations. The `expiry` property represents the session's expiry time in seconds since the Unix epoch. These properties aid in managing session life-cycle efficiently when interacting with the iFrame client.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/interfaces/ReadWriteSession.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadWriteSession {\n  // Represents the credential bundle generated by specific SDK client methods\n  credentialBundle: string;\n\n  // The expiry time of the credential bundle\n  expiry: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys Endpoint in Turnkey API - TypeScript\nDESCRIPTION: Documentation for the POST endpoint to create new private keys in the Turnkey API. It specifies the endpoint path, HTTP method, and requires a TCreatePrivateKeysInput parameter.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createPrivateKeys.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nCreate Private Keys\n\nCreate new Private Keys\n\n`POST /public/v1/submit/create_private_keys`\n\n## Parameters\n\n### input\n\n[`TCreatePrivateKeysInput`](../type-aliases/TCreatePrivateKeysInput.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining v1GetWalletsResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for a response containing a list of wallets.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react-native/index/type-aliases/TurnkeyApiTypes.mdx#2025-04-16_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface v1GetWalletsResponse {\n  wallets: definitions[\"v1Wallet\"][];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Intent - JavaScript\nDESCRIPTION: This intent updates an existing user's information, including email, username, phone number, and associated user tags.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/updateUserTag.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdateUserIntent: { userEmail: `string`; userId: `string`; userName: `string`; userPhoneNumber: `string`; userTagIds: `string`[]; };\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Authentication\nDESCRIPTION: Example of using Passkey client for user authentication and wallet management\nSOURCE: https://github.com/tkhq/sdk/blob/main/packages/sdk-browser/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst passkeyClient = turnkey.passkeyClient();\n\n// User will be prompted to login with their passkey\nawait passkeyClient.login();\n\n// Make authenticated requests to Turnkey API, such as listing user's wallets\nconst walletsResponse = await passkeyClient.getWallets();\n```\n\n----------------------------------------\n\nTITLE: Authenticator Intent Interface Type Definition\nDESCRIPTION: Type definition for authenticator intent used in user recovery, including attestation object, client data, and transport types.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/functions/getSignaturesFromActivity.mdx#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n{ attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Organization - TypeScript\nDESCRIPTION: This function deletes sub-organizations using TDeleteSubOrganizationBody input parameter and relies on TSignedRequest for its promise-based output. Proper input data is vital for operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nstampDeleteSubOrganization(input): Promise<undefined | TSignedRequest>\n```\n\n----------------------------------------\n\nTITLE: Defining User Recovery Response Structures\nDESCRIPTION: This snippet specifies the response structure for user recovery processes, detailing the identifiers that will be returned when initiating a user email recovery or recovering a user account.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`initUserEmailRecoveryResult`: \\{ `userId`: `string`; \\}; `recoverUserResult`: \\{ `authenticatorId`: `string`[]; \\};\n```\n\n----------------------------------------\n\nTITLE: Declaring Auth React Component Type\nDESCRIPTION: Type declaration for the Auth component, defining it as a React functional component that accepts AuthProps as its parameter type.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-react/index/variables/Auth.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Auth: React.FC<AuthProps>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Set Response Structure\nDESCRIPTION: This snippet outlines the structure of the response after setting payment methods, detailing the required attributes that the API will return post an operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/setOrganizationFeature.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n`setPaymentMethodResult`: \\{ `cardHolderEmail`: `string`; `cardHolderName`: `string`; `lastFour`: `string`; \\};\n```\n\n----------------------------------------\n\nTITLE: Exporting Wallet in Turnkey SDK\nDESCRIPTION: This function exports a wallet. It accepts a `TExportWalletBody` object as input and returns a Promise resolving to an object. It inherits functionality from `TurnkeyBrowserClient`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyIframeClient.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> **exportWallet**(`input`): `Promise`\\<`object` & `object`\\>\n\nDefined in: [packages/sdk-browser/src/\\_\\_generated\\_\\_/sdk-client-base.ts:1885](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L1885)\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication in Browser SDK\nDESCRIPTION: Authenticates a user using a passkey, designed to be used with a passkeyStamper for secure login.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/index/classes/TurnkeyBrowserClient.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithPasskey(params: LoginWithPasskeyParams): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Import Wallet Intent Structure\nDESCRIPTION: This snippet defines the structure for the import wallet intent, including properties necessary for specifying account details and the encrypted wallet bundle. It's intended for use when a user wants to import an existing wallet into the SDK.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/createInvitations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimportWalletIntent: { accounts: object[]; encryptedBundle: string; userId: string; walletName: string; };\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for TApproveActivityBody - TypeScript\nDESCRIPTION: This snippet defines a type alias named 'TApproveActivityBody' that specifies the structure of the request body needed for the 'approve_activity' API endpoint in the Turnkey SDK. It refers to a deeply nested type structure from the SDK which represents the parameters for this operation.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/type-aliases/TApproveActivityBody.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type TApproveActivityBody = operations['PublicApiService_ApproveActivity']['parameters']['body']['body'];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication and Wallet Intent Types\nDESCRIPTION: Type definitions for complex authentication and wallet-related intent structures, including OTP, OAuth, and import/export operations\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/oauth.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n`importWalletIntent`: { `accounts`: `object`[]; `encryptedBundle`: `string`; `userId`: `string`; `walletName`: `string`; }\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Result Structure - TypeScript\nDESCRIPTION: Defines the structure for the OAuth Result which includes apiKeyId, credentialBundle, and userId, all as strings. This structure is essential for managing OAuth authentication responses.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createApiOnlyUsers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noauthResult: { apiKeyId: string; credentialBundle: string; userId: string; };\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Turnkey SDK Project\nDESCRIPTION: Commands to clone the Turnkey SDK repository, install dependencies, and build the project. This prepares the environment for running the Movement transaction example.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/with-movement/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tkhq/sdk\n$ cd sdk/\n$ corepack enable  # Install `pnpm`\n$ pnpm install -r  # Install dependencies\n$ pnpm run build-all  # Compile source code\n$ cd examples/with-movement/\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Tag with Promises - TypeScript\nDESCRIPTION: The `createPrivateKeyTag` function is designed to return a promise that resolves with detailed activity information, including permissions, identifiers, and multiple intents. It requires an input object that adheres to a specified structure presenting various authenticator and intent details.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/createPrivateKeyTag.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createPrivateKeyTag(input): Promise<{ activity: { canApprove: boolean; canReject: boolean; createdAt: { nanos: string; seconds: string; }; failure: { code: number; details: object & object[]; message: string; }; fingerprint: string; id: string; intent: { acceptInvitationIntent: { authenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; invitationId: string; userId: string; }; acceptInvitationIntentV2: { authenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; invitationId: string; userId: string; }; activateBillingTierIntent: { productId: string; }; approveActivityIntent: { fingerprint: string; }; createApiKeysIntent: { apiKeys: object[]; userId: string; }; createApiKeysIntentV2: { apiKeys: object[]; userId: string; }; createApiOnlyUsersIntent: { apiOnlyUsers: object[]; }; createAuthenticatorsIntent: { authenticators: object[]; userId: string; }; createAuthenticatorsIntentV2: { authenticators: object[]; userId: string; }; createInvitationsIntent: { invitations: object[]; }; createOauthProvidersIntent: { oauthProviders: object[]; userId: string; }; createOrganizationIntent: { organizationName: string; rootAuthenticator: { attestation: { authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientExtensionResults: { appid: boolean; appidExclude: boolean; credProps: { rk: ...; }; }; id: string; rawId: string; response: { attestationObject: string; authenticatorAttachment: null | \"cross-platform\" | \"platform\"; clientDataJson: string; transports: ...[]; }; type: \"public-key\"; }; authenticatorName: string; challenge: string; userId: string; }; rootEmail: string; rootUserId: string; }; createOrganizationIntentV2: { organizationName: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; rootEmail: string; rootUserId: string; }; createPoliciesIntent: { policies: object[]; }; createPolicyIntent: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV2: { effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; selectors: object[]; }; createPolicyIntentV3: { condition: string; consensus: string; effect: \"EFFECT_ALLOW\" | \"EFFECT_DENY\"; notes: string; policyName: string; }; createPrivateKeysIntent: { privateKeys: object[]; }; createPrivateKeysIntentV2: { privateKeys: object[]; }; createPrivateKeyTagIntent: { privateKeyIds: string[]; privateKeyTagName: string; }; createReadOnlySessionIntent: {}; createReadWriteSessionIntent: { apiKeyName: string; email: string; expirationSeconds: string; targetPublicKey: string; }; createReadWriteSessionIntentV2: { apiKeyName: string; expirationSeconds: string; invalidateExisting: boolean; targetPublicKey: string; userId: string; }; createSubOrganizationIntent: { name: string; rootAuthenticator: { attestation: { attestationObject: string; clientDataJson: string; credentialId: string; transports: (\"AUTHENTICATOR_TRANSPORT_BLE\" | \"AUTHENTICATOR_TRANSPORT_INTERNAL\" | \"AUTHENTICATOR_TRANSPORT_NFC\" | \"AUTHENTICATOR_TRANSPORT_USB\" | \"AUTHENTICATOR_TRANSPORT_HYBRID\")[]; }; authenticatorName: string; challenge: string; }; }; createSubOrganizationIntentV2: { rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV3: { privateKeys: object[]; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; }; createSubOrganizationIntentV4: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV5: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV6: { disableEmailAuth: boolean; disableEmailRecovery: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createSubOrganizationIntentV7: { disableEmailAuth: boolean; disableEmailRecovery: boolean; disableOtpEmailAuth: boolean; disableSmsAuth: boolean; rootQuorumThreshold: number; rootUsers: object[]; subOrganizationName: string; wallet: { accounts: object[]; mnemonicLength: number; walletName: string; }; }; createUsersIntent: { users: object[]; }; createUsersIntentV2: { users: object[]; }; createUsersIntentV3: { users: object[]; }; createUserTagIntent: { userIds: string[]; userTagName: string; }; createWalletAccountsIntent: { accounts: object[]; walletId: string; }; createWalletIntent: { accounts: object[]; mnemonicLength: number; walletName: string; }; deleteApiKeysIntent: { apiKeyIds: string[]; userId: string; }; deleteAuthenticatorsIntent: { authenticatorIds: string[]; userId: string; }; deleteInvitationIntent: { invitationId: string; }; deleteOauthProvidersIntent: { providerIds: string[]; userId: string; }; deleteOrganizationIntent: { organizationId: string; }; deletePaymentMethodIntent: { paymentMethodId: string; }; deletePolicyIntent: { policyId: string; }; deletePrivateKeysIntent: { deleteWithoutExport: boolean; privateKeyIds: string[]; }; deletePrivateKeyTagsIntent: { privateKeyTagIds: string[]; }; deleteSubOrganizationIntent: { deleteWithoutExport: boolean; }; deleteUsersIntent: { userIds: string[]; }; deleteUserTagsIntent: { userTagIds: string[]; }; deleteWalletsIntent: { deleteWithoutExport: boolean; walletIds: string[]; }; disablePrivateKeyIntent: { privateKeyId: string; }; emailAuthIntent: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; emailAuthIntentV2: { apiKeyName: string; email: string; emailCustomization: { appName: string; logoUrl: string; magicLinkTemplate: string; templateId: string; templateVariables: string; }; expirationSeconds: string; invalidateExisting: boolean; sendFromEmailAddress: string; sendFromEmailSenderName: string; targetPublicKey: string; }; exportPrivateKeyIntent: { privateKeyId: string; targetPublicKey: string; }; exportWalletAccountIntent: { address: string; targetPublicKey: string; }; exportWalletIntent: { language: \"MNEMONIC_LANGUAGE_ENGLISH\" | \"MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE\" | \"MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE\" | \"MNEMONIC_LANGUAGE_CZECH\" | \"MNEMONIC_LANGUAGE_FRENCH\" | \"MNEMONIC_LANGUAGE_ITALIAN\" | \"MNEMONIC_LANGUAGE_JAPANESE\" | \"MNEMONIC_LANGUAGE_KOREAN\" | \"MNEMONIC_LANGUAGE_SPANISH\"; targetPublicKey: string; walletId: string; }; importPrivateKeyIntent: { addressFormats: (\"ADDRESS_FORMAT_UNCOMPRESSED\" | \"ADDRESS_FORMAT_COMPRESSED\" | \"ADDRESS_FORMAT_ETHEREUM\" | \"ADDRESS_FORMAT_SOLANA\" | \"ADDRESS_FORMAT_COSMOS\" | \"ADDRESS_FORMAT_TRON\" | \"ADDRESS_FORMAT_SUI\" | \"ADDRESS_FORMAT_APTOS\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH\" | \"ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR\")[]; };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File for Turnkey Credentials\nDESCRIPTION: Command to copy the example environment file to create a local configuration file for Turnkey API keys and other required settings.\nSOURCE: https://github.com/tkhq/sdk/blob/main/examples/sweeper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Initializing Turnkey Client\nDESCRIPTION: This snippet demonstrates how to initialize a Turnkey client instance with the required parameters such as API base URL and optional relying party ID for Passkey authentication. It imports the Turnkey module from the SDK package.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-browser/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Turnkey } from \"@turnkey/sdk-browser\";\n\nconst turnkey = new Turnkey({\n  apiBaseUrl: \"https://api.turnkey.com\",\n  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,\n  // Optional: Your relying party ID - for use with Passkey authentication\n  rpId: process.env.TURNKEY_RP_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining updatePolicy Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the updatePolicy function. It takes an input parameter and returns a Promise with a complex object structure containing activity information, including approval status, creation time, and various intents.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/updatePolicy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatePolicy(input): Promise<{ \n  activity: { \n    canApprove: boolean;\n    canReject: boolean;\n    createdAt: { \n      nanos: string; \n      seconds: string; \n    };\n    failure: { \n      code: number; \n      details: object & object[]; \n      message: string; \n    };\n    fingerprint: string;\n    id: string;\n    intent: { \n      // Various intent types...\n    };\n    // More properties...\n  };\n}>\n```\n\n----------------------------------------\n\nTITLE: Wallet Export Endpoint Definition\nDESCRIPTION: HTTP POST endpoint for submitting wallet export requests with input type TExportWalletInput\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/sdk-server/index/namespaces/TurnkeyApi/variables/exportWallet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /public/v1/submit/export_wallet\n```\n\n----------------------------------------\n\nTITLE: signGetWalletAccounts Function Definition\nDESCRIPTION: Defines the `signGetWalletAccounts` function, which requests a WebAuthn assertion and returns a signed `GetWalletAccounts` request. It takes input of type `TGetWalletAccountsInput` and optional `TurnkeyCredentialRequestOptions`. It returns a Promise that resolves to a `SignedRequest`.\nSOURCE: https://github.com/tkhq/sdk/blob/main/docs/markdown/@turnkey/http/index/namespaces/TurnkeyApi/functions/signGetWalletAccounts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **signGetWalletAccounts**(`input`, `options`?): `Promise`\\<[`SignedRequest`](../../../type-aliases/SignedRequest.mdx)\\>\n\nDefined in: [packages/http/src/\\_\\_generated\\_\\_/services/coordinator/public/v1/public_api.fetcher.ts:1116](https://github.com/tkhq/sdk/blob/fd49bfe86475c8603b3eb385aa101efa36fa32fc/packages/http/src/__generated__/services/coordinator/public/v1/public_api.fetcher.ts#L1116)\n```"
  }
]