[
  {
    "owner": "observablehq",
    "repo": "plot",
    "content": "TITLE: Basic Scatterplot Example\nDESCRIPTION: Creates a basic scatterplot using Plot.dot() to visualize Olympic athletes' height and weight data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, {x: \"weight\", y: \"height\", stroke: \"sex\"})\n  .plot({color: {legend: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Line Chart with Time Series Data\nDESCRIPTION: Basic example of creating a line chart using time series data (Apple stock prices) with Date on the x-axis and Close price on the y-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nPlot.line(aapl, {x: \"Date\", y: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot with Tooltips\nDESCRIPTION: Implements a scatter plot using Plot.dot with interactive tooltips showing athlete details. The plot displays weight vs height with sex-based coloring and includes name and sport in tooltips.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/interactions.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(olympians, {\n  x: \"weight\",\n  y: \"height\",\n  stroke: \"sex\",\n  channels: {name: \"name\", sport: \"sport\"},\n  tip: true\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: React Client-Side Plot Implementation\nDESCRIPTION: Demonstrates client-side Plot rendering in React using hooks (useRef, useEffect) with data loading and plot updates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {useEffect, useRef, useState} from \"react\";\n\nexport default function App() {\n  const containerRef = useRef();\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    d3.csv(\"/gistemp.csv\", d3.autoType).then(setData);\n  }, []);\n\n  useEffect(() => {\n    if (data === undefined) return;\n    const plot = Plot.plot({\n      y: {grid: true},\n      color: {scheme: \"burd\"},\n      marks: [\n        Plot.ruleY([0]),\n        Plot.dot(data, {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"})\n      ]\n    });\n    containerRef.current.append(plot);\n    return () => plot.remove();\n  }, [data]);\n\n  return <div ref={containerRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Scatter Plot with Customized Layout\nDESCRIPTION: Refined version of the scatter plot with added grid, aspect ratio, labels, and legend configurations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  aspectRatio: 1,\n  inset: 10,\n  x: {tickSpacing: 80, label: \"Culmen length (mm)\"},\n  y: {tickSpacing: 80, label: \"Culmen depth (mm)\"},\n  color: {legend: true},\n  marks: [\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Plot with Vue for Server-Side Rendering\nDESCRIPTION: This snippet demonstrates how to create a PlotFigure component in Vue for server-side rendering using Observable Plot. It utilizes the 'document' plot option to render to Vue's virtual DOM.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport {h} from \"vue\";\n\nexport default {\n  props: {\n    options: Object\n  },\n  render() {\n    return Plot.plot({\n      ...this.options,\n      document: new Document()\n    }).toHyperScript();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Crosshair Interaction\nDESCRIPTION: Creates a scatter plot with an interactive crosshair that displays coordinates of the nearest data point. Combines dot plot with crosshair mark for enhanced data exploration.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/interactions.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(olympians, {x: \"weight\", y: \"height\", stroke: \"sex\"}),\n    Plot.crosshair(olympians, {x: \"weight\", y: \"height\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Observable Plot\nDESCRIPTION: This example demonstrates how to create a line chart using Observable Plot. It uses the lineY mark to plot the closing price of Apple stock over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bar Chart with Plot.plot() in JavaScript\nDESCRIPTION: This code snippet shows how to create a basic bar chart using Plot.plot(). It sets a custom height and uses the barY mark to visualize letter frequencies from the 'alphabet' dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  height: 200,\n  marks: [\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Line Chart with Observable Plot\nDESCRIPTION: This snippet shows how to create a multi-line chart comparing Apple and Google stock prices. It uses multiple lineY marks with different colors for each stock.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(goog, {x: \"Date\", y: \"Close\", stroke: \"red\"}),\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\", stroke: \"blue\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hexbin Heatmap with Observable Plot\nDESCRIPTION: This snippet demonstrates how to create a basic hexbin heatmap using Observable Plot. It visualizes the weights and heights of Olympic athletes, with hexagon color representing the count of athletes in each bin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, Plot.hexbin({fill: \"count\"}, {x: \"weight\", y: \"height\"}))\n  .plot({color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"}})\n```\n\n----------------------------------------\n\nTITLE: Rendering a Plot with Customizable Margins in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a plot using Plot.plot() with customizable margin settings. It includes a frame mark to visualize margins and a bar chart of letter frequencies.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  grid: true,\n  marks: [\n    Plot.frame({\n      stroke: \"var(--vp-c-text-2)\",\n      strokeOpacity: 0.5,\n      insetTop: -marginTop,\n      insetRight: -marginRight,\n      insetBottom: -marginBottom,\n      insetLeft: -marginLeft,\n    }),\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", fill: \"green\"}),\n    Plot.frame()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Linear Regression Plot\nDESCRIPTION: Creates a scatter plot with linear regression line showing the relationship between car weight and power.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(cars, {x: \"weight (lb)\", y: \"power (hp)\"}),\n    Plot.linearRegressionY(cars, {x: \"weight (lb)\", y: \"power (hp)\", stroke: \"red\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Observable Plot\nDESCRIPTION: Creates a line chart using Plot.line() with temporal x-axis for time series data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.line(timeSeries).plot()\n```\n\n----------------------------------------\n\nTITLE: Customizing Dot Plot Appearance in Plot.js\nDESCRIPTION: This example shows how to use the fill option to change the appearance of dots in a scatter plot, demonstrating mark customization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(gistemp, {x: \"Date\", y: \"Anomaly\", fill: \"red\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Layering Multiple Marks in ObservableHQ Plot\nDESCRIPTION: Demonstrates how to layer multiple marks (area, line, and rule) in a single plot to create a complex visualization of stock data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.areaY(aapl, {x: \"Date\", y: \"Close\", fillOpacity: 0.2}),\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Scatterplot with Dot Mark\nDESCRIPTION: Creates a basic scatterplot showing relationship between car horsepower and fuel efficiency using the dot mark.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(cars, {x: \"economy (mpg)\", y: \"power (hp)\"}).plot({grid: true})\n```\n\n----------------------------------------\n\nTITLE: Creating an Elevation Profile Chart with Observable Plot\nDESCRIPTION: Shows how to create an elevation profile chart for a Tour de France stage using Plot.plot with multiple marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    label: \"Distance from stage start (km)\"\n  },\n  y: {\n    label: \"Elevation (m)\",\n    grid: true\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(tdf, {x: \"distance\", y: \"elevation\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Area Chart with Plot.areaY\nDESCRIPTION: Creates a simple area chart using the Plot.areaY constructor, plotting Apple stock closing prices over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(aapl, {x: \"Date\", y: \"Close\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Anscombe's Quartet with Faceted Scatterplot in Observable Plot\nDESCRIPTION: This code snippet demonstrates how to create a faceted scatterplot of Anscombe's quartet using Observable Plot. It uses the facet option to create horizontal facets based on the 'series' data, and combines line and dot marks to visualize the data points.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  facet: {data: anscombe, x: \"series\"},\n  marks: [\n    Plot.frame(),\n    Plot.line(anscombe, {x: \"x\", y: \"y\"}),\n    Plot.dot(anscombe, {x: \"x\", y: \"y\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Plot.lineY Shorthand\nDESCRIPTION: Demonstrates the creation of a simple line chart using the Plot.lineY shorthand syntax. This automatically uses array indices as x-values and array elements as y-values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Moving Average Line Chart with Observable Plot\nDESCRIPTION: Shows how to create a line chart with moving averages of daily temperature highs and lows using the window transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Temperature (°F)\"\n  },\n  marks: [\n    Plot.line(sftemp, Plot.windowY(14, {x: \"date\", y: \"low\", stroke: \"#4e79a7\"})),\n    Plot.line(sftemp, Plot.windowY(14, {x: \"date\", y: \"high\", stroke: \"#e15759\"})),\n    Plot.ruleY([32]) // freezing\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Heatmap Examples\nDESCRIPTION: Demonstrates creating heatmaps using Plot.auto() with count aggregation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(olympians, {x: \"weight\", y: \"height\", color: \"count\"}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rect(olympians, Plot.bin({fill: \"count\"}, {x: \"weight\", y: \"height\"})).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(olympians, {x: \"weight\", y: \"sex\", color: \"count\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Y-oriented Dot Plot with Car Economy Data\nDESCRIPTION: Creates a dot plot that displays car economy data along the y-axis. This example uses the dotY method which assumes the provided array contains y-values when no explicit y option is specified.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dotY(cars.map((d) => d[\"economy (mpg)\"]))\n```\n\n----------------------------------------\n\nTITLE: Basic Bollinger Band Plot\nDESCRIPTION: Simple implementation of Bollinger bands using bollingerY method with configurable window size and standard deviation parameters.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bollinger.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.bollingerY(aapl, {x: \"Date\", y: \"Close\", n, k}).plot()\n```\n\n----------------------------------------\n\nTITLE: Simpson's Paradox Demonstration Plot\nDESCRIPTION: Visualization demonstrating Simpson's paradox using penguin data, showing different regression lines for individual species and overall population.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  color: {legend: true},\n  marks: [\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fill: \"species\"}),\n    Plot.linearRegressionY(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"species\"}),\n    Plot.linearRegressionY(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Bar Chart with Faceting\nDESCRIPTION: Shows how to create a grouped bar chart using faceting to partition the data by a categorical variable.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 60,\n  marginRight: 60,\n  label: null,\n  x: {label: \"Frequency\"},\n  y: {padding: 0},\n  marks: [\n    Plot.barX(penguins, {fy: \"island\", y: \"sex\", x: 1, inset: 0.5}),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Daily Minimum Temperatures of San Francisco and San Jose\nDESCRIPTION: Utilizes Plot.differenceY with grouping and windowing to compare daily minimum temperatures between San Francisco and San Jose, demonstrating the effect of fog on temperature variations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/difference.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {tickFormat: \"%b\"},\n  y: {grid: true},\n  marks: [\n    Plot.ruleY([32]),\n    Plot.differenceY(\n      temperature,\n      Plot.windowY(\n        14,\n        Plot.groupX(\n          {\n            y1: Plot.find((d) => d.station === \"SJ\"),\n            y2: Plot.find((d) => d.station === \"SF\")\n          },\n          {\n            x: \"date\",\n            y: \"tmin\",\n            tip: true\n          }\n        )\n      )\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Candlestick Chart with ruleX\nDESCRIPTION: Demonstrates a complex use of Plot.ruleX to create a candlestick chart for AAPL stock data, showing daily price ranges and open/close prices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 6,\n  label: null,\n  y: {grid: true, label: \"Stock price ($)\"},\n  color: {type: \"threshold\", range: [\"red\", \"green\"]},\n  marks: [\n    Plot.ruleX(aapl, {x: \"Date\", y1: \"Low\", y2: \"High\"}),\n    Plot.ruleX(aapl, {x: \"Date\", y1: \"Open\", y2: \"Close\", stroke: (d) => d.Close - d.Open, strokeWidth: 4})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Line Chart with Multiple Series\nDESCRIPTION: Demonstrates a line chart comparing daily travelers at airports, using the select transform to label the start of each series. Includes data transformation to millions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Travelers per day (millions)\",\n    transform: (d) => d / 1e6 // convert to millions\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(travelers, {x: \"date\", y: \"previous\", strokeOpacity: 0.5}),\n    Plot.line(travelers, {x: \"date\", y: \"current\"}),\n    Plot.text(travelers, Plot.selectFirst({x: \"date\", y: \"previous\", text: [\"2019\"], fillOpacity: 0.5, lineAnchor: \"bottom\", dy: -6})),\n    Plot.text(travelers, Plot.selectFirst({x: \"date\", y: \"current\", text: [\"2020\"], lineAnchor: \"top\", dy: 6}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Percentage Bar Chart\nDESCRIPTION: Demonstrates how to create a stacked percentage bar chart with text labels using the stackX transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {percent: true},\n  marks: [\n    Plot.barX(alphabet, Plot.stackX({x: \"frequency\", fillOpacity: 0.3, inset: 0.5})),\n    Plot.textX(alphabet, Plot.stackX({x: \"frequency\", text: \"letter\", inset: 0.5})),\n    Plot.ruleX([0, 1])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting Temperature Anomaly with Difference Mark\nDESCRIPTION: Creates a plot using Plot.differenceY to visualize global surface temperature anomalies from 1880-2016, comparing against the 1951-1980 average.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/difference.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.differenceY(gistemp, {\n  x: \"Date\",\n  y: \"Anomaly\",\n  positiveFill: \"red\",\n  negativeFill: \"blue\",\n  tip: true\n}).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating Link Chart for City Inequality and Population\nDESCRIPTION: Demonstrates how to use the link mark to visualize changes in inequality and population for U.S. cities from 1980 to 2015. It includes custom styling and additional text annotations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/link.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  inset: 10,\n  x: {\n    type: \"log\",\n    label: \"Population\"\n  },\n  y: {\n    label: \"Inequality\",\n    ticks: 4\n  },\n  color: {\n    scheme: \"BuRd\",\n    label: \"Change in inequality from 1980 to 2015\",\n    legend: true,\n    tickFormat: \"+f\"\n  },\n  marks: [\n    Plot.link(metros, {\n      x1: \"POP_1980\",\n      y1: \"R90_10_1980\",\n      x2: \"POP_2015\",\n      y2: \"R90_10_2015\",\n      stroke: (d) => d.R90_10_2015 - d.R90_10_1980,\n      markerEnd: \"arrow\"\n    }),\n    Plot.text(metros, {\n      x: \"POP_2015\",\n      y: \"R90_10_2015\",\n      filter: \"highlight\",\n      text: \"nyt_display\",\n      fill: \"currentColor\",\n      stroke: \"var(--vp-c-bg)\",\n      dy: -8\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Penguin Data with Symbol and Color Encoding\nDESCRIPTION: Generates a scatterplot of penguin body mass and flipper length, using both symbol and color encoding for species. It includes a symbol legend that incorporates color information.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/legends.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  x: {label: \"Body mass (g)\"},\n  y: {label: \"Flipper length (mm)\"},\n  symbol: {legend: true},\n  marks: [\n    Plot.dot(penguins, {x: \"body_mass_g\", y: \"flipper_length_mm\", stroke: \"species\", symbol: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plot with Text in Observable Plot\nDESCRIPTION: This snippet demonstrates how to create a simple plot with a frame and text using Observable Plot. It uses the plot function to render an SVG or HTML figure element.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.frame(),\n    Plot.text([\"Hello, world!\"], {frameAnchor: \"middle\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Line Chart with Highlighted Series in Observable Plot\nDESCRIPTION: Demonstrates how to create a multiple line chart with specific series highlighted using color encoding.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Unemployment (%)\"\n  },\n  color: {\n    domain: [false, true],\n    range: [\"#ccc\", \"red\"]\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(bls, {\n      x: \"date\",\n      y: \"unemployment\",\n      z: \"division\",\n      stroke: (d) => /, MI /.test(d.division),\n      sort: {channel: \"stroke\"}\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Binned Rectangle Plot\nDESCRIPTION: Creates a binned rectangle plot with opacity encoding for count visualization of Olympic athletes data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rect(olympians, Plot.bin({fillOpacity: \"count\"}, {x: \"weight\", y: \"height\", fill: \"sex\", inset: 0})).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Overlapping Areas with z Channel\nDESCRIPTION: Creates overlapping semi-transparent areas by using the z channel for grouping but setting y2 instead of y to disable the implicit stack transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.areaY(industries, {x: \"date\", y2: \"unemployed\", z: \"industry\", fillOpacity: 0.1}),\n    Plot.lineY(industries, {x: \"date\", y: \"unemployed\", z: \"industry\", strokeWidth: 1})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a U.S. Map with Albers USA Projection\nDESCRIPTION: Demonstrates the use of the Albers USA projection for creating a map of the United States, including state boundaries.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(nation),\n    Plot.geo(statemesh, {strokeOpacity: 0.2})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Horizontal Bar Chart of Penguins\nDESCRIPTION: Illustrates a more complex horizontal bar chart with stacking, coloring, and sorting based on penguin data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 60,\n  x: {label: \"Frequency\"},\n  y: {label: null},\n  color: {legend: true},\n  marks: [\n    Plot.barX(penguins, {y: \"species\", x: 1, inset: 0.5, fill: \"body_mass_g\", sort: \"body_mass_g\"}),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Smoothing Temperature Anomaly with Moving Average\nDESCRIPTION: Enhances the temperature anomaly plot by applying a 24-month moving average to smooth out noise in the data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/difference.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.differenceY(\n  gistemp,\n  Plot.windowY(12 * 2, {\n    x: \"Date\",\n    y: \"Anomaly\",\n    positiveFill: \"red\",\n    negativeFill: \"blue\",\n    tip: true\n  })\n).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Bandwidth Density Plot\nDESCRIPTION: Demonstrates density plot with dynamic bandwidth control using Vue reactive properties.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/density.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 20,\n  marks: [\n    Plot.density(faithful, {x: \"waiting\", y: \"eruptions\", bandwidth}),\n    Plot.dot(faithful, {x: \"waiting\", y: \"eruptions\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Plot in Node.js for Server-Side Rendering\nDESCRIPTION: This Node.js script demonstrates how to use Observable Plot for server-side rendering of SVG. It uses JSDOM for DOM implementation and outputs the generated plot as SVG markup.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {readFile} from \"node:fs/promises\";\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {JSDOM} from \"jsdom\";\n\nconst penguins = d3.csvParse(await readFile(\"./penguins.csv\", \"utf-8\"), d3.autoType);\n\nconst plot = Plot.plot({\n  document: new JSDOM(\"\").window.document,\n  marks: [\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"species\"})\n  ]\n});\n\nplot.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns\", \"http://www.w3.org/2000/svg\");\nplot.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n\nprocess.stdout.write(plot.outerHTML);\n```\n\n----------------------------------------\n\nTITLE: Combining Window Transform with Map Transform\nDESCRIPTION: Advanced example using window transform with map transform to encode the slope (monthly change in unemployment rate) as stroke color. This demonstrates how window can be used with Plot.map for other channels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  color: {scheme: \"BuYlRd\", domain: [-0.5, 0.5]},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(\n      bls,\n      Plot.map(\n        {stroke: Plot.window({k: 2, reduce: \"difference\"})},\n        {x: \"date\", y: \"unemployment\", z: \"division\", stroke: \"unemployment\"}\n      )\n    ),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dow Jones Calendar Heatmap\nDESCRIPTION: Creates a calendar visualization of Dow Jones Industrial Average daily changes using faceting and cell marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  padding: 0,\n  x: {axis: null},\n  y: {tickFormat: Plot.formatWeekday(\"en\", \"narrow\"), tickSize: 0},\n  fy: {tickFormat: \"\"},\n  color: {scheme: \"PiYG\"},\n  marks: [\n    Plot.cell(dji, {\n      x: (d) => d3.utcWeek.count(d3.utcYear(d.Date), d.Date),\n      y: (d) => d.Date.getUTCDay(),\n      fy: (d) => d.Date.getUTCFullYear(),\n      fill: (d, i) => i > 0 ? (d.Close - dji[i - 1].Close) / dji[i - 1].Close : NaN,\n      title: (d, i) => i > 0 ? ((d.Close - dji[i - 1].Close) / dji[i - 1].Close * 100).toFixed(1) : NaN,\n      inset: 0.5\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Histogram using Plot.rect in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a 2D histogram using Plot.rect function. It uses the 'olympians' dataset and bins the data based on weight and height, with the fill color representing the count.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rect(olympians, Plot.bin({fill: \"count\"}, {x: \"weight\", y: \"height\"}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Heatmap with Observable Plot\nDESCRIPTION: Demonstrates how to create a dot heatmap using the bin transform, where dot size represents the count of athletes in each bin of weight and height.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  r: {range: [0, 6]}, // generate slightly smaller dots\n  marks: [\n    Plot.dot(olympians, Plot.bin({r: \"count\"}, {x: \"weight\", y: \"height\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Mixed Faceted and Non-faceted Plot\nDESCRIPTION: Demonstrates combining faceted and non-faceted marks to provide context across all facets using different dot styles.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  marginRight: 60,\n  facet: {label: null},\n  marks: [\n    Plot.frame(),\n    Plot.dot(penguins, {\n      x: \"culmen_length_mm\",\n      y: \"culmen_depth_mm\",\n      fill: \"#aaa\",\n      r: 1\n    }),\n    Plot.dot(penguins, {\n      x: \"culmen_length_mm\",\n      y: \"culmen_depth_mm\",\n      fx: \"sex\",\n      fy: \"species\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating a Perlin Noise Field with Vector Mark\nDESCRIPTION: Creates a visualization of a Perlin noise field using Plot's vector mark, demonstrating advanced usage with custom noise functions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 6,\n  width: 1024,\n  aspectRatio: 1,\n  axis: null,\n  marks: [\n    Plot.vector(poisson([0, 0, 2, 2], 4000), {\n      length: ([x, y]) => (noise(x + 2, y) + 0.5) * 24,\n      rotate: ([x, y]) => noise(x, y) * 360\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Demographic Dot Plot with Observable Plot\nDESCRIPTION: Shows how to create a dot plot comparing U.S. state demographics using Observable Plot's normalize transform. The plot displays the proportion of each state's population by age group.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 660,\n  axis: null,\n  grid: true,\n  x: {\n    axis: \"top\",\n    label: \"Population (%)\",\n    percent: true\n  },\n  color: {\n    scheme: \"spectral\",\n    domain: stateage.ages, // in age order\n    legend: true\n  },\n  marks: [\n    Plot.ruleX([0]),\n    Plot.ruleY(stateage, Plot.groupY({x1: \"min\", x2: \"max\"}, {...xy, sort: {y: \"x1\"}})),\n    Plot.dot(stateage, {...xy, fill: \"age\", title: \"age\"}),\n    Plot.text(stateage, Plot.selectMinX({...xy, textAnchor: \"end\", dx: -6, text: \"state\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Line Chart with Observable Plot\nDESCRIPTION: Shows how to create a multiple line chart of unemployment rates for different metro areas using the z channel for grouping.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Unemployment (%)\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(bls, {x: \"date\", y: \"unemployment\", z: \"division\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vertical Box Plot Implementation\nDESCRIPTION: Creates a vertical box plot using Plot.boxY to visualize Michelson's speed of light measurements, with customized y-axis grid and inset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/box.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    inset: 6\n  },\n  marks: [\n    Plot.boxY(morley, {x: \"Expt\", y: \"Speed\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Plot.binX Transform\nDESCRIPTION: Shows how to create a histogram by combining Plot.rectY with the Plot.binX transform, binning the data into intervals and counting occurrences in each bin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(numbers, Plot.binX()).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Histogram with Grouping\nDESCRIPTION: Demonstrates how to create a stacked histogram by using the fill channel for grouping, counting occurrences within each bin while subdividing by species.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"count\"}, {x: \"body_mass_g\", fill: \"species\"})\n```\n\n----------------------------------------\n\nTITLE: Arrow Plot with Grouped Data\nDESCRIPTION: Demonstrates a faceted arrow plot showing year-over-year changes in barley yields with color-coded differences.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 800,\n  marginLeft: 110,\n  grid: true,\n  x: {nice: true},\n  y: {inset: 5},\n  color: {scheme: \"spectral\", label: \"Change in yield\", tickFormat: \"+f\", legend: true},\n  facet: {marginRight: 90},\n  marks: [\n    Plot.frame(),\n    Plot.arrow(barley, Plot.groupY({\n      x1: \"first\",\n      x2: \"last\",\n      stroke: ([x1, x2]) => x2 - x1 // year-over-year difference\n    }, {\n      x: \"yield\",\n      y: \"variety\",\n      fy: \"site\",\n      stroke: \"yield\",\n      strokeWidth: 2,\n      sort: {y: \"-x1\", fy: \"-x1\", reduce: \"median\"}\n    }))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Index Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create an index chart using Observable Plot's normalize transform. The chart shows the relative change in stock prices over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    type: \"log\",\n    grid: true,\n    label: \"Change in price (%)\",\n    tickFormat: ((f) => (x) => f((x - 1) * 100))(d3.format(\"+d\"))\n  },\n  marks: [\n    Plot.ruleY([1]),\n    Plot.line(stocks, Plot.normalizeY({\n      x: \"Date\",\n      y: \"Close\",\n      stroke: \"Symbol\"\n    })),\n    Plot.text(stocks, Plot.selectLast(Plot.normalizeY({\n      x: \"Date\",\n      y: \"Close\",\n      z: \"Symbol\",\n      text: \"Symbol\",\n      textAnchor: \"start\",\n      dx: 3\n    })))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Line Chart with Legend in Observable Plot\nDESCRIPTION: This example demonstrates how to create a multi-line chart with a color legend. It combines stock data and uses the color option to create a legend based on the Symbol column.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(stocks, {x: \"Date\", y: \"Close\", stroke: \"Symbol\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Scatterplot Example\nDESCRIPTION: Creates a scatterplot using Plot.auto() with penguin data comparing body mass and flipper length.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", y: \"flipper_length_mm\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Diverging Bar Chart of State Population Changes\nDESCRIPTION: Demonstrates a diverging bar chart showing population changes in US states, with custom color coding and axis formatting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  label: null,\n  x: {\n    axis: \"top\",\n    label: \"← decrease · Change in population, 2010–2019 (%) · increase →\",\n    labelAnchor: \"center\",\n    tickFormat: \"+\",\n    percent: true\n  },\n  color: {\n    scheme: \"PiYg\",\n    type: \"ordinal\"\n  },\n  marks: [\n    Plot.barX(statepop, {y: \"State\", x: (d) => (d[2019] - d[2010]) / d[2010], fill: (d) => Math.sign(d[2019] - d[2010]), sort: {y: \"x\"}}),\n    Plot.gridX({stroke: \"var(--vp-c-bg)\", strokeOpacity: 0.5}),\n    Plot.axisY({x: 0}),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Multi-series Line Chart with Pointer Transform\nDESCRIPTION: Implementation of pointer transform on a multi-series line chart showing industry unemployment data with interactive tips.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(industries, {x: \"date\", y: \"unemployed\", stroke: \"industry\", tip: \"x\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Filled Contour Plot with Value-Based Coloring\nDESCRIPTION: Creates a contour plot with filled regions where the fill color corresponds to the contour threshold value.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(volcano.values, {width: volcano.width, height: volcano.height, value: Plot.identity, fill: \"value\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Projected Links on a Spherical Map\nDESCRIPTION: Demonstrates how to use the link mark with a spherical projection to draw geodesic and straight lines between two points on a map.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/link.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"equal-earth\",\n  marks: [\n    Plot.sphere(),\n    Plot.geo(land, {fill: \"currentColor\", fillOpacity: 0.3}),\n    Plot.link({length: 1}, {curve: \"linear\", stroke: \"red\", ...xy}),\n    Plot.link({length: 1}, {markerStart: \"dot\", markerEnd: \"arrow\", strokeWidth: 1.5, ...xy})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Explicit Tip Mark and Pointer Transform in Observablehq Plot\nDESCRIPTION: Shows how to explicitly use the tip mark and pointer transform to create an interactive line chart with tooltips in Observablehq Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.tip(aapl, Plot.pointerX({x: \"Date\", y: \"Close\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Difference Plot with Dynamic Shifting Interval\nDESCRIPTION: Demonstrates using Plot.differenceY with the shiftX transform to visualize changes in Apple stock prices over a configurable time interval. The shift interval can be controlled dynamically.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.differenceY(aapl, Plot.shiftX(`${shift} days`, {x: \"Date\", y: \"Close\"})).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating an Index Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create an index chart comparing the performance of multiple stocks using normalization and custom formatting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    type: \"log\",\n    grid: true,\n    label: \"Change in price (%)\",\n    tickFormat: ((f) => (x) => f((x - 1) * 100))(d3.format(\"+d\"))\n  },\n  marks: [\n    Plot.ruleY([1]),\n    Plot.line(stocks, Plot.normalizeY({\n      x: \"Date\",\n      y: \"Close\",\n      stroke: \"Symbol\"\n    })),\n    Plot.text(stocks, Plot.selectLast(Plot.normalizeY({\n      x: \"Date\",\n      y: \"Close\",\n      z: \"Symbol\",\n      text: \"Symbol\",\n      textAnchor: \"start\",\n      dx: 3\n    })))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Time Series with Missing Data using rectY in Plot.js\nDESCRIPTION: This example uses the rectY mark with an interval option to properly display a time series with missing data, revealing the gap in 2018.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .rectY(timeseries, {x: \"year\", y: \"population\", interval: 1})\n  .plot({x: {tickFormat: \"\"}})\n```\n\n----------------------------------------\n\nTITLE: Complex Dot Plot with Transforms\nDESCRIPTION: Advanced dot plot showing state demographics with normalize and group transforms.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 660,\n  axis: null,\n  grid: true,\n  x: {\n    axis: \"top\",\n    label: \"Population (%)\",\n    percent: true\n  },\n  color: {\n    scheme: \"spectral\",\n    domain: stateage.ages,\n    legend: true\n  },\n  marks: [\n    Plot.ruleX([0]),\n    Plot.ruleY(stateage, Plot.groupY({x1: \"min\", x2: \"max\"}, {...xy, sort: {y: \"x1\"}})),\n    Plot.dot(stateage, {...xy, fill: \"age\", title: \"age\"}),\n    Plot.text(stateage, Plot.selectMinX({...xy, textAnchor: \"end\", dx: -6, text: \"state\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Time Series Chart with CrosshairX in JavaScript\nDESCRIPTION: This example shows how to create a time series chart using Observable Plot's lineY mark and crosshairX mark. It uses AAPL stock data to plot closing prices over time with an interactive crosshair for the x-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/crosshair.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.crosshairX(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Filled Contours with Color Legend in Observable Plot\nDESCRIPTION: Shows how to create filled contours with a color legend using the contour mark, applying a color encoding to contour values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {\n    legend: true,\n    label: \"Elevation (m)\"\n  },\n  marks: [\n    Plot.contour(volcano.values, {\n      width: volcano.width,\n      height: volcano.height,\n      fill: Plot.identity,\n      stroke: \"black\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Spherical Line Chart with Observable Plot\nDESCRIPTION: Shows how to create a line chart on a spherical projection, demonstrating Charles Darwin's voyage on HMS Beagle.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"equirectangular\",\n  marks: [\n```\n\n----------------------------------------\n\nTITLE: GroupX Transform with Sum Reducer\nDESCRIPTION: Demonstrates groupX transform using sum reducer on body mass grouped by species.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.groupX({y: \"sum\"}, {x: \"species\", y: \"body_mass_g\"})\n```\n\n----------------------------------------\n\nTITLE: Les Misérables Character Co-occurrence Arc Diagram\nDESCRIPTION: Plot example showing character relationships in Les Misérables using an arc diagram with arrows.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/arrow.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 1080,\n  marginLeft: 100,\n  axis: null,\n  x: {domain: [0, 1]},\n  color: {domain: d3.range(10), unknown: \"#ccc\"},\n  marks: [\n    Plot.dot(miserables.nodes, {x: 0, y: \"id\", fill: \"group\", sort: {y: \"fill\"}}),\n    Plot.text(miserables.nodes, {x: 0, y: \"id\", text: \"id\", textAnchor: \"end\", dx: -6, fill: \"group\"}),\n    Plot.arrow(miserables.links, {x: 0, y1: \"source\", y2: \"target\", sweep: \"-y\", bend: 90, headLength: 0, stroke: samegroup, sort: samegroup, reverse: true})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Proportional Symbol Scatterplot\nDESCRIPTION: Creates a scatterplot with varying dot sizes based on trading volume, showing relationship between daily price changes and volume.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  x: {\n    label: \"Daily change (%)\",\n    tickFormat: \"+f\",\n    percent: true\n  },\n  y: {\n    type: \"log\",\n    label: \"Daily trading volume\"\n  },\n  marks: [\n    Plot.ruleX([0]),\n    Plot.dot(aapl, {x: (d) => (d.Close - d.Open) / d.Open, y: \"Volume\", r: \"Volume\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting a Historical Timeline of Civilizations\nDESCRIPTION: Creates a horizontal bar chart showing the timeline of civilizations, with custom axis formatting and text labels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 130,\n  axis: null,\n  x: {\n    axis: \"top\",\n    grid: true,\n    tickFormat: (x) => x < 0 ? `${-x} BC` : `${x} AD`\n  },\n  marks: [\n    Plot.barX(civilizations, {\n      x1: \"start\",\n      x2: \"end\",\n      y: \"civilization\",\n      sort: {y: \"x1\"}\n    }),\n    Plot.text(civilizations, {\n      x: \"start\",\n      y: \"civilization\",\n      text: \"civilization\",\n      textAnchor: \"end\",\n      dx: -3\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Diverging Color Scatterplot\nDESCRIPTION: Shows temperature anomalies using dots with a diverging color scheme and additional rule mark.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    tickFormat: \"+f\",\n    label: \"Surface temperature anomaly (°F)\"\n  },\n  color: {\n    scheme: \"BuRd\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(gistemp, {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Horizontal Pointer Transform in Plot.js\nDESCRIPTION: Shows pointerX transform usage for time-series data, prioritizing horizontal distance when finding the closest point. Commonly used for temporal or categorical data on x-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tip(aapl, Plot.pointerX({x: \"Date\", y: \"Close\"}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Connected Scatterplot with Observable Plot\nDESCRIPTION: Demonstrates how to create a connected scatterplot showing the relationship between miles driven and gas prices over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 10,\n  grid: true,\n  x: {label: \"Miles driven (per person-year)\"},\n  y: {label: \"Cost of gasoline ($ per gallon)\"},\n  marks: [\n    Plot.line(driving, {x: \"miles\", y: \"gas\", curve: \"catmull-rom\", marker: true}),\n    Plot.text(driving, {filter: (d) => d.year % 5 === 0, x: \"miles\", y: \"gas\", text: (d) => `${d.year}`, dy: -8})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Filtered and Gapped Line Charts in Observable Plot\nDESCRIPTION: Shows the difference between filtering data and using undefined values to create gaps in a line chart.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.lineY(aapl, {filter: (d) => d.Date.getUTCMonth() >= 3, x: \"Date\", y: \"Close\", strokeOpacity: 0.3}),\n    Plot.lineY(aapl, {x: \"Date\", y: (d) => d.Date.getUTCMonth() < 3 ? NaN : d.Close})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing The Simpsons Ratings with ruleX and dot\nDESCRIPTION: Uses Plot.ruleX to show rating ranges per season and Plot.dot for individual episode ratings, demonstrating the decline of The Simpsons over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleX(simpsons, Plot.groupX({y1: \"min\", y2: \"max\"}, {x: \"season\", y: \"imdb_rating\"})),\n    Plot.dot(simpsons, {x: \"season\", y: \"imdb_rating\", fill: \"currentColor\", stroke: \"var(--vp-c-bg)\"}),\n    Plot.lineY(simpsons, Plot.groupX({y: \"median\"}, {x: \"season\", y: \"imdb_rating\", stroke: \"red\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Small Grid Data with Text and Contour Marks\nDESCRIPTION: Demonstrates how to visualize a small grid of data using both text and contour marks in Observable Plot, showing the relationship between grid values and contours.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.contour(grid.values, {\n      width: grid.width,\n      height: grid.height,\n      fill: Plot.identity,\n      interval: 5\n    }),\n    Plot.text(grid.values, {\n      text: Plot.identity,\n      fill: \"white\",\n      x: (d, i) => i % grid.width + 0.5,\n      y: (d, i) => Math.floor(i / grid.width) + 0.5\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Tip Mark with Additional Channels in Observablehq Plot\nDESCRIPTION: Shows how to use the tip mark with additional channels to display more information in tooltips for a scatter plot of Olympic athletes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(olympians, {\n  x: \"weight\",\n  y: \"height\",\n  stroke: \"sex\",\n  channels: {name: \"name\", sport: \"sport\"},\n  tip: true\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gender Income Inequality with Link Mark\nDESCRIPTION: Uses the link mark to create a chart showing gender disparity in wages across education and age groups in the U.S., with diagonal reference lines.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/link.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  marginRight: 40,\n  x: {\n    label: \"Median annual income (men, thousands)\",\n    transform: (d) => d / 1000,\n    tickSpacing: 60\n  },\n  y: {\n    label: \"Median annual income (women, thousands)\",\n    transform: (d) => d / 1000,\n    tickSpacing: 60\n  },\n  marks: [\n    Plot.link([0.6, 0.7, 0.8, 0.9, 1], {\n      x1: 0,\n      y1: 0,\n      x2: 102000,\n      y2: (k) => 102000 * k,\n      strokeOpacity: (k) => k === 1 ? 1 : 0.2\n    }),\n    Plot.text([0.6, 0.7, 0.8, 0.9, 1], {\n      x: 102000,\n      y: (k) => 102000 * k,\n      text: ((f) => (k) => k === 1 ? \"Equal\" : f(k - 1))(d3.format(\"+.0%\")),\n      textAnchor: \"start\",\n      dx: 6\n    }),\n    Plot.dot(income, {x: \"m\", y: \"f\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Horizontal Box Plot Example\nDESCRIPTION: Box plot showing distribution of penguin body mass by species with custom margins.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.boxX(penguins, {x: \"body_mass_g\", y: \"species\"}).plot({marginLeft: 60, y: {label: null}})\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Chart with Missing Data\nDESCRIPTION: Demonstrates how undefined (NaN) values create gaps in the area chart by setting data for the first three months of each year to NaN.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.areaY(aapl, {x: \"Date\", y: (d) => d.Date.getUTCMonth() < 3 ? NaN : d.Close, fillOpacity: 0.3}),\n    Plot.lineY(aapl, {x: \"Date\", y: (d) => d.Date.getUTCMonth() < 3 ? NaN : d.Close}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Spike Map of US County Population\nDESCRIPTION: Demonstrates the use of Plot's spike constructor to create a spike map showing US county population data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width: 688,\n  projection: \"albers-usa\",\n  length: {range: [0, 200]},\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.5}),\n    Plot.geo(nation),\n    Plot.spike(counties, Plot.geoCentroid({length: (d) => d.properties.population, stroke: \"green\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Projected Contours with Global Data in Observable Plot\nDESCRIPTION: Illustrates how to create contours with a map projection using global atmospheric water vapor data, including sphere clipping and custom color scheme.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"equal-earth\",\n  color: {\n    scheme: \"BuPu\",\n    domain: [0, 6],\n    legend: true,\n    label: \"Water vapor (cm)\"\n  },\n  marks: [\n    Plot.contour(vapor, {\n      fill: Plot.identity,\n      width: 360,\n      height: 180,\n      x1: -180,\n      y1: 90,\n      x2: 180,\n      y2: -90,\n      blur: 1,\n      stroke: \"black\",\n      strokeWidth: 0.5,\n      clip: \"sphere\"\n    }),\n    Plot.sphere({stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Sort Transform for Area Charts\nDESCRIPTION: Fixes the previous example by using the sort transform to ensure data is in chronological order before plotting the area chart.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(d3.shuffle(aapl.slice()), {x: \"Date\", y: \"Close\", sort: \"Date\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Seattle Temperature Heatmap\nDESCRIPTION: Visualizes Seattle temperature data using grouped cell marks to show maximum temperatures by month and date.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  padding: 0,\n  y: {tickFormat: Plot.formatMonth(\"en\", \"short\")},\n  marks: [\n    Plot.cell(seattle, Plot.group({fill: \"max\"}, {\n      x: (d) => d.date.getUTCDate(),\n      y: (d) => d.date.getUTCMonth(),\n      fill: \"temp_max\",\n      inset: 0.5\n    }))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Window Transform with Temperature Data\nDESCRIPTION: Example of using window transform to create a band chart showing daily high and low temperatures in San Francisco with rolling averages. This demonstrates the basic usage of Plot.windowY to compute moving averages.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Temperature (°F)\"\n  },\n  marks: [\n    Plot.areaY(sftemp, {x: \"date\", y1: \"low\", y2: \"high\", fillOpacity: 0.3}),\n    Plot.lineY(sftemp, Plot.windowY(k, {x: \"date\", y: \"low\", stroke: \"blue\"})),\n    Plot.lineY(sftemp, Plot.windowY(k, {x: \"date\", y: \"high\", stroke: \"red\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting Earthquakes on a World Map with Plot.js\nDESCRIPTION: This example shows how to create a world map with earthquakes plotted as circles. The size of each circle represents the earthquake's magnitude, and the map uses an equirectangular projection.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"equirectangular\",\n  r: {transform: (r) => Math.pow(10, r)}, // Richter to amplitude\n  marks: [\n    Plot.geo(land, {fill: \"currentColor\", fillOpacity: 0.2}),\n    Plot.sphere(),\n    Plot.geo(earthquakes, {\n      r: \"mag\",\n      fill: \"red\",\n      fillOpacity: 0.2,\n      stroke: \"red\",\n      title: \"title\",\n      href: \"url\",\n      target: \"_blank\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Wind Map with Plot's Vector Mark\nDESCRIPTION: Demonstrates how to use Plot's vector mark to create a wind map, showing wind speed and direction for a section of western Europe.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 10,\n  aspectRatio: 1,\n  color: {label: \"Speed (m/s)\", zero: true, legend: true},\n  marks: [\n    Plot.vector(wind, {\n      x: \"longitude\",\n      y: \"latitude\",\n      rotate: ({u, v}) => Math.atan2(u, v) * 180 / Math.PI,\n      length: ({u, v}) => Math.hypot(u, v),\n      stroke: ({u, v}) => Math.hypot(u, v)\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Transform Method for Channel Values in Observable Plot\nDESCRIPTION: Demonstrates how to use a transform method to specify channel values, which is invoked once for the entire array of data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(numbers, {x: {transform: (data) => data}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-Series Bar Chart with Interval Option\nDESCRIPTION: Shows how to create a time-series bar chart of world population with an optional interval setting for uniformity.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barY(timeseries, {x: \"year\", y: \"population\"})\n  .plot({x: {tickFormat: \"\", interval: checked ? 1 : undefined}})\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Area Charts with fill Channel\nDESCRIPTION: Creates a stacked area chart by using the fill channel to group data by industry, which implicitly applies the stack transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    transform: (d) => d / 1000,\n    label: \"Unemployed (thousands)\"\n  },\n  marks: [\n    Plot.areaY(industries, {x: \"date\", y: \"unemployed\", fill: \"industry\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatterplot with Color Legend for Olympic Athletes\nDESCRIPTION: Generates a scatterplot of Olympic athletes' body measurements with a color legend for sex. It uses Plot.plot to create the visualization with a dot mark and enables the color legend.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/legends.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.dot(olympians, {x: \"weight\", y: \"height\", stroke: \"sex\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamgraph with Wiggle Offset\nDESCRIPTION: Creates a centered streamgraph by using the wiggle offset option with the implicit stack transform applied to industry unemployment data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    transform: (d) => d / 1000,\n    label: \"Unemployed (thousands)\"\n  },\n  marks: [\n    Plot.areaY(industries, {x: \"date\", y: \"unemployed\", fill: \"industry\", offset: \"wiggle\"}),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Bar Chart with Plot.js\nDESCRIPTION: This snippet demonstrates how to create a basic vertical bar chart using the Plot.barY function. It uses 'letter' for the x-axis and 'frequency' for the y-axis, presumably working with an 'alphabet' dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.barY(alphabet, {x: \"letter\", y: \"frequency\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bivariate Hexbin Plot\nDESCRIPTION: This example creates a bivariate hexbin plot, using the r channel for count and the fill channel for the mode of sex in each hexagon. It visualizes the distribution of male and female Olympic athletes by weight and height.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, Plot.hexbin({fill: \"mode\", r: \"count\"}, {x: \"weight\", y: \"height\", fill: \"sex\"}))\n  .plot()\n```\n\n----------------------------------------\n\nTITLE: Candlestick Chart with Bollinger Bands\nDESCRIPTION: Complex visualization combining candlestick chart using rule marks with underlying Bollinger bands for volatility indication.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bollinger.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {domain: [new Date(\"2014-01-01\"), new Date(\"2014-06-01\")]},\n  y: {domain: [68, 92], grid: true},\n  color: {domain: [-1, 0, 1], range: [\"red\", \"black\", \"green\"]},\n  marks: [\n    Plot.bollingerY(aapl, {x: \"Date\", y: \"Close\", stroke: \"none\", clip: true}),\n    Plot.ruleX(aapl, {x: \"Date\", y1: \"Low\", y2: \"High\", strokeWidth: 1, clip: true}),\n    Plot.ruleX(aapl, {x: \"Date\", y1: \"Open\", y2: \"Close\", strokeWidth: 3, stroke: (d) => Math.sign(d.Close - d.Open), clip: true})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Line Chart with Min and Max Values Labeled\nDESCRIPTION: Example using Plot.selectMinY and Plot.selectMaxY to label the extreme values in a stock price line chart. Different frameAnchor values are used to position labels appropriately.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.text(aapl, Plot.selectMinY({x: \"Date\", y: \"Close\", text: \"Close\", frameAnchor: \"top\", dy: 6})),\n    Plot.text(aapl, Plot.selectMaxY({x: \"Date\", y: \"Close\", text: \"Close\", frameAnchor: \"bottom\", dy: -6}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with ObservableHQ Plot\nDESCRIPTION: Illustrates the creation of a horizontal bar chart using the bar mark in ObservableHQ Plot. The chart shows letter frequencies in the alphabet.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.barX(alphabet, {x: \"frequency\", y: \"letter\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Filtered Data Array Bar Chart\nDESCRIPTION: Shows how to filter data directly using Array.filter() before plotting, which affects the scale domains.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/filter.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.barY(\n      alphabet.filter((d) => /[aeiouy]/i.test(d.letter)),\n      {x: \"letter\", y: \"frequency\"}\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Median Points with Custom Selector Function\nDESCRIPTION: Example of creating a custom selector function that finds the point closest to the median value within each series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select({y: selectorMedian}, {x: \"year\", y: \"revenue\", fill: \"format\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction selectorMedian(I, V) {\n  const median = d3.median(I, (i) => V[i]);\n  const i = d3.least(I, (i) => Math.abs(V[i] - median));\n  return [i];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cumulative Distribution Plot with Observable Plot\nDESCRIPTION: Demonstrates how to create a cumulative distribution plot using the binX transform with the cumulative option, showing the number of athletes with a given weight or less.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 60,\n  y: {grid: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", cumulative})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Heatmap with Observable Plot\nDESCRIPTION: Shows how to create a faceted heatmap using the binX transform and faceting system, comparing weight distributions across different sports.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 100,\n  padding: 0,\n  x: {grid: true},\n  fy: {domain: d3.groupSort(olympians.filter((d) => d.weight), (g) => d3.median(g, (d) => d.weight), (d) => d.sport)},\n  color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"},\n  marks: [Plot.rect(olympians, Plot.binX({fill: \"proportion-facet\"}, {x: \"weight\", fy: \"sport\", inset: 0.5}))]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Two-Dimensional Heatmap with Observable Plot\nDESCRIPTION: Shows how to create a 2D heatmap using the bin transform, encoding the count of athletes in each bin as color. Uses a color scheme based on dark/light mode.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .rect(olympians, Plot.bin({fill: \"count\"}, {x: \"weight\", y: \"height\"}))\n  .plot({color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"}});\n```\n\n----------------------------------------\n\nTITLE: Creating a Sorted Heatmap with Group Transform\nDESCRIPTION: Example of a heatmap showing median traffic by hour and location. The group transform aggregates the data by both hour and location dimensions, and the results are visualized as a color-coded cell grid.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 120,\n  padding: 0,\n  y: {label: null},\n  color: {scheme: \"{{$dark ? \\\"turbo\\\" : \\\"YlGnBu\\\"}}\", legend: true, zero: true},\n  marks: [\n    Plot.cell(\n      traffic,\n      Plot.group(\n        {fill: \"median\"},\n        {x: (d) => d.date.getUTCHours(), y: \"location\", fill: \"vehicles\", inset: 0.5, sort: {y: \"fill\"}}\n      )\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Chart with Plot.areaY Shorthand\nDESCRIPTION: Shows how to create an area chart using Plot.areaY shorthand, which generates an area with baseline at y=0 and uses the data array values for the upper boundary.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Temporal Bar Chart with Interval Option\nDESCRIPTION: Creates a bar chart using rectY mark with day interval, showing proper temporal spacing and making missing data (weekends/holidays) visible.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/interval.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    transform: (d) => d / 1e6,\n    label: \"Daily trade volume (millions)\"\n  },\n  marks: [\n    Plot.rectY(aapl.slice(-40), {x: \"Date\", interval: \"day\", y: \"Volume\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Plot.transform for Custom Transforms (JavaScript)\nDESCRIPTION: This example shows how to use Plot.transform to compose custom transforms with basic transforms. It randomly filters out half of the data points.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.transform(options, (data, facets) => {\n  return {\n    data,\n    facets: facets.map((I) => I.filter(() => Math.random() > 0.5))\n  };\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Hexbin Transform in Observable Plot (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the hexbin transform in Observable Plot. It creates a dot plot of olympians data, with hexagonal binning applied to the 'weight' and 'height' dimensions, and the fill color representing the count of points in each hexagon.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(olympians, Plot.hexbin({fill: \"count\"}, {x: \"weight\", y: \"height\"}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Line Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create a basic line chart of Apple stock closing prices using the Plot.line function.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.line(aapl, {x: \"Date\", y: \"Close\"}).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Histogram with Observable Plot\nDESCRIPTION: Demonstrates how to create a basic histogram using the binX transform and rectY mark to show the distribution of Olympic athletes' weights.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Manually Binned Data with RectY\nDESCRIPTION: Example of visualizing the manually binned data using Plot's rectY mark, assigning bin properties to the x1, x2, and y2 channels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(bins, {x1: \"x0\", x2: \"x1\", y2: \"length\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Static Annotations with Tip Mark in Observablehq Plot\nDESCRIPTION: Illustrates how to use the tip mark for static annotations in a line chart, providing context for specific data points.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.tip(\n      [`Apple stock reaches a new high of $133 on Feb. 23, 2015. The release of the first Apple Watch, slated for April, is hotly anticipated.`],\n      {x: new Date(\"2015-02-23\"), y: 133, dy: -3, anchor: \"bottom\"}\n    ),\n    Plot.tip(\n      [`Apple stock drops 8% after the company misses Q2 revenue targets and reports declining iPhone sales. It reaches a two-year low of $90.34 on May 12.`],\n      {x: new Date(\"2016-05-12\"), y: 90.34, dy: 3, anchor: \"top\"}\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Area, Line, and Rule Marks\nDESCRIPTION: Creates an area chart with a line to emphasize the topline and a rule to emphasize the baseline at y=0. Uses fillOpacity to make the area semi-transparent.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.areaY(aapl, {x: \"Date\", y: \"Close\", fillOpacity: 0.3}),\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Data Binning with D3\nDESCRIPTION: Example of using D3's bin function to manually create histogram bins for Olympic athlete weights, which can then be used with Plot's rect mark for visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbins = d3.bin().thresholds(80).value((d) => d.weight)(olympians)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shockwave with Geodesic Circles in Plot.js\nDESCRIPTION: This example shows how to create a visualization of a shockwave using geodesic circles. It uses the Equal Earth projection and a color scale to represent distance from the origin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {\n    type: \"equal-earth\",\n    rotate: [90, 0]\n  },\n  color: {\n    legend: true,\n    label: \"Distance from Tonga (km)\",\n    transform: (d) => 111.2 * d, // degrees to km\n    zero: true\n  },\n  marks: [\n    Plot.geo(land),\n    Plot.geo([0.5, 179.5].concat(d3.range(10, 171, 10)), {\n      geometry: d3.geoCircle().center([-175.38, -20.57]).radius((r) => r),\n      stroke: (r) => r,\n      strokeWidth: 2\n    }),\n    Plot.sphere()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Tree Visualization\nDESCRIPTION: Advanced tree plot implementation using the flare dataset with custom margins and dimensions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  margin: 10,\n  marginLeft: 30,\n  marginRight: 160,\n  width: 688,\n  height: 1800,\n  marks: [\n    Plot.tree(flare, {path: \"name\", delimiter: \".\", textStroke: \"var(--vp-c-bg)\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Voronoi Scatterplot with Observable Plot\nDESCRIPTION: Demonstrates how to create a scatterplot with Voronoi cells using Observable Plot. The plot shows penguin data with species differentiated by color in both the Voronoi cells and dots.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.voronoi(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", fill: \"species\", fillOpacity: 0.2, stroke: \"var(--vp-c-bg)\"}),\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", fill: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Scatterplot Density with Voronoi Mesh\nDESCRIPTION: Creates a plot that visualizes the local density of a scatterplot using a Voronoi mesh. The mesh outlines are drawn once, providing a cleaner visualization of point density.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.voronoiMesh(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\"}),\n    Plot.dot(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", fill: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Representing Tabular Data as JavaScript Object Array\nDESCRIPTION: This snippet shows how to represent tabular data (Apple stock prices) as an array of JavaScript objects. Each object represents a row with properties for Date, Open, High, Low, Close, and Volume.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naapl = [\n  {Date: new Date(\"2013-05-13\"), Open: 64.501427, High: 65.414284, Low: 64.500000, Close: 64.962860, Volume: 79237200},\n  {Date: new Date(\"2013-05-14\"), Open: 64.835716, High: 65.028572, Low: 63.164288, Close: 63.408573, Volume: 111779500},\n  {Date: new Date(\"2013-05-15\"), Open: 62.737144, High: 63.000000, Low: 60.337143, Close: 61.264286, Volume: 185403400},\n  {Date: new Date(\"2013-05-16\"), Open: 60.462856, High: 62.549999, Low: 59.842857, Close: 62.082859, Volume: 150801000},\n  {Date: new Date(\"2013-05-17\"), Open: 62.721428, High: 62.869999, Low: 61.572857, Close: 61.894287, Volume: 106976100}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Stem and Leaf Plot for Caltrain Schedule\nDESCRIPTION: Uses stacked text to create a stem and leaf plot of Caltrain's Palo Alto station schedule. Demonstrates color encoding for different train types and custom axis labeling.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width: 240,\n  axis: null,\n  x: {type: \"point\"},\n  y: {type: \"point\", domain: d3.range(4, 25)},\n  color: {domain: \"NLB\", range: [\"currentColor\", \"peru\", \"brown\"], legend: true},\n  marks: [\n    Plot.text([[0.5, 4]], {text: [\"Northbound\"], textAnchor: \"start\", dx: 16}),\n    Plot.text([[-0.5, 4]], {text: [\"Southbound\"], textAnchor: \"end\", dx: -16}),\n    Plot.text(d3.range(5, 25), {x: 0, y: Plot.identity, text: (y) => `${y % 12 || 12}${y % 24 >= 12 ? \"p\": \"a\"}`}),\n    Plot.text(caltrain, Plot.stackX2({x: (d) => d.orientation === \"N\" ? 1 : -1, y: \"hours\", fill: \"type\", text: \"minutes\"})),\n    Plot.ruleX([-0.5, 0.5])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Hexbin Map with GeoCentroid Transform\nDESCRIPTION: Demonstrates using Plot.geoCentroid with hexbin to create a density map of US counties. The geoCentroid transform is used for better performance with large datasets.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(counties, Plot.hexbin({r:\"count\"}, Plot.geoCentroid())).plot({projection: \"albers\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Bar Chart\nDESCRIPTION: Shows how to create stacked bars using groupX transform with fill channel for sex categorization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 100,\n  x: {label: null, tickRotate: 90},\n  y: {grid: true},\n  color: {legend: true},\n  marks: [\n    Plot.barY(olympians, Plot.groupX({y: \"count\"}, {x: \"sport\", fill: \"sex\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Tree Plot Implementation\nDESCRIPTION: Example of creating a basic tree plot with Greek gods data using Plot.plot with tree mark.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  height: 100,\n  margin: 10,\n  marginLeft: 40,\n  marginRight: 120,\n  marks: [\n    Plot.tree(gods, {textStroke: \"var(--vp-c-bg)\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Binned Box Plot with Manual Grouping\nDESCRIPTION: Creates a box plot with manually binned quantitative values using Math.floor for grouping, including custom axis formatting and grid lines.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/box.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 60,\n  y: {\n    grid: true,\n    label: \"Price\"\n  },\n  x: {\n    interval: 0.5,\n    label: \"Carats\",\n    labelAnchor: \"right\",\n    tickFormat: (x) => x.toFixed(1)\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.boxY(diamonds, {x: (d) => Math.floor(d.carat * 2) / 2, y: \"price\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram using Plot.bin in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a 2D histogram using the Plot.bin function. It bins data on both x and y axes, using weight and height as dimensions, and fills rectangles based on count.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rect(olympians, Plot.bin({fill: \"count\"}, {x: \"weight\", y: \"height\"}))\n```\n\n----------------------------------------\n\nTITLE: Contour Plot Method Definition\nDESCRIPTION: Function signature for creating a new contour plot mark with optional data and configuration options.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(volcano.values, {width: volcano.width, height: volcano.height, fill: Plot.identity})\n```\n\n----------------------------------------\n\nTITLE: IPO Valuations Visualization\nDESCRIPTION: Complex example showing IPO valuations over time with varying circle sizes and text overlays.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/dodge.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  insetRight: 10,\n  height: 790,\n  marks: [\n    Plot.dot(\n      ipos,\n      Plot.dodgeY({\n        x: \"date\",\n        r: \"rMVOP\",\n        title: (d) => `${d.NAME}\\n${(d.rMVOP / 1e3).toFixed(1)}B`,\n        fill: \"currentColor\"\n      })\n    ),\n    Plot.text(\n      ipos,\n      Plot.dodgeY({\n        filter: (d) => d.rMVOP > 5e3,\n        x: \"date\",\n        r: \"rMVOP\",\n        text: (d) => (d.rMVOP / 1e3).toFixed(),\n        fill: \"var(--vp-c-bg)\",\n        pointerEvents: \"none\"\n      })\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Tick Marks in Observable Plot\nDESCRIPTION: This example shows how to create a bar chart using barY for the bars and tickY to emphasize the upper bound of each bar, along with a ruleY to denote y = 0.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tick.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {label: null},\n  y: {percent: true},\n  marks: [\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", fillOpacity: 0.2}),\n    Plot.tickY(alphabet, {x: \"letter\", y: \"frequency\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Proportional Dot Heatmap\nDESCRIPTION: Demonstrates using dots with bin transform to create a two-dimensional distribution visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 640,\n  marginLeft: 60,\n  grid: true,\n  x: {label: \"Carats\"},\n  y: {label: \"Price ($)\"},\n  r: {range: [0, 20]},\n  marks: [\n    Plot.dot(diamonds, Plot.bin({r: \"count\"}, {x: \"carat\", y: \"price\", thresholds: 100}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing TSA Traveler Data 2020 vs 2019\nDESCRIPTION: Uses Plot.differenceY to compare the number of TSA travelers per day in 2020 against 2019, highlighting the impact of COVID-19 on air travel.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/difference.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {tickFormat: \"%b\"},\n  y: {grid: true, label: \"Travelers\"},\n  marks: [\n    Plot.axisY({label: \"Travelers per day (thousands, 2020 vs. 2019)\", tickFormat: (d) => d / 1000}),\n    Plot.ruleY([0]),\n    Plot.differenceY(tsa, {x: \"Date\", y1: \"2019\", y2: \"2020\", tip: {format: {x: \"%B %-d\"}}})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Finite State Machine Visualization\nDESCRIPTION: Plot example showing a finite state machine using arrows to represent transitions between states.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/arrow.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 60,\n  aspectRatio: 1,\n  axis: null,\n  marks: [\n    Plot.dot(markov.nodes, {r: 40}),\n    Plot.arrow(markov.edges, {\n      x1: ([[x1]]) => x1,\n      y1: ([[, y1]]) => y1,\n      x2: ([, [x2]]) => x2,\n      y2: ([, [, y2]]) => y2,\n      bend: true,\n      strokeWidth: ([,, value]) => value,\n      strokeLinejoin: \"miter\",\n      headLength: 24,\n      inset: 48\n    }),\n    Plot.text(markov.nodes, {text: [\"A\", \"B\", \"C\"], dy: 12}),\n    Plot.text(markov.edges, {\n      x: ([[x1, y1], [x2, y2]]) => (x1 + x2) / 2 + (y1 - y2) * 0.15,\n      y: ([[x1, y1], [x2, y2]]) => (y1 + y2) / 2 - (x1 - x2) * 0.15,\n      text: ([,, value]) => value\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Interactive Tip in Observablehq Plot\nDESCRIPTION: Demonstrates how to create a line chart of Apple stock prices with an interactive tip using the tip mark option in Observablehq Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(aapl, {x: \"Date\", y: \"Close\", tip: true}).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Rect Chart with Plot.rectY Shorthand\nDESCRIPTION: Demonstrates using Plot.rectY to create vertical rectangles, implicitly using the interval transform to position each rect between consecutive indices with a small inset for separation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Faceted Box Plot with Interval Scaling\nDESCRIPTION: Implements a box plot using faceting and interval scale options for improved binning of continuous data on the fx scale.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/box.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 60,\n  y: {\n    grid: true,\n    label: \"Price\"\n  },\n  fx: {\n    interval: 0.5,\n    label: \"Carats\",\n    labelAnchor: \"right\",\n    tickFormat: (x) => x.toFixed(1)\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.boxY(diamonds, {fx: \"carat\", y: \"price\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Numeric Interval\nDESCRIPTION: Demonstrates using a numeric interval value (5e6) to create bars with specific vertical spans rather than extending to zero.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/interval.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 80,\n  x: {type: \"band\"}, // ⚠️ not utc\n  y: {\n    grid: true,\n    transform: (d) => d / 1e6,\n    label: \"Daily trade volume (millions)\"\n  },\n  marks: [\n    Plot.barY(aapl.slice(-40), {x: \"Date\", y: \"Volume\", interval: 5e6}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Sort Transform for Highlighting\nDESCRIPTION: Uses the sort transform in a line chart of unemployment rates to highlight specific data series. The sort option ensures that highlighted lines (for Michigan) are drawn on top.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Unemployment (%)\"\n  },\n  color: {\n    domain: [false, true],\n    range: [\"#ccc\", \"red\"]\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(bls, {\n      x: \"date\",\n      y: \"unemployment\",\n      z: \"division\",\n      sort: (d) => /, MI /.test(d.division),\n      stroke: (d) => /, MI /.test(d.division)\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Interval-based Area Plot with Y values\nDESCRIPTION: Creates an area plot with binned data using daily intervals, plotting temperature over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(observations, {x: \"date\", y: \"temperature\", interval: \"day\"})\n```\n\n----------------------------------------\n\nTITLE: Population vs Inequality Arrow Chart\nDESCRIPTION: Plot example showing inequality changes in US cities using arrows to connect 1980 and 2015 data points.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/arrow.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  inset: 10,\n  x: {\n    type: \"log\",\n    label: \"Population\"\n  },\n  y: {\n    label: \"Inequality\",\n    ticks: 4\n  },\n  color: {\n    scheme: \"BuRd\",\n    label: \"Change in inequality from 1980 to 2015\",\n    legend: true,\n    tickFormat: \"+f\"\n  },\n  marks: [\n    Plot.arrow(metros, {\n      x1: \"POP_1980\",\n      y1: \"R90_10_1980\",\n      x2: \"POP_2015\",\n      y2: \"R90_10_2015\",\n      bend: true,\n      stroke: (d) => d.R90_10_2015 - d.R90_10_1980\n    }),\n    Plot.text(metros, {\n      x: \"POP_2015\",\n      y: \"R90_10_2015\",\n      filter: \"highlight\",\n      text: \"nyt_display\",\n      fill: \"currentColor\",\n      stroke: \"var(--vp-c-bg)\",\n      dy: -6\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Map with Custom Domain and Inset\nDESCRIPTION: Shows how to create a map focused on a specific region using a custom domain and inset. It uses an azimuthal equidistant projection centered on a specific location.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {\n    type: \"azimuthal-equidistant\",\n    rotate: [-9, -34],\n    domain: circle,\n    inset: 10\n  },\n  marks: [\n    Plot.graticule(),\n    Plot.geo(land, {fill: \"currentColor\", fillOpacity: 0.3}),\n    Plot.geo(circle, {stroke: \"red\", strokeWidth: 2}),\n    Plot.frame()\n  ]\n})\n\ncircle = d3.geoCircle().center([9, 34]).radius(radius)()\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Area Charts\nDESCRIPTION: Creates small multiples of area charts using faceting to display unemployment data for different industries as separate areas arranged vertically.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 720,\n  axis: null,\n  marks: [\n    Plot.areaY(industries, {x: \"date\", y: \"unemployed\", fy: \"industry\"}),\n    Plot.text(industries, Plot.selectFirst({text: \"industry\", fy: \"industry\", frameAnchor: \"top-left\", dx: 6, dy: 6})),\n    Plot.frame()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Plot.dotX Shorthand\nDESCRIPTION: Shows how to create a dot plot using Plot.dotX, which displays the distribution of values along the x-axis without preserving their order in the original array.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dotX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Sorted Dot Map\nDESCRIPTION: Demonstrates dot sorting with a U.S. county population map using geo-centroid positioning.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.4}),\n    Plot.dot(counties, Plot.geoCentroid({\n      r: (d) => d.properties.population,\n      fill: \"currentColor\",\n      stroke: \"var(--vp-c-bg)\",\n      strokeWidth: 1,\n      sort: sorted ? undefined : null\n    }))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Data Loading and Processing Setup\nDESCRIPTION: Sets up data imports and reactive references using Vue.js composition API. Loads various datasets including geographical, time series, and demographic data using D3.js utilities. Processes and transforms data for visualization purposes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, shallowRef, onMounted} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\nimport driving from \"../data/driving.ts\";\nimport sftemp from \"../data/sf-temperatures.ts\";\nimport tdf from \"../data/tdf.ts\";\n\nconst beagle = shallowRef([]);\nconst bls = shallowRef([]);\nconst stateage = shallowRef([]);\nconst stocks = shallowRef([]);\nconst world = shallowRef(null);\nconst land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : {type: null});\n\nonMounted(() => {\n  d3.text(\"../data/beagle.csv\").then((text) => (beagle.value = d3.csvParseRows(text).map(d3.autoType)));\n  d3.csv(\"../data/bls-metro-unemployment.csv\", d3.autoType).then((data) => (bls.value = data));\n  d3.json(\"../data/countries-110m.json\").then((data) => (world.value = data));\n  d3.csv(\"../data/us-population-state-age.csv\", d3.autoType).then((data) => {\n    const ages = data.columns.slice(1); // convert wide data to tidy data\n    stateage.value = Object.assign(ages.flatMap((age) => data.map((d) => ({state: d.name, age, population: d[age]}))), {ages});\n  });\n  Promise.all([\n    d3.csv(\"../data/amzn.csv\", d3.autoType),\n    d3.csv(\"../data/goog.csv\", d3.autoType),\n    d3.csv(\"../data/ibm.csv\", d3.autoType)\n  ]).then((datas) => {\n    stocks.value = d3.zip([\"AAPL\", \"AMZN\", \"GOOG\", \"IBM\"], [aapl].concat(datas)).flatMap(([Symbol, data]) => data.map((d) => ({Symbol, ...d})));\n  });\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Single Stacked Bar Chart with Observable Plot\nDESCRIPTION: Demonstrates creation of a proportional stacked bar chart showing athlete distribution by sport, with text labels for larger segments.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 100,\n  x: {percent: true},\n  marks: [\n    Plot.barX(\n      olympians,\n      Plot.stackX(\n        {order: \"x\", reverse: true},\n        Plot.groupZ(\n          {x: \"proportion\"},\n          {z: \"sport\", fillOpacity: 0.2, inset: 0.5}\n        )\n      )\n    ),\n    Plot.text(\n      olympians,\n      Plot.filter(\n        (D) => D.length > 200,\n        Plot.stackX(\n          {order: \"x\", reverse: true},\n          Plot.groupZ(\n            {x: \"proportion\", text: \"first\"},\n            {z: \"sport\", text: \"sport\", rotate: 90}\n          )\n        )\n      )\n    ),\n    Plot.ruleX([0, 1])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Dot Plot with Observable Plot\nDESCRIPTION: Creates a dot plot with grouped data showing count by sport and gold medals, with sex-based stroke coloring.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(olympians, Plot.group({r: \"count\"}, {x: \"sport\", y: \"gold\", stroke: \"sex\"}))\n```\n\n----------------------------------------\n\nTITLE: Plotting State Labels with Centroid Transform\nDESCRIPTION: Uses Plot.centroid to position state labels on a US map. The centroid transform is applied to a text mark to place labels at the center of each state.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(statemesh),\n    Plot.text(states, Plot.centroid({text: (d) => d.properties.name, fill: \"currentColor\", stroke: \"var(--vp-c-bg)\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Stacked Waffle Chart with Observable Plot\nDESCRIPTION: Shows how to create a stacked waffle chart using the waffleY mark and groupZ transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleY(olympians, Plot.groupZ({y: \"count\"}, {fill: \"sex\", sort: \"sex\", fx: \"weight\", unit: 10})).plot({fx: {interval: 10}, color: {legend: true}})\n```\n\n----------------------------------------\n\nTITLE: Using Tip Mark with Geo Data in Observablehq Plot\nDESCRIPTION: Demonstrates how to use the tip mark with geographic data to display state names on a map of the United States.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(states),\n    Plot.tip(states, Plot.geoCentroid({title: (d) => d.properties.name, anchor: \"bottom\", textPadding: 3}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using PlotFigure Component in Vue Application\nDESCRIPTION: This Vue component demonstrates how to use the PlotFigure component to render a scatter plot of penguin data using Observable Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport * as Plot from \"@observablehq/plot\";\nimport PlotFigure from \"./components/PlotFigure.js\";\nimport penguins from \"./assets/penguins.json\";\n</script>\n\n<template>\n  <h1>Plot + Vue</h1>\n  <PlotFigure\n    :options=\"{\n      marks: [\n        Plot.dot(penguins, {x: 'culmen_length_mm', y: 'culmen_depth_mm'}),\n      ],\n    }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Histogram with Observable Plot\nDESCRIPTION: Demonstrates how to create a horizontal histogram using the binY transform and rectX mark, showing the distribution of Olympic athletes' weights.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {grid: true},\n  marks: [\n    Plot.rectX(olympians, Plot.binY({x: \"count\"}, {y: \"weight\"})),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Categorical Data with Random-Walk Interpolation in Observable Plot\nDESCRIPTION: This snippet demonstrates how to use the raster mark with random-walk interpolation to visualize categorical data (penguin species) based on continuous variables.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.raster(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fill: \"species\", interpolate: \"random-walk\"}),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Waffle Chart with Survey Data in Observable Plot\nDESCRIPTION: Creates a complex waffle chart representing survey data with custom styling and additional marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  label: null,\n  height: 260,\n  marginTop: 20,\n  marginBottom: 70,\n  title: \"Subdued\",\n  subtitle: \"Of 120 surveyed Syrian teenagers:\",\n  marks: [\n    Plot.axisFx({lineWidth: 10, anchor: \"bottom\", dy: 20}),\n    Plot.waffleY({length: 1}, {y: 120, fillOpacity: 0.4, rx: \"100%\"}),\n    Plot.waffleY(survey, {fx: \"question\", y: \"yes\", rx: \"100%\", fill: \"orange\"}),\n    Plot.text(survey, {fx: \"question\", text: (d) => (d.yes / 120).toLocaleString(\"en-US\", {style: \"percent\"}), frameAnchor: \"bottom\", lineAnchor: \"top\", dy: 6, fill: \"orange\", fontSize: 24, fontWeight: \"bold\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Top-Down Area Chart with Reversed Y Scale\nDESCRIPTION: Demonstrates how to create a \"hanging\" area chart that grows downward by reversing the y scale direction.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    label: null\n  },\n  y: {\n    grid: true,\n    reverse: true\n  },\n  marks: [\n    Plot.areaY(aapl, {x: \"Date\", y: \"Close\", fillOpacity: 0.3}),\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating 1D Histogram using Plot.binX in JavaScript\nDESCRIPTION: This snippet shows how to create a 1D histogram using the Plot.binX function. It bins data on the x-axis using weight, and sets the y-axis to represent the count of items in each bin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\"}))\n```\n\n----------------------------------------\n\nTITLE: Basic X-Axis Configuration\nDESCRIPTION: Shows basic X-axis setup with bottom anchor and custom tick spacing.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisX({anchor: \"bottom\", tickSpacing: 80})\n```\n\n----------------------------------------\n\nTITLE: Rasterizing SVG to PNG in Node.js using Sharp\nDESCRIPTION: This Node.js snippet demonstrates how to rasterize an SVG plot generated by Observable Plot into a PNG image using the Sharp library.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.stdout.write(await sharp(Buffer.from(plot.outerHTML, \"utf-8\")).png().toBuffer());\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Bar Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create a bar chart with text labels using Observable Plot. The chart displays letter frequencies with percentage labels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  label: null,\n  y: {\n    grid: true,\n    label: \"Frequency (%)\",\n    percent: true\n  },\n  marks: [\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\"}),\n    Plot.text(alphabet, {x: \"letter\", y: \"frequency\", text: (d) => (d.frequency * 100).toFixed(1), dy: -6, lineAnchor: \"bottom\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Observable Plot\nDESCRIPTION: Shows how to create a basic dot plot using Plot.dot() function, binding 'units' to the x-axis and 'fruit' to the y-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(sales, {x: \"units\", y: \"fruit\"})\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with D3 in Vue's onMounted Lifecycle Hook\nDESCRIPTION: Loads Apple stock data from a CSV file using D3's csv function when the Vue component is mounted. The data is automatically converted using d3.autoType.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  d3.csv(\"../data/aapl.csv\", d3.autoType).then((data) => (aapl.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Sorted Traffic Plot with GroupY Transform\nDESCRIPTION: Example of using the group transform to calculate and display median traffic values by location. The plot shows all data points with low opacity and highlights the median values in red.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 120,\n  x: {label: \"Vehicles per hour (thousands)\", transform: (x) => x / 1000},\n  y: {label: null},\n  marks: [\n    Plot.ruleX([0]),\n    Plot.tickX(\n      traffic,\n      {x: \"vehicles\", y: \"location\", strokeOpacity: 0.3}\n    ),\n    Plot.tickX(\n      traffic,\n      Plot.groupY(\n        {x: \"median\"},\n        {x: \"vehicles\", y: \"location\", stroke: \"red\", strokeWidth: 4, sort: {y: \"x\"}}\n      )\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting County Centroids with Centroid Transform\nDESCRIPTION: Uses Plot.centroid to compute and plot centroids of US counties. The centroids are calculated after projection to screen coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(counties, Plot.centroid()).plot({projection: \"albers-usa\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Density Estimation Plot with Observable Plot\nDESCRIPTION: Shows how to create a density estimation plot using area and line marks with the binX transform, including empty bins for continuous representation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.areaY(olympians, Plot.binX({y: \"count\", filter: null}, {x: \"weight\", fillOpacity: 0.2})),\n    Plot.lineY(olympians, Plot.binX({y: \"count\", filter: null}, {x: \"weight\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: One-Dimensional Dot Plot\nDESCRIPTION: Shows frequency of letters using dot areas in a one-dimensional layout.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(alphabet, {x: \"letter\", r: \"frequency\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Cell Chart with Plot.cellX Shorthand\nDESCRIPTION: Demonstrates using Plot.cellX to create a cell-based visualization where the x-axis is ordinal and values are encoded by color (fill) rather than y-position.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.cellX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Lollipop Chart with ruleX\nDESCRIPTION: Uses Plot.ruleX with markerEnd option to create a lollipop chart of letter frequencies, demonstrating a stylistic alternative to bar charts.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {label: null, tickPadding: 6, tickSize: 0},\n  y: {percent: true},\n  marks: [\n    Plot.ruleX(alphabet, {x: \"letter\", y: \"frequency\", strokeWidth: 2, markerEnd: \"dot\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting County Centroids with GeoCentroid Transform\nDESCRIPTION: Uses Plot.geoCentroid to compute and plot centroids of US counties. The centroids are calculated before projection, in spherical coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(counties, Plot.geoCentroid()).plot({projection: \"albers-usa\"})\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Histogram Examples\nDESCRIPTION: Shows how Plot.auto() creates histograms for both quantitative and ordinal data types.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(olympians, {x: \"weight\"}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"island\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating County Bounding Boxes Plot\nDESCRIPTION: Creates a plot showing geographic bounding boxes of U.S. counties using the rect mark with Albers USA projection.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.rect(countyboxes, {\n      x1: \"0\", // or ([x1]) => x1\n      y1: \"1\", // or ([, y1]) => y1\n      x2: \"2\", // or ([,, x2]) => x2\n      y2: \"3\", // or ([,,, y2]) => y2\n      stroke: \"currentColor\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Text Mark Plot\nDESCRIPTION: Creates a text mark visualization using driving data, plotting miles vs gas with year labels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.text(driving, {x: \"miles\", y: \"gas\", text: \"year\"})\n```\n\n----------------------------------------\n\nTITLE: Creating an Overlapping Histogram with Observable Plot\nDESCRIPTION: Shows how to create an overlapping histogram using the binX transform, generating y2 instead of y to avoid stacking. Uses blend modes for visibility.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y2: \"count\"}, {x: \"weight\", fill: \"sex\", mixBlendMode: \"{{$dark ? \"screen\" : \"multiply\"}}\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: WindowY Transform for Vertical Data\nDESCRIPTION: Example of using windowY, which applies window transform to y-values. This is the most common use case for creating rolling statistics in time series and other vertical data visualizations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.windowY(24, {x: \"Date\", y: \"Anomaly\"})\n```\n\n----------------------------------------\n\nTITLE: Drawing Delaunay Mesh for Grouped Data\nDESCRIPTION: Illustrates how to create a Delaunay mesh for grouped data, where the mesh is computed separately for each species of penguin and colored accordingly.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.delaunayMesh(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", z: \"species\", stroke: \"species\", strokeOpacity: 0.5}),\n    Plot.dot(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", fill: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Stroked Contours with Observable Plot\nDESCRIPTION: Demonstrates how to create stroked contours using the contour mark in Observable Plot, visualizing volcano topography data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(volcano.values, {width: volcano.width, height: volcano.height}).plot()\n```\n\n----------------------------------------\n\nTITLE: GroupY Transform Example\nDESCRIPTION: Demonstrates groupY transform summing body mass values by species.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.groupY({x: \"sum\"}, {y: \"species\", x: \"body_mass_g\"})\n```\n\n----------------------------------------\n\nTITLE: Simpsons Barcode Plot\nDESCRIPTION: Creates a one-dimensional cell visualization of The Simpsons episodes ratings using color encoding.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    ticks: simpsons.filter((d) => d.number_in_season === 1).map((d) => d.id),\n    tickFormat: (x) => simpsons.find((d) => d.id === x).season,\n    label: \"Season\",\n    labelAnchor: \"right\",\n    labelArrow: true\n  },\n  color: {\n    type: \"linear\",\n    scheme: \"PiYG\"\n  },\n  marks: [\n    Plot.cell(simpsons, {x: \"id\", fill: \"imdb_rating\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Faceted Dodge Plot with Penguins Data\nDESCRIPTION: Demonstrates dodge transform with faceting, grouping penguins by species and coloring by sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/dodge.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  color: {legend: true},\n  marks: [\n    Plot.dot(penguins, Plot.dodgeX(\"middle\", {fx: \"species\", y: \"body_mass_g\", fill: \"sex\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Scales in ObservableHQ Plot\nDESCRIPTION: Demonstrates how to customize scales in a Plot, specifically setting a logarithmic y-scale with a custom domain and grid lines.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    type: \"log\",\n    domain: [30, 300],\n    grid: true\n  },\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Histogram with Observable Plot\nDESCRIPTION: Demonstrates how to create a stacked histogram using the binX transform with a fill channel, showing the distribution of weights by sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  color: {legend: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Temperature Anomaly Cell Plot\nDESCRIPTION: Creates a visualization of temperature anomalies using cell marks with interval scaling.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    ticks: d3.ticks(...d3.extent(hadcrut, (d) => d.year), 10),\n    tickFormat: \"d\",\n    interval: 1,\n    label: null\n  },\n  color: {\n    scheme: \"BuRd\"\n  },\n  marks: [\n    Plot.cell(hadcrut, {x: \"year\", fill: \"anomaly\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup code importing required dependencies and initializing reactive variables for Bollinger band parameters.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bollinger.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\n\nconst n = ref(20);\nconst k = ref(2);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bar Chart with GroupX Transform\nDESCRIPTION: Demonstrates how to create a vertical bar chart showing distribution of Olympic athletes by sport using the groupX transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 100,\n  x: {label: null, tickRotate: 90},\n  y: {grid: true},\n  marks: [\n    Plot.barY(olympians, Plot.groupX({y: \"count\"}, {x: \"sport\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Facet X-Axis Configuration\nDESCRIPTION: Shows facet X-axis setup with top anchor and no label.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisFx({anchor: \"top\", label: null})\n```\n\n----------------------------------------\n\nTITLE: Creating Area Plot with Observable Plot\nDESCRIPTION: Creates an area chart using Plot.area() with temporal x-axis and implicit baseline at y=0.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.area(timeSeries).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Y Values and Time Interval Binning\nDESCRIPTION: Creates a line chart with binned data using the binX transform and a day interval, useful for regularizing timestamped measurements.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nPlot.lineY(observations, {x: \"date\", y: \"temperature\", interval: \"day\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Histogram using Plot.rectX in JavaScript\nDESCRIPTION: This snippet shows how to create a horizontal histogram using Plot.rectX function. It uses the 'olympians' dataset, bins the data based on weight, and sets the x-axis to represent the count.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectX(olympians, Plot.binY({x: \"count\"}, {y: \"weight\"}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Vertical Bar Chart with Plot\nDESCRIPTION: Demonstrates how to create a simple vertical bar chart using the barY mark, showing letter frequencies in the English alphabet.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.barY(alphabet, {x: \"letter\", y: \"frequency\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Line Chart Example\nDESCRIPTION: Demonstrates creating a line chart using Plot.auto() with AAPL stock data plotting Date vs Close price.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(aapl, {x: \"Date\", y: \"Close\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Tip Mark with Paired Channels in Observablehq Plot\nDESCRIPTION: Demonstrates the use of tip mark with paired channels (x1 & x2, y1 & y2) in a histogram of Olympic athletes' weights.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\", tip: true})).plot()\n```\n\n----------------------------------------\n\nTITLE: Vowels-Only Bar Chart with Filter Transform\nDESCRIPTION: Demonstrates filtering to show only vowels while maintaining the complete x-axis scale domain.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/filter.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.barY(alphabet, {\n      filter: (d) => /[aeiouy]/i.test(d.letter),\n      x: \"letter\",\n      y: \"frequency\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Random Normal Distribution with ruleX\nDESCRIPTION: Creates a plot of a random normal distribution using Plot.ruleX with reduced opacity for better density perception.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {domain: [-4, 4]},\n  marks: [\n    Plot.ruleX({length: 500}, {x: d3.randomNormal(), strokeOpacity: 0.2})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Function-based Raster Visualization in JavaScript\nDESCRIPTION: Creates a raster visualization by defining a function that calculates values based on x and y coordinates. This example uses the arctangent function to compute the angle from the origin to each point.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster({x1: -1, x2: 1, y1: -1, y2: 1, fill: (x, y) => Math.atan2(y, x)})\n```\n\n----------------------------------------\n\nTITLE: Adjusting Hexbin Size in Observable Plot\nDESCRIPTION: This example shows how to adjust the size of hexbins using the binWidth parameter. The r channel is used to represent the count, creating a bubble map-like visualization of Olympic athletes' weights and heights.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, Plot.hexbin({r: \"count\"}, {x: \"weight\", y: \"height\", binWidth}))\n  .plot()\n```\n\n----------------------------------------\n\nTITLE: Wrapped Facet Plot with Industry Data\nDESCRIPTION: Creates a wrapped facet display of unemployment data across industries using computed row and column numbers.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot((() => {\n  const n = 3; // number of facet columns\n  const keys = Array.from(d3.union(industries.map((d) => d.industry)));\n  const index = new Map(keys.map((key, i) => [key, i]));\n  const fx = (key) => index.get(key) % n;\n  const fy = (key) => Math.floor(index.get(key) / n);\n  return {\n    height: 300,\n    axis: null,\n    y: {insetTop: 10},\n    fx: {padding: 0.03},\n    marks: [\n      Plot.areaY(industries, Plot.normalizeY(\"extent\", {\n        x: \"date\",\n        y: \"unemployed\",\n        fx: (d) => fx(d.industry),\n        fy: (d) => fy(d.industry)\n      })),\n      Plot.text(keys, {fx, fy, frameAnchor: \"top-left\", dx: 6, dy: 6}),\n      Plot.frame()\n    ]\n  };\n})())\n```\n\n----------------------------------------\n\nTITLE: Explaining Projection Clipping Methods in Markdown\nDESCRIPTION: This snippet describes the supported projection clipping methods that can be used with the 'clip' option. It explains the default frame clipping, circular clipping, and the option to disable clipping.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* *frame* or true (default) - clip to the extent of the frame (including margins but not insets)\n* a number - clip to a great circle of the given radius in degrees centered around the origin\n* null or false - do not clip\n```\n\n----------------------------------------\n\nTITLE: Line Chart with Last Value Labeled Using selectLast\nDESCRIPTION: Example of using Plot.selectLast to label the last value in a line chart of stock prices. The text mark is positioned at the end of the line with appropriate anchoring.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.text(aapl, Plot.selectLast({x: \"Date\", y: \"Close\", text: \"Close\", frameAnchor: \"bottom\", dy: -6}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Color-Based Grid with Range Values\nDESCRIPTION: Example demonstrating dynamic grid coloring based on tick values using d3.range\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridX(d3.range(101), {stroke: Plot.identity, strokeOpacity: 1}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Binned Histogram\nDESCRIPTION: Shows how to create a histogram using automatic binning with the bin transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(d3.range(1000).map(d3.randomNormal()), Plot.binX()).plot()\n```\n\n----------------------------------------\n\nTITLE: Faceted Plot with Conditional Frame\nDESCRIPTION: Creates a faceted scatter plot of penguin data with a conditional frame based on user input.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  inset: 10,\n  marks: [\n    framed ? Plot.frame() : null,\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fill: \"#eee\"}),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fx: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Contour Plot with Custom Function Evaluation\nDESCRIPTION: Demonstrates creating a contour plot using a continuous mathematical function for value calculation based on x and y coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour({x1: 0, y1: 0, x2: 4, y2: 4, value: (x, y) => Math.sin(x) * Math.cos(y)})\n```\n\n----------------------------------------\n\nTITLE: Symbol Channel Scatterplot\nDESCRIPTION: Demonstrates using different symbols and colors to represent categories in a scatterplot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  x: {label: \"Body mass (g)\"},\n  y: {label: \"Flipper length (mm)\"},\n  symbol: {legend: true},\n  marks: [\n    Plot.dot(penguins, {x: \"body_mass_g\", y: \"flipper_length_mm\", stroke: \"species\", symbol: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Population Spikes from Geographic Data with Plot.spike()\nDESCRIPTION: Creates spike visualizations using county geographic centroids, with each spike's length corresponding to the county's population. The spike function is a specialized version of vector with preset styling defaults.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.spike(counties, Plot.geoCentroid({length: (d) => d.properties.population}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Optional Aspect Ratio in JavaScript\nDESCRIPTION: This code creates a scatter plot of penguin measurements with an optional fixed aspect ratio. It demonstrates the use of the aspectRatio option and includes a color legend.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  grid: true,\n  inset: 10,\n  aspectRatio: fixed ? 1 : undefined,\n  color: {legend: true},\n  marks: [\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Contours from Continuous Function in Observable Plot\nDESCRIPTION: Shows how to create contours using a continuous function instead of discrete data points, visualizing a trigonometric function.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  x: {tickSpacing: 80, label: \"x\"},\n  y: {tickSpacing: 80, label: \"y\"},\n  color: {type: \"diverging\", legend: true, label: \"sin(x) cos(y)\"},\n  marks: [\n    Plot.contour({\n      fill: (x, y) => Math.sin(x) * Math.cos(y),\n      x1: 0,\n      y1: 0,\n      x2: 6 * Math.PI,\n      y2: 4 * Math.PI\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Observable Plot with Vue Components\nDESCRIPTION: Setup code that imports Observable Plot, D3, and Vue dependencies, and initializes data for curve visualization. Creates a random dataset and sets up a reactive curve type.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/curves.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\n\nconst curve = ref(\"catmull-rom\");\nconst numbers = d3.range(20).map(d3.randomLcg(42));\n```\n\n----------------------------------------\n\nTITLE: Data-Based Axis Styling\nDESCRIPTION: Example of dynamically styling an axis based on data values\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginRight: 0,\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.gridY({x: (y) => aapl.find((d) => d.Close >= y)?.Date, insetLeft: -6}),\n    Plot.axisY({x: (y) => aapl.find((d) => d.Close >= y)?.Date, insetLeft: -6, textStroke: \"var(--vp-c-bg)\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Tip Mark with Negative Values in Observablehq Plot\nDESCRIPTION: Shows how the tip mark handles negative values in a mirrored histogram of Olympic athletes' weights.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(olympians, Plot.binX({y: \"sum\"}, {x: \"weight\", y: (d) => d.sex === \"male\" ? 1 : -1, fill: \"sex\", tip: true})).plot({y: {label: \"Frequency\"}})\n```\n\n----------------------------------------\n\nTITLE: Alphabet Frequency Cell Plot\nDESCRIPTION: Simple one-dimensional cell plot showing letter frequencies using color encoding.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.cell(alphabet, {x: \"letter\", fill: \"frequency\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Default Stroked Symbols Display\nDESCRIPTION: Shows the default set of symbols available for stroked dots.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dotX([\n  \"circle\",\n  \"plus\",\n  \"times\",\n  \"triangle2\",\n  \"asterisk\",\n  \"square2\",\n  \"diamond2\",\n], {stroke: \"currentColor\", symbol: Plot.identity}).plot()\n```\n\n----------------------------------------\n\nTITLE: Using Nearest Interpolation with Raster Mark for Magnetic Field Data\nDESCRIPTION: This snippet demonstrates the use of the 'nearest' interpolator with the raster mark to create a Voronoi-like diagram of magnetic field data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: \"nearest\"}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Combining Raster and Text Marks for Grid Visualization in JavaScript\nDESCRIPTION: This code combines a raster mark with a text mark to show both the raster image and the numerical values of the small grid.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.raster(grid.values, {\n      width: grid.width,\n      height: grid.height,\n      imageRendering: \"pixelated\" // to better show the grid\n    }),\n    Plot.text(grid.values, {\n      text: Plot.identity,\n      fill: \"white\",\n      x: (d, i) => i % grid.width + 0.5,\n      y: (d, i) => Math.floor(i / grid.width) + 0.5\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Observable Plot and Data in Vue.js\nDESCRIPTION: Sets up Observable Plot, D3, and Vue.js components. Imports data sources and initializes a reactive reference for travelers data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport alphabet from \"../data/alphabet.ts\";\nimport caltrain from \"../data/caltrain.ts\";\nimport driving from \"../data/driving.ts\";\n\nconst travelers = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/travelers.csv\", d3.autoType).then((data) => (travelers.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Plotting Random Walk with Cumulative Sum Map Transform\nDESCRIPTION: Creates a plot of a random walk using the map transform to compute a cumulative sum of random numbers from a normal distribution.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/map.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY({length: 600}, Plot.mapY(\"cumsum\", {y: d3.randomNormal()}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Derived Value Scatterplot\nDESCRIPTION: Demonstrates plotting with derived values by converting MPG to gallons per 100 miles using a transform function.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  inset: 10,\n  x: {label: \"Fuel consumption (gallons per 100 miles)\"},\n  y: {label: \"Horsepower\"},\n  marks: [\n    Plot.dot(cars, {x: (d) => 100 / d[\"economy (mpg)\"], y: \"power (hp)\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Varying Fill Color Within a Single Series\nDESCRIPTION: Demonstrates how to vary the fill color within a single area series by setting the z option to null, coloring the area by trading volume.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {\n    type: \"log\",\n    legend: true\n  },\n  marks: [\n    Plot.areaY(aapl, {x: \"Date\", y: \"Close\", fill: \"Volume\", z: null}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating X-oriented Dot Plot with Car Economy Data\nDESCRIPTION: Creates a dot plot that displays car economy data along the x-axis. This example uses the dotX method which assumes the provided array contains x-values when no explicit x option is specified.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dotX(cars.map((d) => d[\"economy (mpg)\"]))\n```\n\n----------------------------------------\n\nTITLE: Creating Text Mark with Y-axis Distribution\nDESCRIPTION: Creates a text mark visualization using frequency data from alphabet array, with y-axis positioning.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.textY(alphabet.map((d) => d.frequency))\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Error Bars using ruleX\nDESCRIPTION: Demonstrates using Plot.ruleX with the marker option to add error bars to a bar chart of letter frequencies.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {label: null},\n  y: {percent: true},\n  marks: [\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", fill: \"blue\"}),\n    Plot.ruleX(alphabet, {x: \"letter\", y1: (d) => d.frequency * 0.9, y2: (d) => d.frequency * 1.1, marker: \"tick\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dot Plot with Observable Plot\nDESCRIPTION: Creates a scatter plot using Plot.dot() for temporal data visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(timeSeries).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Mode-based Cell Plot\nDESCRIPTION: Demonstrates using the mode reducer to show prevalent sex in each sport using cell marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 80,\n  x: {tickRotate: 90},\n  marks: [\n    Plot.cell(olympians, Plot.groupX({fill: \"mode\"}, {fill: \"sex\", x: \"sport\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Red Warning Tip in Observable Plot\nDESCRIPTION: Example demonstrating how to create a red warning tip anchored at the bottom of the plot. Shows custom styling with fill color and anchor positioning.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tip([\"Danger! This tip is red.\"], {\n  anchor: \"bottom\",\n  frameAnchor: \"bottom\",\n  fill: \"red\"\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: Using Circle Symbol with Hexbin in Observable Plot\nDESCRIPTION: This snippet demonstrates how to use the circle symbol instead of hexagons with the hexbin transform. It creates a circular representation of the binned data for Olympic athletes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.circle(olympians, Plot.hexbin({r: \"count\"}, {x: \"weight\", y: \"height\"})).plot()\n```\n\n----------------------------------------\n\nTITLE: Rendering Volcano Topography Heatmap with Raster Mark in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a heatmap of volcano topography using the raster mark in Observable Plot. It uses a grid of elevation samples to render the image.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {label: \"Elevation (m)\", legend: true},\n  marks: [\n    Plot.raster(volcano.values, {width: volcano.width, height: volcano.height})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Overlapping Hexbin Plots\nDESCRIPTION: This snippet demonstrates how to create overlapping hexbin plots by using the z parameter to partition hexagons by an ordinal value (sex in this case). It uses stroke instead of fill to distinguish between male and female athletes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, Plot.hexbin({stroke: \"mode\", r: \"count\"}, {x: \"weight\", y: \"height\", z: \"sex\", stroke: \"sex\"}))\n  .plot()\n```\n\n----------------------------------------\n\nTITLE: Window Transform with Strict Option\nDESCRIPTION: Example showing how the strict option affects window transform behavior, particularly at the edges of data series where complete windows may not be available.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Temperature (°F)\"\n  },\n  marks: [\n    Plot.lineY(sftemp, {x: \"date\", y: \"low\", strokeOpacity: 0.3}),\n    Plot.lineY(sftemp, Plot.windowY({k: 28, anchor: \"end\", strict}, {x: \"date\", y: \"low\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Global Water Vapor with Projected Raster Mark\nDESCRIPTION: This code demonstrates the use of the raster mark with a projection to visualize global atmospheric water vapor data on a map.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"equal-earth\",\n  color: {\n    scheme: \"BuPu\",\n    domain: [0, 6],\n    legend: true,\n    label: \"Water vapor (cm)\"\n  },\n  marks: [\n    Plot.raster(vapor, {\n      fill: Plot.identity,\n      width: 360,\n      height: 180,\n      x1: -180,\n      y1: 90,\n      x2: 180,\n      y2: -90,\n      interpolate: \"barycentric\",\n      clip: \"sphere\"\n    }),\n    Plot.sphere({stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Gaps in Observable Plot\nDESCRIPTION: Demonstrates how to create a line chart with intentional gaps by setting y values to NaN for specific data points.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: (d) => d.Date.getUTCMonth() < 3 ? NaN : d.Close})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Advanced Examples\nDESCRIPTION: Demonstrates more complex configurations including aggregation, faceting, and sizing.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .auto(olympians, {x: \"date_of_birth\", y: {value: \"height\", reduce: \"mean\"}, color: \"sex\", mark: \"line\"})\n  .plot({color: {legend: true}})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(industries, {x: \"date\", y: {value: \"unemployed\", zero: true}, color: \"industry\"}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(aapl, {x: \"Date\", y: \"Close\", size: \"Volume\"}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {\n  x: \"body_mass_g\",\n  y: \"culmen_length_mm\",\n  fx: \"island\",\n  fy: \"species\"\n}).plot({\n  grid: true,\n  x: {ticks: 5},\n  marginRight: 70\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Gaussian Blur to Contours in Observable Plot\nDESCRIPTION: Demonstrates the use of the blur option to smooth contours in Observable Plot, applied to magnetic field strength data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", blur: 4}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Area Plot with Explicit Coordinates\nDESCRIPTION: Creates an area plot by explicitly specifying baseline and topline coordinates, useful when x and y values don't align.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.area(aapl, {x1: \"Date\", y1: 0, y2: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Creating One-Dimensional Dot Bins with Observable Plot\nDESCRIPTION: Demonstrates how to create one-dimensional dot bins using the binX transform, where dot size represents the count of athletes in each weight bin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  r: {range: [0, 14]},\n  marks: [\n    Plot.dot(olympians, Plot.binX({r: \"count\"}, {x: \"weight\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Window Transform with Anchor Option\nDESCRIPTION: Example demonstrating how the anchor option affects window alignment. This plot shows temperature data with a window transform using the specified anchor position (start, middle, or end).\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Temperature (°F)\"\n  },\n  marks: [\n    Plot.lineY(sftemp, {x: \"date\", y: \"high\", strokeOpacity: 0.3}),\n    Plot.lineY(sftemp, Plot.windowY({k: 28, anchor}, {x: \"date\", y: \"high\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Raster Visualization with Geographic Clipping\nDESCRIPTION: Shows how to create a raster visualization of atmospheric water vapor data clipped to geographic boundaries using Observable Plot's raster mark with interpolation and blur effects.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster(vapor, {\n  fill: Plot.identity,\n  width: 360,\n  height: 180,\n  x1: -180, y1: 90, x2: 180, y2: -90,\n  interpolate: \"barycentric\",\n  blur: 10,\n  clip: nation\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Waffle Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create a basic waffle chart using the waffleY mark in Observable Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleY([212, 207, 315, 11], {x: [\"apples\", \"bananas\", \"oranges\", \"pears\"]}).plot({height: 420})\n```\n\n----------------------------------------\n\nTITLE: Using binX with Count Reducer for Histogram\nDESCRIPTION: Demonstrates how to use the binX transform with a count reducer to generate a frequency histogram, binding the y channel to the count of items in each bin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"count\"}, {x: \"culmen_length_mm\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Normalized Overlapping Histogram\nDESCRIPTION: Example of combining binX and normalizeY transforms to create a percentage-based histogram that allows comparing weight distributions between sexes fairly despite different group sizes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {percent: true},\n  marks: [\n    Plot.rectY(\n      olympians,\n      Plot.normalizeY(\n        \"sum\", // normalize each series by the sum per series\n        Plot.binX(\n          {y2: \"count\"}, // disable implicit stack transform\n          {x: \"weight\", fill: \"sex\", mixBlendMode: \"{{$dark ? \\\"screen\\\" : \\\"multiply\\\"}}\"}\n        )\n      )\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart using Mark-based Plotting in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a bar chart using the mark-based plotting method. It uses Plot.barY() to create the mark and then calls .plot() on it to render the plot with a custom height.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nPlot.barY(alphabet, {x: \"letter\", y: \"frequency\"}).plot({height: 200})\n```\n\n----------------------------------------\n\nTITLE: Creating a Barcode Plot with Tick Marks in Observable Plot\nDESCRIPTION: This example demonstrates how to create a barcode plot using tickX to show the distribution of population percentages across age brackets for U.S. states.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tick.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    grid: true,\n    label: \"Population (%)\",\n    percent: true\n  },\n  y: {\n    domain: stateage.ages, // in age order\n    reverse: true,\n    label: \"Age (years)\",\n    labelAnchor: \"top\"\n  },\n  marks: [\n    Plot.ruleX([0]),\n    Plot.tickX(stateage, Plot.normalizeX(\"sum\", {z: \"state\", x: \"population\", y: \"age\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Waffle Chart with Plot.waffleY in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a vertical waffle chart using the Plot.waffleY function. It groups the data by sport and counts the occurrences for each group.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleY(olympians, Plot.groupX({y: \"count\"}, {x: \"sport\"}))\n```\n\n----------------------------------------\n\nTITLE: Creating Image Scatterplot with Default Size\nDESCRIPTION: Shows a basic image scatterplot using the default image size of 16x16 pixels, plotting favorable vs. unfavorable opinions of presidents.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/image.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  grid: true,\n  x: {label: \"Favorable opinion (%)\"},\n  y: {label: \"Unfavorable opinion (%)\"},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.ruleX([0]),\n    Plot.image(presidents, {\n      x: (d) => d[\"Very Favorable %\"] + d[\"Somewhat Favorable %\"],\n      y: (d) => d[\"Very Unfavorable %\"] + d[\"Somewhat Unfavorable %\"],\n      src: \"Portrait URL\",\n      title: \"Name\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: GroupZ Transform with Proportion\nDESCRIPTION: Shows groupZ transform calculating proportions based on species using fill channel.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.groupZ({x: \"proportion\"}, {fill: \"species\"})\n```\n\n----------------------------------------\n\nTITLE: Label Anchor Configuration for X-Axis\nDESCRIPTION: Shows different label anchor positions for X-axis with various combinations of top/bottom positioning and left/center/right alignment.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 80,\n  grid: true,\n  x: {type: \"linear\"},\n  marks: [\n    Plot.axisX({anchor: \"top\", label: \"top-left\", labelAnchor: \"left\"}),\n    Plot.axisX({anchor: \"top\", label: \"top-center\", labelAnchor: \"center\", ticks: []}),\n    Plot.axisX({anchor: \"top\", label: \"top-right\", labelAnchor: \"right\", ticks: []}),\n    Plot.axisX({anchor: \"bottom\", label: \"bottom-left\", labelAnchor: \"left\"}),\n    Plot.axisX({anchor: \"bottom\", label: \"bottom-center\", labelAnchor: \"center\", ticks: []}),\n    Plot.axisX({anchor: \"bottom\", label: \"bottom-right\", labelAnchor: \"right\", ticks: []})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transform in Observable Plot (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a custom transform function to filter data in a Plot.line chart. It shows unemployment rates only for Michigan metropolitan divisions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Unemployment (%)\"\n  },\n  color: {\n    domain: [false, true],\n    range: [\"#ccc\", \"red\"]\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(bls, {\n      x: \"date\",\n      y: \"unemployment\",\n      z: \"division\",\n      transform: (data, facets) => ({\n        data,\n        facets: facets.map((facet) => {\n          return facet.filter((i) => {\n            return /, MI /.test(data[i].division);\n          });\n        })\n      })\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Weighted Density Plot with Gender Distribution\nDESCRIPTION: Implements a weighted density plot showing gender distribution in penguin data with adjustable skew.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/density.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 10,\n  color: {legend: true},\n  marks: [\n    Plot.density(penguins.filter((d) => d.sex), {\n      weight: (d) => d.sex === \"FEMALE\" ? 1 - skew : 1 + skew,\n      x: \"flipper_length_mm\",\n      y: \"culmen_length_mm\",\n      strokeOpacity: 0.5,\n      clip: true\n    }),\n    Plot.dot(penguins.filter((d) => d.sex), {\n      x: \"flipper_length_mm\",\n      y: \"culmen_length_mm\",\n      stroke: \"sex\",\n      strokeOpacity: (d) => d.sex === \"FEMALE\" ? 1 - skew : 1 + skew\n    }),\n    Plot.frame()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Pre-binning Data Processing with Reducer\nDESCRIPTION: Demonstrates how to process data before binning by declaring a channel in both outputs and options, using a reducer to aggregate the pre-processed values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"count\", title: (names) => names.join(\"\\n\")}, {x: \"economy (mpg)\", title: \"name\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Image Beeswarm Plot with Presidential Portraits\nDESCRIPTION: Illustrates the use of the dodge transform to create a beeswarm plot with presidential portraits, avoiding overlaps.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/image.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 20,\n  height: 280,\n  marks: [\n    Plot.image(\n      presidents,\n      Plot.dodgeY({\n        x: \"First Inauguration Date\",\n        r: 20, // clip to a circle\n        preserveAspectRatio: \"xMidYMin slice\", // try not to clip heads\n        src: \"Portrait URL\",\n        title: \"Name\"\n      })\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: NYT-Style Axes\nDESCRIPTION: Emulates New York Times style axes with custom tick formatting and positioning\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  round: true,\n  marginLeft: 0,\n  x: {label: null, insetLeft: 36},\n  marks: [\n    Plot.gridY({\n      strokeDasharray: \"0.75,2\",\n      strokeOpacity: 1\n    }),\n    Plot.axisY({\n      tickSize: 0,\n      dx: 38,\n      dy: -6,\n      lineAnchor: \"bottom\",\n      tickFormat: (d, i, _) => (i === _.length - 1 ? `$${d}` : d)\n    }),\n    Plot.ruleY([0]),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\", markerEnd: \"dot\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Multiscale Date Axis\nDESCRIPTION: Implements hierarchical time intervals showing weeks, months, and years\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {round: true, nice: d3.utcWeek},\n  y: {inset: 6},\n  marks: [\n    Plot.frame({fill: \"currentColor\", fillOpacity: 0.1}),\n    Plot.frame({anchor: \"bottom\"}),\n    Plot.axisX({ticks: \"year\", tickSize: 28, tickPadding: -11, tickFormat: \"  %Y\", textAnchor: \"start\"}),\n    Plot.axisX({ticks: \"month\", tickSize: 16, tickPadding: -11, tickFormat: \"  %b\", textAnchor: \"start\"}),\n    Plot.gridX({ticks: \"week\", stroke: \"var(--vp-c-bg)\", strokeOpacity: 1, insetBottom: -0.5}),\n    Plot.line(aapl.slice(-340, -10), {x: \"Date\", y: \"Close\", curve: \"step\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dot Plot in JavaScript with Observable Plot\nDESCRIPTION: Creates a dot plot visualization with data points positioned according to 'units' on the x-axis and 'fruit' on the y-axis. This basic example demonstrates the core dot mark functionality.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(sales, {x: \"units\", y: \"fruit\"})\n```\n\n----------------------------------------\n\nTITLE: Formatting Date to ISO 8601 UTC String in JavaScript\nDESCRIPTION: Shows how to use Plot.formatIsoDate function to convert a Date object to the shortest equivalent ISO 8601 UTC string.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.formatIsoDate(new Date(\"2020-01-01T00:00:00.000Z\")) // \"2020-01-01\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Ordinal Line Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create a line chart with ordinal position values, showing age distribution across U.S. states.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    domain: stateage.ages, // in age order\n    label: \"Age range (years)\",\n    labelAnchor: \"right\",\n    labelArrow: true\n  },\n  y: {\n    label: \"Population (%)\",\n    percent: true,\n    grid: true\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(stateage, Plot.normalizeY(\"sum\", {x: \"age\", y: \"population\", z: \"state\", strokeWidth: 1}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Hexgrid with Custom Options\nDESCRIPTION: Demonstrates creating a hexgrid mark with custom styling options, specifically setting the stroke color to red.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/hexgrid.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.hexgrid({stroke: \"red\"})\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Barcode Plot\nDESCRIPTION: Creates a one-dimensional plot by disabling data reduction with the reduce: null option.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", y: {reduce: null}}).plot()\n```\n\n----------------------------------------\n\nTITLE: Generating a One-Dimensional Heatmap with Observable Plot\nDESCRIPTION: Creates a one-dimensional heatmap using the binX transform, setting the fill channel to represent count per bin. Uses a color scheme based on the dark/light mode.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .rect(olympians, Plot.binX({fill: \"count\"}, {x: \"weight\"}))\n  .plot({color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"}});\n```\n\n----------------------------------------\n\nTITLE: Basic Density Plot with Points\nDESCRIPTION: Creates a basic density plot visualization with points overlay using the faithful dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/density.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 10,\n  marks: [\n    Plot.density(faithful, {x: \"waiting\", y: \"eruptions\", stroke: \"blue\", strokeWidth: 0.25}),\n    Plot.density(faithful, {x: \"waiting\", y: \"eruptions\", stroke: \"blue\", thresholds: 4}),\n    Plot.dot(faithful, {x: \"waiting\", y: \"eruptions\", fill: \"currentColor\", r: 1.5})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup code for a Vue component importing Observable Plot, D3, and data sources. Includes reactive state setup for olympians data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\nimport industries from \"../data/bls-industry-unemployment.ts\";\nimport penguins from \"../data/penguins.ts\";\n\nconst olympians = shallowRef([{weight: 31, height: 1.21, sex: \"female\"}, {weight: 170, height: 2.21, sex: \"male\"}]);\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Map with GeoJSON in Observable Plot\nDESCRIPTION: Shows how to create a choropleth map of unemployment by U.S. county using GeoJSON data and the geo mark in Observable Plot. It also demonstrates the use of tooltips.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG-2024.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  color: {\n    type: \"quantile\",\n    n: 9,\n    scheme: \"blues\",\n    label: \"Unemployment (%)\",\n    legend: true\n  },\n  marks: [\n    Plot.geo(counties, {\n      fill: \"unemployment\",\n      title: (d) => `${d.properties.name} ${d.properties.unemployment}%`,\n      tip: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with Color Gradient Based on Index\nDESCRIPTION: Creates a map showing the Beagle's journey with color varying by index position, using equirectangular projection with land geography. Setting z to null forces a single line with varying stroke color.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  projection: \"equirectangular\",\n  marks: [\n    Plot.geo(land),\n    Plot.line(beagle, {stroke: (d, i) => i, z: null})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Mathematical Visualization with Polygon Clipping\nDESCRIPTION: Demonstrates using the clip mark option with an arbitrary polygon to visualize Math.atan2 over the unit circle, combining raster visualization with geometric clipping.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster({\n  x1: -1, x2: 1, y1: -1, y2: 1,\n  fill: (x, y) => Math.atan2(y, x),\n  clip: {\n    type: \"Polygon\",\n    coordinates: [\n      d3.range(0, 2 * Math.PI, 0.1).map((angle) => [Math.cos(angle), Math.sin(angle)])\n    ]\n  }\n}).plot({width: 300, aspectRatio: 1})\n```\n\n----------------------------------------\n\nTITLE: Wrapped Tick Labels\nDESCRIPTION: Example of wrapping long tick labels using the lineWidth option\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {percent: true},\n  marks: [\n    Plot.axisX({label: null, lineWidth: 8, marginBottom: 40}),\n    Plot.axisY({label: \"Responses (%)\"}),\n    Plot.barY(responses, {x: \"name\", y: \"value\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Contours from Irregular Grid Data in Observable Plot\nDESCRIPTION: Shows how to create contours from irregularly spaced data points using the contour mark, visualizing magnetic field strength data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\"}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating Interval-based Area Plot with X values\nDESCRIPTION: Creates an area plot with binned data using daily intervals, plotting temperature horizontally.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaX(observations, {y: \"date\", x: \"temperature\", interval: \"day\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Raster Visualization from Discrete Data in JavaScript\nDESCRIPTION: Creates a raster visualization using discrete data samples with specified width and height dimensions. The volcano.values represent a dataset of height values that will be displayed as a raster image.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster(volcano.values, {width: volcano.width, height: volcano.height})\n```\n\n----------------------------------------\n\nTITLE: Using binX with Sum Reducer\nDESCRIPTION: Shows how to use the binX transform with a sum reducer to aggregate values, specifying both x and y input channels to sum body_mass_g values for each bin of culmen_length_mm.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"sum\"}, {x: \"culmen_length_mm\", y: \"body_mass_g\"})\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Locale in JavaScript\nDESCRIPTION: Demonstrates the usage of Plot.formatNumber function to format a number (Math.PI) according to the US English locale.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.formatNumber(\"en-US\")(Math.PI) // \"3.142\"\n```\n\n----------------------------------------\n\nTITLE: Dashed Grid Lines Example\nDESCRIPTION: Example showing how to create dashed grid lines using strokeDasharray\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridX({strokeDasharray: \"2\", strokeOpacity: 1}).plot({x: {type: \"linear\"}})\n```\n\n----------------------------------------\n\nTITLE: Datawrapper-Style Date Axis\nDESCRIPTION: Shows time axis with consistent multi-line tick format\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.axisX({ticks: \"3 months\"}),\n    Plot.gridX(),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Plot API Data in Vue Component\nDESCRIPTION: Script setup block that imports data from an API data file to be used in the component.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/api.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport {data} from \"./data/api.data\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using range method with utcInterval for weekly boundaries\nDESCRIPTION: Example showing how to use Plot.utcInterval's range method to generate an array of weekly interval boundaries between two dates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.utcInterval(\"week\").range(new Date(\"2013-04-12T12:34:56Z\"), new Date(\"2013-05-12T12:34:56Z\")) // [2013-04-14, 2013-04-21, 2013-04-28, 2013-05-05, 2013-05-12]\n```\n\n----------------------------------------\n\nTITLE: Simplified Contour Plot with Fill Shorthand\nDESCRIPTION: Shows a shorthand notation for creating a contour plot where the fill channel is automatically promoted to the value channel.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(volcano.values, {width: volcano.width, height: volcano.height, fill: Plot.identity})\n```\n\n----------------------------------------\n\nTITLE: Using Random Walk Interpolation with Raster Mark in JavaScript\nDESCRIPTION: Creates a raster visualization using random walk interpolation. This technique initiates a random walk from each pixel, stopping when near a sample point, using the \"walk on spheres\" algorithm in two dimensions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: Plot.interpolatorRandomWalk()})\n```\n\n----------------------------------------\n\nTITLE: Default Filled Symbols Display\nDESCRIPTION: Shows the default set of symbols available for filled dots.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dotX([\n  \"circle\",\n  \"cross\",\n  \"diamond\",\n  \"square\",\n  \"star\",\n  \"triangle\",\n  \"wye\"\n], {fill: \"currentColor\", symbol: Plot.identity}).plot()\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Wrapping and Truncation\nDESCRIPTION: Demonstrates automatic line wrapping and text truncation using lineWidth and textOverflow options. Displays paragraphs from Moby-Dick with custom formatting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 320,\n  x: {type: \"point\", align: 0, axis: \"top\", tickSize: 0},\n  marks: [\n    Plot.text(\n      [\n        \"Call me Ishmael. Some years ago — never mind how long precisely — having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world. It is a way I have of driving off the spleen and regulating the circulation. Whenever I find myself growing grim about the mouth; whenever it is a damp, drizzly November in my soul; whenever I find myself involuntarily pausing before cof\\xadfin warehouses, and bringing up the rear of every funeral I meet; and especially whenever my hypos get such an upper hand of me, that it requires a strong moral principle to prevent me from deliberately stepping into the street, and methodically knocking people's hats off — then, I account it high time to get to sea as soon as I can. This is my substitute for pistol and ball. With a philosophical flourish Cato throws himself upon his sword; I quietly take to the ship. There is nothing surprising in this. If they but knew it, almost all men in their degree, some time or other, cherish very nearly the same feelings towards the ocean with me.\",\n        \"There now is your insular city of the Manhattoes, belted round by wharves as Indian isles by coral reefs — commerce surrounds it with her surf. Right and left, the streets take you waterward. Its extreme downtown is the battery, where that noble mole is washed by waves, and cooled by breezes, which a few hours previous were out of sight of land. Look at the crowds of water-gazers there.\",\n        \"Circumambulate the city of a dreamy Sabbath afternoon. Go from Corlears Hook to Coenties Slip, and from thence, by Whitehall, northward. What do you see? — Posted like silent sentinels all around the town, stand thousands upon thousands of mortal men fixed in ocean reveries. Some leaning against the spiles; some seated upon the pier-heads; some looking over the bulwarks of ships from China; some high aloft in the rigging, as if striving to get a still better seaward peep. But these are all landsmen; of week days pent up in lath and plaster — tied to counters, nailed to benches, clinched to desks. How then is this? Are the green fields gone? What do they here?\"\n      ],\n      {\n        x: (d, i) => 1 + i, // paragraph number\n        lineWidth: 20,\n        frameAnchor: \"top\",\n        textAnchor: \"start\"\n      }\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Text Mark with X-axis Distribution\nDESCRIPTION: Creates a text mark visualization using frequency data from alphabet array, with x-axis positioning.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.textX(alphabet.map((d) => d.frequency))\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Histogram using Plot.rectY in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a vertical histogram using Plot.rectY function. It uses the 'olympians' dataset, bins the data based on weight, and sets the y-axis to represent the count.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\"}))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the shiftX Transform\nDESCRIPTION: Demonstrates basic usage of the shiftX transform to shift date values by a week interval. This transform derives an x1 channel from the input x channel by offsetting the values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.shiftX(\"7 days\", {x: \"Date\", y: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Using Field Names for Data Access in ObservableHQ Plot\nDESCRIPTION: Shows how to use field names to access data from objects in an array when creating a line chart with multiple series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(linedata, {x: \"hour\", y: \"value\", stroke: \"sensor\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Using No Interpolation with Raster Mark in JavaScript\nDESCRIPTION: Creates a raster visualization with no interpolation, mapping samples directly to pixels. This example visualizes magnetic field data (MAG_IGRF90) based on longitude and latitude coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: Plot.interpolateNone})\n```\n\n----------------------------------------\n\nTITLE: Filter Transform Function Example\nDESCRIPTION: Demonstrates the syntax for creating an explicit filter transform with a test function.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/filter.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.filter((d) => /[aeiouy]/i.test(d.letter), {x: \"letter\", y: \"frequency\"})\n```\n\n----------------------------------------\n\nTITLE: Two-dimensional Faceted Scatter Plot\nDESCRIPTION: Shows a two-dimensional faceted scatter plot of penguin measurements across species and sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  marginRight: 60,\n  facet: {label: null},\n  marks: [\n    Plot.frame(),\n    Plot.dot(penguins, {\n      x: \"culmen_length_mm\",\n      y: \"culmen_depth_mm\",\n      fx: \"sex\",\n      fy: \"species\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap with Group Transform\nDESCRIPTION: Creates a one-dimensional heatmap using cell marks and fill channel to show athlete counts.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 80,\n  x: {tickRotate: 90},\n  color: {scheme: \"{{$dark ? \\\"turbo\\\" : \\\"YlGnBu\\\"}}\"},\n  marks: [\n    Plot.cell(olympians, Plot.groupX({fill: \"count\"}, {x: \"sport\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Axis Color Control Examples\nDESCRIPTION: Shows different ways to control axis colors using color, stroke, and fill options\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisX(d3.ticks(0, 1, 10), {color: \"red\"}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisX(d3.ticks(0, 1, 10), {stroke: Plot.identity, strokeWidth: 3, tickSize: 10}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisX(d3.ticks(0, 1, 10), {fill: \"red\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Annotated Facet Bar Chart\nDESCRIPTION: Shows how to add text annotations to specific facets in a bar chart visualization of penguin data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 60,\n  marginRight: 60,\n  grid: true,\n  y: {label: null},\n  fy: {label: null},\n  color: {legend: true},\n  marks: [\n    Plot.barX(penguins, Plot.groupY({x: \"count\"}, {fy: \"species\", y: \"island\", fill: \"sex\"})),\n    Plot.text([`While Chinstrap and Gentoo penguins were each observed on only one island, Adelie penguins were observed on all three islands.`], {\n      fy: [\"Adelie\"],\n      frameAnchor: \"top-right\",\n      lineWidth: 18,\n      dx: -6,\n      dy: 6\n    }),\n    Plot.frame()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setup Code for Observable Plot Markers Demo with Vue\nDESCRIPTION: Import statements and setup code for a Vue component demonstrating Observable Plot markers. It imports the Plot library, d3, and Vue's ref functionality, along with a dataset on Crimean War casualties.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/markers.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport crimea from \"../data/crimea.ts\";\n\nconst marker = ref(\"circle\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree Visualization with ObservableHQ Plot\nDESCRIPTION: Demonstrates how to create a tree visualization using Plot's link, dot, and text marks combined with tree transforms. The example shows how to construct a tree equivalent without using the composite tree mark.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/tree.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  height: 100,\n  margin: 20,\n  marginRight: 120,\n  marks: [\n    Plot.link(gods, Plot.treeLink()),\n    Plot.dot(gods, Plot.treeNode()),\n    Plot.text(gods, Plot.treeNode({text: \"node:name\", dx: 6}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Area Plot with X values\nDESCRIPTION: Creates an area plot using shared y-values with Date on y-axis and Close price on x-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaX(aapl, {y: \"Date\", x: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Using Random-Walk Interpolation for Magnetic Field Visualization\nDESCRIPTION: This snippet demonstrates the use of the 'random-walk' interpolator with the raster mark to create a grainy visualization of magnetic field data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: \"random-walk\"}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Drawing a Sphere and Graticule with Plot.js\nDESCRIPTION: This example demonstrates how to draw a sphere and graticule using Plot.js. It uses an orthographic projection with a specific rotation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 2,\n  projection: {type: \"orthographic\", rotate: [0, -30, 20]},\n  marks: [\n    Plot.sphere({fill: \"var(--vp-c-bg-alt)\", stroke: \"currentColor\"}),\n    Plot.graticule({strokeOpacity: 0.3})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Tree Layout Function\nDESCRIPTION: Implementation of a custom indent layout function for tree visualization that assigns x and y coordinates based on node depth and index.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction indent() {\n  return (root) => {\n    root.eachBefore((node, i) => {\n      node.y = node.depth;\n      node.x = i;\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Auto Plot Example with Olympians Data\nDESCRIPTION: Creates an auto plot using weight, height, and count from Olympians dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(olympians, {x: \"weight\", y: \"height\", color: \"count\"})\n```\n\n----------------------------------------\n\nTITLE: Simplified Bollinger Band Plot\nDESCRIPTION: Shorthand implementation using array of numbers as data with implicit indexing.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bollinger.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.bollingerY(aapl.map((d) => d.Close)).plot()\n```\n\n----------------------------------------\n\nTITLE: Applying Normalize Transform to X-values\nDESCRIPTION: Shows how to use the normalizeX method to normalize x-values based on the first value in each series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.normalizeX(\"first\", {y: \"Date\", x: \"Close\", stroke: \"Symbol\"})\n```\n\n----------------------------------------\n\nTITLE: Auto Plot with Explicit Color Object\nDESCRIPTION: Alternative syntax for setting constant color using color object notation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", color: {color: \"red\"}})\n```\n\n----------------------------------------\n\nTITLE: Interactive State Map with Centroid and Pointer Transforms\nDESCRIPTION: Creates an interactive US map with state centroids and tooltips. Combines Plot.centroid with Plot.pointer for interactive tips on state hover.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.2}),\n    Plot.geo(nation),\n    Plot.dot(states, Plot.centroid({fill: \"red\", stroke: \"var(--vp-c-bg-alt)\"})),\n    Plot.tip(states, Plot.pointer(Plot.centroid({title: (d) => d.properties.name})))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Weekdays in Plot Axis in JavaScript\nDESCRIPTION: Demonstrates the use of Plot.formatWeekday function to format weekday labels in a Plot axis, using default locale and format.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.textX(d3.range(7)).plot({x: {tickFormat: Plot.formatWeekday()}})\n```\n\n----------------------------------------\n\nTITLE: Generating Index Arrays with Plot.indexOf (JavaScript)\nDESCRIPTION: This example shows how to use Plot.indexOf to generate an array of indices [0, 1, 2, ...] for use in a line chart's x-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(numbers, {x: Plot.indexOf, y: Plot.identity})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the shiftY Transform\nDESCRIPTION: Demonstrates basic usage of the shiftY transform to shift date values by a week interval. This transform derives a y1 channel from the input y channel by offsetting the values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.shiftY(\"7 days\", {y: \"Date\", x: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Grid Y Implementation\nDESCRIPTION: Example of creating a y-axis grid with dashed lines\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridY({strokeDasharray: \"5,3\"})\n```\n\n----------------------------------------\n\nTITLE: Basic Pointer Transform in Plot.js\nDESCRIPTION: Demonstrates the basic pointer transform usage to show the closest point to cursor in a scatter plot of penguin measurements. Uses x and y coordinates mapped to culmen length and depth.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tip(penguins, Plot.pointer({x: \"culmen_length_mm\", y: \"culmen_depth_mm\"}))\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variables for Shifting Data in Vue\nDESCRIPTION: Creates reactive state variables for the shift value and Apple stock data using Vue's ref and shallowRef.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shift = ref(365);\nconst aapl = shallowRef([]);\n```\n\n----------------------------------------\n\nTITLE: Faceted Frame with Specific Target\nDESCRIPTION: Shows how to apply a frame to a specific facet in a grouped plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 80,\n  inset: 10,\n  marks: [\n    Plot.frame({fy: \"Gentoo\"}),\n    Plot.dot(penguins, {x: \"body_mass_g\", fy: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Walmart Store Distribution with Voronoi Diagram\nDESCRIPTION: Creates a map of the contiguous United States with a Voronoi diagram showing the distribution of Walmart stores, using Plot's projection system.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers\",\n  marks: [\n    Plot.geo(nation),\n    Plot.dot(walmarts, {x: \"longitude\", y: \"latitude\", fill: \"currentColor\", r: 1}),\n    Plot.voronoiMesh(walmarts, {x: \"longitude\", y: \"latitude\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Months in Plot Axis in JavaScript\nDESCRIPTION: Demonstrates the use of Plot.formatMonth function to format month labels in a Plot axis, using default locale and format.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.textX(d3.range(12)).plot({x: {tickFormat: Plot.formatMonth(), ticks: 12}})\n```\n\n----------------------------------------\n\nTITLE: Shorthand Box Plot Creation\nDESCRIPTION: Demonstrates the shorthand syntax for creating a simple box plot from an array of numbers using Plot.boxX.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/box.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.boxX([0, 3, 4.4, 4.5, 4.6, 5, 7]).plot()\n```\n\n----------------------------------------\n\nTITLE: Rendering a Plot with Dynamic Margins in Vue.js\nDESCRIPTION: This snippet shows how to create a plot using Plot.plot() with dynamically adjustable margins using Vue.js data binding. It renders a bar chart of letter frequencies with a frame.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_7\n\nLANGUAGE: js-vue\nCODE:\n```\nPlot.plot({\n  marginTop: {{marginTop}},\n  marginRight: {{marginRight}},\n  marginBottom: {{marginBottom}},\n  marginLeft: {{marginLeft}},\n  grid: true,\n  marks: [\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", fill: \"green\"}),\n    Plot.frame()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot Dependencies\nDESCRIPTION: Sets up a Vue component with necessary imports from Observable Plot, D3, and Topojson, including data initialization and mounting logic.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\n\nconst r = ref(4);\nconst diamonds = shallowRef([]);\nconst seattle = shallowRef([]);\nconst olympians = shallowRef([{weight: 31, height: 1.21, sex: \"female\"}, {weight: 170, height: 2.21, sex: \"male\"}]);\nconst povcalnet = shallowRef([]);\nconst us = shallowRef(null);\nconst counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);\nconst countyboxes = computed(() => counties.value.map((d) => d3.geoBounds(d).flat()));\nconst bins = d3.bin()(d3.range(1000).map(d3.randomNormal.source(d3.randomLcg(42))()));\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n  d3.csv(\"../data/diamonds.csv\", d3.autoType).then((data) => (diamonds.value = data));\n  d3.csv(\"../data/seattle-weather.csv\", d3.autoType).then((data) => (seattle.value = data));\n  d3.csv(\"../data/povcalnet.csv\", d3.autoType).then((data) => (povcalnet.value = data));\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data));\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Linear Grid Example\nDESCRIPTION: Simple example of creating a linear x-axis grid.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridX().plot({x: {type: \"linear\"}})\n```\n\n----------------------------------------\n\nTITLE: Binding Stroke Channel to Color Scale in Observable Plot\nDESCRIPTION: Shows how to force the stroke channel to be bound to the color scale regardless of the provided values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(data, {stroke: {value: \"fieldName\", scale: \"color\"}})\n```\n\n----------------------------------------\n\nTITLE: Grouped Horizontal Waffle Chart in Observable Plot\nDESCRIPTION: Demonstrates how to create a grouped horizontal waffle chart using the waffleX mark and groupY transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleX(olympians, Plot.groupY({x: \"count\"}, {y: \"sport\"}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Observable Plot Faceted Axes\nDESCRIPTION: Demonstrates setting up a faceted plot with custom axis positioning and coloring. Uses penguins dataset to create a scatter plot with facets by sex and species.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  facet: {marginRight: 80},\n  grid: true,\n  marks: [\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fx: \"sex\", fy: \"species\"}),\n    Plot.axisX({color: \"red\", anchor, facetAnchor: facetAnchor === \"auto\" ? undefined : facetAnchor === \"null\" ? null : facetAnchor}),\n    Plot.axisFx({color: \"blue\", anchor: anchor === \"top\" ? \"bottom\" : \"top\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Linear Regression X Example\nDESCRIPTION: Example of X-oriented linear regression using mtcars dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.linearRegressionX(mtcars, {y: \"wt\", x: \"hp\"})\n```\n\n----------------------------------------\n\nTITLE: Displaying Multi-line Text in Plot\nDESCRIPTION: Shows how to display multi-line text using newline characters. The example displays a poem with preserved formatting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 200,\n  marks: [\n    Plot.frame(),\n    Plot.text([`This Is Just To Say\nWilliam Carlos Williams, 1934\n\nI have eaten\nthe plums\nthat were in\nthe icebox\n\nand which\nyou were probably\nsaving\nfor breakfast\n\nForgive me\nthey were delicious\nso sweet\nand so cold`], {frameAnchor: \"middle\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Values with Plot.valueof (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Plot.valueof to extract values from a dataset. It retrieves the 'Close' values from the 'aapl' dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.valueof(aapl, \"Close\")\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Plot with Observable Plot\nDESCRIPTION: Creates a vector plot using Plot.vector() for temporal data visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.vector(timeSeries).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Text Plot with Observable Plot\nDESCRIPTION: Creates a scatter plot with text labels using Plot.text() showing data point indices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.text(timeSeries).plot()\n```\n\n----------------------------------------\n\nTITLE: Using ceil method with utcInterval for day boundaries\nDESCRIPTION: Example showing how to use Plot.utcInterval's ceil method to find the next midnight for a given date.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.utcInterval(\"day\").ceil(new Date(\"2013-04-12T12:34:56Z\")) // 2013-04-13\n```\n\n----------------------------------------\n\nTITLE: Describing Additional Projection Options in Markdown\nDESCRIPTION: This snippet lists additional projection options that can be specified when the projection is defined as an object. It includes options for type, parallels, precision, rotation, domain fitting, insets, and clipping.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* **type** - one of the projection names above\n* **parallels** - the [standard parallels](https://d3js.org/d3-geo/conic#conic_parallels) (for conic projections only)\n* **precision** - the [sampling threshold](https://d3js.org/d3-geo/projection#projection_precision)\n* **rotate** - a two- or three- element array of Euler angles to rotate the sphere\n* **domain** - a GeoJSON object to fit in the center of the (inset) frame\n* **inset** - inset by the given amount in pixels when fitting to the frame (default zero)\n* **insetLeft** - inset from the left edge of the frame (defaults to inset)\n* **insetRight** - inset from the right edge of the frame (defaults to inset)\n* **insetTop** - inset from the top edge of the frame (defaults to inset)\n* **insetBottom** - inset from the bottom edge of the frame (defaults to inset)\n* **clip** - the projection clipping method\n```\n\n----------------------------------------\n\nTITLE: Label Anchor Configuration for Y-Axis\nDESCRIPTION: Demonstrates Y-axis label anchor positions with different combinations of left/right positioning and top/center/bottom alignment.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  y: {type: \"linear\"},\n  marks: [\n    Plot.axisY({anchor: \"left\", label: \"left-top\", labelAnchor: \"top\"}),\n    Plot.axisY({anchor: \"left\", label: \"left-center\", labelAnchor: \"center\", ticks: []}),\n    Plot.axisY({anchor: \"left\", label: \"left-bottom\", labelAnchor: \"bottom\", ticks: []}),\n    Plot.axisY({anchor: \"right\", label: \"right-top\", labelAnchor: \"top\"}),\n    Plot.axisY({anchor: \"right\", label: \"right-center\", labelAnchor: \"center\", ticks: []}),\n    Plot.axisY({anchor: \"right\", label: \"right-bottom\", labelAnchor: \"bottom\", ticks: []})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Connected Scatterplot with Filtered Labels\nDESCRIPTION: Creates a connected scatterplot showing driving trends with filtered year labels. Uses the filter transform to display labels for every fifth year.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 10,\n  grid: true,\n  x: {label: \"Miles driven (per person-year)\"},\n  y: {label: \"Cost of gasoline ($ per gallon)\"},\n  marks: [\n    Plot.line(driving, {x: \"miles\", y: \"gas\", curve: \"catmull-rom\", marker: true}),\n    Plot.text(driving, {filter: (d) => d.year % 5 === 0, x: \"miles\", y: \"gas\", text: (d) => `${d.year}`, dy: -6, lineAnchor: \"bottom\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Barycentric Interpolation to Magnetic Field Data with Raster Mark\nDESCRIPTION: This code uses the 'barycentric' interpolator with the raster mark to create a continuous image of magnetic field data based on Delaunay triangulation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: \"barycentric\"}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Auto Plot Spec Generation\nDESCRIPTION: Generates a complete auto plot specification object with all options defined.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.autoSpec(olympians, {x: \"weight\", y: \"height\", color: \"count\"})\n```\n\n----------------------------------------\n\nTITLE: Using Fill as a Data Channel in Plot.js Bar Chart\nDESCRIPTION: This snippet demonstrates how to use the fill option as a data channel in a bar chart, encoding the year data into the fill color.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barX(timeseries, {x: \"population\", y: \"year\", fill: \"year\"})\n  .plot({y: {label: null, tickFormat: \"\"}})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Small Grid with Text Mark in Observable Plot\nDESCRIPTION: This snippet uses a text mark to visualize the small grid defined earlier, demonstrating how the data is represented in the plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  x: {domain: [0, grid.width], label: \"column\"},\n  y: {domain: [0, grid.height], label: \"row\"},\n  marks: [\n    Plot.text(grid.values, {\n      text: Plot.identity,\n      fill: Plot.identity,\n      x: (d, i) => i % grid.width + 0.5,\n      y: (d, i) => Math.floor(i / grid.width) + 0.5\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Constant Fill Color in Plot.js\nDESCRIPTION: This example shows how to create a horizontal bar chart with a constant fill color, demonstrating the use of fill as a non-channel option.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barX(timeseries, {x: \"population\", y: \"year\", fill: \"purple\"})\n  .plot({y: {label: null, tickFormat: \"\"}})\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Observable Plot and Vue\nDESCRIPTION: Imports necessary modules from Observable Plot, D3, and Vue. Also imports local data sources for penguins and volcano datasets.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport penguins from \"../data/penguins.ts\";\nimport volcano from \"../data/volcano.ts\";\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Linear Regression Comparison\nDESCRIPTION: Plot comparing X and Y linear regressions to demonstrate the asymmetric nature of linear regression calculations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(cars, {x: \"weight (lb)\", y: \"power (hp)\", strokeOpacity: 0.5, r: 2}),\n    Plot.linearRegressionY(cars, {x: \"weight (lb)\", y: \"power (hp)\", stroke: \"steelblue\"}),\n    Plot.linearRegressionX(cars, {x: \"weight (lb)\", y: \"power (hp)\", stroke: \"orange\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Area Chart with Plot.areaX\nDESCRIPTION: Creates a vertically-oriented area chart where time goes up instead of right, using the areaX constructor and swapping x and y coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    grid: true\n  },\n  marks: [\n    Plot.areaX(aapl, {y: \"Date\", x: \"Close\", fillOpacity: 0.3}),\n    Plot.lineX(aapl, {y: \"Date\", x: \"Close\"}),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Data Sampling with Custom Selector\nDESCRIPTION: Example of a custom selector that samples 10% of the data points for display.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select({y: selectorSample}, {x: \"Date\", y: \"Close\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction selectorSample(I) {\n  return I.filter((i, j) => j % 10 === 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GroupX Transform Example\nDESCRIPTION: Shows how to use groupX transform to generate a y channel of group counts based on species.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.groupX({y: \"count\"}, {x: \"species\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Difference Plot with Vue Template Binding\nDESCRIPTION: Shows how to create a difference plot with a dynamically bound shift interval using Vue's template binding syntax. The plot visualizes changes in Apple stock prices over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.differenceY(aapl, Plot.shiftX(\"{{shift}} days\", {x: \"Date\", y: \"Close\"})).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Applying Inset to Hexbin Plot in Observable Plot\nDESCRIPTION: This example shows how to use the inset scale option to reserve space on the edges of the frame, preventing hexagons from covering the axes in a hexbin plot of Olympic athletes' data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, Plot.hexbin({fill: \"count\"}, {x: \"weight\", y: \"height\"}))\n  .plot({inset: 10, color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating Ticks with Plot.tickX Shorthand\nDESCRIPTION: Shows how to create tick marks using Plot.tickX, which behaves similarly to Plot.ruleX when no y channel is specified, displaying short marks at each value position.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tickX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Using Nearest Neighbor Interpolation with Raster Mark in JavaScript\nDESCRIPTION: Creates a raster visualization using nearest neighbor interpolation, effectively generating a Voronoi diagram. This example visualizes magnetic field data based on geographic coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: Plot.interpolateNearest})\n```\n\n----------------------------------------\n\nTITLE: Creating Dot Plot with GroupX Transform\nDESCRIPTION: Shows how to create a dot plot where dot sizes represent the count of athletes in each sport.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 100,\n  x: {label: null, tickRotate: 90},\n  r: {range: [0, 14]},\n  marks: [\n    Plot.dot(olympians, Plot.groupX({r: \"count\"}, {x: \"sport\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Setup for ObservableHQ Plot Examples\nDESCRIPTION: Initial Vue setup that imports ObservableHQ Plot, D3, and required data files. It also defines reactive variables for the window transform examples and fetches unemployment data on component mount.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\nimport sftemp from \"../data/sf-temperatures.ts\";\n\nconst k = ref(7);\nconst loss = ref(0.01);\nconst anchor = ref(\"end\");\nconst strict = ref(true);\nconst reduce = ref(\"mean\");\nconst bls = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/bls-metro-unemployment.csv\", d3.autoType).then((data) => (bls.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Histogram with RectY\nDESCRIPTION: Demonstrates creating a basic histogram using the rectY mark with binned data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(bins, {x1: \"x0\", x2: \"x1\", y: \"length\"}).plot({round: true})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbins = d3.bin()(d3.range(1000).map(d3.randomNormal()))\n```\n\n----------------------------------------\n\nTITLE: Formatting Weekday with Custom Locale and Format in JavaScript\nDESCRIPTION: Shows how to use Plot.formatWeekday function with a specific locale (Mexican Spanish) and format (long) to format a weekday number.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.formatWeekday(\"es-MX\", \"long\")(0) // \"domingo\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cell Layout Grid in Observable Plot\nDESCRIPTION: This code demonstrates how to create a cell layout grid in Observable Plot. It sets up a margin, scales for x and y axes, creates a legend color scale, and defines visual properties for the grid cells and axes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginTop: 0,\n  marginRight: 0,\n  marginBottom: 70,\n  marginLeft: 80,\n  x: {axis: null},\n  y: {axis: null, domain: data.map(d => d.yName).reverse()},\n  color: {domain: dataObjects.map(o => o.product), range: d3.schemeSpectral[dataObjects.length], legend: true},\n  marks: [\n    Plot.axisY({label: null, fontSize: 11, labelAnchor: \"top\", ticks: 0}),\n    Plot.axisX({label: null, fontSize: 11, labelAnchor: \"right\", tickRotate: 45, ticks: 0}),\n    Plot.cell(data, {\n      x: \"xName\",\n      y: \"yName\",\n      fill: \"name\",\n      opacity: \"datum\",\n      symbol: \"square\",\n      inset: 0.5\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Normalize Transform for Population Data\nDESCRIPTION: Creates a normalize transform for population data, used to compute proportional demographics from absolute populations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nxy = Plot.normalizeX(\"sum\", {z: \"state\", x: \"population\", y: \"state\"})\n```\n\n----------------------------------------\n\nTITLE: Accessing Plot Scales and Rendering Legends in JavaScript\nDESCRIPTION: These code snippets show how to access a scale from a rendered plot using plot.scale() and how to render a standalone legend for a specific scale using plot.legend().\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst plot = Plot.plot(options); // render a plot\nconst color = plot.scale(\"color\"); // get the color scale\nconsole.log(color.range); // inspect the scale's range\n```\n\nLANGUAGE: js\nCODE:\n```\nconst plot = Plot.plot(options); // render a plot\nconst legend = plot.legend(\"color\"); // render a color legend\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and D3 Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, TopoJSON, and Vue reactive functions. It also initializes reactive variables for map data and settings.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\n\nconst longitude = ref(90);\nconst radius = ref(30);\nconst circle = computed(() => d3.geoCircle().center([9, 34]).radius(radius.value)());\nconst projection = ref(\"equirectangular\");\nconst westport = shallowRef({type: null});\nconst earthquakes = shallowRef([]);\nconst walmarts = shallowRef([]);\nconst world = shallowRef(null);\nconst land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : {type: null});\nconst us = shallowRef(null);\nconst nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states, (a, b) => a !== b) : {type: null});\n\nonMounted(() => {\n  d3.json(\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojson\").then((data) => (earthquakes.value = data.features.map((f) => ({longitude: f.geometry.coordinates[0], latitude: f.geometry.coordinates[1], magnitude: f.properties.mag}))));\n  d3.json(\"../data/countries-110m.json\").then((data) => (world.value = data));\n  d3.tsv(\"../data/walmarts.tsv\", d3.autoType).then((data) => (walmarts.value = data));\n  d3.json(\"../data/westport-house.json\").then((data) => (westport.value = data));\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Density Plot with Filled Frame\nDESCRIPTION: Creates a density heatmap with a frame filled based on density values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 30,\n  marks: [\n    Plot.frame({fill: 0}),\n    Plot.density(faithful, {x: \"waiting\", y: \"eruptions\", fill: \"density\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vertical Bollinger Band Plot\nDESCRIPTION: Example of vertical Bollinger bands using bollingerX method with inverted axes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bollinger.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.bollingerX(aapl, {y: \"Date\", x: \"Close\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Map of Walmart Store Openings with Plot.js\nDESCRIPTION: This example shows how to create a faceted map displaying Walmart store openings over decades. It uses the Albers projection and demonstrates faceting with temporal data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  margin: 0,\n  padding: 0,\n  projection: \"albers\",\n  fy: {interval: \"10 years\"},\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.2}),\n    Plot.geo(nation),\n    Plot.geo(walmarts, {fy: \"date\", r: 1.5, fill: \"blue\", tip: true, title: \"date\"}),\n    Plot.axisFy({frameAnchor: \"top\", dy: 30, tickFormat: (d) => `${d.getUTCFullYear()}'s`})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Mandelbrot Set with Raster Mark in JavaScript\nDESCRIPTION: This code uses the raster mark to visualize the Mandelbrot set by defining a continuous function that counts the number of iterations until a point 'escapes'.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster({fill: mandelbrot, x1: -2, x2: 1, y1: -1.164, y2: 1.164}).plot({aspectRatio: 1})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Plot.barY Shorthand\nDESCRIPTION: Shows how to create a bar chart using Plot.barY, which treats x as an ordinal scale (band) rather than quantitative, resulting in labels at the middle of each bar.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.barY(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Chart with Fixed Baseline in Observable Plot\nDESCRIPTION: Shows how to create an area chart with a fixed baseline at y=0, using constant values for channel specifications.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.area(aapl, {x1: \"Date\", y1: 0, y2: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Basic Frame Mark Plot\nDESCRIPTION: Creates a simple plot with a frame mark around the plotting area with grid lines.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.frame().plot({x: {domain: [0, 1], grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Mandelbrot Set Calculation Function\nDESCRIPTION: Defines a function to calculate whether a point belongs to the Mandelbrot set. It iterates up to 80 times and returns the iteration count if the point escapes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mandelbrot(x, y) {\n  for (let n = 0, zr = 0, zi = 0; n < 80; ++n) {\n    [zr, zi] = [zr * zr - zi * zi + x, 2 * zr * zi + y];\n    if (zr * zr + zi * zi > 4) return n;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Frame Mark\nDESCRIPTION: Demonstrates a frame mark with custom stroke color.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.frame({stroke: \"red\"}).plot({x: {domain: [0, 1], grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Area Plot with Y values\nDESCRIPTION: Creates a basic area plot using shared x-values (time series) with Date on x-axis and Close price on y-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(aapl, {x: \"Date\", y: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Polar Projection Map of Antarctica\nDESCRIPTION: Demonstrates how to create a polar projection map of Antarctica using D3's azimuthal equidistant projection with custom rotation and clipping.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width: 688,\n  height: 688,\n  projection: ({width, height}) => d3.geoAzimuthalEquidistant()\n    .rotate([0, 90])\n    .translate([width / 2, height / 2])\n    .scale(width)\n    .clipAngle(40),\n  marks: [\n    Plot.graticule(),\n    Plot.geo(land, {fill: \"currentColor\"}),\n    Plot.frame()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Plot.identity for Direct Data Mapping (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of Plot.identity to pass data directly to a channel without creating a copy. It's used in a contour plot example.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(data, {width: w, height: h, fill: Plot.identity})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Heatmap with Overlapping Distributions in Observable Plot\nDESCRIPTION: Shows how to create a dot heatmap with overlapping distributions by sex, using the bin transform and adding a stroke channel.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  r: {range: [0, 6]},\n  marks: [\n    Plot.dot(olympians, Plot.bin({r: \"count\"}, {x: \"weight\", y: \"height\", stroke: \"sex\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Facet Y-Axis Configuration\nDESCRIPTION: Shows facet Y-axis setup with right anchor and no label.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisFy({anchor: \"right\", label: null})\n```\n\n----------------------------------------\n\nTITLE: Bypassing Color Scale in Plot.js Bar Chart\nDESCRIPTION: This snippet demonstrates how to bypass the color scale by supplying literal color values to the fill channel in a bar chart.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barX(timeseries, {x: \"population\", y: \"year\", fill: (d) => d.year & 1 ? \"red\" : \"currentColor\"})\n  .plot({y: {label: null, tickFormat: \"\"}})\n```\n\n----------------------------------------\n\nTITLE: Window Method for Map Transform\nDESCRIPTION: Example showing how to use Plot.window to create a window map method suitable for use with Plot.map. This approach allows more control over which channels the window transform applies to.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.map({y: Plot.window(24)}, {x: \"Date\", y: \"Close\", stroke: \"Symbol\"})\n```\n\n----------------------------------------\n\nTITLE: Window Transform with Different Reducers\nDESCRIPTION: Example demonstrating various reducer functions (min, max, median) applied to temperature data. This shows how the reduce option affects the computed values for each window.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true,\n    label: \"Temperature (°F)\"\n  },\nmarks: [\n    Plot.lineY(sftemp, {x: \"date\", y: \"low\", strokeOpacity: 0.3}),\n    Plot.lineY(sftemp, Plot.windowY({k: 28, reduce: \"min\"}, {x: \"date\", y: \"low\", stroke: \"blue\"})),\n    Plot.lineY(sftemp, Plot.windowY({k: 28, reduce: \"max\"}, {x: \"date\", y: \"low\", stroke: \"red\"})),\n    Plot.lineY(sftemp, Plot.windowY({k: 28, reduce: \"median\"}, {x: \"date\", y: \"low\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Y Example\nDESCRIPTION: Example of Y-oriented linear regression using mtcars dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.linearRegressionY(mtcars, {x: \"wt\", y: \"hp\"})\n```\n\n----------------------------------------\n\nTITLE: Basic Raster Mark Construction in JavaScript\nDESCRIPTION: Demonstrates how to create a raster mark using discrete data and dimensions. This is a basic implementation of the raster mark that visualizes volcano elevation data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster(volcano.values, {width: volcano.width, height: volcano.height})\n```\n\n----------------------------------------\n\nTITLE: Initializing Data for Visualizations in JavaScript\nDESCRIPTION: Defines sample datasets for sales, line data, and time series to be used in subsequent plot examples.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sales = [\n  {units: 10, fruit: \"peach\"},\n  {units: 20, fruit: \"pear\"},\n  {units: 40, fruit: \"plum\"},\n  {units: 30, fruit: \"plum\"}\n];\n\nconst linedata = [\n  {hour: 0, value: 8, sensor: \"A\"},\n  {hour: 0, value: 6, sensor: \"B\"},\n  {hour: 1, value: 7, sensor: \"A\"},\n  {hour: 1, value: 5, sensor: \"B\"},\n  {hour: 2, value: 3, sensor: \"A\"},\n  {hour: 2, value: 0, sensor: \"B\"},\n  {hour: 3, value: 9, sensor: \"A\"},\n  {hour: 3, value: 2, sensor: \"B\"}\n];\n\nconst timeseries = [\n  {year: 2014, population: 7295.290765},\n  {year: 2015, population: 7379.797139},\n  {year: 2016, population: 7464.022049},\n  {year: 2017, population: 7547.858925},\n  // {year: 2018, population: 7631.091040},\n  {year: 2019, population: 7713.468100},\n  {year: 2020, population: 7794.798739}\n];\n```\n\n----------------------------------------\n\nTITLE: Post-binning Data Processing with Title Function\nDESCRIPTION: Demonstrates using a function on binned data to create a title from the names of items in each bin, processing data after binning has occurred.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"count\"}, {x: \"economy (mpg)\", title: (data) => data.map((d) => d.name).join(\"\\n\")})\n```\n\n----------------------------------------\n\nTITLE: Lollipop Chart\nDESCRIPTION: Creates a lollipop chart using dots and rules as an alternative to bar charts.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {label: null, tickPadding: 6, tickSize: 0},\n  y: {percent: true},\n  marks: [\n    Plot.ruleX(alphabet, {x: \"letter\", y: \"frequency\", strokeWidth: 2}),\n    Plot.dot(alphabet, {x: \"letter\", y: \"frequency\", fill: \"currentColor\", r: 4})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Index Array for Columnar Data in Observable Plot\nDESCRIPTION: Shows how to define an index array for use with columnar data in Plot, which can be more efficient for larger datasets.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nindex = [0, 1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Implementing Plot with Vue for Client-Side Rendering\nDESCRIPTION: This snippet shows how to create a Vue component for client-side rendering of Observable Plot. It uses a render function with a mounted lifecycle directive to insert the plot into the page after the component mounts.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport {h, withDirectives} from \"vue\";\n\nexport default {\n  props: [\"options\"],\n  render() {\n    const {options} = this;\n    return withDirectives(h(\"div\"), [\n      [\n        {\n          mounted(el) {\n            el.append(Plot.plot(options));\n          }\n        }\n      ]\n    ]);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Marks in Observable Plot\nDESCRIPTION: Demonstrates the use of Plot.marks() to compose multiple marks into a single visualization. This example creates a compound mark with a rule, an area, and a line.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.marks(\n  Plot.ruleY([0]),\n  Plot.areaY(data, {fill: color, fillOpacity, ...options}),\n  Plot.lineY(data, {stroke: color, ...options})\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bin Thresholds\nDESCRIPTION: Shows how to pass custom binning options to control how x values are divided into bins, specifying the number of thresholds and the input channel to use.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"count\"}, {x: {thresholds: 20, value: \"culmen_length_mm\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Hexgrid and Dot Plot\nDESCRIPTION: Creates a visualization combining a hexagonal grid with dot plot using penguin data. The plot uses hexbin transform to bin points and display count-based visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/hexgrid.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.hexgrid(),\n    Plot.dot(penguins, Plot.hexbin({r: \"count\"}, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fill: \"currentColor\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup code for a Vue component that imports Observable Plot, D3, and data dependencies. Sets up reactive data handling for diamonds dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/box.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport morley from \"../data/morley.ts\";\n\nconst diamonds = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/diamonds.csv\", d3.autoType).then((data) => (diamonds.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Temperature Band Chart with y1 and y2\nDESCRIPTION: Creates a band chart showing temperature ranges using y1 for the low temperature and y2 for the high temperature, rather than using y with an implicit y1=0.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    label: \"Temperature (°F)\",\n    grid: true\n  },\n  marks: [\n    Plot.areaY(sftemp, {x: \"date\", y1: \"low\", y2: \"high\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Fruits Array for Columnar Data in Observable Plot\nDESCRIPTION: Shows how to create a fruits array for use with columnar data in Plot, representing the 'fruit' column of the dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfruits = [\"peach\", \"pear\", \"plum\", \"plum\"]\n```\n\n----------------------------------------\n\nTITLE: Auto Mark Color Channel Examples\nDESCRIPTION: Shows how color channel adapts between fill and stroke based on mark type.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(industries, {x: \"date\", y: \"unemployed\", color: \"industry\"}).plot()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(industries, {x: \"date\", y: \"unemployed\", color: \"industry\", mark: \"area\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Using a Function for Fill Channel in Plot.js\nDESCRIPTION: This example shows how to use a function as the fill channel in a bar chart, allowing for more complex color assignments based on data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barX(timeseries, {x: \"population\", y: \"year\", fill: (d) => d.year})\n  .plot({y: {label: null, tickFormat: \"\"}})\n```\n\n----------------------------------------\n\nTITLE: Loading Data on Component Mount in Vue.js\nDESCRIPTION: Uses onMounted hook to load various CSV and JSON data files when the component mounts. It updates reactive variables with the loaded data and processes US map data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nonMounted(() => {\n  d3.csv(\"../data/aapl.csv\", d3.autoType).then((data) => (aapl.value = data));\n  d3.csv(\"../data/us-congress-2023.csv\", d3.autoType).then((data) => (congress.value = data));\n  d3.csv(\"../data/diamonds.csv\", d3.autoType).then((data) => (diamonds.value = data));\n  d3.csv(\"../data/gistemp.csv\", d3.autoType).then((data) => (gistemp.value = data));\n  Promise.all([\n    d3.json(\"../data/us-counties-10m.json\"),\n    d3.csv(\"../data/us-county-population.csv\")\n  ]).then(([_us, _population]) => {\n    const map = new Map(_population.map((d) => [d.state + d.county, +d.population]));\n    _us.objects.counties.geometries.forEach((g) => (g.properties.population = map.get(g.id)));\n    us.value = _us;\n  });\n  d3.csv(\"../data/us-population-state-age.csv\", d3.autoType).then((data) => {\n    const ages = data.columns.slice(1); // convert wide data to tidy data\n    stateage.value = Object.assign(ages.flatMap((age) => data.map((d) => ({state: d.name, age, population: d[age]}))), {ages});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plot and Data in Vue.js\nDESCRIPTION: Sets up the necessary imports for Observable Plot and D3, and initializes data for presidents using Vue's composition API.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/image.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport penguins from \"../data/penguins.ts\";\n\nconst presidents = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/us-president-favorability.csv\", d3.autoType).then((data) => (presidents.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and D3 Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, and local data. It also defines reactive variables for Bollinger band parameters.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/map.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\n\nconst n = ref(20);\nconst k = ref(2);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Matrix Data Array in JavaScript\nDESCRIPTION: Creates a two-dimensional array representing relationships between names, suitable for matrix visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmatrix = [\n  [\"Jacob\", \"Olivia\"],\n  [\"Mia\", \"Noah\"],\n  [\"Noah\", \"Ava\"],\n  [\"Ava\", \"Mason\"],\n  [\"Olivia\", \"Noah\"],\n  [\"Jacob\", \"Emma\"],\n  [\"Ava\", \"Noah\"],\n  [\"Noah\", \"Jacob\"],\n  [\"Olivia\", \"Ava\"],\n  [\"Mason\", \"Emma\"],\n  [\"Jacob\", \"Mia\"],\n  [\"Mia\", \"Jacob\"],\n  [\"Emma\", \"Jacob\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Chart with Band Scale\nDESCRIPTION: Creates a bar chart of Apple stock volume using a band scale for x-axis. Shows the limitation of band scales with temporal data where missing days are hard to spot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/interval.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginBottom: 80,\n  x: {type: \"band\"}, // ⚠️ not utc\n  y: {\n    transform: (d) => d / 1e6,\n    label: \"Daily trade volume (millions)\"\n  },\n  marks: [\n    Plot.barY(aapl.slice(-40), {x: \"Date\", y: \"Volume\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Loading External Data on Component Mount in Vue\nDESCRIPTION: Uses D3 to load CSV data for CA55 and vapor datasets when the component is mounted. Parses and transforms the data as needed.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  d3.csv(\"../data/ca55-south.csv\", d3.autoType).then((data) => (ca55.value = data));\n  d3.text(\"../data/MYDAL2_M_SKY_WV_2022-11-01_rgb_360x180.csv\").then((text) => (vapor.value = d3.csvParseRows(text).flat().map((x) => (x === \"99999.0\" ? NaN : +x))));\n});\n```\n\n----------------------------------------\n\nTITLE: Vertical Pointer Transform in Plot.js\nDESCRIPTION: Demonstrates pointerY transform usage for letter frequency data, prioritizing vertical distance when finding the closest point. Suitable for categorical y-axis visualizations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tip(alphabet, Plot.pointerY({x: \"frequency\", y: \"letter\"}))\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Configuration for ObservableHQ Plot\nDESCRIPTION: Initial setup code importing required dependencies and initializing reactive references for the pointer transform examples.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\n\nconst pointered = ref(true);\nconst aapl = shallowRef([]);\nconst industries = shallowRef([]);\nconst olympians = shallowRef([]);\nconst penguins = shallowRef([]);\nconst linetip = ref(\"x\");\nconst recttip = ref(\"x\");\n\nonMounted(() => {\n  d3.csv(\"../data/aapl.csv\", d3.autoType).then((data) => (aapl.value = data));\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n  d3.csv(\"../data/bls-industry-unemployment.csv\", d3.autoType).then((data) => (industries.value = data));\n  d3.csv(\"../data/penguins.csv\", d3.autoType).then((data) => (penguins.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Bar Chart with Plot.groupX Transform\nDESCRIPTION: Demonstrates using Plot.barY with Plot.groupX to count and display the frequency of characters in a string, useful for categorical data visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.barY(gene, Plot.groupX()).plot()\n```\n\n----------------------------------------\n\nTITLE: Basic Plot Tip with Date and Close Values\nDESCRIPTION: Simple example showing how to create a tip mark with data points mapping Date to x-axis and Close values to y-axis.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tip(aapl, {x: \"Date\", y: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Plotting Temperature Ranges with ruleX\nDESCRIPTION: Uses Plot.ruleX to create a band chart showing daily minimum and maximum temperatures for Seattle, with color encoding.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true, label: \"Temperature (°C)\"},\n  color: {scheme: \"BuRd\"},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.ruleX(seattle, {x: \"date\", y1: \"temp_min\", y2: \"temp_max\", stroke: \"temp_min\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Observable Plot and D3\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot and D3, and defines reactive data for use in examples.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\n\nconst apples = ref(512);\nconst unit = ref(10);\n\nconst olympians = shallowRef([\n  {weight: 31, height: 1.21, sex: \"female\"},\n  {weight: 170, height: 2.21, sex: \"male\"}\n]);\n\nconst survey = [\n  {question: \"don't go out after dark\", yes: 96},\n  {question: \"do no activities other than school\", yes: 89},\n  {question: \"engage in political discussion and social movements, including online\", yes: 10},\n  {question: \"would like to do activities but are prevented by safety concerns\", yes: 73}\n];\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Axis Configuration with Dual Axes\nDESCRIPTION: Demonstrates how to configure axes on both sides of the plot using the axis scale option\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {percent: true, grid: true, axis: \"both\"},\n  marks: [\n    Plot.barX(alphabet, {x: \"frequency\", y: \"letter\"}),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue component with Observable Plot and D3\nDESCRIPTION: This snippet imports necessary libraries, initializes a reactive reference for athlete data, defines a color scheme, and loads CSV data on component mount. It demonstrates the integration of Vue 3's Composition API with D3 for data loading and Observable Plot for visualization setup.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\n\nconst olympians = shallowRef([{weight: 31, height: 1.21, sex: \"female\"}, {weight: 170, height: 2.21, sex: \"male\"}]);\n\nconst scheme = Plot.scale({color: {type: \"categorical\"}}).range;\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Formatting Month with Custom Locale and Format in JavaScript\nDESCRIPTION: Shows how to use Plot.formatMonth function with a specific locale (Mexican Spanish) and format (long) to format a month number.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.formatMonth(\"es-MX\", \"long\")(0) // \"enero\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Plot with Plot.boxX Shorthand\nDESCRIPTION: Demonstrates creating a horizontal box plot using Plot.boxX, which displays the distribution's median, interquartile range, whiskers for extrema, and outliers as dots.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.boxX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Basic Contour Plot with Identity Value\nDESCRIPTION: Creates a basic contour plot using volcano data with specified dimensions and identity value mapping.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.contour(volcano.values, {width: volcano.width, height: volcano.height, value: Plot.identity})\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Histogram by Category\nDESCRIPTION: Creates a stacked histogram showing weight distribution by sex using rectY and binX transforms.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rect.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup code importing Observable Plot, D3, and Vue dependencies along with data setup.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport alphabet from \"../data/alphabet.ts\";\n\nconst atop = ref(true);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Event Listener Setup for Pointer Transform\nDESCRIPTION: Example showing how to set up event listeners to handle pointer transform interactions and access focused data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst plot = Plot.plot(options);\n\nplot.addEventListener(\"input\", (event) => {\n  console.log(plot.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Configuration for ObservableHQ Plot\nDESCRIPTION: Initial setup code importing required dependencies and initializing data structures for tree visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\n\nconst flare = shallowRef([{name: \"empty\"}]);\n\nconst gods = [\n  \"Chaos/Gaia/Mountains\",\n  \"Chaos/Gaia/Pontus\",\n  \"Chaos/Gaia/Uranus\",\n  \"Chaos/Eros\",\n  \"Chaos/Erebus\",\n  \"Chaos/Tartarus\"\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Data and Importing Dependencies in Vue.js\nDESCRIPTION: Sets up the necessary imports and data for the examples, including Plot, D3, and various datasets. It also initializes a reactive 'checked' variable.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport alphabet from \"../data/alphabet.ts\";\nimport civilizations from \"../data/civilizations.ts\";\nimport hadcrut from \"../data/hadcrut.ts\";\nimport penguins from \"../data/penguins.ts\";\nimport statepop from \"../data/us-state-population-2010-2019.ts\";\n\nconst checked = ref(true);\n\nconst timeseries = [\n  {year: 2014, population: 7295.290765},\n  {year: 2015, population: 7379.797139},\n  {year: 2016, population: 7464.022049},\n  {year: 2017, population: 7547.858925},\n  // {year: 2018, population: 7631.091040},\n  {year: 2019, population: 7713.468100},\n  {year: 2020, population: 7794.798739}\n];\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Density Plot\nDESCRIPTION: Creates a density plot to show distribution of Olympic athletes' height and weight by sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.density(olympians, {x: \"weight\", y: \"height\", stroke: \"sex\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Vectors with Plot.vectorX Shorthand\nDESCRIPTION: Demonstrates using Plot.vectorX to draw small up-pointing arrows at each data point. Typically used with rotate and length options to control direction and magnitude.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.vectorX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Labeling Hexbins with Text in Observable Plot\nDESCRIPTION: This example shows how to label hexbins using the text mark. The text output channel is set to display the count of athletes in each hexagon.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .text(olympians, Plot.hexbin({text: \"count\"}, {x: \"weight\", y: \"height\"}))\n  .plot()\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and D3\nDESCRIPTION: Sets up a Vue component with Observable Plot and D3 imports, including sample datasets and reactive references. Defines configuration variables for chart anchoring and includes a dataset of survey responses.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\nimport alphabet from \"../data/alphabet.ts\";\nimport penguins from \"../data/penguins.ts\";\n\nconst anchor = ref(\"bottom\");\nconst facetAnchor = ref(\"auto\");\n\nconst responses = [\n  {name: \"Family in feud with Zucker­bergs\", value: 0.17},\n  {name: \"Committed 671 birthdays to memory\", value: 0.19},\n  {name: \"Ex is doing too well\", value: 0.10},\n  {name: \"High school friends all dead now\", value: 0.15},\n  {name: \"Discovered how to \"like\" things mentally\", value: 0.27},\n  {name: \"Not enough politics\", value: 0.12}\n];\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Plot and D3 in Vue\nDESCRIPTION: Sets up the necessary imports for using Observable Plot and D3 in a Vue component, including state management with ref and shallowRef.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/shift.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\n```\n\n----------------------------------------\n\nTITLE: ggplot2-Style Axes\nDESCRIPTION: Creates ggplot2-style axes with filled frame and white grid lines\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 10,\n  marks: [\n    Plot.frame({fill: \"#eaeaea\"}),\n    Plot.gridY({stroke: \"white\", strokeOpacity: 1}),\n    Plot.gridX({stroke: \"white\", strokeOpacity: 1}),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\", stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Methods List with Vue\nDESCRIPTION: Vue template that iterates through API methods data and renders each method with its name, link, and description in a list with ellipsis for overflow text.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/api.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul :class=\"$style.oneline\">\n  <li v-for=\"({name, href, comment}) in data.methods\">\n    <span><a :href=\"`${href}#${name}`\">{{ name }}</a> - {{ comment }}</span>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Histogram Comparison with Rect Mark\nDESCRIPTION: Creates a histogram using rect marks to compare with the dodge transform visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/dodge.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 180,\n  marks: [\n    Plot.rectY(cars, Plot.binX({y: \"count\"}, {x: \"weight (lb)\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Observable Plot and Data in Vue.js\nDESCRIPTION: Sets up Observable Plot, D3, and Vue.js components. Initializes data for Olympic athletes and defines a computed property for cumulative binning.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\n\nconst cumulatives = ref(\"+1\");\nconst cumulative = computed(() => +cumulatives.value);\nconst olympians = shallowRef([{weight: 31, height: 1.21, sex: \"female\"}, {weight: 170, height: 2.21, sex: \"male\"}]);\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Rules with Plot.ruleX Shorthand\nDESCRIPTION: Demonstrates using Plot.ruleX to create vertical rules at each data point, useful for marking specific x values or annotations in plots.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.ruleX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with No Gaps Between Bars in Observable Plot\nDESCRIPTION: Demonstrates how to create a histogram with no gaps between bars by setting inset to 0 and using x-scale rounding to avoid antialiasing artifacts.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {round: true},\n  y: {grid: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", inset: 0})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting a Random Normal Distribution with Tick Marks in Observable Plot\nDESCRIPTION: This example demonstrates how to plot a random normal distribution using tickX marks with reduced opacity to better visualize density where ticks overlap.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tick.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {domain: [-4, 4]},\n  marks: [\n    Plot.tickX({length: 500}, {x: d3.randomNormal(), strokeOpacity: 0.2})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Data Loading with D3\nDESCRIPTION: Mounted lifecycle hook to load CSV data using D3's autoType functionality.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  d3.csv(\"../data/flare.csv\", d3.autoType).then((data) => (flare.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Pointer Transform with Dot Plot\nDESCRIPTION: Example showing pointer transform applied to a scatter plot with penguins dataset, demonstrating interactive dot highlighting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(penguins, Plot.pointer({x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fill: \"red\", r: 8})),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup code that imports required dependencies and initializes data for Olympic athletes visualization using Vue and Observable Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport anscombe from \"../data/anscombe.ts\";\nimport barley from \"../data/barley.ts\";\nimport industries from \"../data/bls-industry-unemployment.ts\";\nimport penguins from \"../data/penguins.ts\";\n\nconst olympians = shallowRef([\n  {weight: 31, height: 1.21, sex: \"female\"},\n  {weight: 170, height: 2.21, sex: \"male\"}\n]);\n\nconst scheme = Plot.scale({color: {type: \"categorical\"}}).range;\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and Data Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, TopoJSON, and data sources. It also initializes reactive references for Walmart store data and US map data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\nimport penguins from \"../data/penguins.ts\";\n\nconst walmarts = shallowRef([]);\nconst us = shallowRef(null);\nconst nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});\n\nonMounted(() => {\n  d3.tsv(\"../data/walmarts.tsv\", d3.autoType).then((data) => (walmarts.value = data));\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using offset method with utcInterval for date manipulation\nDESCRIPTION: Examples showing how to use Plot.utcInterval's offset method to move dates forward or backward by a specified number of days.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.utcInterval(\"day\").offset(new Date(\"2013-04-12T12:34:56Z\"), 1) // 2013-04-13T12:34:56Z\nPlot.utcInterval(\"day\").offset(new Date(\"2013-04-12T12:34:56Z\"), -2) // 2013-04-10T12:34:56Z\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Line Chart Usage in Plot.js\nDESCRIPTION: This snippet shows an example of misusing the line chart with non-quantitative data, which is discouraged in Plot.js.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY([\"please\", \"don't\", \"do\", \"this\"]).plot() // 🌶️\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Columns with Plot.column (JavaScript)\nDESCRIPTION: This example shows how to use Plot.column to create derived columns for use in transforms. It returns a column object and a setter function.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst [X, setX] = Plot.column();\n```\n\n----------------------------------------\n\nTITLE: Grid Fx Implementation\nDESCRIPTION: Example of creating an fx-axis grid with dashed lines\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridFx({strokeDasharray: \"5,3\"})\n```\n\n----------------------------------------\n\nTITLE: CSS Module for API Documentation List\nDESCRIPTION: CSS styles that apply to the methods list, ensuring each method renders on a single line with ellipsis for text overflow.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/api.md#2025-04-11_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n<style module>\n\nul.oneline span {\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n</style>\n```\n\n----------------------------------------\n\nTITLE: Multi-Line Chart with Last Values Labeled\nDESCRIPTION: Example of a multi-series line chart using the select transform to label the end of each series. The z channel is used to group data by Symbol, and text marks are positioned after the last point in each series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {grid: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(stocks, {x: \"Date\", y: \"Close\", stroke: \"Symbol\"}),\n    Plot.text(stocks, Plot.selectLast({x: \"Date\", y: \"Close\", z: \"Symbol\", text: \"Symbol\", textAnchor: \"start\", dx: 3}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Linear Regression with Subset Data\nDESCRIPTION: Interactive plot showing linear regression with confidence bands using a variable subset of data points controlled by a slider.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(cars, {x: \"weight (lb)\", y: \"power (hp)\", fill: \"currentColor\", fillOpacity: 0.2}),\n    Plot.dot(cars.slice(0, m), {x: \"weight (lb)\", y: \"power (hp)\"}),\n    Plot.linearRegressionY(cars.slice(0, m), {x: \"weight (lb)\", y: \"power (hp)\", stroke: \"red\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Temperature Measurements Table (1946-2020)\nDESCRIPTION: Tabular data showing annual temperature measurements with 11 columns of numeric values. First column represents years, followed by temperature measurements and possibly confidence intervals or different measurement metrics.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/public/data/hadcrut-annual.txt#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1946   -0.071   -0.113   -0.042   -0.124   -0.017   -0.160    0.019   -0.140   -0.009   -0.184    0.038\n1947   -0.038   -0.098    0.001   -0.089    0.012   -0.126    0.050   -0.115    0.028   -0.155    0.072\n[...additional lines omitted for brevity...]\n2019    0.736    0.700    0.776    0.720    0.753    0.656    0.817    0.693    0.781    0.644    0.829\n2020    0.794    0.760    0.837    0.777    0.811    0.714    0.873    0.752    0.842    0.705    0.889\n```\n\n----------------------------------------\n\nTITLE: Using Parallel Arrays for Data in ObservableHQ Plot\nDESCRIPTION: Shows how to use parallel arrays of values instead of an array of objects when creating a line chart with multiple series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY({length: linedata.length}, {\n  x: linedata.map((d) => d.hour),\n  y: linedata.map((d) => d.value),\n  stroke: linedata.map((d) => d.sensor)\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Convex Hulls for Grouped Data\nDESCRIPTION: Shows how to draw convex hulls around grouped data points, creating a visual boundary for each penguin species in the dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.hull(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", fill: \"species\", fillOpacity: 0.2}),\n    Plot.dot(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", stroke: \"species\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Warming Stripes Chart\nDESCRIPTION: Creates a 'warming stripes' chart showing temperature anomalies over time using colored bars.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {round: true, tickFormat: \"d\"},\n  color: {scheme: \"BuRd\"},\n  marks: [\n    Plot.barX(hadcrut, {\n      x: \"year\",\n      fill: \"anomaly\",\n      interval: 1, // annual observations\n      inset: 0 // no gaps\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Transform Function in Observable Plot\nDESCRIPTION: Explains the reverse transform function in Observable Plot, which simply reverses the order of the data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.reverse({x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n```\n\n----------------------------------------\n\nTITLE: Customizing Standalone Legend Width\nDESCRIPTION: Shows how to customize the width of a standalone legend created with Plot.legend. It sets the width to 320 pixels for a linear color scale.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/legends.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.legend({width: 320, color: {type: \"linear\"}})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Observablehq Plot and D3\nDESCRIPTION: Sets up a Vue component using Observablehq Plot, D3, and topojson. It initializes reactive references for data and computes derived state.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, shallowRef, onMounted} from \"vue\";\n\nconst aapl = shallowRef([]);\nconst us = shallowRef(null);\nconst states = computed(() => us.value ? topojson.feature(us.value, us.value.objects.states).features : []);\n\nconst olympians = shallowRef([\n  {weight: 31, height: 1.21, sex: \"female\"},\n  {weight: 170, height: 2.21, sex: \"male\"}\n]);\n\nconst scheme = Plot.scale({color: {type: \"categorical\"}}).range;\n\nonMounted(() => {\n  d3.csv(\"../data/aapl.csv\", d3.autoType).then((data) => (aapl.value = data));\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data)); // TODO us-states?\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Marks in ObservableHQ Plot\nDESCRIPTION: Shows how to conditionally include or exclude marks in a plot based on a boolean variable, allowing for interactive toggling of plot elements.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    area ? Plot.areaY(aapl, {x: \"Date\", y: \"Close\", fillOpacity: 0.2}) : null,\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with X Values Only\nDESCRIPTION: Example of creating a line chart when only y-values are provided. The x-values are automatically generated as sequential indices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nPlot.lineX(aapl.map((d) => d.Close))\n```\n\n----------------------------------------\n\nTITLE: Creating a US Choropleth Map with Plot.js\nDESCRIPTION: This example demonstrates how to create a choropleth map of US counties using Plot.js. It uses the Albers USA projection and a quantile color scale to visualize unemployment rates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  color: {\n    type: \"quantile\",\n    n: 9,\n    scheme: \"blues\",\n    label: \"Unemployment (%)\",\n    legend: true\n  },\n  marks: [\n    Plot.geo(counties, {\n      fill: \"unemployment\",\n      title: (d) => `${d.properties.name} ${d.properties.unemployment}%`,\n      tip: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Series Line Chart with ObservableHQ Plot\nDESCRIPTION: Illustrates how to create a multi-series line chart using the z option to distinguish between different data series (divisions).\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(bls, {x: \"date\", y: \"unemployment\", z: \"division\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Plot Dependencies\nDESCRIPTION: Initial setup of a Vue component importing Observable Plot, D3, and required data. Also sets up reactive references for configuration options.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/dodge.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\nimport cars from \"../data/cars.ts\";\nimport penguins from \"../data/penguins.ts\";\n\nconst anchor = ref(\"middle\");\nconst r = ref(3);\nconst padding = ref(2);\nconst ipos = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/ipos.csv\", d3.autoType).then((data) => (ipos.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom SVG Elements to ObservableHQ Plot\nDESCRIPTION: Demonstrates how to add custom SVG elements, such as a gradient definition, to a Plot visualization using Hypertext Literal.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    () => htl.svg`<defs>\n      <linearGradient id=\"gradient\" gradientTransform=\"rotate(90)\">\n        <stop offset=\"15%\" stop-color=\"purple\" />\n        <stop offset=\"75%\" stop-color=\"red\" />\n        <stop offset=\"100%\" stop-color=\"gold\" />\n      </linearGradient>\n    </defs>`,\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", fill: \"url(#gradient)\"}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Delaunay Links with Colored Edges\nDESCRIPTION: Demonstrates how to create a plot with Delaunay links where the edge colors are based on a data attribute (body mass of penguins in this case).\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.delaunayLink(penguins, {x: \"culmen_depth_mm\", y: \"culmen_length_mm\", stroke: \"body_mass_g\", strokeWidth: 1.5})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Map of Walmart Store Openings\nDESCRIPTION: Demonstrates how to create a faceted map showing Walmart store openings over time using the Albers projection and temporal faceting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 0,\n  marginRight: 0,\n  projection: \"albers\",\n  fx: {\n    interval: \"10 years\",\n    tickFormat: (d) => `${d.getUTCFullYear()}'s`,\n    label: null\n  },\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.1}),\n    Plot.geo(nation),\n    Plot.dot(walmarts, {fx: \"date\", x: \"longitude\", y: \"latitude\", r: 1, fill: \"currentColor\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Data for Tree Visualization in JavaScript\nDESCRIPTION: Defines an array of hierarchical paths representing a tree structure, where each string uses slashes as delimiters to indicate parent-child relationships.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/tree.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gods = [\n  \"Chaos/Gaia/Mountains\",\n  \"Chaos/Gaia/Pontus\",\n  \"Chaos/Gaia/Uranus\",\n  \"Chaos/Eros\",\n  \"Chaos/Erebus\",\n  \"Chaos/Tartarus\"\n];\n```\n\n----------------------------------------\n\nTITLE: Equivalent Post-binning Channel Declaration\nDESCRIPTION: Shows an equivalent way to declare a channel only in outputs to process data after binning has occurred.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.binX({y: \"count\", title: (data) => data.map((d) => d.name).join(\"\\n\")}, {x: \"economy (mpg)\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with ObservableHQ Plot\nDESCRIPTION: Shows how to create a line chart using the line mark in ObservableHQ Plot. The chart displays temperature anomalies over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(gistemp, {x: \"Date\", y: \"Anomaly\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Defining Plot Normalization Function\nDESCRIPTION: Defines a normalization function for Plot, specifying basis, z, x, and y parameters for data visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst xy = Plot.normalizeX({basis: \"sum\", z: \"state\", x: \"population\", y: \"state\"});\n```\n\n----------------------------------------\n\nTITLE: Defining Mandelbrot Set Function for Raster Visualization\nDESCRIPTION: This function defines the Mandelbrot set calculation used in the previous raster mark visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mandelbrot(x, y) {\n  for (let n = 0, zr = 0, zi = 0; n < 80; ++n) {\n    [zr, zi] = [zr * zr - zi * zi + x, 2 * zr * zi + y];\n    if (zr * zr + zi * zi > 4) return n;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Canvas Dependencies on macOS\nDESCRIPTION: Homebrew command to install required dependencies for node-canvas compilation on macOS.\nSOURCE: https://github.com/observablehq/plot/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config cairo pango libpng jpeg giflib librsvg\n```\n\n----------------------------------------\n\nTITLE: Path Computation for Tree Visualization\nDESCRIPTION: Computes paths for tree visualization by recursively visiting nodes and building path structures.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst paths = computed(() => {\n  const paths = [];\n  (function visit(node, path) {\n    paths.push({path, link: node.link && `.${node.link}`});\n    if (node.items) {\n      for (const item of node.items) {\n        visit(item, (path === \"/\" ? path : path + \"/\") + item.text);\n      }\n    }\n  })({items: sidebar}, \"/Plot\");\n  return paths;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with ObservableHQ Plot\nDESCRIPTION: Demonstrates how to create a simple dot plot using the dot mark in ObservableHQ Plot. The plot visualizes temperature anomalies over time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(gistemp, {x: \"Date\", y: \"Anomaly\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Defining a Small Grid for Raster Visualization in JavaScript\nDESCRIPTION: This code defines a small 10x10 grid of values to demonstrate the concept of row-major order in raster data representation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrid = ({\n  \"width\": 10,\n  \"height\": 10,\n  \"values\": [\n     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n     0,  2,  4,  6,  8, 10, 12, 14, 16, 18,\n     0,  3,  6,  9, 12, 15, 18, 21, 24, 27,\n     0,  4,  8, 12, 16, 20, 24, 28, 32, 36,\n     0,  5, 10, 15, 20, 25, 30, 35, 40, 45,\n     0,  6, 12, 18, 24, 30, 36, 42, 48, 54,\n     0,  7, 14, 21, 28, 35, 42, 49, 56, 63,\n     0,  8, 16, 24, 32, 40, 48, 56, 64, 72,\n     0,  9, 18, 27, 36, 45, 54, 63, 72, 81\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Floor Plan with Identity Projection\nDESCRIPTION: Shows how to use the identity projection to display planar geometry, in this case, a floor plan of the Westport House.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.geo(westport).plot({projection: {type: \"identity\", domain: westport}})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Plot Dependencies\nDESCRIPTION: Initial setup of a Vue component importing Plot, D3, and topojson libraries along with data initialization and mounting logic.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/density.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\nimport faithful from \"../data/faithful.ts\";\nimport penguins from \"../data/penguins.ts\";\n\nconst walmarts = shallowRef([]);\nconst us = shallowRef(null);\nconst nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states, (a, b) => a !== b) : {type: null});\nconst skew = ref(0);\nconst bandwidth = ref(20);\nconst thresholds = ref(20);\nconst diamonds = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/diamonds.csv\", d3.autoType).then((data) => (diamonds.value = data));\n  d3.tsv(\"../data/walmarts.tsv\", d3.autoType).then((data) => (walmarts.value = data));\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Varying Stroke Colors in Observable Plot\nDESCRIPTION: Shows how to create a line chart with varying stroke colors based on the unemployment rate for different divisions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    label: null\n  },\n  y: {\n    grid: true,\n    label: \"Unemployment (%)\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(bls, {\n      x: \"date\",\n      y: \"unemployment\",\n      z: \"division\",\n      stroke: \"unemployment\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Variables in Vue.js\nDESCRIPTION: Sets up reactive variables using Vue.js ref and shallowRef for various datasets and visualization states. It also includes computed properties for US map data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sorted = ref(true);\nconst aapl = shallowRef([]);\nconst congress = shallowRef([]);\nconst diamonds = shallowRef([]);\nconst gistemp = shallowRef([{Date: new Date(\"1880-01-01\"), Anomaly: -0.78}, {Date: new Date(\"2016-12-01\"), Anomaly: 1.35}]);\nconst stateage = shallowRef([]);\nconst us = shallowRef(null);\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states) : {type: null});\nconst counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);\n```\n\n----------------------------------------\n\nTITLE: Plotting Global Temperature Anomalies with Diverging Color Scale\nDESCRIPTION: Creates a scatterplot of global average surface temperature anomalies using a diverging color scale. It includes a color legend and a rule mark to indicate the baseline.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/legends.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {\n    scheme: \"BuRd\",\n    legend: true\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(gistemp, {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Data References in Vue\nDESCRIPTION: Creates shallow reactive references for CA55 and vapor datasets. Also defines a grid object with width, height, and calculated values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ca55 = shallowRef([]);\nconst vapor = shallowRef([]);\nconst grid = {\"width\": 10, \"height\": 10, \"values\": d3.cross(d3.range(10), d3.range(10), (x, y) => x * y)};\n```\n\n----------------------------------------\n\nTITLE: Auto Plot with Constant Color\nDESCRIPTION: Shows how to set a constant color (red) for plot elements.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", color: \"red\"})\n```\n\n----------------------------------------\n\nTITLE: Sample Global Temperature Anomalies Data (Plaintext)\nDESCRIPTION: A snippet of the global temperature anomalies dataset, showing the structure and format of the data. Each row represents a year, followed by temperature deviation values and confidence intervals.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/public/data/hadcrut-annual.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1850   -0.373   -0.425   -0.339   -0.502   -0.243   -0.536   -0.210   -0.515   -0.238   -0.591   -0.162\n1851   -0.218   -0.274   -0.184   -0.350   -0.086   -0.368   -0.068   -0.365   -0.081   -0.429   -0.016\n1852   -0.228   -0.280   -0.196   -0.353   -0.103   -0.378   -0.078   -0.367   -0.098   -0.434   -0.030\n1853   -0.269   -0.321   -0.239   -0.378   -0.160   -0.428   -0.110   -0.393   -0.155   -0.472   -0.075\n1854   -0.248   -0.301   -0.218   -0.349   -0.147   -0.391   -0.105   -0.365   -0.143   -0.435   -0.072\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data Array in JavaScript\nDESCRIPTION: Creates a two-dimensional array of time series data containing dates and stock prices. Each element is a tuple of [Date, number] representing Apple stock's daily opening prices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntimeSeries = [\n  [new Date(\"2018-01-02\"), 170.160004],\n  [new Date(\"2018-01-03\"), 172.529999],\n  [new Date(\"2018-01-04\"), 172.539993],\n  [new Date(\"2018-01-05\"), 173.440002],\n  [new Date(\"2018-01-08\"), 174.350006],\n  [new Date(\"2018-01-09\"), 174.550003],\n  [new Date(\"2018-01-10\"), 173.160004],\n  [new Date(\"2018-01-11\"), 174.589996],\n  [new Date(\"2018-01-12\"), 176.179993],\n  [new Date(\"2018-01-16\"), 177.899994],\n  [new Date(\"2018-01-17\"), 176.149994],\n  [new Date(\"2018-01-18\"), 179.369995],\n  [new Date(\"2018-01-19\"), 178.610001],\n  [new Date(\"2018-01-22\"), 177.300003],\n  [new Date(\"2018-01-23\"), 177.300003],\n  [new Date(\"2018-01-24\"), 177.250000],\n  [new Date(\"2018-01-25\"), 174.509995],\n  [new Date(\"2018-01-26\"), 172.000000],\n  [new Date(\"2018-01-29\"), 170.160004],\n  [new Date(\"2018-01-30\"), 165.529999],\n  [new Date(\"2018-01-31\"), 166.869995],\n  [new Date(\"2018-02-01\"), 167.169998],\n  [new Date(\"2018-02-02\"), 166.000000],\n  [new Date(\"2018-02-05\"), 159.100006],\n  [new Date(\"2018-02-06\"), 154.830002],\n  [new Date(\"2018-02-07\"), 163.089996],\n  [new Date(\"2018-02-08\"), 160.289993],\n  [new Date(\"2018-02-09\"), 157.070007],\n  [new Date(\"2018-02-12\"), 158.500000],\n  [new Date(\"2018-02-13\"), 161.949997],\n  [new Date(\"2018-02-14\"), 163.039993],\n  [new Date(\"2018-02-15\"), 169.789993],\n  [new Date(\"2018-02-16\"), 172.360001],\n  [new Date(\"2018-02-20\"), 172.050003],\n  [new Date(\"2018-02-21\"), 172.830002],\n  [new Date(\"2018-02-22\"), 171.800003],\n  [new Date(\"2018-02-23\"), 173.669998],\n  [new Date(\"2018-02-26\"), 176.350006],\n  [new Date(\"2018-02-27\"), 179.100006],\n  [new Date(\"2018-02-28\"), 179.259995]\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and Data Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Plot, D3, TopoJSON, and custom utility functions. It also defines reactive data for wind, US map, and election data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, shallowRef, onMounted} from \"vue\";\nimport {poisson} from \"../components/poisson.js\";\nimport {octave, perlin2} from \"../components/perlin.js\";\n\nconst noise = octave(perlin2, 2);\nconst wind = shallowRef([{longitude: -9.875, latitude: 45.125}, {longitude: 9.875, latitude: 59.875}, {u: 0, v: 0}, {u: 0, v: 12.184501776503668}]);\nconst us = shallowRef(null);\nconst nation = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.nation) : {type: null});\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states, (a, b) => a !== b) : {type: null});\nconst counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);\n\nonMounted(() => {\n  d3.csv(\"../data/wind.csv\", d3.autoType).then((data) => (wind.value = data));\n  Promise.all([\n    d3.json(\"../data/us-counties-10m.json\"),\n    d3.csv(\"../data/us-county-population.csv\"),\n    d3.csv(\"../data/us-presidential-election-2020.csv\")\n  ]).then(([_us, _population, _election]) => {\n    const population = new Map(_population.map((d) => [d.state + d.county, +d.population]));\n    const election = new Map(_election.map((d) => [d.fips, d]));\n    for (const g of _us.objects.counties.geometries) {\n      g.properties.population = population.get(g.id);\n      const e = election.get(g.id);\n      if (e) {\n        g.properties.margin2020 = +e.margin2020;\n        g.properties.votes = +e.votes;\n      }\n    }\n    us.value = _us;\n  });\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Unscaled Stroke Channel in Observable Plot\nDESCRIPTION: Demonstrates how to force the stroke channel to be unscaled, interpreting the associated values as literal color strings.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(data, {stroke: {value: \"fieldName\", scale: null}})\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Dimensional Voronoi Diagram\nDESCRIPTION: Illustrates how to create a one-dimensional Voronoi diagram, showing the distribution of penguin body mass across species.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/delaunay.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.voronoi(penguins, {x: \"body_mass_g\", fill: \"species\"}),\n    Plot.voronoiMesh(penguins, {x: \"body_mass_g\", stroke: \"white\", strokeOpacity: 1})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using tickY Function in Observable Plot\nDESCRIPTION: This snippet demonstrates the basic usage of the tickY function to create horizontal ticks with specified y and x channels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tick.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tickY(stateage, {y: \"population\", x: \"age\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing Data and Importing Dependencies in Vue.js\nDESCRIPTION: Sets up the Vue.js component, imports necessary libraries (Plot, d3), and initializes reactive data references for various datasets (AAPL stock, GISTEMP, TSA travelers, and temperature data).\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/difference.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {computed, shallowRef, onMounted} from \"vue\";\n\nconst aapl = shallowRef([]);\nconst gistemp = shallowRef([]);\nconst tsa = shallowRef([{Date: new Date(\"2020-01-01\")}]);\nconst temperature = shallowRef([{date: new Date(\"2020-01-01\")}]);\n\nonMounted(() => {\n  d3.csv(\"../data/aapl.csv\", d3.autoType).then((data) => (aapl.value = data));\n  d3.csv(\"../data/gistemp.csv\", d3.autoType).then((data) => (gistemp.value = data));\n  d3.csv(\"../data/tsa.csv\",d3.autoType).then((data) => (tsa.value = data));\n  d3.csv(\"../data/sf-sj-temperatures.csv\", d3.autoType).then((data) => (temperature.value = data.filter((d) => d.date.getUTCFullYear() === 2020)));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Grid X Implementation\nDESCRIPTION: Example of creating an x-axis grid with dashed lines\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridX({strokeDasharray: \"5,3\"})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Stock Data in ObservableHQ Plot\nDESCRIPTION: Vue component that imports ObservableHQ Plot, D3, and stock data. It loads and combines multiple stock datasets (AAPL, AMZN, GOOG, IBM) when the component is mounted.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\n\nconst stocks = shallowRef([]);\n\nonMounted(() => {\n  Promise.all([\n    d3.csv(\"../data/amzn.csv\", d3.autoType),\n    d3.csv(\"../data/goog.csv\", d3.autoType),\n    d3.csv(\"../data/ibm.csv\", d3.autoType)\n  ]).then((datas) => {\n    stocks.value = d3.zip([\"AAPL\", \"AMZN\", \"GOOG\", \"IBM\"], [aapl].concat(datas)).flatMap(([Symbol, data]) => data.map((d) => ({Symbol, ...d})));\n  });\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Plot and Data Setup in Vue\nDESCRIPTION: This snippet shows the setup for using Observable Plot in a Vue component, including importing necessary libraries and data files, and initializing reactive data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tick.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\nimport alphabet from \"../data/alphabet.ts\";\n\nconst stateage = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/us-population-state-age.csv\", d3.autoType).then((data) => {\n    const ages = data.columns.slice(1); // convert wide data to tidy data\n    stateage.value = Object.assign(ages.flatMap((age) => data.map((d) => ({state: d.name, age, population: d[age]}))), {ages});\n  });\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cluster Layout Implementation\nDESCRIPTION: Example of using Plot.cluster for hierarchical data visualization with custom sorting and styling.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  margin: 10,\n  marginLeft: 30,\n  marginRight: 160,\n  width: 688,\n  height: 2400,\n  marks: [\n    Plot.cluster(flare, {path: \"name\", treeSort: \"node:height\", delimiter: \".\", textStroke: \"var(--vp-c-bg)\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Random Walk Area Chart\nDESCRIPTION: Generates a random walk using d3.cumsum and d3.randomNormal, then plots it as an area chart using the default x=index and y=identity definitions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(d3.cumsum({length: 600}, d3.randomNormal())).plot()\n```\n\n----------------------------------------\n\nTITLE: Using Barycentric Interpolation with Raster Mark in JavaScript\nDESCRIPTION: Creates a raster visualization using barycentric interpolation over a Delaunay triangulation. This method interpolates values within triangles formed by the sample points based on barycentric coordinates.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: Plot.interpolatorBarycentric()})\n```\n\n----------------------------------------\n\nTITLE: Auto Plot with Value and Reducer Configuration\nDESCRIPTION: Demonstrates how to compute sum of body mass values in each bin using explicit value and reducer properties.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", y: {value: \"body_mass_g\", reduce: \"sum\"}})\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Data Arrays in JavaScript\nDESCRIPTION: Sets up sample data arrays for demonstration, including a numbers array of stock prices, a timeSeries array of date-value pairs, a matrix of name pairs, and a gene sequence string.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [\n  170.16, 172.53, 172.54, 173.44, 174.35, 174.55, 173.16, 174.59, 176.18, 177.90,\n  176.15, 179.37, 178.61, 177.30, 177.30, 177.25, 174.51, 172.00, 170.16, 165.53,\n  166.87, 167.17, 166.00, 159.10, 154.83, 163.09, 160.29, 157.07, 158.50, 161.95,\n  163.04, 169.79, 172.36, 172.05, 172.83, 171.80, 173.67, 176.35, 179.10, 179.26\n];\n\nconst timeSeries = [\n  [new Date(\"2018-01-02\"), 170.160004],\n  [new Date(\"2018-01-03\"), 172.529999],\n  [new Date(\"2018-01-04\"), 172.539993],\n  [new Date(\"2018-01-05\"), 173.440002],\n  [new Date(\"2018-01-08\"), 174.350006],\n  [new Date(\"2018-01-09\"), 174.550003],\n  [new Date(\"2018-01-10\"), 173.160004],\n  [new Date(\"2018-01-11\"), 174.589996],\n  [new Date(\"2018-01-12\"), 176.179993],\n  [new Date(\"2018-01-16\"), 177.899994],\n  [new Date(\"2018-01-17\"), 176.149994],\n  [new Date(\"2018-01-18\"), 179.369995],\n  [new Date(\"2018-01-19\"), 178.610001],\n  [new Date(\"2018-01-22\"), 177.300003],\n  [new Date(\"2018-01-23\"), 177.300003],\n  [new Date(\"2018-01-24\"), 177.250000],\n  [new Date(\"2018-01-25\"), 174.509995],\n  [new Date(\"2018-01-26\"), 172.000000],\n  [new Date(\"2018-01-29\"), 170.160004],\n  [new Date(\"2018-01-30\"), 165.529999],\n  [new Date(\"2018-01-31\"), 166.869995],\n  [new Date(\"2018-02-01\"), 167.169998],\n  [new Date(\"2018-02-02\"), 166.000000],\n  [new Date(\"2018-02-05\"), 159.100006],\n  [new Date(\"2018-02-06\"), 154.830002],\n  [new Date(\"2018-02-07\"), 163.089996],\n  [new Date(\"2018-02-08\"), 160.289993],\n  [new Date(\"2018-02-09\"), 157.070007],\n  [new Date(\"2018-02-12\"), 158.500000],\n  [new Date(\"2018-02-13\"), 161.949997],\n  [new Date(\"2018-02-14\"), 163.039993],\n  [new Date(\"2018-02-15\"), 169.789993],\n  [new Date(\"2018-02-16\"), 172.360001],\n  [new Date(\"2018-02-20\"), 172.050003],\n  [new Date(\"2018-02-21\"), 172.830002],\n  [new Date(\"2018-02-22\"), 171.800003],\n  [new Date(\"2018-02-23\"), 173.669998],\n  [new Date(\"2018-02-26\"), 176.350006],\n  [new Date(\"2018-02-27\"), 179.100006],\n  [new Date(\"2018-02-28\"), 179.259995]\n];\n\nconst matrix = [\n  [\"Jacob\", \"Olivia\"],\n  [\"Mia\", \"Noah\"],\n  [\"Noah\", \"Ava\"],\n  [\"Ava\", \"Mason\"],\n  [\"Olivia\", \"Noah\"],\n  [\"Jacob\", \"Emma\"],\n  [\"Ava\", \"Noah\"],\n  [\"Noah\", \"Jacob\"],\n  [\"Olivia\", \"Ava\"],\n  [\"Mason\", \"Emma\"],\n  [\"Jacob\", \"Mia\"],\n  [\"Mia\", \"Jacob\"],\n  [\"Emma\", \"Jacob\"]\n];\n\nconst gene = \"AAAAGAGTGAAGATGCTGGAGACGAGTGAAGCATTCACTTTAGGGAAAGCGAGGCAAGAGCGTTTCAGAAGACGAAACCTGGTAGGTGCACTCACCACAG\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tip Anchor Options in Observablehq Plot\nDESCRIPTION: Shows the nine different anchor options available for positioning tips in Observablehq Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 160,\n  marks: [\n    Plot.frame({strokeOpacity: 0.2}),\n    [\n      \"top\", \"right\", \"bottom\", \"left\", // sides\n      \"top-left\", \"top-right\", \"bottom-right\", \"bottom-left\", // corners\n      \"middle\"\n    ].map((anchor) => [\n      Plot.dot({length: 1}, {frameAnchor: anchor, fill: \"blue\"}),\n      Plot.tip([anchor], {frameAnchor: anchor, anchor})\n    ])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Hexbin Map with Projections in Observable Plot\nDESCRIPTION: This snippet demonstrates how to create a hexbin map using Plot's projection system. It visualizes Walmart store locations, with hexagon size representing the number of nearby stores and color representing the opening date of the first nearby store.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers\",\n  r: {range: [0, 16]},\n  color: {scheme: \"spectral\", label: \"First year opened\", legend: true},\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.5}),\n    Plot.geo(nation),\n    Plot.dot(walmarts, Plot.hexbin({r: \"count\", fill: \"min\"}, {x: \"longitude\", y: \"latitude\", fill: \"date\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting Bollinger Bands for Stock Data\nDESCRIPTION: Creates a plot with Bollinger bands for Apple stock data, using the map transform with custom Bollinger band calculations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/map.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.areaY(aapl, Plot.map({y1: Plot.bollinger({n, k: -k}), y2: Plot.bollinger({n, k})}, {x: \"Date\", y: \"Close\", fillOpacity: 0.2})),\n    Plot.lineY(aapl, Plot.map({y: Plot.bollinger({n})}, {x: \"Date\", y: \"Close\", stroke: \"blue\"})),\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\", strokeWidth: 1})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plot with Vue and Data Imports\nDESCRIPTION: Initial Vue setup script that imports ObservableHQ Plot, D3, and data files. It creates reactive references for various datasets including penguins, BLS data, traffic data, and computed bins for Olympic athlete weights.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {computed, shallowRef, onMounted} from \"vue\";\nimport penguins from \"../data/penguins.ts\";\n\nconst bls = shallowRef([]);\nconst olympians = shallowRef([]);\nconst traffic = shallowRef([\"Saarbrücken-Neuhaus\", \"Oldenburg (Holstein)\", \"Holz\", \"Göttelborn\", \"Riegelsberg\", \"Kastel\", \"Neustadt i. H.-Süd\", \"Nettersheim\", \"Hasborn\", \"Laufeld\", \"Otzenhausen\", \"Nonnweiler\", \"Kirschheck\", \"AS Eppelborn\", \"Bierfeld\", \"Von der Heydt\", \"Illingen\", \"Hetzerath\", \"Groß Ippener\", \"Bockel\", \"Ladbergen\", \"Dibbersen\", \"Euskirchen/Bliesheim\", \"Hürth\", \"Lotte\", \"Ascheberg\", \"Bad Schwartau\", \"Schloss Burg\", \"Uphusen\", \"HB-Silbersee\", \"Barsbüttel\", \"HB-Mahndorfer See\", \"Glüsingen\", \"HB-Weserbrücke\", \"Hengsen\", \"Köln-Nord\", \"Hagen-Vorhalle\", \"Unna\"].map((location, i) => ({location, date: new Date(Date.UTC(2000, 0, 1, i)), vehicles: (10 + i) ** 2.382})));\nconst bins = computed(() => d3.bin().thresholds(80).value((d) => d.weight)(olympians.value));\n\nconst scheme = Plot.scale({color: {type: \"categorical\"}}).range;\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n  d3.csv(\"../data/bls-metro-unemployment.csv\", d3.autoType).then((data) => (bls.value = data));\n  d3.csv(\"../data/traffic.csv\", d3.autoType).then((data) => (traffic.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Map Data with Vue and D3\nDESCRIPTION: Sets up reactive references for US map data using Vue 3 composition API and D3. Computes various topojson features from the loaded data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, shallowRef, onMounted} from \"vue\";\n\nconst us = shallowRef(null);\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states) : {type: null});\nconst states = computed(() => us.value ? topojson.feature(us.value, us.value.objects.states).features : []);\nconst counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);\nconst nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : []);\n\nonMounted(() => {\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Plot Dependencies\nDESCRIPTION: Setup script importing required modules including Observable Plot, D3.js, and penguin dataset for visualization.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/hexgrid.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport penguins from \"../data/penguins.ts\";\n```\n\n----------------------------------------\n\nTITLE: Sorting Data for Line Charts in Observable Plot\nDESCRIPTION: Demonstrates how to use the sort transform to properly order data for a line chart.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(d3.shuffle(aapl.slice()), {x: \"Date\", y: \"Close\", sort: \"Date\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Horizontal Box Plot Implementation\nDESCRIPTION: Creates a horizontal box plot using Plot.boxX to visualize Michelson's speed of light measurements, with customized x-axis grid and inset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/box.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    grid: true,\n    inset: 6\n  },\n  marks: [\n    Plot.boxX(morley, {x: \"Speed\", y: \"Expt\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Axes on Top of Hexbin Plot in Observable Plot\nDESCRIPTION: This snippet demonstrates how to add axes on top of a hexbin plot using the axis mark. It ensures that the axes are visible over the hexagons in a plot of Olympic athletes' weight and height data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"},\n  marks: [\n    Plot.dot(olympians, Plot.hexbin({fill: \"count\"}, {x: \"weight\", y: \"height\"})),\n    Plot.axisX(),\n    Plot.axisY()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Noise Function for Perlin Noise\nDESCRIPTION: Shows how to define a noise function using octave and perlin2 functions for generating Perlin noise.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnoise = octave(perlin2, 2)\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Unit Test Example\nDESCRIPTION: Unit test demonstrating the month formatting functionality in Plot using different locale and format options.\nSOURCE: https://github.com/observablehq/plot/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nit(\"formatMonth(locale, format) does the right thing\", () => {\n  assert.strictEqual(Plot.formatMonth(\"en\", \"long\")(0), \"January\");\n  assert.strictEqual(Plot.formatMonth(\"en\", \"short\")(0), \"Jan\");\n  assert.strictEqual(Plot.formatMonth(\"en\", \"narrow\")(0), \"J\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax for Line Charts in Observable Plot\nDESCRIPTION: Shows how to use shorthand syntax to create a line chart by mapping data points directly.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.line(aapl.map((d) => [d.Date, d.Close])).plot()\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup of a Vue component importing Observable Plot, D3, and data sources with reactive references.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport alphabet from \"../data/alphabet.ts\";\nimport hadcrut from \"../data/hadcrut.ts\";\n\nconst dji = shallowRef([]);\nconst seattle = shallowRef([]);\nconst simpsons = shallowRef(d3.cross(d3.range(1, 29), d3.range(1, 26), (x, y) => ({season: x, number_in_season: y})));\n\nonMounted(() => {\n  d3.csv(\"../data/dji.csv\", d3.autoType).then((data) => (dji.value = data));\n  d3.csv(\"../data/seattle-weather.csv\", d3.autoType).then((data) => (seattle.value = data));\n  d3.csv(\"../data/simpsons.csv\", d3.autoType).then((data) => (simpsons.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with ruleY for Y-axis Baseline\nDESCRIPTION: Demonstrates using Plot.ruleY to add a red baseline at y=0 in a line chart of AAPL stock prices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.ruleY([0], {stroke: \"red\"}),\n    Plot.line(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/observablehq/plot/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Simpsons Ratings Heatmap Plot\nDESCRIPTION: Creates a heatmap visualization of The Simpsons IMDb ratings using the cell mark with episode ratings displayed as text.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/cell.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  padding: 0,\n  grid: true,\n  x: {axis: \"top\", label: \"Season\"},\n  y: {label: \"Episode\"},\n  color: {type: \"linear\", scheme: \"PiYG\"},\n  marks: [\n    Plot.cell(simpsons, {x: \"season\", y: \"number_in_season\", fill: \"imdb_rating\", inset: 0.5}),\n    Plot.text(simpsons, {x: \"season\", y: \"number_in_season\", text: (d) => d.imdb_rating?.toFixed(1), fill: \"black\", title: \"title\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Temperature Anomaly Dataset (CSV Format)\nDESCRIPTION: Annual temperature anomaly measurements spanning 1946-2020. Contains year in first column followed by 11 columns of numerical temperature deviation values, likely representing different measurement methodologies or confidence intervals. Values appear to be in degrees (presumably Celsius or Fahrenheit).\nSOURCE: https://github.com/observablehq/plot/blob/main/test/data/hadcrut-annual.txt#2025-04-11_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n1946   -0.071   -0.113   -0.042   -0.124   -0.017   -0.160    0.019   -0.140   -0.009   -0.184    0.038\n1947   -0.038   -0.098    0.001   -0.089    0.012   -0.126    0.050   -0.115    0.028   -0.155    0.072\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Interactive Line Chart with Customizable Markers\nDESCRIPTION: A Vue-enabled Observable Plot example that creates a line chart with markers. The chart displays Crimean War mortality data with different causes of death shown as separate lines, and allows the user to select different marker types from a dropdown menu.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/markers.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(crimea, {x: \"date\", y: \"deaths\", stroke: \"cause\", marker: \"{{marker}}\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, TopoJSON, and data files. It also defines some constants and computed properties for use in examples.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/link.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, shallowRef, onMounted} from \"vue\";\nimport income from \"../data/income-gender.ts\";\nimport metros from \"../data/metros.ts\";\n\nconst xy = {x1: -122.4194, y1: 37.7749, x2: 2.3522, y2: 48.8566};\nconst gods = [\"Chaos/Gaia/Mountains\", \"Chaos/Gaia/Pontus\", \"Chaos/Gaia/Uranus\", \"Chaos/Eros\", \"Chaos/Erebus\", \"Chaos/Tartarus\"];\nconst world = shallowRef(null);\nconst land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : null);\n\nonMounted(() => {\n  d3.json(\"../data/countries-110m.json\").then((data) => (world.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Visualizing US Election Results with Vector Mark\nDESCRIPTION: Uses Plot's vector mark with projection to create a map showing the margin of victory in the 2020 US presidential election by county.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/vector.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  length: {type: \"sqrt\", transform: Math.abs},\n  marks: [\n    Plot.geo(statemesh, {strokeWidth: 0.5}),\n    Plot.geo(nation),\n    Plot.vector(\n      counties,\n      Plot.centroid({\n        anchor: \"start\",\n        length: (d) => d.properties.margin2020 * d.properties.votes,\n        stroke: (d) => d.properties.margin2020 > 0 ? \"red\" : \"blue\",\n        rotate: (d) => d.properties.margin2020 > 0 ? 60 : -60\n      })\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Bollinger Bands with Multiple Lines\nDESCRIPTION: Advanced implementation showing multiple Bollinger bands with custom colors and separate line plots for upper and lower bands.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bollinger.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.lineY(aapl, Plot.mapY(Plot.bollinger({n: 20, k: -2}), {x: \"Date\", y: \"Close\", stroke: \"red\"})),\n    Plot.lineY(aapl, Plot.mapY(Plot.bollinger({n: 20, k: 2}), {x: \"Date\", y: \"Close\", stroke: \"green\"})),\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Normalize Transform to Y-values\nDESCRIPTION: Demonstrates the use of the normalizeY method to normalize y-values based on the first value in each series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.normalizeY(\"first\", {x: \"Date\", y: \"Close\", stroke: \"Symbol\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Y Values Only\nDESCRIPTION: Example of creating a line chart when only y-values are provided. The x-values are automatically generated as sequential indices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nPlot.lineY(aapl.map((d) => d.Close))\n```\n\n----------------------------------------\n\nTITLE: Filtered Scatterplot with Text Labels\nDESCRIPTION: Creates a scatterplot with conditional text labels using Plot.plot(). Demonstrates filtering text marks based on a highlight condition.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/filter.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  x: {type: \"log\"},\n  marks: [\n    Plot.dot(metros, {\n      x: \"POP_2015\",\n      y: \"R90_10_2015\"\n    }),\n    Plot.text(metros, {\n      filter: filtered ? \"highlight\" : null,\n      x: \"POP_2015\",\n      y: \"R90_10_2015\",\n      text: \"nyt_display\",\n      frameAnchor: \"bottom\",\n      dy: -6\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Map with Conic Conformal Projection in Observable Plot\nDESCRIPTION: Demonstrates how to create a map of North Carolina using a conic conformal projection in Observable Plot. It shows how Plot respects the projection domain when determining the default plot height.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG-2024.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {\n    type: \"conic-conformal\",\n    parallels: [34 + 20 / 60, 36 + 10 / 60],\n    rotate: [79, 0],\n    domain: state\n  },\n  marks: [\n    Plot.geo(counties, {strokeOpacity: 0.2}),\n    Plot.geo(state)\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Indented Tree Layout\nDESCRIPTION: Implementation of a custom indented tree layout with specific styling and curve options.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tree.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  inset: 10,\n  insetRight: 120,\n  round: true,\n  width: 200,\n  height: 3600,\n  marks: Plot.tree(flare, {\n    path: \"name\",\n    delimiter: \".\",\n    treeLayout: indent,\n    strokeWidth: 1,\n    curve: \"step-before\",\n    textStroke: \"none\"\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Image Scatterplot with Presidential Portraits\nDESCRIPTION: Shows how to create a scatterplot with circular images of presidents, using the 'r' option for circular clipping and preserveAspectRatio for image positioning.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/image.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {inset: 20, label: \"First inauguration date\"},\n  y: {insetTop: 4, grid: true, label: \"Any opinion (%)\", tickFormat: \"+f\"},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.image(presidents, {\n      x: \"First Inauguration Date\",\n      y: (d) => d[\"Very Favorable %\"] + d[\"Somewhat Favorable %\"] + d[\"Very Unfavorable %\"] + d[\"Somewhat Unfavorable %\"],\n      src: \"Portrait URL\",\n      r: 20,\n      preserveAspectRatio: \"xMidYMin slice\",\n      title: \"Name\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using tickX Function in Observable Plot\nDESCRIPTION: This snippet shows the basic usage of the tickX function to create vertical ticks with specified x and y channels.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tick.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.tickX(stateage, {x: \"population\", y: \"age\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Spiraling Lines with Markers in Observable Plot\nDESCRIPTION: Shows how to create spiraling lines with varying aesthetics and arrow markers at the end using Observable Plot. It demonstrates the use of marker options with varying stroke width and color.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG-2024.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 40,\n  axis: null,\n  marks: [\n    Plot.line(d3.range(400), {\n      x: (i) => i * Math.sin(i / 100 + ((i % 5) * 2 * Math.PI) / 5),\n      y: (i) => i * Math.cos(i / 100 + ((i % 5) * 2 * Math.PI) / 5),\n      z: (i) => i % 5,\n      stroke: (i) => -i,\n      strokeWidth: (i) => i ** 1.1 / 100,\n      markerEnd: \"arrow\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Built-in Named Projections in Markdown\nDESCRIPTION: This snippet enumerates the built-in named projections supported by Plot. It includes common projections like equirectangular, mercator, and various conic and azimuthal projections. The list also includes special projections like albers-usa for the United States and identity/reflect-y for planar geometry.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* *equirectangular* - the equirectangular, or *plate carrée*, projection\n* *orthographic* - the orthographic projection\n* *stereographic* - the stereographic projection\n* *mercator* - the Mercator projection\n* *equal-earth* - the [Equal Earth projection](https://en.wikipedia.org/wiki/Equal_Earth_projection) by Šavrič *et al.*\n* *azimuthal-equal-area* - the azimuthal equal-area projection\n* *azimuthal-equidistant* - the azimuthal equidistant projection\n* *conic-conformal* - the conic conformal projection\n* *conic-equal-area* - the conic equal-area projection\n* *conic-equidistant* - the conic equidistant projection\n* *gnomonic* - the gnomonic projection\n* *transverse-mercator* - the transverse Mercator projection\n* *albers* - the Albers' conic equal-area projection\n* *albers-usa* - a composite Albers conic equal-area projection suitable for the United States\n* *identity* - the identity projection for planar geometry\n* *reflect-y* - like the identity projection, but *y* points up\n* null (default) - the null projection for pre-projected geometry in screen coordinates\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup of a Vue component importing Observable Plot, D3, and required data. Sets up reactive references and data loading.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\nimport penguins from \"../data/penguins.ts\";\n\nconst framed = ref(true);\n\nconst faithful = shallowRef([]);\n\nonMounted(() => {\n  d3.tsv(\"../data/faithful.tsv\", d3.autoType).then((data) => (faithful.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Waffle Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create a faceted waffle chart using the waffleY mark and groupZ transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleY(olympians, Plot.groupZ({y: \"count\"}, {fx: \"date_of_birth\", unit})).plot({fx: {interval: \"5 years\", label: null}})\n```\n\n----------------------------------------\n\nTITLE: Comparing Shorthand and Explicit Map Transform Syntax\nDESCRIPTION: Shows the equivalence between the shorthand mapY syntax and the more explicit map transform syntax for applying a cumulative sum.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/map.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.mapY(\"cumsum\", {y: d3.randomNormal()})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.map({y: \"cumsum\"}, {y: d3.randomNormal()})\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Datasets in Vue.js\nDESCRIPTION: Imports required libraries (Plot, D3, TopoJSON) and local datasets for use in the component. It also imports Vue.js composition API functions.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\nimport alphabet from \"../data/alphabet.ts\";\nimport cars from \"../data/cars.ts\";\nimport penguins from \"../data/penguins.ts\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Mandelbrot Set Function in JavaScript\nDESCRIPTION: Defines a function to calculate whether a point belongs to the Mandelbrot set, used for generating fractal patterns.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mandelbrot(x, y) {\n  for (let n = 0, zr = 0, zi = 0; n < 80; ++n) {\n    [zr, zi] = [zr * zr - zi * zi + x, 2 * zr * zi + y];\n    if (zr * zr + zi * zi > 4) return n;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Options List with Vue\nDESCRIPTION: Vue template that displays available options and their applicable contexts. Each option shows its name and links to relevant documentation pages.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/api.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li v-for=\"[name, contexts] in data.options\">\n    <b>{{ name }}</b> - <span v-for=\"({name: context, href}, index) in contexts\"><a :href=\"href\">{{ context }}</a><span v-if=\"index < contexts.length - 1\">, </span></span>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing Plot.js and Data in Vue.js\nDESCRIPTION: This snippet sets up Plot.js, D3, and TopoJSON in a Vue.js component. It also initializes reactive references for various geographic data sets and computes derived geographic features.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, shallowRef, onMounted} from \"vue\";\n\nconst us = shallowRef(null);\nconst earthquakes = shallowRef([]);\nconst walmarts = shallowRef({type: \"FeatureCollection\", features: []});\nconst world = shallowRef(null);\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states, (a, b) => a !== b) : {type: null});\nconst nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});\nconst states = computed(() => us.value ? topojson.feature(us.value, us.value.objects.states) : {type: null});\nconst counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties) : {type: null});\nconst land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : {type: null});\n\nonMounted(() => {\n  d3.json(\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojson\").then((data) => (earthquakes.value = data));\n  d3.json(\"../data/countries-110m.json\").then((data) => (world.value = data));\n  d3.tsv(\"../data/walmarts.tsv\", d3.autoType).then((data) => (walmarts.value = {type: \"FeatureCollection\", features: data.map((d) => ({type: \"Feature\", properties: {date: d.date}, geometry: {type: \"Point\", coordinates: [d.longitude, d.latitude]}}))}));\n  Promise.all([\n    d3.json(\"../data/us-counties-10m.json\"),\n    d3.csv(\"../data/us-county-unemployment.csv\")\n  ]).then(([_us, _unemployment]) => {\n    const map = new Map(_unemployment.map((d) => [d.id, +d.rate]));\n    _us.objects.counties.geometries.forEach((g) => (g.properties.unemployment = map.get(g.id)));\n    us.value = _us;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizon Chart for Unemployment Data\nDESCRIPTION: Creates a horizon chart where the area is repeated at different scales with different colors, showing both small-scale variation in position and large-scale variation in color.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot((() => {\n  const bands = 7;\n  const step = d3.max(industries, (d) => d.unemployed) / bands;\n  return {\n    height: 720,\n    axis: null,\n    y: {domain: [0, step]},\n    color: {scheme: \"{{$dark ? \\\"viridis\\\" : \\\"YlGnBu\\\"}}\"},\n    facet: {data: industries, y: \"industry\"},\n    marks: [\n      d3.range(bands).map((i) => Plot.areaY(industries, {x: \"date\", y: (d) => d.unemployed - i * step, fill: i, clip: true})),\n      Plot.text(industries, Plot.selectFirst({text: \"industry\", frameAnchor: \"top-left\", dx: 6, dy: 6})),\n      Plot.frame()\n    ]\n  };\n})())\n```\n\n----------------------------------------\n\nTITLE: Auto Plot with Color Value Field\nDESCRIPTION: Demonstrates how to use a field name for color encoding using value property.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", color: {value: \"red\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Redundant Encoding Hexbin Plot\nDESCRIPTION: This snippet demonstrates a hexbin plot with redundant encoding, using both fill and r channels to represent the count of athletes. It also adds a stroke to ensure visibility of small hexagons.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .dot(olympians, Plot.hexbin({fill: \"count\", r: \"count\"}, {x: \"weight\", y: \"height\", stroke: \"currentColor\"}))\n  .plot({color: {scheme: \"{{$dark ? \"turbo\" : \"YlGnBu\"}}\"}})\n```\n\n----------------------------------------\n\nTITLE: Combining Hexgrid and Hexbin in Observable Plot\nDESCRIPTION: This example shows how to combine the hexgrid mark with a hexbin plot. The hexgrid displays the base hexagonal grid, while the hexbin transform visualizes the data distribution of Olympic athletes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.hexgrid(),\n    Plot.dot(olympians, Plot.hexbin({r: \"count\"}, {x: \"weight\", y: \"height\", fill: \"currentColor\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Missing Data in Plot.js\nDESCRIPTION: This example demonstrates how using barY mark can hide missing data in a time series, which may lead to misinterpretation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barY(timeseries, {x: \"year\", y: \"population\"}) // 🌶️\n  .plot({x: {tickFormat: \"\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating Plot with Background Image\nDESCRIPTION: Demonstrates how to add a background image to a plot using the style option, visualizing penguin data over a sea ice photograph.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/image.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  margin: 30,\n  inset: 10,\n  grid: true,\n  style: {\n    padding: \"10px\",\n    color: \"black\",\n    background: \"url(../sea-ice.jpg)\",\n    backgroundSize: \"cover\"\n  },\n  marks: [\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", fill: \"white\", stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Faceted Dot Plot\nDESCRIPTION: Creates a faceted dot plot showing barley yields across different sites with color-coded years using Observable Plot.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 800,\n  marginRight: 90,\n  marginLeft: 110,\n  grid: true,\n  x: {nice: true},\n  y: {inset: 5},\n  color: {type: \"categorical\"},\n  marks: [\n    Plot.frame(),\n    Plot.dot(barley, {\n      x: \"yield\",\n      y: \"variety\",\n      fy: \"site\",\n      stroke: \"year\",\n      sort: {y: \"-x\", fy: \"-x\", reduce: \"median\"}\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Need for Sorted Data in Area Charts\nDESCRIPTION: Shows how using unsorted data (shuffled Apple stock data) produces a nonsensical area chart, as points are connected in input order.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.areaY(d3.shuffle(aapl.slice()), {x: \"Date\", y: \"Close\"}).plot() // 🌶️\n```\n\n----------------------------------------\n\nTITLE: Find Reducer with GroupX Transform\nDESCRIPTION: Demonstrates using find reducer to separate male and female values in grouped data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.groupX(\n  {y1: Plot.find((d) => d.sex === \"F\"), y2: Plot.find((d) => d.sex === \"M\")},\n  {x: \"date\", y: \"value\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Plot Dependencies\nDESCRIPTION: Setting up required imports for Observable Plot, D3, and data for visualization examples.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/interval.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport aapl from \"../data/aapl.ts\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Crosshair Mark with Dot Plot in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a plot with a dot mark and a crosshair mark using Observable Plot. It plots penguin data with culmen length and depth, and adds a crosshair for interactive data exploration.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/crosshair.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"sex\"}),\n    Plot.crosshair(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting Normalized Stock Prices with ruleY Baseline\nDESCRIPTION: Uses Plot.ruleY to add a red baseline at y=1 in a logarithmic scale chart of normalized AAPL stock prices.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    type: \"log\",\n    grid: true,\n    label: \"Change in price (%)\",\n    tickFormat: ((f) => (d) => f((d - 1) * 100))(d3.format(\"+d\"))\n  },\n  marks: [\n    Plot.ruleY([1], {stroke: \"red\"}),\n    Plot.line(aapl, Plot.normalizeY(\"first\", {x: \"Date\", y: \"Close\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating 1D Histogram using Plot.binY in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a 1D histogram using the Plot.binY function. It bins data on the y-axis using weight, and sets the x-axis to represent the count of items in each bin.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/bin.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectX(olympians, Plot.binY({x: \"count\"}, {y: \"weight\"}))\n```\n\n----------------------------------------\n\nTITLE: Unemployment Line Chart Snapshot Test\nDESCRIPTION: Example snapshot test creating a line chart visualization using BLS unemployment data with Plot and D3.\nSOURCE: https://github.com/observablehq/plot/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\n\nexport async function lineUnemployment() {\n  const bls = await d3.csv<any>(\"data/bls-metro-unemployment.csv\", d3.autoType);\n  return Plot.plot({\n    marks: [\n      Plot.ruleY([0]),\n      Plot.lineY(bls, {x: \"date\", y: \"unemployment\", z: \"division\"})\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Axis Text Stroke Styling\nDESCRIPTION: Demonstrates text stroke effects for improved axis label legibility\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 40,\n  style: \"background: #777;\",\n  x: {domain: [0, 100]},\n  marks: [\n    Plot.axisX({\n      fill: \"black\",\n      stroke: \"white\",\n      textStroke: \"white\",\n      textStrokeWidth: 3,\n      textStrokeOpacity: 0.6\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Filtered Bar Chart with Highlighted Vowels\nDESCRIPTION: Creates a bar chart showing letter frequencies with highlighted vowels using a filtered overlay with custom styling.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/filter.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.barY(alphabet, {\n      x: \"letter\",\n      y: \"frequency\"\n    }),\n    Plot.barY(alphabet, {\n      filter: (d) => /[aeiouy]/i.test(d.letter),\n      x: \"letter\",\n      y: \"frequency\",\n      stroke: \"red\",\n      strokeWidth: 3,\n      inset: -3 // expand the bars\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Tree Data with Vue.js\nDESCRIPTION: Vue.js template that displays the gods array as formatted JSON in the UI. This code is used to visualize the hierarchical data structure that will be transformed by the tree layout.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/tree.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript-vue\nCODE:\n```\ngods = {{JSON.stringify(gods, null, 2)}}\n```\n\n----------------------------------------\n\nTITLE: Using Functions for Channel Values in Observable Plot\nDESCRIPTION: Demonstrates how to use functions to specify channel values, allowing for data transformation or derivation of new columns on the fly.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(sales, {x: (d) => d.units * 1000, y: (d) => d.fruit})\n```\n\n----------------------------------------\n\nTITLE: Plotting Unsorted Data in a Line Chart with Observable Plot\nDESCRIPTION: Shows the result of plotting unsorted data in a line chart, which can produce gibberish.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(d3.shuffle(aapl.slice()), {x: \"Date\", y: \"Close\"}).plot() // 🌶️\n```\n\n----------------------------------------\n\nTITLE: Applying Blur to Random-Walk Interpolation in Raster Mark\nDESCRIPTION: This code shows how to apply blur to the 'random-walk' interpolation method in the raster mark to create a smoother visualization of magnetic field data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\", interpolate: \"random-walk\", blur: 5}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Year-over-Year Growth in Apple Stock Price\nDESCRIPTION: Applies Plot.differenceY with a shift transform to show the year-over-year growth in Apple stock prices, highlighting periods of profit and loss.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/difference.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.differenceY(aapl, Plot.shiftX(\"+1 year\", {x: \"Date\", y: \"Close\"})).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: WindowX Transform for Horizontal Data\nDESCRIPTION: Example of using windowX, which applies window transform to x-values. This is useful when you need to compute moving statistics for horizontal data representations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/window.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.windowX(24, {y: \"Date\", x: \"Anomaly\"})\n```\n\n----------------------------------------\n\nTITLE: Rendering a Plot with Title, Subtitle, and Caption in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a plot with a title, subtitle, and caption. It also includes a frame and text mark to display an informational message.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  title: \"For charts, an informative title\",\n  subtitle: \"Subtitle to follow with additional context\",\n  caption: \"Figure 1. A chart with a title, subtitle, and caption.\",\n  marks: [\n    Plot.frame(),\n    Plot.text([\"Titles, subtitles, captions, and annotations assist inter­pretation by telling the reader what's interesting. Don't make the reader work to find what you already know.\"], {lineWidth: 30, frameAnchor: \"middle\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Cell Plot with Observable Plot\nDESCRIPTION: Creates a matrix diagram using Plot.cell() to visualize relationships between pairs of names.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.cell(matrix).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatterplot of Magnetic Field Data with Dot Mark in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a scatterplot of magnetic field data using the dot mark in Observable Plot, with a diverging color scale.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", fill: \"MAG_IGRF90\"}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating a World Map with Configurable Projection\nDESCRIPTION: Shows how to create a world map with a dynamically selectable projection type. It includes graticules, land masses, and a sphere outline.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"{{projection}}\",\n  marks: [\n    Plot.graticule(),\n    Plot.geo(land, {fill: \"currentColor\"}),\n    Plot.sphere()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Shuffle Transform Function in Observable Plot\nDESCRIPTION: Describes the shuffle transform function in Observable Plot, which randomly reorders the data. It mentions the option to use a seeded random number generator for reproducible shuffling.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.shuffle({x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n```\n\n----------------------------------------\n\nTITLE: Basic DodgeY Plot with Cars Data\nDESCRIPTION: Creates a basic beeswarm plot using dodgeY transform to visualize car weights distribution.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/dodge.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 160,\n  marks: [\n    Plot.dotX(cars, Plot.dodgeY({x: \"weight (lb)\", title: \"name\", fill: \"currentColor\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Point Selection with Plot.select\nDESCRIPTION: Examples of using the general Plot.select method with different selectors to choose specific points from each series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select(\"first\", {x: \"Date\", y: \"Close\"}) // selectFirst\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select({y: \"min\"}, {x: \"Date\", y: \"Close\"}) // selectMinY\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select({fill: \"max\"}, {x: \"date\", y: \"city\", z: \"city\", fill: \"temperature\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select((I) => [I[0]], {x: \"Date\", y: \"Close\"}) // selectFirst\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.select({y: (I, Y) => [d3.least(I, (i) => Y[i])]}, {x: \"Date\", y: \"Close\"}) // selectMinY\n```\n\n----------------------------------------\n\nTITLE: Creating Overlapping Bar Charts in Observable Plot\nDESCRIPTION: This snippet shows how to create overlapping bar charts using Observable Plot. It demonstrates the order of rendering marks and how to offset bars using dx and dy options.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/plots.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {padding: 0.4},\n  marks: [\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", dx: 2, dy: 2}),\n    Plot.barY(alphabet, {x: \"letter\", y: \"frequency\", fill: \"green\", dx: -2, dy: -2})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Sort Transform Function in Observable Plot\nDESCRIPTION: Explains the usage of the sort transform function in Observable Plot. It describes various ways to specify the sorting order including comparator functions, accessor functions, field names, and channel objects.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.sort(\"body_mass_g\", {x: \"culmen_length_mm\", y: \"culmen_depth_mm\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Voronoi Diagram from County Centroids\nDESCRIPTION: Demonstrates using Plot.centroid with the voronoi mark to create a Voronoi diagram based on county centroids. The centroids are computed after projection.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/centroid.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.voronoi(counties, Plot.centroid()).plot({projection: \"albers\"})\n```\n\n----------------------------------------\n\nTITLE: Box Plot with Height-based Faceting\nDESCRIPTION: Creates a faceted box plot of Olympic athletes' weights grouped by height intervals using the interval scale option.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/facets.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  fy: {\n    grid: true,\n    tickFormat: \".1f\",\n    interval: 0.1, // 10cm\n    reverse: true\n  },\n  marks: [\n    Plot.boxX(olympians.filter((d) => d.height), {x: \"weight\", fy: \"height\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Interactive Tips with Longer Text in Observablehq Plot\nDESCRIPTION: Demonstrates how to create interactive tips with longer text content for a scatter plot of Olympic athletes' data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  marks: [\n    Plot.dot(olympians, {\n      x: \"weight\",\n      y: \"height\",\n      fy: \"sex\",\n      sort: (d) => !!d.info,\n      stroke: (d) => d.info ? \"currentColor\" : \"#aaa\"\n    }),\n    Plot.tip(olympians, Plot.pointer({\n      x: \"weight\",\n      y: \"height\",\n      fy: \"sex\",\n      filter: (d) => d.info,\n      title: (d) => [d.name, d.info].join(\"\\n\\n\")\n    }))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart with Count Transform\nDESCRIPTION: Bar chart showing penguin species counts using the groupY transform.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 80,\n  marginRight: 80,\n  marks: [\n    Plot.barX(penguins, Plot.groupY({x: \"count\"}, {y: \"species\"})),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Series Line Chart with ObservableHQ Plot\nDESCRIPTION: Shows how to create a multi-series line chart by mapping over an array of datasets and creating a line mark for each.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    [goog, aapl].map((stock) => Plot.lineY(stock, {x: \"Date\", y: \"Close\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Sort and Dodge Transforms\nDESCRIPTION: Demonstrates the combined use of sort and dodge transforms in a dot plot of car weights. The sort transform affects the order of dots within each dodge group.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 180,\n  marks: [\n    Plot.dotX(cars, Plot.dodgeY({\n      x: \"weight (lb)\",\n      title: \"name\",\n      fill: \"currentColor\",\n      sort: {channel: \"x\", order}\n    }))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup code importing Observable Plot, D3, Vue refs and data sources for the visualization component.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/linear-regression.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport cars from \"../data/cars.ts\";\nimport penguins from \"../data/penguins.ts\";\n\nconst m = ref(0);\n```\n\n----------------------------------------\n\nTITLE: Basic Y-Axis Configuration\nDESCRIPTION: Shows basic Y-axis setup with left anchor and custom tick spacing.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.axisY({anchor: \"left\", tickSpacing: 35})\n```\n\n----------------------------------------\n\nTITLE: Grouping Data for Waffle Chart in Observable Plot\nDESCRIPTION: Shows how to use the group transform with a waffle chart to compare counts of female and male athletes.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleY(olympians, Plot.groupX({y: \"count\"}, {x: \"sex\"})).plot({x: {label: null}})\n```\n\n----------------------------------------\n\nTITLE: Creating a UTC time interval with utcInterval\nDESCRIPTION: Example showing how to create a UTC time interval of '2 days' using Plot.utcInterval, which returns a nice interval implementation for UTC time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.utcInterval(\"2 days\")\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Plot and D3 in JavaScript\nDESCRIPTION: This snippet shows how to import the Observable Plot library and D3 library in a Vue.js component using the script setup syntax.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/formats.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Group Transform with Fill Count\nDESCRIPTION: Shows basic group transform counting occurrences based on island and species with fill channel.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/group.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.group({fill: \"count\"}, {x: \"island\", y: \"species\"})\n```\n\n----------------------------------------\n\nTITLE: Faceted Histogram\nDESCRIPTION: Creates a faceted histogram with grid lines showing weight distribution of Olympic athletes separated by sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\", fy: \"sex\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting Quantile-Mapped Stock Volume with Rolling Mean\nDESCRIPTION: Demonstrates mapping stock volume to quantiles and applying a rolling mean using the map and window transforms.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/map.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.ruleY([0, 1]),\n    Plot.lineY(aapl, Plot.mapY(\"quantile\", {x: \"Date\", y: \"Volume\", strokeOpacity: 0.2})),\n    Plot.lineY(aapl, Plot.windowY(30, Plot.mapY(\"quantile\", {x: \"Date\", y: \"Volume\"})))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with X Values and Time Interval Binning\nDESCRIPTION: Creates a line chart with binned data using the binY transform and a day interval, useful for regularizing timestamped measurements.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nPlot.lineX(observations, {y: \"date\", x: \"temperature\", interval: \"day\"})\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot with Species Color\nDESCRIPTION: Simple one-line scatter plot showing penguin culmen measurements with species encoded by color.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"species\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Shorthand Notation in Plot.js\nDESCRIPTION: This snippet demonstrates the use of Plot.js shorthand notation to create a simple line chart from an array of numbers.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(gistemp.map((d) => d.Anomaly)).plot()\n```\n\n----------------------------------------\n\nTITLE: Vertical Histogram\nDESCRIPTION: Creates a vertical histogram showing weight distribution of Olympic athletes by sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\"})).plot()\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Observable Plot and D3.js\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3.js, and TopoJSON. It also initializes reactive data and computed properties for use in subsequent visualizations.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\nimport cars from \"../data/cars.ts\";\n\nconst sorted = ref(true);\nconst order = ref(\"ascending\");\nconst bls = shallowRef([]);\nconst us = shallowRef(null);\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states) : {type: null});\nconst counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);\n\nonMounted(() => {\n  d3.csv(\"../data/bls-metro-unemployment.csv\", d3.autoType).then((data) => (bls.value = data));\n  Promise.all([\n    d3.json(\"../data/us-counties-10m.json\"),\n    d3.csv(\"../data/us-county-population.csv\")\n  ]).then(([_us, _population]) => {\n    const map = new Map(_population.map((d) => [d.state + d.county, +d.population]));\n    _us.objects.counties.geometries.forEach((g) => (g.properties.population = map.get(g.id)));\n    us.value = _us;\n  });\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using barY with Interval Scale in Plot.js\nDESCRIPTION: This snippet demonstrates how to use the barY mark with an interval scale to properly display a time series with missing data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barY(timeseries, {x: \"year\", y: \"population\"})\n  .plot({x: {tickFormat: \"\", interval: 1}})\n```\n\n----------------------------------------\n\nTITLE: Sorting Vertical Bars by Descending Y-Values\nDESCRIPTION: Shows how to sort the bars in a vertical bar chart by descending y-values using the sort option.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/bar.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.barY(alphabet, {x: \"letter\", y: \"frequency\", sort: {x: \"-y\"}}).plot()\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Values with Color Scale in Plot.js\nDESCRIPTION: This example shows how to use abstract values with a color scale in a bar chart, allowing for centralized encoding definition and automatic legend generation.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nPlot\n  .barX(timeseries, {x: \"population\", y: \"year\", fill: (d) => d.year & 1 ? \"odd\" : \"even\"})\n  .plot({y: {label: null, tickFormat: \"\"}, color: {legend: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Rounded Corners in Observable Plot\nDESCRIPTION: Shows how to create a histogram of Olympic athletes by weight using the rect mark with rounded corners. It demonstrates the use of individual rounding options for each side and corner.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG-2024.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {legend: true},\n  marks: [\n    Plot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\", ry2: 4, ry1: -4, clip: \"frame\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Apache Arrow Table in Observable Plot\nDESCRIPTION: Demonstrates how to use an Apache Arrow table as data source in Observable Plot, utilizing column name channel shorthand.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG-2024.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(gistemp, {x: \"Date\", y: \"Anomaly\"}).plot() // gistemp is an Arrow Table!\n```\n\n----------------------------------------\n\nTITLE: Plotting State Centroids with Plot.js\nDESCRIPTION: This example demonstrates how to plot state centroids on a map of the United States using Plot.js. It uses the Albers USA projection and combines multiple geo marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/geo.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(states, {strokeOpacity: 0.1, tip: true, title: \"name\"}),\n    Plot.geo(nation),\n    Plot.dot(states, Plot.centroid({fill: \"red\", stroke: \"var(--vp-c-bg-alt)\"}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Beeswarm Plot with Plot.dodgeY Transform\nDESCRIPTION: Shows how to create a beeswarm plot by combining Plot.dotX with the Plot.dodgeY transform, which arranges dots to avoid overlap while maintaining their x-position.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dotX(numbers, Plot.dodgeY()).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Text Labels with Plot.textX Shorthand\nDESCRIPTION: Shows how to create text labels at each data point using Plot.textX, though this may result in occlusion when data points are densely packed.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/shorthand.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.textX(numbers).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bubble Map with Sort Transform in Observable Plot\nDESCRIPTION: Demonstrates the use of the sort transform in a bubble map of U.S. county populations. The sort option is used to control the drawing order of dots based on their radius.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/sort.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers-usa\",\n  marks: [\n    Plot.geo(statemesh, {strokeOpacity: 0.4}),\n    Plot.dot(counties, Plot.geoCentroid({\n      r: (d) => d.properties.population,\n      fill: \"currentColor\",\n      stroke: \"var(--vp-c-bg)\",\n      strokeWidth: 1,\n      sort: sorted ? {channel: \"-r\"} : null\n    }))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing One-Dimensional Crosshair with TickX in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a one-dimensional crosshair using Observable Plot. It uses a tickX mark to display penguin body mass data and adds a crosshairX for interactive exploration of the x-axis values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/crosshair.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.tickX(penguins, {x: \"body_mass_g\"}),\n    Plot.crosshairX(penguins, {x: \"body_mass_g\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Observable Plot\nDESCRIPTION: Initial setup of a Vue component importing Observable Plot, D3, and data dependencies.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/arrow.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport metros from \"../data/metros.ts\";\nimport miserables from \"../data/miserables.ts\";\n\nconst markov = (() => {\n  const matrix = [[3, 2, 5], [1, 7, 2], [1, 1, 8]];\n  const nodes = matrix.map((m, i) => d3.pointRadial(((2 - i) * 2 * Math.PI) / matrix.length, 100));\n  const edges = matrix.flatMap((m, i) => m.map((value, j) => ([nodes[i], nodes[j], value])));\n  return {nodes, edges};\n})();\n\nfunction samegroup({source, target}) {\n  source = miserables.groups.get(source);\n  target = miserables.groups.get(target);\n  return source === target ? source : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Units Array for Columnar Data in Observable Plot\nDESCRIPTION: Demonstrates the creation of a units array for use with columnar data in Plot, representing the 'units' column of the dataset.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nunits = [10, 20, 40, 30]\n```\n\n----------------------------------------\n\nTITLE: Custom Tick Label Positioning\nDESCRIPTION: Demonstrates custom positioning of tick labels with textAnchor and fill options\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginTop: 0,\n  marginLeft: 4,\n  x: {ticks: 4, label: \"Yield (kg)\"},\n  marks: [\n    Plot.barX([42, 17, 32], {y: [\"🍌 banana\", \"🍎 apple\", \"🍐 pear\"]}),\n    Plot.axisY({textAnchor: \"start\", fill: \"var(--vp-c-bg)\", dx: 14})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: React Server-Side Plot Component\nDESCRIPTION: Shows implementation of a Plot component for server-side rendering in React applications.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport {createElement as h} from \"react\";\n\nexport default function PlotFigure({options}) {\n  return Plot.plot({...options, document: new Document()}).toHyperScript();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Crosshair Color Based on Data in JavaScript\nDESCRIPTION: This example shows how to customize the color of a crosshair mark based on data attributes in Observable Plot. It creates a dot plot of penguin data and adds a crosshair with color encoding based on the 'sex' attribute.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/crosshair.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.dot(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", stroke: \"sex\"}),\n    Plot.crosshair(penguins, {x: \"culmen_length_mm\", y: \"culmen_depth_mm\", color: \"sex\", opacity: 0.5})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Explicit Axis Declaration\nDESCRIPTION: Shows how to explicitly declare axis marks with different anchors and customizations\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/axis.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {percent: true},\n  marks: [\n    Plot.axisX({anchor: \"top\"}),\n    Plot.axisX({anchor: \"bottom\", label: null}),\n    Plot.barX(alphabet, {x: \"frequency\", y: \"letter\"}),\n    Plot.gridX({interval: 1, stroke: \"var(--vp-c-bg)\", strokeOpacity: 0.5}),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Geographic Density Plot with Walmart Locations\nDESCRIPTION: Creates a geographic density plot showing Walmart store locations across the US using Albers projection.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/density.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"albers\",\n  color: {scheme: \"{{$dark ? \\\"turbo\\\" : \\\"YlGnBu\\\"}}\"},\n  marks: [\n    Plot.density(walmarts, {x: \"longitude\", y: \"latitude\", bandwidth: 10, fill: \"density\"}),\n    Plot.geo(statemesh, {strokeOpacity: 0.3}),\n    Plot.geo(nation),\n    Plot.dot(walmarts, {x: \"longitude\", y: \"latitude\", r: 1, fill: \"currentColor\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Plot in HTML with ESM\nDESCRIPTION: Shows how to set up Observable Plot in a vanilla HTML file using ES modules via CDN, including creating and appending a plot to the DOM.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"myplot\"></div>\n<script type=\"module\">\n\nimport * as Plot from \"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm\";\n\nconst plot = Plot.rectY({length: 10000}, Plot.binX({y: \"count\"}, {x: Math.random})).plot();\nconst div = document.querySelector(\"#myplot\");\ndiv.append(plot);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree Layout Function in JavaScript\nDESCRIPTION: Defines a custom tree layout function 'indent()' that positions nodes based on their depth and index. This function assigns vertical position (y) based on depth and horizontal position (x) based on node index.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/tree.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction indent() {\n  return (root) => {\n    root.eachBefore((node, i) => {\n      node.y = node.depth;\n      node.x = i;\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spiral Text Plot\nDESCRIPTION: Demonstrates a one-dimensional text mark creating a spiral pattern. Uses shorthand data representation and default text channel.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/text.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  inset: 10,\n  grid: true,\n  marks: [\n    Plot.text(d3.range(151).map((i) => [\n      Math.sqrt(i) * Math.sin(i / 10),\n      Math.sqrt(i) * Math.cos(i / 10)\n    ]))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Histogram with BinX Transform\nDESCRIPTION: Example of using Plot's binX transform to create a histogram of athlete weights, colored by sex. The transform handles binning and grouping by the fill channel automatically.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/transforms.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(olympians, Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\"})).plot({color: {legend: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plot in Observable Notebook\nDESCRIPTION: Demonstrates how to create a basic histogram plot using Observable Plot's rectY and binX functions in an Observable notebook environment.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY({length: 10000}, Plot.binX({y: \"count\"}, {x: d3.randomNormal()})).plot()\n```\n\n----------------------------------------\n\nTITLE: Advanced Pointer Transform with Custom Positioning\nDESCRIPTION: Complex example showing pointer transform with custom positioning, including text labels and visual indicators for the focused point.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/interactions/pointer.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 160,\n  y: {axis: \"right\", grid: true, nice: true},\n  marks: [\n    Plot.lineY(aapl, {x: \"Date\", y: \"Close\"}),\n    Plot.ruleX(aapl, Plot.pointerX({x: \"Date\", py: \"Close\", stroke: \"red\"})),\n    Plot.dot(aapl, Plot.pointerX({x: \"Date\", y: \"Close\", stroke: \"red\"})),\n    Plot.text(aapl, Plot.pointerX({px: \"Date\", py: \"Close\", dy: -17, frameAnchor: \"top-left\", fontVariant: \"tabular-nums\", text: (d) => [`Date ${Plot.formatIsoDate(d.Date)}`, `Close ${d.Close.toFixed(2)}`].join(\"   \")}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Image Scatterplot with Presidential Portraits\nDESCRIPTION: Demonstrates how to create a scatterplot using the image mark, displaying presidential portraits based on inauguration date and favorability.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/image.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  inset: 20,\n  x: {label: \"First inauguration date\"},\n  y: {grid: true, label: \"Net favorability (%)\", tickFormat: \"+f\"},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.image(presidents, {\n      x: \"First Inauguration Date\",\n      y: (d) => d[\"Very Favorable %\"] + d[\"Somewhat Favorable %\"] - d[\"Very Unfavorable %\"] - d[\"Somewhat Unfavorable %\"],\n      src: \"Portrait URL\",\n      width: 40,\n      title: \"Name\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Tip Format in Observablehq Plot\nDESCRIPTION: Illustrates how to customize the format of tip content using the format option, including channel ordering and value formatting.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/tip.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(olympians, {\n  x: \"weight\",\n  y: \"height\",\n  stroke: \"sex\",\n  channels: {\n    name: \"name\",\n    nationality: {\n      value: \"nationality\",\n      label: \"country\"\n    },\n    sport: \"sport\"\n  },\n  tip: {\n    format: {\n      name: true,\n      sport: true,\n      nationality: true,\n      y: (d) => `${d}m`,\n      x: (d) => `${d}kg`,\n      stroke: false\n    }\n  }\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: Implementing Plot with Svelte for Client-Side Rendering\nDESCRIPTION: This Svelte component demonstrates client-side rendering of an interactive Observable Plot chart. It updates the chart based on mouse movement and uses Svelte's $effect for reactivity.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Plot from '@observablehq/plot';\n  import * as d3 from 'd3';\n\n  let div: HTMLElement | undefined = $state();\n  let data = $state(d3.ticks(-2, 2, 200).map(Math.sin));\n\n  function onMousemove(event: MouseEvent) {\n    const [x, y] = d3.pointer(event);\n    data = data.slice(-200).concat(Math.atan2(x, y));\n  }\n\n  $effect(() => {\n    div?.firstChild?.remove(); // remove old chart, if any\n    div?.append(Plot.lineY(data).plot({ grid: true })); // add the new chart\n  });\n</script>\n\n<div onmousemove={onMousemove} bind:this={div} role=\"img\"></div>\n```\n\n----------------------------------------\n\nTITLE: Built-in Select Transform Methods\nDESCRIPTION: Examples of the predefined select transform methods (selectFirst, selectLast, selectMinX, selectMinY, selectMaxX, selectMaxY) with their basic usage patterns.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/select.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.selectFirst({x: \"Date\", y: \"Close\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.selectLast({x: \"Date\", y: \"Close\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.selectMinX({x: \"Date\", y: \"Close\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.selectMinY({x: \"Date\", y: \"Close\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.selectMaxX({x: \"Date\", y: \"Close\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.selectMaxY({x: \"Date\", y: \"Close\"})\n```\n\n----------------------------------------\n\nTITLE: Grid Fy Implementation\nDESCRIPTION: Example of creating an fy-axis grid with dashed lines\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.gridFy({strokeDasharray: \"5,3\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing Data and Importing Dependencies in Vue.js\nDESCRIPTION: Sets up the necessary imports from Plot, D3, and Vue, and initializes data variables for penguins, olympians, and gistemp datasets. It also includes an onMounted hook to load CSV data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/legends.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\n\nconst penguins = shallowRef([]);\n\nconst olympians = shallowRef([\n  {weight: 31, height: 1.21, sex: \"female\"},\n  {weight: 170, height: 2.21, sex: \"male\"}\n]);\n\nconst gistemp = shallowRef([\n  {Date: new Date(\"1880-01-01\"), Anomaly: -0.78},\n  {Date: new Date(\"2016-12-01\"), Anomaly: 1.35}\n]);\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n  d3.csv(\"../data/gistemp.csv\", d3.autoType).then((data) => (gistemp.value = data));\n  d3.csv(\"../data/penguins.csv\", d3.autoType).then((data) => (penguins.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Plot Implementation with UMD Bundle\nDESCRIPTION: Demonstrates using Observable Plot with UMD bundle via CDN, including D3 dependency.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"myplot\"></div>\n<script src=\"https://cdn.jsdelivr.net/npm/d3@7\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6\"></script>\n<script type=\"module\">\n\nconst plot = Plot.rectY({length: 10000}, Plot.binX({y: \"count\"}, {x: Math.random})).plot();\nconst div = document.querySelector(\"#myplot\");\ndiv.append(plot);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Columnar Data in Observable Plot\nDESCRIPTION: Demonstrates how to create a dot plot using columnar data format, which can be more efficient for larger datasets.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.dot(index, {x: units, y: fruits})\n```\n\n----------------------------------------\n\nTITLE: Creating a number interval with numberInterval\nDESCRIPTION: Example showing how to create a number interval with a period of 2 using Plot.numberInterval, which returns an interval implementation for numeric values.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.numberInterval(2)\n```\n\n----------------------------------------\n\nTITLE: Defining Time Series Data in JavaScript\nDESCRIPTION: This snippet shows the structure of a time series dataset used in the examples, highlighting a gap in the data for the year 2018.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntimeseries = [\n  {year: 2014, population: 7295.290765},\n  {year: 2015, population: 7379.797139},\n  {year: 2016, population: 7464.022049},\n  {year: 2017, population: 7547.858925},\n  {year: 2019, population: 7713.468100},\n  {year: 2020, population: 7794.798739}\n]\n```\n\n----------------------------------------\n\nTITLE: Using Normalize Transform with Map Transform\nDESCRIPTION: Demonstrates how to use the normalize transform with the map transform to normalize y-values based on the first value in each series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.map({y: Plot.normalize(\"first\")}, {x: \"Date\", y: \"Close\", stroke: \"Symbol\"})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Plot Dependencies\nDESCRIPTION: Initial setup of a Vue component importing ObservableHQ Plot, D3, and required data files with reactive state management.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/filter.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {computed, ref, shallowRef, onMounted} from \"vue\";\nimport alphabet from \"../data/alphabet.ts\";\nimport metros from \"../data/metros.ts\";\n\nconst filtered = ref(true);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing GeoJSON Clipping with Observable Plot\nDESCRIPTION: Demonstrates using the clip mark option with GeoJSON objects to create a Voronoi mesh of world airports clipped to land boundaries. Uses orthographic projection and combines multiple plot marks including dots, voronoi mesh, sphere, and geo marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {type: \"orthographic\", rotate: [110, -50]},\n  marks: [\n    Plot.dot(airports, {x: \"longitude\", y: \"latitude\", fill: \"red\", r: 1}),\n    Plot.voronoiMesh(airports, {x: \"longitude\", y: \"latitude\", clip: land}),\n    Plot.sphere(),\n    Plot.geo(land)\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Faceted Grouped Bar Chart\nDESCRIPTION: Extended bar chart with vertical faceting by island using the fy option.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 80,\n  marginRight: 80,\n  marks: [\n    Plot.barX(penguins, Plot.groupY({x: \"count\"}, {fy: \"island\", y: \"species\"})),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Random Walk Line Chart with Observable Plot\nDESCRIPTION: Demonstrates how to create a line chart of a random walk using d3.cumsum and d3.randomNormal.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(d3.cumsum({length: 600}, d3.randomNormal())).plot()\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree Structure with Link Mark\nDESCRIPTION: Shows how to use the link mark in combination with the treeLink transform to create a tree visualization of Greek gods' ancestry.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/link.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  axis: null,\n  height: 120,\n  inset: 20,\n  insetRight: 120,\n  marks: [\n    Plot.link(gods, Plot.treeLink({stroke: \"node:internal\"})),\n    Plot.dot(gods, Plot.treeNode({fill: \"node:internal\"})),\n    Plot.text(gods, Plot.treeNode({text: \"node:name\", stroke: \"var(--vp-c-bg)\", fill: \"currentColor\", dx: 6}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Waffle Chart in Observable Plot\nDESCRIPTION: Demonstrates how to create a waffle chart using the new waffle mark in Observable Plot. The chart displays Olympic athletes by weight and sex.\nSOURCE: https://github.com/observablehq/plot/blob/main/CHANGELOG-2024.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  fx: {interval: 10},\n  color: {legend: true},\n  marks: [Plot.waffleY(olympians, Plot.groupZ({y: \"count\"}, {fill: \"sex\", sort: \"sex\", fx: \"weight\", unit: 10}))]\n})\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart with Multiple Variables\nDESCRIPTION: Complex bar chart combining grouping, faceting, and color encoding with automatic stacking.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 80,\n  marginRight: 80,\n  color: {legend: true},\n  marks: [\n    Plot.barX(penguins, Plot.groupY({x: \"count\"}, {fy: \"island\", y: \"species\", fill: \"sex\"})),\n    Plot.ruleX([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Stacked Dot Plot\nDESCRIPTION: Creates a diverging stacked dot plot showing age and gender distribution.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/dot.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  x: {label: \"Age (years)\"},\n  y: {\n    grid: true,\n    label: \"← Women · Men →\",\n    labelAnchor: \"center\",\n    tickFormat: Math.abs\n  },\n  marks: [\n    Plot.dot(\n      congress,\n      Plot.stackY2({\n        x: (d) => 2023 - d.birthday.getUTCFullYear(),\n        y: (d) => d.gender === \"M\" ? 1 : -1,\n        fill: \"gender\",\n        title: \"full_name\"\n      })\n    ),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting Line and Dot Visualization with Dynamic Curve\nDESCRIPTION: Creates a plot combining a line mark with configurable curve interpolation and dot marks to show data points. Uses dynamic curve type binding through Vue template syntax.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/curves.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.lineY(numbers, {curve: \"{{curve}}\"}),\n    Plot.dotY(numbers, {x: (d, i) => i})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Area-Line Plot Implementation Example\nDESCRIPTION: Example usage of the custom arealineY function with AAPL stock data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\narealineY(aapl, {x: \"Date\", y: \"Close\", color: \"blue\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Custom Area-Line Plot Component Function\nDESCRIPTION: Function that creates a composite mark combining a rule, area, and line plot with customizable color and opacity.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction arealineY(data, {color, fillOpacity = 0.1, ...options} = {}) {\n  return Plot.marks(\n    Plot.ruleY([0]),\n    Plot.areaY(data, {fill: color, fillOpacity, ...options}),\n    Plot.lineY(data, {stroke: color, ...options})\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sales Data for Observable Plot\nDESCRIPTION: Demonstrates how to define a sample dataset of fruit sales as an array of objects, which can be used as input for Plot marks.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nsales = [\n  {units: 10, fruit: \"peach\"},\n  {units: 20, fruit: \"pear\"},\n  {units: 40, fruit: \"plum\"},\n  {units: 30, fruit: \"plum\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Observable Plot\nDESCRIPTION: Creates a simple line chart with the beagle dataset projected using equirectangular projection, including land geo data and a red line representing the journey.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/line.md#2025-04-11_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  projection: \"equirectangular\",\n  marks: [\n    Plot.geo(land), // MultiPolygon\n    Plot.line(beagle, {stroke: \"red\"}), // [[lon, lat], …]\n    Plot.geo({type: \"Point\", coordinates: [-0.13, 51.5]}, {fill: \"red\"}) // London\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Plot and D3 Imports\nDESCRIPTION: Initial setup code importing Observable Plot, D3, and data files in a Vue component using script setup syntax.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/why-plot.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport aapl from \"./data/aapl.ts\";\nimport penguins from \"./data/penguins.ts\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Linear Color Scale Legend\nDESCRIPTION: Demonstrates how to create a standalone ramp legend for a linear color scale using Plot.legend. It uses default domain [0, 1] and the turbo color scheme.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/legends.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.legend({color: {type: \"linear\"}})\n```\n\n----------------------------------------\n\nTITLE: Using Accessor Functions for Data Access in ObservableHQ Plot\nDESCRIPTION: Demonstrates the use of accessor functions to extract data from objects when creating a line chart with multiple series.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/marks.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(linedata, {\n  x: (d) => d.hour,\n  y: (d) => d.value,\n  stroke: (d) => d.sensor\n}).plot()\n```\n\n----------------------------------------\n\nTITLE: Basic Auto Plot with Count Reducer\nDESCRIPTION: Creates an auto plot using body mass as x-axis and count as y-axis reducer.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/auto.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.auto(penguins, {x: \"body_mass_g\", y: \"count\"})\n```\n\n----------------------------------------\n\nTITLE: Tree Width Computation\nDESCRIPTION: Calculates tree width using D3's tree layout functionality for visualization spacing.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction computeTreeWidth(paths) {\n  const root = d3.tree().nodeSize([1, 1])(d3.stratify().path((d) => d.path)(paths));\n  const [x1, x2] = d3.extent(root, (d) => d.x);\n  return x2 - x1;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Data and Dependencies for Observable Plot Examples\nDESCRIPTION: This Vue.js setup script imports necessary libraries and initializes reactive data for use in Observable Plot examples. It loads data for Olympic athletes, Walmart stores, and US map topologies.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/hexbin.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport {computed, ref, watchEffect, shallowRef, onMounted} from \"vue\";\nimport cars from \"../data/cars.ts\";\n\nconst binWidth = ref(20);\nconst olympians = shallowRef([{weight: 31, height: 1.21, sex: \"female\"}, {weight: 170, height: 2.21, sex: \"male\"}]);\nconst walmarts = shallowRef([]);\nconst us = shallowRef(null);\nconst nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});\nconst statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states, (a, b) => a !== b) : {type: null});\n\nconst scheme = Plot.scale({color: {type: \"categorical\"}}).range;\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n  d3.tsv(\"../data/walmarts.tsv\", d3.autoType).then((data) => (walmarts.value = data));\n  d3.json(\"../data/us-counties-10m.json\").then((data) => (us.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flight Paths with Line Mark in Observable Plot\nDESCRIPTION: This code uses a line mark to visualize flight paths from magnetic field survey data, connecting line segments and using a diverging color scale.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.line(ca55, {x: \"LONGITUDE\", y: \"LATITUDE\", stroke: \"MAG_IGRF90\", z: \"LINE_NUMB-SEG\"}).plot({color: {type: \"diverging\"}})\n```\n\n----------------------------------------\n\nTITLE: Using floor method with utcInterval for day boundaries\nDESCRIPTION: Example showing how to use Plot.utcInterval's floor method to find the preceding midnight for a given date.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.utcInterval(\"day\").floor(new Date(\"2013-04-12T12:34:56Z\")) // 2013-04-12\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Plot and D3\nDESCRIPTION: Initializes Vue component with ObservableHQ Plot and D3 dependencies, sets up sample data and loads CSV data on mount.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/what-is-plot.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {computed, onMounted, shallowRef} from \"vue\";\nimport {useData} from \"vitepress\";\nimport PlotRender from \"./components/PlotRender.js\";\n\nconst olympians = shallowRef([\n  {weight: 31, height: 1.21, sex: \"female\"},\n  {weight: 170, height: 2.21, sex: \"male\"}\n]);\n\nonMounted(() => {\n  d3.csv(\"./data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Orthographic Projection Map with Earthquake Data\nDESCRIPTION: Demonstrates how to create a map using an orthographic projection in Observable Plot. It displays land masses and earthquake data with dots sized by magnitude.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/projections.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {type: \"orthographic\", rotate: [-longitude, -30]},\n  r: {transform: (d) => Math.pow(10, d)}, // convert Richter to amplitude\n  marks: [\n    Plot.geo(land, {fill: \"currentColor\", fillOpacity: 0.2}),\n    Plot.sphere(),\n    Plot.dot(earthquakes, {x: \"longitude\", y: \"latitude\", r: \"magnitude\", stroke: \"red\", fill: \"red\", fillOpacity: 0.2})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Arctangent Function with Raster Mark in Observable Plot\nDESCRIPTION: This snippet demonstrates how to use the raster mark to visualize the arctangent function as a continuous 2D image.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/raster.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.raster({x1: -1, x2: 1, y1: -1, y2: 1, fill: (x, y) => Math.atan2(y, x)}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a local time interval with timeInterval\nDESCRIPTION: Example showing how to create a local time interval of '2 days' using Plot.timeInterval, which returns a nice interval implementation for local time.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/intervals.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.timeInterval(\"2 days\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and D3 Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, and data. It also initializes reactive references and loads data on component mount.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/contour.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport volcano from \"../data/volcano.ts\";\n\nconst ca55 = shallowRef([]);\nconst vapor = shallowRef([]);\nconst grid = {\"width\": 10, \"height\": 10, \"values\": d3.cross(d3.range(10), d3.range(10), (x, y) => x * y)};\n\nonMounted(() => {\n  d3.csv(\"../data/ca55-south.csv\", d3.autoType).then((data) => (ca55.value = data));\n  d3.text(\"../data/MYDAL2_M_SKY_WV_2022-11-01_rgb_360x180.csv\").then((text) => (vapor.value = d3.csvParseRows(text).flat().map((x) => (x === \"99999.0\" ? NaN : +x))));\n});\n```\n\n----------------------------------------\n\nTITLE: Anchored Frame Mark\nDESCRIPTION: Demonstrates using the anchor option to draw only one side of the frame.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/frame.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    domain: [0, 1],\n    grid: true\n  },\n  marks: [\n    Plot.frame({stroke: \"red\", anchor: \"bottom\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Observable Plot and D3\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot and D3, and initializes reactive references for data. It also defines a normalize transform for population data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/transforms/normalize.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\n\nconst stateage = shallowRef([]);\nconst stocks = shallowRef([]);\nconst xy = Plot.normalizeX(\"sum\", {z: \"state\", x: \"population\", y: \"state\"});\n\nonMounted(() => {\n  Promise.all([\n    d3.csv(\"../data/aapl.csv\", d3.autoType),\n    d3.csv(\"../data/amzn.csv\", d3.autoType),\n    d3.csv(\"../data/goog.csv\", d3.autoType),\n    d3.csv(\"../data/ibm.csv\", d3.autoType)\n  ]).then((datas) => {\n    stocks.value = d3.zip([\"AAPL\", \"AMZN\", \"GOOG\", \"IBM\"], datas).flatMap(([Symbol, data]) => data.map((d) => ({Symbol, ...d})));\n  });\n  d3.csv(\"../data/us-population-state-age.csv\", d3.autoType).then((data) => {\n    const ages = data.columns.slice(1); // convert wide data to tidy data\n    stateage.value = Object.assign(ages.flatMap((age) => data.map((d) => ({state: d.name, age, population: d[age]}))), {ages});\n  });\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and D3\nDESCRIPTION: Sets up a Vue component with Observablehq Plot and D3 dependencies, initializing sample Olympic athlete data and loading data from a CSV file on mount.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/features/interactions.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\n\nconst olympians = shallowRef([\n  {weight: 31, height: 1.21, sex: \"female\"},\n  {weight: 170, height: 2.21, sex: \"male\"}\n]);\n\nonMounted(() => {\n  d3.csv(\"../data/athletes.csv\", d3.autoType).then((data) => (olympians.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Plot and D3 Dependencies\nDESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, and data files. It also initializes reactive references for datasets and loads data on component mount.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/rule.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef, onMounted} from \"vue\";\nimport aapl from \"../data/aapl.ts\";\nimport alphabet from \"../data/alphabet.ts\";\n\nconst seattle = shallowRef([]);\nconst simpsons = shallowRef(d3.cross(d3.range(1, 29), d3.range(1, 26), (x, y) => ({season: x, number_in_season: y})));\n\nonMounted(() => {\n  d3.csv(\"../data/seattle-weather.csv\", d3.autoType).then((data) => (seattle.value = data));\n  d3.csv(\"../data/simpsons.csv\", d3.autoType).then((data) => (simpsons.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Waffle Chart with Dynamic Data in Observable Plot\nDESCRIPTION: Creates a horizontal waffle chart using waffleX mark with dynamically updated data.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/waffle.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.waffleX([apples], {y: [\"apples\"]}).plot({height: 240})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Filtering vs. Undefined Values in Area Charts\nDESCRIPTION: Shows how filtering data creates interpolated straight lines between points, unlike using undefined values which creates gaps in the chart.\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/area.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.areaY(aapl, {filter: (d) => d.Date.getUTCMonth() >= 3, x: \"Date\", y: \"Close\", fillOpacity: 0.3}),\n    Plot.lineY(aapl, {x: \"Date\", y: (d) => d.Date.getUTCMonth() < 3 ? NaN : d.Close}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Grid Positioning with Bars Plot\nDESCRIPTION: Example showing how to create a bar chart with configurable grid positioning using Plot.plot()\nSOURCE: https://github.com/observablehq/plot/blob/main/docs/marks/grid.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {axis: \"top\", percent: true, grid: !atop},\n  marks: [\n    Plot.barX(alphabet, {x: \"frequency\", y: \"letter\", sort: {y: \"width\"}}),\n    atop ? Plot.gridX({interval: 1, stroke: \"var(--vp-c-bg)\", strokeOpacity: 0.5}) : null,\n    Plot.ruleX([0])\n  ]\n})\n```"
  }
]