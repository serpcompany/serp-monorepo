[
  {
    "owner": "fastify",
    "repo": "fastify-cli",
    "content": "TITLE: Creating a Standalone Fastify Server from CLI Application\nDESCRIPTION: This code demonstrates how to migrate from fastify-cli to a standalone Fastify server implementation. It shows proper server configuration, graceful shutdown handling with close-with-grace, environment variable integration, and plugin registration patterns.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\n// Read the .env file.\nrequire('dotenv').config()\n\n// Require the framework\nconst Fastify = require('fastify')\n\n// Require library to exit fastify process, gracefully (if possible)\nconst closeWithGrace = require('close-with-grace')\n\n// Instantiate Fastify with some config\nconst app = Fastify({\n  logger: true\n})\n\n// Register your application as a normal plugin.\nconst appService = require('./app.js')\napp.register(appService)\n\n// delay is the number of milliseconds for the graceful close to finish\ncloseWithGrace({ delay: process.env.FASTIFY_CLOSE_GRACE_DELAY || 500 }, async function ({ signal, err, manual }) {\n  if (err) {\n    app.log.error(err)\n  }\n  await app.close()\n})\n\n// Start listening.\napp.listen({ port: process.env.PORT || 3000 }, (err) => {\n  if (err) {\n    app.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Fastify Plugin with Server Instance\nDESCRIPTION: Example code showing how to require and register the Fastify plugin with a server instance. The example demonstrates creating a Fastify server, registering the plugin with optional configuration, and starting the server on port 3000.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/plugin/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\n\nfastify.register(require('__MY_PLUGIN__'), {\n  // put your options here\n})\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Async/Await Fastify plugin implementation in JavaScript\nDESCRIPTION: This snippet shows how to create a Fastify plugin using async/await syntax, which is supported in Node.js 8 and later versions.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// async-await-plugin.js\nmodule.exports = async function (fastify, options) {\n  fastify.get('/', async function (req, reply) {\n    return { hello: 'world' }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Fastify plugin implementation in JavaScript\nDESCRIPTION: This code snippet demonstrates a simple Fastify plugin that defines a single route. It uses a callback-style function for Node.js compatibility.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// plugin.js\nmodule.exports = function (fastify, options, next) {\n  fastify.get('/', function (req, reply) {\n    reply.send({ hello: 'world' })\n  })\n  next()\n}\n```\n\n----------------------------------------\n\nTITLE: Fastify plugin with custom server options in JavaScript\nDESCRIPTION: This example demonstrates how to export custom server options along with a Fastify plugin. These options can be used when starting the server with the CLI.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// plugin.js\nmodule.exports = function (fastify, options, next) {\n  fastify.get('/', function (req, reply) {\n    reply.send({ hello: 'world' })\n  })\n  next()\n}\n\nmodule.exports.options = {\n  https: {\n    key: 'key',\n    cert: 'cert'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Fastify Application with Test Helpers\nDESCRIPTION: Demonstrates how to use fastify-cli test helper functions (build and listen) to test a Fastify application using Node's test runner. Shows basic test setup with application injection testing.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { build, listen } = require('fastify-cli/helper')\n\nconst { test } = require('node:test')\nconst assert = require('node:assert')\n\ntest('test my application', async t => {\n  const argv = ['app.js']\n  const app = await build(argv, {\n    extraParam: 'foo',\n    skipOverride: true // If you want your application to be registered with fastify-plugin\n  })\n  t.after(() => app.close())\n\n  // test your application here:\n  const res = await app.inject('/')\n  assert.deepStrictEqual(res.json(), { hello: 'one' })\n})\n```\n\n----------------------------------------\n\nTITLE: Fastify plugin using ECMAScript Module format in JavaScript\nDESCRIPTION: This snippet shows how to create a Fastify plugin using ECMAScript Module format, which is supported in Node.js 14+ or 12.17.0+ (but < 13.0.0).\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function plugin (fastify, options) {\n  // Both `/foo` and `/foo/` are registered\n  fastify.get('/foo/', async function (req, reply) {\n    return 'foo'\n  })\n}\n\nexport const options = {\n  ignoreTrailingSlash: true\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Fastify Plugin\nDESCRIPTION: Example of how to register and use the Fastify plugin in a basic server setup.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/readme/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\nfastify.register(require('__packageName__'))\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Plugin Documentation in Markdown\nDESCRIPTION: This snippet provides a markdown link to the Fastify plugin documentation, which is crucial for understanding how to structure routes as plugins in a Fastify application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app/routes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Fastify\\nplugin](https://fastify.dev/docs/latest/Reference/Plugins/)\n```\n\n----------------------------------------\n\nTITLE: Testing Fastify Application with Custom Logging\nDESCRIPTION: Shows how to configure custom logging output to stderr when testing a Fastify application using the test helper functions.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = {\n  transport: {\n    target: 'pino-pretty',\n    options: {\n      destination: 2,\n    },\n  },\n}\nconst argv = ['app.js']\ntest('test my application with logging enabled', async t => {\n  const app = await build(argv, {}, { logger })\n  t.after(() => app.close())\n\n  // test your application here:\n  const res = await app.inject('/')\n  assert.deepStrictEqual(res.json(), { hello: 'one' })\n})\n```\n\n----------------------------------------\n\nTITLE: Fastify plugin in ECMAScript Module format with options\nDESCRIPTION: This snippet demonstrates a Fastify plugin using ECMAScript Module format that returns the options object. It's compatible with Node.js 14+ or 12.17.0+ (but < 13.0.0).\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// plugin.js\nexport default async function plugin (fastify, options) {\n  fastify.get('/', async function (req, reply) {\n    return options\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fastify plugin with CLI arguments in JavaScript\nDESCRIPTION: This example shows how to create a Fastify plugin that can accept custom options via CLI arguments. These options are passed to the plugin function.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// plugin.js\nmodule.exports = function (fastify, options, next) {\n  if (option.one) {\n    //...\n  }\n  //...\n  next()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fastify Project Using CLI\nDESCRIPTION: Command line usage for generating a new Fastify project in a specified folder. Supports multiple options including ESM modules, TypeScript, and standard linting configuration. Can be used to create a new project in a specific folder or the current directory.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/generate.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify generate <FOLDER>\n```\n\n----------------------------------------\n\nTITLE: Generating Fastify Plugin using CLI\nDESCRIPTION: Command to generate a new Fastify plugin project structure. The command initializes npm and creates plugin scaffolding in the specified directory. Using '.' as the folder argument creates files in the current directory.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/generate-plugin.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify generate-plugin <FOLDER>\n```\n\n----------------------------------------\n\nTITLE: Starting a Fastify Plugin with Custom Plugin Options\nDESCRIPTION: Example demonstrating how to start a Fastify plugin while passing custom options to the plugin using the double-dash separator.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/start.txt#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastify start plugin.js -- --custom-plugin-option-1 --custom-plugin-option-2\n```\n\n----------------------------------------\n\nTITLE: Starting a Fastify Plugin on a Custom Port\nDESCRIPTION: Example showing how to start a Fastify plugin on port 8080 using the start command.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/start.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify start -p 8080 plugin.js\n```\n\n----------------------------------------\n\nTITLE: Using the Fastify CLI eject command\nDESCRIPTION: Basic usage of the 'fastify eject' command to convert a Fastify application into a standalone executable with a server.js file. The default port is 3000 but can be customized using the PORT environment variable.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/eject.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify eject\n```\n\n----------------------------------------\n\nTITLE: Using Fastify CLI Commands\nDESCRIPTION: List of all available commands in the Fastify command line interface, including commands for server management, project generation, documentation, and debugging.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/help.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  * start                 start a server\n  * eject                 turns your application into a standalone executable with a server.js file being added.\n  * eject --lang=ts       turns your application into a standalone executable with a server.ts file being added.\n  * generate              generate a new project\n  * generate-plugin       generate a new plugin project\n  * generate-swagger      generate Swagger/OpenAPI schema for a project using @fastify/swagger\n  * readme                generate a README.md for the plugin\n  * print-routes          prints the representation of the internal radix tree used by the router, useful for debugging.\n  * print-plugins         prints the representation of the internal plugin tree used by avvio, useful for debugging.\n  * version               the current fastify-cli version\n  * help                  help about commands\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify CLI globally using npm\nDESCRIPTION: This command installs the Fastify CLI globally on the system, making it available for use in any directory.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install fastify-cli --global\n```\n\n----------------------------------------\n\nTITLE: Using Fastify Print Routes CLI Command\nDESCRIPTION: Command line syntax for using the Fastify print-routes utility. Supports options for filtering by HTTP method, displaying uncompressed radix tree, and including route hook details.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/print-routes.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify print-routes <file>\n\nOPTS\n\n  --method <METHOD>\n    print debugging safe internal router tree for a given method\n\n  --common-prefix\n      print uncompressed radix tree\n\n  --include-hooks\n      display all properties from the route.store object for each displayed route\n```\n\n----------------------------------------\n\nTITLE: Using the generate-plugin Command for Swagger/OpenAPI Schema Generation in Fastify CLI\nDESCRIPTION: This command syntax is used to generate Swagger/OpenAPI schema documentation for a Fastify project. The command requires a file parameter and supports optional plugin options. It uses @fastify/swagger plugin under the hood to generate API documentation.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/generate-swagger.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify generate-plugin [opts] <file> [--] [<plugin-options>]\n```\n\n----------------------------------------\n\nTITLE: Using the print-plugins command in Fastify CLI\nDESCRIPTION: The command pattern for using the Fastify CLI print-plugins feature. This command takes a file path as an argument and outputs the plugins registered in that Fastify application file.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/print-plugins.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify print-plugins <file>\n```\n\n----------------------------------------\n\nTITLE: Starting Fastify Plugin with Fastify CLI\nDESCRIPTION: Command to start the Fastify plugin using the Fastify CLI tool.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/readme/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastify start __pluginFileName__\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Development Server\nDESCRIPTION: Starts the Fastify application in development mode, making it accessible at http://localhost:3000.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Plugin via npm or yarn\nDESCRIPTION: Commands to install the Fastify plugin using npm or yarn package managers.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/readme/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i __packageName__\nyarn add __packageName__\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Development Server\nDESCRIPTION: Starts the Fastify application in development mode on http://localhost:3000\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts-esm/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Fastify-CLI Project in Development Mode\nDESCRIPTION: Command to start the Fastify-CLI app in development mode. The app will be accessible at http://localhost:3000 in the browser.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Fastify in Development Mode\nDESCRIPTION: Command to start the Fastify application in development mode, which enables features like hot reloading. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Fastify Production Server\nDESCRIPTION: Launches the Fastify application in production mode for deployment.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Production Server\nDESCRIPTION: Launches the Fastify application in production mode with optimized settings\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts-esm/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Fastify-CLI Project in Production Mode\nDESCRIPTION: Command to start the Fastify-CLI app in production mode.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Fastify in Production Mode\nDESCRIPTION: Command to start the Fastify application in production mode, which optimizes performance and disables development features.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Linting Configuration in package.json\nDESCRIPTION: Shows how to add linting configuration and scripts to a Fastify project's package.json file using neostandard.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n\"devDependencies\": {\n+ \"neostandard\": \"^0.11.9\",\n}\n\n\"scripts\": {\n+ \"pretest\": \"eslint\",\n  \"test\": \"node --test test/**/*.test.js\",\n  \"start\": \"fastify start -l info app.js\",\n  \"dev\": \"fastify start -l info -P app.js\",\n+ \"lint\": \"eslint --fix\"\n},\n```\n\n----------------------------------------\n\nTITLE: Fastify CLI eject command options for TypeScript support\nDESCRIPTION: Option flags for the 'fastify eject' command to use the TypeScript template when generating the standalone application. Either '--lang=ts' or '--lang=typescript' can be used.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/eject.txt#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--lang=ts, --lang=typescript\n```\n\n----------------------------------------\n\nTITLE: Fastify CLI eject command options for ESM support\nDESCRIPTION: Option flag for the 'fastify eject' command to use the ESM (ECMAScript Modules) template when generating the standalone application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/eject.txt#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--esm\n```\n\n----------------------------------------\n\nTITLE: YAML Format Option for Swagger/OpenAPI Schema Generation in Fastify CLI\nDESCRIPTION: An option flag for the generate-plugin command that specifies the output format should be YAML instead of the default JSON format.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/generate-swagger.txt#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--yaml=true\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Test Suite\nDESCRIPTION: Executes the test cases for the Fastify application to ensure functionality.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Tests\nDESCRIPTION: Executes the test suite for the Fastify application\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts-esm/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Fastify-CLI Project\nDESCRIPTION: Command to execute the test cases for the Fastify-CLI project.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Tests\nDESCRIPTION: Command to execute the test suite for the Fastify application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Using Fastify CLI Readme Command\nDESCRIPTION: Command usage for generating a README.md file for a Fastify plugin project. The command initializes the project with npm and creates a sample README.md based on the specified plugin file.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/readme.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastify readme <path-to-plugin-file>\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Fastify CLI Commands\nDESCRIPTION: Command to access detailed help information about specific Fastify CLI commands.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/help/help.txt#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastify help [command]\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Plugin via NPM\nDESCRIPTION: Command for installing the Fastify plugin using npm package manager.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/plugin/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i __MY_PLUGIN__\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Plugin Documentation in Markdown\nDESCRIPTION: This snippet provides a markdown link to the Fastify plugin documentation, which is crucial for understanding how to structure routes as plugins in a Fastify application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/routes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Fastify\nplugin](https://fastify.dev/docs/latest/Reference/Plugins/)\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Decorators Documentation in Markdown\nDESCRIPTION: This markdown link points to the Fastify decorators documentation, which is important for understanding how to share functionality between routes in a Fastify application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app/routes/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[decorators](https://fastify.dev/docs/latest/Reference/Decorators/)\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Decorators Documentation in Markdown\nDESCRIPTION: This markdown link points to the Fastify decorators documentation, which is important for understanding how to share functionality between routes in a Fastify application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/routes/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[decorators](https://fastify.dev/docs/latest/Reference/Decorators/)\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Promise Resolution Documentation in Markdown\nDESCRIPTION: This markdown link directs to the Fastify documentation on Promise resolution, which is essential for understanding how to use async/await in route definitions.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app/routes/README.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Promise resolution](https://fastify.dev/docs/latest/Reference/Routes/#promise-resolution)\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Promise Resolution Documentation in Markdown\nDESCRIPTION: This markdown link directs to the Fastify documentation on Promise resolution, which is crucial for understanding how to use async/await in route handlers.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/routes/README.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Promise resolution](https://fastify.dev/docs/latest/Reference/Routes/#promise-resolution)\n```\n\n----------------------------------------\n\nTITLE: Sample Path Structure in Fastify Routes\nDESCRIPTION: Example path structures referenced in the documentation showing how routes like /users should be organized into separate files and folders.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts-esm/src/routes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusers.js\nroot.js\nindex.js\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Fastify Routes\nDESCRIPTION: Example directory path showing the routes folder location in a Fastify CLI project\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts/src/routes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Routes Folder\n```\n\n----------------------------------------\n\nTITLE: Route Directory Path Reference\nDESCRIPTION: Referenced path pattern showing example route endpoint structure.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-ts-esm/src/routes/README.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/users\n```\n\n----------------------------------------\n\nTITLE: Referencing Fastify Plugin Module in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the fastify-plugin module in Markdown format. The fastify-plugin is crucial for defining non-encapsulated plugins in a Fastify application.\nSOURCE: https://github.com/fastify/fastify-cli/blob/main/templates/app-esm/plugins/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`fastify-plugin`](https://github.com/fastify/fastify-plugin)\n```"
  }
]