[
  {
    "owner": "logflare",
    "repo": "logflare",
    "content": "TITLE: Querying Logflare Sources via Management API\nDESCRIPTION: Examples of how to query Logflare sources using the Management API. Demonstrates both a basic endpoint call and a specific SQL query with timestamp filtering, which is required due to Logflare's partitioning approach.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/querying.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Endpoint\nGET https://api.logflare.app/api/query?sql=...\n\n# With a query\nGET https://api.logflare.app/api/query?bq_sql=select id, event_message, datetime(timestamp) as timestamp from `my_source` where timestamp > '2024-01-01'\n```\n\n----------------------------------------\n\nTITLE: Ingesting Logs via API Endpoints using Source UUID or Name\nDESCRIPTION: These API endpoints demonstrate how to send logs to Logflare by either specifying the source UUID or source name. Both methods use a POST request to the Logflare API.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.logflare.app/api/logs?source=9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3\n\nPOST https://api.logflare.app/api/logs?source_name=my.logs.source\n```\n\n----------------------------------------\n\nTITLE: Querying Logflare Endpoints via URL\nDESCRIPTION: Demonstrates the two methods to query a Logflare Endpoint: using the Endpoint UUID (which doesn't require authentication) or using the endpoint's name (which requires authentication with a valid access token).\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGET  https://api.logflare.app/api/endpoints/query/9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3\n\n# requires authentication\nGET  https://api.logflare.app/api/endpoints/query/my.custom.endpoint\n```\n\n----------------------------------------\n\nTITLE: Event Message Filtering Examples in LQL\nDESCRIPTION: Examples of filtering log event messages using exact matches, regex patterns, and case-insensitive searches.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/lql/index.md#2025-04-20_snippet_0\n\nLANGUAGE: LQL\nCODE:\n```\nerror\n\"staging error\"\n~server\\_\\d\n~\"log message \\d\\d\"\n~(?i)server\\_\\d\n~\"(?i)log message \\d\\d\"\n~some\\\"value\n~\"msg with \\\" spaces\"\n~\"jpg$|jpeg$|png$\"\n```\n\n----------------------------------------\n\nTITLE: CloudEvent Processed Log Format in Logflare\nDESCRIPTION: Shows how Logflare processes and transforms the CloudEvent data after ingestion. The example highlights the structure of the ingested log with the original CloudEvent metadata preserved and additional fields added by Logflare.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cloud_event\": {\n    \"specversion\": \"1.0\",\n    \"id\": \"01HPPC9X0HPKB8E1RSPA5YFZB2\",\n    \"source\": \"flyd\",\n    \"type\": \"io.fly.machine.start\",\n    \"time\": \"2024-02-15T12:36:45+00:00\"\n  },\n  \"machine_id\": \"148ed193b95948\",\n  \"status\": \"started\",\n  \"event_message\": \"...\",\n  \"timestamp\": \"...\",\n  \"id\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Filtering Examples in LQL\nDESCRIPTION: Examples of filtering log metadata using exact matches, comparisons, regex patterns, and array operations.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/lql/index.md#2025-04-20_snippet_1\n\nLANGUAGE: LQL\nCODE:\n```\nm.response.status_code:500\nm.response.status_code:>300\nm.response.status_code:<=400\nm.user.created_at:>2019-07-01T00:15:00\nm.browser:~\"Firefox 5\\d\"\nm.url:~\"jpg$|jpeg$|png$\"\nm.user.roles:@>\"new subscriber\"\nm.user.roles:@>~new\nm.user.roles:@>~\"new subscriber\"\n-m.user.company:\"My Company\"\nm.door_open:true\nm.user.plan:NULL\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Backend via Logflare API\nDESCRIPTION: Example of how to query the PostgreSQL backend using the Logflare management API endpoint. This requires a valid private access token and uses PostgreSQL dialect for queries.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/backends/postgres/index.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.logflare.app/api/\n```\n\n----------------------------------------\n\nTITLE: Sending Log Events to Logflare API using cURL\nDESCRIPTION: This snippet demonstrates how to send a log event to Logflare using a cURL POST request. It requires replacing the source ID and API key placeholders with actual values from your Logflare account. The request sends a JSON payload containing a message and metadata.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X \"POST\" \"https://api.logflare.app/logs/json?source=YOUR-SOURCE-ID-HERE\" \\\n        -H 'Content-Type: application/json; charset=utf-8' \\\n        -H 'X-API-KEY: YOUR-API-KEY-HERE' \\\n        -d $'[{\n        \"message\": \"This is the main event message\",\n        \"metadata\": {\"some\": \"log event\"}\n    }]'\n```\n\n----------------------------------------\n\nTITLE: Timestamp Filtering Examples in LQL\nDESCRIPTION: Examples of filtering logs by timestamp using relative and absolute time ranges.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/lql/index.md#2025-04-20_snippet_2\n\nLANGUAGE: LQL\nCODE:\n```\nt:today\nt:yesterday\nt:last@100hours\nt:last@7days\nt:last@30minutes\nt:this@week\nt:this@day\nt:this@month\nt:2022-04-{07..09}\nt:2022-04-{07..09}T00:{00..40}:00\nt:2022-04-{07..09}T00:{00..40}:00.{001..314}\n```\n\n----------------------------------------\n\nTITLE: Batch Ingestion of Multiple Log Events in JSON Format\nDESCRIPTION: This JSON structure demonstrates how to batch multiple log events in a single request for more efficient ingestion. Each event in the batch can have its own message and metadata.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch\": [\n    {\"message\": \"your event message 1\", \"metadata\": {...}},\n    {\"message\": \"your event message 2\", \"metadata\": {...}},\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ingesting Individual Log Events in JSON Format\nDESCRIPTION: This JSON structure shows how to format a single log event for ingestion. It includes a message field for the log event text and a metadata object for additional information.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"your log event message\",\n  \"metadata\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for 5xx Status Codes in Vercel Logs\nDESCRIPTION: LQL query example to search for all HTTP 5xx status codes in Vercel logs\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/vercel/index.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nm.proxy.statusCode:>499\n```\n\n----------------------------------------\n\nTITLE: Querying Logflare Endpoint with Parameters in PostgreSQL\nDESCRIPTION: Example of querying a Logflare Endpoint with required parameters (org_id, iso_timestamp_start, and iso_timestamp_end). Parameters are passed using the _param_ prefix which converts them to query parameters in the API call.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/postgres-fdw.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  db_size,\n  org_id,\n  runtime_hours,\n  runtime_minutes\nfrom\n  runtime_hours\nwhere _param_org_id = 123\n  and _param_iso_timestamp_start = '2023-07-01 02:03:04'\n  and _param_iso_timestamp_end = '2023-07-02';\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Logflare Deployment\nDESCRIPTION: Docker Compose configuration file that sets up Logflare with PostgreSQL database, including environment variables for both BigQuery and PostgreSQL backends, volume mounts for secrets, and port mappings.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/self-hosting/index.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres:13.4-alpine\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_DATABASE: logflare_docker\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - ./priv/wal.sql:/docker-entrypoint-initdb.d/wal.sql\n      - pg-data:/var/lib/postgresql/data\n  logflare:\n    image: supabase/logflare:1.0.1\n    ports:\n      - \"4000:4000\"\n    hostname: 127.0.0.1\n    environment:\n      - DB_DATABASE=logflare_docker\n      - DB_HOSTNAME=db\n      - DB_PORT=5432\n      - DB_PASSWORD=postgres\n      - DB_USERNAME=postgres\n      - LOGFLARE_SINGLE_TENANT=true\n      - LOGFLARE_API_KEY=my-cool-api-key\n      - GOOGLE_DATASET_ID_APPEND=_your_env\n      - GOOGLE_PROJECT_ID=logflare-docker-example\n      - GOOGLE_PROJECT_NUMBER=123123123213\n      - POSTGRES_BACKEND_URL=postgresql://user:pass@host:port/db\n      - POSTGRES_BACKEND_SCHEMA=my_schema\n    volumes:\n      - type: bind\n        source: ${PWD}/.env\n        target: /tmp/.secrets.env\n        read_only: true\n      - type: bind\n        source: ${PWD}/gcloud.json\n        target: /opt/app/rel/logflare/bin/gcloud.json\n        read_only: true\n    depends_on:\n      - db\n```\n\n----------------------------------------\n\nTITLE: Query Alert BigQuery SQL Example\nDESCRIPTION: Example SQL query for creating an alert that sums counter values from events with specific metadata. The query demonstrates how to unnest nested fields and filter by timestamp, which is required due to BigQuery partitioning.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/alerts/index.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect sum(s.counter) as docs_total_hits\nfrom `my.source` t\ncross join unnest(t.stats) as s\ncross join unnest(t.metadata) as m\nwhere t.timestamp >= '2024-05-05'\n    and m.from = 'docs'\n```\n\n----------------------------------------\n\nTITLE: Sandboxed SQL Query Example\nDESCRIPTION: Demonstrates how to create a sandboxed query using a Common Table Expression (CTE) that allows endpoint consumers to provide custom SQL through a query parameter while maintaining security limits.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nwith errors (\n    select event_message as err, count(id) as count as msg\n    from my_source_name\n    where regexp_contains(event_message, \"ERROR\") and timestamp >= \"2020-01-01\"\n    group by event_message\n    order by count desc\n) select err from errors\n\n```\n\n----------------------------------------\n\nTITLE: Querying BigQuery Streaming Buffer in SQL\nDESCRIPTION: SQL query to select fields from a partitioned table's streaming buffer. This is useful when needing to query data that hasn't yet been included in the partitioned tables.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/backends/bigquery/index.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fields FROM `dataset.partitioned_table_name` WHERE _PARTITIONTIME IS NULL\n```\n\n----------------------------------------\n\nTITLE: Chart Aggregation Examples in LQL\nDESCRIPTION: Examples of using chart aggregation functions for analyzing log data trends.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/lql/index.md#2025-04-20_snippet_3\n\nLANGUAGE: LQL\nCODE:\n```\nc:count(*)\nc:avg(m.latency)\nc:sum(m.latency)\nc:max(m.latency)\nc:p50(m.latency)\nc:p95(m.latency)\nc:p99(m.latency)\n```\n\n----------------------------------------\n\nTITLE: Unnesting Repeated Records in BigQuery SQL\nDESCRIPTION: SQL query demonstrating how to unnest nested columns represented as repeated RECORDs in BigQuery. This technique is necessary for querying inside nested records.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/backends/bigquery/index.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp, req.url, h.cf_cache_status\nFROM `your_project_id.your_dataset_name.your_table_name` t\nCROSS JOIN UNNEST(t.metadata) m\nCROSS JOIN UNNEST(m.request) req\nCROSS JOIN UNNEST(m.response) resp\nCROSS JOIN UNNEST(resp.headers) h\nWHERE DATE(timestamp) = \"2019-05-09\"\nORDER BY timestamp DESC\nLIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Example Event JSON Structure for Logflare Source\nDESCRIPTION: Sample JSON structure showing the format of events that can be sent to a Logflare source. This example includes an event message, stats with a counter, and metadata with a source identifier.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/alerts/index.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event_message\": \"Hello from Logflare!\",\n  \"stats\": { \"counter\": 1 },\n  \"metadata\": { \"from\": \"docs\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending CloudEvent Logs to Logflare API\nDESCRIPTION: Example of posting a CloudEvent-formatted log to Logflare's API. The example demonstrates the request format including required headers and the payload structure for a machine start event.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nPOST https://api.logflare.app/api/logs/cloud-event?source=f6cccd3a-c42e-40f7-9b01-95d3699d3113\nContent-Type: application/json\nX-API-KEY: XXXXX\nCE-specversion: 1.0\nCE-id: 01HPPC9X0HPKB8E1RSPA5YFZB2\nCE-source: flyd\nCE-type: io.fly.machine.start\nCE-time: 2024-02-15T12:36:45+00:00\n\n{\n  \"body\": {},\n  \"machine_id\": \"148ed193b95948\",\n  \"status\": \"started\"\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Bot User Agents in Vercel Logs\nDESCRIPTION: LQL query example to search for bot-related user agents in Vercel logs\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/vercel/index.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nm.proxy.userAgent:~\"bot\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Logpush for Logflare Integration\nDESCRIPTION: Instructions for setting up Cloudflare Logpush to send logs to Logflare. This example shows the HTTP destination URL format with required parameters including source UUID and API key authentication.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.logflare.app/api/logs/cloudflare?source=f6cccd3a-c42e-40f7-9b01-95d3699d3113&header_X_API_KEY=xxxxxxx\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Parameters Example\nDESCRIPTION: Shows how to create a SQL query that uses parameters (prefixed with @) which will be interpolated from the query parameters in the HTTP request.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from logs\nwhere logs.name = @name and logs.age > @min_age\n```\n\n----------------------------------------\n\nTITLE: Querying Sandboxed Logflare Endpoint in PostgreSQL\nDESCRIPTION: Example of querying a sandboxed Logflare Endpoint using the _param_sql filter. This parameter allows passing a SQL query directly to the endpoint for execution within the sandbox environment.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/postgres-fdw.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  id, event_message\nfrom\n  runtime_hours\nwhere _param_sql = 'select id, event_message from my_cte_table where org_id = 123'\n```\n\n----------------------------------------\n\nTITLE: Searching for Long-Running Lambda Functions\nDESCRIPTION: LQL query to find lambda requests with response times over 1000ms\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/vercel/index.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nm.parsedLambdaMessage.report.duration_ms:>1000\n```\n\n----------------------------------------\n\nTITLE: URL Query Parameters Example\nDESCRIPTION: Demonstrates how to format URL query parameters that will be interpolated into a SQL query with matching parameter names.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n?name=John+Doe&min_age=13&country=US\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Copying with Dot Notation Syntax\nDESCRIPTION: This syntax demonstrates how to copy fields from one path to another during ingestion. The colon separates source and destination paths, and dot notation is used for nested paths.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmetadata.nested_field:top_field\n```\n\n----------------------------------------\n\nTITLE: Resulting Interpolated SQL Query\nDESCRIPTION: Shows the final SQL query after the parameters have been interpolated from the HTTP request query parameters.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from logs\nwhere logs.name = \"John Doe\" and logs.age > 13\n```\n\n----------------------------------------\n\nTITLE: Pino Logger Example with Structured Data\nDESCRIPTION: Example of using Pino to log structured data with user and event information\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/vercel/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require(\"pino\")();\nlogger.info({\n  user: {\n    name: \"Joe Schmo\",\n    email: \"joe@dunder.dev\",\n    company: \"Dunder Dev\",\n    id: 38,\n  },\n  event: { type: \"request\", tag: \"api\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Copying Fields with Transformed Names in BigQuery\nDESCRIPTION: This example shows how to reference a field that has been automatically transformed to comply with BigQuery naming conventions. The original field with dashes is now referenced with its transformed name.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n_top_level:my_copied_field\n```\n\n----------------------------------------\n\nTITLE: Initial Log Event Structure Example in JSON\nDESCRIPTION: This JSON example shows a simple log event structure with a message and metadata object containing a single field. This represents the starting point for schema adaptation.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"This is my log event\",\n  \"metadata\": {\n    \"my\": \"first log\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logflare Logger in IEx Console\nDESCRIPTION: Example showing how to test log message functionality using LogflareLogger in IEx console\nSOURCE: https://github.com/logflare/logflare/blob/main/DEVELOPMENT.md#2025-04-20_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> LogflareLogger.info(\"testing log message\")\n```\n\n----------------------------------------\n\nTITLE: Enhanced Log Event Structure with New Field in JSON\nDESCRIPTION: This JSON example shows an evolved log event structure that adds a numeric counter field to the metadata. This demonstrates how log structures can evolve over time.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"This is my new log event\",\n  \"metadata\": {\n    \"my\": \"first log\",\n    \"counter\": 123\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Backend in Logflare YAML\nDESCRIPTION: YAML configuration for setting up the Loki backend in Logflare. It requires a URL and optional headers for authentication.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/backends/loki.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nurl: \"string\"\nheaders:\n  key: \"value\"\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Field Copy Rules in Sequence\nDESCRIPTION: This example shows how to configure multiple field copying rules that execute in sequence. Each line represents a separate copy operation that can build upon previous copies.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmetadata.my_nested.field:top\ntop:top_level_copy\ntop:backup_copy\n```\n\n----------------------------------------\n\nTITLE: SQL Query Parameter for Sandboxed Query\nDESCRIPTION: Shows how an endpoint consumer can pass a custom SQL query to be executed against the sandboxed result set defined in the endpoint.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n?sql=select err from errors where regexp_contains(err, \"my_error\")\n```\n\n----------------------------------------\n\nTITLE: TypeScript Schema Representation for Initial Log Structure\nDESCRIPTION: This TypeScript interface representation shows how Logflare internally represents the schema of the initial log structure with a string message and metadata containing a string field.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nmessage: string;\nmetadata: {\n    my: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Metadata Configuration Example in JSON\nDESCRIPTION: Example JSON payload showing how cluster metadata is included in logging output when LOGFLARE_METADATA_CLUSTER is configured.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/self-hosting/index.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"cluster\": \"production\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated TypeScript Schema with Adapted Field Types\nDESCRIPTION: This TypeScript interface shows how Logflare automatically adapts the schema to include the new numeric counter field while maintaining the existing fields and their types.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/ingestion/index.mdx#2025-04-20_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nmessage: string;\nmetadata: {\n  my: string;\n  counter: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Logged API Events\nDESCRIPTION: LQL query example to search for specific API events in logged data\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/vercel/index.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nm.parsedLambdaMessage.lines.data.event.tag:api\n```\n\n----------------------------------------\n\nTITLE: HTTP Response JSON Format\nDESCRIPTION: Shows the JSON response format returned by Logflare Endpoints, with results contained in the 'result' key of the response payload.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/concepts/endpoints.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [{\"err\": \"my erorr message\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Trace Metadata Example in JSON\nDESCRIPTION: Example JSON payload demonstrating how cluster metadata is included in OpenTelemetry trace attributes when LOGFLARE_METADATA_CLUSTER is set.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/self-hosting/index.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"system.cluster\": \"production\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Integration Response JSON Structure\nDESCRIPTION: Example JSON response payload that a webhook integration would receive when a Query Alert is triggered. The response contains an array of result objects with the calculated metrics from the alert query.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/alerts/index.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n        { \"docs_total_hits\": 1 },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Protected UI Routes Configuration\nDESCRIPTION: Glob patterns defining API routes that should be excluded from HTTP authentication when protecting the user interface.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/self-hosting/index.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/api/**/*\n/logs/**/*\n```\n\n----------------------------------------\n\nTITLE: Pino Logger Configuration with Environment\nDESCRIPTION: Example of configuring Pino logger with environment variables for production tracking\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/docs/integrations/vercel/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = require(\"pino\")({\n  base: {\n    env: process.env.ENV || \"ENV not set\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Supabase Mode Environment Configuration\nDESCRIPTION: Environment variables configuration for running Logflare in Supabase mode with single tenant setup\nSOURCE: https://github.com/logflare/logflare/blob/main/DEVELOPMENT.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nLOGFLARE_SINGLE_TENANT=true LOGFLARE_SUPABASE_MODE=true\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Logflare Website\nDESCRIPTION: Command to install all required dependencies for the Logflare website using Yarn package manager.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Logflare Website\nDESCRIPTION: Command to generate static website content into the 'build' directory which can then be deployed to any static content hosting service.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Logflare Website\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the website are reflected live without server restarts.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Deploying Logflare Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication, which builds the site and pushes to the deployment branch.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Logflare Website Without SSH\nDESCRIPTION: Command to deploy the website without SSH, requiring GitHub username. This builds the website and pushes to the 'gh-pages' branch for GitHub Pages hosting.\nSOURCE: https://github.com/logflare/logflare/blob/main/docs/docs.logflare.com/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt file defines rules for web crawlers and search engine bots. Currently, it has no active restrictions, allowing all crawlers to access the entire site. It includes commented examples showing how to block all crawlers from the entire site.\nSOURCE: https://github.com/logflare/logflare/blob/main/assets/static/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# See http://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file\n#\n# To ban all spiders from the entire site uncomment the next two lines:\n# User-agent: *\n# Disallow: /\n```"
  }
]