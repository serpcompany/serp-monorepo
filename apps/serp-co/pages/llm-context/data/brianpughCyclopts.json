[
  {
    "owner": "brianpugh",
    "repo": "cyclopts",
    "content": "TITLE: Installing Cyclopts\nDESCRIPTION: This snippet shows the command to install Cyclopts using pip. It requires Python 3.9 or higher.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install cyclopts\n```\n\n----------------------------------------\n\nTITLE: Adding Function Arguments to a Cyclopts Application in Python\nDESCRIPTION: Shows how to add a string argument to a Cyclopts application. The example demonstrates how Cyclopts identifies a positional argument and parses it as a string by default.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/getting_started.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main(name):\n    print(f\"Hello {name}!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py Alice\nHello Alice!\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Documentation with Docstrings in Cyclopts\nDESCRIPTION: Demonstrates how to add detailed help documentation for parameters using function docstrings. Cyclopts supports ReST, Google, Numpydoc-style and Epydoc docstring formats.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/getting_started.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main(name: str, count: int):\n    \"\"\"Help string for this demo application.\n\n    Parameters\n    ----------\n    name: str\n        Name of the user to be greeted.\n    count: int\n        Number of times to greet.\n    \"\"\"\n    for _ in range(count):\n        print(f\"Hello {name}!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\nHelp string for this demo application.\n\n╭─ Commands ──────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                           │\n│ --version  Display application version.                             │\n╰─────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────────────────╮\n│ *  NAME --name    Name of the user to be greeted. [required]        │\n│ *  COUNT --count  Number of times to greet. [required]              │\n╰─────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Commands with Cyclopts Python\nDESCRIPTION: Demonstrates the fundamental usage of the `@app.command` decorator to register individual Python functions (`fizz`, `buzz`) as distinct top-level commands in a Cyclopts application.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef fizz(n: int):\n    print(f\"FIZZ: {n}\")\n\n@app.command\ndef buzz(n: int):\n    print(f\"BUZZ: {n}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-Applications as Commands Cyclopts Python\nDESCRIPTION: Illustrates creating nested command structures by registering a separate `cyclopts.App` instance (`sub_app`) as a command under the main app using `app.command(sub_app)`. Commands defined on the sub-app (`bar`, `baz`) become subcommands.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\nsub_app = App(name=\"foo\")  # \"foo\" would be a better variable name than \"sub_app\".\n# \"sub_app\" in this example emphasizes the name comes from name=\"foo\".\napp.command(sub_app)  # Registers sub_app to command \"foo\"\n# Or, as a one-liner:  app.command(sub_app := App(name=\"foo\"))\n\n\n@sub_app.command\ndef bar(n: int):\n    print(f\"BAR: {n}\")\n\n\n# Alternatively, access subapps from app like a dictionary.\n@app[\"foo\"].command\ndef baz(n: int):\n    print(f\"BAZ: {n}\")\n\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Stacking Parameter Annotations with Validators in Cyclopts\nDESCRIPTION: This snippet illustrates adding multiple parameter attributes by stacking annotations, combining a custom ByteSize converter with a validator function that enforces the size to be a multiple of 4096. Shows how Python flattens annotations and how Cyclopts searches right-to-left for parameter attribute resolution, affecting validation prioritization.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef must_be_multiple_of_4096(type_, value):\n    assert value % 4096 == 0, \"Size must be a multiple of 4096\"\n\n@app.command\ndef zero(size: Annotated[ByteSize, Parameter(validator=must_be_multiple_of_4096)]):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Cyclopts CLI with Dataclass\nDESCRIPTION: This Python snippet demonstrates creating a basic Cyclopts application that uses a Python dataclass as a command parameter. It defines an `App`, a simple `Movie` dataclass, and an `add` command that accepts a `Movie` object. Cyclopts automatically parses command-line arguments into the dataclass fields.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom dataclasses import dataclass\n\napp = App(name=\"movie-maintainer\")\n\n@dataclass\nclass Movie:\n   title: str\n   year: int\n\n@app.command\ndef add(movie: Movie):\n   print(f\"Adding movie: {movie}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Using CLI Command with Shared Dataclass Parameters\nDESCRIPTION: This console snippet demonstrates invoking the `remove` command, providing the `Movie` parameters positionally and one of the shared `Config` parameters (`--user`) as a keyword argument. The output shows that both sets of parameters are successfully parsed and received by the command function.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer remove 'Mad Max: Fury Road' 2015 --user Guido\nConfig: Config(user='Guido', server='media.sqlite')\nRemoving movie: Movie(title='Mad Max: Fury Road', year=2015)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Validator Function - Python\nDESCRIPTION: This code snippet defines the signature of a validator function in cyclopts. This function is designed to validate user input after data conversion has taken place. It takes the data type and the input value as arguments and should raise an exception if the value is invalid.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameter_validators.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef validator(type_, value: Any) -> None:\n    pass  # Raise any exception here if ``value`` is invalid.\n```\n\n----------------------------------------\n\nTITLE: Using Path Validator in Cyclopts - Python\nDESCRIPTION: This code demonstrates how to use the `Path` validator in cyclopts to ensure a file exists. It uses the `App`, `Parameter`, and `validators` modules, along with type hinting and the `pathlib.Path` object. The validator is applied to a parameter in a command-line application, and an example of usage with expected and error outputs is provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameter_validators.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter, validators\nfrom typing import Annotated\nfrom pathlib import Path\n\napp = App()\n\n@app.default()\ndef foo(path: Annotated[Path, Parameter(validator=validators.Path(exists=True))]):\n    print(f\"File contents:\\n{path.read_text()}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Cyclopts Apps\nDESCRIPTION: Demonstrates how Cyclopts handles exceptions by default and how to modify this behavior using exit_on_error and print_error parameters. Shows different approaches to error handling.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/app_calling.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp(\"this-is-not-a-registered-command\")\nprint(\"this will not be printed since cyclopts exited above.\")\n# ╭─ Error ─────────────────────────────────────────────────────────────╮\n# │ Unknown command \"this-is-not-a-registered-command\".                 │\n# ╰─────────────────────────────────────────────────────────────────────╯\n\napp(\"this-is-not-a-registered-command\", exit_on_error=False, print_error=False)\n# Traceback (most recent call last):\n#   File \"/cyclopts/scratch.py\", line 9, in <module>\n#     app(\"this-is-not-a-registered-command\", exit_on_error=False, print_error=False)\n#   File \"/cyclopts/cyclopts/core.py\", line 1102, in __call__\n#     command, bound, _ = self.parse_args(\n#   File \"/cyclopts/cyclopts/core.py\", line 1037, in parse_args\n#     command, bound, unused_tokens, ignored, argument_collection = self._parse_known_args(\n#   File \"/cyclopts/cyclopts/core.py\", line 966, in _parse_known_args\n#     raise InvalidCommandError(unused_tokens=unused_tokens)\n# cyclopts.exceptions.InvalidCommandError: Unknown command \"this-is-not-a-registered-command\".\n\ntry:\n    app(\"this-is-not-a-registered-command\", exit_on_error=False, print_error=False)\nexcept CycloptsError:\n    pass\nprint(\"Execution continues since we caught the exception.\")\n```\n\n----------------------------------------\n\nTITLE: Handling Optional List Arguments with Empty Iterable Flags in Cyclopts Using Python\nDESCRIPTION: This snippet illustrates how Cyclopts enhances CLI optional list parameter handling in Python. The function \"foo\" accepts an optional list of integers with a default None, assigning a default list [1, 2, 3] when None. Cyclopts does not bind any argument if the CLI option is missing, thus preserving the default value None internally. It introduces an '--empty-favorite-numbers' flag to explicitly pass an empty list. This approach prevents mutable default pitfalls and improves parameter semantics for CLI users. Dependencies include the Cyclopts library and Python's typing.Optional. Input variations include providing list values, no argument, or the empty flag. Outputs are the printed favorite numbers list accordingly.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/optional_list/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default()\ndef foo(favorite_numbers: Optional[list[int]] = None):\n    if favorite_numbers is None:\n        favorite_numbers = [1, 2, 3]\n    print(f\"My favorite numbers are: {favorite_numbers}\")\n\ncyclopts_app([\"--favorite-numbers\", \"100\", \"--favorite-numbers\", \"200\"])\n# My favorite numbers are: [100, 200]\ncyclopts_app([])\n# My favorite numbers are: [1, 2, 3]\ncyclopts_app([\"--empty-favorite-numbers\"])\n# My favorite numbers are: []\n```\n\n----------------------------------------\n\nTITLE: Using Cyclopts Command with Variable Keyword Arguments - Console\nDESCRIPTION: Demonstrates calling the `add` command from the command line with multiple `--key=value` arguments. These keyword arguments are collected by Cyclopts and passed to the `**country_to_capitols` dictionary parameter within the command function.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/args_and_kwargs.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ my-script add --united-states=\"Washington, D.C.\" --canada=Ottawa\nAdding united-states with capitol Washington, D.C..\nAdding canada with capitol Ottawa.\n```\n\n----------------------------------------\n\nTITLE: User-Defined Classes in Cyclopts\nDESCRIPTION: Example showing how to use dataclasses and other user-defined classes as parameters with subkey parsing.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom dataclasses import dataclass\nfrom typing import Literal\n\napp = App()\n\n@dataclass\nclass User:\n   name: str\n   age: int\n   region: Literal[\"us\", \"ca\"] = \"us\"\n\n@app.default\ndef main(user: User):\n   print(user)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Markup Help Format (Python)\nDESCRIPTION: Demonstrates setting the help format to `\"rich\"` in a Cyclopts app, enabling the use of Rich library markup within docstrings for features like colored text. Newlines are interpreted literally.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(help_format=\"rich\")\n\n@app.default\ndef default():\n   \"\"\"Rich can display colors like [red]red[/red] easily.\n\n   However, I cannot be bothered to figure out how to show that in documentation.\n   \"\"\"\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Flag with Cyclopts - Python\nDESCRIPTION: This snippet demonstrates how to implement a version flag using the Cyclopts library. It initializes a Cyclopts `App` object, providing the version string directly. When the `--version` flag is passed, the application will automatically print the specified version string. The dependency is the `cyclopts` library.  This approach is more concise than the Typer implementation, with the version detection potentially automatically derived from the package if not explicitly set.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/version_flag/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App(version=\"1.2.3\")\ncyclopts_app([\"--version\"])\n# 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Implementing Subcommands with Cyclopts in Python\nDESCRIPTION: Shows how to create nested subcommands using Cyclopts' App objects. This approach creates explicit hierarchical command structures by instantiating App objects and registering them as subcommands, providing more explicit control over the command tree.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/subcommands/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\napp.command(ec2 := App(name=\"ec2\"))\n\n\n@ec2.command\ndef start_instances(*instances):\n    \"\"\"Start instances.\n\n    Args:\n        *instances: {instance}s to start\n    \"\"\"\n    for inst in instances:\n        print(f\"Starting {inst}\")\n\n\n@ec2.command\ndef stop_instances(*instances):\n    \"\"\"Stop instances.\n\n    Args:\n        *instances: {instance}s to stop\n    \"\"\"\n    for inst in instances:\n        print(f\"Stopping {inst}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining Bool Type with Keywords\nDESCRIPTION: This code showcases how to use boolean flags in Cyclopts. When a boolean is specified as a keyword, it acts as a flag. Presence of the flag indicates `True` while absence is `False`.  The --no-FLAG-NAME is the standard for setting the flag to `False`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(my_flag: bool):\n    print(my_flag)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Registering Async Commands with Cyclopts Python\nDESCRIPTION: Shows that Cyclopts fully supports registering and running asynchronous Python functions (`async def`) as commands.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom cyclopts import App\n\napp = App()\n\n@app.command\nasync def foo():\n    await asyncio.sleep(10)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cyclopts Development Environment with Poetry in Bash\nDESCRIPTION: This snippet outlines a sequence of bash commands to clone the Cyclopts GitHub repository, change the working directory, and install dependencies using Poetry. It is intended for developers who want to contribute or modify Cyclopts. This requires Git, Poetry, and Python 3.9 or newer.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/Installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/BrianPugh/cyclopts.git\ncd cyclopts\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Typer Flag Negation Example\nDESCRIPTION: This code shows how Typer automatically adds a `--no-MY-FLAG-NAME` option to negate a boolean flag.  It imports the typer library, defines a Typer app, and uses the `@typer_app.command()` decorator to create a command-line interface function. The function takes a boolean parameter `my_flag` with a default value of `False`. When `--my-flag` is passed, `my_flag` becomes `True`; when `--no-my-flag` is passed, `my_flag` becomes `False`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/flag_negation/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo(my_flag: bool = False):\n    print(f\"{my_flag=}\")\n\ntyper_app([\"--my-flag\"], standalone_mode=False)\n# my_flag=True\ntyper_app([\"--no-my-flag\"], standalone_mode=False)\n# my_flag=False\n```\n\n----------------------------------------\n\nTITLE: Organizing Parameters into Groups with Validators in Cyclopts (Python)\nDESCRIPTION: Illustrates defining parameter groups explicitly using `cyclopts.Group`, implicitly using strings (\"Engine\"), and inline (`Group(\"Wheels\")`). Shows how to assign parameters (like `car`, `truck`, `hp`) to these groups within a command function signature using `typing.Annotated` and `cyclopts.Parameter`. Also demonstrates applying a `validators.MutuallyExclusive` validator to the `vehicle_type_group`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Group, Parameter, validators\nfrom typing import Annotated\n\napp = App()\n\nvehicle_type_group = Group(\n    \"Vehicle (choose one)\",\n    default_parameter=Parameter(negative=\"\"),  # Disable \"--no-\" flags\n    validator=validators.MutuallyExclusive(),  # Only one option is allowed to be selected.\n)\n\n@app.command\ndef create(\n    *,  # force all subsequent variables to be keyword-only\n    # Using an explicitly created group object.\n    car: Annotated[bool, Parameter(group=vehicle_type_group)] = False,\n    truck: Annotated[bool, Parameter(group=vehicle_type_group)] = False,\n    # Implicitly creating an \"Engine\" group.\n    hp: Annotated[float, Parameter(group=\"Engine\")] = 200,\n    cylinders: Annotated[int, Parameter(group=\"Engine\")] = 6,\n    # You can explicitly create groups in-line.\n    wheel_diameter: Annotated[float, Parameter(group=Group(\"Wheels\"))] = 18,\n    # Groups within the function signature can always be referenced with a string.\n    rims: Annotated[bool, Parameter(group=\"Wheels\")] = False,\n):\n    pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Launching Cyclopts Application with Meta-App Feature in Python\nDESCRIPTION: Demonstrates a typical Cyclopts application launch by creating an App instance, registering commands, and invoking the app. This snippet requires the 'cyclopts' framework. The main app is initialized without meta logic and run by calling the app instance, which parses command-line input and executes the corresponding commands.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n# Register some commands here (not shown)\napp()  # Run the app\n```\n\n----------------------------------------\n\nTITLE: Using Dataclass and Function Docstrings for Cyclopts Help Text (Console Output)\nDESCRIPTION: This console output shows the `--help` message generated by `cyclopts` based on the Python code utilizing docstrings. It displays the short summary from the `main` function's docstring, the parameter description for `USER.NAME` from the `User` dataclass docstring, and the overridden description for `USER.AGE` from the `main` function's docstring.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\nA short summary of what this program does.\n\n╭─ Commands ──────────────────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                                       │\n│ --version  Display application version.                                         │\n╰─────────────────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────────────────────────────╮\n│ *  USER.NAME --user.name  First and last name of the user. [required]           │\n│ *  USER.AGE --user.age    User's age docstring from the command docstring.      │\n│                           [required]                                            │\n╰─────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Initializing a TOML-Based Configuration in Cyclopts Using Python\nDESCRIPTION: This Python snippet shows how to create a CLI application with Cyclopts that integrates configuration from a TOML file named 'pyproject.toml'. The App.config attribute is set to cyclopts.config.Toml, specifying the file to read, the root namespace keys within the TOML document, and enabling searching parent directories for the config file if not found locally. The example defines a CLI command 'count' that counts occurrences of a specified character in a given file, with defaults possibly overridden via the TOML configuration. Dependencies include the 'cyclopts' library, Python standard pathlib, and a valid TOML file structure.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/config_file.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# character-counter.py\nimport cyclopts\nfrom pathlib import Path\n\napp = cyclopts.App(\n    name=\"character-counter\",\n    config=cyclopts.config.Toml(\n        \"pyproject.toml\",  # Name of the TOML File\n        root_keys=[\"tool\", \"character-counter\"],  # The project's namespace in the TOML.\n        # If \"pyproject.toml\" is not found in the current directory,\n        # then iteratively search parenting directories until found.\n        search_parents=True,\n    ),\n)\n\n@app.command\ndef count(filename: Path, *, character=\"-\"):\n    print(filename.read_text().count(character))\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Help Output and Validation Error for Grouped Parameters\nDESCRIPTION: Shows the console output for the help page of the script with grouped parameters (`Organizing Parameters into Groups`). It also demonstrates the error message generated by the `MutuallyExclusive` validator when conflicting parameters (`--car` and `--truck`) belonging to the same group are provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python my-script.py create --help\nUsage: my-script.py create [OPTIONS]\n\n╭─ Engine ──────────────────────────────────────────────────────╮\n│ --hp         [default: 200]                                   │\n│ --cylinders  [default: 6]                                     │\n╰───────────────────────────────────────────────────────────────╯\n╭─ Vehicle (choose one) ────────────────────────────────────────╮\n│ --car    [default: False]                                     │\n│ --truck  [default: False]                                     │\n╰───────────────────────────────────────────────────────────────╯\n╭─ Wheels ──────────────────────────────────────────────────────╮\n│ --wheel-diameter  [default: 18]                               │\n│ --rims --no-rims  [default: False]                            │\n╰───────────────────────────────────────────────────────────────╯\n\n$ python my-script.py create --car --truck\n╭─ Error ───────────────────────────────────────────────────────╮\n│ Invalid values for group \"Vehicle (choose one)\". Mutually     │\n│ exclusive arguments: {--car, --truck}                         │\n╰───────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Using Number Validator in Cyclopts - Python\nDESCRIPTION: This code showcases the usage of the `Number` validator within cyclopts to set minimum and maximum input values. It imports the necessary modules like `App`, `Parameter`, and `validators` and uses type hinting with `Annotated` to define the parameter and its validator. The validator is set to accept numbers between 0 (inclusive) and 16 (exclusive). The snippet provides an example demonstrating the validator's behavior.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameter_validators.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter, validators\nfrom typing import Annotated\n\napp = App()\n\n@app.default()\ndef foo(n: Annotated[int, Parameter(validator=validators.Number(gte=0, lt=16))]):\n    print(f\"Your number in hex is {str(hex(n))[2]}.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Processing Files with Wildcards Example\nDESCRIPTION: Demonstrates how the console-level wildcard expansion works with Cyclopts to process multiple files.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ls foo\nbuzz.bin fizz.bin\n\n$ my-program foo/*.bin output.bin\nProcessing files [PosixPath('foo/buzz.bin'), PosixPath('foo/fizz.bin')] to PosixPath('output.bin').\n```\n\n----------------------------------------\n\nTITLE: Console Help Page Output for Group and Sort Key\nDESCRIPTION: This example provides the expected help page output when using the `Group` and `sort_key` attributes. The groups are displayed on the help page in the order determined by the `sort_key` or group name. Groups with a sort key are displayed first, followed by those without a sort key sorted alphabetically.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nUsage: app COMMAND\n\n╭─ 4 ────────────────────────────────────────────────────────────────╮\n│ cmd1                                                               │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ 3 ────────────────────────────────────────────────────────────────╮\n│ cmd2                                                               │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ 1 ────────────────────────────────────────────────────────────────╮\n│ cmd4                                                               │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ 2 ────────────────────────────────────────────────────────────────╮\n│ cmd3                                                               │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ Commands ─────────────────────────────────────────────────────────╮\n│ --help,-h  Display this message and exit.                          │\n│ --version  Display application version.                            │\n╰────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Sharing Dataclass Parameters Between Commands\nDESCRIPTION: This Python snippet demonstrates how a flattened dataclass can be used to share common parameters across multiple commands (`add` and `remove`). A `Config` dataclass is defined and decorated with `@Parameter(name=\"*\")` to flatten its fields (`user`, `server`). Both commands include `config: Config` as a keyword-only parameter, making `--user` and `--server` available to both.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\n\napp = App(name=\"movie-maintainer\")\n\n@Parameter(name=\"*\")\n@dataclass\nclass Config:\n   user: str\n   server: str = \"media.sqlite\"\n\n@dataclass\nclass Movie:\n   title: str\n   year: int\n\n@app.command\ndef add(movie: Movie, *, config: Config):\n   print(f\"Config: {config}\")\n   print(f\"Adding movie: {movie}\")\n\n@app.command\ndef remove(movie: Movie, *, config: Config):\n   print(f\"Config: {config}\")\n   print(f\"Removing movie: {movie}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Dictionary Parameter Handling with Keyword Dot-Notation\nDESCRIPTION: Demonstrates how to populate dictionary parameters using keyword dot-notation in Cyclopts.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef default(message: str, *, mapping: dict[str, str] | None = None):\n    if mapping:\n        for find, replace in mapping.items():\n            message = message.replace(find, replace)\n    print(message)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Arguments with Type Hints in Cyclopts\nDESCRIPTION: Demonstrates how to use multiple arguments with different type hints. The example shows string, integer, and boolean arguments, with the boolean parameter implemented as a flag option.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/getting_started.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main(name: str, count: int, formal: bool = False):\n    for _ in range(count):\n       if formal:\n          print(f\"Hello {name}!\")\n       else:\n          print(f\"Hey {name}!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py Alice 3\nHey Alice!\nHey Alice!\nHey Alice!\n\n$ python main.py Alice 3 --formal\nHello Alice!\nHello Alice!\nHello Alice!\n```\n\n----------------------------------------\n\nTITLE: Using Dataclass and Function Docstrings for Cyclopts Help Text (Python)\nDESCRIPTION: This Python snippet demonstrates how `cyclopts` uses docstrings from both the dataclass (`User`) definition and the command function (`main`) to generate help text. The docstring for `User.name` is taken from the class, while the docstring for `user.age` is overridden by the specific entry in the `main` function's docstring (NumPy style). It uses `App` from `cyclopts` and `dataclass` from `dataclasses`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom dataclasses import dataclass\n\napp = App()\n\n@dataclass\nclass User:\n   name: str\n   \"First and last name of the user.\"\n\n   age: int\n   \"Age in years of the user.\"\n\n@app.default\ndef main(user: User):\n   \"\"\"A short summary of what this program does.\n\n   Parameters\n   ----------\n   user.age: int\n      User's age docstring from the command docstring.\n   \"\"\"\n   print(user)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Example Help Output with Grouped Commands\nDESCRIPTION: Displays the console output for the help page of the script defined in the previous Python snippet (`Organizing Commands into Groups`). It shows commands organized under the specified \"Admin\" group and the default \"Commands\" group.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python my-script.py --help\nUsage: my-script.py COMMAND\n\n╭─ Admin ──────────────────────────────────────────────────────────────────────╮\n│ info       Print debugging system information.                               │\n│ --help,-h  Display this message and exit.                                    │\n│ --version  Display application version.                                      │\n╰──────────────────────────────────────────────────────────────────────────────╯\n╭─ Commands ───────────────────────────────────────────────────────────────────╮\n│ download  Download a file.                                                   │\n│ upload    Upload a file.                                                     │\n╰──────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Invoking Commands with Custom Names from CLI Console\nDESCRIPTION: Demonstrates running commands whose names have been customized using either the `name_transform` configuration or the manual `name` argument in the `@app.command` decorator, as shown in the corresponding Python examples.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo_bar\nrunning function foo_bar\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script bar\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Configuration with cyclopts in Python\nDESCRIPTION: Demonstrates how to configure a cyclopts.App instance to automatically read configuration options from environment variables derived from a specified prefix. Shows example app definition, command registration, and how environment variables map to command arguments. Dependencies include the cyclopts library and a Python environment. The snippet accepts commands with parameters and resolves their values either from CLI parameters or from appropriately named environment variables with a user-specified prefix. The example reveals the fallback mechanism and naming conventions for environment variables.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\napp = cyclopts.App(config=cyclopts.config.Env(\"MY_SCRIPT_\"))\n\n@app.command\ndef my_command(foo, bar):\n    print(f\"{foo=} {bar=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Example command-line usage for Cyclopts application\nDESCRIPTION: Demonstrates how to run the Cyclopts CLI application module using Python's -m flag, passing arguments to execute a command defined in __main__.py, resulting in a greeting output. Illustrates the expected terminal interaction.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/packaging.rst#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ python -m mypackage World\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Annotated Parameter Types with Cyclopts\nDESCRIPTION: This code defines a new custom parameter type ByteSize by annotating int with a converter parameter. It shows direct usage of this type in a command function, as well as stacking additional validators via annotation. Demonstrates parameter stacking with right-to-left resolution, used for advanced validation logic.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nByteSize = Annotated[int, Parameter(converter=byte_units)]\n```\n\n----------------------------------------\n\nTITLE: Using CLI Command with Positional Dataclass Arguments\nDESCRIPTION: This console snippet demonstrates invoking the `add` command, passing the dataclass fields (`title` and `year`) as positional arguments. Cyclopts correctly maps these positional arguments to the corresponding fields in the `Movie` dataclass.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer add 'Mad Max: Fury Road' 2015\nAdding movie: Movie(title='Mad Max: Fury Road', year=2015)\n```\n\n----------------------------------------\n\nTITLE: Typer Equivalent Application\nDESCRIPTION: This snippet showcases the attempt to recreate Cyclopts advanced functionalities in Typer, emphasizing the increased complexity. It requires defining an enum for environments and a custom parser for replicas, and the help messages are less informative.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing import Annotated, Literal\nfrom enum import Enum\n\napp = typer.Typer()\n\nclass Environment(str, Enum):\n    dev = \"dev\"\n    staging = \"staging\"\n    prod = \"prod\"\n\ndef replica_parser(value: str):\n    if value == \"default\":\n        return 10\n    elif value == \"performance\":\n        return 20\n    else:\n        return int(value)\n\ndef _version_callback(value: bool):\n    if value:\n        print(\"0.0.0\")\n        raise typer.Exit()\n\n@app.callback()\ndef callback(\n    version: Annotated[\n        bool | None, typer.Option(\"--version\", callback=_version_callback)\n    ] = None,\n):\n    pass\n\n@app.command(help=\"Deploy code to an environment.\")\ndef deploy(\n    env: Annotated[Environment, typer.Argument(help=\"Environment to deploy to.\")],\n    replicas: Annotated[\n        int,\n        typer.Argument(\n            parser=replica_parser,\n            help=\"Number of workers to spin up.\",\n        ),\n    ] = replica_parser(\"default\"),\n):\n    print(f\"Deploying to {env.name} with {replicas} replicas.\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Setting Command Help via Decorator (Python)\nDESCRIPTION: Shows how to set the help string for a specific command (`bar`) using the `help` argument within the `@app.command` decorator. This method has the highest precedence for defining a command's help text.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App()\n\n\n@app.command(help=\"This is the highest precedence help-string for 'bar'.\")\ndef bar():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring PlainText Help Format (Python)\nDESCRIPTION: Shows how to configure a Cyclopts app to use plain text formatting for help messages by setting `help_format=\"plaintext\"`. Docstrings are displayed as-is without additional parsing or text reflowing.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(help_format=\"plaintext\")\n\n@app.default\ndef default():\n    \"\"\"My application summary.\n\n    This is a pretty standard docstring; if there's a really long sentence\n    I should probably wrap it because people don't like code that is more\n    than 80 columns long.\n\n    In this new paragraph, I would like to discuss the benefits of relaxing 80 cols to 120 cols.\n    More text in this paragraph.\n\n    Some new paragraph.\n    \"\"\"\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameter Validators (Python)\nDESCRIPTION: Demonstrates creating and using a custom parameter validator function via `Parameter(validator=...)`. The example validator function `validate_age` checks if an integer input is within a reasonable age range (0-150) and raises a `ValueError` if not, causing Cyclopts to display an error.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\ndef validate_age(type_, value):\n    if value < 0:\n        raise ValueError(\"Negative ages not allowed.\")\n    if value > 150:\n        raise ValueError(\"You are too old to be using this application.\")\n\n@app.default\ndef allowed_to_buy_alcohol(age: Annotated[int, Parameter(validator=validate_age)]):\n    print(\"Under 21: prohibited.\" if age < 21 else \"Good to go!\")\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script 30\nGood to go!\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script 10\nUnder 21: prohibited.\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script -1\n╭─ Error ──────────────────────────────────────────────────────────────────────╮\n│ Invalid value \"-1\" for \"AGE\". Negative ages not allowed.                     │\n╰──────────────────────────────────────────────────────────────────────────────╯\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script 200\n╭─ Error ──────────────────────────────────────────────────────────────────────╮\n│ Invalid value \"200\" for \"AGE\". You are too old to be using this application. │\n╰──────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Validators Classes\nDESCRIPTION: Summary list of built-in validator classes in Cyclopts, including LimitedChoice, MutuallyExclusive, Number, and Path. Each validator enforces specific input constraints for CLI arguments, such as restricting choices, ensuring exclusivity, or validating paths. All classes include members that implement their validation logic.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_35\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: cyclopts.validators.LimitedChoice\n   :members:\n\n.. autoclass:: cyclopts.validators.MutuallyExclusive\n   :members:\n\n.. autoclass:: cyclopts.validators.Number\n   :members:\n\n.. autoclass:: cyclopts.validators.Path\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Help Output and Execution of Cyclopts App\nDESCRIPTION: This snippet demonstrates the help output and execution of the Cyclopts application with advanced type hinting. It shows how Cyclopts generates helpful messages and manages different argument values, including type validation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ my-script deploy --help\nUsage: my-script.py deploy [ARGS] [OPTIONS]\n\nDeploy code to an environment.\n\n╭─ Parameters ────────────────────────────────────────────────────────────────────────────────────╮\n│ *  ENV --env            Environment to deploy to. [choices: dev, staging, prod] [required]      │\n│    REPLICAS --replicas  Number of workers to spin up. [choices: default, performance] [default: │\n│                         default]                                                                │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n$ my-script deploy staging\nDeploying to staging with 10 replicas.\n\n$ my-script deploy staging 7\nDeploying to staging with 7 replicas.\n\n$ my-script deploy staging performance\nDeploying to staging with 20 replicas.\n\n$ my-script deploy nonexistent-env\n╭─ Error ────────────────────────────────────────────────────────────────────────────────────────────╮\n│ Error converting value \"nonexistent-env\" to typing.Literal['dev', 'staging', 'prod'] for \"--env\".  │\n╰────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n$ my-script --version\n0.0.0\n```\n\n----------------------------------------\n\nTITLE: Executing Advanced Cyclopts Script\nDESCRIPTION: This snippet showcases the execution of the Python script created in the previous snippet. It displays how to run the default action when no command is provided and how to execute the 'foo' command with an argument.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python demo.py\nHello world! This runs when no command is specified.\n\n$ python demo.py foo 3\nLooping! 0\nLooping! 1\nLooping! 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-Wide Default Parameter Behavior in Cyclopts (Python)\nDESCRIPTION: This Python snippet demonstrates configuring the entire Cyclopts application to consume multiple values for each parameter by setting the root-level 'default_parameter' to Parameter(consume_multiple=True). This eliminates the need to repeat the configuration for every parameter and affects all argument parsing unless overridden. Depends on the cyclopts library and is set at application instantiation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/keyword_multiple_values/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\n\napp = App(default_parameter=Parameter(consume_multiple=True))\n```\n\n----------------------------------------\n\nTITLE: Registering and Invoking Provider Downloaders for CLI with Cyclopts in Python\nDESCRIPTION: This snippet demonstrates setting up a Python command-line tool using the cyclopts framework to provide a 'download' command, supporting multiple cloud providers (GCP, AWS, Azure). It manually defines provider-specific functions, registers them in a dictionary, and routes the CLI 'provider' parameter to the correct function implementation. Required dependencies: cyclopts (Python CLI framework), pathlib, and typing. Key parameters include 'bucket', 'key', 'dst' for destination path, and a 'provider' argument restricted to registered names with a default. Output is provider-specific feedback printed to stdout. Limitations: manual updates required to add more providers.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/autoregistry.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom pathlib import Path\nfrom typing import Literal\n\ndef _download_gcp(bucket: str, key: str, dst: Path):\n    print(\"Downloading data from Google.\")\n\ndef _download_s3(bucket: str, key: str, dst: Path):\n    print(\"Downloading data from Amazon.\")\n\ndef _download_azure(bucket: str, key: str, dst: Path):\n    print(\"Downloading data from Azure.\")\n\n_downloaders = {\n    \"gcp\": _download_gcp,\n    \"s3\": _download_s3,\n    \"azure\": _download_azure,\n}\n\napp = cyclopts.App()\n\n@app.command\ndef download(bucket: str, key: str, dst: Path, provider: Literal[tuple(_downloaders)] = \"gcp\"):\n    downloader = _downloaders[provider]\n    downloader(bucket, key, dst)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Parameter Resolution Order in Cyclopts\nDESCRIPTION: This part explains that Cyclopts searches from right to left in stacked annotations for parameter attributes, with the right-most attributes having higher priority. It highlights how resolution order impacts validation and parameter configuration, referencing documentation for further details.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ my-script 1234\n╭─ Error ──────────────────────────────────────────────────────────────────────╮\n│ Invalid value \"1234\" for \"SIZE\". Size must be a multiple of 4096             │\n╰──────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameter Converters (Python)\nDESCRIPTION: Demonstrates creating and using a custom parameter converter function via `Parameter(converter=...)`. The example converter function `byte_units` parses strings representing file sizes with optional \"kb\", \"mb\", or \"gb\" suffixes into integer byte counts.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter, Token\nfrom typing import Annotated, Sequence\nfrom pathlib import Path\n\napp = App()\n\nmapping = {\n    \"kb\": 1024,\n    \"mb\": 1024 * 1024,\n    \"gb\": 1024 * 1024 * 1024,\n}\n\ndef byte_units(type_, tokens: Sequence[Token]) -> int:\n    # type_ is ``int``,\n    value = tokens[0].value.lower()\n    try:\n        return type_(value)  # If this works, it didn't have a suffix.\n    except ValueError:\n        pass\n    number, suffix = value[:-2], value[-2:]\n    return int(number) * mapping[suffix]\n\n@app.command\ndef zero(file: Path, size: Annotated[int, Parameter(converter=byte_units)]):\n    \"\"\"Creates a file of all-zeros.\"\"\"\n    print(f\"Writing {size} zeros to {file}.\")\n    file.write_bytes(bytes(size))\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script zero out.bin 100\nWriting 100 zeros to out.bin.\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script zero out.bin 1kb\nWriting 1024 zeros to out.bin.\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script zero out.bin 3mb\nWriting 3145728 zeros to out.bin.\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Annotated Types and Path Types\nDESCRIPTION: Documentation describing Cyclopts's predefined annotated types for common data validation, including path-related types (e.g., ExistingPath, ResolvedPath) and number constraints (e.g., PositiveInt, NonNegativeFloat). These annotations facilitate declarative validation of CLI arguments related to filesystem paths and numeric values.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_36\n\nLANGUAGE: reStructuredText\nCODE:\n```\nDue to Cyclopts's advanced :class:`.Parameter` resolution engine, these annotations can themselves be annotated to further configure behavior. E.g:\n\n.. code-block:: python\n\n   Annotated[PositiveInt, Parameter(...)]\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\nPath\n  \n:class:`~pathlib.Path` annotated types for checking existence, type, and performing path-resolution.\nAll of these types will also work on sequence of paths (e.g. ``tuple[Path, Path]`` or ``list[Path]``).\n\n.. autodata:: cyclopts.types.ExistingPath\n\n.. autodata:: cyclopts.types.ResolvedPath\n\n.. autodata:: cyclopts.types.ResolvedExistingPath\n\n.. autodata:: cyclopts.types.Directory\n\n.. autodata:: cyclopts.types.ExistingDirectory\n\n.. autodata:: cyclopts.types.ResolvedDirectory\n\n.. autodata:: cyclopts.types.ResolvedExistingDirectory\n\n.. autodata:: cyclopts.types.File\n\n.. autodata:: cyclopts.types.ExistingFile\n\n.. autodata:: cyclopts.types.ResolvedFile\n\n.. autodata:: cyclopts.types.ResolvedExistingFile\n\n.. autodata:: cyclopts.types.BinPath\n\n.. autodata:: cyclopts.types.ExistingBinPath\n\n.. autodata:: cyclopts.types.CsvPath\n\n.. autodata:: cyclopts.types.ExistingCsvPath\n\n.. autodata:: cyclopts.types.TxtPath\n\n.. autodata:: cyclopts.types.ExistingTxtPath\n\n.. autodata:: cyclopts.types.ImagePath\n\n.. autodata:: cyclopts.types.ExistingImagePath\n\n.. autodata:: cyclopts.types.Mp4Path\n\n.. autodata:: cyclopts.types.ExistingMp4Path\n\n.. autodata:: cyclopts.types.JsonPath\n\n.. autodata:: cyclopts.types.ExistingJsonPath\n\n.. autodata:: cyclopts.types.TomlPath\n\n.. autodata:: cyclopts.types.ExistingTomlPath\n\n.. autodata:: cyclopts.types.YamlPath\n\n.. autodata:: cyclopts.types.ExistingYamlPath\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\nNumber\n  \nAnnotated types for checking common int/float value constraints.\nAll of these types will also work on sequence of numbers (e.g. ``tuple[int, int]`` or ``list[float]``).\n\n.. autodata:: cyclopts.types.PositiveFloat\n\n.. autodata:: cyclopts.types.NonNegativeFloat\n\n.. autodata:: cyclopts.types.NegativeFloat\n\n.. autodata:: cyclopts.types.NonPositiveFloat\n\n.. autodata:: cyclopts.types.PositiveInt\n\n.. autodata:: cyclopts.types.NonNegativeInt\n\n.. autodata:: cyclopts.types.NegativeInt\n\n.. autodata:: cyclopts.types.NonPositiveInt\n\n.. autodata:: cyclopts.types.UInt8\n\n.. autodata:: cyclopts.types.Int8\n\n.. autodata:: cyclopts.types.UInt16\n\n.. autodata:: cyclopts.types.Int16\n\n.. autodata:: cyclopts.types.UInt32\n\n.. autodata:: cyclopts.types.Int32\n\n.. autodata:: cyclopts.types.UInt64\n\n.. autodata:: cyclopts.types.Int64\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\nJson\n  \nAnnotated types for parsing a json-string from the CLI.\n\n.. autodata:: cyclopts.types.Json\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\nWeb\n  \nAnnotated types for common web-related values.\n\n.. autodata:: cyclopts.types.Email\n\n.. autodata:: cyclopts.types.Port\n\n.. autodata:: cyclopts.types.URL\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\nConfig\n  \nCyclopts has builtin configuration classes to be used with :attr:`App.config <cyclopts.App.config>` for loading user-defined defaults in many common scenarios.\nAll Cyclopts builtins index into the configuration file with the following rules:\n\n1. Apply ``root_keys`` (if provided) to enter the project's configuration namespace.\n\n2. Apply the command name(s) to enter the current command's configuration namespace.\n\n3. Apply each key/value pair if CLI arguments have **not** been provided for that parameter.\n\n.. autoclass:: cyclopts.config.Toml\n\n   Automatically read configuration from Toml file.\n\n   .. attribute:: path\n      :type: str | pathlib.Path\n\n      Path to TOML configuration file.\n\n   .. attribute:: root_keys\n      :type: Iterable[str]\n      :value: None\n\n      The key or sequence of keys that lead to the root configuration structure for this app.\n      For example, if referencing a ``pyproject.toml``, it is common to store all of your projects configuration under:\n\n      .. code-block:: toml\n\n         [tool.myproject]\n\n      So, your Cyclopts :class:`~cyclopts.App` should be configured as:\n\n      .. code-block:: python\n\n         app = cyclopts.App(config=cyclopts.config.Toml(\"pyproject.toml\", root_keys=(\"tool\", \"myproject\")))\n\n   .. attribute:: must_exist\n      :type: bool\n      :value: False\n\n      The configuration file MUST exist. Raises :class:`FileNotFoundError` if it does not exist.\n\n   .. attribute:: search_parents\n      :type: bool\n      :value: False\n\n      If ``path`` doesn't exist, iteratively search parenting directories for a same-named configuration file.\n      Raises :class:`FileNotFoundError` if no configuration file is found.\n\n   .. attribute:: allow_unknown\n      :type: bool\n      :value: False\n\n      Allow for unknown keys. Otherwise, if an unknown key is provided, raises :class:`UnknownOptionError`.\n\n   .. attribute:: use_commands_as_keys\n      :type: bool\n      :value: True\n\n      Use the sequence of commands as keys into the configuration.\n\n      For example, the following CLI invocation:\n\n      .. code-block:: console\n\n          $ python my-script.py my-command\n\n      Would search into ``[\"my-command\"]`` for values.\n\n.. autoclass:: cyclopts.config.Yaml\n\n   Automatically read configuration from YAML file.\n\n   .. attribute:: path\n      :type: str | pathlib.Path\n\n      Path to YAML configuration file.\n\n   .. attribute:: root_keys\n      :type: Iterable[str]\n      :value: None\n\n      The key or sequence of keys that lead to the root configuration structure for this app.\n      For example, if referencing a common ``config.yaml`` that is shared with other applications, it is common to store your projects configuration under a key like ``myproject:``.\n\n      Your Cyclopts :class:`~cyclopts.App` would be configured as:\n\n         app = cyclopts.App(config=cyclopts.config.Yaml(\"config.yaml\", root_keys=\"myproject\"))\n\n   .. attribute:: must_exist\n      :type: bool\n      :value: False\n\n      The configuration file MUST exist. Raises :class:`FileNotFoundError` if it does not exist.\n\n   .. attribute:: search_parents\n      :type: bool\n      :value: False\n\n      If ``path`` doesn't exist, iteratively search parenting directories for a same-named configuration file.\n      Raises :class:`FileNotFoundError` if no configuration file is found.\n\n   .. attribute:: allow_unknown\n      :type: bool\n      :value: False\n\n      Allow for unknown keys. Otherwise, if an unknown key is provided, raises :class:`UnknownOptionError`.\n\n   .. attribute:: use_commands_as_keys\n      :type: bool\n      :value: True\n\n      Use the sequence of commands as keys into the configuration.\n\n      For example, the following CLI invocation:\n\n      .. code-block:: console\n\n          $ python my-script.py my-command\n\n      Would search into ``[\"my-command\"]`` for values.\n\n.. autoclass:: cyclopts.config.Json\n\n   Automatically read configuration from Json file.\n\n   .. attribute:: path\n      :type: str | pathlib.Path\n\n      Path to JSON configuration file.\n\n   .. attribute:: root_keys\n      :type: Iterable[str]\n      :value: None\n\n      The key or sequence of keys that lead to the root configuration structure for this app.\n      For example, if referencing a common ``config.json`` that is shared with other applications, it is common to store your projects configuration under a key like ``\"myproject\":``.\n\n      Your Cyclopts :class:`~cyclopts.App` would be configured as:\n\n         app = cyclopts.App(config=cyclopts.config.Json(\"config.json\", root_keys=\"myproject\"))\n\n   .. attribute:: must_exist\n      :type: bool\n      :value: False\n\n      The configuration file MUST exist. Raises :class:`FileNotFoundError` if it does not exist.\n\n   .. attribute:: search_parents\n      :type: bool\n      :value: False\n```\n\n----------------------------------------\n\nTITLE: Showing Help for Commands with Shared and Flattened Dataclass Parameters\nDESCRIPTION: This console snippet displays the `--help` output for the `remove` command from the previous Python code. It shows that the command accepts both the `Movie` parameters (not flattened here, so still `MOVIE.TITLE`, `MOVIE.YEAR`) and the flattened `Config` parameters (`--user`, `--server`), demonstrating the sharing mechanism.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer remove --help\nUsage: movie-maintainer remove [ARGS] [OPTIONS]\n\n╭─ Parameters ────────────────────────────────────────────────╮\n│ *  MOVIE.TITLE              [required]                      │\n│      --movie.title                                          │\n│ *  MOVIE.YEAR --movie.year  [required]                      │\n│ *  --user                   [required]                      │\n│    --server                 [default: media.sqlite]         │\n╰─────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Simplified Parameter Validation with Built-in Types in Cyclopts\nDESCRIPTION: This snippet shows creating a Cyclopts App, then using a built-in type NonNegativeInt to validate that age is non-negative, simplifying parameter validation. It highlights how built-in types can reduce boilerplate and improve readability.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom cyclopts import App\nfrom cyclopts.types import NonNegativeInt\n\napp = App()\n\n@app.default\ndef allowed_to_buy_alcohol(age: NonNegativeInt):\n    print(\"Under 21: prohibited.\" if age < 21 else \"Good to go!\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary Parameters from Command Line\nDESCRIPTION: Shows how to use dictionary parameters with key-value pairs from the command line.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ my_program 'Hello Cyclopts users!'\nHello Cyclopts users!\n\n$ my_program 'Hello Cyclopts users!' --mapping.Hello Hey\nHey Cyclopts users!\n\n$ my_program 'Hello Cyclopts users!' --mapping.Hello Hey --mapping.users developers\nHey Cyclopts developers!\n```\n\n----------------------------------------\n\nTITLE: Manually Naming Cyclopts Parameters (Python)\nDESCRIPTION: Illustrates how to explicitly set the command-line names and short forms for parameters using the `Parameter(name=...)` argument within `typing.Annotated`. Demonstrates adding a short form (`-f`) and changing a parameter's full name (`--something-else`).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef main(\n    *,\n    foo: Annotated[str, Parameter(name=[\"--foo\", \"-f\"])],  # Adding a short-form\n    bar: Annotated[str, Parameter(name=\"--something-else\")],\n):\n    pass\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\n\nUsage: main COMMAND [OPTIONS]\n╭─ Commands ──────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.               │\n│ --version  Display application version.                 │\n╰─────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────╮\n│ *  --foo             -f  [required]                     │\n│ *  --something-else      [required]                     │\n╰─────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Initializing Cyclopts App with Default Parameters (Python)\nDESCRIPTION: Demonstrates the default behavior of Cyclopts in deriving parameter names, types, and help text from function signatures and docstrings. Shows a simple `App` initialization and a command `foo` with an integer parameter, illustrating how docstrings are used for help.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(help=\"This is help for the root application.\")\n\n@app.command\ndef foo(value: int):  # Cyclopts uses the ``value`` name and ``int`` type hint\n    \"\"\"Cyclopts uses this short description for help.\n\n    Parameters\n    ----------\n    value: int\n        Cyclopts uses this description for ``value``'s help.\n    \"\"\"\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\nUsage: my-script COMMAND\n\nThis is help for the root application.\n\n╭─ Commands ──────────────────────────────────────────────────────────╮\n│ foo        Cyclopts uses this short description for help.           │\n│ --help,-h  Display this message and exit.                           │\n│ --version  Display application version.                             │\n╰─────────────────────────────────────────────────────────────────────╯\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo --help\nUsage: my-script [ARGS] [OPTIONS]\n\nCyclopts uses this short description for help.\n\n╭─ Parameters ─────────────────────────────────────────────────────────────────────────╮\n│ *  VALUE --value  Cyclopts uses this description for value's help. [required]        │\n╰──────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Installing Cyclopts Directly from GitHub via Bash\nDESCRIPTION: This snippet provides the command to install the Cyclopts package directly from the GitHub repository using pip. It enables users to install the latest version from source. Python 3.9+ and pip are prerequisites.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/Installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install git+https://github.com/BrianPugh/cyclopts.git\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Argument Class\nDESCRIPTION: Provides member documentation for the cyclopts.Argument class, representing command-line arguments with their associated properties such as name, type, default value, validation rules, etc. The class supports introspection and manipulation of CLI argument specifications.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_28\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: cyclopts.Argument\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Cyclopts CLI Application Initialization with Configuration\nDESCRIPTION: Creates a Cyclopts App instance with environment variable and JSON configuration sources. Sets up command-line interface handling, associating the default command with the package name checker function, accepting parameters for package name and silent mode. Dependencies include cyclopts, cyclopts.config, and standard Python modules.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp = cyclopts.App(\n      config=[\n         cyclopts.config.Env(\"PYPI_CHECKER_\"),\n         cyclopts.config.Json(\"config.json\"),\n      ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessing Config Functions in cyclopts (Python)\nDESCRIPTION: Demonstrates the correct function signature for a configuration callback in cyclopts, which gets executed before argument conversion and validation to mutate CLI argument values as needed. Dependencies: cyclopts.App, cyclopts.ArgumentCollection. Parameters: apps (List[App]), commands (Tuple[str, ...]), arguments (ArgumentCollection). Returns None; modifies arguments inplace. Intended for injecting values, like loading external config defaults. The function must match this exact signature to be properly registered.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef config(apps: list[\"App\"], commands: Tuple[str, ...], arguments: ArgumentCollection):\n    \"\"\"Modifies given mapping inplace with some injected values.\n\n    Parameters\n    ----------\n    apps: Tuple[App, ...]\n       The application hierarchy that led to the current command function.\n       The current command app is the last element of this tuple.\n    commands: Tuple[str, ...]\n       The CLI strings that led to the current command function.\n    arguments: ArgumentCollection\n       Complete ArgumentCollection for the app.\n       Modify this collection inplace to influence values provided to the function.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Converter for CLI Parameters with cyclopts (Python)\nDESCRIPTION: Shows how to create and register a custom converter function for parameter parsing, enabling advanced token-to-type handling in CLI arguments. Dependencies: cyclopts.App, cyclopts.Parameter, typing.Annotated. The converter multiplies input values by 2 and returns them as a tuple. Expects input type and tokens as parameters. Output: prints the converted tuple. Useful when default coercion is insufficient or when parsing complex arguments from the CLI.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\ndef converter(type_, tokens):\n   assert type_ == tuple[int, int]\n   return tuple(2 * int(x.value) for x in tokens)\n\n@app.default\ndef main(coordinates: Annotated[tuple[int, int], Parameter(converter=converter)]):\n   print(f\"{coordinates=}\")\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python my-script.py 7 12\ncoordinates=(14, 24)\n```\n\n----------------------------------------\n\nTITLE: Defining List Type with Positional Arguments\nDESCRIPTION: This example demonstrates how Cyclopts parses lists from positional arguments. The `values` list expects `int` elements.  Each element is parsed from a separate CLI token, until an option-like token or the end of the arguments is reached. The second example shows that complex types like tuples can be used in lists as well, provided enough CLI tokens are given.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(values: list[int]):  # 1 CLI token per element\n   print(values)\n\n@app.command\ndef bar(values: list[tuple[int, str]]):  # 2 CLI tokens per element\n   print(values)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Defining Image Class with Cyclopts\nDESCRIPTION: This snippet demonstrates how to define a class and use it as a parameter in a Cyclopts application. It shows how the `accepts_keys` parameter influences how the class attributes are exposed through the CLI. The code defines an `Image` class with `path` and `label` attributes and then uses the class in a Cyclopts application.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\nclass Image:\n   def __init__(self, path, label):\n      self.path = path\n      self.label = label\n\n   def __repr__(self):\n      return f\"Image(path={self.path!r}, label={self.label!r})\"\n\n@app.default\ndef main(image: Image):\n   print(f\"{image=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-App Help via Attribute (Python)\nDESCRIPTION: Demonstrates registering a sub-application (`sub_app`) and defining its help string using the `help` attribute during its instantiation. It also highlights that providing `help` via `@app.command` when registering an `App` object is disallowed and raises a `ValueError`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsub_app = cyclopts.App(help=\"This is the help string for the 'foo' subcommand.\")\napp.command(sub_app, name=\"foo\")\napp.command(sub_app, name=\"foo\", help=\"This is illegal and raises a ValueError.\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Names in Cyclopts Python\nDESCRIPTION: Shows two methods for controlling the CLI name of a registered command: configuring a global `name_transform` function for the app or explicitly setting the command name using the `name` argument in the `@app.command` decorator.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(name_transform=lambda s: s)\n\n@app.command\ndef foo_bar():  # will now be \"foo_bar\" instead of \"foo-bar\"\n    print(\"running function foo_bar\")\n\napp()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command(name=\"bar\")\ndef foo():  # function name will NOT be used.\n    print(\"Hello World!\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Using Command Return Values as Exit Codes\nDESCRIPTION: Shows how to use the return value from a Cyclopts app as an exit code for a script by passing it to sys.exit().\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/app_calling.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    sys.exit(app())\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutually Exclusive Options with Cyclopts LimitedChoice Validator in Python\nDESCRIPTION: This Python script demonstrates defining mutually exclusive command-line arguments using Cyclopts. It creates an `App`, defines a `Group` named 'Vehicle' using `cyclopts.Group`, and applies the `validators.LimitedChoice()` validator to enforce that only one option within the group can be specified. The `Annotated` type hint and `Parameter(group=vehicle)` assign the boolean flags `--car` and `--truck` to this group. `Parameter(negative=\"\")` is used to disable the automatic generation of `--no-` flags.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/group_validators.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Group, Parameter, validators\nfrom typing import Annotated\n\napp = App()\n\nvehicle = Group(\n    \"Vehicle (choose one)\",\n    default_parameter=Parameter(negative=\"\"),  # Disable \"--no-\" flags\n    validator=validators.LimitedChoice(),  # Mutually Exclusive Options\n)\n\n@app.default\ndef main(\n    *,\n    car: Annotated[bool, Parameter(group=vehicle)] = False,\n    truck: Annotated[bool, Parameter(group=vehicle)] = False,\n):\n    if car:\n        print(\"I'm driving a car.\")\n    if truck:\n        print(\"I'm driving a truck.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Defining Cyclopts Command with Variable Positional Arguments - Python\nDESCRIPTION: Shows how to define a Cyclopts command using the `@app.command` decorator that accepts a fixed positional argument (`name: str`) and collects all subsequent command-line positional arguments into a tuple (`*favorite_numbers: int`). Cyclopts automatically converts the collected arguments to the specified type (`int`).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/args_and_kwargs.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(name: str, *favorite_numbers: int):\n    print(f\"{name}'s favorite numbers are: {favorite_numbers}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variable Configuration in Cyclopts Using Python\nDESCRIPTION: This Python snippet demonstrates configuring a Cyclopts CLI app to read default argument values from environment variables prefixed with 'CHAR_COUNTER_'. The App.config attribute is assigned cyclopts.config.Env, which concatenates the prefix, command hierarchy, and parameter names (transformed appropriately) to derive env var names. The example CLI command 'count' behaves similarly to previous examples, but can take default character input from the environment. Dependencies include Cyclopts and standard Python environment management facilitation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/config_file.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# character-counter.py\nimport cyclopts\nfrom pathlib import Path\n\napp = cyclopts.App(\n    name=\"character-counter\",\n    config=cyclopts.config.Env(\n        \"CHAR_COUNTER_\",  # Every environment variable will begin with this.\n    ),\n)\n\n@app.command\ndef count(filename: Path, *, character=\"-\"):\n    print(filename.read_text().count(character))\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Flattening Dataclass Namespace using Annotated and Parameter\nDESCRIPTION: This Python snippet modifies the previous example to flatten the namespace of the `Movie` dataclass parameters. By using `typing.Annotated` and `cyclopts.Parameter(name=\"*\")` on the `movie` parameter annotation, the dataclass fields become top-level command-line arguments (`--title`, `--year`) instead of being prefixed by `--movie`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\nfrom typing import Annotated\n\napp = App(name=\"movie-maintainer\")\n\n@dataclass\nclass Movie:\n   title: str\n   year: int\n\n@app.command\ndef add(movie: Annotated[Movie, Parameter(name=\"*\")]):\n   print(f\"Adding movie: {movie}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Parameter Help Text (Python)\nDESCRIPTION: Illustrates how to provide a direct help string for a parameter using the `Parameter(help=...)` argument within `typing.Annotated`. This explicit help text will override any description provided for the parameter in the function's docstring.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.command\ndef foo(value: Annotated[int, Parameter(help=\"THIS IS USED.\")]):\n    \"\"\"\n    Parameters\n    ----------\n    value: int\n        This description is not used; got overridden.\n    \"\"\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo --help\n╭─ Parameters ──────────────────────────────────────────────────╮\n│ *  VALUE,--value  THIS IS USED. [required]                    │\n╰───────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining a Callable Config Function for Cyclopts in Python\nDESCRIPTION: This Python snippet defines the callable interface for configuration providers to be used with Cyclopts' App.config attribute. The function accepts the current application hierarchy (apps), the command path (commands), and the mutable ArgumentCollection (arguments). Modifications to arguments influence the CLI command's default values or behavior. This callable can be implemented either as a function or a __call__ method in a class. Dependencies include Cyclopts and correct typing to ensure proper integration.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/config_file.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef config(apps: List[\"App\"], commands: Tuple[str, ...], arguments: ArgumentCollection):\n    \"\"\"Modifies the argument collection inplace with some injected values.\n\n    Parameters\n    ----------\n    apps: Tuple[App, ...]\n       The application hierarchy that led to the current command function.\n       The current command app is the last element of this tuple.\n    commands: Tuple[str, ...]\n       The CLI strings that led to the current command function.\n    arguments: ArgumentCollection\n       Complete ArgumentCollection for the app.\n       Modify this collection inplace to influence values provided to the function.\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Showing Help for Flattened Dataclass Parameters\nDESCRIPTION: This console snippet shows the `--help` output for the `add` command after applying namespace flattening using `Annotated`. The output confirms that the parameters for the `Movie` dataclass are now directly accessible as `--title` and `--year`, without the `--movie` prefix.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer add --help\nUsage: movie-maintainer add [ARGS] [OPTIONS]\n\n╭─ Parameters ────────────────────────────────────────────────╮\n│ *  TITLE --title  [required]                                │\n│ *  YEAR --year    [required]                                │\n╰─────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Adding Negative/Alternate Flags for Bool Parameters in cyclopts (Python)\nDESCRIPTION: This demonstrates how to set custom negative flags for boolean parameters, allowing toggling via inverse switches (e.g., --quiet). Dependencies: cyclopts.App, cyclopts.Parameter, typing.Annotated. Parameter 'verbose' is a boolean flag that can be negated with --quiet. Input: command line boolean flag. Output: application prints the boolean value parsed. Negative flag names can override defaults.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef main(*, verbose: Annotated[bool, Parameter(negative=\"--quiet\")] = False):\n   print(f\"{verbose=}\")\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ─────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                      │\n│ --version  Display application version.                        │\n╰────────────────────────────────────────────────────────────────╯\n╭─ Parameters ───────────────────────────────────────────────────╮\n│ --verbose --quiet  [default: False]                            │\n╰────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Integrating TOML Config File for Default Parameters\nDESCRIPTION: This Python snippet updates the Cyclopts application to load default parameter values from a `config.toml` file. The `App` is initialized with `config=config.Toml(\"config.toml\", use_commands_as_keys=False)`. This allows the `user` parameter within the `Config` dataclass to be automatically populated from the TOML file if not provided on the command line.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter, config\nfrom dataclasses import dataclass\nfrom typing import Annotated\n\napp = App(\n   name=\"movie-maintainer\",\n   config=config.Toml(\"config.toml\", use_commands_as_keys=False),\n)\n\n@Parameter(name=\"*\")\n@dataclass\nclass Config:\n   user: str\n   server: str = \"media.sqlite\"\n\n@dataclass\nclass Movie:\n   title: str\n   year: int\n\n@app.command\ndef add(movie: Movie, *, config: Config):\n   print(f\"Config: {config}\")\n   print(f\"Adding movie: {movie}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Validator for CLI Inputs with cyclopts.Parameter (Python)\nDESCRIPTION: Provides a basic template for implementing a validator function to check and enforce CLI parameter values after conversion. Validator functions accept the type hint and value, and should raise an error if data is invalid (TypeError, ValueError, or AssertionError). Use this with cyclopts.Parameter\\'s validator argument to ensure semantic correctness after CLI parsing. No dependencies other than function definition.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef validator(type_, value: Any) -> None:\n    pass  # Raise a TypeError, ValueError, or AssertionError here if data is invalid.\n```\n\n----------------------------------------\n\nTITLE: Flattening Cyclopts Parameter Namespaces with Dataclasses (Python)\nDESCRIPTION: This Python code snippet shows how to use `cyclopts.Parameter(name=\"*\")` in conjunction with a `dataclass` (`User`) to prevent the class name from being prepended to the command-line arguments (`--name` and `--age` instead of `--user.name` and `--user.age`). It imports `App` and `Parameter` from `cyclopts`, `dataclass` from `dataclasses`, and `Annotated` from `typing`. The `main` function accepts the `User` dataclass annotated with the special `Parameter`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\nfrom typing import Annotated\n\napp = App()\n\n@dataclass\nclass User:\n   name: str\n   age: int\n\n@app.default\ndef main(user: Annotated[User, Parameter(name=\"*\")]):\n   print(user)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Modifying Parameter with `accepts_keys=False`\nDESCRIPTION: This Python code demonstrates modifying the default command function's signature. It uses `Annotated` and `Parameter(accepts_keys=False)` to change the CLI behavior so that the `Image` class is treated like a tuple. The `accepts_keys=False` setting changes the CLI arguments accepted.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Modify the default command function's signature.\n@app.default\ndef main(image: Annotated[Image, Parameter(accepts_keys=False)]):\n   print(f\"{image=}\")\n```\n\n----------------------------------------\n\nTITLE: Using the Cyclopts File I/O Application from the Command Line\nDESCRIPTION: This console example demonstrates how to use the Cyclopts 'scream' application in practice. It shows reading from a file, writing to stdout, writing to a file, and reading from stdin through a pipe - all showing the flexibility of the implementation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/file_or_stdin_stdout.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"hello cyclopts users.\" > demo.txt\n$ python scream.py demo.txt\nHELLO CYCLOPTS USERS.\n$ python scream.py demo.txt output.txt\n$ cat output.txt\nHELLO CYCLOPTS USERS.\n$ echo \"foo\" | python scream.py\nFOO\n```\n\n----------------------------------------\n\nTITLE: Initializing Cyclopts CLI Application Supporting Both Argument Types - Python\nDESCRIPTION: This code initializes a Cyclopts-based CLI application with a default `mv` command that accepts both positional (`foo`, `bar`) and keyword arguments (`--src foo --dst bar`). Required dependency: Cyclopts library. The `mv` function prints the file move action, and the same command can be executed with either argument style. Inputs may be given as positional or keyword arguments; output appears via print statement. No apparent limitations for argument handling.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/positional_or_keyword/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default()\ndef mv(src, dst):\n    print(f\"Moving {src} -> {dst}\")\n\ncyclopts_app([\"foo\", \"bar\"])\n# Moving foo -> bar\ncyclopts_app([\"--src\", \"foo\", \"--dst\", \"bar\"])\n# Moving foo -> bar\n```\n\n----------------------------------------\n\nTITLE: Implementing File and Stdin/Stdout Handling with Cyclopts in Python\nDESCRIPTION: This code snippet demonstrates how to create a Cyclopts CLI application that reads from either a file or stdin and writes to either a file or stdout. It includes utility functions for handling both string and binary data, and implements a 'scream' command that uppercases all input text.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/file_or_stdin_stdout.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom cyclopts import App\nfrom pathlib import Path\nfrom typing import Optional\n\ndef read_str(input_: Optional[Path]) -> str:\n    return sys.stdin.read() if input_ is None else input_.read_text()\n\ndef write_str(output: Optional[Path], data: str):\n    sys.stdout.write(data) if output is None else output.write_text(data)\n\ndef read_bytes(input_: Optional[Path]) -> bytes:\n    return sys.stdin.buffer.read() if input_ is None else input_.read_bytes()\n\ndef write_bytes(output: Optional[Path], data: bytes):\n    sys.stdout.buffer.write(data) if output is None else output.write_bytes(data)\n\napp = App()\n\n@app.default\ndef scream(input_: Optional[Path] = None, output_: Optional[Path] = None):\n    \"\"\"Uppercase all input data.\n\n    Parameters\n    ----------\n    input_ : Optional[Path]\n        If provided, read data from file. If not provided, read from stdin.\n    output_ : Optional[Path]\n        If provided, write data to file. If not provided, write to stdout.\n    \"\"\"\n    data = read_str(input_)\n    processed = data.upper()\n    write_str(output_, processed)\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Example usage of Group with Sort Key\nDESCRIPTION: This Python code demonstrates the use of the `Group` class and the `sort_key` attribute to control the order of groups displayed on the help page. It defines four commands within groups. The `sort_key` can be a numeric value, a callable, or `None`. It also illustrates how groups with a `sort_key` are displayed.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Group\n\napp = App()\n\n@app.command(group=Group(\"4\", sort_key=5))\ndef cmd1():\n   pass\n\n\n@app.command(group=Group(\"3\", sort_key=lambda x: 10))\ndef cmd2():\n   pass\n\n\n@app.command(group=Group(\"2\", sort_key=lambda x: None))\ndef cmd3():\n   pass\n\n\n@app.command(group=Group(\"1\"))\ndef cmd4():\n   pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Testing Application Help Page Output with Pytest and Rich (Python)\nDESCRIPTION: Tests the help page output of the application under test. It uses the `capsys` fixture to capture stdout and stderr, calls the application (represented by `app`) with the '--help' flag and the custom `console` fixture, and asserts that the captured standard output, read via `capsys.readouterr().out`, matches a specific multi-line string processed by `textwrap.dedent`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom textwrap import dedent\n\n   def test_help_page(capsys, console):\n       app(\"--help\", console=console)\n       actual = capsys.readouterr().out\n       assert actual == dedent(\n           \"\"\"\\\n           Usage: pypi-checker COMMAND [ARGS] [OPTIONS]\n\n           Check if a package name is available on PyPI.\n\n           Exit code 0 on success; non-zero otherwise.\n\n           ╭─ Commands ─────────────────────────────────────────────────────────╮\n           │ --help -h  Display this message and exit.                          │\n           │ --version  Display application version.                            │\n           ╰────────────────────────────────────────────────────────────────────╯\n           ╭─ Parameters ───────────────────────────────────────────────────────╮\n           │ *  NAME --name           Name of the package to check. [required]  │\n           │    --silent --no-silent  Do not print anything to stdout.          │\n           │                          [default: False]                          │\n           ╰────────────────────────────────────────────────────────────────────╯\n           \"\"\"\n       )\n```\n\n----------------------------------------\n\nTITLE: Example usage of cmd function\nDESCRIPTION: This console code provides an example of how to use the command-line interface for the `rules` function. It shows how to pass multiple extension flags and file names as positional arguments to a function decorated by `@app.default`.  The program consumes multiple elements from CLI tokens when `--ext` flag is used.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ cmd --ext .pdf --ext .html foo.md bar.md\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration Loading with Temporary Files and Directory\nDESCRIPTION: Uses pytest fixtures to change the current working directory to a temporary path and creates a JSON config file with sample data, then verifies that Cyclopts correctly loads this configuration without CLI arguments.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# test.py\nimport json\n\n@pytest.fixture(autouse=True)\ndef chdir_to_tmp_path(tmp_path, monkeypatch):\n    \"\"\"Automatically change current directory to tmp_path\"\"\"\n    monkeypatch.chdir(tmp_path)\n\n@pytest.fixture\ndef config_path(tmp_path):\n    \"\"\"Path to JSON configuration file in tmp_path\"\"\"\n    return tmp_path / \"config.json\"  # same name that was provided to cyclopts.config.Json\n\ndef test_config(config_path):\n    with config_path.open(\"w\") as f:\n       json.dump({\"name\": \"bar\"}, f)\n    command, bound, _ = app.parse_args([])  # An empty list - no CLI arguments passed in.\n    assert command == pypi_checker\n```\n\n----------------------------------------\n\nTITLE: Example Help Output with Grouped Parameters\nDESCRIPTION: Shows the console output of a Cyclopts application's help page where parameters are organized into named groups like \"Vehicle\", \"Engine\", and \"Wheels\", enhancing readability.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nUsage: my-script.py create [OPTIONS]\n\n╭─ Vehicle (choose one) ───────────────────────────────────────────────────────╮\n│ --car    [default: False]                                                    │\n│ --truck  [default: False]                                                    │\n╰──────────────────────────────────────────────────────────────────────────────╯\n╭─ Engine ─────────────────────────────────────────────────────────────────────╮\n│ --hp         [default: 200]                                                  │\n│ --cylinders  [default: 6]                                                    │\n╰──────────────────────────────────────────────────────────────────────────────╯\n╭─ Wheels ─────────────────────────────────────────────────────────────────────╮\n│ --wheel-diameter  [default: 18]                                              │\n│ --rims,--no-rims  [default: False]                                           │\n╰──────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Help via Default Command Docstring (Python)\nDESCRIPTION: Shows how Cyclopts uses the docstring (`__doc__`) of the function registered with `@app.default` as a source for the application's help text, including parameter descriptions. This method has lower precedence than explicit `help` arguments.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App()\napp.command(cyclopts.App(), name=\"foo\")\n\n\n@app.default\ndef bar(val1: str):\n    \"\"\"This is the primary application docstring.\n\n    Parameters\n    ----------\n    val1: str\n        This will be parsed for val1 help-string.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Positional List with Leading Hyphens\nDESCRIPTION: This snippet demonstrates using the `allow_leading_hyphen` parameter in the parameter annotation. This allows for parsing of arguments that begin with hyphens (e.g., files).  The tokens are consumed until the end, or an option-like token (with hyphens).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom pathlib import Path\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef main(\n   files: Annotated[list[Path], Parameter(allow_leading_hyphen=True)],\n   some_flag: bool = False,\n ):\n   print(f\"{some_flag=}\")\n   print(f\"Analyzing files {files}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Handling help flags and commands in the interactive shell\nDESCRIPTION: This snippet shows how the shell recognizes special flags like --help and --version, providing detailed usage information and command lists. It also demonstrates adding a custom 'help' command to explicitly display help information and improve user experience within the interactive environment.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/interactive_help.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Example shell interaction showing help flags and command listings\n# This is a console output example:\n\n# $ python interactive-shell-demo.py\n# Interactive shell. Press Ctrl-D to exit.\n# cyclopts> --help\n# Usage: interactive-shell-demo.py COMMAND\n\n# ╭─ Parameters ──────────────────────────────────────────────────╮\n# │ --version      Display application version.                   │\n# │ --help     -h  Display this message and exit.                 │\n# ╰───────────────────────────────────────────────────────────────╯\n# ╭─ Commands ────────────────────────────────────────────────────╮\n# │ bar  Bar Docstring.                                           │\n# │ foo  Foo Docstring.                                           │\n# ╰───────────────────────────────────────────────────────────────╯\n# cyclopts> foo --help\n# Usage: interactive-shell-demo.py foo [ARGS] [OPTIONS]\n\n# Foo Docstring\n\n# ╭─ Parameters ──────────────────────────────────────────────────╮\n# │ *  P1,--p1  Foo's first parameter. [required]                 │\n# ╰───────────────────────────────────────────────────────────────╯\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Adding a custom 'help' command to explicitly show help information\n\n@app.command\ndef help():\n    \"\"\"Display the help screen.\"\"\"\n    app.help_print()\n\n# Usage example after adding the help command:\n# $ python interactive-shell-demo.py\n# Interactive shell. Press Ctrl-D to exit.\n# cyclopts> help\n# Usage: interactive-shell-demo.py COMMAND\n\n# ╭─ Parameters ──────────────────────────────────────────────────╮\n# │ --version      Display application version.                   │\n# │ --help     -h  Display this message and exit.                 │\n# ╰───────────────────────────────────────────────────────────────╯\n# ╭─ Commands ────────────────────────────────────────────────────╮\n# │ bar   Bar Docstring.                                          │\n# │ foo   Foo Docstring.                                          │\n# │ help  Display the help screen.                                │\n# ╰───────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Applying Validators with Unnamed Groups in Cyclopts (Python)\nDESCRIPTION: Shows how to create an unnamed `cyclopts.Group` (by omitting the name) to apply a `validators.MutuallyExclusive` validator to parameters (`car`, `truck`) without affecting the visual grouping on the help page. Parameters are assigned to both the default parameter group (`app.group_parameters`) and the unnamed `mutually_exclusive` validator group.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Group, Parameter, validators\nfrom typing import Annotated\n\napp = App()\n\nmutually_exclusive = Group(\n   # This Group has no name, so it won't impact the help page.\n   validator=validators.MutuallyExclusive(),\n   # show_default=False - Showing \"[default: False]\" isn't too meaningful for mutually-exclusive options.\n   # negative=\"\" - Don't create a \"--no-\" flag\n   default_parameter=Parameter(show_default=False, negative=\"\"),\n)\n\n@app.command\ndef foo(\n    car: Annotated[bool, Parameter(group=(app.group_parameters, mutually_exclusive))] = False,\n    truck: Annotated[bool, Parameter(group=(app.group_parameters, mutually_exclusive))] = False,\n):\n    print(f\"{car=} {truck=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Example Console Interaction Showing Meta App Invocation and Help Display\nDESCRIPTION: Shows sample command-line usage of the meta Cyclopts app, illustrating how the '--user' session parameter is passed to a default meta command that then runs a sub-command 'foo' with arguments. Also displays help output showing grouped session parameters and commands. This interactive console snippet assumes the previously defined Python meta app and serves to demonstrate usage patterns and help layout.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --user=Bob foo 3\nHello Bob\nLooping! 0\nLooping! 1\nLooping! 2\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\nUsage: my-script COMMAND\n\n╭─ Session Parameters ────────────────────────────────────────────────────╮\n│ *  --user  [required]                                                   │\n╰─────────────────────────────────────────────────────────────────────────╯\n╭─ Commands ──────────────────────────────────────────────────────────────╮\n│ foo                                                                     │\n│ --help,-h  Display this message and exit.                               │\n│ --version  Display application version.                                 │\n╰─────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Cyclopts Command with Variable Keyword Arguments - Python\nDESCRIPTION: Illustrates how to define a Cyclopts command that accepts a variable number of keyword arguments (`**country_to_capitols`). Cyclopts parses command-line arguments starting with `--` and collects them into a dictionary, where the argument name becomes the dictionary key and the value is converted.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/args_and_kwargs.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef add(**country_to_capitols):\n    for country, capitol in country_to_capitols.items():\n        print(f\"Adding {country} with capitol {capitol}.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Example CLI Invocation Showing cyclopts Environment Variable Resolution in Console\nDESCRIPTION: Shows terminal usage examples for a cyclopts app where command line arguments and environment variables provide values for command parameters. This illustrates how environment variables with prefixes are checked if CLI args are missing, showing fallback behavior and precedence of command-line inputs over environment variables. The commands are executed in a bash-like shell, demonstrating usage with and without environment variables set.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ python my_script.py my-command 1 2\nfoo=1 bar=2\n\n$ export MY_SCRIPT_MY_COMMAND_FOO=100\n$ python my_script.py my-command --bar=2\nfoo=100 bar=2\n$ python my_script.py my-command 1 2\nfoo=1 bar=2\n```\n\n----------------------------------------\n\nTITLE: Warning on Invoking App Without Arguments and Correct Way in Tests\nDESCRIPTION: Highlights the importance of passing an empty list to app() within tests to prevent warnings related to missing command tokens. Demonstrates proper usage by explicitly passing '[]' as arguments.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\napp([])  # Proper way to invoke app in a test to avoid warnings about missing tokens.\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Application with Parameter Validation using Cyclopts\nDESCRIPTION: This code demonstrates creating a Cyclopts App instance, defining a default handler with parameter validation using Annotated and Parameter with a Number validator for age, and running the app. It includes importing necessary modules and illustrates how to enforce input constraints and process parameters.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom cyclopts import App, Parameter, validators\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef allowed_to_buy_alcohol(age: Annotated[int, Parameter(validator=validators.Number(gte=0, lte=150))]):\n    # gte - greater than or equal to\n    # lte - less than or equal to\n    print(\"Under 21: prohibited.\" if age < 21 else \"Good to go!\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Annotating Parameters with cyclopts.Parameter (Python)\nDESCRIPTION: Shows how to use `typing.Annotated` in conjunction with `cyclopts.Parameter(...)` on a function parameter (`bar`) to provide explicit configuration beyond the default behavior. This setup is required for applying advanced parameter customizations.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\n@app.command\ndef foo(bar: Annotated[int, Parameter(...)]):\n    pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Invoking Subcommands from CLI Console\nDESCRIPTION: Demonstrates how to execute commands registered within a sub-application by specifying the parent command name (`foo`) followed by the subcommand name (`bar` or `baz`) and their arguments on the command line.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo bar 3\nBAR: 3\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo baz 4\nBAZ: 4\n```\n\n----------------------------------------\n\nTITLE: Enum Handling in Cyclopts\nDESCRIPTION: Example showing how to use Enum classes for providing users with a set of choices, with case-insensitive name lookup.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom enum import IntEnum\n\napp = App()\n\nclass ColorType(IntEnum):\n    GRAYSCALE = 0\n    RGB = 2\n    PALETTE = 3\n    GRAYSCALE_ALPHA = 4\n    RGBA = 6\n\n@app.default\ndef default(color_type: ColorType = ColorType.RGB):\n    print(f\"Writing color-type value: {color_type} to the image header.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Positional-Only List and Subsequent Parameters\nDESCRIPTION: This snippet shows how to define a list as positional-only parameter in cyclopts by using the `/` syntax in the function signature.  Positional-only parameters consume tokens, but ensure enough are left for subsequent parameters.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main(srcs: list[Path], dst: Path, /):  # \"/\" makes all prior parameters POSITIONAL_ONLY\n    print(f\"Processing files {srcs!r} to {dst!r}.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Cyclopts Commands Python\nDESCRIPTION: Explains how help strings for commands are determined in Cyclopts, prioritizing the `help` argument in the `@app.command` decorator over function docstrings or the sub-app's help field.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo():\n    \"\"\"Help string for foo.\"\"\"\n    pass\n\n@app.command(help=\"Help string for bar.\")\ndef bar():\n    \"\"\"This got overridden.\"\"\"\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line App with Multi-Value Keyword Arguments in Cyclopts (Python)\nDESCRIPTION: This Python snippet defines a Cyclopts CLI app where the 'input' parameter is configured to accept multiple paths via the 'consume_multiple=True' setting in Parameter. It imports App and Parameter from cyclopts, uses typing.Annotated for parameter hints, and demonstrates how to access multiple positional or keyword input files. Dependencies include the cyclopts library as well as pathlib and typing. The main function prints the parsed input and output paths. Expects command-line arguments for output and one or more input files; multiple CLI invocation patterns are supported.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/keyword_multiple_values/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom pathlib import Path\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef main(output: Path, input: Annotated[list[Path], Parameter(consume_multiple=True)]):\n   print(f\"{input=} {output=}\")\n\nif __name__ == \"__main__\":\n   app()\n```\n\n----------------------------------------\n\nTITLE: Command Chaining with Cyclopts in Python\nDESCRIPTION: This snippet demonstrates how to implement command chaining in Cyclopts by using a delimiter (e.g., 'AND') to separate commands. It defines two subcommands, `foo` and `bar`, and a default command that parses the token list, groups the commands based on the delimiter, and then executes each command group using the Cyclopts app.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/command_chaining.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport itertools\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\n@app.command\ndef foo(val: int):\n    print(f\"FOO {val=}\")\n\n@app.command\ndef bar(flag: bool):\n    print(f\"BAR {flag=}\")\n\n@app.meta.default\ndef main(*tokens: Annotated[str, Parameter(show=False, allow_leading_hyphen=True)]):\n    # tokens is ``[\"foo\", \"123\", \"AND\", \"foo\", \"456\", \"AND\", \"bar\", \"--flag\"]``\n    delimiter = \"AND\"\n\n    groups = [list(group) for key, group in itertools.groupby(tokens, lambda x: x == delimiter) if not key] or [[]]\n    # groups is ``[['foo', '123'], ['foo', '456'], ['bar', '--flag']]``\n\n    for group in groups:\n        # Execute each group\n        app(group)\n\nif __name__ == \"__main__\":\n    app.meta([\"foo\", \"123\", \"AND\", \"foo\", \"456\", \"AND\", \"bar\", \"--flag\"])\n    # FOO val=123\n    # FOO val=456\n    # BAR flag=True\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Cyclopts Application in Python\nDESCRIPTION: Demonstrates the most basic Cyclopts application that prints a 'Hello World!' message when executed. Uses the App class and registers a default action function that runs when no CLI command is provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/getting_started.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Console Example for Invoking Custom Command with Shared User Object via Meta App\nDESCRIPTION: Demonstrates running the meta Cyclopts app with a 'create' command that requires an externally created user object. The meta launcher creates this user object and injects it into the command based on meta parameters passed at invocation. The output confirms correct parameter passing and object sharing.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ my-script create --user Alice 30\nCreating user Alice with age 30.\n```\n\n----------------------------------------\n\nTITLE: Basic Cyclopts App Usage in Python\nDESCRIPTION: Demonstrates the basic structure of a Cyclopts app with a command that adds three integers and prints the result. The app is called without explicit arguments, defaulting to sys.argv[1:].\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/app_calling.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(a: int, b: int, c: int):\n    print(a + b + c)\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script 1 2 3\n6\n```\n\n----------------------------------------\n\nTITLE: Customizing the Version Flag in Cyclopts App (Python)\nDESCRIPTION: Explains how to change the default `--version` flag to custom names using the `version_flags` parameter in `cyclopts.App`. This parameter accepts either a single string for one flag or a list of strings for multiple aliases (e.g., `--version`, `-v`).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/version.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(version_flags=\"--show-version\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(version_flags=[\"--version\", \"-v\"])\n```\n\n----------------------------------------\n\nTITLE: Inspecting Parameter Token Object (Python)\nDESCRIPTION: Provides an example of the structure and contents of the `cyclopts.Token` object(s) passed as the `tokens` argument to a custom converter function. Explains the `keyword`, `value`, `source`, and `index` attributes.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# tokens is a length-1 tuple. The variable \"size\" only takes in 1 token:\ntuple(\n  Token(\n     keyword=None,  # \"3mb\" was provided positionally, not by keyword\n     value='3mb',   # The string from the command line\n     source='cli',  # The value came from the command line, as opposed to other Cyclopts mechanisms.\n     index=0,       # For the variable \"size\", this is the first (0th) token.\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Help Flags (Single String) (Python)\nDESCRIPTION: Demonstrates changing the default help flag (`--help`, `-h`) to a single custom flag (`--show-help`) by providing a string to the `help_flags` parameter during `App` initialization.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(help_flags=\"--show-help\")\n```\n\n----------------------------------------\n\nTITLE: Using CLI Command with JSON String for Dataclass Parameter\nDESCRIPTION: This console snippet illustrates that Cyclopts can parse a JSON string directly into a dataclass parameter when the parameter is specified as a keyword option (`--movie='...'`). The JSON string must represent the structure of the dataclass and start with '{'.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer add --movie='{\"title\": \"Mad Max: Fury Road\", \"year\": 2024}'\nAdding movie: Movie(title='Mad Max: Fury Road', year=2024)\n```\n\n----------------------------------------\n\nTITLE: Defining Default with Str Type Hint\nDESCRIPTION: This code provides an example of explicitly defining a parameter as a string using type hinting.  The CLI token will be used as a string without any modification.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef default(value: str):\n    print(f\"{value=} {type(value)=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry script entry point for CLI application\nDESCRIPTION: Defines a CLI script in pyproject.toml under [tool.poetry.scripts], mapping 'my-package' to 'mypackage.__main__:main', enabling direct command-line execution of the application without additional scripts or setup files.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/packaging.rst#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n# pyproject.toml\n\n[tool.poetry.scripts]\nmy-package = \"mypackage.__main__:main\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Upgrade for a CLI App (Python)\nDESCRIPTION: This Python code defines an `upgrade` command for a CLI application using the `cyclopts` library. The command utilizes `subprocess` to execute `pip` commands, first upgrading `pip` itself and then upgrading the application package (mypackage) to the latest stable version.  It retrieves and compares the old and new versions to inform the user about the upgrade status. This snippet requires `mypackage`, `subprocess`, `sys`, and `cyclopts` to be installed.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/app_upgrade.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mypackage\nimport subprocess\nimport sys\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef upgrade():\n    \"\"\"Update mypackage to latest stable version.\"\"\"\n    old_version = mypackage.__version__\n    subprocess.check_output([sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"pip\"])\n    subprocess.check_output([sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"mypackage\"])\n    res = subprocess.run([sys.executable, \"-m\", \"mypackage\", \"--version\"], stdout=subprocess.PIPE, check=True)\n    new_version = res.stdout.decode().strip()\n    if old_version == new_version:\n        print(f\"mypackage up-to-date (v{new_version}).\")\n    else:\n        print(f\"mypackage updated from v{old_version} to v{new_version}.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Configuring entry point in setup.cfg for CLI script\nDESCRIPTION: Specifies how to declare an entry point in setup.cfg under [options.entry_points], creating a 'my-package' command that executes the 'main' function from 'mypackage.__main__'. This configuration integrates with setuptools to generate executable scripts.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/packaging.rst#_snippet_4\n\nLANGUAGE: cfg\nCODE:\n```\n# setup.cfg\n\n[options.entry_points]\nconsole_scripts =\n    my-package = mypackage.__main__:main\n```\n\n----------------------------------------\n\nTITLE: Exposing Custom CLI Parameter Names with cyclopts.Parameter (Python)\nDESCRIPTION: Shows how to expose CLI parameters with custom names, including aliases, using the Annotated type and cyclopts.Parameter. Dependencies: cyclopts.App, cyclopts.Parameter, typing.Annotated. The parameter 'foo' is exposed as '--bar' and '-b'. This makes the CLI accept multiple names for a single parameter, and the application prints the value for 'foo' after parsing. Parameters: foo (int) with custom CLI names. Output: prints parameter value. Note: Demonstrates both code and resulting CLI help/usage.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef main(foo: Annotated[int, Parameter(name=(\"bar\", \"-b\"))]):\n   print(f\"{foo=}\")\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ─────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                      │\n│ --version  Display application version.                        │\n╰────────────────────────────────────────────────────────────────╯\n╭─ Parameters ───────────────────────────────────────────────────╮\n│ *  BAR --bar  -b  [required]                                   │\n╰────────────────────────────────────────────────────────────────╯\n\n$ my-script --bar 100\nfoo=100\n\n$ my-script -b 100\nfoo=100\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Function Signature - Cyclopts App Validation - Python\nDESCRIPTION: This snippet shows the required function signature for a validator function assigned to the 'validator' attribute of a Cyclopts App. The function must accept keyword arguments (**kwargs), where all converted CLI-provided variables are unpacked by their Python variable names.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef validator(**kwargs):\n    \"Raise an exception if something is invalid.\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Help Flags (Empty List) (Python)\nDESCRIPTION: Shows an alternative way to disable the help flags and help screen by providing an empty list or iterable to the `help_flags` parameter.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(help_flags=[])\n```\n\n----------------------------------------\n\nTITLE: Using CLI Command with Parameters Loaded from TOML Config\nDESCRIPTION: This console snippet demonstrates invoking the `add` command from the Python code that integrates the TOML config file. Notice that the `--user` parameter is *not* provided on the command line. Cyclopts automatically loads the `user` value (\"Guido\") from the `config.toml` file and populates the `config.user` field for the command.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer add 'Mad Max: Fury Road' 2015\nConfig: Config(user='Guido', server='media.sqlite')\nAdding movie: Movie(title='Mad Max: Fury Road', year=2015)\n```\n\n----------------------------------------\n\nTITLE: Invoking Enum Parameters\nDESCRIPTION: Shows how Enum types are handled on the command line with case-insensitive matching and hyphen support.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ my-program\nWriting color-type value: 2 to the image header.\n\n$ my-program grayscale-alpha\nWriting color-type value: 4 to the image header.\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Custom Negation Prefix\nDESCRIPTION: This code demonstrates how to customize the default `--no-` negation prefix in Cyclopts using the `negative_bool` parameter of `cyclopts.Parameter`. The `negative_bool` parameter is set to `--disable-`. This causes Cyclopts to use `--disable-my-flag` as the negative flag.  When `--my-flag` is passed, `my_flag` is set to `True`; when `--disable-my-flag` is passed, `my_flag` is set to `False`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/flag_negation/README.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@cyclopts_app.default\ndef foo(my_flag: Annotated[bool, cyclopts.Parameter(negative_bool=\"--disable-\")] = False):\n    print(f\"{my_flag=}\")\n\nprint(\"Cyclopts:\")\ncyclopts_app([\"--my-flag\"])\n# my_flag=True\ncyclopts_app([\"--disable-my-flag\"])\n# my_flag=False\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Output with CapSys Fixture\nDESCRIPTION: Uses pytest's capsys fixture to capture stdout, verifying that the CLI app outputs the correct message before exiting. Checks both the exit code and the printed output.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef test_unavailable_name(capsys, mock_check_pypi_name_available):\n    mock_check_pypi_name_available.return_value = False\n    with pytest.raises(SystemExit) as e:\n        app(\"foo\")  # Invoke our app, passing in package-name \"foo\"\n    mock_check_pypi_name_available.assert_called_once_with(\"foo\")  # assert that our mock was called.\n    assert e.value.code != 0  # assert the exit code is non-zero (i.e. not successful)\n    assert capsys.readouterr().out == \"foo is not available.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Flags in Typer vs. Cyclopts (Python)\nDESCRIPTION: Compares the configuration of boolean command-line flags in Typer and Cyclopts using type annotations. It demonstrates how Typer's `Option` and Cyclopts' `Parameter` handle custom flag names and the generation/customization of corresponding negative flags (e.g., `--no-flag`, `--disable-flag`). Cyclopts offers specific parameters like `negative` and `negative_bool` for finer control over negative flag behavior.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/migration/typer.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#########\n# Typer #\n#########\n# Overriding the name results in no \"False\" flag generation.\nmy_flag: Annotated[bool, Option(\"--my-custom-flag\")]\n# However, it can be custom specified:\nmy_flag: Annotated[bool, Option(\"--my-custom-flag/--disable-my-custom-flag\")]\n\n############\n# Cyclopts #\n############\n# Overriding the name still results in \"False\" flag generation:\n#    --my-custom-flag --no-my-custom-flag\nmy_flag: Annotated[bool, Parameter(\"--my-custom-flag\")]\n# Negative flag generation can be disabled:\n#    --my-custom-flag\nmy_flag: Annotated[bool, Parameter(\"--my-custom-flag\", negative=\"\")]\n# Or the prefix can be changed:\n#    --my-custom-flag --disable-my-custom-flag\nmy_flag: Annotated[bool, Parameter(\"--my-custom-flag\", negative_bool=\"--disable-\")]\n```\n\n----------------------------------------\n\nTITLE: Invoking User-Defined Class Parameters\nDESCRIPTION: Shows how to provide values for user-defined class parameters both positionally and using dot-notation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ──────────────────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                                       │\n│ --version  Display application version.                                         │\n╰─────────────────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────────────────────────────╮\n│ *  USER.NAME --user.name      [required]                                        │\n│ *  USER.AGE --user.age        [required]                                        │\n│    USER.REGION --user.region  [choices: us, ca] [default: us]                   │\n╰─────────────────────────────────────────────────────────────────────────────────╯\n\n$ my-program 'Bob Smith' 30\nUser(name='Bob Smith', age=30, region='us')\n\n$ my-program --user.name 'Bob Smith' --user.age 30\nUser(name='Bob Smith', age=30, region='us')\n\n$ my-program --user.name 'Bob Smith' 30 --user.region=ca\nUser(name='Bob Smith', age=30, region='ca')\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Formatted Traceback with Cyclopts\nDESCRIPTION: This snippet demonstrates how to integrate the Rich library to display a rich-formatted traceback when an exception occurs in a Cyclopts application. It imports necessary modules from `cyclopts` and `rich`. It sets up a `Console` object for rich output. The `main` function remains the same and raises a `TypeError`.  It includes a `try...except` block to catch exceptions and print the rich traceback using `console.print_exception()` and then exits.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/rich_formatted_exceptions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom cyclopts import App\nfrom rich.console import Console\n\nconsole = Console()\napp = App(console=console)  # Use same Console object for Cyclopts operations.\n\n@app.default\ndef main(name: str):\n    print(name + 3)\n\nif __name__ == \"__main__\":\n    try:\n        app()\n    except Exception:\n        console.print_exception()\n        sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Literal Choices with Cyclopts\nDESCRIPTION: Example demonstrating Cyclopts' support for Python's Literal type annotation to restrict parameter choices. This approach is more intuitive for users who prefer direct string options rather than Enums, and is a feature not supported in Typer despite longstanding requests.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/choices/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom typing import Literal\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default\ndef foo(env: Literal[\"dev\", \"staging\", \"prod\"] = \"staging\"):\n    print(f\"Using: {env}\")\n\n\nprint(\"Cyclopts (Literal):\")\ncmd = [\"--env\", \"staging\"]\nprint(cmd)\ncyclopts_app(cmd)\n# Using: staging\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Choices with Cyclopts\nDESCRIPTION: Example showing Cyclopts' approach to Enum handling, which differs from Typer. Cyclopts performs a case-insensitive lookup by enum name rather than value, making it more intuitive for human interaction where names are typically more descriptive than values.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/choices/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default\ndef foo(env: Environment = Environment.DEV):\n    print(f\"Using: {env.name}\")\n\nprint(\"Cyclopts (Enum):\")\ncyclopts_app([\"--env\", \"staging\"])\n# Using: STAGING\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Disabling Flag Negation\nDESCRIPTION: This code demonstrates how to disable the negative flag generation in Cyclopts by setting the `negative` parameter of `cyclopts.Parameter` to an empty string. The code imports `cyclopts` and `Annotated` from `typing`, creates a Cyclopts app, and defines a default command. The `my_flag` parameter is defined using `Annotated[bool, cyclopts.Parameter(negative=\"\")]`, which disables negative flag generation. Using a different flag like `--your-flag` will result in an error.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/flag_negation/README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom typing import Annotated\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default\ndef foo(my_flag: Annotated[bool, cyclopts.Parameter(negative=\"\")] = False):\n    print(f\"{my_flag=}\")\n\nprint(\"Cyclopts:\")\ncyclopts_app([\"--my-flag\"])\n# my_flag=True\ncyclopts_app([\"--your-flag\"], exit_on_error=False)\n# ╭─ Error ─────────────────────────────────────────────────────────────────────╮\n# │ Error converting value \"--your-flag\" to <class 'bool'> for \"--my-flag\".     │\n# ╰─────────────────────────────────────────────────────────────────────────────╯\n# CoercionError: Error converting value \"--your-flag\" to <class 'bool'> for \"--my-flag\".\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Choices with Typer\nDESCRIPTION: Example of restricting parameter choices using Enum in Typer. This approach defines an Environment enum where each member has a specific value, and Typer matches CLI input against these values to provide the corresponding enum member to the function.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/choices/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom enum import Enum\n\nclass Environment(str, Enum):\n    # Values end in \"_value\" to avoid confusion in this example.\n    DEV = \"dev_value\"\n    STAGING = \"staging_value\"\n    PROD = \"prod_value\"\n\ntyper_app = typer.Typer()\n\n@typer_app.command\ndef foo(env: Environment = Environment.DEV):\n    print(f\"Using: {env.name}\")\n\nprint(\"Typer (Enum):\")\ntyper_app([\"--env\", \"staging_value\"])\n# Using: STAGING\n```\n\n----------------------------------------\n\nTITLE: Running the Library CLI Directly in Console\nDESCRIPTION: Console output showing the library file being executed directly as a script, which works as expected when used standalone.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/global_state/README.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python library_using_arguably.py foo\nname='foo'\n```\n\n----------------------------------------\n\nTITLE: Organizing Commands into Groups in Cyclopts (Python)\nDESCRIPTION: Demonstrates how to assign commands to specific groups in a Cyclopts application using both implicit string group names (`\"Admin\"`) and direct assignment to command objects (`app[\"--help\"].group`). It defines commands (`info`, `download`, `upload`) and assigns them to the \"Admin\" group or the default command group.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n# Change the group of \"--help\" and \"--version\" to the implicitly created \"Admin\" group.\napp[\"--help\"].group = \"Admin\"\napp[\"--version\"].group = \"Admin\"\n\n@app.command(group=\"Admin\")\ndef info():\n    \"\"\"Print debugging system information.\"\"\"\n    print(\"Displaying system info.\")\n\n@app.command\ndef download(path, url):\n    \"\"\"Download a file.\"\"\"\n    print(f\"Downloading {url} to {path}.\")\n\n@app.command\ndef upload(path, url):\n    \"\"\"Upload a file.\"\"\"\n    print(f\"Downloading {url} to {path}.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Help String - Cyclopts App - Python\nDESCRIPTION: This Python snippet demonstrates setting a custom help string for the main application during initialization using the 'help' attribute. This overrides the default behavior of parsing the docstring of the default command function for the main help message.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(help=\"This is my help string.\")\napp()\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Type Handling with Cyclopts in Python\nDESCRIPTION: This example demonstrates how the Cyclopts library successfully handles `typing.Union[int, str]` type annotations for command-line arguments. It defines a default command `foo` and shows that Cyclopts attempts coercion following the Union's type order (int then str), correctly parsing both numeric and string inputs. This requires the `cyclopts` library.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/union_support/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom typing import Union\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default\ndef foo(value: Union[int, str] = \"default_str\"):\n    print(f\"{type(value)=} {value=}\")\n\nprint(\"Cyclopts:\")\ncyclopts_app([\"123\"])\n# type(value)=<class 'int'> value=123\ncyclopts_app([\"bar\"])\n# type(value)=<class 'str'> value='bar'\n```\n\n----------------------------------------\n\nTITLE: Listing CLI Command Help and Output using Cyclopts in the Console\nDESCRIPTION: This snippet shows example console output when using the 'download' command in a cyclopts-based CLI, both for help text and invoking a specific provider. It demonstrates how parameters are presented to the user and how feedback is displayed upon execution. There are no code dependencies for this snippet, but it assumes an installed CLI generated by the Python code examples. Input is via command-line arguments, and output is user-facing help or status messages. Limitation: output format depends on cyclopts's rendering.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/autoregistry.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ my-script download --help\n╭─ Parameters ────────────────────────────────────────────────────────────╮\n│ *  BUCKET,--bucket      [required]                                      │\n│ *  KEY,--key            [required]                                      │\n│ *  DST,--dst            [required]                                      │\n│    PROVIDER,--provider  [choices: gcp,s3,azure] [default: gcp]          │\n╰─────────────────────────────────────────────────────────────────────────╯\n\n$ my-script my-bucket my-key local.bin --provider=s3\nDownloading data from Amazon.\n```\n\n----------------------------------------\n\nTITLE: Defining Name Transformation Function Signature - Cyclopts App - Python\nDESCRIPTION: This snippet specifies the required function signature for a function used to transform function names into their CLI command counterparts via the 'name_transform' attribute. The function takes a single string argument (the original name) and must return a string (the desired CLI name) without a leading '--'.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef name_transform(s: str) -> str:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Flattening Dataclass Namespace using Parameter Decorator\nDESCRIPTION: This Python snippet shows an alternative way to flatten the namespace of a dataclass parameter. Instead of annotating the parameter in the function signature, the `@Parameter(name=\"*\")` decorator is applied directly to the `Movie` dataclass definition. This achieves the same flattening effect and can be cleaner for reusable class configurations.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\n\napp = App(name=\"movie-maintainer\")\n\n@Parameter(name=\"*\")\n@dataclass\nclass Movie:\n   title: str\n   year: int\n\n@app.command\ndef add(movie: Movie):\n   print(f\"Adding movie: {movie}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: List Type with consume_multiple\nDESCRIPTION: This code illustrates the use of `consume_multiple` within a parameter annotation.  When `consume_multiple` is set to `True`, all remaining tokens are consumed and added to the list until the end.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\n@app.default\ndef foo(values: Annotated[list[int], Parameter(consume_multiple=True)]):  # 1 CLI token per element\n   print(values)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Help Output and Usage with Unnamed Group Validator\nDESCRIPTION: Displays the console output related to the script using an unnamed group for validation (`Applying Validators with Unnamed Groups`). It shows the help page where the unnamed group doesn't appear, successful execution with single options (`--car` or `--truck`), and the error message when mutually exclusive options are used together.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python demo.py foo --help\nUsage: demo.py foo [ARGS] [OPTIONS]\n\n╭─ Parameters ──────────────────────────────────────────────────────╮\n│ CAR,--car                                                         │\n│ TRUCK,--truck                                                     │\n╰───────────────────────────────────────────────────────────────────╯\n\n$ python demo.py foo --car\ncar=True truck=False\n\n$ python demo.py foo --truck\ncar=False truck=True\n\n$ python demo.py foo --car --truck\n╭─ Error ───────────────────────────────────────────────────────────╮\n│  Mutually exclusive arguments: {--car, --truck}                   │\n╰───────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Setting up a Meta App with Session Parameters and Default Launcher in Cyclopts (Python)\nDESCRIPTION: Defines a meta app within a primary Cyclopts App to customize command-line session parameters and launch behavior. It configures a group for meta parameters named 'Session Parameters' and annotates a variable positional argument to capture remaining tokens, including options. The default meta command uses this to greet a user and pass tokens to the main app, allowing merged help outputs. Requires Cyclopts and 'typing.Annotated'. Inputs include the user's name and subsequent command tokens; outputs include printed messages and executed commands within the main app context.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Group, Parameter\nfrom typing import Annotated\n\napp = App()\n# Rename the meta's \"Parameter\" -> \"Session Parameters\".\n# Set sort_key so it will be drawn higher up the help-page.\napp.meta.group_parameters = Group(\"Session Parameters\", sort_key=0)\n\n@app.command\ndef foo(loops: int):\n    for i in range(loops):\n        print(f\"Looping! {i}\")\n\n@app.meta.default\ndef my_app_launcher(*tokens: Annotated[str, Parameter(show=False, allow_leading_hyphen=True)], user: str):\n    print(f\"Hello {user}\")\n    app(tokens)\n\napp.meta()\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Default Parameter in Cyclopts (Python)\nDESCRIPTION: Illustrates how to override the application-level `default_parameter` setting for a specific function parameter. By using `typing.Annotated` with a `Parameter` instance (e.g., `Parameter(negative=\"--anti-flag\")`), the negative flag behavior is explicitly defined for the `flag` parameter, overriding the global default of `negative=()`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/default_parameter.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App(default_parameter=Parameter(negative=()))\n\n@app.command\ndef foo(*, flag: Annotated[bool, Parameter(negative=\"--anti-flag\")]):\n    pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Invoking Union Type Parameters\nDESCRIPTION: Shows how Union types are coerced based on the provided command line arguments.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ my-program 10\n<class 'int'>\n\n$ my-program bar\n<class 'str'>\n```\n\n----------------------------------------\n\nTITLE: Invoking Literal Type Parameters\nDESCRIPTION: Shows how Literal types are coerced and handle invalid inputs with appropriate error messages.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ my-program foo\nvalue='foo' type(value)=<class 'str'>\n\n$ my-program bar\nvalue='bar' type(value)=<class 'str'>\n\n$ my-program 3\nvalue=3 type(value)=<class 'int'>\n\n$ my-program fizz\n╭─ Error ─────────────────────────────────────────────────╮\n│ Invalid value for \"VALUE\": unable to convert \"fizz\"     │\n│ into one of {'foo', 'bar', 3}.                          │\n╰─────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Automating CLI Provider Registration with AutoRegistry and Cyclopts in Python\nDESCRIPTION: This snippet refactors CLI provider registration using the AutoRegistry library, auto-populating a registry based on function naming conventions. By decorating provider functions with the Registry instance, the snippet streamlines lookup and invocation when the user specifies the cloud provider. Dependencies: cyclopts, autoregistry, pathlib, typing. Key parameters (bucket, key, dst, provider) remain as before; the registry automatically determines allowed 'provider' values. Output is provider-specific feedback printed to stdout, and new providers are added by simply decorating functions with the registry. Limitation: provider names are inferred from function naming patterns (prefix '_download_').\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/autoregistry.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom autoregistry import Registry\nfrom pathlib import Path\nfrom typing import Literal\n\n_downloaders = Registry(prefix=\"_download_\")\n\n@_downloaders\ndef _download_gcp(bucket: str, key: str, dst: Path):\n    print(\"Downloading data from Google.\")\n\n@_downloaders\ndef _download_s3(bucket: str, key: str, dst: Path):\n    print(\"Downloading data from Amazon.\")\n\n@_downloaders\ndef _download_azure(bucket: str, key: str, dst: Path):\n    print(\"Downloading data from Azure.\")\n\napp = cyclopts.App()\n\n@app.command\ndef download(bucket: str, key: str, dst: Path, provider: Literal[tuple(_downloaders)] = \"gcp\"):\n    downloader = _downloaders[provider]\n    downloader(bucket, key, dst)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Displaying Cyclopts CLI Help Output in Console\nDESCRIPTION: This console output snippet demonstrates the help screen produced by a Cyclopts-based CLI application when run with the '--help' flag. It shows the organized grouping of commands ('Plants', 'Animals', 'Fungi'), available core commands (like '--help' and '--version'), and the expected usage message. Actual commands reflect registered Python functions, and the displayed structure depends on prior command registration and grouping within the application.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\n\nUsage: scratch.py COMMAND\n\n╭─ Plants ───────────────────────────────────────────────────────────╮\n│ daisy                                                              │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ Animals ──────────────────────────────────────────────────────────╮\n│ zebra                                                              │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ Fungi ────────────────────────────────────────────────────────────╮\n│ portobello                                                         │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ Commands ─────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                          │\n│ --version  Display application version.                            │\n╰────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Setting Cyclopts App Version Using a Callable (Python)\nDESCRIPTION: Illustrates configuring the application version by providing a callable (like a function) to the `version` parameter of `cyclopts.App`. This function is executed when the version flag is invoked, returning the version string.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/version.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\ndef get_my_application_version() -> str:\n    return \"7.5.8\"\n\napp = App(version=get_my_application_version)\napp()\n```\n\n----------------------------------------\n\nTITLE: Literal Type for Limited Choices\nDESCRIPTION: Demonstrates using Literal type annotation to limit user input to a predefined set of choices.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom typing import Literal\n\napp = App()\n\n@app.default\ndef default(value: Literal[\"foo\", \"bar\", 3]):\n    print(f\"{value=} {type(value)=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Console Output Example with accepts_keys=False\nDESCRIPTION: This console output displays the effect of `accepts_keys=False` on CLI argument handling. It shows the help message and how the command-line arguments are parsed. The parameter `IMAGE` becomes the single parameter and the `image.path` and `image.label` attributes are not exposed individually.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ──────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                           │\n│ --version  Display application version.                             │\n╰─────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────────────────╮\n│ *  IMAGE --image  [required]                                        │\n╰─────────────────────────────────────────────────────────────────────╯\n\n$ my-program foo.jpg nature\nimage=Image(path='foo.jpg', label='nature')\n\n$ my-program --image foo.jpg nature\nimage=Image(path='foo.jpg', label='nature')\n```\n\n----------------------------------------\n\nTITLE: Setting App-Level Help via Attribute (Python)\nDESCRIPTION: Illustrates defining the main application's help string by setting the `help` attribute during `cyclopts.App` instantiation. This is the highest precedence method for setting the *application's* overall help.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(help=\"This help string has highest precedence at the app-level.\")\n```\n\n----------------------------------------\n\nTITLE: Invoking Registered Commands from CLI Console\nDESCRIPTION: Shows how to execute the basic commands (`fizz`, `buzz`) registered in the corresponding Python example by providing the command name followed by arguments on the command line.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ my-script fizz 3\nFIZZ: 3\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script buzz 4\nBUZZ: 4\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script fuzz\n╭─ Error ────────────────────────────────────────────────────────────────────╮\n│ Unknown command \"fuzz\". Did you mean \"fizz\"?                               │\n╰────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Creating Meta Commands to Bypass Default Launcher in Cyclopts (Python)\nDESCRIPTION: Illustrates how to add commands directly to the meta app to circumvent default meta-app launch logic. A meta command 'info' is defined that prints a message and can be invoked independently of the mandatory session parameters used in the default meta command. This allows selective command invocation without requiring the meta-level parameters. Requires Cyclopts App and use of '@app.meta.command' decorator.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.meta.command\ndef info():\n    print(\"CLI didn't have to provide --user to call this.\")\n```\n\n----------------------------------------\n\nTITLE: Union Type Handling in Cyclopts\nDESCRIPTION: Example showing how Union types are processed from left-to-right until a successful coercion is performed.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom typing import Union\n\napp = App()\n\n@app.default\ndef default(a: Union[None, int, str]):\n    print(type(a))\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Flattening Cyclopts Parameter Namespaces with Dataclasses (Console Output)\nDESCRIPTION: This console output displays the `--help` message for the Python script utilizing namespace flattening. It confirms that the parameters derived from the `User` dataclass (`name`, `age`) appear directly as `--name` and `--age`, without the `user.` prefix, due to the `Parameter(name=\"*\")` annotation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ─────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.              │\n│ --version  Display application version.                │\n╰────────────────────────────────────────────────────────╯\n╭─ Parameters ───────────────────────────────────────────╮\n│ *  NAME --name  [required]                             │\n│ *  AGE --age    [required]                             │\n╰────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Initializing App with Default Values\nDESCRIPTION: This snippet demonstrates how Cyclopts determines the type of a parameter when no explicit type hint is provided, based on the default value.  If a default value is given, the parameter type defaults to type of the default value.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef default(value=5):\n    print(f\"{value=} {type(value)=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Help Format (Python)\nDESCRIPTION: Illustrates setting the help format to `\"markdown\"` (or `\"md\"`) in a Cyclopts app. This allows docstrings to be parsed using Markdown syntax, supporting features like bold text and hyperlinks.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\napp = App(help_format=\"markdown\")  # or \"md\"\n\n\n@app.default\ndef default():\n    \"\"\"My application summary.\n\n    We can do markdown things like have **bold text**.\n    [Hyperlinks work as well.](https://cyclopts.readthedocs.io)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: List Type with Keyword Arguments\nDESCRIPTION: Demonstrates how to pass a list to an argument using keyword arguments. Individual items of the list are passed with the same key.  This snippet shows that a missing token will produce an error.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(values: list[int]):  # 1 CLI token per element\n   print(values)\n\n@app.command\ndef bar(values: list[tuple[int, str]]):  # 2 CLI tokens per element\n   print(values)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Using CLI Command with Keyword Dataclass Arguments\nDESCRIPTION: This console snippet shows invoking the `add` command, passing the dataclass fields (`title` and `year`) as keyword arguments using the `--movie.field` syntax. This demonstrates the explicit way to specify dataclass fields on the command line.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer add --movie.title 'Furiosa: A Mad Max Saga' --movie.year 2024\nAdding movie: Movie(title='Furiosa: A Mad Max Saga', year=2024)\n```\n\n----------------------------------------\n\nTITLE: Using Cyclopts Command with Variable Positional Arguments - Console\nDESCRIPTION: Provides command-line examples showing how the `foo` command handles zero, one, or multiple positional arguments passed after the fixed `name` argument. These arguments are collected into the `*favorite_numbers` tuple as demonstrated by the output.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/args_and_kwargs.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo Brian\nBrian's favorite numbers are: ()\n\n$ my-script foo Brian 777\nBrian's favorite numbers are: (777,)\n\n$ my-script foo Brian 777 2\nBrian's favorite numbers are: (777, 2)\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration Example Snippet for Cyclopts CLI\nDESCRIPTION: This TOML snippet illustrates how to define default parameter values for a Cyclopts CLI command by specifying a nested table corresponding to the tool and command names. Here, the 'character' parameter default for the 'count' command is set to 't'. This allows CLI invocations without explicit options to inherit defaults from external configuration. It requires that the CLI app loads this TOML file correctly and that the section matches the naming convention used in the Cyclopts App.config setup.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/config_file.rst#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.character-counter.count]\ncharacter = \"t\"\n```\n\n----------------------------------------\n\nTITLE: Executing Nested Subcommand - Cyclopts - Console Output\nDESCRIPTION: This console output shows the result of executing the 'bar' command which is nested under the 'foo' subcommand in the previous Python example. It confirms that the nested command can be successfully invoked from the command line using the full path 'foo bar'.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo bar\nRunning bar.\n```\n\n----------------------------------------\n\nTITLE: Invoking Tuple Parameters from Command Line\nDESCRIPTION: Shows how to pass arguments to a function expecting a tuple parameter from the command line.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --coordinates 3.14 2.718 my-coord-name\ncoordinates=(3.14, 2.718, 'my-coord-name')\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Naming with Annotations\nDESCRIPTION: Shows how to customize parameter names for nested fields in user-defined classes using Parameter annotations.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\nfrom typing import Annotated\n\napp = App()\n\n@dataclass\nclass User:\n   # Beginning with \"--\" will completely override the parenting parameter name.\n   name: Annotated[str, Parameter(name=\"--nickname\")]\n   # Not beginning with \"--\" will tack it on to the parenting parameter name.\n   age: Annotated[int, Parameter(name=\"years-young\")]\n\n@app.default\ndef main(user: Annotated[User, Parameter(name=\"player\")]):\n   print(user)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Typer Custom Negative Flag\nDESCRIPTION: This code snippet shows how to provide a custom negative flag for a boolean parameter in Typer.  The `Option` annotation now includes a slash-separated list of flags `--my-flag/--your-flag`.  Typer will now recognize both `--my-flag` and `--your-flag` to control the boolean parameter `my_flag`.  `--my-flag` sets `my_flag` to `True`, and `--your-flag` sets `my_flag` to `False`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/flag_negation/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo(my_flag: Annotated[bool, typer.Option(\"--my-flag/--your-flag\")] = False):\n    print(f\"{my_flag=}\")\n\ntyper_app([\"--my-flag\"], standalone_mode=False)\n# my_flag=True\ntyper_app([\"--your-flag\"], standalone_mode=False)\n# my_flag=False\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Custom Validator Function\nDESCRIPTION: Shows how Cyclopts implements validation using a dedicated validator function. This approach separates the validation logic from the parameter definition, making it more explicit and flexible.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/validation/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, parameter\nfrom typing import Annotated\n\ncyclopts_app = App()\n\ndef age_validator(type_, value: int):\n    if value < 0:\n        raise ValueError\n\n@cyclopts_app.command()\ndef foo(age: Annotated[int, Parameter(validator=age_validator)]):\n    pass\n\n cyclopts_app()\n```\n\n----------------------------------------\n\nTITLE: Interpreting String Type with No Hint\nDESCRIPTION: This code sample shows how Cyclopts handles parameters without type hints but without default values.  In these cases, it defaults to a string type.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef default(value):\n    print(f\"{value=} {type(value)=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Displaying Sorted Commands on Help - Cyclopts App Help - Help Output\nDESCRIPTION: This output shows the resulting help page from the 'Sorting Commands on Help Page' example. The commands are displayed according to their assigned 'sort_key': 'charlie' (sort_key=1) first, then 'bob' (sort_key=2), and finally 'alice' (no sort_key, sorted alphabetically among others without sort_key).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nUsage: demo.py COMMAND\n\n╭─ Commands ──────────────────────────────────────────────────╮\n│ charlie    Charlie help description.                        │\n│ bob        Bob help description.                            │\n│ alice      Alice help description.                          │\n│ --help -h  Display this message and exit.                   │\n│ --version  Display application version.                     │\n╰─────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Example TOML Configuration File\nDESCRIPTION: This TOML snippet shows a simple configuration file named `config.toml`. It contains a single key-value pair, `user = \"Guido\"`, which can be used by Cyclopts to provide default values for command-line parameters when integrated with the `config.Toml` feature.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n# config.toml\nuser = \"Guido\"\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Variable Passing with Monkeypatch\nDESCRIPTION: Uses pytest's monkeypatch fixture to set environment variables within a test context, verifying that Cyclopts app correctly retrieves environment-based configuration values without invoking CLI arguments.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef test_name_env_var(monkeypatch):\n    from pypi_checker import pypi_checker\n    monkeypatch.setenv(\"PYPI_CHECKER_NAME\", \"foo\")\n    command, bound, _ = app.parse_args([])  # An empty list - no CLI arguments passed in.\n    assert command == pypi_checker\n    assert bound.arguments['name'] == \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Grouping CLI Commands with Cyclopts in Python\nDESCRIPTION: This snippet defines two CLI commands, 'daisy' and 'portobello', in Python using the Cyclopts framework. The '@app.command(group=fungi)' decorator registers 'portobello' under the 'fungi' group, organizing commands into themed categories. No parameters or return values are specified, and the functions are placeholders. Cyclopts must be installed, and an 'app' object should exist and be properly configured for command registration and execution. Only basic function signatures are shown, and no actual command logic is implemented.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef daisy():\n    pass\n\n@app.command(group=fungi)\ndef portobello():\n    pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Explicit Input Passing in Cyclopts App\nDESCRIPTION: Shows how to explicitly pass input to a Cyclopts app, either as a string that will be parsed using shlex.split, or as a list of string arguments.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/app_calling.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp(\"foo 1 2 3\")\n# 6\napp([\"foo\", \"1\", \"2\", \"3\"])\n# 6\n```\n\n----------------------------------------\n\nTITLE: Ordering Help Page Groups with `Group.create_ordered` in Cyclopts (Python)\nDESCRIPTION: Demonstrates using the `Group.create_ordered` class method to create groups (`plants`, `animals`, `fungi`) whose order on the help page will match their instantiation order, overriding the default alphabetical sorting. Commands (`zebra`, `oak`, `mushroom`) are then assigned to these ordered groups.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/groups.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Group\n\napp = App()\n\nplants = Group.create_ordered(\"Plants\")\nanimals = Group.create_ordered(\"Animals\")\nfungi = Group.create_ordered(\"Fungi\")\n\n@app.command(group=animals)\ndef zebra():\n    pass\n\n@app.command(group=plants)\ndef oak(): # Added for completeness, assuming it belongs to 'plants'\n    pass\n\n@app.command(group=fungi) # Assuming a mushroom command for 'fungi'\ndef mushroom():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Application-Level Help Documentation in Cyclopts\nDESCRIPTION: Shows how to add application-level help documentation by providing a help string when creating the App instance. This enables the --help flag to display usage information.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/getting_started.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(help=\"Help string for this demo application.\")\n\n@app.default\ndef main(name: str, count: int):\n    for _ in range(count):\n        print(f\"Hello {name}!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\nHelp string for this demo application.\n\n╭─ Commands ──────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                           │\n│ --version  Display application version.                             │\n╰─────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────────────────╮\n│ *  NAME --name    [required]                                        │\n│ *  COUNT --count  [required]                                        │\n╰─────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating LimitedChoice Validator Usage and Error Handling in Console\nDESCRIPTION: This console output illustrates the behavior of the Python script using the `LimitedChoice` validator. The first command shows the help message (`--help`), displaying the grouped 'Vehicle' options. The second command demonstrates successful execution when only one mutually exclusive option (`--car`) is provided. The third command shows the error message generated by the `LimitedChoice` validator when both conflicting options (`--car --truck`) are supplied, indicating they are mutually exclusive.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/group_validators.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python drive.py --help\nUsage: main COMMAND [OPTIONS]\n\n╭─ Commands ─────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                          │\n│ --version  Display application version.                            │\n╰────────────────────────────────────────────────────────────────────╯\n╭─ Vehicle (choose one) ─────────────────────────────────────────────╮\n│ --car    [default: False]                                          │\n│ --truck  [default: False]                                          │\n╰────────────────────────────────────────────────────────────────────╯\n\n$ python drive.py --car\nI'm driving a car.\n\n$ python drive.py --car --truck\n╭─ Error ────────────────────────────────────────────────────────────╮\n│ Invalid values for group \"Vehicle (choose one)\". Mutually          │\n│ exclusive arguments: {--car, --truck}                              │\n╰────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Example Usage and Expected Output for Package Availability Checks\nDESCRIPTION: Shows command-line execution to check package availability, illustrating output messages and exit codes for available and unavailable packages.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_5\n\nLANGUAGE: Console\nCODE:\n```\n$ python pypi_checker.py cyclopts\ncyclopts is not available.\n$ python pypi_checker.py cyclopts --silent\n$ echo $?  # Check the exit code of the previous command.\n1\n$ python pypi_checker.py the-next-big-project\nthe-next-big-project is available.\n$ echo $?  # Check the exit code of the previous command.\n0\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Console Fixture for Pytest Testing (Python)\nDESCRIPTION: Defines a pytest fixture named 'console' that returns a `rich.console.Console` instance configured with fixed width (70), forced terminal output, disabled highlighting, no color system, and disabled legacy windows behavior. This setup provides a consistent environment for testing console output, mitigating differences due to the terminal's capabilities.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\n   def console():\n       from rich.console import Console\n       return Console(width=70, force_terminal=True, highlight=False, color_system=None, legacy_windows=False)\n```\n\n----------------------------------------\n\nTITLE: Using Cyclopts with Docstring-Based Parameter Documentation\nDESCRIPTION: This example shows Cyclopts' docstring-centric approach to CLI parameter documentation. Instead of using annotations, parameter help text is defined in the function's docstring using NumPy-style documentation, resulting in cleaner code.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/help_defaults/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom pathlib import Path\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default()\ndef compress(src: Path, dst: Path = Path(\"out.zip\")):\n    \"\"\"Compress a file.\n\n    Parameters\n    ----------\n    src: Path\n       File to compress.\n    dst: Path\n       Path to save compressed data to.\n    \"\"\"\n    print(f\"Compressing data from {src} to {dst}\")\n\ncyclopts_app([\"--help\"])\n```\n\n----------------------------------------\n\nTITLE: Viewing Command Help from CLI Console\nDESCRIPTION: Displays the output generated by running the command with the `--help` flag, showing how the help strings provided in the Python code are presented to the user for each registered command.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/commands.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\n╭─ Commands ────────────────────────────────────────────────────────────╮\n│ bar        Help string for bar.                                       │\n│ foo        Help string for foo.                                       │\n│ --help,-h  Display this message and exit.                             │\n│ --version  Display application version.                               │\n╰───────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Positional and Keyword Parameter Functions Using Python (Python)\nDESCRIPTION: This snippet defines four Python functions highlighting variations in function signatures: a generic function accepting both positional and keyword arguments, one with positional-only parameters, one with keyword-only parameters (with default), and a hybrid using both positional-only and keyword-only markers. No external dependencies are required. Inputs and parameters are generic; the focus is structural rather than functional.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/argument_vs_option/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef pos_or_keyword(a, b):\n    pass\n\ndef pos_only(a, b, /):\n    pass\n\ndef keyword_only(*, a, b=2):\n    pass\n\ndef mixture(a, /, b, *, c=3):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing a command to launch interative shell within Cyclopts App\nDESCRIPTION: This code demonstrates defining a command that launches the interactive shell without directly invoking the app. This ensures the application functions as expected from the CLI by using a command (e.g., 'shell') instead of calling the app object directly in main.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/interactive_help.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.command\ndef shell():\n    app.interactive_shell()\n\nif __name__ == \"__main__\":\n    app()  # Don't call ``app.interactive_shell()`` here.\n```\n\n----------------------------------------\n\nTITLE: Sorting Commands on Help Page - Cyclopts App - Python\nDESCRIPTION: This Python snippet illustrates how to control the display order of commands on the help page using the 'sort_key' attribute. Commands with an explicit 'sort_key' are sorted first based on the key value (lower first), followed by commands with no 'sort_key' sorted alphabetically.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command  # sort_key not specified; will be sorted AFTER bob/charlie.\ndef alice():\n    \"\"\"Alice help description.\"\"\"\n\n@app.command(sort_key=2)\ndef bob():\n    \"\"\"Bob help description.\"\"\"\n\n@app.command(sort_key=1)\ndef charlie():\n    \"\"\"Charlie help description.\"\"\"\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Typer's Lack of Union Support in Python\nDESCRIPTION: This snippet shows an attempt to use `typing.Union[int, str]` for a command-line argument type hint within a Typer application. Running this code results in an `AssertionError` because Typer does not currently support Union types for command arguments. It requires the `typer` library.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/union_support/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing import Union\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo(value: Union[int, str] = \"default_str\"):\n    print(f\"{type(value)=} {value=}\")\n\ntry:\n    typer_app([\"123\"])\nexcept AssertionError as e:\n    print(f\"# {e}\")\n# AssertionError: Typer Currently doesn't support Union types\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Custom Negative Flag\nDESCRIPTION: This snippet shows how to define a custom negative flag for a boolean parameter using Cyclopts. The `negative` parameter of `cyclopts.Parameter` is set to `--your-flag`. When `--my-flag` is passed, `my_flag` is set to `True`; when `--your-flag` is passed, `my_flag` is set to `False`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/flag_negation/README.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@cyclopts_app.default\ndef foo(my_flag: Annotated[bool, cyclopts.Parameter(negative=\"--your-flag\")] = False):\n    print(f\"{my_flag=}\")\n\nprint(\"Cyclopts:\")\ncyclopts_app([\"--my-flag\"])\n# my_flag=True\ncyclopts_app([\"--your-flag\"])\n# my_flag=False\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Cyclopts Help (Console)\nDESCRIPTION: Demonstrates invoking the default help screen of a Cyclopts application using the `--help` flag. The output shows usage, a short description, and available commands including the default `--help`, `-h`, and `--version` flags.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ my-application --help\nUsage: my-application COMMAND\n\nMy application short description.\n\n╭─ Commands ─────────────────────────────────────────────────────────╮\n│ foo        Foo help string.                                        │\n│ bar        Bar help string.                                        │\n│ --help -h  Display this message and exit.                          │\n│ --version  Display application version.                            │\n╰────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Version via Command Line\nDESCRIPTION: Demonstrates the default usage of the `--version` flag in a Cyclopts-based command-line application to display its installed version number.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/version.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ my-application --version\n7.5.8\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fire CLI Argument Parsing in Console\nDESCRIPTION: This console snippet shows example usages of the Fire-based CLI application with different command line inputs. It highlights how Fire converts input arguments to their respective Python types (e.g., integer, boolean) automatically when passed, reflecting in the printed output. For example, '100' is parsed as an integer, and 'True' as a boolean, while lowercase 'true' remains a string due to Python's case sensitivity.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_fire/README.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo\nname='foo' type(name)=<class 'str'>\n\n$ my-script 100\nname=100 type(name)=<class 'int'>\n\n$ my-script true\nname='true' type(name)=<class 'str'>\n\n$ my-script True\nname=True type(name)=<class 'bool'>\n```\n\n----------------------------------------\n\nTITLE: Implementing CLI with Arguably in Python\nDESCRIPTION: Demonstrates the basic usage of the Arguably framework for creating a command-line interface by directly decorating functions without creating an application object. The function includes required and optional arguments, as well as documentation.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/global_state/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport arguably\n\n\n@arguably.command\ndef some_function(required, not_required=2, *others: int, option: float = 3.14):\n    \"\"\"\n    this function is on the command line!\n\n    Args:\n        required: a required argument\n        not_required: this one isn't required, since it has a default value\n        *others: all the other positional arguments go here\n        option: [-x] keyword-only args are options, short name is in brackets\n    \"\"\"\n    print(f\"{required=}, {not_required=}, {others=}, {option=}\")\n\n\nif __name__ == \"__main__\":\n    arguably.run()\n```\n\n----------------------------------------\n\nTITLE: Defining commands with Cyclopts App and launching interactive shell\nDESCRIPTION: This snippet illustrates how to create a Cyclopts App instance, define commands using decorators with docstrings, and launch an interactive shell with a custom prompt. It also emphasizes the importance of using a command (not directly calling the app) to start the shell for CLI consistency.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/interactive_help.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(p1):\n    \"\"\"Foo Docstring.\n\n    Parameters\n    ----------\n    p1: str\n        Foo's first parameter.\n    \"\"\"\n    print(f\"foo {p1}\")\n\n@app.command\ndef bar(p1):\n    \"\"\"Bar Docstring.\n\n    Parameters\n    ----------\n    p1: str\n        Bar's first parameter.\n    \"\"\"\n    print(f\"bar {p1}\")\n\n# A blocking call, launching an interactive shell.\napp.interactive_shell(prompt=\"cyclopts> \")\n```\n\n----------------------------------------\n\nTITLE: Cyclopts run Function\nDESCRIPTION: Documentation placeholder for the cyclopts.run function, which likely executes the main CLI application logic or command processing. Specific implementation details are not provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_34\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: cyclopts.run\n```\n\n----------------------------------------\n\nTITLE: Library Module Using Arguably in Python\nDESCRIPTION: Sample library file that uses Arguably to create a CLI command. This demonstrates how Arguably registers commands globally when a module is imported, which can cause issues when the library is used by other applications.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/global_state/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# library_using_arguably.py\nimport arguably\n\n\n@arguably.command\ndef some_library_function(name):\n    print(f\"{name=}\")\n\n\nif __name__ == \"__main__\":\n    arguably.run()\n```\n\n----------------------------------------\n\nTITLE: Typer Argument Function Signature\nDESCRIPTION: Shows the full signature of the Typer Argument function, highlighting how it includes many type-specific parameters in one function signature that only apply in certain contexts.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/validation/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef Argument(\n    # Parameter\n    default: Optional[Any] = ...,\n    *,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    # Custom type\n    parser: Optional[Callable[[str], Any]] = None,\n    # TyperArgument\n    show_default: Union[bool, str] = True,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Cyclopts App Invocation with Custom Command Logic (Python)\nDESCRIPTION: Overrides the App's __call__ method logic to customize command invocation by manually parsing arguments and passing additional crafted keyword arguments to the command. Illustrates creating a User object based on meta parameters and injecting it into commands that require it. Utilizes the 'parse=False' parameter annotation to allow parameters not parsed by Cyclopts to be manually bound, aiding in sharing state like a user session object across commands during execution.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n@app.command\ndef create(\n    age: int,\n    *,\n    user_obj: Annotated[User, Parameter(parse=False)],\n):\n    print(f\"Creating user {user_obj.name} with age {age}.\")\n\n@app.meta.default\ndef launcher(*tokens: Annotated[str, Parameter(show=False, allow_leading_hyphen=True)], user: str):\n    additional_kwargs = {}\n    command, bound, ignored = app.parse_args(tokens)\n    # \"ignored\" maps parameter names with parse=False to their types\n    if \"user_obj\" in ignored:\n        additional_kwargs[\"user_obj\"] = ignored[\"user_obj\"](user)\n    return command(*bound.args, **bound.kwargs, **additional_kwargs)\n\nif __name__ == \"__main__\":\n    app.meta()\n```\n\n----------------------------------------\n\nTITLE: Console Usage Examples for Meta Commands in Cyclopts\nDESCRIPTION: Shows how to invoke a meta command that bypasses the default launcher with the 'info' command, and the help output that now includes the 'info' command alongside other commands and session parameters. Demonstrates CLI behavior modification when using meta commands.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/meta_app.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ my-script info\nCLI didn't have to provide --user to call this.\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\nUsage: my-script COMMAND\n\n╭─ Session Parameters ────────────────────────────────────────────────────╮\n│ *  --user  [required]                                                   │\n╰─────────────────────────────────────────────────────────────────────────╯\n╭─ Commands ──────────────────────────────────────────────────────────────╮\n│ foo                                                                     │\n│ info                                                                    │\n│ --help,-h  Display this message and exit.                               │\n│ --version  Display application version.                                 │\n╰─────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Implementing Subcommands with Arguably in Python\nDESCRIPTION: Demonstrates how to create nested subcommands using Arguably's `__` delimited function naming convention. This approach automatically parses function names like 'ec2__start_instances' to create a command tree structure with 'ec2' as the parent command and 'start-instances' as the subcommand.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/subcommands/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport arguably\n\n\n@arguably.command\ndef ec2__start_instances(*instances):\n    \"\"\"Start instances.\n\n    Args:\n        *instances: {instance}s to start\n    \"\"\"\n    for inst in instances:\n        print(f\"Starting {inst}\")\n\n\n@arguably.command\ndef ec2__stop_instances(*instances):\n    \"\"\"Stop instances.\n\n    Args:\n        *instances: {instance}s to stop\n    \"\"\"\n    for inst in instances:\n        print(f\"Stopping {inst}\")\n\n\nif __name__ == \"__main__\":\n    arguably.run()\n```\n\n----------------------------------------\n\nTITLE: Typer Application with Docstring in Python\nDESCRIPTION: This Python code demonstrates the use of Typer, a library for building command-line interfaces (CLIs). It defines a simple command `foo` and uses a docstring to provide a description for the command and its parameter `bar`. The example highlights how Typer uses the docstring as the help text but doesn't parse it effectively, resulting in all of it being shown.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/docstring/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.callback()\ndef dummy():\n    # So that ``foo`` is considered a command.\n    pass\n\n@typer_app.command()\ndef foo(bar):\n    \"\"\"Foo Docstring.\n\n    Parameters\n    ----------\n    bar: str\n        Bar parameter docstring.\n    \"\"\"\n\ntyper_app()\n```\n\n----------------------------------------\n\nTITLE: Rules function using consume_multiple\nDESCRIPTION: This Python code defines a command-line application where a list of files and a list of extensions can be passed as arguments. The `files` parameter takes a list of `Path` objects and consumes positional arguments, while the `ext` parameter also takes a list and can be specified using a keyword and takes multiple elements of CLI tokens.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\nfrom pathlib import Path\n\napp = App()\n\n@app.default\ndef rules(files: list[Path], ext: list[str] = []):\n   pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Help Format (Python)\nDESCRIPTION: Shows how to explicitly set the help format to `\"restructuredtext\"` (or `\"rst\"`), which is the default behavior in Cyclopts. Docstrings are parsed as reStructuredText, allowing markup like bold text and bullet points.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = App(help_format=\"restructuredtext\")  # or \"rst\"\n# or don't supply help_format at all; rst is default.\n\n@app.default\ndef default():\n    \"\"\"My application summary.\n\n    We can do RST things like have **bold text**.\n    More words in this paragraph.\n\n    This is a new paragraph with some bulletpoints below:\n\n    * bullet point 1.\n    * bullet point 2.\n    \"\"\"\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Disabling Dataclass Subkeys in Cyclopts Parameters (Python)\nDESCRIPTION: This Python code snippet illustrates using `Parameter(accepts_keys=False)` with a `dataclass` (`User`) annotated within a `cyclopts` command function (`main`). This configuration prevents `cyclopts` from generating individual command-line arguments (like `--user.name`, `--user.age`) for the dataclass fields. Instead, it expects positional arguments to populate the required fields (`name`, `age`). It uses `App`, `Parameter` from `cyclopts`, `dataclass` from `dataclasses`, and `Annotated`, `Literal` from `typing`.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\nfrom typing import Annotated, Literal\n\napp = App()\n\n@dataclass\nclass User:\n   name: str\n   age: int\n   region: Literal[\"us\", \"ca\"] = \"us\"\n\n@app.default\ndef main(user: Annotated[User, Parameter(accepts_keys=False)]):\n   print(user)\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Parsing CLI Arguments with Fire Library in Python\nDESCRIPTION: This snippet demonstrates the usage of the Fire library to create a CLI from a Python function. Fire dynamically parses command line arguments according to their Python literal types rather than function signature hints, enabling input such as numbers, strings, lists, and booleans to be interpreted correctly. The code requires the 'fire' package and assumes Python's runtime CLI environment. The example function prints the provided 'name' argument along with its detected type, showcasing Fire's automatic type inference at runtime.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_fire/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\n\ndef hello(name: str = \"World\"):\n    print(f\"{name=} {type(name)=}\")\n\n\nif __name__ == \"__main__\":\n    fire.Fire(hello)\n```\n\n----------------------------------------\n\nTITLE: Validator Function for Argument Collection\nDESCRIPTION: Defines a validator function that checks the validity of an ArgumentCollection instance. The function raises an exception if validation fails. Validators are typically not invoked for command groups. Dependencies: ArgumentCollection class.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\ndef validator(argument_collection: ArgumentCollection):\n    \"\"\"Raise an exception if something is invalid.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Return Values from Cyclopts Commands\nDESCRIPTION: Demonstrates how to capture and use the return value from a Cyclopts command. The example shows a command that returns the sum of three integers.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/app_calling.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(a: int, b: int, c: int):\n    return a + b + c\n\nreturn_value = app(\"foo 1 2 3\")\nprint(f\"The return value was: {return_value}.\")\n# The return value was: 6.\n```\n\n----------------------------------------\n\nTITLE: Customizing Help Flags (List of Strings) (Python)\nDESCRIPTION: Shows how to replace the default help flags with multiple custom flags (`--send-help`, `--send-help-plz`, `-h`) by passing a list of strings to the `help_flags` parameter.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(help_flags=[\"--send-help\", \"--send-help-plz\", \"-h\"])\n```\n\n----------------------------------------\n\nTITLE: Main Entrypoint to Run the Cyclopts CLI Application\nDESCRIPTION: Checks if the script is executed directly and invokes the Cyclopts application runner. Enables CLI interaction based on arguments passed in or default configurations.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Example Output with PlainText Format (Text)\nDESCRIPTION: Displays the resulting help screen output when `help_format` is set to `\"plaintext\"`. Note that the docstring text is rendered literally, preserving original line breaks and without applying any markup.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nUsage: default COMMAND\n\nMy application summary.\n\nThis is a pretty standard docstring; if there's a really long\nsentence\nI should probably wrap it because people don't like code that is\nmore\nthan 80 columns long.\n\nIn this new paragraph, I would like to discuss the benefits of\nrelaxing 80 cols to 120 cols.\nMore text in this paragraph.\n\nSome new paragraph.\n\n╭─ Commands ─────────────────────────────────────────────────────╮\n│ --help,-h  Display this message and exit.                      │\n│ --version  Display application version.                        │\n╰────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Disabling Negative Flags Globally in Cyclopts (Python)\nDESCRIPTION: Demonstrates setting a default `Parameter` for a `cyclopts.App` to disable the automatic generation of negative flags (e.g., `--no-flag`) for all boolean parameters within the application by initializing `Parameter` with `negative=()`. This configuration applies unless overridden at a more specific level.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/default_parameter.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\n\napp = App(default_parameter=Parameter(negative=()))\n\n@app.command\ndef foo(*, flag: bool):\n    pass\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Working with Tuples in Cyclopts\nDESCRIPTION: Example showing how to handle tuple parameters with fixed-length type hints where each element can have different types.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef default(coordinates: tuple[float, float, str]):\n   print(f\"{coordinates=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Multi-Line Short Description Parsing (Python)\nDESCRIPTION: Provides an example Python function docstring where the first block of text, even spanning multiple lines, is treated as the short description by Cyclopts after removing newlines. The long description starts after the first double-newline.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef my_command():\n    \"\"\"\n    This entire sentence\n    is part of the short description and will\n    have all the newlines removed.\n\n    This is the beginning of the long description.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Help Output and Execution of Typer App\nDESCRIPTION: This snippet shows the help output and execution of the Typer application. The help message lacks the detailed argument choices, and the error handling is less informative than Cyclopts.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ my-script deploy --help\n\nUsage: my-script deploy [OPTIONS] ENV:{dev|staging|prod} [REPLICAS]\n\n Deploy code to an environment.\n\n╭─ Arguments ─────────────────────────────────────────────────────────────────────────────────────╮\n│ *    env           ENV:{dev|staging|prod}  Environment to deploy to. [default: None] [required] │\n│      replicas      [REPLICAS]              Number of workers to spin up. [default: 10]          │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ───────────────────────────────────────────────────────────────────────────────────────╮\n│ --help          Show this message and exit.                                                     │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n$ my-script deploy staging\nDeploying to staging with 10 replicas.\n\n$ my-script deploy staging 7\nDeploying to staging with 7 replicas.\n\n$ my-script deploy staging performance\nDeploying to staging with 20 replicas.\n\n$ my-script deploy nonexistent-env\nUsage: my-script.py deploy [OPTIONS] ENV:{dev|staging|prod} [REPLICAS]\nTry 'my-script.py deploy --help' for help.\n╭─ Error ─────────────────────────────────────────────────────────────────────────────────────────╮\n│ Invalid value for '[REPLICAS]': nonexistent-env                                                 │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n$ my-script --version\n0.0.0\n```\n\n----------------------------------------\n\nTITLE: Advanced Cyclopts Usage with App\nDESCRIPTION: This snippet demonstrates creating a CLI application with `cyclopts.App`. It registers a command `foo` using the `@app.command` decorator and a default function using the `@app.default` decorator. It shows a more structured way to define CLI commands.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.command\ndef foo(loops: int):\n    for i in range(loops):\n        print(f\"Looping! {i}\")\n\n@app.default\ndef default_action():\n    print(\"Hello world! This runs when no command is specified.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Using the Simplified run() Function in Cyclopts\nDESCRIPTION: Shows the alternative, terser API for simple applications with a single command. The run() function provides a more concise way to create Cyclopts applications when minimal configuration is needed.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/getting_started.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ndef main(name: str, count: int):\n    for _ in range(count):\n        print(f\"Hello {name}!\")\n\nif __name__ == \"__main__\":\n    cyclopts.run(main)\n```\n\n----------------------------------------\n\nTITLE: Showing Help for Command with Dataclass Parameter\nDESCRIPTION: This console snippet shows the output of the `--help` command for the `add` command defined in the previous Python code. It illustrates how Cyclopts automatically generates help text, showing the dataclass fields (`title` and `year`) as required parameters prefixed by the parameter name (`MOVIE`).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/user_classes.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ movie-maintainer add --help\nUsage: movie-maintainer add [ARGS] [OPTIONS]\n\n╭─ Parameters ────────────────────────────────────────────────╮\n│ *  MOVIE.TITLE              [required]                      │\n│      --movie.title                                          │\n│ *  MOVIE.YEAR --movie.year  [required]                      │\n╰─────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Comparison of Path Validation in Typer vs Cyclopts\nDESCRIPTION: Compares how path validation is handled in Typer versus Cyclopts. Typer uses direct parameters in the Argument constructor, while Cyclopts uses a dedicated Path validator.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/validation/README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Typer\ntyper.Argument(file_okay=True, exists=True)\n\n# Cyclopts\ncyclopts.Parameter(validator=cyclopts.validators.Path(file_okay=True, exists=True))\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in Cyclopts with and without Decorator Parentheses (Python)\nDESCRIPTION: Illustrates creating a Cyclopts application and registering command functions using the @command decorator both with and without parentheses. Requires the 'cyclopts' library. Both 'foo' (without parentheses) and 'bar' (with parentheses) functions are valid Cyclopts commands, showcasing Cyclopts' more flexible decorator syntax.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/decorator_parentheses/README.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App()\n\n# This works! Missing ()\n@cyclopts_app.command\ndef foo():\n    pass\n\n# This also works.\n@cyclopts_app.command()\ndef bar():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Empty List\nDESCRIPTION: Demonstrates how to specify an empty list using a special flag. This is necessary because if a list argument is not given, the `list` parameter is automatically assigned to None, so if we want the empty list we have to use the flag, e.g., --empty-MY-LIST-NAME.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main(extensions: list | None = None):\n   if extensions is None:\n      extensions = [\".png\", \".jpg\"]\n   print(f\"{extensions=}\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Attempting Keyword Arguments with Typer CLI Application - Python\nDESCRIPTION: This code attempts to run the same Typer CLI application but supplies `src` and `dst` as keyword arguments using the `--src` and `--dst` flags. Required dependency: Typer library. When executed, Typer raises an error indicating that `--src` is not a recognized option. Inputs are attempted as keyword arguments; the code demonstrates Typer's limitation with respect to keyword argument parsing for positional parameters.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/positional_or_keyword/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Typer keyword:\")\ntyper_app([\"--src\", \"foo\", \"--dst\", \"bar\"], standalone_mode=False)\n# No such option: --src\n```\n\n----------------------------------------\n\nTITLE: Implementing Git-like Commit Message Editor in Python with Cyclopts\nDESCRIPTION: A complete example that mimics Git's commit functionality by opening a text editor for the user to input a commit message. The code uses cyclopts.edit() to launch an editor and handles cases where the user doesn't save or leaves an empty message.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/text_editor.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# git.py\nimport cyclopts\nfrom textwrap import dedent\nimport sys\n\napp = cyclopts.App(name=\"git\")\n\n@app.command\ndef commit():\n    try:\n        response = cyclopts.edit(  # blocks until text editor is closed.\n            dedent(  # removes the  leading 4-tab indentation.\n                \"\"\"\\\n\n\n                # Please enter the commit message for your changes.Lines starting\n                # with '#' will be ignored, and an empty message aborts the commit.\n                \"\"\"\n            )\n        )\n    except (cyclopts.EditorDidNotSaveError, cyclopts.EditorDidNotChangeError):\n        print(\"Aborting commit due to empty commit message.\")\n        sys.exit(1)\n    filtered = \"\\n\".join(x for x in response.split(\"\\n\") if not x.startswith(\"#\"))\n    filtered = filtered.strip()  # remove leading/trailing whitespace.\n    print(f\"Your commit message: {filtered}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: CLI Command Function for Checking Package Name Availability\nDESCRIPTION: Defines a Cyclopts decorated default command that checks if a package name is available on PyPI; it prints the status unless in silent mode and exits with an appropriate code. Uses the _check_pypi_name_available function and sys.exit to terminate the app. Parameters include 'name' (package name) and 'silent' (suppress output).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.default\ndef pypi_checker(name: str, *, silent: bool = False):\n    \"\"\"Check if a package name is available on PyPI.\n\n    Exit code 0 on success; non-zero otherwise.\n\n    Parameters\n    ----------\n    name: str\n        Name of the package to check.\n    silent: bool\n        Do not print anything to stdout.\n    \"\"\"\n    is_available = _check_pypi_name_available(name)\n    if not silent:\n        if is_available:\n            print(f\"{name} is available.\")\n        else:\n            print(f\"{name} is not available.\")\n    sys.exit(not is_available)\n```\n\n----------------------------------------\n\nTITLE: Disabling Help Flags (Empty String) (Python)\nDESCRIPTION: Illustrates how to completely disable the automatic help flag generation and the help screen by setting the `help_flags` parameter to an empty string.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(help_flags=\"\")\n```\n\n----------------------------------------\n\nTITLE: Basic Cyclopts Usage with run()\nDESCRIPTION: This snippet demonstrates the simplest way to create a CLI application using `cyclopts.run()`. It defines a function `foo` that accepts an integer argument and prints a looping message. The `run()` function automatically turns `foo` into a CLI command.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import run\n\ndef foo(loops: int):\n    for i in range(loops):\n        print(f\"Looping! {i}\")\n\nrun(foo)\n```\n\n----------------------------------------\n\nTITLE: Disabling the Version Flag in Cyclopts App (Python)\nDESCRIPTION: Shows how to completely disable the automatic version flag feature in a Cyclopts application. This is achieved by setting the `version_flags` parameter of `cyclopts.App` to either an empty string or an empty iterable (like an empty list).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/version.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(version_flags=\"\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App(version_flags=[])\n```\n\n----------------------------------------\n\nTITLE: Customizing Nested Parameter Names in Dataclasses with cyclopts.Parameter (Python)\nDESCRIPTION: Demonstrates how to expose and override parameter names in nested data structures using dataclasses and cyclopts.Parameter with Annotated. Hierarchical and manual CLI name control are shown, including hyphen-prefixed parameter names for overriding dot notation. Dependencies: cyclopts.App, cyclopts.Parameter, dataclasses, typing.Annotated. Input: composite parameter 'user' with overridden fields for CLI naming. Output: formatted CLI help screen for nested parameters. Limitation: careful with manual name overrides.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom dataclasses import dataclass\nfrom typing import Annotated\n\napp = App()\n\n@dataclass\nclass User:\n   id: int  # default behavior\n   email: Annotated[str, Parameter(name=\"--email\")]  # overrides\n   pwd: Annotated[str, Parameter(name=\"password\")]  # dot-notation with parent\n\n@app.command\ndef create(user: User):\n   print(f\"Creating {user=}\")\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script create --help\nUsage: scratch.py create [ARGS] [OPTIONS]\n\n╭─ Parameters ───────────────────────────────────────────────────╮\n│ *  USER.ID --user.id  [required]                               │\n│ *  EMAIL --email      [required]                               │\n│ *  USER.PASSWORD      [required]                               │\n│      --user.password                                           │\n╰────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cyclopts CLI Argument Parsing in Console\nDESCRIPTION: This console snippet demonstrates the behavior of a Cyclopts CLI application with various arguments. Unlike Fire, Cyclopts does not convert input types and treats all inputs as strings, confirmed by the printed output of argument value and its string type despite inputs like numbers or booleans. This shows Cyclopts' design choice favoring explicit string parameters to avoid implicit type conversions.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_fire/README.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo\nname='foo' type(name)=<class 'str'>\n\n$ my-script 100\nname='100' type(name)=<class 'str'>\n\n$ my-script true\nname='true' type(name)=<class 'str'>\n\n$ my-script True\nname='True' type(name)=<class 'str'>\n```\n\n----------------------------------------\n\nTITLE: Disabling Dataclass Subkeys in Cyclopts Parameters (Console Output)\nDESCRIPTION: This console output demonstrates the behavior when `Parameter(accepts_keys=False)` is used. The `--help` message shows a single `--user` parameter instead of individual field parameters. Command execution examples show that the program now expects positional arguments corresponding to the required dataclass fields ('Bob Smith' for `name`, 27 for `age`). An error occurs if the correct number of positional arguments isn't provided. The default value for `region` cannot be overridden via the CLI in this configuration.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/rules.rst#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ─────────────────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                                      │\n│ --version  Display application version.                                        │\n╰────────────────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ───────────────────────────────────────────────────────────────────╮\n│ *  USER --user  [required]                                                     │\n╰────────────────────────────────────────────────────────────────────────────────╯\n\n$ my-program 'Bob Smith' 27\nUser(name='Bob Smith', age=27, region='us')\n\n$ my-program 'Bob Smith'\n╭─ Error ────────────────────────────────────────────────────────────────────────╮\n│ Parameter \"--user\" requires 2 arguments. Only got 1.                           │\n╰────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Parsing CLI Arguments with Cyclopts Library in Python\nDESCRIPTION: This snippet shows how to define a CLI using the Cyclopts library, which explicitly treats all command line arguments as strings regardless of type hints or input content. Cyclopts requires setting up an app object and decorating a default function, which receives CLI parameters as strings. The example prints the 'name' argument and its type, demonstrating that input values remain strings, providing less automatic typing control than Fire. Dependencies include the 'cyclopts' package and Python runtime.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_fire/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\n\napp = cyclopts.App()\n\n\n@app.default\ndef hello(name: str = \"World\"):\n    print(f\"{name=} {type(name)=}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting Version String in Cyclopts App (Python)\nDESCRIPTION: Shows how to explicitly define the application's version by passing a string literal to the `version` parameter during the initialization of the `cyclopts.App` object. This method takes precedence over automatic detection.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/version.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App(version=\"7.5.8\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Excluding Hidden Command - Cyclopts App Help - Help Output\nDESCRIPTION: This output shows the help screen generated by running the script from the 'Hiding Command from Help' example with '--help'. The command 'bar', registered with 'show=False', is correctly excluded from the list of available commands displayed to the user.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ my-script --help\nUsage: scratch.py COMMAND\n\n╭─ Commands ─────────────────────────────────────────────────╮\n│ foo                                                        │\n│ --help -h  Display this message and exit.                  │\n│ --version  Display application version.                    │\n╰────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Typer Multiple Command Behavior (Expected)\nDESCRIPTION: Shows the expected Typer behavior when multiple commands are registered. In this scenario, the command name *is* required in the CLI call. The snippet demonstrates calling a hypothetical Typer app with multiple commands, specifically invoking 'foo' and 'bar' by name.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/default_command/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntyper_app=...\n@typer_app.command()...\ndef foo(): ...\n@typer_app.command()...\ndef bar(): ...\n\ntyper_app([\"foo\"], standalone_mode=False)\n# FOO\ntyper_app([\"bar\"], standalone_mode=False)\n# BAR\n```\n\n----------------------------------------\n\nTITLE: Configuring setuptools entry point for CLI script\nDESCRIPTION: Specifies how to define a console script entry point in setup.py using setuptools, mapping the command 'my-package' to the main function in mypackage.__main__.py. This allows the application to be invoked directly from the terminal as 'my-package'.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/packaging.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# setup.py\n\nfrom setuptools import setup\n\nsetup(\n    # Other fields omitted for brevity\n    entry_points={\n        \"console_scripts\": [\n            \"my-package = mypackage.__main__:main\",\n        ]\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Help via Meta App Default Docstring (Python)\nDESCRIPTION: Demonstrates using the `app.meta.default` decorator to define a default command whose docstring can serve as the application's help text, following the standard resolution order but specifically for the meta application.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp = cyclopts.App()\n\n\n@app.meta.default\ndef bar():\n    \"\"\"This is the primary application docstring.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the Same Command with Cyclopts' Improved Help Display\nDESCRIPTION: This snippet demonstrates how Cyclopts addresses the issue by not showing a default value for required parameters. It implements the same compress command as the Typer example but with cleaner help output.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/help_defaults/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.default()\ndef compress(\n    src: Annotated[Path, cyclopts.Parameter(help=\"File to compress.\")],\n    dst: Annotated[Path, cyclopts.Parameter(help=\"Path to save compressed data to.\")] = Path(\"out.zip\"),\n):\n    print(f\"Compressing data from {src} to {dst}\")\n\ncyclopts_app([\"--help\"])\n```\n\n----------------------------------------\n\nTITLE: Implicit Version Detection via `__version__` in Cyclopts (Python)\nDESCRIPTION: Demonstrates how Cyclopts can automatically detect the application's version if it's defined in the standard `__version__` attribute within the package's `__init__.py`, following PEP 8 guidelines. Cyclopts finds this by traversing the call stack to identify the invoking package.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/version.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# mypackage/__init__.py\n__version__ = \"7.5.8\"\n```\n\nLANGUAGE: python\nCODE:\n```\n# mypackage/__main__.py\n# ``App`` will use ``mypackage.__version__``.\nimport cyclopts\n\napp = cyclopts.App()\n```\n\n----------------------------------------\n\nTITLE: Basic __main__.py setup for Cyclopts CLI application in Python\nDESCRIPTION: A minimal Python script in __main__.py that creates a Cyclopts application instance, defines a command, and runs the app if executed as the main program. It demonstrates how to structure CLI commands and execute the application via 'python -m mypackage'.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/packaging.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# mypackage/__main__.py\n\nimport cyclopts\n\napp = cyclopts.App()\n\n@app.command\ndef foo(name: str):\n    print(f\"Hello {name}!\")\n\n\ndef main():\n    app()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Registering and Calling Cyclopts Command (Expected Single Command)\nDESCRIPTION: Demonstrates Cyclopts' approach to command registration using `@app.command`. Unlike Typer, Cyclopts requires the command name in the CLI call even when only one command is registered, providing a consistent interface from the start.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/default_command/README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.command\ndef foo():\n    print(\"FOO\")\n\ncyclopts_app([\"foo\"])\n# FOO\n```\n\n----------------------------------------\n\nTITLE: Executing Hidden Command - Cyclopts App - Console Output\nDESCRIPTION: This console output demonstrates that a command hidden from the help screen using 'show=False' is still fully executable from the command line. Running 'my-script bar' successfully invokes the 'bar' function and prints its output.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ my-script bar\nRunning bar.\n```\n\n----------------------------------------\n\nTITLE: Help Output After Overriding Default Parameter (Console)\nDESCRIPTION: Displays the command-line help output after overriding the global default negative flag setting for a specific parameter. The output now shows both the positive (`--flag`) and the explicitly defined negative (`--anti-flag`) options for the parameter.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/default_parameter.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo --help\nUsage: my-script foo [ARGS] [OPTIONS]\n\n╭─ Parameters ──────────────────────────────────────────────────╮\n│ *  --flag --anti-flag  [required]                             │\n╰───────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Typer Annotated Parameter in Python\nDESCRIPTION: This Python code snippet demonstrates how to annotate a parameter with Typer to provide help text. This is necessary because Typer does not automatically parse docstrings. It utilizes the `Annotated` and `Argument` features of Typer to define `bar`'s help text explicitly.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/docstring/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@typer_app.command()\ndef foo(bar: Annotated[str, Argument(help=\"Bar parameter docstring.\")]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Unit Test Fixture for Mocking Package Availability Checks\nDESCRIPTION: Defines a pytest fixture to mock the '_check_pypi_name_available' function, allowing tests to control its return value and verify call arguments, facilitating isolated unit testing of CLI logic.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# test.py\nimport pytest\nfrom pypi_checker import app\n\n@pytest.fixture\ndef mock_check_pypi_name_available(mocker):\n    return mocker.patch(\"pypi_checker._check_pypi_name_available\")\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function with Variable Arguments\nDESCRIPTION: Demonstrates the standard Python syntax for defining a function that accepts a fixed required argument, followed by a variable number of positional arguments (`*args`), and a variable number of keyword arguments (`**kwargs`). The names `args` and `kwargs` are conventional.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/args_and_kwargs.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(normal_required_variable, *args, **kwargs):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-App Help via Default Command Docstring (Python)\nDESCRIPTION: Illustrates accessing a sub-application (registered as 'foo') like a dictionary and setting its help text via the docstring of its default command handler (`foo_handler`).\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/help.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app[\"foo\"].default  # You can access sub-apps like a dictionary.\ndef foo_handler():\n    \"\"\"This will be shown for the \"foo\" command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: CLI Output from Cyclopts Implementation\nDESCRIPTION: Shows the command-line help output generated by the Cyclopts implementation. The output displays the subcommands available under the 'ec2' command with a more visually structured format using box-drawing characters.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/subcommands/README.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py ec2 --help\n╭─ Commands ───────────────────────────────────────────────────────────╮\n│ start-instances  start instances.                                    │\n│ stop-instances   stop instances.                                     │\n╰──────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Installing Cyclopts Package via PyPI with Bash\nDESCRIPTION: This snippet shows the command to install the Cyclopts Python package from PyPI using pip. It requires Python 3.9 or newer and pip to be properly configured in the environment.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/Installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install cyclopts\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Name Transform (Python)\nDESCRIPTION: Demonstrates setting a custom name transformation function for specific parameters using `Parameter(name_transform=...)`. Shows a simple transform function that converts the python variable name to uppercase for the command-line parameter name.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/parameters.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App, Parameter\nfrom typing import Annotated\n\napp = App()\n\ndef name_transform(s: str) -> str:\n    return s.upper()\n\n@app.default\ndef main(\n    *,\n    foo: Annotated[str, Parameter(name_transform=name_transform)],\n    bar: Annotated[str, Parameter(name_transform=name_transform)],\n):\n    pass\n\napp()\n```\n\nLANGUAGE: console\nCODE:\n```\n$ my-script --help\nUsage: main COMMAND [OPTIONS]\n\n╭─ Commands ──────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.               │\n│ --version  Display application version.                 │\n╰─────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────╮\n│ *  --FOO  [required]                                    │\n│ *  --BAR  [required]                                    │\n╰─────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Help String - Cyclopts App Help - Help Output\nDESCRIPTION: This output shows the result of running the script from the previous example with the '--help' flag. It displays the custom help string 'This is my help string.' set during application initialization, demonstrating its effect on the help screen.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ my-script --help\nUsage: scratch.py COMMAND\n\nThis is my help string.\n\n╭─ Commands ────────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                             │\n│ --version  Display application version.                               │\n╰───────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Application with Docstring in Python\nDESCRIPTION: This Python code showcases Cyclopts, a library for building CLIs that handles docstring parsing. It defines a command `foo` with the same docstring and parameter `bar` as the previous example. Cyclopts, unlike Typer, automatically parses the docstring to display command and parameter help information correctly.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/docstring/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\n\ncyclopts_app = cyclopts.App()\n\n@cyclopts_app.command()\ndef foo(bar):\n    \"\"\"Foo Docstring.\n\n    Parameters\n    ----------\n    bar: str\n        Bar parameter docstring.\n    \"\"\"\n\ncyclopts_app()\n```\n\n----------------------------------------\n\nTITLE: CLI Output from Arguably Implementation\nDESCRIPTION: Shows the command-line help output generated by the Arguably implementation. The output displays the subcommands available under the 'ec2' command, including 'start-instances' and 'stop-instances' with their descriptions.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/subcommands/README.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py ec2 --help\npositional arguments:\n   command\n     start-instances  start instances.\n     stop-instances   stop instances.\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Flag with Typer - Python\nDESCRIPTION: This snippet demonstrates how to implement a version flag in a Typer CLI application. It defines a callback function (`version_callback`) that prints the version and exits the program when the `--version` flag is provided. The `@typer_app.callback()` decorator is used to define a common behavior for the CLI application.  Dependencies include the `typer` library. The output will be the version string '1.2.3' when the `--version` flag is used.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/version_flag/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing import Annotated\n\ntyper_app = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        print(\"1.2.3\")\n        raise typer.Exit()\n\n@typer_app.callback()\ndef common(\n    version: Annotated[\n        bool,\n        typer.Option(\n            \"--version\",\n            callback=version_callback,\n            help=\"Print version.\",\n        ),\n    ] = False,\n):\n    print(\"Callback body executed.\")\n\nprint(\"Typer:\")\ntyper_app([\"--version\"])\n# 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Help Output After Disabling Negative Flags (Console)\nDESCRIPTION: Shows the command-line help output for a command after globally disabling negative flags via `App.default_parameter`. Note the absence of a `--no-flag` option for the boolean `--flag` parameter.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/default_parameter.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ my-script foo --help\nUsage: my-script foo [ARGS] [OPTIONS]\n\n╭─ Parameters ──────────────────────────────────────────────────╮\n│ *  --flag  [required]                                         │\n╰───────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Cyclopts default_name_transform Function\nDESCRIPTION: Documentation placeholder for the cyclopts.default_name_transform function, which likely transforms CLI argument names into Pythonic variable names. Specific implementation details are not provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_31\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: cyclopts.default_name_transform\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Cyclopts Script\nDESCRIPTION: This snippet shows how to execute the Python script created in the previous snippet from the command line. It passes an integer as an argument to the foo function.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python start.py 3\nLooping! 0\nLooping! 1\nLooping! 2\n```\n\n----------------------------------------\n\nTITLE: Cyclopts UNSET Special Value\nDESCRIPTION: Documentation placeholder for the cyclopts.UNSET singleton, used to indicate an unset or undefined value within the framework. It is useful for distinguishing between explicitly set values and defaults.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_30\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: cyclopts.UNSET\n```\n\n----------------------------------------\n\nTITLE: Cyclopts env_var_split Function\nDESCRIPTION: Documentation placeholder for the cyclopts.env_var_split function, which probably splits environment variable strings into components. Specific implementation details are not provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_32\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: cyclopts.env_var_split\n```\n\n----------------------------------------\n\nTITLE: Creating a Typer Command with Argument and Option Defaults (Python)\nDESCRIPTION: This snippet demonstrates defining a Typer application with a command where function parameters use Typer's Argument and Option classes as their default values for command-line parsing. It initializes a Typer app and decorates a function that utilizes Argument for a required positional CLI argument, and Option for an optional CLI argument with a default value of 2. Typer must be installed; typically used in CLI application development. Limitations include reduced introspection of real defaults and parameter roles due to the proxy default usage.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/argument_vs_option/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = typer.Typer()\n\n@app.command()\ndef foo(a=Argument(), b=Option(default=2)):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Optional List Argument with Default in Typer Using Python\nDESCRIPTION: This snippet demonstrates how Typer handles optional list parameters in Python CLI commands. The function \"foo\" expects an optional list of integers \"favorite_numbers\" defaulting to None. When the argument is None, a default list [1, 2, 3] is assigned and printed. The snippet highlights that Typer supplies an empty list instead of None when the CLI argument is omitted, potentially causing unexpected behavior. Dependencies include the Typer library and Python's typing.Optional for type hinting. Inputs are command-line arguments that may include multiple \"--favorite-numbers\" flags. The output is a print statement showing the actual list used. This illustrates mutable default issues and the limitation that Typer passes empty lists instead of None.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/optional_list/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo(favorite_numbers: Optional[list[int]] = None):\n    if favorite_numbers is None:\n        favorite_numbers = [1, 2, 3]\n    print(f\"My favorite numbers are: {favorite_numbers}\")\n\ntyper_app([\"--favorite-numbers\", \"100\", \"--favorite-numbers\", \"200\"], standalone_mode=False)\n# My favorite numbers are: [100, 200]\ntyper_app([], standalone_mode=False)\n# My favorite numbers are: []\n```\n\n----------------------------------------\n\nTITLE: Documentation of CLI Help and Usage Output\nDESCRIPTION: Displays help message and usage pattern for the CLI application using a console script output example, helping users understand available commands and options.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n$ python pypi_checker.py --help\nUsage: pypi_checker COMMAND [ARGS] [OPTIONS]\n\nCheck if a package name is available on PyPI.\n\nExit code 0 on success; non-zero otherwise.\n\n╭─ Commands ────────────────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                                     │\n│ --version  Display application version.                                       │\n╰───────────────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ──────────────────────────────────────────────────────────────────╮\n│ *  NAME --name           Name of the package to check. [required]             │\n│    --silent --no-silent  Do not print anything to stdout. [default: False]    │\n╰───────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Basic Typer Validation Example\nDESCRIPTION: Demonstrates how Typer handles validation with built-in parameters in the Argument constructor. This example shows age validation with a minimum value constraint.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/validation/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo(age: Annotated[int, typer.Argument(min=0)]):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Typer's Default Value Display for Required Arguments\nDESCRIPTION: This example shows how Typer displays default values as 'None [required]' for required arguments, which can be confusing for users. The snippet defines a compress command with two Path arguments and displays the help output.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/help_defaults/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef compress(\n    src: Annotated[Path, typer.Argument(help=\"File to compress.\")],\n    dst: Annotated[Path, typer.Argument(help=\"Path to save compressed data to.\")] = Path(\"out.zip\"),\n):\n    print(f\"Compressing data from {src} to {dst}\")\n\nprint(\"Typer positional:\")\ntyper_app([\"--help\"], standalone_mode=False)\n```\n\n----------------------------------------\n\nTITLE: Typer Disabling Flag Negation\nDESCRIPTION: This example demonstrates how overriding the option's name with `Annotated` disables Typer's default negative-flag generation logic. The code imports `typer` and `Annotated` from `typing`, and defines a Typer app and a command. The `my_flag` parameter is defined using `Annotated[bool, Option(\"--my-flag\")]`, which prevents Typer from generating the `--no-my-flag` option. Trying to use `--no-my-flag` raises a `NoSuchOption` error.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/flag_negation/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing import Annotated\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo(my_flag: Annotated[bool, typer.Option(\"--my-flag\")] = False):\n    print(f\"{my_flag=}\")\n\ntyper_app([\"--my-flag\"], standalone_mode=False)\n# my_flag=True\ntyper_app([\"--no-my-flag\"], standalone_mode=False)\n# NoSuchOption: No such option: --no-my-flag\n```\n\n----------------------------------------\n\nTITLE: Initializing Typer CLI Application with Positional Arguments - Python\nDESCRIPTION: This code initializes a Typer-based CLI application with a `mv` command that receives `src` and `dst` as positional arguments. Required dependency: Typer library. The function prints the intended file move operation and successfully runs when arguments are provided in positional order, but does not support keyword arguments. Inputs must be given as positional arguments; returns output via print statement. Limitation: does not allow keyword options for positional parameters.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/positional_or_keyword/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef mv(src, dst):\n    print(f\"Moving {src} -> {dst}\")\n\ntyper_app([\"foo\", \"bar\"], standalone_mode=False)\n# Moving foo -> bar\n```\n\n----------------------------------------\n\nTITLE: Registering Nested App Subcommand - Cyclopts - Python\nDESCRIPTION: This snippet demonstrates how to register a nested subcommand application using the 'name' attribute. It shows creating a main app, adding a sub-app with a specific name, and then registering a command function onto the nested sub-app using dictionary-like access.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\napp.command(App(name=\"foo\"))\n\n@app[\"foo\"].command\ndef bar():\n    print(\"Running bar.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Implementing Typer Callback Workaround for Single Command\nDESCRIPTION: Presents a common workaround in Typer to force single-command apps to behave like multi-command apps, requiring the command name in the CLI. This is achieved by registering a dummy callback function, which causes Typer to enter its multi-command parsing mode.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/default_command/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.callback()\ndef dummy_to_force_subcommand() -> None:\n    \"\"\"\n    This function exists because Typer won't let you force a single subcommand.\n    Since we know we will add other subcommands in the future and don't want to\n    break the interface, we have to use this workaround.\n\n    Delete this when a second subcommand is added.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Hiding Command from Help - Cyclopts App - Python\nDESCRIPTION: This Python snippet shows how to hide a command ('bar') from appearing on the help screen while still keeping it executable. This is achieved by setting the 'show=False' parameter when registering the command using the '@app.command' decorator.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\napp = App()\n\n@app.command\ndef foo():\n   print(\"Running foo.\")\n\n@app.command(show=False)\ndef bar():\n   print(\"Running bar.\")\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Main Script Importing an Arguably Library in Python\nDESCRIPTION: A script that imports both Arguably and a library that uses Arguably. This demonstrates how commands from both files get combined into a single CLI application due to Arguably's global state.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/global_state/README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport arguably\nimport library_using_arguably\n\n\n@arguably.command\ndef my_function(name):\n    print(f\"{name=}\")\n\n\nif __name__ == \"__main__\":\n    arguably.run()\n```\n\n----------------------------------------\n\nTITLE: Testing System Exit Codes with Mocked Functions\nDESCRIPTION: Demonstrates testing of the CLI application's exit codes by mocking the availability check to simulate a package being unavailable, capturing SystemExit exception, and asserting the non-zero exit code. Uses pytest and mock fixtures.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef test_unavailable_name(mock_check_pypi_name_available):\n    mock_check_pypi_name_available.return_value = False\n    with pytest.raises(SystemExit) as e:\n        app(\"foo\")  # Invoke our app, passing in package-name \"foo\"\n    mock_check_pypi_name_available.assert_called_once_with(\"foo\")  # assert that our mock was called.\n    assert e.value.code != 0  # assert the exit code is non-zero (i.e. not successful)\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Application with Literal and Union\nDESCRIPTION: This snippet presents a Cyclopts application with advanced type hinting using `Literal` and `Union`. It defines a `deploy` command with arguments for environment and replicas. The replicas argument can be either an integer or one of the literal values 'default' or 'performance'.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport cyclopts\nfrom typing import Literal\n\napp = cyclopts.App()\n\n@app.command\ndef deploy(\n    env: Literal[\"dev\", \"staging\", \"prod\"],\n    replicas: int | Literal[\"default\", \"performance\"] = \"default\",\n):\n    \"\"\"Deploy code to an environment.\n\n    Parameters\n    ----------\n    env\n        Environment to deploy to.\n    replicas\n        Number of workers to spin up.\n    \"\"\"\n    if replicas == \"default\":\n        replicas = 10\n    elif replicas == \"performance\":\n        replicas = 20\n\n    print(f\"Deploying to {env} with {replicas} replicas.\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Console Output Example for Key Handling\nDESCRIPTION: This snippet provides an example of how the command-line interface interacts with the defined `Image` class. It demonstrates how to set parameters `image.path` and `image.label` using command-line arguments. Shows both key-value pair and positional parameter passing.  The output displays the image object and its attributes.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ my-program --help\nUsage: main COMMAND [ARGS] [OPTIONS]\n\n╭─ Commands ──────────────────────────────────────────────────────────╮\n│ --help -h  Display this message and exit.                           │\n│ --version  Display application version.                             │\n╰─────────────────────────────────────────────────────────────────────╯\n╭─ Parameters ────────────────────────────────────────────────────────╮\n│ *  IMAGE.PATH --image.path    [required]                            │\n│ *  IMAGE.LABEL --image.label  [required]                            │\n╰─────────────────────────────────────────────────────────────────────╯\n\n$ my-program foo.jpg nature\nimage=Image(path='foo.jpg', label='nature')\n\n$ my-program --image.path foo.jpg --image.label nature\nimage=Image(path='foo.jpg', label='nature')\n```\n\n----------------------------------------\n\nTITLE: Initializing Typer App with Command Decorator (Python)\nDESCRIPTION: Demonstrates initializing a Typer application and attempting to register a command function without parentheses on the @command decorator, which is not allowed in Typer. Requires the 'typer' library. The 'foo' function is defined as a command, but missing parentheses prevent the decorator from working correctly.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/decorator_parentheses/README.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n# This doesn't work! Missing ()\n@typer_app.command\ndef foo():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Typer Single Command Behavior (Unexpected)\nDESCRIPTION: Illustrates Typer's design quirk where a single registered command does not expect its name in the CLI call. Shows a basic Typer app with one command 'foo' and demonstrates how calling it without the command name works, while calling with the command name raises an exception.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_typer/default_command/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ntyper_app = typer.Typer()\n\n@typer_app.command()\ndef foo():\n    print(\"FOO\")\n\ntyper_app([], standalone_mode=False)\n# FOO\ntyper_app([\"foo\"], standalone_mode=False)\n# raises exception: Got unexpected extra argument (foo)\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Token Class Attributes and Documentation\nDESCRIPTION: Provides detailed documentation of the cyclopts.Token class, describing each attribute used to represent parsed CLI tokens, including keyword, value, source, index, keys, and implicit_value. These attributes facilitate the interpretation and validation of CLI inputs, handling both positional and keyword arguments, as well as source tracing for error messages.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_26\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: cyclopts.Token\n\n   .. attribute:: keyword\n      :type: Optional[str]\n      :value: None\n\n      **Unadulterated** user-supplied keyword like ``--foo`` or ``--foo.bar.baz``; ``None`` when token was pared positionally.\n      Could also be something like ``tool.project.foo`` if from non-cli sources.\n\n   .. attribute:: value\n      :type: str\n      :value: \"\"\n\n      The parsed token value (unadulterated).\n\n   .. attribute:: source\n      :type: str\n      :value: \"\"\n\n      Where the token came from; used for error message purposes.\n      Cyclopts uses the string ``cli`` for cli-parsed tokens.\n\n   .. attribute:: index\n      :type: int\n      :value: 0\n\n      The relative positional index in which the value was provided.\n\n   .. attribute:: keys\n      :type: tuple[str, ...]\n      :value: ()\n\n      The additional parsed **python** variable keys from :attr:`keyword`.\n      Only used for Arguments that take arbitrary keys.\n\n   .. attribute:: implicit_value\n      :type: Any\n      :value: cyclopts.UNSET\n\n      Final value that should be used instead of converting from :attr:`value`.\n      Commonly used for boolean flags.\n      Ignored if :obj:`~.UNSET`.\n```\n\n----------------------------------------\n\nTITLE: Help Output Showing Combined Commands in Console\nDESCRIPTION: Console output showing how commands from both the main script and the imported library are combined in the help display, demonstrating the issue with Arguably's global state approach.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/vs_arguably/global_state/README.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python my-script.py --help\nusage: my-script.py [-h] command ...\n\npositional arguments:\n  command\n    some-library-function\n    my-function\n\noptions:\n  -h, --help               show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Cyclopts Class: FieldInfo\nDESCRIPTION: Documentation placeholder for the cyclopts.field_info.FieldInfo class, which likely contains metadata about argument fields such as default values, validation rules, and descriptions. Specific details are not provided in the snippet.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_27\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: cyclopts.field_info.FieldInfo\n```\n\n----------------------------------------\n\nTITLE: PyPI Package Availability Checker Function\nDESCRIPTION: Defines a function to check if a Python package name is available on PyPI by making an HTTP request. Returns True if the package does not exist (status 404), otherwise False. Requires urllib.error and urllib.request modules.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/unit_testing.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef _check_pypi_name_available(name):\n    try:\n        urllib.request.urlopen(f\"https://pypi.org/pypi/{name}/json\")\n    except urllib.error.HTTPError as e:\n        if e.code == 404:\n            return True  # Package does not exist (name is available)\n    return False  # Package exists (name is not available)\n```\n\n----------------------------------------\n\nTITLE: Implementing Default App Functionality with Cyclopts\nDESCRIPTION: This snippet defines a basic Cyclopts application with a default function that attempts to concatenate a string and an integer, which results in a TypeError. It uses the `cyclopts` library to create an application and defines a main function that takes a string argument.  The script is designed to be run from the command line and is intended to demonstrate a standard Python traceback.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/cookbook/rich_formatted_exceptions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cyclopts import App\n\napp = App()\n\n@app.default\ndef main(name: str):\n    print(name + 3)\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Cyclopts ArgumentCollection Class\nDESCRIPTION: Documentation placeholder for the cyclopts.ArgumentCollection class, which manages a collection of Argument instances. It provides methods for grouping, organizing, and processing multiple CLI arguments collectively. Specific details are not provided in the snippet.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_29\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: cyclopts.ArgumentCollection\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Cyclopts edit Function\nDESCRIPTION: Documentation placeholder for the cyclopts.edit function, potentially related to editing configuration or arguments. Specific details are not provided.\nSOURCE: https://github.com/brianpugh/cyclopts/blob/main/docs/source/api.rst#_snippet_33\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: cyclopts.edit\n```"
  }
]