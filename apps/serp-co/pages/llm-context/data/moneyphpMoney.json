[
  {
    "owner": "moneyphp",
    "repo": "money",
    "content": "TITLE: Using Money PHP Library for Basic Operations in PHP\nDESCRIPTION: This PHP snippet showcases creating `Money` objects using the static factory method `Money::EUR(amount_in_cents)`, performing arithmetic operations like `add()`, and distributing a monetary value using the `allocate()` method. It uses assertions to verify the results of the allocation. Requires the `moneyphp/money` library and the `Money\\Money` class import.\nSOURCE: https://github.com/moneyphp/money/blob/master/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Money\\Money;\n\n$fiveEur = Money::EUR(500);\n$tenEur = $fiveEur->add($fiveEur);\n\nlist($part1, $part2, $part3) = $tenEur->allocate([1, 1, 1]);\nassert($part1->equals(Money::EUR(334)));\nassert($part2->equals(Money::EUR(333)));\nassert($part3->equals(Money::EUR(333)));\n```\n\n----------------------------------------\n\nTITLE: Instantiating Money Objects in PHP\nDESCRIPTION: Demonstrates how to create Money objects to represent currency amounts, using both the standard constructor and shorthand static methods. All amounts are represented in the smallest unit (e.g., cents).\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/getting-started.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currency;\nuse Money\\Money;\n\n$fiver = new Money(500, new Currency('USD'));\n// or shorter:\n$fiver = Money::USD(500);\n```\n\n----------------------------------------\n\nTITLE: Allocating Money to N Targets in PHP using MoneyPHP\nDESCRIPTION: This snippet demonstrates allocating a money amount to a fixed number of targets using the `allocateTo()` method of the MoneyPHP library. It uses a money object and an integer value representing the number of targets. The output is an array containing the money allocated to each of the targets. The library handles the rounding to ensure the amounts are as close to equal as possible across all targets. The input amount is divided among the specified number of targets with any remainder being handled by the library.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/allocation.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = Money::EUR(800);           // €8.00\n\n$result = $value->allocateTo(3);    // $result = [€2.67, €2.67, €2.66]\n```\n\n----------------------------------------\n\nTITLE: Fixed Exchange Rate Conversion in PHP\nDESCRIPTION: This snippet demonstrates currency conversion using a fixed exchange rate. It sets up a FixedExchange with a defined EUR to USD rate, then uses a Converter to convert a Money object from EUR to USD.  Requires the MoneyPHP library and specific classes from it. The output is a Money object representing the converted amount.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Converter;\nuse Money\\Currency;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Exchange\\FixedExchange;\n\n$exchange = new FixedExchange([\n    'EUR' => [\n        'USD' => '1.25'\n    ]\n]);\n\n$converter = new Converter(new ISOCurrencies(), $exchange);\n\n$eur100 = Money::EUR(100);\n$usd125 = $converter->convert($eur100, new Currency('USD'));\n```\n\n----------------------------------------\n\nTITLE: Adding Money objects in PHP with MoneyPHP\nDESCRIPTION: Demonstrates how to add two or more Money objects using the add() method, which supports variadic arguments. Money objects represent monetary values with a currency and an amount in minor units (e.g., cents). The addition operation returns a new Money instance reflecting the sum, preserving immutability.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::EUR(800);       // €8.00\n$value2 = Money::EUR(500);       // €5.00\n\n$result = $value1->add($value2); // €13.00\n```\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::EUR(800);                // €8.00\n$value2 = Money::EUR(500);                // €5.00\n$value3 = Money::EUR(600);                // €6.00\n\n$result = $value1->add($value2, $value3); // €19.00\n```\n\n----------------------------------------\n\nTITLE: Dividing Money objects in PHP with MoneyPHP\nDESCRIPTION: Demonstrates the divide() method which divides a Money object's amount by a specified integer divisor, returning a new Money instance for the quotient. The operation is immutable and requires the divisor parameter; division by zero should be avoided.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$value = Money::EUR(800);       // €8.00\n\n$result = $value->divide(2);    // €4.00\n```\n\n----------------------------------------\n\nTITLE: Multiplying Money objects in PHP with MoneyPHP\nDESCRIPTION: Shows the use of multiply() to scale a Money object by a scalar integer factor. The method returns a new Money instance representing the product, preserving immutability. Requires the Money object and a multiplication factor as input with output as the multiplied Money object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = Money::EUR(800);       // €8.00\n\n$result = $value->multiply(2);  // €16.00\n```\n\n----------------------------------------\n\nTITLE: Subtracting Money objects in PHP with MoneyPHP\nDESCRIPTION: Illustrates subtracting one or multiple Money objects from another using the subtract() method, supporting variadic arguments. Each operation returns a new Money instance representing the difference, enforcing immutability rules.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::EUR(800);            // €8.00\n$value2 = Money::EUR(500);            // €5.00\n\n$result = $value1->subtract($value2); // €3.00\n```\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::EUR(1400);                    // €14.00\n$value2 = Money::EUR(500);                     // €5.00\n$value3 = Money::EUR(600);                     // €6.00\n\n$result = $value1->subtract($value2, $value3); // €3.00\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with IntlMoneyFormatter in PHP\nDESCRIPTION: Demonstrates how to use the `IntlMoneyFormatter` to format a `Money` object into a localized currency string. This requires the PHP `intl` extension and a configured `NumberFormatter` instance, along with a `Currencies` implementation like `ISOCurrencies` to handle currency subunits.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/formatting.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Currency;\nuse Money\\Formatter\\IntlMoneyFormatter;\nuse Money\\Money;\n\n$money = new Money(100, new Currency('USD'));\n$currencies = new ISOCurrencies();\n\n$numberFormatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$moneyFormatter = new IntlMoneyFormatter($numberFormatter, $currencies);\n\necho $moneyFormatter->format($money); // outputs $1.00\n```\n\n----------------------------------------\n\nTITLE: Checking Value and Currency Equality with equals() in PHP\nDESCRIPTION: Shows how to use the `equals()` method to determine if two `Money` objects are identical in both amount and currency. It returns `true` if both value and currency match, and `false` otherwise.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(800);              // $8.00\n$value2 = Money::USD(800);              // $8.00\n$value3 = Money::EUR(800);              // €8.00\n\n$result = $value1->equals($value2);     // true\n$result = $value1->equals($value3);     // false\n```\n\n----------------------------------------\n\nTITLE: Comparing Relative Values with compare() in PHP\nDESCRIPTION: Explains the `compare()` method, which compares two `Money` objects of the *same* currency. It returns -1 if the first object is less than the second, 0 if they are equal, and 1 if the first is greater. Throws an `InvalidArgumentException` if the currencies differ.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(200);                  // $2.00\n$value2 = Money::USD(400);                  // $4.00\n$value3 = Money::USD(400);                  // $4.00\n\n$result = $value1->compare($value2);        // -1, less than\n$result = $value2->compare($value3);        // 0, equals to\n$result = $value2->compare($value1);        // 1, more than\n\n// Both Money objects must have the same currency, otherwise\n// an InvalidArgumentException will be thrown:\n$value4 = Money::EUR(100);\n$result = $value1->compare($value4);        // throws InvalidArgumentException\n```\n\n----------------------------------------\n\nTITLE: Serializing Money Objects to JSON in PHP\nDESCRIPTION: Demonstrates how to serialize a `Money\\Money` object into a JSON string using PHP's built-in `json_encode` function. The `Money` object implements `JsonSerializable`, resulting in a JSON object containing the 'amount' (as a string) and 'currency' code.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/concept.rst#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Money;\n\n$money = Money::USD(350);\n$json = json_encode($money);\necho $json; // outputs '{\"amount\":\"350\",\"currency\":\"USD\"}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Money Objects using Money::sum() in PHP\nDESCRIPTION: Creates a set of Money objects with various values, including negatives, and computes their total sum with Money::sum(). Inputs are Money objects; output is a Money object representing their combined total, useful for aggregation and financial calculations.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/aggregation.rst#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$first = Money::EUR(100);                  // €1.00\n$second = Money::EUR(-200);                // -€2.00\n$third = Money::EUR(300);                  // €3.00\n\n$sum = Money::sum($first, $second, $third) // €2.00\n```\n\n----------------------------------------\n\nTITLE: Checking if a Value is Greater Than or Equal with greaterThanOrEqual() in PHP\nDESCRIPTION: Shows how to use `greaterThanOrEqual()` to check if one `Money` object's amount is greater than or equal to another's. Requires both objects to have the same currency. Returns `true` if the condition is met, `false` otherwise.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(800);                          // $8.00\n$value2 = Money::USD(800);                          // $8.00\n\n$result = $value1->greaterThanOrEqual($value2);     // true\n```\n\n----------------------------------------\n\nTITLE: Checking if a Value is Less Than Another with lessThan() in PHP\nDESCRIPTION: Illustrates the `lessThan()` method for determining if one `Money` object's amount is strictly less than another's. Both objects must share the same currency. Returns `true` if the first amount is smaller, `false` otherwise.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(800);              // $8.00\n$value2 = Money::USD(700);              // $7.00\n\n$result = $value1->lessThan($value2);   // false\n```\n\n----------------------------------------\n\nTITLE: Checking if a Value is Less Than or Equal with lessThanOrEqual() in PHP\nDESCRIPTION: Demonstrates using `lessThanOrEqual()` to check if one `Money` object's amount is less than or equal to another's. Requires matching currencies for both objects. Returns `true` if the condition holds, `false` otherwise.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(800);                      // $8.00\n$value2 = Money::USD(800);                      // $8.00\n\n$result = $value1->lessThanOrEqual($value2);    // true\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum of Money Objects using Money::max() in PHP\nDESCRIPTION: Creates multiple Money instances and applies Money::max() to find the largest value among them. Dependencies include the Money class and currency-specific constructors. Inputs are Money instances; output is a Money object of the maximum value.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/aggregation.rst#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$first = Money::EUR(100);                  // €1.00\n$second = Money::EUR(200);                 // €2.00\n$third = Money::EUR(300);                  // €3.00\n\n$max = Money::max($first, $second, $third) // €3.00\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum of Money Objects using Money::min() in PHP\nDESCRIPTION: Defines multiple Money objects and uses the static method Money::min() to determine the smallest value among them. Requires Money class and its currency-specific constructors; inputs are Money instances, output is a Money object representing the minimum value.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/aggregation.rst#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$first = Money::EUR(100);                  // €1.00\n$second = Money::EUR(200);                 // €2.00\n$third = Money::EUR(300);                  // €3.00\n\n$min = Money::min($first, $second, $third) // €1.00\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with DecimalMoneyFormatter in PHP\nDESCRIPTION: Illustrates the use of the `DecimalMoneyFormatter` to obtain a locale-independent, simple decimal string representation of a `Money` object. This requires a `Currencies` implementation like `ISOCurrencies` to determine the correct subunit scaling.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/formatting.rst#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Currency;\nuse Money\\Formatter\\DecimalMoneyFormatter;\nuse Money\\Money;\n\n$money = new Money(100, new Currency('USD'));\n$currencies = new ISOCurrencies();\n\n$moneyFormatter = new DecimalMoneyFormatter($currencies);\n\necho $moneyFormatter->format($money); // outputs 1.00\n```\n\n----------------------------------------\n\nTITLE: Calculating Average of Money Objects using Money::avg() in PHP\nDESCRIPTION: Defines multiple Money objects, including negative and positive values, and calculates their average with Money::avg(). Inputs are Money objects; output is a Money object representing the average value, demonstrating handling of different currency values and signs.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/aggregation.rst#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$first = Money::EUR(100);                  // €1.00\n$second = Money::EUR(-200);                // -€2.00\n$third = Money::EUR(300);                  // €3.00\n\n$avg = Money::avg($first, $second, $third) // €2.00\n```\n\n----------------------------------------\n\nTITLE: Allocating Money by Ratio in PHP using MoneyPHP\nDESCRIPTION: This snippet demonstrates allocating a money amount based on given ratios using the `allocate()` method of the MoneyPHP library.  It shows how the allocation changes depending on the order of ratios due to rounding. It requires the MoneyPHP library. The input is a Money object and an array of ratios. The output is an array containing the allocated amounts. The rounding behavior affects the distribution, so the order of ratios matters for the allocated amounts. Requires the MoneyPHP library to be installed and imported.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/allocation.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Money;\n\n$profit = Money::EUR(5);\nlist($my_cut, $investors_cut) = $profit->allocate([70, 30]);\n// $my_cut is 4 cents, $investors_cut is 1 cent\n\n// The order is important:\nlist($investors_cut, $my_cut) = $profit->allocate([30, 70]);\n// $my_cut is 3 cents, $investors_cut is 2 cents\n```\n\n----------------------------------------\n\nTITLE: Accepted Integer Values for Money Objects in PHP\nDESCRIPTION: Illustrates the types of values that are accepted when instantiating Money objects. Shows examples of valid integer values, string integer values, and cases that will throw InvalidArgumentException.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/getting-started.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currency;\nuse Money\\Money;\n\n// int is accepted\n$fiver = new Money(500, new Currency('USD'));\n\n// string is accepted if integer\n$fiver = new Money('500', new Currency('USD'));\n\n// string is accepted if fractional part is zero\n$fiver = new Money('500.00', new Currency('USD'));\n\n// leading zero's are not accepted\n$fiver = new Money('00500', new Currency('USD'));\n\n// multiple zero's are not accepted\n$fiver = new Money('000', new Currency('USD'));\n```\n\n----------------------------------------\n\nTITLE: Checking Currency Equality with isSameCurrency() in PHP\nDESCRIPTION: Demonstrates using the `isSameCurrency()` method to check if two `Money` objects share the same currency. It returns `true` if the currencies match and `false` otherwise. This method does not compare the amounts.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(800);                      // $8.00\n$value2 = Money::USD(100);                      // $1.00\n$value3 = Money::EUR(800);                      // €8.00\n\n$result = $value1->isSameCurrency($value2);    // true\n$result = $value1->isSameCurrency($value3);    // false\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with IntlLocalizedDecimalFormatter in PHP\nDESCRIPTION: Shows how to use the `IntlLocalizedDecimalFormatter` to get a localized decimal representation of a `Money` object. This formatter relies on PHP's `intl` extension and `NumberFormatter` but excludes the currency symbol, requiring a `Currencies` implementation.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/formatting.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Currency;\nuse Money\\Formatter\\IntlLocalizedDecimalFormatter;\nuse Money\\Money;\n\n$money = new Money(100000, new Currency('EUR'));\n$currencies = new ISOCurrencies();\n\n$numberFormatter = new \\NumberFormatter('nl_NL', \\NumberFormatter::DECIMAL);\n$moneyFormatter = new IntlLocalizedDecimalFormatter($numberFormatter, $currencies);\n\necho $moneyFormatter->format($money); // outputs 1.000,00\n```\n\n----------------------------------------\n\nTITLE: Checking Currency Equality for Multiple Objects with isSameCurrency() in PHP\nDESCRIPTION: Illustrates using `isSameCurrency()` with variadic arguments (using the spread operator `...`) to check if multiple `Money` objects all share the same currency as the target object. It returns `true` only if all provided objects have the same currency as the instance the method is called on.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$target = Money::USD(800);\n$containsEuros = [\n    Money::USD(500),\n    Money::EUR(800)\n];\n$allDollars = [\n    Money::USD(500),\n    Money::USD(600),\n];\n$result = $target->isSameCurrency(...$containsEuros); // false\n$result = $target->isSameCurrency(...$allDollars);    // true\n```\n\n----------------------------------------\n\nTITLE: Checking the Sign of a Money Value in PHP\nDESCRIPTION: Shows how to use the `isZero()`, `isPositive()`, and `isNegative()` methods to determine the sign of a `Money` object's amount. `isZero()` returns true only for zero amounts, `isPositive()` for amounts greater than zero, and `isNegative()` for amounts less than zero.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nMoney::USD(100)->isZero();          // false\nMoney::USD(0)->isZero();            // true\nMoney::USD(-100)->isZero();         // false\n\nMoney::USD(100)->isPositive();      // true\nMoney::USD(0)->isPositive();        // false\nMoney::USD(-100)->isPositive();     // false\n\nMoney::USD(100)->isNegative();      // false\nMoney::USD(0)->isNegative();        // false\nMoney::USD(-100)->isNegative();     // true\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion using Swap in PHP\nDESCRIPTION: This snippet shows how to integrate the Swap library with MoneyPHP for currency conversion. It creates a SwapExchange instance, then uses the converter to convert a Money object.  Requires Swap and MoneyPHP.  '$swap' is assumed to be an implementation of SwapInterface. The output is a Money object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Money;\nuse Money\\Converter;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Exchange\\SwapExchange;\n\n// $swap = Implementation of \\Swap\\SwapInterface\n$exchange = new SwapExchange($swap);\n\n$converter = new Converter(new ISOCurrencies(), $exchange);\n$eur100 = Money::EUR(100);\n$usd125 = $converter->convert($eur100, new Currency('USD'));\n[$usd125, $pair] = $converter->convertAndReturnWithCurrencyPair($eur100, new Currency('USD'));\n```\n\n----------------------------------------\n\nTITLE: Obtaining absolute value of Money objects in PHP using MoneyPHP\nDESCRIPTION: Explains the absolute() method which returns a new Money instance representing the absolute (non-negative) value of the original Money object. This operation is immutable and retains the currency information while converting negative amounts to positive.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$value = Money::EUR(-800);       // -€8.00\n\n$result = $value->absolute();    // €8.00\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion using Exchanger in PHP\nDESCRIPTION: This snippet demonstrates integrating the Exchanger library for currency conversion using MoneyPHP. It creates an ExchangerExchange, then uses the converter.  Requires the Exchanger and MoneyPHP libraries.  '$exchanger' is an implementation of ExchangeRateProvider. The output is a Money object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Money;\nuse Money\\Converter;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Exchanger\\ExchangerExchange;\n\n// $exchanger = Implementation of \\Exchanger\\Contract\\ExchangeRateProvider\n$exchange = new ExchangerExchange($exchanger);\n\n$converter = new Converter(new ISOCurrencies(), $exchange);\n$eur100 = Money::EUR(100);\n$usd125 = $converter->convert($eur100, new Currency('USD'));\n[$usd125, $pair] = $converter->convertAndReturnWithCurrencyPair($eur100, new Currency('USD'));\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with AggregateMoneyFormatter in PHP\nDESCRIPTION: Shows how to use the `AggregateMoneyFormatter` to handle formatting for multiple currencies using different underlying formatters. It takes an associative array mapping currency codes to specific formatter instances and delegates the formatting based on the input `Money` object's currency.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/formatting.rst#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currencies\\BitcoinCurrencies;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Currency;\nuse Money\\Formatter\\AggregateMoneyFormatter;\nuse Money\\Formatter\\BitcoinMoneyFormatter;\nuse Money\\Formatter\\IntlMoneyFormatter;\nuse Money\\Money;\n\n$dollars = new Money(100, new Currency('USD'));\n$bitcoin = new Money(100, new Currency('XBT'));\n\n$numberFormatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$intlFormatter = new IntlMoneyFormatter($numberFormatter, new ISOCurrencies());\n$bitcoinFormatter = new BitcoinMoneyFormatter(7, new BitcoinCurrencies());\n\n$moneyFormatter = new AggregateMoneyFormatter([\n    'USD' => $intlFormatter,\n    'XBT' => $bitcoinFormatter,\n]);\n\necho $moneyFormatter->format($dollars); // outputs $1.00\necho $moneyFormatter->format($bitcoin); // outputs Ƀ0.0000010\n```\n\n----------------------------------------\n\nTITLE: Computing ratio between Money objects in PHP with MoneyPHP\nDESCRIPTION: The ratioOf() method calculates the numeric ratio of one Money object compared to another, both denominated in the same currency. It returns a float representing how many times one amount fits into the other. Inputs are two Money objects; output is a floating-point ratio.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$three = Money::EUR(300);        // €3.00\n$six = Money::EUR(600);          // €6.00\n\n$result = $three->ratioOf($six); // 0.5\n$result = $six->ratioOf($three); // 2\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion Using Swap Exchange in PHP\nDESCRIPTION: This snippet shows how to convert using a CurrencyPair obtained from a SwapExchange.  It fetches the currency pair using `$swap` and then converts a Money object using the generated pair. It demonstrates integration with Swap for dynamic exchange rates.  Requires Swap and MoneyPHP, along with an implementation of SwapInterface. The output is a Money object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currency;\nuse Money\\Exchange\\SwapExchange;\n\n$eur = new Currency('EUR');\n$usd = new Currency('USD');\n\n// $swap = Implementation of \\Swap\\SwapInterface\n$exchange = new SwapExchange($swap);\n\n$pair = $exchange->quote($eur, $usd);\n```\n\n----------------------------------------\n\nTITLE: Performing Correct Subtraction and Comparison on Immutable Money Objects in PHP\nDESCRIPTION: Illustrates the correct pattern for operations on immutable `Money` objects. The result of the `subtract` method is assigned back to the `$jimPrice` variable. Subsequent comparisons using `lessThan` and `equals` show the updated value of `$jimPrice` (EUR 20.00).\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/concept.rst#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$jimPrice = $jimPrice->subtract($coupon);\n$jimPrice->lessThan($hannahPrice); // true\n$jimPrice->equals(Money::EUR(2000)); // true\n```\n\n----------------------------------------\n\nTITLE: Calculating modulus of Money objects in PHP with MoneyPHP\nDESCRIPTION: Utilizes the mod() method to compute the modulus (remainder) of one Money object when divided by another. Both operands must be Money objects of the same currency. The method returns a new Money instance representing the remainder amount, maintaining immutability.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value = Money::EUR(830);        // €8.30\n$divisor = Money::EUR(300);      // €3.00\n\n$result = $value->mod($divisor); // €2.30\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Money Objects in PHP\nDESCRIPTION: Demonstrates creating two variables referencing the same immutable `Money` object using the static factory `Money::EUR()`. Both `$jimPrice` and `$hannahPrice` initially point to the same EUR 25.00 object (represented as 2500 cents). Requires the `Money\\Money` class.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/concept.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Money;\n\n$jimPrice = $hannahPrice = Money::EUR(2500);\n```\n\n----------------------------------------\n\nTITLE: Reversed Currency Conversion in PHP\nDESCRIPTION: This snippet shows how to handle reversed currency pairs in exchange rates. It wraps a FixedExchange in a ReversedCurrenciesExchange.  This allows conversion in both directions. Requires the MoneyPHP library, including the ReversedCurrenciesExchange class. The output is a Money object representing the converted amount.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Converter;\nuse Money\\Currency;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Exchange\\FixedExchange;\nuse Money\\Exchange\\ReversedCurrenciesExchange;\n\n$exchange = new ReversedCurrenciesExchange(new FixedExchange([\n    'EUR' => [\n        'USD' => '1.25'\n    ]\n]));\n\n$converter = new Converter(new ISOCurrencies(), $exchange);\n\n$usd125 = Money::USD(125);\n$eur100 = $converter->convert($usd125, new Currency('EUR'));\n```\n\n----------------------------------------\n\nTITLE: Verifying Immutability After Incorrect Subtraction in PHP\nDESCRIPTION: Confirms that `$jimPrice` and `$hannahPrice` still reference equivalent Money objects after the incorrect subtraction attempt in the previous snippet. The `equals` method returns true, demonstrating that the original `$jimPrice` object was not modified.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/concept.rst#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$jimPrice->equals($hannahPrice); // true\n```\n\n----------------------------------------\n\nTITLE: Attempting Subtraction on Immutable Money Object in PHP\nDESCRIPTION: Shows an attempt to subtract a coupon value from a `Money` object. Due to immutability, the `subtract` method returns a *new* `Money` object representing the result, but the original `$jimPrice` variable remains unchanged. Requires `Money\\Money` objects.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/concept.rst#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$coupon = Money::EUR(500);\n$jimPrice->subtract($coupon);\n```\n\n----------------------------------------\n\nTITLE: Rounding Money to units in PHP with MoneyPHP\nDESCRIPTION: Demonstrates the roundToUnit() method that rounds a Money object's amount to the nearest multiple of a specified unit number. The input parameter is an integer unit, and the output is a new Money object rounded accordingly, preserving the original currency and ensuring immutability.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = Money::EUR(813);           // €8.13\n\n$result = $value->roundToUnit(2);   // Money::EUR(800)\n$result = $value->roundToUnit(1);   // Money::EUR(810)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Value is Greater Than Another with greaterThan() in PHP\nDESCRIPTION: Demonstrates the `greaterThan()` method to check if one `Money` object's amount is strictly greater than another's. Both objects must have the same currency. Returns `true` if the first amount is larger, `false` otherwise.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/comparison.rst#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value1 = Money::USD(800);                  // $8.00\n$value2 = Money::USD(700);                  // $7.00\n\n$result = $value1->greaterThan($value2);    // true\n```\n\n----------------------------------------\n\nTITLE: Convert Money Using CurrencyPair in PHP\nDESCRIPTION: This snippet illustrates converting a Money object using a CurrencyPair, showing the process of calculating the conversion using a previously created or obtained CurrencyPair. Requires MoneyPHP.  The output is a Money object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Money;\nuse Money\\Currency;\nuse Money\\Currencies\\ISOCurrencies;\nuse Money\\Exchange\\SwapExchange;\n\n// $swap = Implementation of \\Swap\\SwapInterface\n$exchange = new SwapExchange($swap);\n\n$converter = new Converter(new ISOCurrencies(), $exchange);\n$eur100 = Money::EUR(100);\n$usd125 = $converter->convertAgainstCurrencyPair($eur100, $pair);\n```\n\n----------------------------------------\n\nTITLE: Create CurrencyPair Object in PHP\nDESCRIPTION: This snippet shows how to create a CurrencyPair object directly, specifying the currencies and the exchange rate. This is a foundational component of the MoneyPHP library used for conversion. Requires the MoneyPHP library.  The output is a CurrencyPair object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\Currency;\nuse Money\\CurrencyPair;\n\n$pair = new CurrencyPair(new Currency('EUR'), new Currency('USD'), 1.2500);\n```\n\n----------------------------------------\n\nTITLE: Create CurrencyPair from ISO Notation in PHP\nDESCRIPTION: This snippet demonstrates creating a CurrencyPair from an ISO notation string.  The notation specifies the currencies and the exchange rate. Requires the MoneyPHP library. The output is a CurrencyPair object.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Money\\CurrencyPair;\n\n$pair = CurrencyPair::createFromIso('EUR/USD 1.2500');\n```\n\n----------------------------------------\n\nTITLE: Rounding Money objects in PHP with MoneyPHP\nDESCRIPTION: This section references multiple predefined rounding modes applicable to multiplication and division operations on Money objects. The rounding modes control how fractional amounts are rounded (e.g., half-up, half-down, up, down) and must be specified when performing arithmetic to avoid precision errors.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/operation.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Using Teller to Replace Float Math in PHP Monetary Calculations\nDESCRIPTION: This example demonstrates how to replace float-based math with Teller for monetary calculations. It shows a before/after comparison where discount calculations are performed with better precision using the Teller class.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/teller.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// before\n$price = 234.56;\n$discount = 0.05;\n$discountAmount = $price * $discount; // 11.728\n\n// after\n$teller = \\Money\\Teller::USD();\n$discountAmount = $teller->multiply($price, $discount); // '11.73'\n```\n\n----------------------------------------\n\nTITLE: Formatting and Parsing Bitcoin Amounts - PHP\nDESCRIPTION: This PHP snippet demonstrates the construction, formatting, and parsing of Bitcoin amounts using the Money library. It first constructs a Money object representing a Bitcoin amount.  It then formats this amount using BitcoinMoneyFormatter.  Finally, it parses a Bitcoin string representation back into a Money object using BitcoinMoneyParser. The code depends on the Money library, BitcoinCurrencies, BitcoinMoneyFormatter, and BitcoinMoneyParser classes.  The expected output is the formatted Bitcoin amount and the amount extracted after parsing.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/bitcoin.rst#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\tuse Money\\Currencies\\BitcoinCurrencies;\n\tuse Money\\Currency;\n\tuse Money\\Formatter\\BitcoinMoneyFormatter;\n\tuse Money\\Money;\n\tuse Money\\Parser\\BitcoinMoneyParser;\n\n\t// construct bitcoin (subunit of 8)\n\t$money = new Money(100000000000, new Currency('XBT'));\n\n\t// construct bitcoin currencies\n\t$currencies = new BitcoinCurrencies();\n\n\t// format bitcoin\n\t$formatter = new BitcoinMoneyFormatter(2, $currencies);\n\techo $formatter->format($money); // prints Ƀ1000.00\n\n\t// parse bitcoin\n\t$parser = new BitcoinMoneyParser(2);\n\t$money = $parser->parse(\"Ƀ1000.00\", 'XBT');\n\techo $money->getAmount(); // outputs 100000000000\n```\n\n----------------------------------------\n\nTITLE: Installing Money PHP Library using Composer\nDESCRIPTION: This Bash command uses Composer, the PHP dependency manager, to install the `moneyphp/money` library into the current project. This command downloads the package and updates the project's `composer.json` and `composer.lock` files.\nSOURCE: https://github.com/moneyphp/money/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require moneyphp/money\n```\n\n----------------------------------------\n\nTITLE: Installing Money PHP Library via Composer\nDESCRIPTION: Shows the command needed to install the Money PHP library using Composer, which is the recommended installation method.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/getting-started.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require moneyphp/money\n```\n\n----------------------------------------\n\nTITLE: Install Swap Library via Composer\nDESCRIPTION: This snippet shows how to install the Swap currency exchange library using Composer.  It's a dependency for using SwapExchange within MoneyPHP.  This command must be executed in the terminal.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require florianv/swap\n```\n\n----------------------------------------\n\nTITLE: Install Exchanger Library via Composer\nDESCRIPTION: This snippet shows how to install the Exchanger library using Composer. Exchanger is the currency exchange framework behind Swap.  It's a dependency for using ExchangerExchange within MoneyPHP. This command must be executed in the terminal.\nSOURCE: https://github.com/moneyphp/money/blob/master/doc/features/currency-conversion.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require florianv/exchanger\n```\n\n----------------------------------------\n\nTITLE: Running Library Tests using Composer\nDESCRIPTION: This Bash command executes the test suite for the `moneyphp/money` library. It relies on a script alias defined in the `composer.json` file (typically named \"test\") which usually invokes PHPUnit.\nSOURCE: https://github.com/moneyphp/money/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer test\n```\n\n----------------------------------------\n\nTITLE: Running Library Tests inside Docker Container\nDESCRIPTION: This Bash command executes the PHPUnit test suite within a Docker container created from the `moneyphp` image. It mounts the project directory (`$PWD`) into the container, runs the tests using the container's environment, and excludes tests belonging to the 'segmentation' group. Requires Docker and a previously built image named `moneyphp`.\nSOURCE: https://github.com/moneyphp/money/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -v $PWD:/app -w /app moneyphp vendor/bin/phpunit --exclude-group segmentation\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Money PHP Project\nDESCRIPTION: This Bash command uses Docker to build a container image named `moneyphp` based on the instructions in the `Dockerfile` located in the project's root directory (`.`). This requires Docker to be installed and a valid Dockerfile to be present.\nSOURCE: https://github.com/moneyphp/money/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t moneyphp .\n```"
  }
]