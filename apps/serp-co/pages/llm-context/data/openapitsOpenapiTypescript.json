[
  {
    "owner": "openapi-ts",
    "repo": "openapi-typescript",
    "content": "TITLE: Creating a Client with createClient in TypeScript\nDESCRIPTION: The createClient function accepts options that set default settings for all subsequent fetch calls. It creates a client instance for making API requests based on OpenAPI paths type definition.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateClient<paths>(options);\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with openapi-fetch in TypeScript\nDESCRIPTION: Demonstrates how to use openapi-fetch to make type-safe API requests using types generated by openapi-typescript. It shows both GET and PUT requests with proper typing for params and body.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\nconst {\n  data, // only present if 2XX response\n  error, // only present if 4XX or 5XX response\n} = await client.GET(\"/blogposts/{post_id}\", {\n  params: {\n    path: { post_id: \"123\" },\n  },\n});\n\nawait client.PUT(\"/blogposts\", {\n  body: {\n    title: \"My New Post\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useQuery with queryOptions in React TypeScript\nDESCRIPTION: Example showing how to use queryOptions with useQuery to fetch user data. The component handles loading and error states while displaying user data when available.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/query-options.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\nimport { $api } from \"./api\";\n\nexport const App = () => {\n  const { data, error, isLoading } = useQuery(\n    $api.queryOptions(\"get\", \"/users/{user_id}\", {\n      params: {\n        path: { user_id: 5 },\n      },\n    }),\n  );\n\n  if (!data || isLoading) return \"Loading...\";\n  if (error) return `An error occured: ${error.message}`;\n\n  return <div>{data.firstname}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using openapi-fetch Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and use an openapi-fetch client. It shows how to make GET and PUT requests with type-safe parameters and responses.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\nconst {\n  data, // only present if 2XX response\n  error, // only present if 4XX or 5XX response\n} = await client.GET(\"/blogposts/{post_id}\", {\n  params: {\n    path: { post_id: \"123\" },\n  },\n});\n\nawait client.PUT(\"/blogposts\", {\n  body: {\n    title: \"My New Post\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using openapi-react-query Client in TypeScript React Component\nDESCRIPTION: This snippet demonstrates how to create a fetch client and a react-query client, and use them in a React component to make a type-safe API query. It shows error handling, loading state, and data rendering.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/index.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nconst $api = createClient(fetchClient);\n\nconst MyComponent = () => {\n  const { data, error, isLoading } = $api.useQuery(\n    \"get\",\n    \"/blogposts/{post_id}\",\n    {\n      params: {\n        path: { post_id: 5 },\n      },\n    },\n  );\n\n  if (isLoading || !data) return \"Loading...\";\n\n  if (error) return `An error occured: ${error.message}`;\n\n  return <div>{data.title}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing openapi-react-query in a React Component\nDESCRIPTION: Example of how to create a fetch client, a react-query client, and use them in a React component to query an API with type safety.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/README.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nconst $api = createClient(fetchClient);\n\nconst MyComponent = () => {\n  const { data, error, isPending } = $api.useQuery(\n    \"get\",\n    \"/blogposts/{post_id}\",\n    {\n      params: {\n        path: { post_id: 5 },\n      },\n    }\n  );\n\n  if (isPending || !data) return \"Loading...\";\n\n  if (error) return `An error occurred: ${error.message}`;\n\n  return <div>{data.title}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up a Component with SWR OpenAPI Hook in TypeScript\nDESCRIPTION: Demonstrates how to create a client and query hook in a React component. It configures a type-safe client with openapi-fetch and creates a query hook that can be used with proper path parameters for API requests.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/index.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport { createQueryHook } from \"swr-openapi\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\n\nconst useQuery = createQueryHook(client, \"my-api\");\n\nfunction MyComponent() {\n  const { data, error, isLoading, isValidating, mutate } = useQuery(\n    \"/blogposts/{post_id}\",\n    {\n      params: {\n        path: { post_id: \"123\" },\n      },\n    },\n  );\n\n  if (isLoading || !data) return \"Loading...\";\n\n  if (error) return `An error occured: ${error.message}`;\n\n  return <div>{data.title}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with openapi-typescript-fetch in TypeScript\nDESCRIPTION: Shows how to use openapi-typescript-fetch to make type-safe API requests. It demonstrates GET and PUT requests with error handling, using types generated by openapi-typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fetcher } from 'openapi-typescript-fetch';\nimport type { paths } from './my-openapi-3-schema'; // generated by openapi-typescript\n\nconst fetcher = Fetcher.for<paths>();\n\n// GET request\nconst getBlogPost = fetcher.path('/blogposts/{post_id}').method('get').create();\n\ntry {\n  const { status, data } = await getBlogPost({ pathParams: { post_id: '123' } });\n  console.log(data);\n} catch (error) {\n  console.error('Error:', error);\n}\n\n// PUT request\nconst updateBlogPost = fetcher.path('/blogposts').method('put').create();\n\ntry {\n  await updateBlogPost({ body: { title: 'My New Post' } });\n} catch (error) {\n  console.error('Error:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated OpenAPI Types\nDESCRIPTION: Example of importing and using generated TypeScript types for API schemas, parameters, and responses.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/introduction.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { paths, components } from \"./my-openapi-3-schema\";\n\n// Schema Obj\ntype MyType = components[\"schemas\"][\"MyType\"];\n\n// Path params\ntype EndpointParams = paths[\"/my/endpoint\"][\"parameters\"];\n\n// Response obj\ntype SuccessResponse =\n  paths[\"/my/endpoint\"][\"get\"][\"responses\"][200][\"content\"][\"application/json\"][\"schema\"];\ntype ErrorResponse =\n  paths[\"/my/endpoint\"][\"get\"][\"responses\"][500][\"content\"][\"application/json\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Caching Middleware\nDESCRIPTION: Demonstrates creating a caching middleware that stores and retrieves responses to avoid redundant network requests. It utilizes the early response feature to return cached responses directly from onRequest.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst cache = new Map<string, Response>();\nconst getCacheKey = (request: Request) => `${request.method}:${request.url}`;\n\nconst cacheMiddleware: Middleware = {\n  onRequest({ request }) {\n    const key = getCacheKey(request);\n    const cached = cache.get(key);\n    if (cached) {\n      // Return cached response, skipping actual request and remaining middleware chain\n      return cached.clone();\n    }\n  },\n  onResponse({ request, response }) {\n    if (response.ok) {\n      const key = getCacheKey(request);\n      cache.set(key, response.clone());\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with API Mutation\nDESCRIPTION: Example of using useMutation in a React component to update user data. Shows how to integrate the mutation hook with a button click handler.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-mutation.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $api } from \"./api\";\n\nexport const App = () => {\n  const { mutate } = $api.useMutation(\"patch\", \"/users\");\n\n  return (\n    <button onClick={() => mutate({ body: { firstname: \"John\" } })}>\n      Update\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Generated OpenAPI TypeScript Types\nDESCRIPTION: Example showing how to import and use the generated TypeScript types for API components, parameters, and responses.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { paths, components } from \"./my-openapi-3-schema\";\n\n// Schema Obj\ntype MyType = components[\"schemas\"][\"MyType\"];\n\n// Path params\ntype EndpointParams = paths[\"/my/endpoint\"][\"parameters\"];\n\n// Response obj\ntype SuccessResponse =\n  paths[\"/my/endpoint\"][\"get\"][\"responses\"][200][\"content\"][\"application/json\"][\"schema\"];\ntype ErrorResponse =\n  paths[\"/my/endpoint\"][\"get\"][\"responses\"][500][\"content\"][\"application/json\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Using openapi-typescript in Node.js\nDESCRIPTION: Examples of using openapi-typescript to generate TypeScript types from OpenAPI schemas in different formats (JSON object, local file, remote URL).\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/node.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from \"node:fs\";\nimport openapiTS from \"openapi-typescript\";\n\n// example 1: load [object] as schema (JSON only)\nconst schema = await fs.promises.readFile(\"spec.json\", \"utf8\"); // must be OpenAPI JSON\nconst output = await openapiTS(JSON.parse(schema));\n\n// example 2: load [string] as local file (YAML or JSON; released in v4.0)\nconst localPath = new URL(\"./spec.yaml\", import.meta.url); // may be YAML or JSON format\nconst output = await openapiTS(localPath);\n\n// example 3: load [string] as remote URL (YAML or JSON; released in v4.0)\nconst output = await openapiTS(\"https://myurl.com/v1/openapi.yaml\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Auth for Protected Routes\nDESCRIPTION: Example of conditional authentication that only adds auth headers to protected routes while leaving public routes unmodified. Uses a list of unprotected routes to determine which requests need authentication.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst UNPROTECTED_ROUTES = [\"/v1/login\", \"/v1/logout\", \"/v1/public/\"];\n\nconst authMiddleware = {\n  onRequest({ schemaPath, request }) {\n    if (UNPROTECTED_ROUTES.some((pathname) => schemaPath.startsWith(pathname))) {\n      return undefined; // don't modify request for certain paths\n    }\n\n    // for all other paths, set Authorization header as expected\n    request.headers.set(\"Authorization\", `Bearer ${accessToken}`);\n    return request;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating API Client and Hooks for SWR OpenAPI\nDESCRIPTION: Demonstrates how to set up a reusable API client with various hook creators from swr-openapi. It creates and exports several hooks (useQuery, useImmutable, useInfinite, useMutate) that can be used throughout the application.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/index.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport {\n  createQueryHook,\n  createImmutableHook,\n  createInfiniteHook,\n  createMutateHook,\n} from \"swr-openapi\";\nimport { isMatch } from \"lodash-es\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nconst prefix = \"my-api\";\n\nexport const useQuery = createQueryHook(client, prefix);\nexport const useImmutable = createImmutableHook(client, prefix);\nexport const useInfinite = createInfiniteHook(client, prefix);\nexport const useMutate = createMutateHook(\n  client,\n  prefix,\n  isMatch, // Or any comparision function\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using openapi-react-query Client in TypeScript React Component\nDESCRIPTION: This snippet demonstrates how to create and use an openapi-react-query client in a React component. It shows the setup of the fetch client and the react-query client, and how to use the useQuery hook to fetch data.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/openapi-react-query/index.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // openapi-typescriptで生成された型\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nconst $api = createClient(fetchClient);\n\nconst MyComponent = () => {\n  const { data, error, isLoading } = $api.useQuery(\n    \"get\",\n    \"/blogposts/{post_id}\",\n    {\n      params: {\n        path: { post_id: 5 },\n      },\n    }\n  );\n\n  if (isLoading || !data) return \"Loading...\";\n\n  if (error) return `An error occured: ${error.message}`;\n\n  return <div>{data.title}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Response Body Statefulness\nDESCRIPTION: Shows how to properly handle the stateful nature of request/response bodies in middleware by cloning the response before consuming its body. This prevents the 'body already read' error.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware: Middleware = {\n  onResponse({ response }) {\n    const data = await response.json(); // [!code --]\n    const data = await response.clone().json(); // [!code ++]\n    return undefined;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up API Client with openapi-typescript\nDESCRIPTION: This snippet shows how to set up an API client using openapi-fetch and openapi-react-query. It creates a fetch client with a base URL and exports an API object for use in components.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-infinite-query.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nexport const $api = createClient(fetchClient);\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook with React Component\nDESCRIPTION: Example showing how to implement the useQuery hook in a React component to fetch user data. Demonstrates error handling, loading states, and type-safe data access.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-query.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $api } from \"./api\";\n\nexport const App = () => {\n  const { data, error, isLoading } = $api.useQuery(\"get\", \"/users/{user_id}\", {\n    params: {\n      path: { user_id: 5 },\n    },\n  });\n\n  if (!data || isLoading) return \"Loading...\";\n  if (error) return `An error occured: ${error.message}`;\n\n  return <div>{data.firstname}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth Middleware\nDESCRIPTION: Complete example of implementing authentication middleware that retrieves and applies access tokens to API requests. It handles token initialization and adds the Authorization header to every request.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient, { type Middleware } from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\";\n\nlet accessToken: string | undefined = undefined;\n\nconst authMiddleware: Middleware = {\n  async onRequest({ request }) {\n    // fetch token, if it doesn't exist\n    if (!accessToken) {\n      const authRes = await someAuthFunc();\n      if (authRes.accessToken) {\n        accessToken = authRes.accessToken;\n      } else {\n        // handle auth error\n      }\n    }\n\n    // (optional) add logic here to refresh token when it expires\n\n    // add Authorization header to every request\n    request.headers.set(\"Authorization\", `Bearer ${accessToken}`);\n    return request;\n  },\n};\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\nclient.use(authMiddleware);\n\nconst authRequest = await client.GET(\"/some/auth/url\");\n```\n\n----------------------------------------\n\nTITLE: Using SWR OpenAPI Hook in a React Component\nDESCRIPTION: Shows a practical example of using the exported useQuery hook in a React component. It makes a type-safe API request to fetch blog post data and handles loading and error states appropriately.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/index.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from \"./my-api\";\n\nfunction MyComponent() {\n  const { data, error, isLoading, isValidating, mutate } = useQuery(\n    \"/blogposts/{post_id}\",\n    {\n      params: {\n        path: { post_id: \"123\" },\n      },\n    },\n  );\n\n  if (isLoading || !data) return \"Loading...\";\n\n  if (error) return `An error occured: ${error.message}`;\n\n  return <div>{data.title}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and using the useQuery hook with openapi-typescript\nDESCRIPTION: Example of importing and setting up the useQuery hook with openapi-typescript. Shows how to create a client, initialize the hook with createQueryHook, and use it to make a typed API request.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-query.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport { createQueryHook } from \"swr-openapi\";\nimport type { paths } from \"./my-schema\";\n\nconst client = createClient<paths>(/* ... */);\n\nconst useQuery = createQueryHook(client, \"my-api\");\n\nconst { data, error, isLoading, isValidating, mutate } = useQuery(\n  path,\n  init,\n  config,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Path-Based Client with wrapAsPathBasedClient in TypeScript\nDESCRIPTION: The wrapAsPathBasedClient function creates a Proxy-based client that allows path-indexed calls. This example demonstrates how to wrap a client and make requests using path indexing.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient<paths>(clientOptions);\nconst pathBasedClient = wrapAsPathBasedClient(client);\n\npathBasedClient[\"/my-url\"].GET(fetchOptions);\n```\n\n----------------------------------------\n\nTITLE: Mocking API Responses with TypeScript and Vitest\nDESCRIPTION: Demonstrates how to create type-safe API mocks using OpenAPI-generated types. Uses a custom mockResponses function to ensure mocks match the API schema.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockResponses } from \"../test/utils\";\n\ndescribe(\"My API test\", () => {\n  it(\"mocks correctly\", async () => {\n    mockResponses({\n      \"/users/{user_id}\": {\n        // ✅ Correct 200 response\n        get: { status: 200, body: { id: \"user-id\", name: \"User Name\" } },\n        // ✅ Correct 403 response\n        delete: { status: 403, body: { code: \"403\", message: \"Unauthorized\" } },\n      },\n      \"/users\": {\n        // ✅ Correct 201 response\n        put: { 201: { status: \"success\" } },\n      },\n    });\n\n    // test 1: GET /users/{user_id}: 200\n    await fetch(\"/users/user-123\");\n\n    // test 2: DELETE /users/{user_id}: 403\n    await fetch(\"/users/user-123\", { method: \"DELETE\" });\n\n    // test 3: PUT /users: 200\n    await fetch(\"/users\", {\n      method: \"PUT\",\n      body: JSON.stringify({ id: \"new-user\", name: \"New User\" }),\n    });\n\n    // test cleanup\n    fetchMock.resetMocks();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in OpenAPI TypeScript Client\nDESCRIPTION: Demonstrates how to implement middleware with request, response, and error handling callbacks for an OpenAPI TypeScript client. Includes examples of modifying headers, response status, and error handling.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst myMiddleware: Middleware = {\n  async onRequest({ request, options }) {\n    // set \"foo\" header\n    request.headers.set(\"foo\", \"bar\");\n    return request;\n  },\n  async onResponse({ request, response, options }) {\n    const { body, ...resOptions } = res;\n    // change status of response\n    return new Response(body, { ...resOptions, status: 200 });\n  },\n  async onError({ error }) {\n    // wrap errors thrown by fetch\n    onError({ error }) {\n      return new Error(\"Oops, fetch failed\", { cause: error });\n    },\n  },\n};\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\n// register middleware\nclient.use(myMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Fetch Client in TypeScript\nDESCRIPTION: Example of creating and using a type-safe API client with openapi-fetch. Shows how to make GET and PUT requests with type-checked parameters and response handling.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/index.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\nconst {\n  data, // only present if 2XX response\n  error, // only present if 4XX or 5XX response\n} = await client.GET(\"/blogposts/{post_id}\", {\n  params: {\n    path: { post_id: \"123\" },\n  },\n});\n\nawait client.PUT(\"/blogposts\", {\n  body: {\n    title: \"My New Post\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Query Serialization in TypeScript\nDESCRIPTION: Demonstrates how to implement a custom query parameter serializer for handling arrays and nested objects. The function converts query parameters into a URL-encoded string format with special handling for array values.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  querySerializer(queryParams) {\n    const search = [];\n    for (const name in queryParams) {\n      const value = queryParams[name];\n      if (Array.isArray(value)) {\n        for (const item of value) {\n          s.push(`${name}[]=${encodeURIComponent(item)}`);\n        }\n      } else {\n        s.push(`${name}=${encodeURLComponent(value)}`);\n      }\n    }\n    return search.join(\",\"); // ?tags[]=food,tags[]=california,tags[]=healthy\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Detailed Controller with API Operations in TypeScript\nDESCRIPTION: Demonstrates defining a more complete UsersController with a list operation that returns User objects. This example shows the proper file organization for controllers.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiOperation, ApiResponse } from \"openapi-metadata/decorators\";\nimport User from \"../schemas/user\";\n\nexport default class UsersController {\n  @ApiOperation({\n    methods: [\"get\"],\n    path: \"/users\",\n    summary: \"List users\",\n  })\n  @ApiResponse({ type: [User] })\n  async list() {\n    // ...your logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Router with openapi-ts-router in TypeScript\nDESCRIPTION: Sets up an Express router with openapi-ts-router for type-safe API routes. Demonstrates GET and POST endpoints with path and body validation using Zod.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router } from 'express';\nimport { createExpressOpenApiRouter } from 'openapi-ts-router';\nimport * as z from 'zod';\nimport { zValidator } from 'validation-adapters/zod';\nimport { paths } from './gen/v1'; // OpenAPI-generated types\nimport { PetSchema } from './schemas'; // Custom reusable schema for validation\n\nexport const router: Router = Router();\nexport const openApiRouter = createExpressOpenApiRouter<paths>(router);\n\n// GET /pet/{petId}\nopenApiRouter.get('/pet/{petId}', {\n  pathValidator: zValidator(\n    z.object({\n      petId: z.number() // Validate that petId is a number\n    })\n  ),\n  handler: (req, res) => {\n    const { petId } = req.params; // Access validated params\n    res.send({ name: 'Falko', photoUrls: [] }); \n  }\n});\n\n// POST /pet\nopenApiRouter.post('/pet', {\n  bodyValidator: zValidator(PetSchema), // Validate request body using PetSchema\n  handler: (req, res) => {\n    const { name, photoUrls } = req.body; // Access validated body data\n    res.send({ name, photoUrls }); \n  }\n});\n\n// TypeScript will error if route/method doesn't exist in OpenAPI spec\n// or if response doesn't match defined schema\n```\n\n----------------------------------------\n\nTITLE: Creating and using SWR hooks with openapi-fetch\nDESCRIPTION: Example of initializing an openapi-fetch client and creating SWR hooks with swr-openapi. Shows how to use the generated hook with fully typed paths and parameters.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/swr-openapi/README.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// sandwich-api.ts\nimport createClient from \"openapi-fetch\";\nimport { createQueryHook } from \"swr-openapi\";\nimport type { paths as SandwichPaths } from \"./types/sandwich-schema\";\n\nconst client = createClient<SandwichPaths>(/* ... */);\n\nconst useSandwiches = createQueryHook(client, \"sandwich-api\");\n\nconst { data, error, isLoading, isValidating, mutate } = useSandwiches(\n  \"/sandwich/{id}\", // <- Fully typed paths!\n  {\n    params: {\n      path: {\n        id: \"123\", // <- Fully typed params!\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query in React Component\nDESCRIPTION: This snippet demonstrates how to use the useInfiniteQuery method in a React component to fetch paginated posts. It includes handling for next page fetching and rendering the fetched data.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-infinite-query.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $api } from \"./api\";\nconst PostList = () => {\n  const { data, fetchNextPage, hasNextPage, isFetching } =\n    $api.useInfiniteQuery(\n      \"get\",\n      \"/posts\",\n      {\n        params: {\n          query: {\n            limit: 10,\n          },\n        },\n      },\n      {\n        getNextPageParam: (lastPage) => lastPage.nextPage,\n        initialPageParam: 0,\n      }\n    );\n\n  return (\n    <div>\n      {data?.pages.map((page, i) => (\n        <div key={i}>\n          {page.items.map((post) => (\n            <div key={post.id}>{post.title}</div>\n          ))}\n        </div>\n      ))}\n      {hasNextPage && (\n        <button onClick={() => fetchNextPage()} disabled={isFetching}>\n          {isFetching ? \"Loading...\" : \"Load More\"}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport const App = () => {\n  return (\n    <ErrorBoundary fallbackRender={({ error }) => `Error: ${error.message}`}>\n      <MyComponent />\n    </ErrorBoundary>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAPI Client with React Query Integration in TypeScript\nDESCRIPTION: Shows how to set up the API client by combining openapi-fetch with openapi-react-query. The configuration uses a TypeScript schema generated from an OpenAPI specification and initializes the fetch client with a base URL.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-suspense-query.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nexport const $api = createClient(fetchClient);\n```\n\n----------------------------------------\n\nTITLE: Testing API Mocks with TypeScript\nDESCRIPTION: Example test file showing how to mock API responses with type safety using openapi-typescript generated types. Demonstrates mocking multiple endpoints with different HTTP methods and status codes.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockResponses } from \"../test/utils\";\n\ndescribe(\"My API test\", () => {\n  it(\"mocks correctly\", async () => {\n    mockResponses({\n      \"/users/{user_id}\": {\n        get: { status: 200, body: { id: \"user-id\", name: \"User Name\" } },\n        delete: { status: 403, body: { code: \"403\", message: \"Unauthorized\" } },\n      },\n      \"/users\": {\n        put: { 201: { status: \"success\" } },\n      },\n    });\n\n    await fetch(\"/users/user-123\");\n    await fetch(\"/users/user-123\", { method: \"DELETE\" });\n    await fetch(\"/users\", {\n      method: \"PUT\",\n      body: JSON.stringify({ id: \"new-user\", name: \"New User\" }),\n    });\n\n    fetchMock.resetMocks();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of openapi-fetch Client in TypeScript\nDESCRIPTION: This example demonstrates more advanced usage of the openapi-fetch client, including path parameters, query parameters, and request body for GET and PUT requests.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\nconst { data, error } = await client.GET(\"/blogposts/{post_id}\", {\n  params: {\n    path: { post_id: \"my-post\" },\n    query: { version: 2 },\n  },\n});\n\nconst { data, error } = await client.PUT(\"/blogposts\", {\n  body: {\n    title: \"New Post\",\n    body: \"<p>New post body</p>\",\n    publish_date: new Date(\"2023-03-01T12:00:00Z\").getTime(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and using generated TypeScript types\nDESCRIPTION: Example showing how to import and use the TypeScript types generated from an OpenAPI schema. Demonstrates accessing schema objects, path parameters, and response objects using indexed access types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/introduction.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { paths, components } from \"./api/v1\"; // generated by openapi-typescript\n\n// Schema Obj\ntype MyType = components[\"schemas\"][\"MyType\"];\n\n// Path params\ntype EndpointParams = paths[\"/my/endpoint\"][\"parameters\"];\n\n// Response obj\ntype SuccessResponse =\n  paths[\"/my/endpoint\"][\"get\"][\"responses\"][200][\"content\"][\"application/json\"][\"schema\"];\ntype ErrorResponse =\n  paths[\"/my/endpoint\"][\"get\"][\"responses\"][500][\"content\"][\"application/json\"][\"schema\"];\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema Model with API Properties in TypeScript\nDESCRIPTION: Shows how to create a User class with properties decorated with @ApiProperty. Each property can have additional configurations like required status and examples.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from \"openapi-metadata/decorators\";\n\nclass User {\n  @ApiProperty()\n  declare id: number;\n\n  @ApiProperty()\n  declare name: string;\n\n  @ApiProperty({ required: false })\n  declare mobile?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using openapi-ts-router with Hono in TypeScript\nDESCRIPTION: Demonstrates the use of openapi-ts-router with Hono to create fully type-safe and runtime-validated API routes. It shows how to define routes with path and body validators using Zod.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono';\nimport { createHonoOpenApiRouter } from 'openapi-ts-router';\nimport { zValidator } from 'validation-adapters/zod';\nimport * as z from 'zod';\nimport { paths } from './gen/v1'; // OpenAPI-generated types\nimport { PetSchema } from './schemas'; // Custom reusable schema for validation\n\nexport const router = new Hono();\nexport const openApiRouter = createHonoOpenApiRouter<paths>(router);\n\n// GET /pet/{petId}\nopenApiRouter.get('/pet/{petId}', {\n  pathValidator: zValidator(\n    z.object({\n      petId: z.number() // Validate that petId is a number\n    })\n  ),\n  handler: (c) => {\n    const { petId } = c.req.valid('param'); // Access validated params\n    return c.json({ name: 'Falko', photoUrls: [] }); \n  }\n});\n\n// POST /pet\nopenApiRouter.post('/pet', {\n  bodyValidator: zValidator(PetSchema), // Validate request body using PetSchema\n  handler: (c) => {\n    const { name, photoUrls } = c.req.valid('json'); // Access validated body data\n    return c.json({ name, photoUrls }); \n  }\n});\n\n// TypeScript will error if route/method doesn't exist in OpenAPI spec\n// or if response doesn't match defined schema\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with openapi-axios in TypeScript\nDESCRIPTION: Demonstrates the use of openapi-axios to make type-safe API requests. It shows three different status handling strategies: 'axios', 'fetch', and 'safe', using types generated by openapi-typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenApiAxios } from \"@web-bee-ru/openapi-axios\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\nimport Axios from \"axios\";\n\nconst axios = Axios.create({\n  baseURL: \"https://myapi.dev/v1\",\n  adapter: \"fetch\", // strongly recommended (available since axios@1.7.0)\n});\n\n// Example 1. Usage with \"axios\" (default) status handling strategy (validStatus: 'axios')\n\nconst api = new OpenApiAxios<paths, \"axios\">(axios, { validStatus: \"axios\" }); // throws like axios (e.g. status 400+, network errors, interceptor errors)\n// const api =  new OpenApiAxios<paths>(axios) // same result\n\ntry {\n  const { status, data, response } = await api.get(\"/users\");\n} catch (err) {\n  if (api.isAxiosError(err)) {\n    if (typeof err.status === \"number\") {\n      // status >= 400\n    }\n    // request failed (e.g. network error)\n  }\n  throw err; // axios.interceptors error\n}\n\n// Example 2. Usage with \"fetch\" status handling strategy (validStatus: 'fetch')\n\nconst fetchApi = new OpenApiAxios<paths, \"fetch\">(axios, { validStatus: \"fetch\" }); // throws like browser's fetch() (e.g. network errors, interceptor errors)\n\ntry {\n  const { status, data, error, response } = await api.get(\"/users\");\n\n  if (error) {\n    // status >= 400\n  }\n} catch (err) {\n  if (api.isAxiosError(err)) {\n    // request failed (e.g. network error)\n  }\n  throw err; // axios.interceptors error\n}\n\n// Example 3. Usage with \"safe\" status handling strategy (validStatus: 'all')\n// (No try/catch required)\n\nconst safeApi = new OpenApiAxios<paths, \"all\">(axios, { validStatus: \"all\" }); // never throws errors\n\nconst { status, data, error, response } = await api.get(\"/users\");\n\nif (error) {\n  if (typeof status === \"number\") {\n    // status >= 400\n  } else if (api.isAxiosError(error)) {\n    // request failed (e.g. network error)\n  }\n  throw error; // axios.interceptors error\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Requests with Vitest in TypeScript\nDESCRIPTION: This snippet demonstrates how to mock requests in openapi-fetch using Vitest's spy function. It creates a mock fetch function, initializes the client with it, and tests a PUT request.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport { expect, test, vi } from \"vitest\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\ntest(\"my request\", async () => {\n  const mockFetch = vi.fn();\n  const client = createClient<paths>({\n    baseUrl: \"https://my-site.com/api/v1/\",\n    fetch: mockFetch,\n  });\n\n  const reqBody = { name: \"test\" };\n  await client.PUT(\"/tag\", { body: reqBody });\n\n  const req = mockFetch.mock.calls[0][0];\n  expect(req.url).toBe(\"/tag\");\n  expect(await req.json()).toEqual(reqBody);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useSuspenseQuery with React ErrorBoundary for API Data Fetching in TSX\nDESCRIPTION: Example showing how to use the useSuspenseQuery method within a React component to fetch user data. The component is wrapped in an ErrorBoundary to handle potential errors. The query fetches user data by ID and displays the user's firstname.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-suspense-query.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { $api } from \"./api\";\n\nconst MyComponent = () => {\n  const { data } = $api.useSuspenseQuery(\"get\", \"/users/{user_id}\", {\n    params: {\n      path: { user_id: 5 },\n    },\n  });\n\n  return <div>{data.firstname}</div>;\n};\n\nexport const App = () => {\n  return (\n    <ErrorBoundary fallbackRender={({ error }) => `Error: ${error.message}`}>\n      <MyComponent />\n    </ErrorBoundary>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Cleaner Generated TypeScript Types with Discriminated Unions\nDESCRIPTION: Shows the cleaner TypeScript types generated from the improved schema, creating a proper discriminated union that TypeScript can use for type narrowing with the 'type' property.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nPet: components[\"schemas\"][\"Cat\"] | components[\"schemas\"][\"Dog\"] | components[\"schemas\"][\"Rabbit\"] | components[\"schemas\"][\"Snake\"] | components[\"schemas\"][\"Turtle\"];\nCat: { type?: \"cat\"; } & components[\"schemas\"][\"PetCommonProperties\"];\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-based Pagination\nDESCRIPTION: Example implementation of cursor-based pagination using the useInfinite hook. Shows how to handle cursor-based navigation between pages using the nextCursor value.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-infinite.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseInfinite(\"/something\", (pageIndex, previousPageData) => {\n  // No more pages\n  if (previousPageData && !previousPageData.nextCursor) {\n    return null;\n  }\n\n  // First page\n  if (!previousPageData) {\n    return {\n      params: {\n        query: {\n          limit: 10,\n        },\n      },\n    };\n  }\n\n  // Next page\n  return {\n    params: {\n      query: {\n        limit: 10,\n        cursor: previousPageData.nextCursor,\n      },\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenAPI TypeScript with Fastify\nDESCRIPTION: This example demonstrates how to integrate openapi-typescript with Fastify to generate and serve OpenAPI documentation. It shows how to create endpoints for both the raw API documentation and the Scalar UI visualization.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/examples.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport fastify from \"fastify\";\nimport { generateDocument } from \"openapi-metadata\";\nimport { generateScalarUI } from \"openapi-metadata/ui\";\n\nconst app = Fastify();\n\nconst document = await generateDocument(yourConfiguration);\n\napp.get(\"/api\", async () => {\n  return document;\n});\n\napp.get(\"/api/docs\", () => {\n  const ui = generateScalarUI(\"/api\");\n  return ui;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware in openapi-typescript\nDESCRIPTION: Example of creating and registering middleware for request/response modification and error handling in openapi-typescript. The middleware adds custom headers, modifies response status, and wraps fetch errors.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst myMiddleware: Middleware = {\n  async onRequest({ request, options }) {\n    // set \"foo\" header\n    request.headers.set(\"foo\", \"bar\");\n    return request;\n  },\n  async onResponse({ request, response, options }) {\n    const { body, ...resOptions } = response;\n    // change status of response\n    return new Response(body, { ...resOptions, status: 200 });\n  },\n  async onError({ error }) {\n    // wrap errors thrown by fetch\n    onError({ error }) {\n      return new Error(\"Oops, fetch failed\", { cause: error });\n    },\n  },\n};\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\n// register middleware\nclient.use(myMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Mocking Responses with Mock Service Worker in TypeScript\nDESCRIPTION: This snippet shows how to use Mock Service Worker (MSW) to mock API responses in tests with openapi-fetch. It sets up an MSW server, defines a mock response, and tests a GET request.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/testing.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, HttpResponse } from \"msw\";\nimport { setupServer } from \"msw/node\";\nimport createClient from \"openapi-fetch\";\nimport { afterEach, beforeAll, expect, test } from \"vitest\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst server = setupServer();\n\nbeforeAll(() => {\n  // NOTE: server.listen must be called before `createClient` is used to ensure\n  // the msw can inject its version of `fetch` to intercept the requests.\n  server.listen({\n    onUnhandledRequest: (request) => {\n      throw new Error(\n        `No request handler found for ${request.method} ${request.url}`\n      );\n    },\n  });\n});\n\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ntest(\"my API call\", async () => {\n  const rawData = { test: { data: \"foo\" } };\n\n  const BASE_URL = \"https://my-site.com\";\n\n  server.use(\n    http.get(`${BASE_URL}/api/v1/foo`, () =>\n      HttpResponse.json(rawData, { status: 200 })\n    )\n  );\n\n  const client = createClient<paths>({\n    baseUrl: BASE_URL,\n  });\n\n  const { data, error } = await client.GET(\"/api/v1/foo\");\n\n  expect(data).toEqual(rawData);\n  expect(error).toBeUndefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Throwing in Middleware\nDESCRIPTION: Example of throwing custom errors based on response status in middleware. This is useful for libraries like TanStack Query that expect errors to be thrown for non-successful responses.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonResponse({ response }) {\n  if (!response.ok) {\n    // Will produce error messages like \"https://example.org/api/v1/example: 404 Not Found\".\n    throw new Error(`${response.url}: ${response.status} ${response.statusText}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Body Serialization for FormData\nDESCRIPTION: Shows how to implement a custom body serializer that converts the request body into FormData format, useful for multipart/form-data submissions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await client.PUT(\"/submit\", {\n  body: {\n    name: \"\",\n    query: { version: 2 },\n  },\n  bodySerializer(body) {\n    const fd = new FormData();\n    for (const name in body) {\n      fd.append(name, body[name]);\n    }\n    return fd;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useImmutable Hook with OpenAPI TypeScript\nDESCRIPTION: This example demonstrates how to use the useImmutable hook in OpenAPI TypeScript. It creates a client, sets up the hook, and shows how to destructure the returned values. The hook behaves like useQuery but disables automatic revalidations by using useSWRImmutable under the hood.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-immutable.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport { createQueryHook } from \"swr-openapi\";\nimport type { paths } from \"./my-schema\";\n\nconst useImmutable = createImmutableHook(client, \"my-api\");\n\nconst { data, error, isLoading, isValidating, mutate } = useImmutable(\n  path,\n  init,\n  config,\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming Single OpenAPI Schema to TypeScript\nDESCRIPTION: Examples of using the CLI to transform a single OpenAPI schema (local or remote) to TypeScript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript schema.yaml -o schema.ts\n\n# 🚀 schema.yaml -> schema.ts [50ms]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript https://petstore3.swagger.io/api/v3/openapi.yaml -o petstore.d.ts\n\n# 🚀 https://petstore3.swagger.io/api/v3/openapi.yaml -> petstore.d.ts [250ms]\n```\n\n----------------------------------------\n\nTITLE: Internal implementation of the useQuery hook\nDESCRIPTION: Shows the internal implementation of the useQuery hook. It wraps useSWR, uses the prefix for cache uniqueness, and makes GET requests with the provided path and init parameters, handling errors appropriately.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-query.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useQuery(path, ...[init, config]) {\n  return useSWR(\n    init !== null ? [prefix, path, init] : null,\n    async ([_prefix, path, init]) => {\n      const res = await client.GET(path, init);\n      if (res.error) {\n        throw res.error;\n      }\n      return res.data;\n    },\n    config,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced OpenAPI Fetch Usage with Path and Query Parameters\nDESCRIPTION: Extended example showing GET and PUT requests with path parameters, query parameters, and structured request bodies. Demonstrates type-safe request construction.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/index.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>({ baseUrl: \"https://myapi.dev/v1/\" });\n\nconst { data, error } = await client.GET(\"/blogposts/{post_id}\", {\n  params: {\n    path: { post_id: \"my-post\" },\n    query: { version: 2 },\n  },\n});\n\nconst { data, error } = await client.PUT(\"/blogposts\", {\n  body: {\n    title: \"New Post\",\n    body: \"<p>New post body</p>\",\n    publish_date: new Date(\"2023-03-01T12:00:00Z\").getTime(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Logging Middleware\nDESCRIPTION: Shows how to implement error logging in middleware without affecting the original error propagation. The original error will still be thrown after being logged.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonError({ error }) {\n  console.error(error);\n  return;\n},\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with feature-fetch in TypeScript\nDESCRIPTION: Illustrates the use of feature-fetch to make type-safe API requests. It shows GET and PUT requests with detailed error handling, using types generated by openapi-typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenApiFetchClient } from 'feature-fetch';\nimport type { paths } from './my-openapi-3-schema'; // generated by openapi-typescript\n\n// Create the OpenAPI fetch client\nconst fetchClient = createOpenApiFetchClient<paths>({\n  prefixUrl: 'https://myapi.dev/v1'\n});\n\n// Send a GET request\nconst response = await fetchClient.get('/blogposts/{post_id}', {\n  pathParams: {\n    post_id: '123',\n  },\n});\n\n// Handle the response (Approach 1: Standard if-else)\nif (response.isOk()) {\n  const data = response.value.data;\n  console.log(data); // Handle successful response\n} else {\n  const error = response.error;\n  if (error instanceof NetworkError) {\n    console.error('Network error:', error.message);\n  } else if (error instanceof RequestError) {\n    console.error('Request error:', error.message, 'Status:', error.status);\n  } else {\n    console.error('Service error:', error.message);\n  }\n}\n\n// Send a PUT request\nconst putResponse = await fetchClient.put('/blogposts', {\n  body: {\n    title: 'My New Post',\n  },\n});\n\n// Handle the response (Approach 2: Try-catch)\ntry {\n  const putData = putResponse.unwrap().data;\n  console.log(putData); // Handle the successful response\n} catch (error) {\n  // Handle the error\n  if (error instanceof NetworkError) {\n    console.error('Network error:', error.message);\n  } else if (error instanceof RequestError) {\n    console.error('Request error:', error.message, 'Status:', error.status);\n  } else {\n    console.error('Service error:', error.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading OpenAPI Schemas with openapi-typescript CLI\nDESCRIPTION: Basic usage of the openapi-typescript CLI to generate TypeScript types from a YAML schema file. The command reads schema.yaml and outputs the generated types to schema.ts.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript schema.yaml -o schema.ts\n\n# 🚀 schema.yaml -> schema.ts [7ms]\n```\n\n----------------------------------------\n\nTITLE: API Interface for useSuspenseQuery with TypeScript\nDESCRIPTION: The API interface for useSuspenseQuery showing the function signature with required and optional parameters. The method requires HTTP method and path parameters, with options for query parameters, query options, and a custom query client.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-suspense-query.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst query = $api.useSuspenseQuery(method, path, options, queryOptions, queryClient);\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Document from Controllers in TypeScript\nDESCRIPTION: Illustrates how to generate an OpenAPI document from controllers using the generateDocument function. It requires reflect-metadata and allows specifying basic document information.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport \"reflect-metadata\";\nimport { generateDocument } from \"openapi-metadata\";\nimport UsersController from \"./users_controller\";\n\nconst document = await generateDocument({\n  controllers: [UsersController],\n  document: {\n    info: {\n      title: \"My Api\",\n      version: \"1.0.0\",\n    },\n  },\n});\n\nconsole.log(document); // <- Your generated OpenAPI specifications\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger UI with openapi-metadata\nDESCRIPTION: Shows how to generate Swagger UI for API documentation using openapi-metadata. The function requires the API endpoint URL as a parameter to create Swagger UI's interactive documentation interface.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/ui.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateSwaggerUI } from \"openapi-metadata/ui\";\n\ngenerateSwaggerUI(\"http://localhost:3000/api\");\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueries Hook with queryOptions\nDESCRIPTION: Custom hook implementation that uses useQueries with queryOptions to fetch multiple users by their IDs simultaneously.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/query-options.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQueries } from '@tanstack/react-query';\nimport { $api } from \"./api\";\n\nexport const useUsersById = (userIds: number[]) => (\n  useQueries({\n    queries: userIds.map((userId) => (\n      $api.queryOptions(\"get\", \"/users/{user_id}\", {\n        params: {\n          path: { user_id: userId },\n        },\n      })\n    ))\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining JSONSchema $defs in OpenAPI 3 YAML\nDESCRIPTION: This YAML snippet demonstrates a correct way to define $defs in an OpenAPI 3 schema. It shows how to create a DefType with $defs and reference it in MyType.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    DefType:\n      type: object # ✅ `type: \"object\"` is OK to define $defs on\n      $defs:\n        myDefType:\n          type: string\n    MyType:\n      type: object\n      properties:\n        myType:\n          $ref: \"#/components/schemas/DefType/$defs/myDefType\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Serialization in TypeScript\nDESCRIPTION: Example of configuring querySerializer option when creating a client. This allows customization of how arrays and objects are serialized in query parameters, with options for different styles and explode settings.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  querySerializer: {\n    array: {\n      style: \"pipeDelimited\", // \"form\" (default) | \"spaceDelimited\" | \"pipeDelimited\"\n      explode: true,\n    },\n    object: {\n      style: \"form\", // \"form\" | \"deepObject\" (default)\n      explode: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Client Methods in TypeScript\nDESCRIPTION: Example of using the client to make GET requests with options. Options can include parameters, body data, serializers, and other fetch configurations.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.GET(\"/my-url\", options);\n```\n\n----------------------------------------\n\nTITLE: Generating Rapidoc UI with openapi-metadata\nDESCRIPTION: Illustrates how to generate Rapidoc UI for API documentation using openapi-metadata. The function accepts the API endpoint URL to create Rapidoc's responsive API documentation interface.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/ui.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateRapidocUI } from \"openapi-metadata/ui\";\n\ngenerateRapidocUI(\"http://localhost:3000/api\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Skipping Logic\nDESCRIPTION: Shows how to conditionally skip middleware execution based on the request path. This allows selective middleware application for different API endpoints.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonRequest({ schemaPath }) {\n  if (schemaPath !== \"/projects/{project_id}\") {\n    return undefined;\n  }\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Using oneOf Composition in OpenAPI Schema\nDESCRIPTION: Illustrates the recommended approach for using oneOf composition in OpenAPI schema to generate clear and discriminable TypeScript union types. Shows an ineffective example and an improved version.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  type: object\n  properties:\n    type:\n      type: string\n      enum:\n        - cat\n        - dog\n        - rabbit\n        - snake\n        - turtle\n    name:\n      type: string\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n    - $ref: \"#/components/schemas/Rabbit\"\n    - $ref: \"#/components/schemas/Snake\"\n    - $ref: \"#/components/schemas/Turtle\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n    - $ref: \"#/components/schemas/Rabbit\"\n    - $ref: \"#/components/schemas/Snake\"\n    - $ref: \"#/components/schemas/Turtle\"\nPetCommonProperties:\n  type: object\n  properties:\n    name:\n      type: string\nCat:\n  allOf:\n    - \"$ref\": \"#/components/schemas/PetCommonProperties\"\n  type:\n    type: string\n    enum:\n      - cat\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset-based Pagination\nDESCRIPTION: Example implementation of offset-based pagination using the useInfinite hook. Demonstrates how to handle page limits and offsets for fetching subsequent pages of data.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-infinite.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseInfinite(\"/something\", (pageIndex, previousPageData) => {\n  // No more pages\n  if (previousPageData && !previousPageData.hasMore) {\n    return null;\n  }\n\n  // First page\n  if (!previousPageData) {\n    return {\n      params: {\n        query: {\n          limit: 10,\n        },\n      },\n    };\n  }\n\n  // Next page\n  return {\n    params: {\n      query: {\n        limit: 10,\n        offset: 10 * pageIndex,\n      },\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Internal Implementation of useInfinite Hook\nDESCRIPTION: Shows the internal working mechanism of the useInfinite hook, demonstrating how it wraps useSWRInfinite and handles fetching data with proper error handling.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-infinite.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInfinite(path, getInit, config) {\n  const fetcher = async ([_, path, init]) => {\n    const res = await client.GET(path, init);\n    if (res.error) {\n      throw res.error;\n    }\n    return res.data;\n  };\n  const getKey = (index, previousPageData) => {\n    const init = getInit(index, previousPageData);\n    if (init === null) {\n      return null;\n    }\n    const key = [prefix, path, init];\n    return key;\n  };\n  return useSWRInfinite(getKey, fetcher, config);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Type Loader for Luxon DateTime\nDESCRIPTION: Implementation of a custom type loader function that converts Luxon DateTime types to string schema objects in the OpenAPI document. This function is passed to the generateDocument method.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/type-loader.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TypeLoaderFn, generateDocument } from \"openapi-metadata\";\nimport { DateTime } from \"luxon\";\n\nconst LuxonDateTimeLoader = (_context, value) => {\n  if (value === DateTime) {\n    return { type: \"string\" };\n  }\n};\n\nawait generateDocument({\n  loaders: [LuxonDateTimeLoader],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI TypeScript Definitions\nDESCRIPTION: CLI commands to generate TypeScript definition files from local or remote OpenAPI schemas.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Local schema\nnpx openapi-typescript ./path/to/my/schema.yaml -o ./path/to/my/schema.d.ts\n# Remote schema\nnpx openapi-typescript https://myapi.dev/api/v1/openapi.yaml -o ./path/to/my/schema.d.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing SWR Hooks with OpenAPI TypeScript\nDESCRIPTION: Example of creating API hook instances using the hook builder functions. This snippet demonstrates importing the necessary functions, creating a client with a typed schema, and exporting the initialized hooks for use in an application.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/hook-builders.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport { isMatch } from \"lodash-es\";\n\nimport {\n  createQueryHook,\n  createImmutableHook,\n  createInfiniteHook,\n  createMutateHook,\n} from \"swr-openapi\";\n\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createClient<paths>(/* ... */);\nconst prefix = \"my-api\";\n\nexport const useQuery = createQueryHook(client, prefix);\nexport const useImmutable = createImmutableHook(client, prefix);\nexport const useInfinite = createInfiniteHook(client, prefix);\nexport const useMutate = createMutateHook(\n  client,\n  prefix,\n  isMatch, // Or any comparision function\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom API Summary Decorator in TypeScript\nDESCRIPTION: Demonstrates how to create a custom decorator that defines an operation summary using OperationMetadataStorage. The decorator merges the provided summary with existing metadata.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/metadata.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OperationMetadataStorage } from \"openapi-metadata/metadata\";\n\nexport function ApiSummary(summary: string): MethodDecorator {\n  return (target, propertyKey) => {\n    OperationMetadataStorage.mergeMetadata(target, { summary }, propertyKey);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Improved OpenAPI Schema with Separated oneOf\nDESCRIPTION: Shows an improved OpenAPI schema design that separates oneOf from common properties, allowing for better TypeScript type generation with proper discriminated unions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n    - $ref: \"#/components/schemas/Rabbit\"\n    - $ref: \"#/components/schemas/Snake\"\n    - $ref: \"#/components/schemas/Turtle\"\nPetCommonProperties:\n  type: object\n  properties:\n    name:\n      type: string\nCat:\n  allOf:\n    - \"$ref\": \"#/components/schemas/PetCommonProperties\"\n  type:\n    type: string\n    enum:\n      - cat\n```\n\n----------------------------------------\n\nTITLE: Importing and Using OpenAPI Decorators in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the available decorators from the openapi-metadata package. These decorators are used to enrich OpenAPI specifications by adding metadata to controllers, methods, and models.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/decorators.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApiBody,\n  ApiCookie,\n  ApiExcludeController,\n  ApiExcludeOperation,\n  ApiExtraModels,\n  ApiHeader,\n  ApiOperation,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiQuery,\n  ApiResponse,\n  ApiSecurity,\n  ApiBasicAuth,\n  ApiOauth2,\n  ApiBearerAuth,\n  ApiCookieAuth,\n  ApiTags\n} from 'openapi-metadata/decorators'\n@ApiBody()\n@ApiCookie()\n@ApiExcludeController()\n@ApiExcludeOperation()\n@ApiExtraModels()\n@ApiHeader()\n@ApiOperation()\n@ApiParam()\n@ApiProperty()\n@ApiPropertyOptional()\n@ApiQuery()\n@ApiResponse()\n@ApiSecurity()\n@ApiBasicAuth()\n@ApiOAuth2()\n@ApiBearerAuth()\n@ApiCookieAuth()\n@ApiTags()\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Schema\nDESCRIPTION: Shows how to use openapi-typescript CLI to generate TypeScript type definitions from an OpenAPI schema file. This generates the necessary type definitions for type-safe API requests.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n----------------------------------------\n\nTITLE: Using Path-Property Style with OpenAPI Fetch\nDESCRIPTION: Alternative syntax for accessing API paths as properties, using createPathBasedClient. This approach has performance implications but offers a different coding style for working with the API.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/index.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPathBasedClient } from \"openapi-fetch\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst client = createPathBasedClient<paths>({\n  baseUrl: \"https://myapi.dev/v1\",\n});\n\nclient[\"/blogposts/{post_id}\"].GET({\n  params: { post_id: \"my-post\" },\n  query: { version: 2 },\n});\n```\n\n----------------------------------------\n\nTITLE: Using isMatch for Cache Updates with useMutate\nDESCRIPTION: Example demonstrating how lodash's isMatch function works with useMutate to determine which cached requests to update. Shows various scenarios of cache updates based on query parameter matching.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/hook-builders.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst useMutate = createMutateHook(client, \"<unique-key>\", isMatch);\n\nconst mutate = useMutate();\n\nawait mutate([\n  \"/path\",\n  {\n    params: {\n      query: {\n        version: \"beta\",\n      },\n    },\n  },\n]);\n\n// ✅ Would be updated\nuseQuery(\"/path\", {\n  params: {\n    query: {\n      version: \"beta\",\n    },\n  },\n});\n\n// ✅ Would be updated\nuseQuery(\"/path\", {\n  params: {\n    query: {\n      version: \"beta\",\n      other: true,\n      example: [1, 2, 3],\n    },\n  },\n});\n\n// ❌ Would not be updated\nuseQuery(\"/path\", {\n  params: {\n    query: {},\n  },\n});\n\n// ❌ Would not be updated\nuseQuery(\"/path\");\n\n// ❌ Would not be updated\nuseQuery(\"/path\", {\n  params: {\n    query: {\n      version: \"alpha\",\n    },\n  },\n});\n\n// ❌ Would not be updated\nuseQuery(\"/path\", {\n  params: {\n    query: {\n      different: \"items\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using $defs in Object Types for OpenAPI Schema\nDESCRIPTION: Demonstrates the correct usage of $defs within object types in OpenAPI schema to generate valid TypeScript types. Shows a working example and a non-working example.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    DefType:\n      type: object # ✅ `type: \"object\"` is OK to define $defs on\n      $defs:\n        myDefType:\n          type: string\n    MyType:\n      type: object\n      properties:\n        myType:\n          $ref: \"#/components/schemas/DefType/$defs/myDefType\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    DefType:\n      type: string # ❌ this won't keep its $defs\n      $defs:\n        myDefType:\n          type: string\n    MyType:\n      properties:\n        myType:\n          $ref: \"#/components/schemas/DefType/$defs/myDefType\"\n```\n\n----------------------------------------\n\nTITLE: Implementation of useMutate Hook in TypeScript\nDESCRIPTION: Core implementation of the useMutate hook that wraps SWR's mutate function. It uses useCallback to memoize the mutation function and includes logic for matching cache keys based on path and initialization options.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-mutate.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMutate() {\n  const { mutate } = useSWRConfig();\n  return useCallback(\n    ([path, init], data, opts) => {\n      return mutate(\n        (key) => {\n          if (!Array.isArray(key) || ![2, 3].includes(key.length)) {\n            return false;\n          }\n          const [keyPrefix, keyPath, keyOptions] = key;\n          return (\n            keyPrefix === prefix &&\n            keyPath === path &&\n            (init ? compare(keyOptions, init) : true)\n          );\n        },\n        data,\n        opts,\n      );\n    },\n    [mutate, prefix, compare],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Remote OpenAPI Schemas\nDESCRIPTION: Example of fetching and processing a remote OpenAPI schema. This command downloads and processes the Petstore API schema from a URL and saves the generated types to petstore.d.ts.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript https://petstore3.swagger.io/api/v3/openapi.yaml -o petstore.d.ts\n\n# 🚀 https://petstore3.swagger.io/api/v3/openapi.yaml -> petstore.d.ts [250ms]\n```\n\n----------------------------------------\n\nTITLE: Initializing useInfinite Hook with TypeScript\nDESCRIPTION: Basic setup and initialization of the useInfinite hook with TypeScript types and client configuration. Shows how to create and use the hook with its available return values.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-infinite.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from \"openapi-fetch\";\nimport { createQueryHook } from \"swr-openapi\";\nimport type { paths } from \"./my-schema\";\n\nconst client = createClient<paths>(/* ... */);\n\nconst useInfinite = createInfiniteHook(client, \"my-api\");\n\nconst {\n  data,\n  error,\n  isLoading,\n  isValidating,\n  mutate,\n  size,\n  setSize\n} = useInfinite(path, getInit, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for OpenAPI Types\nDESCRIPTION: Required TypeScript configuration changes in tsconfig.json to properly load and use the generated types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useQuery Method Signature\nDESCRIPTION: TypeScript definition showing the function signature and parameters for the useQuery method, including method, path, options, and query configuration.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-query.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst query = $api.useQuery(method, path, options, queryOptions, queryClient);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic OpenAPI Document in TypeScript\nDESCRIPTION: Shows how to generate a simple OpenAPI document with basic information without any controllers. This serves as a starting point for building the documentation.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"reflect-metadata\";\nimport { generateDocument } from \"openapi-metadata\";\n\nconst document = await generateDocument({\n  controllers: [],\n  document: {\n    info: {\n      title: \"My API\",\n      version: \"1.0.0\",\n    },\n  },\n});\n\nconsole.log(document); // <- Your generated OpenAPI specifications\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenAPI TypeScript with Express\nDESCRIPTION: This example shows how to integrate openapi-typescript with Express to generate and serve OpenAPI documentation. It also demonstrates how to set up a UI endpoint using Scalar UI for visualizing the API documentation.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/examples.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport express from \"express\";\nimport { generateDocument } from \"openapi-metadata\";\nimport { generateScalarUI } from \"openapi-metadata/ui\";\n\nconst app = express();\n\nconst document = await generateDocument(yourConfiguration);\n\napp.get(\"/api\", async (req, res) => {\n  res.send(JSON.stringify(document));\n});\n\napp.get(\"/api/docs\", (req, res) => {\n  const ui = generateScalarUI(\"/api\");\n  res.send(ui);\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Controllers into OpenAPI Document Generation\nDESCRIPTION: Shows how to register controllers when generating the OpenAPI document, combining all the previous steps into a complete workflow.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport \"reflect-metadata\";\nimport { generateDocument } from \"openapi-metadata\";\nimport UsersController from \"./controllers/users_controller.ts\";\n\nconst document = await generateDocument({\n  controllers: [UsersController],\n  document: {\n    info: {\n      name: \"My API\",\n      version: \"1.0.0\",\n    },\n  },\n});\n\nconsole.log(document); // <- Your generated OpenAPI specifications\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Type Loader with Component References\nDESCRIPTION: Advanced implementation of a custom type loader that generates schema components and returns references to them, useful for complex schema structures.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/type-loader.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomLoader: TypeLoaderFn = (context, value) => {\n  if (isCustom(value)) {\n    const [name, schema] = generateCustomSchema(value);\n\n    context.schemas[name] = schema;\n\n    return { $ref: `#/components/schemas/${name}` };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Recovery Middleware\nDESCRIPTION: Shows how to recover from fetch errors by returning a fallback Response object. This makes the fetch operation appear successful with custom response data instead of throwing an error.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonError({ error }) {\n  return Response.json({ message: 'nothing to see' });\n},\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI TypeScript Definitions\nDESCRIPTION: CLI commands to generate TypeScript type definitions from local or remote OpenAPI schemas.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/introduction.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Local schema\nnpx openapi-typescript ./path/to/my/schema.yaml -o ./path/to/my/schema.d.ts\n# Remote schema\nnpx openapi-typescript https://myapi.dev/api/v1/openapi.yaml -o ./path/to/my/schema.d.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with API Operations in TypeScript\nDESCRIPTION: Demonstrates how to create a UsersController class with an API operation for listing users. The controller uses decorators to define the HTTP method, path, summary, and response type.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiOperation, ApiResponse } from \"openapi-metadata/decorators\";\nimport User from \"./user\";\n\nclass UsersController {\n  @ApiOperation({\n    methods: [\"get\"],\n    path: \"/users\",\n    summary: \"List users\"\n  })\n  @ApiResponse({ type: [User] })\n  async list() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Enum Extension Example\nDESCRIPTION: Demonstrates usage of x-enum-varnames and x-enum-descriptions extensions for enhanced enum definitions in OpenAPI schemas.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nErrorCode:\n  type: integer\n  format: int32\n  enum:\n    - 100\n    - 200\n    - 300\n  x-enum-varnames:\n    - Unauthorized\n    - AccessDenied\n    - Unknown\n  x-enum-descriptions:\n    - \"User is not authorized\"\n    - \"User has no access to this resource\"\n    - \"Something went wrong\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Object Types with Additional Properties in OpenAPI Schema\nDESCRIPTION: Demonstrates how to properly define object types with additional properties in OpenAPI schema to generate specific TypeScript types. Shows progression from least to most specific definitions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Schema\nDESCRIPTION: Command to generate TypeScript types from an OpenAPI schema using openapi-typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema with Luxon DateTime Type in TypeScript\nDESCRIPTION: Example of a TypeScript class definition that uses Luxon's DateTime type, which requires a custom type loader for proper OpenAPI schema generation.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/type-loader.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from \"luxon\";\n\nexport default class User {\n  @ApiProperty()\n  createdAt: DateTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Wrapping Middleware\nDESCRIPTION: Demonstrates how to wrap fetch errors with custom error instances, preserving the original error as the cause. This allows for more descriptive error messages while maintaining the error chain.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonError({ error }) {\n  return new Error(\"Oops\", { cause: error });\n},\n```\n\n----------------------------------------\n\nTITLE: Working Example of JSONSchema $defs with Object Type\nDESCRIPTION: An example of correctly using JSONSchema $defs within an object type schema, allowing the definitions to be properly referenced in TypeScript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    DefType:\n      type: object # ✅ `type: \"object\"` 是可以在上面定义 $defs 的\n      $defs:\n        myDefType:\n          type: string\n    MyType:\n      type: object\n      properties:\n        myType:\n          $ref: \"#/components/schemas/DefType/$defs/myDefType\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple Types in OpenAPI Schema\nDESCRIPTION: Shows how to properly define tuple types in OpenAPI schema to generate specific TypeScript types. Demonstrates progression from least to most specific definitions for an [x, y] coordinate tuple.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: number\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: number\nmaxItems: 2\nminItems: 2\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: number\nprefixItems:\n  - number\n  - number\n```\n\n----------------------------------------\n\nTITLE: Using the Node.js API in openapi-typescript\nDESCRIPTION: Example showing the basic usage of the openapi-typescript Node.js API. In version 7.x, the input parameter can be a JavaScript object, a JSON/YAML string, or a URL pointing to a local or remote file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/migration-guide.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport openapiTS from \"openapi-typescript\";\n\nawait openapiTS(input);\n```\n\n----------------------------------------\n\nTITLE: Ejecting Middleware from Client\nDESCRIPTION: Demonstrates how to remove previously registered middleware from an openapi-typescript client instance using the eject method.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/middleware-auth.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware = {\n  // …\n};\n\n// register middleware\nclient.use(myMiddleware);\n\n// remove middleware\nclient.eject(myMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Globbing Multiple OpenAPI Schema Files\nDESCRIPTION: Example of using globbing patterns to process multiple YAML schema files at once. This command processes all YAML files in the specs directory and outputs the generated types to the schemas directory.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript \"specs/**/*.yaml\" -o schemas/\n\n# 🚀 specs/one.yaml -> schemas/specs/one.ts [7ms]\n# 🚀 specs/two.yaml -> schemas/specs/two.ts [7ms]\n# 🚀 specs/three.yaml -> schemas/specs/three.ts [7ms]\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Enum with Custom Names and Documentation\nDESCRIPTION: The resulting TypeScript enum that is generated from the OpenAPI schema using x-enum-varnames and x-enum-descriptions extensions, with each value properly named and documented.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum ErrorCode {\n  // User is not authorized\n  Unauthorized = 100\n  // User has no access to this resource\n  AccessDenied = 200\n  // Something went wrong\n  Unknown = 300\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Response Type Utility Implementation\nDESCRIPTION: Utility function implementation for type-safe API mocking, including path matching and response generation based on OpenAPI schema types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function mockResponses(responses: {\n  [Path in keyof Partial<paths>]: {\n    [Method in keyof Partial<paths[Path]>]: MockedResponse<\n      PathResponses<paths[Path][Method]>\n    >;\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using mergeMetadata Method in TypeScript\nDESCRIPTION: Demonstrates how to use the mergeMetadata method to merge new metadata with existing metadata using deepmerge functionality.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/metadata.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OperationMetadataStorage } from \"openapi-metadata/metadata\";\n\n// Without propertyKey\nOperationMetadataStorage.mergeMetadata(target, { summary: \"Hello world\" });\n\n// With propertyKey\nOperationMetadataStorage.mergeMetadata(\n  target,\n  { summary: \"Hello world\" },\n  propertyKey,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Detailed Schema with Examples in TypeScript\nDESCRIPTION: Shows how to create a more complex User schema with multiple properties, examples, and optional fields using the ApiProperty decorator.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from \"openapi-metadata/decorators\";\n\nexport default class User {\n  @ApiProperty()\n  declare id: string;\n\n  @ApiProperty({ example: \"John Doe\" })\n  declare name: string;\n\n  @ApiProperty()\n  declare email: string;\n\n  @ApiProperty({ required: false })\n  declare mobile?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Middlewares to Path-Based Client in TypeScript\nDESCRIPTION: This example shows how to attach middlewares to a client before wrapping it as a path-based client. The middlewares applied to the original client will propagate to the path-based client.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient<paths>(clientOptions);\n\nclient.use(...);\n\nconst pathBasedClient = wrapAsPathBasedClient(client);\n\nclient.use(...); // the client reference is shared, so the middlewares will propagate.\n\npathBasedClient[\"/my-url\"].GET(fetchOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Redocly Config\nDESCRIPTION: Example of setting up authentication for non-public schemas in the Redocly configuration file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresolve:\n  http:\n    headers:\n      - matches: https://api.example.com/v2/**\n        name: X-API-KEY\n        envVariable: SECRET_KEY\n      - matches: https://example.com/*/test.yaml\n        name: Authorization\n        envVariable: SECRET_AUTH\n```\n\n----------------------------------------\n\nTITLE: Using createPathBasedClient Convenience Method in TypeScript\nDESCRIPTION: The createPathBasedClient is a convenience method that combines createClient and wrapAsPathBasedClient. It creates a path-based client directly without needing separate wrapper calls.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/api.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createPathBasedClient<paths>(clientOptions);\n\nclient[\"/my-url\"].GET(fetchOptions);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for openapi-react-query in Bash\nDESCRIPTION: This snippet shows the bash commands to install openapi-react-query and its dependencies, including openapi-fetch, openapi-typescript, and typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/openapi-react-query/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i openapi-react-query openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Decorators in tsconfig.json\nDESCRIPTION: Shows the required TypeScript compiler options for enabling decorators and metadata emission, which are necessary for the library to work.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using openapi-typescript with Hono in TypeScript\nDESCRIPTION: Shows how to use openapi-typescript generated types with Hono, a modern server framework. It demonstrates type-safe response handling for both successful and error cases.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/examples.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { components, paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst app = new Hono();\n\n/** /users */\napp.get(\"/users\", async (ctx) => {\n  try {\n    const users = db.get(\"SELECT * from users\");\n    return ctx.json<\n      paths[\"/users\"][\"responses\"][200][\"content\"][\"application/json\"]\n    >(users);\n  } catch (err) {\n    return ctx.json<components[\"schemas\"][\"Error\"]>({\n      status: 500,\n      message: err ?? \"An error occurred\",\n    });\n  }\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Compare Function Type Definition for createMutateHook\nDESCRIPTION: TypeScript type definition for the compare function parameter used in createMutateHook. This function determines whether cached requests should be updated when mutate is called with specific fetch options.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/hook-builders.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Compare = (init: any, partialInit: object) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Improved oneOf Schema Design with Proper Structure\nDESCRIPTION: A better approach to designing a schema with oneOf, using a base type for common properties and distinct types for variants, resulting in cleaner TypeScript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n    - $ref: \"#/components/schemas/Rabbit\"\n    - $ref: \"#/components/schemas/Snake\"\n    - $ref: \"#/components/schemas/Turtle\"\nPetCommonProperties:\n  type: object\n  properties:\n    name:\n      type: string\nCat:\n  allOf:\n    - \"$ref\": \"#/components/schemas/PetCommonProperties\"\n  type:\n    type: string\n    enum:\n      - cat\n```\n\n----------------------------------------\n\nTITLE: Installing openapi-typescript via npm\nDESCRIPTION: Command to install openapi-typescript as a dev dependency using npm.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/node.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev openapi-typescript\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for openapi-typescript\nDESCRIPTION: Shows how to enable debugging output by setting the DEBUG environment variable, which can help troubleshoot issues with the openapi-typescript CLI tool. Debug messages can be limited to specific scopes like redoc, lint, bundle, or ts.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ DEBUG=openapi-ts:* npx openapi-typescript schema.yaml -o my-types.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring API Client with OpenAPI TypeScript\nDESCRIPTION: Setup code for creating a typed API client using openapi-fetch and openapi-react-query, with OpenAPI schema integration for TypeScript support.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-mutation.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nexport const $api = createClient(fetchClient);\n```\n\n----------------------------------------\n\nTITLE: Problematic Schema with Mixed oneOf and Properties\nDESCRIPTION: Example of a suboptimal OpenAPI schema that mixes oneOf with regular properties, which leads to complex TypeScript type generation that's hard to work with.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  type: object\n  properties:\n    type:\n      type: string\n      enum:\n        - cat\n        - dog\n        - rabbit\n        - snake\n        - turtle\n    name:\n      type: string\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n    - $ref: \"#/components/schemas/Rabbit\"\n    - $ref: \"#/components/schemas/Snake\"\n    - $ref: \"#/components/schemas/Turtle\"\n```\n\n----------------------------------------\n\nTITLE: queryOptions API Definition\nDESCRIPTION: API signature and type definition for the queryOptions method, showing required and optional parameters along with their usage.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/query-options.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst queryOptions = $api.queryOptions(method, path, options, queryOptions);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useMutate Hook in TypeScript\nDESCRIPTION: Example showing the basic usage pattern of the useMutate hook for mutating SWR cache data.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/use-mutate.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutate = useMutate();\n\nawait mutate([path, init], data, options);\n```\n\n----------------------------------------\n\nTITLE: Custom Date Type Transformation in openapi-typescript\nDESCRIPTION: Example of using the transform option to convert 'date-time' format strings to Date objects in the generated TypeScript types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/node.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst types = openapiTS(mySchema, {\n  transform(schemaObject, metadata): string {\n    if (\"format\" in schemaObject && schemaObject.format === \"date-time\") {\n      return schemaObject.nullable ? \"Date | null\" : \"Date\";\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Schema\nDESCRIPTION: Command to generate TypeScript type definitions from an OpenAPI schema file using openapi-typescript. This creates the necessary type interfaces for use with openapi-fetch.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n----------------------------------------\n\nTITLE: Tuple Array Schema with Fixed Length\nDESCRIPTION: An array schema that constrains the length with minItems and maxItems to create a tuple-like structure in TypeScript, providing more precise typing.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: number\nmaxItems: 2\nminItems: 2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating arrayLength Option\nDESCRIPTION: Examples showing the difference in type generation for arrays with minItems and maxItems when using the --array-length option.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/cli.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    TupleType:\n      type: array\n      items:\n        type: string\n      minItems: 1\n      maxItems: 2\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface components {\n  schemas: {\n    TupleType: string[];\n    TupleType: [string] | [string, string];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Enum with Custom Names and Comments\nDESCRIPTION: Shows the TypeScript enum output generated from an OpenAPI schema using x-enum-varnames and x-enum-descriptions extensions. The generated enum includes meaningful variable names and descriptive comments.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nenum ErrorCode {\n  // User is not authorized\n  Unauthorized = 100\n  // User has no access to this resource\n  AccessDenied = 200\n  // Something went wrong\n  Unknown = 300\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Blob Type Transformation in openapi-typescript\nDESCRIPTION: Example of using the transform option to convert 'binary' format strings to Blob objects in the generated TypeScript types, useful for file uploads.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/node.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst types = openapiTS(mySchema, {\n  transform(schemaObject, metadata): string {\n    if (\"format\" in schemaObject && schemaObject.format === \"binary\") {\n      return schemaObject.nullable ? \"Blob | null\" : \"Blob\";\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using defineMetadata Method in TypeScript\nDESCRIPTION: Shows how to use the defineMetadata method to set metadata with and without propertyKey. This method overwrites existing metadata.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/metadata.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OperationMetadataStorage } from \"openapi-metadata/metadata\";\n\n// Without propertyKey\nOperationMetadataStorage.defineMetadata(target, { summary: \"Hello world\" });\n\n// With propertyKey\nOperationMetadataStorage.defineMetadata(\n  target,\n  { summary: \"Hello world\" },\n  propertyKey,\n);\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Object with Untyped Additional Properties\nDESCRIPTION: The TypeScript type generated from an object schema with untyped additional properties, resulting in a Record with unknown values.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript for Working $defs Example\nDESCRIPTION: The TypeScript interface generated from a schema using $defs correctly, preserving the definitions structure and allowing proper referencing of the defined types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface components {\n  schemas: {\n    DefType: {\n      $defs: {\n        myDefType: string;\n      };\n    };\n    MyType: {\n      myType?: components[\"schemas\"][\"DefType\"][\"$defs\"][\"myDefType\"]; // ✅ 可以工作\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Object with Typed Additional Properties\nDESCRIPTION: The TypeScript type generated from an object schema with typed additional properties, resulting in a Record with specific value types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Schema\nDESCRIPTION: This command demonstrates how to use openapi-typescript to generate TypeScript types from an OpenAPI schema file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Fetch and Dependencies\nDESCRIPTION: Commands to install openapi-fetch along with its dependencies openapi-typescript and typescript. These packages are required for generating TypeScript types from OpenAPI schemas.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Object Schema with Untyped Additional Properties\nDESCRIPTION: An object schema that allows additional properties but doesn't specify their type, resulting in a TypeScript type that allows any string key with unknown values.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties: true\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Type Definition\nDESCRIPTION: Example of TypeScript type definition for API paths with URL parameters.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface paths {\n  \"/user/{user_id}\": components[\"schemas\"][\"User\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Schema Transformations\nDESCRIPTION: Example of a redocly.yaml configuration file for transforming multiple OpenAPI schemas.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napis:\n  core@v2:\n    root: ./openapi/openapi.yaml\n    x-openapi-ts:\n      output: ./openapi/openapi.ts\n  external@v1:\n    root: ./openapi/external.yaml\n    x-openapi-ts:\n      output: ./openapi/external.ts\n```\n\n----------------------------------------\n\nTITLE: API Client Configuration Setup\nDESCRIPTION: Setup code for creating and configuring the API client with OpenAPI TypeScript integration. Shows how to initialize the fetch client with base URL and type definitions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/use-query.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nexport const $api = createClient(fetchClient);\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Untyped Array\nDESCRIPTION: The TypeScript type generated from an untyped array schema, resulting in an array of unknown elements.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nunknown[]\n```\n\n----------------------------------------\n\nTITLE: Converting Single OpenAPI Schema with CLI\nDESCRIPTION: Basic CLI command to convert a YAML schema to TypeScript types with output file specification.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript schema.yaml -o schema.ts\n\n# 🚀 schema.yaml -> schema.ts [50ms]\n```\n\n----------------------------------------\n\nTITLE: Tuple Array Schema with Prefix Items\nDESCRIPTION: An alternative array schema using prefixItems to define a tuple structure in TypeScript, which is the recommended approach in OpenAPI 3.1.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: number\nprefixItems:\n  - number\n  - number\n```\n\n----------------------------------------\n\nTITLE: Configuring API Client with OpenAPI TypeScript\nDESCRIPTION: Setup code for creating and configuring the API client using openapi-fetch and openapi-react-query with TypeScript path definitions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/query-options.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFetchClient from \"openapi-fetch\";\nimport createClient from \"openapi-react-query\";\nimport type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\nconst fetchClient = createFetchClient<paths>({\n  baseUrl: \"https://myapi.dev/v1/\",\n});\nexport const $api = createClient(fetchClient);\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js API TypeScript AST Usage\nDESCRIPTION: Shows migration example for Node.js API to use TypeScript AST instead of string literals. The change requires using typescript compiler API to create type nodes.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ import ts from \"typescript\";\n\n+ const DATE = ts.factory.createIdentifier(\"Date\");\n+ const NULL = ts.factory.createLiteralTypeNode(ts.factory.createNull());\n\n  const ast = await openapiTS(mySchema, {\n    transform(schemaObject, metadata) {\n      if (schemaObject.format === \"date-time\") {\n-       return schemaObject.nullable ? \"Date | null\" : \"Date\";\n+       return schemaObject.nullable\n+         ? ts.factory.createUnionTypeNode([DATE, NULL])\n+         : DATE;\n      }\n    },\n  };\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript types from local OpenAPI schema\nDESCRIPTION: Command to generate TypeScript types from a local OpenAPI schema file. This creates a type declaration file that can be imported into your TypeScript projects.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/introduction.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Local schema\nnpx openapi-typescript ./path/to/my/schema.yaml -o ./path/to/my/schema.d.ts\n# 🚀 ./path/to/my/schema.yaml -> ./path/to/my/schema.d.ts [7ms]\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript for Problematic $defs Example\nDESCRIPTION: The TypeScript interface generated from a schema that incorrectly uses $defs with a primitive type, resulting in a type error because the definitions are lost in the translation to TypeScript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface components {\n  schemas: {\n    DefType: string;\n    MyType: {\n      myType?: components[\"schemas\"][\"DefType\"][\"$defs\"][\"myDefType\"]; // ❌ 类型 'String' 上不存在属性 '$defs'。\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming OpenAPI Schema with $defs to TypeScript\nDESCRIPTION: This TypeScript snippet shows the successful transformation of the OpenAPI schema with $defs. It demonstrates how the $defs are preserved and can be referenced in the resulting TypeScript interface.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface components {\n  schemas: {\n    DefType: {\n      $defs: {\n        myDefType: string;\n      };\n    };\n    MyType: {\n      myType?: components[\"schemas\"][\"DefType\"][\"$defs\"][\"myDefType\"]; // ✅ Works\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata with getMetadata Method in TypeScript\nDESCRIPTION: Shows different ways to retrieve stored metadata using getMetadata, including options for merging with parent metadata.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/metadata.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OperationMetadataStorage } from \"openapi-metadata/metadata\";\n\nOperationMetadataStorage.getMetadata(target);\nOperationMetadataStorage.getMetadata(target, propertyKey);\nOperationMetadataStorage.getMetadata(target, propertyKey, true);\n```\n\n----------------------------------------\n\nTITLE: Generating Scalar UI with openapi-metadata\nDESCRIPTION: Demonstrates how to generate Scalar UI for API documentation using openapi-metadata. The function takes the API endpoint URL as an argument to display your API documentation using Scalar's interface.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/ui.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateScalarUI } from \"openapi-metadata/ui\";\n\ngenerateScalarUI(\"http://localhost:3000/api\");\n```\n\n----------------------------------------\n\nTITLE: Object Schema with Typed Additional Properties\nDESCRIPTION: An object schema that specifies the type of additional properties, resulting in a strongly-typed TypeScript Record that provides better type safety.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Adding custom properties to request object in TypeScript\nDESCRIPTION: Allows the request object to have custom properties.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1653](https://github.com/openapi-ts/openapi-typescript/pull/1653) [`4f4253a`](https://github.com/openapi-ts/openapi-typescript/commit/4f4253a031820a664499b9df7ed5c8b192aa98b3) Thanks [@FreeAoi](https://github.com/FreeAoi)! - Let request object have custom properties\n```\n\n----------------------------------------\n\nTITLE: Installing openapi-react-query and Dependencies with npm\nDESCRIPTION: This snippet shows the npm commands to install openapi-react-query and its dependencies, including openapi-fetch and openapi-typescript. It also includes TypeScript as a dev dependency.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i openapi-react-query openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MetadataStorage in TypeScript\nDESCRIPTION: Demonstrates how to create a custom metadata storage using createMetadataStorage function with custom metadata type definition.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/metadata.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadataStorage } from \"openapi-metadata/metadata\";\n\ntype CustomMetadata = { foo: \"bar\" };\n\nconst CustomMetadataKey = Symbol(\"Custom\");\n\nconst CustomMetadataStorage =\n  createMetadataStorage<CustomMetadata>(CustomMetadataKey);\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript definitions from OpenAPI schema\nDESCRIPTION: Example command using openapi-typescript to generate TypeScript type definitions from an OpenAPI JSON endpoint, saving them to a local file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/swr-openapi/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx openapi-typescript \"https://sandwiches.example/openapi/json\" --output ./types/sandwich-schema.ts\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI TypeScript Dependencies\nDESCRIPTION: Command to install the required npm packages for using openapi-typescript with a TypeScript project.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Fixing request option types in TypeScript\nDESCRIPTION: Corrects the display of optional properties in request option types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1639](https://github.com/openapi-ts/openapi-typescript/pull/1639) [`645f436`](https://github.com/openapi-ts/openapi-typescript/commit/645f4366d2907b05eee1e6ec33d13edab8614fa1) Thanks [@FreeAoi](https://github.com/FreeAoi)! - fix request option types don't showing optional props correctly\n```\n\n----------------------------------------\n\nTITLE: Running openapi-typescript with Redocly config\nDESCRIPTION: With a redocly.config.yml file declared, you can run the CLI command with no arguments to generate TypeScript definitions for all configured schemas.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/migration-guide.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx openapi-typescript\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript types from remote OpenAPI schema\nDESCRIPTION: Command to generate TypeScript types from a remote OpenAPI schema URL. This downloads the schema and creates a local type declaration file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/introduction.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Remote schema\nnpx openapi-typescript https://myapi.dev/api/v1/openapi.yaml -o ./path/to/my/schema.d.ts\n# 🚀 https://myapi.dev/api/v1/openapi.yaml -> ./path/to/my/schema.d.ts [250ms]\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Schema\nDESCRIPTION: This command demonstrates how to use openapi-typescript to generate TypeScript types from an OpenAPI schema file. It specifies the input YAML file and the output TypeScript declaration file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-react-query/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n----------------------------------------\n\nTITLE: Converting Remote OpenAPI Schema\nDESCRIPTION: CLI command to convert a remote OpenAPI schema to TypeScript type definitions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript https://petstore3.swagger.io/api/v3/openapi.yaml -o petstore.d.ts\n\n# 🚀 https://petstore3.swagger.io/api/v3/openapi.yaml -> petstore.d.ts [250ms]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Testing in package.json\nDESCRIPTION: Configuration for adding TypeScript typechecking to the project's test suite. Adds a script that runs the TypeScript compiler without emitting output to catch type errors.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-fetch/index.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test:ts\": \"tsc --noEmit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI TypeScript Dependencies\nDESCRIPTION: Command to install openapi-typescript and typescript as dev dependencies using npm.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Generating ApiPaths Enum from OpenAPI Paths in TypeScript\nDESCRIPTION: This code snippet demonstrates the result of enabling the '--make-paths-enum' option. It generates an enum called ApiPaths that contains all the paths defined in the OpenAPI schema, allowing easy reference to these paths in TypeScript code.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/cli.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ApiPaths {\n  \"/user/{user_id}\" = \"/user/{user_id}\",\n  \"/user\" = \"/user\",\n  \"/user/{user_id}/pets\" = \"/user/{user_id}/pets\",\n  \"/user/{user_id}/pets/{pet_id}\" = \"/user/{user_id}/pets/{pet_id}\",\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Schema using openapi-typescript\nDESCRIPTION: This bash command demonstrates how to use openapi-typescript to generate TypeScript types from an OpenAPI schema file.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/openapi-react-query/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n----------------------------------------\n\nTITLE: Installing openapi-react-query and Dependencies\nDESCRIPTION: Commands to install openapi-react-query along with its required dependencies using npm.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i openapi-react-query openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Index Access Checking\nDESCRIPTION: Recommended tsconfig.json setting to improve type safety with noUncheckedIndexedAccess option.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/introduction.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noUncheckedIndexedAccess\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enums with Custom Names and Descriptions in OpenAPI\nDESCRIPTION: Example of using x-enum-varnames and x-enum-descriptions extensions to provide custom enum names and documentation for each enum value. The extensions must have the same number of items as the enum array.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nErrorCode:\n  type: integer\n  format: int32\n  enum:\n    - 100\n    - 200\n    - 300\n  x-enum-varnames:\n    - Unauthorized\n    - AccessDenied\n    - Unknown\n  x-enum-descriptions:\n    - \"User is not authorized\"\n    - \"User has no access to this resource\"\n    - \"Something went wrong\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Schema Configuration\nDESCRIPTION: Redocly YAML configuration for handling multiple OpenAPI schemas with custom output paths.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napis:\n  core@v2:\n    root: ./openapi/openapi.yaml\n    x-openapi-ts:\n      output: ./openapi/openapi.ts\n  external@v1:\n    root: ./openapi/external.yaml\n    x-openapi-ts:\n      output: ./openapi/external.ts\n```\n\n----------------------------------------\n\nTITLE: Installing openapi-typescript via npm\nDESCRIPTION: Command to install openapi-typescript as a dev dependency in your project. Requires Node.js (20.x or higher recommended).\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D openapi-typescript\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SWR OpenAPI Integration\nDESCRIPTION: Shows the npm commands to install the required packages for swr-openapi. Includes both runtime dependencies (swr-openapi and openapi-fetch) and development dependencies (openapi-typescript and typescript).\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/swr-openapi/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i swr-openapi openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests in OpenAPI TypeScript\nDESCRIPTION: Command to run individual tests by specifying a partial filename pattern.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm test -- [partial filename]\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Enum\nDESCRIPTION: Example of how the YAML enum definition with extensions gets transformed into TypeScript code with comments.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/advanced.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nenum ErrorCode {\n  // User is not authorized\n  Unauthorized = 100\n  // User has no access to this resource\n  AccessDenied = 200\n  // Something went wrong\n  Unknown = 300\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pathParamsAsTypes Option\nDESCRIPTION: Examples showing the difference in type generation and usage with and without the --path-params-as-types option.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/cli.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface paths {\n  \"/user/{user_id}\": components[\"schemas\"][\"User\"];\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { paths } from \"./my-openapi-3-schema\";\n\nconst url = `/user/${id}`;\ntype UserResponses = paths[\"/user/{user_id}\"][\"responses\"];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { paths } from \"./my-openapi-3-schema\";\n\nconst url = `/user/${id}`;\ntype UserResponses = paths[url][\"responses\"]; // automatically matches `paths['/user/{user_id}']`\n```\n\n----------------------------------------\n\nTITLE: Installing openapi-fetch and Dependencies\nDESCRIPTION: This snippet shows the npm commands to install openapi-fetch along with its dependencies openapi-typescript and typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\n----------------------------------------\n\nTITLE: Array Length Type Definition\nDESCRIPTION: Example of TypeScript type definition with array length constraints using minItems and maxItems.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface components {\n  schemas: {\n    TupleType: [string] | [string, string];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Test Suite in Watch Mode\nDESCRIPTION: Command to run the Vitest test suite in watch mode for continuous testing during development.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx vitest\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode for OpenAPI TypeScript\nDESCRIPTION: Command to run the development mode which automatically compiles code as changes are made.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enhanced TypeScript Safety Configuration\nDESCRIPTION: Additional recommended TypeScript configuration for improved type safety when working with generated OpenAPI types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noUncheckedIndexedAccess\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Linting with Biome\nDESCRIPTION: Command to execute the linting process using Biome, a faster ESLint replacement.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Metadata Dependencies with npm\nDESCRIPTION: Shows how to install the required packages openapi-metadata and reflect-metadata using npm.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install openapi-metadata reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Starting Test Suite in Watch Mode for openapi-typescript\nDESCRIPTION: This command starts the entire test suite in watch mode using Vitest for the openapi-typescript project.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-metadata/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx vitest\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenAPI TypeScript\nDESCRIPTION: Command to run the entire test suite once. Tests validate the production build in the dist/ directory.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode with Vitest\nDESCRIPTION: Command to start the test suite in watch mode using Vitest directly.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx vitest\n```\n\n----------------------------------------\n\nTITLE: Installing swr-openapi and dependencies\nDESCRIPTION: Command to install swr-openapi along with its required dependencies: swr and openapi-fetch.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/swr-openapi/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install swr-openapi swr openapi-fetch\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tests in openapi-typescript Project\nDESCRIPTION: Command to run a specific test by providing a partial filename pattern.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test -- [partial filename]\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode for OpenAPI TypeScript\nDESCRIPTION: Command to start the entire test suite in watch mode using Vitest.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx vitest\n```\n\n----------------------------------------\n\nTITLE: Dynamic Path Parameter Usage\nDESCRIPTION: Example of TypeScript code using path parameter types for dynamic URL lookup.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { paths } from \"./my-openapi-3-schema\";\n\nconst url = `/user/${id}`;\ntype UserResponses = paths[url][\"responses\"];\n```\n\n----------------------------------------\n\nTITLE: Running Tests in openapi-typescript Project with pnpm\nDESCRIPTION: Command to run the entire test suite using pnpm. This project uses Vitest for testing.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test for openapi-typescript\nDESCRIPTION: This command runs a specific test file for the openapi-typescript project using pnpm. The [partial filename] should be replaced with the name of the test file to run.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-metadata/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test -- [partial filename]\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for OpenAPI TypeScript\nDESCRIPTION: Command to generate a changeset for documenting changes in a human-readable format, which will be included in the official changelog during the next release.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: HTML List with Fedora SVG Logo\nDESCRIPTION: SVG implementation of the Fedora Linux logo as a list item, with specific path data and dimensions set to 382x96 viewBox.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/index.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<li><svg title=\"Fedora\" height=\"24\" viewBox=\"0 0 382 96\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m.00774375 47.9625c.01511245-23.175 18.79855625-41.9625 41.99225625-41.9625s42 18.8063 42 42-18.7875 41.9812-41.9812 42h-32.46942c-5.26688 0-9.53378-4.2562-9.54158-9.525h-.0078v-32.5125zm64.22975625-11.8313c0-7.4437-6.675-12.8437-13.725-12.8437-6.5438 0-12.3375 4.9313-13.1437 11.2313-.0375.7125-.0751.9375-.0751 1.5937-.0187 3.9563.0001 8.025-.1499 12.075.1687 4.8938.1875 9.7688 0 14.3625 0 5.0813-3.6376 8.5313-8.3813 8.5313-4.7438 0-8.5875-3.7875-8.5875-8.5313.0937-5.1937 4.2375-8.4937 9.0938-8.6438h.0375l4.9312-.0375v-6.9937l-4.9312.0375c-8.8313-.075-15.8588 6.8438-16.1138 15.6375 0 8.55 7.0387 15.5438 15.57 15.5438 8.0625 0 14.7562-6.3001 15.4875-14.1751l.0375-10.0312 6.1125-.0562c4.7437.0375 4.6875-7.0875-.0375-6.9938l-6.075.0563c0-1.2.0188-2.4001.0188-3.6001.0187-2.3812.0187-4.7625-.0188-7.1625.0187-3.0937 2.9625-5.85 6.225-5.85 3.2812 0 6.7312 1.6313 6.7312 5.85 0 .6-.0187.9563-.0562 1.1813-.3562 1.9687.975 3.825 2.9438 4.1062 1.9875.2813 3.7874-1.1437 3.9749-3.1124.1125-.7875.1313-1.4813.1313-2.1751z\"/><path d=\"m135.733 12c-12.25 0-20.113 9.1308-20.186 17.673v49.5262c-.016 6.108 9.47 6.108 9.453 0v-33.0543h9.72c2.273 0 4.214-1.6156 4.214-4.2071s-2.079-4.1578-4.214-4.1578h-9.72v-7.6137c0-4.875 3.89-8.9382 11.718-8.8421 2.723.0352 3.683.681 4.677 1.2753 5.429 3.5266 10.653-4.6389 4.964-7.7608-3.487-2.0928-6.742-2.8332-10.631-2.8332zm103.592.8833c-2.949-.1549-5.118 2.7092-4.665 5.4331v21.0978c-9.351-7.6874-24.573-7.1496-33.2 1.3614-8.729 7.6307-10.388 21.4544-4.04 30.9801 4.664 7.1949 13.195 12.3293 21.987 11.9216 5.528-.0503 11.004-2.3928 15.256-5.8477-.437 2.7296 1.714 5.6212 4.689 5.4457 2.92.1277 5.188-2.6991 4.74-5.4332-.051-20.2883.051-40.5695-.051-60.8528-.152-2.2796-2.37-4.1602-4.69-4.0966h-.01zm36.528 20.6563c-14.26 0-25.821 11.2445-25.824 25.1168-.003 13.8772 11.56 25.1282 25.824 25.1282 14.265 0 25.828-11.2513 25.825-25.1282-.003-13.8726-11.564-25.1168-25.825-25.1168zm84.345.2208c-6.448 0-11.095 1.8776-14.48 4.2557-5.138 3.6078.39 11.1516 5.527 7.5402 2.339-1.641 4.076-2.5145 8.956-2.5145 6.074.1197 10.953 2.3527 10.953 6.8043-3.256 2.0203-17.412 3.6958-25.009 7.9363-7.602 4.2393-7.201 9.5895-7.201 13.0594 0 7.6137 8.192 12.7538 15.284 12.7538 7.088 0 10.099-1.4588 17.034-6.1194v1.3247c-.224 6.3965 9.691 6.3965 9.465 0v-27.3359c.031-11.3385-8.265-17.5372-20.521-17.7126zm-47.025.098c-4.103 0-4.786 3.3213-4.765 4.6605v40.3278c-.112 2.6068 2.086 4.7708 4.84 4.7708s4.952-2.1641 4.84-4.7708c0 0 .073-15.0012 0-24.6017-.072-9.6009 7.897-11.6781 10.665-11.6781 2.058 0 3.709 1.127 5.34 1.067 2.421-.0895 4.402-1.6846 4.402-4.4766-.073-4.5106-5.706-5.149-9.867-5.0651-4.16.0834-7.676 1.3337-10.716 3.115 0 0-.637-3.3484-4.74-3.3484zm-145.257.0981c-3.141-.2368-6.612.2569-10.428 1.705-9.244 3.5039-15.516 12.1142-15.544 22.7393-.026 11.1293 7.913 25.4905 24.387 25.5983 11.078.0714 16.62-3.9868 19.609-6.7476 1.984-1.7243 2.13-4.7204.312-6.6118-1.821-1.8941-4.878-1.9405-6.753-.098-2.232 2.0566-5.521 5.1117-14.843 4.0967-4-.4343-8.292-3.6218-9.73-6.057l30.541-12.7424c2.335-1.0178 3.415-3.6749 2.426-5.9835-4.09-7.8912-10.552-15.1823-19.971-15.8956zm107.952 8.9893c8.921 0 16.153 7.032 16.156 15.7088.006 8.683-7.228 15.7258-16.156 15.7258-8.927 0-16.162-7.0425-16.156-15.7258.004-8.6765 7.236-15.7088 16.156-15.7088zm-57.005.2453c8.44-.2161 15.98 7.24 15.822 15.4426.177 8.2082-7.388 15.6521-15.822 15.4426-8.022.2086-15.375-6.4533-15.783-14.2652-.854-8.0497 5.888-15.907 14.147-16.5466.544-.0522 1.091-.0738 1.638-.0738zm-53.302.2454c4.593.0044 8.927 2.3271 11.129 6.0682l-25.423 10.6478c-1.814-6.6457 5.634-14.4519 9.692-15.9069 1.521-.5452 3.07-.8106 4.602-.8095zm205.94 15.5503c-.002 3.0063.046 3.8755-.036 6.878-.021 3.6092-2.332 5.2785-4.753 6.6571-2.42 1.3812-7.342 2.5904-10.189 2.7228-3.286.1066-7.637-.6176-7.869-4.4398.002-2.3074 1.143-3.7418 3.014-5.3353 4.431-3.2601 10.427-4.3515 19.835-6.4873z\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Running Linting for openapi-typescript\nDESCRIPTION: This command runs the linting process using Biome for the openapi-typescript project.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-metadata/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with PNPM\nDESCRIPTION: Commands for running the Vitest test suite, including full suite execution and individual test file execution.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm test -- [partial filename]\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Checking to npm Scripts\nDESCRIPTION: This JSON snippet shows how to add a TypeScript checking script to the package.json file for running type checks in CI.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test:ts\": \"tsc --noEmit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Netlify Logo as SVG in HTML\nDESCRIPTION: SVG markup for the Netlify logo embedded in an HTML list item. The logo is represented as a series of path elements with specific dimensions and viewBox attributes.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/index.md#2025-04-17_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"Netlify\" height=\"40\" viewBox=\"0 0 236 96\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"m53.9419 95.0979v-24.0836l.502-.5025h5.0173l.5021.5025v24.0836l-.5021.5025h-5.0173z\"/><path d=\"m53.9419 24.5845v-24.082273l.502-.502227h5.0173l.5021.502227v24.082273l-.5021.5022h-5.0173z\"/><path d=\"m32.1319 77.7361h-.7094l-3.5472-3.5488v-.7096l8.2832-8.2813 3.7562.0018.504.5003v3.7564z\"/><path d=\"m32.1284 17.8641h-.7094l-3.5472 3.549v.7094l8.2832 8.2815 3.7561-.0018.504-.5004v-3.7562z\"/><path d=\"m.502227 44.7895h34.117973l.5022.5022v5.0169l-.5022.5025h-34.117973l-.502227-.5025v-5.0169z\"/><path d=\"m202.564 44.7895h32.112l.503.5022v5.0169l-.503.5025h-34.117l-.503-.5025 2.006-5.0169z\"/><path d=\"m97.4037 49.9416-.502.5025h-15.564l-.502.502c0 1.0046 1.0045 4.016 5.0205 4.016 1.5066 0 3.0113-.5021 3.5138-1.5066l.5021-.5021h6.025l.5021.5021c-.5021 3.0118-3.0114 7.5316-10.543 7.5316-8.5344 0-12.5522-6.025-12.5522-13.0528 0-7.0275 4.016-13.0524 12.0497-13.0524 8.0341 0 12.05 6.0249 12.05 13.0524v2.0091zm-7.5316-5.0204c0-.5023-.5021-4.0161-4.5184-4.0161-4.016 0-4.518 3.5138-4.518 4.0161l.502.5022h8.0323z\"/><path d=\"m111.461 52.9534c0 1.0041.502 1.5066 1.507 1.5066h4.518l.502.5021v5.0205l-.502.5025h-4.518c-4.519 0-8.535-2.0091-8.535-7.5317v-11.0456l-.502-.5022h-3.514l-.5021-.5022v-5.0205l.5021-.5023h3.514l.502-.5022v-4.5183l.502-.5022h6.025l.502.5022v4.5183l.503.5022h5.522l.503.5023v5.0205l-.503.5022h-5.522l-.503.5022v11.0456z\"/><path d=\"m130.036 60.485h-6.025l-.502-.5025v-34.139l.502-.5022h6.025l.502.5022v34.139z\"/><path d=\"m143.591 31.3663h-6.025l-.502-.5022v-5.0206l.502-.5022h6.025l.502.5022v5.0206zm0 29.1187h-6.025l-.502-.5025v-24.098l.502-.5021h6.025l.502.5021v24.098z\"/><path d=\"m167.187 25.8435v5.0206l-.503.5022h-4.518c-1.004 0-1.507.5022-1.507 1.5066v2.009l.503.5022h5.02l.502.5022v5.0205l-.502.5022h-5.02l-.503.5023v18.0731l-.502.502h-6.025l-.502-.502v-18.0731l-.502-.5023h-3.514l-.502-.5022v-5.0205l.502-.5022h3.514l.502-.5022v-2.009c0-5.5227 4.016-7.5316 8.535-7.5316h4.518l.502.5022z\"/><path d=\"m185.762 60.9871c-2.009 5.0205-4.016 8.0323-11.045 8.0323h-2.511l-.502-.5025v-5.0205l.502-.502h2.511c2.509 0 3.011-.5025 3.514-2.0091v-.5021l-8.033-19.5798v-5.0206l.503-.5022h4.518l.502.5022 6.025 17.0706h.502l6.025-17.0706.503-.5022h4.518l.502.5022v5.0206l-8.032 20.0819z\"/><path d=\"m62.2181 60.4851-.502-.5025.0032-14.5469c0-2.5094-.9867-4.4551-4.016-4.5183-1.5575-.0404-3.3397-.0035-5.2437.0773l-.2843.2915.0037 18.6964-.5025.5025h-6.0231l-.5022-.5025v-24.3667l.5022-.5022 13.5547-.1229c6.7907 0 9.5389 4.6658 9.5389 9.9321v15.0597l-.502.5025z\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for openapi-typescript\nDESCRIPTION: This command initiates the process of creating a changeset for documenting changes in the openapi-typescript project using the changesets tool.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-metadata/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Running Biome Linter\nDESCRIPTION: Command to execute the Biome linter for code style checking and formatting.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Rendering Firebase Logo as SVG in HTML\nDESCRIPTION: SVG markup for the Firebase logo embedded in an HTML list item. The SVG uses path elements with fill attributes and includes a linear gradient definition.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/index.md#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"Firebase\" height=\"40\" viewBox=\"0 0 236 96\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"m53.9419 95.0979v-24.0836l.502-.5025h5.0173l.5021.5025v24.0836l-.5021.5025h-5.0173z\"/><path d=\"m53.9419 24.5845v-24.082273l.502-.502227h5.0173l.5021.502227v24.082273l-.5021.5022h-5.0173z\"/><path d=\"m32.1319 77.7361h-.7094l-3.5472-3.5488v-.7096l8.2832-8.2813 3.7562.0018.504.5003v3.7564z\"/><path d=\"m32.1284 17.8641h-.7094l-3.5472 3.549v.7094l8.2832 8.2815 3.7561-.0018.504-.5004v-3.7562z\"/><path d=\"m.502227 44.7895h34.117973l.5022.5022v5.0169l-.5022.5025h-34.117973l-.502227-.5025v-5.0169z\"/><path d=\"m202.564 44.7895h32.112l.503.5022v5.0169l-.503.5025h-34.117l-.503-.5025 2.006-5.0169z\"/><path d=\"m97.4037 49.9416-.502.5025h-15.564l-.502.502c0 1.0046 1.0045 4.016 5.0205 4.016 1.5066 0 3.0113-.5021 3.5138-1.5066l.5021-.5021h6.025l.5021.5021c-.5021 3.0118-3.0114 7.5316-10.543 7.5316-8.5344 0-12.5522-6.025-12.5522-13.0528 0-7.0275 4.016-13.0524 12.0497-13.0524 8.0341 0 12.05 6.0249 12.05 13.0524v2.0091zm-7.5316-5.0204c0-.5023-.5021-4.0161-4.5184-4.0161-4.016 0-4.518 3.5138-4.518 4.0161l.502.5022h8.0323z\"/><path d=\"m111.461 52.9534c0 1.0041.502 1.5066 1.507 1.5066h4.518l.502.5021v5.0205l-.502.5025h-4.518c-4.519 0-8.535-2.0091-8.535-7.5317v-11.0456l-.502-.5022h-3.514l-.5021-.5022v-5.0205l.5021-.5023h3.514l.502-.5022v-4.5183l.502-.5022h6.025l.502.5022v4.5183l.503.5022h5.522l.503.5023v5.0205l-.503.5022h-5.522l-.503.5022v11.0456z\"/><path d=\"m130.036 60.485h-6.025l-.502-.5025v-34.139l.502-.5022h6.025l.502.5022v34.139z\"/><path d=\"m143.591 31.3663h-6.025l-.502-.5022v-5.0206l.502-.5022h6.025l.502.5022v5.0206zm0 29.1187h-6.025l-.502-.5025v-24.098l.502-.5021h6.025l.502.5021v24.098z\"/><path d=\"m167.187 25.8435v5.0206l-.503.5022h-4.518c-1.004 0-1.507.5022-1.507 1.5066v2.009l.503.5022h5.02l.502.5022v5.0205l-.502.5022h-5.02l-.503.5023v18.0731l-.502.502h-6.025l-.502-.502v-18.0731l-.502-.5023h-3.514l-.502-.5022v-5.0205l.502-.5022h3.514l.502-.5022v-2.009c0-5.5227 4.016-7.5316 8.535-7.5316h4.518l.502.5022z\"/><path d=\"m185.762 60.9871c-2.009 5.0205-4.016 8.0323-11.045 8.0323h-2.511l-.502-.5025v-5.0205l.502-.502h2.511c2.509 0 3.011-.5025 3.514-2.0091v-.5021l-8.033-19.5798v-5.0206l.503-.5022h4.518l.502.5022 6.025 17.0706h.502l6.025-17.0706.503-.5022h4.518l.502.5022v5.0206l-8.032 20.0819z\"/><path d=\"m62.2181 60.4851-.502-.5025.0032-14.5469c0-2.5094-.9867-4.4551-4.016-4.5183-1.5575-.0404-3.3397-.0035-5.2437.0773l-.2843.2915.0037 18.6964-.5025.5025h-6.0231l-.5022-.5025v-24.3667l.5022-.5022 13.5547-.1229c6.7907 0 9.5389 4.6658 9.5389 9.9321v15.0597l-.502.5025z\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Basic Object Schema\nDESCRIPTION: The TypeScript type generated from a basic object schema without properties, resulting in a Record type that doesn't allow any properties.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<string, never>;\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Examples for OpenAPI TypeScript\nDESCRIPTION: Command to update the snapshot examples, with a warning that it may break tests if schemas have been updated.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm run update:examples\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for Release Notes\nDESCRIPTION: Command to generate a changeset file to document changes for the next release. This uses the changesets tool to manage release notes separately from git commits.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Installing and Building OpenAPI TypeScript Monorepo\nDESCRIPTION: Basic commands to install dependencies and build all packages in the monorepo using pnpm package manager. These commands should be run from the root directory to set up the entire workspace.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Module Settings\nDESCRIPTION: Required tsconfig.json settings for module and moduleResolution to properly load generated types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/introduction.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite with pnpm for openapi-typescript\nDESCRIPTION: This command runs the entire test suite for the openapi-typescript project using pnpm.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-metadata/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Array Schema with Typed Items\nDESCRIPTION: An array schema that specifies the type of items but doesn't constrain the array structure, resulting in a simple array type in TypeScript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: number\n```\n\n----------------------------------------\n\nTITLE: Installing and Running OpenAPI TypeScript Docs\nDESCRIPTION: Commands to install dependencies and start the local development server for the documentation site. Requires Node.js and pnpm to be installed. The server will run at http://localhost:5173.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the openapi-fetch Vue Example\nDESCRIPTION: Commands for setting up and starting the development server for the openapi-fetch Vue integration example. It uses pnpm to install dependencies and start the development server, which will be available at localhost:5173.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/examples/vue-3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing openapi-metadata and reflect-metadata via npm\nDESCRIPTION: Command to install the openapi-metadata library and its dependency reflect-metadata using npm. This is the first step to set up the library in a project.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-metadata/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i openapi-metadata reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Untyped Array Schema\nDESCRIPTION: A basic array schema without specifying the item type, resulting in a TypeScript array with unknown element types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Next.js with OpenAPI Fetch\nDESCRIPTION: Commands to install dependencies and start the Next.js development server using pnpm package manager. The server will run on localhost:3000.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/examples/nextjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running OpenAPI Fetch Svelte Example\nDESCRIPTION: Commands for installing dependencies and starting the development server for the OpenAPI Fetch Svelte example. The server will run on localhost:5173 after setup.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/examples/sveltekit/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Data in Vue\nDESCRIPTION: This snippet demonstrates importing Vue components and JSON data for use in the page. It includes the VPTeamMembers component from VitePress theme, a custom Contributors component, and JSON data for contributors.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/6.x/about.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { VPTeamMembers } from 'vitepress/theme';\n  import Contributors from '../.vitepress/theme/Contributors.vue'\n  import data from '../data/contributors.json';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing reflect-metadata in TypeScript Entry Point\nDESCRIPTION: Demonstrates importing reflect-metadata in the main file, which is required for the decorator metadata to work properly.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/openapi-metadata/index.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"reflect-metadata\";\n\n// Rest of your app\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page in YAML\nDESCRIPTION: YAML configuration for a VitePress documentation home page, defining the layout, hero section with project name, tagline, and action buttons, plus key feature sections highlighting the project's benefits.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"OpenAPI TypeScript\"\n  tagline: Convert OpenAPI 3.0/3.1 schemas to TypeScript types and create type-safe fetching.\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /introduction\n    - theme: alt\n      text: View on GitHub\n      link: https://github.com/openapi-ts/openapi-typescript\n\nfeatures:\n  - title: Blazing Fast\n    details: Nothing is faster than instant. Static TypeScript types provide zero runtime cost and zero client weight.\n  - title: Type-safe\n    details: Use your OpenAPI schema to typecheck your entire codebase with no setup and no tests.\n  - title: Works anywhere\n    details: Runs anywhere TypeScript does. Works for any stack and any framework.\n```\n\n----------------------------------------\n\nTITLE: Rendering BigCommerce Logo in SVG\nDESCRIPTION: This snippet renders the BigCommerce logo using SVG. It includes the company name as a title attribute and defines the path for the logo shape.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/index.md#2025-04-17_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"BigCommerce\" height=\"28\" viewBox=\"0 0 132 30\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m115.619019 1590.67915c-.516898-.7011-1.395805-1.27454-2.46022-1.27454-1.971418 0-3.393158 1.50464-3.393158 3.54267 0 2.03876 1.42174 3.54303 3.393158 3.54303.921052 0 1.781949-.39275 2.232209-.78405.030257-.02633.045746-.0642.045746-.10423v-1.10539c0-.06925-.056192-.12587-.125713-.12587h-2.535503c-.100858 0-.182625-.08187-.182625-.18249v-1.6406c0-.10098.081767-.18285.182625-.18285h4.546184v-2.43475l-1.467847.80389c-.078165.04292-.181905.01695-.234856-.05482zm-21.3413454 1.15206h2.708043c.7755276 0 1.2603674-.43711 1.2603674-1.13244 0-.6636-.4848398-1.13244-1.2603674-1.13244h-2.708043c-.0929336 0-.1678569.07537-.1678569.16806v1.92876c0 .09269.0749233.16806.1678569.16806zm11.0099344 6.35282c0 .08331-.067359.1504-.150206.1504h-1.993751c-.083208 0-.150567-.06709-.150567-.1504v-10.48915c0-.08295.067359-.15039.150567-.15039h1.993751c.082847 0 .150206.06744.150206.15039zm11.461095-25.11389-19.7725319 14.47435h.5104146c2.0521044 0 3.1021103 1.30988 3.1021103 2.74959 0 1.12019-.584617 1.94752-1.3691501 2.31322-.1303953.06095-.1257126.2456.0075644.30006.9145677.37471 1.5719477 1.3546 1.5719477 2.49894 0 1.63411-1.066576 2.92813-3.1345296 2.92813h-5.681199c-.0929337 0-.1682171-.07502-.1682171-.16807v-6.84406l-14.6669454 10.73692c-.2809621.20593-.1357983.6517.2128829.6517h39.6005362c.198835 0 .360208-.16157.360208-.36065v-5.43032c-1.059732.98927-2.453016 1.60887-4.163283 1.60887-3.166588 0-5.7518-2.18374-5.7518-5.58143 0-3.41356 2.585212-5.58107 5.7518-5.58107 1.991229 0 3.325079.90307 4.163283 2.0063v-16.01143c0-.29501-.334993-.46524-.573091-.29105zm-22.4710294 23.24205h2.8049389c.8562142 0 1.3731125-.45298 1.3731125-1.22946 0-.67911-.4841194-1.22946-1.3731125-1.22946h-2.8049389c-.0929336 0-.1678569.07538-.1678569.16806v2.12279c0 .09269.0749233.16807.1678569.16807zm34.5366254-.32729-1.235873-.6416c-.079606-.04148-.180104-.01118-.228372.06456-.522662.82048-1.486938 1.42961-2.534783 1.42961-2.057147 0-3.584429-1.64997-3.584429-3.89899 0-2.28075 1.527282-3.89863 3.584429-3.89863 1.047124 0 2.011041.59399 2.534063 1.42565.048628.07754.150206.10748.230893.06384l1.226508-.66901c.093294-.05085.126073-.16734.068799-.2575-.775887-1.22261-2.060749-2.24541-4.060263-2.24541-3.070412 0-5.454988 2.24901-5.454988 5.58106 0 3.31654 2.384576 5.58143 5.454988 5.58143 1.997353 0 3.267446-1.04986 4.069629-2.27318.060875-.09269.027376-.21098-.070601-.26183zm6.441958.85265c-2.106135 0-3.44791-1.68244-3.44791-3.899 0-2.23206 1.341775-3.89863 3.44791-3.89863 2.090287 0 3.44755 1.66657 3.44755 3.89863 0 2.21656-1.357263 3.899-3.44755 3.899zm-1.47325-9.29144c-2.317218.61996-3.84666 2.70812-3.84666 5.39244 0 3.21953 2.199789 5.58143 5.31991 5.58143 2.656894 0 4.662531-1.73004 5.185553-4.24738.851892-4.09951-2.742623-7.77382-6.658803-6.72649zm19.735179-.0105h-2.365126c-.10518 0-.199555.0642-.238097.1623l-2.860411 7.40379-2.87662-7.40451c-.038542-.09738-.132917-.16158-.238098-.16158h-2.365485c-.06988 0-.126793.05699-.126793.12695v10.53641c0 .06996.056913.12694.126793.12694h1.637145c.06988 0 .126793-.05698.126793-.12694v-8.20444l3.289779 8.27404c.013688.03462.047187.05734.084289.05734h.684395c.037101 0 .0706-.02272.084288-.05734l3.27357-8.27404v8.20444c0 .06996.056552.12694.126793.12694h1.636785c.07024 0 .126793-.05698.126793-.12694v-10.53641c0-.06996-.056553-.12695-.126793-.12695zm24.176325 0h-6.994517c-.107702 0-.194872.08728-.194872.19512v10.40007c0 .10784.08717.19511.194872.19511h6.994517c.107703 0 .194873-.08727.194873-.19511v-1.27598c0-.10783-.08717-.19511-.194873-.19511h-5.103785c-.107703 0-.194873-.08728-.194873-.19511v-2.61905c0-.10783.08717-.19511.194873-.19511h4.99104c.107342 0 .194873-.08764.194873-.19511v-1.27598c0-.10784-.087531-.19511-.194873-.19511h-4.99104c-.107703 0-.194873-.08728-.194873-.19511v-2.3922c0-.10783.08717-.19511.194873-.19511h5.103785c.107703 0 .194873-.08764.194873-.19511v-1.27598c0-.10784-.08717-.19512-.194873-.19512zm7.373708 5.09578h-2.40835c-.106621 0-.193071-.08656-.193071-.19331v-3.04317c0-.10675.08645-.19331.193071-.19331h2.40835c1.065855 0 1.841743.6636 1.841743 1.69903 0 1.05129-.775888 1.73076-1.841743 1.73076zm1.483336 1.40004c1.206337-.30439 2.297046-1.33873 2.297046-3.11493 0-2.00594-1.405531-3.38074-3.538322-3.38074h-4.541141c-.106622 0-.193071.08655-.193071.19331v10.40332c0 .10675.086449.19367.193071.19367h1.504228c.106622 0 .193432-.08692.193432-.19367v-3.64149c0-.10675.08645-.19331.193071-.19331h1.587076c.06844 0 .131476.03607.166416.09485l2.262826 3.83841c.03458.05878.097977.09521.166416.09521h1.738364c.151647 0 .244941-.16626.164255-.29501-.498888-.79812-1.868759-2.98944-2.319379-3.71038-.071682-.11396-.004683-.25642.125712-.28924zm17.145104-4.82972h5.113511c.104821 0 .18983-.08511.18983-.19042v-1.28536c0-.10495-.085009-.19042-.18983-.19042h-7.004242c-.104821 0-.19019.08547-.19019.19042v10.40945c0 .10531.085369.19043.19019.19043h7.004242c.104821 0 .18983-.08512.18983-.19043v-1.28536c0-.10494-.085009-.19006-.18983-.19006h-5.113511c-.105181 0-.19019-.08547-.19019-.19042v-2.62878c0-.10531.085009-.19043.19019-.19043h5.000406c.105181 0 .19019-.08511.19019-.19042v-1.28536c0-.10495-.085009-.19042-.19019-.19042h-5.000406c-.105181 0-.19019-.08511-.19019-.19042v-2.40158c0-.10531.085009-.19042.19019-.19042zm-4.00987 6.73832-1.235874-.6416c-.079606-.04147-.180104-.01118-.228371.06456-.522662.82048-1.486939 1.42962-2.534783 1.42962-2.057148 0-3.584429-1.64998-3.584429-3.89899 0-2.28076 1.527281-3.89863 3.584429-3.89863 1.047124 0 2.01104.59399 2.534062 1.42565.048628.07754.150207.10747.230893.06383l1.226508-.669c.093294-.05086.126073-.16771.0688-.25751-.775888-1.2226-2.060749-2.24541-4.060263-2.24541-3.070413 0-5.454989 2.24902-5.454989 5.58107 0 3.31654 2.384576 5.58142 5.454989 5.58142 1.996992 0 3.267445-1.04985 4.069628-2.27318.060876-.09268.027376-.21098-.0706-.26183zm-32.210295-8.40442h-2.365125c-.105181 0-.199555.0642-.238098.1623l-2.860411 7.40379-2.87662-7.40451c-.038542-.09738-.132917-.16158-.238097-.16158h-2.365486c-.06988 0-.126793.05699-.126793.12695v10.53641c0 .06996.056913.12694.126793.12694h1.637145c.069881 0 .126793-.05698.126793-.12694v-8.20444l3.289779 8.27404c.013688.03462.047187.05734.084289.05734h.684395c.037101 0 .070601-.02272.084289-.05734l3.273569-8.27404v8.20444c0 .06996.056553.12694.126793.12694h1.636785c.07024 0 .126793-.05698.126793-.12694v-10.53641c0-.06996-.056553-.12695-.126793-.12695z\" fill-rule=\"evenodd\" transform=\"translate(-77 -1573)\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Complex Generated TypeScript Type from Mixed Schema\nDESCRIPTION: Shows the overly complex TypeScript type generated from a schema that mixes oneOf with regular properties, resulting in a combination of unions and intersections that TypeScript cannot effectively discriminate.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n  Pet: ({\n    /** @enum {string} */\n    type?: \"cat\" | \"dog\" | \"rabbit\" | \"snake\" | \"turtle\";\n    name?: string;\n  }) & (components[\"schemas\"][\"Cat\"] | components[\"schemas\"][\"Dog\"] | components[\"schemas\"][\"Rabbit\"] | components[\"schemas\"][\"Snake\"] | components[\"schemas\"][\"Turtle\"]);\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript for Improved oneOf Schema\nDESCRIPTION: The cleaner TypeScript type generated from a well-structured oneOf schema, resulting in a simple union type that TypeScript can use for discriminated unions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nPet: components[\"schemas\"][\"Cat\"] | components[\"schemas\"][\"Dog\"] | components[\"schemas\"][\"Rabbit\"] | components[\"schemas\"][\"Snake\"] | components[\"schemas\"][\"Turtle\"];\nCat: { type?: \"cat\"; } & components[\"schemas\"][\"PetCommonProperties\"];\n```\n\n----------------------------------------\n\nTITLE: HTML List with Nuxt SVG Logo\nDESCRIPTION: SVG implementation of the Nuxt.js framework logo as a list item, with specific path data and dimensions set to 384x120 viewBox.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/index.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<li><svg title=\"Nuxt\" height=\"24\" viewBox=\"0 0 384 120\" ><path d=\"M180.96 96C181.997 96 182.88 95.1403 182.88 94.08V49.44C182.88 49.44 185.28 53.76 189.6 60.96L208.32 93.12C209.177 94.9152 211.077 96 212.64 96H225.6V24H212.64C211.777 24 210.72 24.7172 210.72 25.92V71.04L202.08 55.68L184.8 26.4C183.959 24.9078 182.15 24 180.48 24H168V96H180.96Z\" /><path d=\"M348.48 44.16H354.72C356.311 44.16 357.6 42.8706 357.6 41.28V28.8H371.04V44.16H384V55.68H371.04V76.32C371.04 81.36 373.467 83.52 377.76 83.52H384V96H375.84C364.775 96 357.6 88.8341 357.6 76.8V55.68H348.48V44.16Z\" /><path d=\"M283.68 44.16V73.92C283.68 80.6419 281.156 86.3083 277.44 90.24C273.724 94.1717 268.592 96 261.6 96C254.608 96 248.996 94.1717 245.28 90.24C241.627 86.3083 239.04 80.6419 239.04 73.92V44.16H246.72C248.358 44.16 249.969 44.4586 251.04 45.6C252.111 46.678 252.48 47.3113 252.48 48.96V73.92C252.48 77.7883 252.699 80.1778 254.4 82.08C256.101 83.9189 258.199 84.48 261.6 84.48C265.064 84.48 266.619 83.9189 268.32 82.08C270.021 80.1778 270.24 77.7883 270.24 73.92V48.96C270.24 47.3113 270.609 46.2614 271.68 45.12C272.621 44.1171 273.613 44.1407 275.04 44.16C275.237 44.1626 275.801 44.16 276 44.16H283.68Z\" /><path d=\"M324.48 69.12L340.8 44.16H328.32C326.747 44.16 325.35 44.7244 324.48 46.08L316.8 57.6L309.6 46.56C308.73 45.2044 306.853 44.16 305.28 44.16H293.28L309.6 68.64L291.84 96H304.32C305.88 96 307.287 94.4577 308.16 93.12L316.8 80.16L325.92 93.6C326.793 94.9377 328.2 96 329.76 96H342.24L324.48 69.12Z\" /><path d=\"M80.64 96H133.92C135.62 96 137.247 95.4029 138.72 94.56C140.193 93.7171 141.71 92.6597 142.56 91.2C143.41 89.7403 144.001 88.0848 144 86.3995C143.999 84.7142 143.411 83.0592 142.56 81.6005L106.56 19.68C105.71 18.2208 104.672 17.1625 103.2 16.32C101.728 15.4775 99.6202 14.88 97.92 14.88C96.2198 14.88 94.5922 15.4775 93.12 16.32C91.6478 17.1625 90.6096 18.2208 89.76 19.68L80.64 35.52L62.4 4.79887C61.5494 3.33976 60.5126 1.80236 59.04 0.96C57.5674 0.117642 55.9402 0 54.24 0C52.5398 0 50.9126 0.117642 49.44 0.96C47.9675 1.80236 46.4504 3.33976 45.6 4.79887L0.960003 81.6005C0.108953 83.0592 0.000743433 84.7142 3.65186e-06 86.3995C-0.000736129 88.0848 0.110234 89.7403 0.960003 91.2C1.80977 92.6592 3.32758 93.7171 4.8 94.56C6.2724 95.4029 7.89975 96 9.6 96H43.2C56.5138 96 66.204 90.0278 72.96 78.72L89.28 50.4L97.92 35.52L124.32 80.64H89.28L80.64 96ZM42.72 80.64H19.2L54.24 20.16L72 50.4L60.2357 70.908C55.7491 78.2448 50.6342 80.64 42.72 80.64Z\" fill=\"#00DC82\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Problematic Example of JSONSchema $defs with Non-Object Type\nDESCRIPTION: An example of incorrectly using JSONSchema $defs with a primitive type schema, which causes the definitions to be lost in the generated TypeScript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    DefType:\n      type: string # ❌ 这将失去其 $defs\n      $defs:\n        myDefType:\n          type: string\n    MyType:\n      properties:\n        myType:\n          $ref: \"#/components/schemas/DefType/$defs/myDefType\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode with Environment Variables in openapi-typescript\nDESCRIPTION: Sets the DEBUG environment variable to enable debugging output when running openapi-typescript. The scope can be limited to specific areas like redoc, lint, bundle, or ts.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ DEBUG=openapi-ts:* npx openapi-typescript schema.yaml -o my-types.ts\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration\nDESCRIPTION: Redocly YAML configuration for handling authentication with custom headers and environment variables.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/cli.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresolve:\n  http:\n    headers:\n      - matches: https://api.example.com/v2/**\n        name: X-API-KEY\n        envVariable: SECRET_KEY\n      - matches: https://example.com/*/test.yaml\n        name: Authorization\n        envVariable: SECRET_AUTH\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Tuple Array\nDESCRIPTION: The TypeScript type generated from a tuple array schema, resulting in a fixed-length tuple type with specific element types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n[number, number];\n```\n\n----------------------------------------\n\nTITLE: OpenAPI TypeScript Monorepo Directory Structure\nDESCRIPTION: Tree structure showing the organization of the monorepo, including the docs directory and various packages like openapi-fetch, openapi-react-query, and openapi-typescript.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n┬── docs/\n└── packages/\n    ├── openapi-fetch/\n    ├── openapi-react-query/\n    ├── openapi-typescript/\n    ├── openapi-typescript-helpers/\n    └── swr-openapi/\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Data in Vue\nDESCRIPTION: This Vue script setup imports necessary components and data for displaying team members and contributors. It uses VPTeamMembers from VitePress theme and a custom Contributors component.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/about.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { VPTeamMembers } from 'vitepress/theme';\n  import Contributors from './.vitepress/theme/Contributors.vue'\n  import data from './data/contributors.json';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Array with Typed Items\nDESCRIPTION: The TypeScript type generated from an array schema with typed items, resulting in an array with elements of a specific type.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset\nDESCRIPTION: Command to generate a new changeset for documenting changes in the changelog.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript for Problematic oneOf Schema\nDESCRIPTION: The complex TypeScript type generated from a schema that combines oneOf with other properties, resulting in a mix of intersection and union types that can be difficult to work with.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n  Pet: ({\n    /** @enum {string} */\n    type?: \"cat\" | \"dog\" | \"rabbit\" | \"snake\" | \"turtle\";\n    name?: string;\n  }) & (components[\"schemas\"][\"Cat\"] | components[\"schemas\"][\"Dog\"] | components[\"schemas\"][\"Rabbit\"] | components[\"schemas\"][\"Snake\"] | components[\"schemas\"][\"Turtle\"]);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenAPI TypeScript Development\nDESCRIPTION: Command to install project dependencies using pnpm after forking and cloning the repository.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: HTML List with SVG Logos for Companies Using openapi-typescript\nDESCRIPTION: This HTML snippet displays a list of companies that use the openapi-typescript library. It features SVG logos for GitHub and Google Firebase embedded directly within the HTML list items.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"home-logo-salad-list\">\n  <li><svg title=\"GitHub\" height=\"24\" viewBox=\"0 0 432 96\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"m182.261 43.1101v39.8148c0 .2775-.07.763-.417.9017 0 0-8.692 6.1734-23.017 6.1734-17.314 0-37.827-5.4104-37.827-41.0633 0-35.653 17.94-43.00558 35.463-42.93622 15.159 0 21.278 3.39883 22.251 4.02312.279.3468.418.6243.418.9711l-2.921 12.3467c0 .6243-.626 1.3873-1.391 1.1792-2.503-.763-6.258-2.289-15.089-2.289-10.221 0-21.208 2.9133-21.208 25.8727s10.43 25.6646 17.94 25.6646c6.397 0 8.692-.763 8.692-.763v-15.9537h-10.222c-.765 0-1.321-.5549-1.321-1.1792v-12.7629c0-.6243.556-1.1792 1.321-1.1792h26.007c.765 0 1.321.5549 1.321 1.1792zm249.285 16.1618c0 23.7917-7.719 30.5894-21.209 30.5894-11.404 0-17.523-5.7572-17.523-5.7572s-.278 3.1907-.625 3.6069c-.209.4162-.557.5549-.974.5549h-10.291c-.696 0-1.321-.5549-1.321-1.1792l.139-77.0631c0-.62429.556-1.1792 1.182-1.1792h14.811c.626 0 1.182.55491 1.182 1.1792v26.1501s5.702-3.6763 14.046-3.6763l-.069-.1387c8.344 0 20.652 3.1214 20.652 26.9132zm-118.072-50.28877c.626 0 1.182.55491 1.182 1.17917v77.0632c0 .6242-.556 1.1791-1.182 1.1791h-14.811c-.626 0-1.182-.5549-1.182-1.1791l.139-32.9478h-23.016v32.9478c0 .6242-.556 1.1791-1.182 1.1791h-14.811c-.556 0-1.182-.5549-1.182-1.1791v-77.0632c0-.62426.556-1.17917 1.182-1.17917h14.811c.626 0 1.182.55491 1.182 1.17917v28.3698h23.016v-28.3698c0-.62426.556-1.17917 1.182-1.17917zm57.437 25.24837c.765 0 1.321.5549 1.321 1.1792l-.139 51.8148c0 .6242-.417 1.1791-1.182 1.1791h-9.318c-.487 0-.974-.2774-1.113-.6242-.208-.4162-.556-3.1214-.556-3.1214s-7.857 5.341-17.523 5.341c-11.751 0-20.304-3.815-20.304-19.075v-35.4449c0-.6243.556-1.1792 1.182-1.1792h14.88c.626 0 1.183.5549 1.183 1.1792v32.9478c0 5.2023 1.529 7.5606 6.744 7.5606 5.216 0 9.04-2.7052 9.04-2.7052v-37.7339c0-.763.417-1.3179 1.182-1.3179zm-121.034 41.4171h.035c.284.0587.538.2154.717.4425.179.2272.273.5102.263.7992v10.4045c0 .4856-.208.9711-.625 1.1098-.696.3469-5.146 1.526-8.831 1.526-8.067 0-19.888-1.7341-19.888-18.6588v-22.7513h-7.718c-.626 0-1.182-.5549-1.182-1.3179v-9.4335c0-.5549.347-1.0405.904-1.1792.487-.0694 8.066-1.9422 8.066-1.9422v-15.0519c0-.5549.348-.9017.973-.9017h15.02c.626 0 .974.3468.974.9017v14.6357h11.056c.556 0 1.112.5549 1.112 1.1792v11.7919c0 .763-.486 1.3179-1.112 1.3179h-11.056v21.7178c0 3.2601 1.877 5.7572 7.301 5.7572 1.717 0 3.344-.3399 3.991-.3469zm-43.766-41.4864c.626 0 1.183.5549 1.183 1.1792v51.1211c0 1.2485-.348 1.8728-1.739 1.8728h-13.351c-1.182 0-2.086-.4856-2.086-1.8728v-50.9131c0-.763.557-1.3872 1.182-1.3872zm208.537 26.2195c0-12.5549-5.076-14.2196-10.43-13.6647-4.172.2775-7.51 2.3584-7.51 2.3584v24.416s3.408 2.3584 8.484 2.4971c7.162.2081 9.456-2.3583 9.456-15.6068zm-215.838-49.6645c5.215 0 9.457 4.2312 9.457 9.5722s-4.242 9.5722-9.457 9.5722c-5.354 0-9.596-4.2312-9.596-9.5722s4.242-9.5722 9.596-9.5722zm51.039 64.8551v.007l.07.0693h-.007l-.035-.0069v.0069c-.062-.0069-.104-.0763-.167-.0763z\"/><path clip-rule=\"evenodd\" d=\"m48.854 0c-27.015 0-48.854 22-48.854 49.217 0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052 3.9821-1.0773 8.0888-1.6254 12.214-1.63 4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691.08-27.217-21.839-49.217-48.773-49.217z\" fill-rule=\"evenodd\"/></svg></li>\n  <li><svg title=\"Google Firebase\" height=\"32\" viewBox=\"0 0 469 139\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><linearGradient id=\"firebase-a\" gradientUnits=\"userSpaceOnUse\" x1=\"-330.55\" x2=\"11524.6\" y1=\"2229.62\" y2=\"8483.07\"><stop offset=\"0\" stop-color=\"#fff\" stop-opacity=\".1\"/><stop offset=\".14\" stop-color=\"#fff\" stop-opacity=\".08\"/><stop offset=\".61\" stop-color=\"#fff\" stop-opacity=\".02\"/><stop offset=\"1\" stop-color=\"#fff\" stop-opacity=\"0\"/></linearGradient><path d=\"m140.773 100.518h-8.773v-67.7526h39.844v8.324h-31.07v22.244h28.025v8.1318h-28.025v29.0528zm47.567-58.0019c-2.091 2.085-5.375 2.4125-7.843.7823-2.467-1.6302-3.43-4.764-2.3-7.4837 1.131-2.7197 4.04-4.2678 6.948-3.6968 2.907.571 5.003 3.102 5.005 6.044.029 1.6386-.629 3.2154-1.817 4.3542zm0 58.0019h-8.773v-46.366h8.773zm19.252 0h-8.773v-46.366h8.386v7.57h.38c1.013-2.6676 2.958-4.8847 5.481-6.2467 2.41-1.5352 5.196-2.3866 8.058-2.4617 2.247-.0634 4.484.3238 6.577 1.1384l-3.337 8.1317c-1.505-.497-3.086-.7223-4.669-.6653-3.217.0162-6.279 1.3736-8.438 3.7406-2.448 2.4937-3.672 5.7588-3.672 9.795zm44.149 1.478c-7.055 0-12.79-2.3335-17.203-6.9999-4.414-4.6664-6.624-10.554-6.629-17.6607-.129-6.3986 2.167-12.612 6.435-17.4093 4.087-4.775 10.134-7.455 16.444-7.29 6.926 0 12.472 2.24 16.638 6.7198 4.165 4.4798 6.246 10.4727 6.24 17.9786l-.097 1.6116h-36.903c.254 4.667 1.827 8.3634 4.722 11.0887 2.707 2.6374 6.358 4.1 10.15 4.066 6.291 0 10.548-2.65 12.773-7.947l7.82 3.2157c-1.585 3.666-4.199 6.802-7.53 9.0336-3.5 2.3949-7.787 3.5929-12.862 3.5929zm12.587-30.3091c-.189-2.6514-1.413-5.1747-3.672-7.57s-5.618-3.568-10.077-3.5188c-3.092-.0538-6.096 1.0253-8.437 3.031-2.454 2.1338-4.17 4.978-4.909 8.1317zm41.035 30.3091c-3.319.065-6.602-.697-9.547-2.2176-2.587-1.295-4.776-3.2558-6.338-5.6774h-.38v6.417h-8.393v-67.7526h8.773v21.3866l-.38 6.4315h.38c1.562-2.4217 3.751-4.3825 6.338-5.6774 2.941-1.5382 6.224-2.3186 9.547-2.2695 6.038 0 11.251 2.3656 15.64 7.0968s6.581 10.5984 6.576 17.6015c-.004 7.0031-2.192 12.8703-6.576 17.6015s-9.597 7.0846-15.64 7.0596zm-1.43-7.9469c3.997.0315 7.815-1.64 10.486-4.5907 2.925-3.0605 4.387-7.114 4.387-12.1607s-1.462-9.1-4.387-12.1607c-2.702-2.9154-6.507-4.578-10.498-4.5865s-7.804 1.6382-10.519 4.542c-2.889 3.026-4.334 7.0943-4.334 12.205s1.46 9.1913 4.379 12.242c2.688 2.9397 6.517 4.5948 10.516 4.5464zm45.981 7.9469c-4.965 0-9.11-1.419-12.437-4.2579-3.326-2.8386-4.995-6.5916-5.005-11.2588 0-5.0466 1.971-9.004 5.914-11.8724 3.942-2.8684 8.803-4.3024 14.582-4.3024 5.149 0 9.37.9462 12.661 2.8387v-1.3232c.125-3.1165-1.172-6.123-3.53-8.1835-2.402-2.0534-5.493-3.1376-8.662-3.0383-2.425-.03-4.813.5898-6.911 1.7964-1.966 1.0808-3.473 2.8288-4.245 4.9234l-8.006-3.408c1.082-2.7845 3.212-5.367 6.4-7.7473 3.187-2.3803 7.373-3.5632 12.586-3.5484 5.958 0 10.923 1.725 14.895 5.1747s5.943 8.3387 5.913 14.6667v28.0623h-8.415v-6.4318h-.38c-3.5 5.2733-8.617 7.8998-15.349 7.8998zm1.43-7.9469c3.687-.0128 7.226-1.4406 9.876-3.9846 2.824-2.3633 4.458-5.84 4.468-9.5068-2.482-2.0206-6.206-3.031-11.171-3.031-4.26 0-7.47.9142-9.63 2.7426-2.015 1.538-3.209 3.9082-3.239 6.4315-.041 2.1958 1.092 4.25 2.98 5.3965 1.984 1.324 4.327 2.0176 6.717 1.9886v-.037zm48.521 7.9469c-5.213 0-9.518-1.262-12.914-3.7849-3.304-2.4223-5.879-5.694-7.447-9.4624l7.819-3.2157c2.483 5.8056 6.703 8.7084 12.661 8.7084 2.367.0962 4.707-.5308 6.703-1.7964 1.646-1.0145 2.64-2.808 2.622-4.7312 0-3.026-2.13-5.0762-6.4-6.1506l-9.436-2.2695c-3.105-.8154-5.998-2.2826-8.483-4.3024-2.645-2.0476-4.136-5.2334-4.007-8.5605 0-4.1 1.827-7.427 5.482-9.98 3.822-2.6045 8.375-3.9447 13.01-3.8293 3.87-.0614 7.686.906 11.052 2.8018 3.178 1.791 5.636 4.6164 6.956 7.9987l-7.618 3.09c-1.713-4.1-5.273-6.1506-10.68-6.1506-2.3-.076-4.576.482-6.576 1.6116-1.639.8427-2.667 2.5222-2.667 4.3542 0 2.6514 2.066 4.4503 6.197 5.3965l9.242 2.1808c4.384.9857 7.626 2.7106 9.727 5.1747 2.034 2.302 3.151 5.262 3.142 8.324.041 4.0824-1.868 7.943-5.146 10.4086-3.431 2.7892-7.847 4.1842-13.249 4.1842zm47.187 0c-7.055 0-12.79-2.3335-17.203-6.9999-4.414-4.6664-6.624-10.5671-6.629-17.6983-.13-6.3986 2.167-12.612 6.435-17.4093 4.102-4.763 10.155-7.4287 16.466-7.252 6.95 0 12.497 2.24 16.638 6.7198s6.221 10.4727 6.241 17.9785l-.097 1.6116h-36.933c.253 4.667 1.827 8.3634 4.722 11.0887 2.715 2.6374 6.375 4.095 10.173 4.051 6.291 0 10.548-2.65 12.773-7.947l7.819 3.2157c-1.584 3.6662-4.197 6.8022-7.529 9.0336-3.5 2.4046-7.793 3.6076-12.877 3.6076zm12.587-30.3091c-.189-2.6514-1.413-5.1747-3.672-7.57s-5.613-3.568-10.062-3.5188c-3.092-.053-6.096 1.026-8.438 3.031-2.453 2.1338-4.169 4.978-4.907 8.1317z\" /><path d=\"m.833298 105.719 16.132202-103.22839c.1972-1.266 1.1818-2.263996 2.445-2.478596s2.522.4028 3.126 1.532696l16.6835 31.11729 6.65-12.6615c.515-.979 1.5303-1.592 2.6366-1.592s2.1215.613 2.6366 1.592l45.0227 85.7185z\" fill=\"#ffa000\"/><path d=\"m56.566 65.5074-17.3536-32.8602-38.378995 73.0718z\" fill=\"#f57c00\"/><path d=\"m96.1666 105.719-12.356-76.4606c-.1867-1.098-.9703-2-2.0315-2.34s-2.2226-.057-3.0107.7302l-77.934995 78.0694 43.123395 24.183c2.708 1.512 6.006 1.512 8.714 0l43.4958-24.183z\" fill=\"#ffca28\"/><path d=\"m83.8105 29.2584c-.1867-1.098-.9703-2-2.0315-2.34s-2.2226-.057-3.0107.7302l-15.4683 15.5076-12.1635-23.1562c-.515-.979-1.5303-1.592-2.6366-1.592s-2.1215.613-2.6366 1.592l-6.65 12.6615-16.6843-31.1168c-.605-1.130203-1.8653-1.746604-3.13-1.5304036-1.2647.2161996-2.246 1.2167036-2.441 2.4837036l-16.124704 103.221h-.052l.052.059.424504.209 77.488-77.5777c.7877-.7915 1.952-1.076 3.016-.737s1.849 1.2445 2.0338 2.3457l12.2518 75.775.1192-.075zm-82.835704 76.3186 15.990704-102.349c.1948-1.267 1.1784-2.267504 2.442-2.483704s2.524.400004 3.13 1.530404l16.6825 31.1173 6.65-12.6615c.515-.979 1.5303-1.592 2.6366-1.592s2.1215.613 2.6366 1.592l11.9167 22.664z\" fill=\"#fff\" fill-opacity=\".2\"/><path d=\"m52.6708 129.172c-2.708 1.512-6.006 1.512-8.714 0l-43.019203-24.116-.104299.663 43.123402 24.176c2.708 1.512 6.006 1.512 8.714 0l43.4958-24.176-.1117-.685z\" fill=\"#a52714\" opacity=\".2\"/><path d=\"m83.687 29.2742c-.186-1.0977-.967-2-2.0244-2.338s-2.2148-.057-3.000</svg></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Problematic oneOf Schema with Mixed Properties\nDESCRIPTION: An example of a problematic schema using oneOf combined with other properties, which results in complex and potentially confusing TypeScript types.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  type: object\n  properties:\n    type:\n      type: string\n      enum:\n        - cat\n        - dog\n        - rabbit\n        - snake\n        - turtle\n    name:\n      type: string\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n    - $ref: \"#/components/schemas/Rabbit\"\n    - $ref: \"#/components/schemas/Snake\"\n    - $ref: \"#/components/schemas/Turtle\"\n```\n\n----------------------------------------\n\nTITLE: Running Linting for OpenAPI TypeScript\nDESCRIPTION: Command to run linting using Biome, a faster ESLint replacement.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-typescript/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: HTML List with Firebase, Netlify, and Supabase SVG Icons\nDESCRIPTION: This HTML code displays a list of SVG technology icons, including Firebase, Netlify, and Supabase. Each SVG is wrapped in a list item tag and contains path definitions with appropriate viewBox settings and dimensions.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"Firebase\" height=\"40\" viewBox=\"0 0 128 128\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><linearGradient id=\"firebase-a\" gradientUnits=\"userSpaceOnUse\" x1=\"82.6842\" x2=\"66.2326\" y1=\"30.7675\" y2=\"106.1726\"><stop offset=\"0\" stop-color=\"#fff\" stop-opacity=\".1\"/><stop offset=\"1\" stop-color=\"#fff\" stop-opacity=\"0\"/></linearGradient><path d=\"m19.5292 70.3103-2.8225 2.9563 2.7311 1.5207 4.8381 2.6885 7.1796-7.1551z\" fill=\"#ffa000\"/><path d=\"m36.9874 45.0366c.3886-.6902.586-1.4704.5692-2.2615-.0168-.78071-.2551-1.5404-.6854-2.1877l-11.4246-21.6803-9.0646 16.7384c-.14757.2559-.20089.5504-.15328.8373l11.9547 8.5538z\" fill=\"#f57f17\"/><path d=\"m19.5292 70.3103 2.1297-37.2826c.0476-.2869-.0058-.5814-.1534-.8373l-9.0646-16.7384-.25883.9932c-.12344.5264-.18481 1.0637-.18383 1.6025.00031 1.0382.22876 2.0639.66833 3.0164l6.8426 49.2462z\" fill=\"#ffca28\"/><path d=\"m12.7724 102.296 76.0597-.008-.0008-.002-24.0317-48.141-.278-2.6402-12.9777-24.4707-8.7308 8.007-17.915 36.4646z\" fill=\"#ffa000\"/><path d=\"m64.5003 53.9999.2797 2.6401.0091-.0023 10.251-2.6378-8.7398-16.4475c-.4303-.6473-.6686-1.407-.6854-2.1877s.1806-1.5713.5692-2.2615l8.7307-8.007-10.0812-19.11c-.4806-.89581-1.4129-1.45463-2.4246-1.45463-1.0117 0-1.944.55882-2.4246 1.45463l-9.6145 18.2042 13.1214 29.8077z\" fill=\"#f57f17\"/><path d=\"m52.8119 53.502 8.7308-8.007-13.1214-29.8076-12.1447 22.112 4.6346 3.3153z\" fill=\"#ffca28\"/><path d=\"m88.8329 102.288 24.9831-68.2873-15.4151 15.4998-12.12-23.1455c-.5133-.9786-1.525-1.5914-2.6273-1.5914s-2.114.6128-2.6273 1.5914l-6.6277 12.656-16.625-31.1039c-.603-1.129698-1.8588-1.745998-3.118-1.5296982-1.2592.2163002-2.2394 1.2159982-2.4335 2.4826982l-16.0685 103.1754 42.9727 24.165c2.6985 1.512 5.985 1.512 8.6836 0l43.3437-24.165-12.313-76.427z\" fill=\"url(#firebase-a)\"/></svg></li>\n  <li><svg title=\"Netlify\" height=\"40\" viewBox=\"0 0 236 96\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"m53.9419 95.0979v-24.0836l.502-.5025h5.0173l.5021.5025v24.0836l-.5021.5025h-5.0173z\"/><path d=\"m53.9419 24.5845v-24.082273l.502-.502227h5.0173l.5021.502227v24.082273l-.5021.5022h-5.0173z\"/><path d=\"m32.1319 77.7361h-.7094l-3.5472-3.5488v-.7096l8.2832-8.2813 3.7562.0018.504.5003v3.7564z\"/><path d=\"m32.1284 17.8641h-.7094l-3.5472 3.549v.7094l8.2832 8.2815 3.7561-.0018.504-.5004v-3.7562z\"/><path d=\"m.502227 44.7895h34.117973l.5022.5022v5.0169l-.5022.5025h-34.117973l-.502227-.5025v-5.0169z\"/><path d=\"m202.564 44.7895h32.112l.503.5022v5.0169l-.503.5025h-34.117l-.503-.5025 2.006-5.0169z\"/><path d=\"m97.4037 49.9416-.502.5025h-15.564l-.502.502c0 1.0046 1.0045 4.016 5.0205 4.016 1.5066 0 3.0113-.5021 3.5138-1.5066l.5021-.5021h6.025l.5021.5021c-.5021 3.0118-3.0114 7.5316-10.543 7.5316-8.5344 0-12.5522-6.025-12.5522-13.0528 0-7.0275 4.016-13.0524 12.0497-13.0524 8.0341 0 12.05 6.0249 12.05 13.0524v2.0091zm-7.5316-5.0204c0-.5023-.5021-4.0161-4.5184-4.0161-4.016 0-4.518 3.5138-4.518 4.0161l.502.5022h8.0323z\"/><path d=\"m111.461 52.9534c0 1.0041.502 1.5066 1.507 1.5066h4.518l.502.5021v5.0205l-.502.5025h-4.518c-4.519 0-8.535-2.0091-8.535-7.5317v-11.0456l-.502-.5022h-3.514l-.5021-.5022v-5.0205l.5021-.5023h3.514l.502-.5022v-4.5183l.502-.5022h6.025l.502.5022v4.5183l.503.5022h5.522l.503.5023v5.0205l-.503.5022h-5.522l-.503.5022v11.0456z\"/><path d=\"m130.036 60.485h-6.025l-.502-.5025v-34.139l.502-.5022h6.025l.502.5022v34.139z\"/><path d=\"m143.591 31.3663h-6.025l-.502-.5022v-5.0206l.502-.5022h6.025l.502.5022v5.0206zm0 29.1187h-6.025l-.502-.5025v-24.098l.502-.5021h6.025l.502.5021v24.098z\"/><path d=\"m167.187 25.8435v5.0206l-.503.5022h-4.518c-1.004 0-1.507.5022-1.507 1.5066v2.009l.503.5022h5.02l.502.5022v5.0205l-.502.5022h-5.02l-.503.5023v18.0731l-.502.502h-6.025l-.502-.502v-18.0731l-.502-.5023h-3.514l-.502-.5022v-5.0205l.502-.5022h3.514l.502-.5022v-2.009c0-5.5227 4.016-7.5316 8.535-7.5316h4.518l.502.5022z\"/><path d=\"m185.762 60.9871c-2.009 5.0205-4.016 8.0323-11.045 8.0323h-2.511l-.502-.5025v-5.0205l.502-.502h2.511c2.509 0 3.011-.5025 3.514-2.0091v-.5021l-8.033-19.5798v-5.0206l.503-.5022h4.518l.502.5022 6.025 17.0706h.502l6.025-17.0706.503-.5022h4.518l.502.5022v5.0206l-8.032 20.0819z\"/><path d=\"m62.2181 60.4851-.502-.5025.0032-14.5469c0-2.5094-.9867-4.4551-4.016-4.5183-1.5575-.0404-3.3397-.0035-5.2437.0773l-.2843.2915.0037 18.6964-.5025.5025h-6.0231l-.5022-.5025v-24.3667l.5022-.5022 13.5547-.1229c6.7907 0 9.5389 4.6658 9.5389 9.9321v15.0597l-.502.5025z\"/></svg></li>\n  <li><svg title=\"Supabase\" height=\"24\" viewBox=\"0 0 494 96\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><linearGradient id=\"supabase-a\" gradientUnits=\"userSpaceOnUse\" x1=\"45.8538\" x2=\"79.9973\" y1=\"46.7036\" y2=\"61.0233\"><stop offset=\"0\" stop-color=\"#249361\"/><stop offset=\"1\" stop-color=\"#3ecf8e\"/></linearGradient><linearGradient id=\"supabase-b\" gradientUnits=\"userSpaceOnUse\" x1=\"30.7164\" x2=\"46.2876\" y1=\"25.9778\" y2=\"55.2897\"><stop offset=\"0\"/><stop offset=\"1\" stop-opacity=\"0\"/></linearGradient><clipPath id=\"supabase-c\"><path d=\"m0 0h493.593v96h-493.593z\"/></clipPath><g clip-path=\"url(#supabase-c)\"><path d=\"m128.62 56.7172c.509 4.7586 4.838 12.9161 17.399 12.9161 10.949 0 16.212-6.9679 16.212-13.7658 0-6.1183-4.16-11.1317-12.392-12.8314l-5.942-1.2745c-2.291-.4248-3.819-1.6994-3.819-3.7389 0-2.3793 2.377-4.1637 5.348-4.1637 4.752 0 6.534 3.144 6.874 5.6084l9.421-2.1244c-.509-4.5037-4.498-12.0664-16.38-12.0664-8.997 0-15.617 6.2032-15.617 13.6808 0 5.8632 3.649 10.707 11.712 12.4913l5.517 1.2747c3.225.6797 4.498 2.2094 4.498 4.0788 0 2.2094-1.782 4.1638-5.517 4.1638-4.922 0-7.384-3.0592-7.638-6.3733z\"/><path d=\"m198.305 68.3587h10.779c-.17-1.4446-.425-4.3337-.425-7.5628v-34.2448h-11.289v24.3027c0 4.8437-2.885 8.2426-7.892 8.2426-5.263 0-7.64-3.7389-7.64-8.4125v-24.1328h-11.288v26.4272c0 9.0923 5.771 16.4851 15.872 16.4851 4.412 0 9.252-1.6995 11.544-5.6084 0 1.6995.169 3.6539.339 4.5037z\"/><path d=\"m231.994 84.504v-20.2239c2.036 2.804 6.281 5.0985 12.052 5.0985 11.797 0 19.69-9.3474 19.69-22.0086 0-12.4062-7.044-21.7535-19.266-21.7535-6.28 0-10.948 2.8041-12.815 6.0333v-5.0986h-10.948v57.9528zm20.624-37.049c0 7.4779-4.583 11.8115-10.355 11.8115-5.77 0-10.438-4.4186-10.438-11.8115 0-7.3927 4.668-11.7265 10.438-11.7265 5.772 0 10.355 4.3338 10.355 11.7265z\"/><path d=\"m270.129 56.9721c0 6.5431 5.431 12.5763 14.344 12.5763 6.194 0 10.183-2.8892 12.305-6.2033 0 1.6146.17 3.9089.424 5.0136h10.355c-.255-1.4446-.508-4.4187-.508-6.628v-20.5639c0-8.4125-4.923-15.8902-18.163-15.8902-11.204 0-17.231 7.2227-17.909 13.7658l10.015 2.1244c.34-3.6539 3.056-6.7979 7.977-6.7979 4.754 0 7.046 2.4642 7.046 5.4383 0 1.4446-.763 2.6343-3.14 2.9741l-10.27 1.5296c-6.959 1.0197-12.476 5.1834-12.476 12.6612zm16.719 4.1638c-3.649 0-5.432-2.3793-5.432-4.8435 0-3.2291 2.291-4.8437 5.178-5.2685l9.421-1.4446v1.8694c0 7.3929-4.414 9.6872-9.167 9.6872z\"/><path d=\"m329.376 68.3589v-5.0986c2.205 3.569 6.619 6.1183 12.391 6.1183 11.883 0 19.692-9.4323 19.692-22.0935 0-12.4064-7.046-21.8385-19.267-21.8385-6.197 0-10.78 2.7192-12.647 5.6932v-24.3027h-11.118v61.5218zm20.793-20.9889c0 7.6478-4.583 11.8965-10.355 11.8965-5.686 0-10.438-4.3336-10.438-11.8965 0-7.6478 4.752-11.8114 10.438-11.8114 5.772 0 10.355 4.1636 10.355 11.8114z\"/><path d=\"m367.85 56.9721c0 6.5431 5.431 12.5763 14.343 12.5763 6.195 0 10.185-2.8892 12.306-6.2033 0 1.6146.171 3.9089.425 5.0136h10.354c-.253-1.4446-.508-4.4187-.508-6.628v-20.5639c0-8.4125-4.923-15.8902-18.164-15.8902-11.203 0-17.229 7.2227-17.907 13.7658l10.013 2.1244c.341-3.6539 3.057-6.7979 7.979-6.7979 4.754 0 7.045 2.4642 7.045 5.4383 0 1.4446-.764 2.6343-3.141 2.9741l-10.268 1.5296c-6.96 1.0197-12.477 5.1834-12.477 12.6612zm16.72 4.1638c-3.65 0-5.433-2.3793-5.433-4.8435 0-3.2291 2.291-4.8437 5.178-5.2685l9.421-1.4446v1.8694c0 7.3929-4.414 9.6872-9.166 9.6872z\"/><path d=\"m412.583 56.7172c.508 4.7586 4.838 12.9161 17.398 12.9161 10.95 0 16.211-6.9679 16.211-13.7658 0-6.1183-4.158-11.1317-12.391-12.8314l-5.942-1.2745c-2.291-.4248-3.818-1.6994-3.818-3.7389 0-2.3793 2.376-4.1637 5.347-4.1637 4.754 0 6.535 3.144 6.876 5.6084l9.42-2.1244c-.51-4.5037-4.499-12.0664-16.38-12.0664-8.998 0-15.617 6.2032-15.617 13.6808 0 5.8632 3.648 10.707 11.712 12.4913l5.517 1.2747c3.226.6797 4.498 2.2094 4.498 4.0788 0 2.2094-1.782 4.1638-5.517 4.1638-4.923 0-7.383-3.0592-7.638-6.3733z\"/><path d=\"m463.336 42.6963c.255-3.8238 3.481-8.2426 9.337-8.2426 6.449 0 9.166 4.0789 9.336 8.2426zm19.777 10.8769c-1.359 3.7387-4.245 6.373-9.507 6.373-5.602 0-10.27-3.9938-10.523-9.5171h29.874c0-.1701.17-1.8695.17-3.4841 0-13.426-7.723-21.6684-20.624-21.6684-10.694 0-20.54 8.6673-20.54 22.0084 0 14.1057 10.099 22.3483 21.558 22.3483 10.27 0 16.89-6.0332 19.013-13.2561z\" /><path d=\"m54.1232 93.6926c-2.4293 3.0593-7.3549 1.3831-7.4135-2.5232l-.8559-57.1338h38.4168c6.9583 0 10.839 8.0369 6.5122 13.4865z\" fill=\"url(#supabase-a)\"/><path d=\"m54.1232 93.6926c-2.4293 3.0593-7.3549 1.3831-7.4135-2.5232l-.8559-57.1338h38.4168c6.9583 0 10.839 8.0369 6.5122 13.4865z\" fill=\"url(#supabase-b)\" fill-opacity=\".2\"/><path d=\"m38.4994 1.75946c2.4293-3.05959 7.355-1.383157 7.4136 2.52316l.375 57.13378h-37.9359c-6.95852 0-10.83941-8.0369-6.5124-13.4865z\" fill=\"#3ecf8e\"/></g></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Problematic Transformation of $defs to TypeScript\nDESCRIPTION: This TypeScript snippet shows the problematic transformation of the OpenAPI schema with incorrectly defined $defs. It demonstrates how the $defs are lost in the resulting TypeScript interface, causing a type error.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface components {\n  schemas: {\n    DefType: string;\n    MyType: {\n      myType?: components[\"schemas\"][\"DefType\"][\"$defs\"][\"myDefType\"]; // ❌ Property '$defs' does not exist on type 'String'.\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nuxt Logo SVG in HTML\nDESCRIPTION: This snippet defines an SVG path for the Nuxt logo within an HTML list item. The SVG is set to a height of 24 pixels and uses a custom viewBox.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/index.md#2025-04-17_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"Nuxt\" height=\"24\" viewBox=\"0 0 384 120\" ><path d=\"M180.96 96C181.997 96 182.88 95.1403 182.88 94.08V49.44C182.88 49.44 185.28 53.76 189.6 60.96L208.32 93.12C209.177 94.9152 211.077 96 212.64 96H225.6V24H212.64C211.777 24 210.72 24.7172 210.72 25.92V71.04L202.08 55.68L184.8 26.4C183.959 24.9078 182.15 24 180.48 24H168V96H180.96Z\" /><path d=\"M348.48 44.16H354.72C356.311 44.16 357.6 42.8706 357.6 41.28V28.8H371.04V44.16H384V55.68H371.04V76.32C371.04 81.36 373.467 83.52 377.76 83.52H384V96H375.84C364.775 96 357.6 88.8341 357.6 76.8V55.68H348.48V44.16Z\" /><path d=\"M283.68 44.16V73.92C283.68 80.6419 281.156 86.3083 277.44 90.24C273.724 94.1717 268.592 96 261.6 96C254.608 96 248.996 94.1717 245.28 90.24C241.627 86.3083 239.04 80.6419 239.04 73.92V44.16H246.72C248.358 44.16 249.969 44.4586 251.04 45.6C252.111 46.678 252.48 47.3113 252.48 48.96V73.92C252.48 77.7883 252.699 80.1778 254.4 82.08C256.101 83.9189 258.199 84.48 261.6 84.48C265.064 84.48 266.619 83.9189 268.32 82.08C270.021 80.1778 270.24 77.7883 270.24 73.92V48.96C270.24 47.3113 270.609 46.2614 271.68 45.12C272.621 44.1171 273.613 44.1407 275.04 44.16C275.237 44.1626 275.801 44.16 276 44.16H283.68Z\" /><path d=\"M324.48 69.12L340.8 44.16H328.32C326.747 44.16 325.35 44.7244 324.48 46.08L316.8 57.6L309.6 46.56C308.73 45.2044 306.853 44.16 305.28 44.16H293.28L309.6 68.64L291.84 96H304.32C305.88 96 307.287 94.4577 308.16 93.12L316.8 80.16L325.92 93.6C326.793 94.9377 328.2 96 329.76 96H342.24L324.48 69.12Z\" /><path d=\"M80.64 96H133.92C135.62 96 137.247 95.4029 138.72 94.56C140.193 93.7171 141.71 92.6597 142.56 91.2C143.41 89.7403 144.001 88.0848 144 86.3995C143.999 84.7142 143.411 83.0592 142.56 81.6005L106.56 19.68C105.71 18.2208 104.672 17.1625 103.2 16.32C101.728 15.4775 99.6202 14.88 97.92 14.88C96.2198 14.88 94.5922 15.4775 93.12 16.32C91.6478 17.1625 90.6096 18.2208 89.76 19.68L80.64 35.52L62.4 4.79887C61.5494 3.33976 60.5126 1.80236 59.04 0.96C57.5674 0.117642 55.9402 0 54.24 0C52.5398 0 50.9126 0.117642 49.44 0.96C47.9675 1.80236 46.4504 3.33976 45.6 4.79887L0.960003 81.6005C0.108953 83.0592 0.000743433 84.7142 3.65186e-06 86.3995C-0.000736129 88.0848 0.110234 89.7403 0.960003 91.2C1.80977 92.6592 3.32758 93.7171 4.8 94.56C6.2724 95.4029 7.89975 96 9.6 96H43.2C56.5138 96 66.204 90.0278 72.96 78.72L89.28 50.4L97.92 35.52L124.32 80.64H89.28L80.64 96ZM42.72 80.64H19.2L54.24 20.16L72 50.4L60.2357 70.908C55.7491 78.2448 50.6342 80.64 42.72 80.64Z\" fill=\"#00DC82\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Problematic $defs Definition in OpenAPI 3 YAML\nDESCRIPTION: This YAML snippet demonstrates an incorrect way to define $defs in an OpenAPI 3 schema. It shows a situation where $defs are defined on a string type, which will not be preserved in the TypeScript transformation.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    DefType:\n      type: string # ❌ this won't keep its $defs\n      $defs:\n        myDefType:\n          type: string\n    MyType:\n      properties:\n        myType:\n          $ref: \"#/components/schemas/DefType/$defs/myDefType\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Fedora Logo SVG in HTML\nDESCRIPTION: This snippet defines an SVG path for the Fedora logo within an HTML list item. The SVG is set to a height of 24 pixels and uses a custom viewBox.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/index.md#2025-04-17_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"Fedora\" height=\"24\" viewBox=\"0 0 382 96\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m.00774375 47.9625c.01511245-23.175 18.79855625-41.9625 41.99225625-41.9625s42 18.8063 42 42-18.7875 41.9812-41.9812 42h-32.46942c-5.26688 0-9.53378-4.2562-9.54158-9.525h-.0078v-32.5125zm64.22975625-11.8313c0-7.4437-6.675-12.8437-13.725-12.8437-6.5438 0-12.3375 4.9313-13.1437 11.2313-.0375.7125-.0751.9375-.0751 1.5937-.0187 3.9563.0001 8.025-.1499 12.075.1687 4.8938.1875 9.7688 0 14.3625 0 5.0813-3.6376 8.5313-8.3813 8.5313-4.7438 0-8.5875-3.7875-8.5875-8.5313.0937-5.1937 4.2375-8.4937 9.0938-8.6438h.0375l4.9312-.0375v-6.9937l-4.9312.0375c-8.8313-.075-15.8588 6.8438-16.1138 15.6375 0 8.55 7.0387 15.5438 15.57 15.5438 8.0625 0 14.7562-6.3001 15.4875-14.1751l.0375-10.0312 6.1125-.0562c4.7437.0375 4.6875-7.0875-.0375-6.9938l-6.075.0563c0-1.2.0188-2.4001.0188-3.6001.0187-2.3812.0187-4.7625-.0188-7.1625.0187-3.0937 2.9625-5.85 6.225-5.85 3.2812 0 6.7312 1.6313 6.7312 5.85 0 .6-.0187.9563-.0562 1.1813-.3562 1.9687.975 3.825 2.9438 4.1062 1.9875.2813 3.7874-1.1437 3.9749-3.1124.1125-.7875.1313-1.4813.1313-2.1751z\"/><path d=\"m135.733 12c-12.25 0-20.113 9.1308-20.186 17.673v49.5262c-.016 6.108 9.47 6.108 9.453 0v-33.0543h9.72c2.273 0 4.214-1.6156 4.214-4.2071s-2.079-4.1578-4.214-4.1578h-9.72v-7.6137c0-4.875 3.89-8.9382 11.718-8.8421 2.723.0352 3.683.681 4.677 1.2753 5.429 3.5266 10.653-4.6389 4.964-7.7608-3.487-2.0928-6.742-2.8332-10.631-2.8332zm103.592.8833c-2.949-.1549-5.118 2.7092-4.665 5.4331v21.0978c-9.351-7.6874-24.573-7.1496-33.2 1.3614-8.729 7.6307-10.388 21.4544-4.04 30.9801 4.664 7.1949 13.195 12.3293 21.987 11.9216 5.528-.0503 11.004-2.3928 15.256-5.8477-.437 2.7296 1.714 5.6212 4.689 5.4457 2.92.1277 5.188-2.6991 4.74-5.4332-.051-20.2883.051-40.5695-.051-60.8528-.152-2.2796-2.37-4.1602-4.69-4.0966h-.01zm36.528 20.6563c-14.26 0-25.821 11.2445-25.824 25.1168-.003 13.8772 11.56 25.1282 25.824 25.1282 14.265 0 25.828-11.2513 25.825-25.1282-.003-13.8726-11.564-25.1168-25.825-25.1168zm84.345.2208c-6.448 0-11.095 1.8776-14.48 4.2557-5.138 3.6078.39 11.1516 5.527 7.5402 2.339-1.641 4.076-2.5145 8.956-2.5145 6.074.1197 10.953 2.3527 10.953 6.8043-3.256 2.0203-17.412 3.6958-25.009 7.9363-7.602 4.2393-7.201 9.5895-7.201 13.0594 0 7.6137 8.192 12.7538 15.284 12.7538 7.088 0 10.099-1.4588 17.034-6.1194v1.3247c-.224 6.3965 9.691 6.3965 9.465 0v-27.3359c.031-11.3385-8.265-17.5372-20.521-17.7126zm-47.025.098c-4.103 0-4.786 3.3213-4.765 4.6605v40.3278c-.112 2.6068 2.086 4.7708 4.84 4.7708s4.952-2.1641 4.84-4.7708c0 0 .073-15.0012 0-24.6017-.072-9.6009 7.897-11.6781 10.665-11.6781 2.058 0 3.709 1.127 5.34 1.067 2.421-.0895 4.402-1.6846 4.402-4.4766-.073-4.5106-5.706-5.149-9.867-5.0651-4.16.0834-7.676 1.3337-10.716 3.115 0 0-.637-3.3484-4.74-3.3484zm-145.257.0981c-3.141-.2368-6.612.2569-10.428 1.705-9.244 3.5039-15.516 12.1142-15.544 22.7393-.026 11.1293 7.913 25.4905 24.387 25.5983 11.078.0714 16.62-3.9868 19.609-6.7476 1.984-1.7243 2.13-4.7204.312-6.6118-1.821-1.8941-4.878-1.9405-6.753-.098-2.232 2.0566-5.521 5.1117-14.843 4.0967-4-.4343-8.292-3.6218-9.73-6.057l30.541-12.7424c2.335-1.0178 3.415-3.6749 2.426-5.9835-4.09-7.8912-10.552-15.1823-19.971-15.8956zm107.952 8.9893c8.921 0 16.153 7.032 16.156 15.7088.006 8.683-7.228 15.7258-16.156 15.7258-8.927 0-16.162-7.0425-16.156-15.7258.004-8.6765 7.236-15.7088 16.156-15.7088zm-57.005.2453c8.44-.2161 15.98 7.24 15.822 15.4426.177 8.2082-7.388 15.6521-15.822 15.4426-8.022.2086-15.375-6.4533-15.783-14.2652-.854-8.0497 5.888-15.907 14.147-16.5466.544-.0522 1.091-.0738 1.638-.0738zm-53.302.2454c4.593.0044 8.927 2.3271 11.129 6.0682l-25.423 10.6478c-1.814-6.6457 5.634-14.4519 9.692-15.9069 1.521-.5452 3.07-.8106 4.602-.8095zm205.94 15.5503c-.002 3.0063.046 3.8755-.036 6.878-.021 3.6092-2.332 5.2785-4.753 6.6571-2.42 1.3812-7.342 2.5904-10.189 2.7228-3.286.1066-7.637-.6176-7.869-4.4398.002-2.3074 1.143-3.7418 3.014-5.3353 4.431-3.2601 10.427-4.3515 19.835-6.4873z\"/></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Basic Object Schema Without Properties\nDESCRIPTION: A basic object schema definition that doesn't specify properties or additional properties, resulting in a restrictive TypeScript type that doesn't allow any properties.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/advanced.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Updating CustomRequest class in TypeScript\nDESCRIPTION: Fixes an issue where native properties were not excluded from custom properties in the CustomRequest class.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1672](https://github.com/openapi-ts/openapi-typescript/pull/1672) [`64cb619`](https://github.com/openapi-ts/openapi-typescript/commit/64cb6193ddd94523636fd55ba308117f2614a2e2) Thanks [@jaredLunde](https://github.com/jaredLunde)! - Fixes issue where native properties were not excluded from custom properties in the CustomRequest class\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Markdown formatted changelog showing version history from 0.0.1 to 0.3.1, including minor changes, patches, and dependency updates\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-react-query/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# openapi-react-query\n\n## 0.3.1\n\n### Patch Changes\n\n- Updated dependencies [[`ebe56f3`](https://github.com/openapi-ts/openapi-typescript/commit/ebe56f337561bfdd1bf1abdc56ba3d2f48c4d393)]:\n  - openapi-fetch@0.13.5\n```\n\n----------------------------------------\n\nTITLE: YAML Schema with Enum Extensions Configuration\nDESCRIPTION: Demonstrates how to use x-enum-varnames and x-enum-descriptions extensions in YAML OpenAPI schema to generate more descriptive TypeScript enums with custom names and comments.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nErrorCode:\n  type: integer\n  format: int32\n  enum:\n    - 100\n    - 200\n    - 300\n  x-enum-varnames:\n    - Unauthorized\n    - AccessDenied\n    - Unknown\n  x-enum-descriptions:\n    - \"User is not authorized\"\n    - \"User has no access to this resource\"\n    - \"Something went wrong\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (user-agents) to access all content on the website. This configuration does not restrict any bots from indexing any part of the site.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Implementing Nuxt SVG Icon in HTML\nDESCRIPTION: An inline SVG element representing the Nuxt.js framework logo. The SVG has a height of 24 pixels and contains path data defining the distinctive Nuxt logo shape.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<svg title=\"Nuxt\" height=\"24\" viewBox=\"0 0 384 120\" ><path d=\"M180.96 96C181.997 96 182.88 95.1403 182.88 94.08V49.44C182.88 49.44 185.28 53.76 189.6 60.96L208.32 93.12C209.177 94.9152 211.077 96 212.64 96H225.6V24H212.64C211.777 24 210.72 24.7172 210.72 25.92V71.04L202.08 55.68L184.8 26.4C183.959 24.9078 182.15 24 180.48 24H168V96H180.96Z\" /><path d=\"M348.48 44.16H354.72C356.311 44.16 357.6 42.8706 357.6 41.28V28.8H371.04V44.16H384V55.68H371.04V76.32C371.04 81.36 373.467 83.52 377.76 83.52H384V96H375.84C364.775 96 357.6 88.8341 357.6 76.8V55.68H348.48V44.16Z\" /><path d=\"M283.68 44.16V73.92C283.68 80.6419 281.156 86.3083 277.44 90.24C273.724 94.1717 268.592 96 261.6 96C254.608 96 248.996 94.1717 245.28 90.24C241.627 86.3083 239.04 80.6419 239.04 73.92V44.16H246.72C248.358 44.16 249.969 44.4586 251.04 45.6C252.111 46.678 252.48 47.3113 252.48 48.96V73.92C252.48 77.7883 252.699 80.1778 254.4 82.08C256.101 83.9189 258.199 84.48 261.6 84.48C265.064 84.48 266.619 83.9189 268.32 82.08C270.021 80.1778 270.24 77.7883 270.24 73.92V48.96C270.24 47.3113 270.609 46.2614 271.68 45.12C272.621 44.1171 273.613 44.1407 275.04 44.16C275.237 44.1626 275.801 44.16 276 44.16H283.68Z\" /><path d=\"M324.48 69.12L340.8 44.16H328.32C326.747 44.16 325.35 44.7244 324.48 46.08L316.8 57.6L309.6 46.56C308.73 45.2044 306.853 44.16 305.28 44.16H293.28L309.6 68.64L291.84 96H304.32C305.88 96 307.287 94.4577 308.16 93.12L316.8 80.16L325.92 93.6C326.793 94.9377 328.2 96 329.76 96H342.24L324.48 69.12Z\" /><path d=\"M80.64 96H133.92C135.62 96 137.247 95.4029 138.72 94.56C140.193 93.7171 141.71 92.6597 142.56 91.2C143.41 89.7403 144.001 88.0848 144 86.3995C143.999 84.7142 143.411 83.0592 142.56 81.6005L106.56 19.68C105.71 18.2208 104.672 17.1625 103.2 16.32C101.728 15.4775 99.6202 14.88 97.92 14.88C96.2198 14.88 94.5922 15.4775 93.12 16.32C91.6478 17.1625 90.6096 18.2208 89.76 19.68L80.64 35.52L62.4 4.79887C61.5494 3.33976 60.5126 1.80236 59.04 0.96C57.5674 0.117642 55.9402 0 54.24 0C52.5398 0 50.9126 0.117642 49.44 0.96C47.9675 1.80236 46.4504 3.33976 45.6 4.79887L0.960003 81.6005C0.108953 83.0592 0.000743433 84.7142 3.65186e-06 86.3995C-0.000736129 88.0848 0.110234 89.7403 0.960003 91.2C1.80977 92.6592 3.32758 93.7171 4.8 94.56C6.2724 95.4029 7.89975 96 9.6 96H43.2C56.5138 96 66.204 90.0278 72.96 78.72L89.28 50.4L97.92 35.52L124.32 80.64H89.28L80.64 96ZM42.72 80.64H19.2L54.24 20.16L72 50.4L60.2357 70.908C55.7491 78.2448 50.6342 80.64 42.72 80.64Z\" fill=\"#00DC82\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry\nDESCRIPTION: Markdown formatted version entries documenting package changes with release numbers, pull request links, and commit hashes.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/packages/openapi-fetch/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#1300](https://github.com/openapi-ts/openapi-typescript/pull/1300) [`5939e20`](https://github.com/openapi-ts/openapi-typescript/commit/5939e20b86ca3019cbc0a1c7f6de2b15a806cf72) Thanks [@drwpow](https://github.com/drwpow)! - Use openapi-typescript-helpers package for types\n```\n\n----------------------------------------\n\nTITLE: Rendering Supabase Logo as SVG in HTML\nDESCRIPTION: SVG markup for the Supabase logo embedded in an HTML list item. The SVG includes path elements, linear gradients, and clipPath definitions to create the full logo with specific styling.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/ja/index.md#2025-04-17_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<li><svg title=\"Supabase\" height=\"24\" viewBox=\"0 0 494 96\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><linearGradient id=\"supabase-a\" gradientUnits=\"userSpaceOnUse\" x1=\"45.8538\" x2=\"79.9973\" y1=\"46.7036\" y2=\"61.0233\"><stop offset=\"0\" stop-color=\"#249361\"/><stop offset=\"1\" stop-color=\"#3ecf8e\"/></linearGradient><linearGradient id=\"supabase-b\" gradientUnits=\"userSpaceOnUse\" x1=\"30.7164\" x2=\"46.2876\" y1=\"25.9778\" y2=\"55.2897\"><stop offset=\"0\"/><stop offset=\"1\" stop-opacity=\"0\"/></linearGradient><clipPath id=\"supabase-c\"><path d=\"m0 0h493.593v96h-493.593z\"/></clipPath><g clip-path=\"url(#supabase-c)\"><path d=\"m128.62 56.7172c.509 4.7586 4.838 12.9161 17.399 12.9161 10.949 0 16.212-6.9679 16.212-13.7658 0-6.1183-4.16-11.1317-12.392-12.8314l-5.942-1.2745c-2.291-.4248-3.819-1.6994-3.819-3.7389 0-2.3793 2.377-4.1637 5.348-4.1637 4.752 0 6.534 3.144 6.874 5.6084l9.421-2.1244c-.509-4.5037-4.498-12.0664-16.38-12.0664-8.997 0-15.617 6.2032-15.617 13.6808 0 5.8632 3.649 10.707 11.712 12.4913l5.517 1.2747c3.225.6797 4.498 2.2094 4.498 4.0788 0 2.2094-1.782 4.1638-5.517 4.1638-4.922 0-7.384-3.0592-7.638-6.3733z\"/><path d=\"m198.305 68.3587h10.779c-.17-1.4446-.425-4.3337-.425-7.5628v-34.2448h-11.289v24.3027c0 4.8437-2.885 8.2426-7.892 8.2426-5.263 0-7.64-3.7389-7.64-8.4125v-24.1328h-11.288v26.4272c0 9.0923 5.771 16.4851 15.872 16.4851 4.412 0 9.252-1.6995 11.544-5.6084 0 1.6995.169 3.6539.339 4.5037z\"/><path d=\"m231.994 84.504v-20.2239c2.036 2.804 6.281 5.0985 12.052 5.0985 11.797 0 19.69-9.3474 19.69-22.0086 0-12.4062-7.044-21.7535-19.266-21.7535-6.28 0-10.948 2.8041-12.815 6.0333v-5.0986h-10.948v57.9528zm20.624-37.049c0 7.4779-4.583 11.8115-10.355 11.8115-5.77 0-10.438-4.4186-10.438-11.8115 0-7.3927 4.668-11.7265 10.438-11.7265 5.772 0 10.355 4.3338 10.355 11.7265z\"/><path d=\"m270.129 56.9721c0 6.5431 5.431 12.5763 14.344 12.5763 6.194 0 10.183-2.8892 12.305-6.2033 0 1.6146.17 3.9089.424 5.0136h10.355c-.255-1.4446-.508-4.4187-.508-6.628v-20.5639c0-8.4125-4.923-15.8902-18.163-15.8902-11.204 0-17.231 7.2227-17.909 13.7658l10.015 2.1244c.34-3.6539 3.056-6.7979 7.977-6.7979 4.754 0 7.046 2.4642 7.046 5.4383 0 1.4446-.763 2.6343-3.14 2.9741l-10.27 1.5296c-6.959 1.0197-12.476 5.1834-12.476 12.6612zm16.719 4.1638c-3.649 0-5.432-2.3793-5.432-4.8435 0-3.2291 2.291-4.8437 5.178-5.2685l9.421-1.4446v1.8694c0 7.3929-4.414 9.6872-9.167 9.6872z\"/><path d=\"m329.376 68.3589v-5.0986c2.205 3.569 6.619 6.1183 12.391 6.1183 11.883 0 19.692-9.4323 19.692-22.0935 0-12.4064-7.046-21.8385-19.267-21.8385-6.197 0-10.78 2.7192-12.647 5.6932v-24.3027h-11.118v61.5218zm20.793-20.9889c0 7.6478-4.583 11.8965-10.355 11.8965-5.686 0-10.438-4.3336-10.438-11.8965 0-7.6478 4.752-11.8114 10.438-11.8114 5.772 0 10.355 4.1636 10.355 11.8114z\"/><path d=\"m367.85 56.9721c0 6.5431 5.431 12.5763 14.343 12.5763 6.195 0 10.185-2.8892 12.306-6.2033 0 1.6146.171 3.9089.425 5.0136h10.354c-.253-1.4446-.508-4.4187-.508-6.628v-20.5639c0-8.4125-4.923-15.8902-18.164-15.8902-11.203 0-17.229 7.2227-17.907 13.7658l10.013 2.1244c.341-3.6539 3.057-6.7979 7.979-6.7979 4.754 0 7.045 2.4642 7.045 5.4383 0 1.4446-.764 2.6343-3.141 2.9741l-10.268 1.5296c-6.96 1.0197-12.477 5.1834-12.477 12.6612zm16.72 4.1638c-3.65 0-5.433-2.3793-5.433-4.8435 0-3.2291 2.291-4.8437 5.178-5.2685l9.421-1.4446v1.8694c0 7.3929-4.414 9.6872-9.166 9.6872z\"/><path d=\"m412.583 56.7172c.508 4.7586 4.838 12.9161 17.398 12.9161 10.95 0 16.211-6.9679 16.211-13.7658 0-6.1183-4.158-11.1317-12.391-12.8314l-5.942-1.2745c-2.291-.4248-3.818-1.6994-3.818-3.7389 0-2.3793 2.376-4.1637 5.347-4.1637 4.754 0 6.535 3.144 6.876 5.6084l9.42-2.1244c-.51-4.5037-4.499-12.0664-16.38-12.0664-8.998 0-15.617 6.2032-15.617 13.6808 0 5.8632 3.648 10.707 11.712 12.4913l5.517 1.2747c3.226.6797 4.498 2.2094 4.498 4.0788 0 2.2094-1.782 4.1638-5.517 4.1638-4.923 0-7.383-3.0592-7.638-6.3733z\"/><path d=\"m463.336 42.6963c.255-3.8238 3.481-8.2426 9.337-8.2426 6.449 0 9.166 4.0789 9.336 8.2426zm19.777 10.8769c-1.359 3.7387-4.245 6.373-9.507 6.373-5.602 0-10.27-3.9938-10.523-9.5171h29.874c0-.1701.17-1.8695.17-3.4841 0-13.426-7.723-21.6684-20.624-21.6684-10.694 0-20.54 8.6673-20.54 22.0084 0 14.1057 10.099 22.3483 21.558 22.3483 10.27 0 16.89-6.0332 19.013-13.2561z\" /><path d=\"m54.1232 93.6926c-2.4293 3.0593-7.3549 1.3831-7.4135-2.5232l-.8559-57.1338h38.4168c6.9583 0 10.839 8.0369 6.5122 13.4865z\" fill=\"url(#supabase-a)\"/><path d=\"m54.1232 93.6926c-2.4293 3.0593-7.3549 1.3831-7.4135-2.5232l-.8559-57.1338h38.4168c6.9583 0 10.839 8.0369 6.5122 13.4865z\" fill=\"url(#supabase-b)\" fill-opacity=\".2\"/><path d=\"m38.4994 1.75946c2.4293-3.05959 7.355-1.383157 7.4136 2.52316l.375 57.13378h-37.9359c-6.95852 0-10.83941-8.0369-6.5124-13.4865z\" fill=\"#3ecf8e\"/></g></svg></li>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fedora SVG Icon in HTML\nDESCRIPTION: An inline SVG element representing the Fedora Linux distribution logo. The SVG has a height of 24 pixels and contains path data defining the characteristic Fedora 'f' logo and wordmark.\nSOURCE: https://github.com/openapi-ts/openapi-typescript/blob/main/docs/zh/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg title=\"Fedora\" height=\"24\" viewBox=\"0 0 382 96\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m.00774375 47.9625c.01511245-23.175 18.79855625-41.9625 41.99225625-41.9625s42 18.8063 42 42-18.7875 41.9812-41.9812 42h-32.46942c-5.26688 0-9.53378-4.2562-9.54158-9.525h-.0078v-32.5125zm64.22975625-11.8313c0-7.4437-6.675-12.8437-13.725-12.8437-6.5438 0-12.3375 4.9313-13.1437 11.2313-.0375.7125-.0751.9375-.0751 1.5937-.0187 3.9563.0001 8.025-.1499 12.075.1687 4.8938.1875 9.7688 0 14.3625 0 5.0813-3.6376 8.5313-8.3813 8.5313-4.7438 0-8.5875-3.7875-8.5875-8.5313.0937-5.1937 4.2375-8.4937 9.0938-8.6438h.0375l4.9312-.0375v-6.9937l-4.9312.0375c-8.8313-.075-15.8588 6.8438-16.1138 15.6375 0 8.55 7.0387 15.5438 15.57 15.5438 8.0625 0 14.7562-6.3001 15.4875-14.1751l.0375-10.0312 6.1125-.0562c4.7437.0375 4.6875-7.0875-.0375-6.9938l-6.075.0563c0-1.2.0188-2.4001.0188-3.6001.0187-2.3812.0187-4.7625-.0188-7.1625.0187-3.0937 2.9625-5.85 6.225-5.85 3.2812 0 6.7312 1.6313 6.7312 5.85 0 .6-.0187.9563-.0562 1.1813-.3562 1.9687.975 3.825 2.9438 4.1062 1.9875.2813 3.7874-1.1437 3.9749-3.1124.1125-.7875.1313-1.4813.1313-2.1751z\"/><path d=\"m135.733 12c-12.25 0-20.113 9.1308-20.186 17.673v49.5262c-.016 6.108 9.47 6.108 9.453 0v-33.0543h9.72c2.273 0 4.214-1.6156 4.214-4.2071s-2.079-4.1578-4.214-4.1578h-9.72v-7.6137c0-4.875 3.89-8.9382 11.718-8.8421 2.723.0352 3.683.681 4.677 1.2753 5.429 3.5266 10.653-4.6389 4.964-7.7608-3.487-2.0928-6.742-2.8332-10.631-2.8332zm103.592.8833c-2.949-.1549-5.118 2.7092-4.665 5.4331v21.0978c-9.351-7.6874-24.573-7.1496-33.2 1.3614-8.729 7.6307-10.388 21.4544-4.04 30.9801 4.664 7.1949 13.195 12.3293 21.987 11.9216 5.528-.0503 11.004-2.3928 15.256-5.8477-.437 2.7296 1.714 5.6212 4.689 5.4457 2.92.1277 5.188-2.6991 4.74-5.4332-.051-20.2883.051-40.5695-.051-60.8528-.152-2.2796-2.37-4.1602-4.69-4.0966h-.01zm36.528 20.6563c-14.26 0-25.821 11.2445-25.824 25.1168-.003 13.8772 11.56 25.1282 25.824 25.1282 14.265 0 25.828-11.2513 25.825-25.1282-.003-13.8726-11.564-25.1168-25.825-25.1168zm84.345.2208c-6.448 0-11.095 1.8776-14.48 4.2557-5.138 3.6078.39 11.1516 5.527 7.5402 2.339-1.641 4.076-2.5145 8.956-2.5145 6.074.1197 10.953 2.3527 10.953 6.8043-3.256 2.0203-17.412 3.6958-25.009 7.9363-7.602 4.2393-7.201 9.5895-7.201 13.0594 0 7.6137 8.192 12.7538 15.284 12.7538 7.088 0 10.099-1.4588 17.034-6.1194v1.3247c-.224 6.3965 9.691 6.3965 9.465 0v-27.3359c.031-11.3385-8.265-17.5372-20.521-17.7126zm-47.025.098c-4.103 0-4.786 3.3213-4.765 4.6605v40.3278c-.112 2.6068 2.086 4.7708 4.84 4.7708s4.952-2.1641 4.84-4.7708c0 0 .073-15.0012 0-24.6017-.072-9.6009 7.897-11.6781 10.665-11.6781 2.058 0 3.709 1.127 5.34 1.067 2.421-.0895 4.402-1.6846 4.402-4.4766-.073-4.5106-5.706-5.149-9.867-5.0651-4.16.0834-7.676 1.3337-10.716 3.115 0 0-.637-3.3484-4.74-3.3484zm-145.257.0981c-3.141-.2368-6.612.2569-10.428 1.705-9.244 3.5039-15.516 12.1142-15.544 22.7393-.026 11.1293 7.913 25.4905 24.387 25.5983 11.078.0714 16.62-3.9868 19.609-6.7476 1.984-1.7243 2.13-4.7204.312-6.6118-1.821-1.8941-4.878-1.9405-6.753-.098-2.232 2.0566-5.521 5.1117-14.843 4.0967-4-.4343-8.292-3.6218-9.73-6.057l30.541-12.7424c2.335-1.0178 3.415-3.6749 2.426-5.9835-4.09-7.8912-10.552-15.1823-19.971-15.8956zm107.952 8.9893c8.921 0 16.153 7.032 16.156 15.7088.006 8.683-7.228 15.7258-16.156 15.7258-8.927 0-16.162-7.0425-16.156-15.7258.004-8.6765 7.236-15.7088 16.156-15.7088zm-57.005.2453c8.44-.2161 15.98 7.24 15.822 15.4426.177 8.2082-7.388 15.6521-15.822 15.4426-8.022.2086-15.375-6.4533-15.783-14.2652-.854-8.0497 5.888-15.907 14.147-16.5466.544-.0522 1.091-.0738 1.638-.0738zm-53.302.2454c4.593.0044 8.927 2.3271 11.129 6.0682l-25.423 10.6478c-1.814-6.6457 5.634-14.4519 9.692-15.9069 1.521-.5452 3.07-.8106 4.602-.8095zm205.94 15.5503c-.002 3.0063.046 3.8755-.036 6.878-.021 3.6092-2.332 5.2785-4.753 6.6571-2.42 1.3812-7.342 2.5904-10.189 2.7228-3.286.1066-7.637-.6176-7.869-4.4398.002-2.3074 1.143-3.7418 3.014-5.3353 4.431-3.2601 10.427-4.3515 19.835-6.4873z\"/></svg>\n```"
  }
]