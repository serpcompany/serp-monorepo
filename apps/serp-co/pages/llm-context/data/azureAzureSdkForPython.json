[
  {
    "owner": "azure",
    "repo": "azure-sdk-for-python",
    "content": "TITLE: Defining a Weather Fetch Function for FunctionTool - Python\nDESCRIPTION: This snippet defines the 'fetch_weather' function with properly structured type annotations and docstrings, as required by FunctionTool for agent-ready definitions. It mocks weather data for selected locations and converts the response to a JSON-formatted string for agent consumption. Dependencies include json (for serialization); parameter 'location' specifies the city and the function returns a JSON string containing weather information, defaulting to an error message for unknown locations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/FunctionTool.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_weather(location: str) -> str:\n    \"\"\"\n    Fetches the weather information for the specified location.\n \n    :param location (str): The location to fetch weather for.\n    :return: Weather information as a JSON string.\n    :rtype: str\n    \"\"\"\n    # In a real-world scenario, you'd integrate with a weather API.\n    mock_weather_data = {\"New York\": \"Sunny, 25°C\", \"London\": \"Cloudy, 18°C\", \"Tokyo\": \"Rainy, 22°C\"}\n    weather = mock_weather_data.get(location, \"Weather data not available for this location.\")\n    weather_json = json.dumps({\"weather\": weather})\n    return weather_json\n```\n\n----------------------------------------\n\nTITLE: Creating a Key Client with DefaultAzureCredential\nDESCRIPTION: This snippet demonstrates how to create a KeyClient instance using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\nVAULT_URL = os.environ[\"VAULT_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyClient(vault_url=VAULT_URL, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Local Dependency in Python Requirements File - plaintext\nDESCRIPTION: Defines an editable dependency on the azure-sdk-tools Python package, located at '../../../tools/azure-sdk-tools'. The '-e' flag tells pip to install the package in editable mode, enabling local modifications to reflect immediately without reinstalling the package. This snippet is typically placed in requirements.txt or similar files and is used for development purposes; it assumes the target folder contains a valid Python setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trafficmanager/azure-mgmt-trafficmanager/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local path references, editable installs, and specific package versions. The dependencies cover core Azure functionality, Key Vault, and utility packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../core/azure-core\n-e ../../../tools/azure-sdk-tools\n../../nspkg/azure-keyvault-nspkg\naiohttp>=3.0\nazure-identity\nazure-mgmt-keyvault==10.1.0\nparameterized>=0.7.3\npython-dateutil>=2.8.0\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous Clients for Logs and Metrics Querying in Python\nDESCRIPTION: Example of creating authenticated synchronous clients for querying Logs and Metrics using DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.query import LogsQueryClient, MetricsQueryClient, MetricsClient\n\ncredential = DefaultAzureCredential()\nlogs_query_client = LogsQueryClient(credential)\nmetrics_query_client = MetricsQueryClient(credential)\nmetrics_client = MetricsClient(\"https://<regional endpoint>\", credential)\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK Python Project\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK Python project. It includes local package references and an external library. The '-e' flag indicates editable mode for local development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothub/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Document Model in Python\nDESCRIPTION: This snippet shows how to build a custom document model using the Document Intelligence service. It uses a container SAS URL to access training documents and builds a model in template mode. The resulting model's details, including ID, description, and recognized fields, are then printed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.formrecognizer import (\n    DocumentModelAdministrationClient,\n    ModelBuildMode,\n)\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\ncontainer_sas_url = os.environ[\"CONTAINER_SAS_URL\"]\n\ndocument_model_admin_client = DocumentModelAdministrationClient(\n    endpoint, AzureKeyCredential(key)\n)\npoller = document_model_admin_client.begin_build_document_model(\n    ModelBuildMode.TEMPLATE,\n    blob_container_url=container_sas_url,\n    description=\"my model description\",\n)\nmodel = poller.result()\n\nprint(f\"Model ID: {model.model_id}\")\nprint(f\"Description: {model.description}\")\nprint(f\"Model created on: {model.created_on}\")\nprint(f\"Model expires on: {model.expires_on}\")\nprint(\"Doc types the model can recognize:\")\nfor name, doc_type in model.doc_types.items():\n    print(\n        f\"Doc Type: '{name}' built with '{doc_type.build_mode}' mode which has the following fields:\"\n    )\n    for field_name, field in doc_type.field_schema.items():\n        print(\n            f\"Field: '{field_name}' has type '{field['type']}' and confidence score \"\n            f\"{doc_type.field_confidence[field_name]}\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Authenticating Authoring Client with DefaultAzureCredential (New QnA SDK) in Python\nDESCRIPTION: Illustrates authenticating the `AuthoringClient` from the modern `azure-ai-language-questionanswering.authoring` library using `DefaultAzureCredential` from `azure.identity`. This method supports various authentication mechanisms and requires the Azure Cognitive Services endpoint URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=DefaultAzureCredential()\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a dependency on Azure SDK tools, using an editable install from a relative path. It's typically used in a requirements file to ensure the project has access to necessary Azure SDK development tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-mgmt-confidentialledger/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Key Vault Secrets Client\nDESCRIPTION: Sets up detailed DEBUG level logging for the Azure SDK client, demonstrating how to configure logging for HTTP sessions and request/response details.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nsecret_client = SecretClient(\n    vault_url=\"https://my-key-vault.vault.azure.net/\",\n    credential=credential,\n    logging_enable=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Container using ContainerClient in Python\nDESCRIPTION: This snippet demonstrates how to create a container using the ContainerClient from a connection string. It initializes the client and calls the create_container method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import ContainerClient\n\ncontainer_client = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\ncontainer_client.create_container()\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Azure Cosmos DB Container\nDESCRIPTION: This snippet demonstrates how to insert multiple items into a Cosmos DB container using upsert_item method. Each item requires a unique id within the container.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\nfor i in range(1, 10):\n    container.upsert_item({\n            'id': 'item{0}'.format(i),\n            'productName': 'Widget',\n            'productModel': 'Model {0}'.format(i)\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Overloaded Functions for Type-Specific Returns\nDESCRIPTION: Shows how to use typing.overload to create multiple function signatures that can return different types based on input parameters, improving type checking and IDE suggestions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import overload, Union\n\n\n@overload\ndef analyze(text: str, task: LanguageDetection) -> LanguageDetectionResult:\n    ...\n\n@overload\ndef analyze(text: str, task: EntityRecognition) -> EntityRecognitionResult:\n    ...\n\n@overload\ndef analyze(text: str, task: SentimentAnalysis) -> SentimentResult:\n    ...\n\n# actual implementation\ndef analyze(\n    text: str, task: Union[SentimentAnalysis, EntityRecognition, LanguageDetection]\n) -> Union[SentimentResult, EntityRecognitionResult, LanguageDetectionResult]:\n    return _analyze(text, task)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Azure Exception Class in Python\nDESCRIPTION: This snippet defines the base AzureError class for all errors in Azure Core libraries. It extends Python's Exception class, capturing details about the inner exception (if any), the traceback, and supporting a continuation token for incomplete operations. Developers use *message* for the error description, *args* for additional constructor arguments, and *kwargs* including 'error' or 'continuation_token'. The class supports exception chaining and detailed message formatting. Requires import of sys for traceback introspection.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AzureError(Exception):\n    def __init__(self, message, *args, **kwargs):\n        self.inner_exception = kwargs.get(\"error\")\n        self.exc_type, self.exc_value, self.exc_traceback = sys.exc_info()\n        self.exc_type = self.exc_type.__name__ if self.exc_type else type(self.inner_exception)\n        self.exc_msg = \"{}, {}: {}\".format(message, self.exc_type, self.exc_value)  # type: ignore\n        self.message = str(message)\n        self.continuation_token = kwargs.get(\"continuation_token\")\n        super(AzureError, self).__init__(self.message, *args)\n\n```\n\n----------------------------------------\n\nTITLE: Sending/Receiving Messages with Azure Service Bus Session-Enabled Queue (Python)\nDESCRIPTION: This snippet illustrates sending a message to a specific session and then receiving messages from that same session in a session-enabled Azure Service Bus queue. It demonstrates obtaining a sender, sending a `ServiceBusMessage` with a `session_id`, and then obtaining a receiver locked to that `session_id` to process messages. Session lock management differs from message lock management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient, ServiceBusMessage\nfrom azure.identity import DefaultAzureCredential\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_SESSION_QUEUE_NAME']\nsession_id = os.environ['SERVICE_BUS_SESSION_ID']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_sender(queue_name) as sender:\n        sender.send_messages(ServiceBusMessage(\"Session Enabled Message\", session_id=session_id))\n\n    # If session_id is null here, will receive from the first available session.\n    with client.get_queue_receiver(queue_name, session_id=session_id) as receiver:\n        for msg in receiver:\n            print(str(msg))\n```\n```\n\n----------------------------------------\n\nTITLE: Recognizing PII Entities with Azure TextAnalyticsClient in Python\nDESCRIPTION: This snippet demonstrates how to recognize and redact Personally Identifiable Information (PII) from documents using Azure's Text Analytics API in Python. It initializes a 'TextAnalyticsClient' with an endpoint and key, processes a document containing various PII types, prints both the original and redacted texts, and enumerates all redacted entities. Requires 'azure-ai-textanalytics' and 'azure-core' libraries, as well as the environment variables 'AZURE_LANGUAGE_ENDPOINT' and 'AZURE_LANGUAGE_KEY'. Input is a list of document strings; output includes console prints of redacted results and entity details. API version must be v3.1 or newer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.textanalytics import TextAnalyticsClient\\n\\nendpoint = os.environ[\\\"AZURE_LANGUAGE_ENDPOINT\\\"]\\nkey = os.environ[\\\"AZURE_LANGUAGE_KEY\\\"]\\n\\ntext_analytics_client = TextAnalyticsClient(\\n    endpoint=endpoint, credential=AzureKeyCredential(key)\\n)\\ndocuments = [\\n    \\\"\\\"\\\"Parker Doe has repaid all of their loans as of 2020-04-25.\\n    Their SSN is 859-98-0987. To contact them, use their phone number\\n    555-555-5555. They are originally from Brazil and have Brazilian CPF number 998.214.865-68\\\"\\\"\\\"\\n]\\n\\nresult = text_analytics_client.recognize_pii_entities(documents)\\ndocs = [doc for doc in result if not doc.is_error]\\n\\nprint(\\n    \\\"Let's compare the original document with the documents after redaction. \\\"\\n    \\\"I also want to comb through all of the entities that got redacted\\\"\\n)\\nfor idx, doc in enumerate(docs):\\n    print(f\\\"Document text: {documents[idx]}\\\")\\n    print(f\\\"Redacted document text: {doc.redacted_text}\\\")\\n    for entity in doc.entities:\\n        print(\\\"...Entity '{}' with category '{}' got redacted\\\".format(\\n            entity.text, entity.category\\n        ))\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Logging for DefaultAzureCredential in Python\nDESCRIPTION: This snippet demonstrates how to enable detailed DEBUG-level logging for the DefaultAzureCredential class. It includes HTTP sessions and sensitive information, so caution is advised when using this in production environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncredential = DefaultAzureCredential(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing CallAutomationClient with Azure Identity\nDESCRIPTION: Creates a CallAutomationClient instance using DefaultAzureCredential for authentication. This initialization is required before performing any call automation operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.communication.callautomation import (CallAutomationClient)\n\n# Your unique Azure Communication service endpoint\nendpoint_url = '<ENDPOINT>'\ncredential = DefaultAzureCredential()\nclient = CallAutomationClient(endpoint_url, credential)\n```\n\n----------------------------------------\n\nTITLE: Sending a WhatsApp Text Message using NotificationMessagesClient (Python)\nDESCRIPTION: This example shows how to send a simple text message through WhatsApp using the Azure Communication Messages SDK. It initializes the `NotificationMessagesClient` using an endpoint and AAD credentials (`DefaultAzureCredential`), defines the message content using `TextNotificationContent` (specifying channel ID, recipient, and text), and then calls the `send` method. The code retrieves environment variables for configuration (like recipient phone number and channel ID) and prints the message ID and recipient upon successful sending.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-messages/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nsys.path.append(\"..\")\n\nclass SendWhatsAppMessageSample(object):\n\n    connection_string = os.getenv(\"COMMUNICATION_SAMPLES_CONNECTION_STRING\")\n    phone_number = os.getenv(\"RECIPIENT_PHONE_NUMBER\")\n    channel_id = os.getenv(\"WHATSAPP_CHANNEL_ID\")\n    # Example uses DefaultAzureCredential, assuming endpoint is defined elsewhere or passed\n    # endpoint_string = os.getenv(\"COMMUNICATION_ENDPOINT\") # Example if endpoint is also from env\n\n    def send_text_send_message(self):\n\n        from azure.communication.messages import NotificationMessagesClient\n        from azure.communication.messages.models import TextNotificationContent\n        from azure.identity import DefaultAzureCredential\n        \n        # Assuming self.endpoint_string is defined, e.g., from an env var or constructor\n        # Replace 'YOUR_ENDPOINT' with the actual endpoint\n        endpoint = os.getenv(\"COMMUNICATION_ENDPOINT\", \"YOUR_ENDPOINT\") \n\n        messaging_client = NotificationMessagesClient(\n            endpoint=endpoint, credential=DefaultAzureCredential()\n        )\n        text_options = TextNotificationContent(\n            channel_registration_id=self.channel_id,\n            to=[self.phone_number],\n            content=\"Hello World via Notification Messaging SDK.\",\n        )\n\n        # calling send() with whatsapp message details\n        message_responses = messaging_client.send(text_options)\n        response = message_responses.receipts[0]\n        print(\"Message with message id {} was successful sent to {}\".format(response.message_id, response.to))\n\n\nif __name__ == \"__main__\":\n    sample = SendWhatsAppMessageSample()\n    sample.send_text_send_message()\n```\n\n----------------------------------------\n\nTITLE: Creating a Container with Vector Capabilities in Azure Cosmos DB (Python)\nDESCRIPTION: Demonstrates how to create a Cosmos DB container with both vector indexing and vector embedding policies. Both policies must be provided when using vector capabilities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndatabase.create_container(id=container_id, partition_key=PartitionKey(path=\"/id\"),\n                          indexing_policy=indexing_policy, vector_embedding_policy=vector_embedding_policy)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Workloads Client Using DefaultAzureCredential in Python\nDESCRIPTION: This Python snippet shows how to authenticate the Azure Workloads Management Client using the DefaultAzureCredential class from the azure-identity package. It assumes that the required environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and optionally AZURE_SUBSCRIPTION_ID) are already set for Azure Active Directory authentication. The code initializes the WorkloadsClient with valid credentials and retrieves the subscription ID from the environment, preparing the client for workload management operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/workloads/azure-mgmt-workloads/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.workloads import WorkloadsClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WorkloadsClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Running Azure Identity Tests via Pytest - Shell\nDESCRIPTION: Executes the Azure Identity test suite using pytest, targeting the './tests' folder with verbose output and filters for the 'cloudshell' mark. Dependencies: pytest installed within the virtual environment, tests directory present. Outputs test results to the terminal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npytest ./tests -vrs -m cloudshell\n```\n\n----------------------------------------\n\nTITLE: Authenticating RadiologyInsightsClient with DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates initializing the RadiologyInsightsClient using DefaultAzureCredential for authentication. This method automatically handles various authentication flows. Requires the `azure-identity` and `azure-healthinsights-radiologyinsights` packages, and the service endpoint must be provided, typically via an environment variable (AZURE_HEALTH_INSIGHTS_ENDPOINT).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.healthinsights.radiologyinsights import RadiologyInsightsClient\n\ncredential = DefaultAzureCredential()\nENDPOINT = os.environ[\"AZURE_HEALTH_INSIGHTS_ENDPOINT\"]\nradiology_insights_client = RadiologyInsightsClient(endpoint=ENDPOINT, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings using EmbeddingsClient in Python\nDESCRIPTION: Demonstrates how to obtain text embeddings using the `EmbeddingsClient` with Azure Key authentication. It involves initializing the client with an endpoint and credential, calling the `embed` method with a list of input strings, and iterating through the response data to access the embeddings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.ai.inference import EmbeddingsClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = EmbeddingsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.embed(input=[\"first phrase\", \"second phrase\", \"third phrase\"])\n\nfor item in response.data:\n    length = len(item.embedding)\n    print(\n        f\"data[{item.index}]: length={length}, [{item.embedding[0]}, {item.embedding[1]}, \"\n        f\"..., {item.embedding[length-2]}, {item.embedding[length-1]}]\"\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Consuming Events with BlobCheckpointStore in Azure Event Hubs (Python Async)\nDESCRIPTION: This snippet demonstrates how to consume events from Azure Event Hubs using the EventHubConsumerClient with a BlobCheckpointStore for checkpoint persistence. The code creates an asynchronous consumer that processes events and updates checkpoints, enabling reliable event processing and load balancing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoreblobaio import BlobCheckpointStore\nfrom azure.identity.aio import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nblob_account_url = '<< STORAGE ACCOUNT URL >>'\ncontainer_name = '<<NAME OF THE BLOB CONTAINER>>'\n\nasync def on_event(partition_context, event):\n    # do something\n    await partition_context.update_checkpoint(event)  # Or update_checkpoint every N events for better performance.\n\nasync def receive(client):\n    await client.receive(\n        on_event=on_event,\n        starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n    )\n\nasync def main():\n    checkpoint_store = BlobCheckpointStore(\n        blob_account_url=blob_account_url,\n        container_name=container_name,\n        credential=DefaultAzureCredential()\n    )\n    client = EventHubConsumerClient(\n        fully_qualified_namespace=fully_qualified_namespace,\n        eventhub_name=eventhub_name,\n        credential=DefaultAzureCredential(),\n        consumer_group=consumer_group,\n        checkpoint_store=checkpoint_store,  # For load balancing and checkpoint. Leave None for no load balancing\n    )\n    async with client:\n        await receive(client)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Deploying and Deleting an Environment in Azure DevCenter\nDESCRIPTION: This example demonstrates how to deploy and delete an environment in Azure DevCenter. It shows listing projects, catalogs, environment definitions, and environment types, then using them to create and later delete an environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.developer.devcenter import DevCenterClient\nfrom azure.identity import DefaultAzureCredential\n\n# Set the values of the dev center endpoint, client ID, and client secret of the AAD application as environment variables:\n# DEVCENTER_ENDPOINT, AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET\ntry:\n    endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\nexcept KeyError:\n    raise ValueError(\"Missing environment variable 'DEVCENTER_ENDPOINT' - please set it before running the example\")\n\n# Build a client through AAD\nclient = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n\n# List available Projects\nprojects = client.list_projects()\nif projects:\n    print(\"\\nList of projects: \")\n    for project in projects:\n        print(f\"{project.name}\")\n\n    # Select first project in the list\n    target_project_name = list(projects)[0].name\nelse:\n    raise ValueError(\"Missing Project - please create one before running the example\")\n\n# List available Catalogs\ncatalogs = client.list_catalogs(target_project_name)\nif catalogs:\n    print(\"\\nList of catalogs: \")\n    for catalog in catalogs:\n        print(f\"{catalog.name}\")\n\n    # Select first catalog in the list\n    target_catalog_name = list(catalogs)[0].name\nelse:\n    raise ValueError(\"Missing Catalog - please create one before running the example\")\n\n# List available Environment Definitions\nenvironment_definitions = client.list_environment_definitions_by_catalog(target_project_name, target_catalog_name)\nif environment_definitions:\n    print(\"\\nList of environment definitions: \")\n    for environment_definition in environment_definitions:\n        print(f\"{environment_definition.name}\")\n\n    # Select first environment definition in the list\n    target_environment_definition_name = list(environment_definitions)[0].name\nelse:\n    raise ValueError(\"Missing Environment Definition - please create one before running the example\")\n\n# List available Environment Types\nenvironment_types = client.list_environment_types(target_project_name)\nif environment_types:\n    print(\"\\nList of environment types: \")\n    for environment_type in environment_types:\n        print(f\"{environment_type.name}\")\n\n    # Select first environment type in the list\n    target_environment_type_name = list(environment_types)[0].name\nelse:\n    raise ValueError(\"Missing Environment Type - please create one before running the example\")\n\nprint(\n    f\"\\nStarting to create environment in project {target_project_name} with catalog {target_catalog_name}, environment definition {target_environment_definition_name}, and environment type {target_environment_type_name}.\"\n)\n\n# Stand up a new environment\nenvironment_name = \"MyDevEnv\"\nenvironment = {\n    \"environmentType\": target_environment_type_name,\n    \"catalogName\": target_catalog_name,\n    \"environmentDefinitionName\": target_environment_definition_name,\n}\n\nenvironment_poller = client.begin_create_or_update_environment(\n    target_project_name, \"me\", environment_name, environment\n)\nenvironment_result = environment_poller.result()\nprint(f\"Provisioned environment with status {environment_result.provisioning_state}.\")\n\n# Tear down the environment when finished\nprint(f\"Starting to delete environment.\")\ndelete_poller = client.begin_delete_environment(target_project_name, \"me\", environment_name)\ndelete_result = delete_poller.result()\nprint(f\"Completed deletion for the environment with status {delete_result.status}\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Polling Run for Agent Message - Azure SDK for Python\nDESCRIPTION: Shows how to initiate a run for agent message processing and poll for completion. Inputs are thread and agent IDs; the output is a `run` object. Intended for asynchronous execution, requiring further polling or status handling to fully process the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nrun = project_client.agents.create_run(thread_id=thread.id, agent_id=agent.id)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Function Tool via ToolSet - Azure SDK for Python\nDESCRIPTION: This snippet details how to define Python callback/user functions as FunctionTool, group them in a ToolSet, and enable automatic function calls for agent runs in the Azure SDK. It subsequently creates an agent using these function-based tools. Dependencies include FunctionTool, ToolSet, pre-defined user functions, and a proper project_client. Inputs center around toolset configuration; outputs are functionally enabled agent instances. Limitations include synchronous Python execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfunctions = FunctionTool(user_functions)\ntoolset = ToolSet()\ntoolset.add(functions)\nproject_client.agents.enable_auto_function_calls(toolset=toolset)\n\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are a helpful assistant\",\n    toolset=toolset,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up and Creating an Agent with File Search Capabilities in Python\nDESCRIPTION: Shows the complete process of enabling file search for an Agent. It uploads a local file (`product_info_1.md`), creates a vector store associated with the uploaded file, initializes a `FileSearchTool` using the vector store ID, and finally creates the Agent, providing the tool's definitions and resources. Requires `FileSearchTool`, `os` package, and `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfile = project_client.agents.upload_file_and_poll(file_path=\"product_info_1.md\", purpose=\"assistants\")\nprint(f\"Uploaded file, file ID: {file.id}\")\n\nvector_store = project_client.agents.create_vector_store_and_poll(file_ids=[file.id], name=\"my_vectorstore\")\nprint(f\"Created vector store, vector store ID: {vector_store.id}\")\n\n# Create file search tool with resources followed by creating agent\nfile_search = FileSearchTool(vector_store_ids=[vector_store.id])\n\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"Hello, you are helpful assistant and can search information from uploaded files\",\n    tools=file_search.definitions,\n    tool_resources=file_search.resources,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Conversational Language Understanding Client Library using Pip - Bash\nDESCRIPTION: Demonstrates how to install the Azure Conversational Language Understanding client library for Python using pip. The command must be run in a terminal with Python 3.7 or later available. After installation, the package enables access to the Azure CLU APIs within your Python projects. There are no input parameters required and the command must be run in a shell or command line environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-language-conversations\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Document Intelligence Model in Python\nDESCRIPTION: Creates a custom Document Intelligence model using a template build mode with documents from an Azure Blob storage container. It initializes the client, builds the model, and prints details about the created model including its ID, description, and field information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom azure.ai.documentintelligence import DocumentIntelligenceAdministrationClient\nfrom azure.ai.documentintelligence.models import (\n    DocumentBuildMode,\n    BuildDocumentModelRequest,\n    AzureBlobContentSource,\n    DocumentModelDetails,\n)\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\ncontainer_sas_url = os.environ[\"DOCUMENTINTELLIGENCE_STORAGE_CONTAINER_SAS_URL\"]\n\ndocument_intelligence_admin_client = DocumentIntelligenceAdministrationClient(endpoint, AzureKeyCredential(key))\npoller = document_intelligence_admin_client.begin_build_document_model(\n    BuildDocumentModelRequest(\n        model_id=str(uuid.uuid4()),\n        build_mode=DocumentBuildMode.TEMPLATE,\n        azure_blob_source=AzureBlobContentSource(container_url=container_sas_url),\n        description=\"my model description\",\n    )\n)\nmodel: DocumentModelDetails = poller.result()\n\nprint(f\"Model ID: {model.model_id}\")\nprint(f\"Description: {model.description}\")\nprint(f\"Model created on: {model.created_date_time}\")\nprint(f\"Model expires on: {model.expiration_date_time}\")\nif model.doc_types:\n    print(\"Doc types the model can recognize:\")\n    for name, doc_type in model.doc_types.items():\n        print(f\"Doc Type: '{name}' built with '{doc_type.build_mode}' mode which has the following fields:\")\n        if doc_type.field_schema:\n            for field_name, field in doc_type.field_schema.items():\n                if doc_type.field_confidence:\n                    print(\n                        f\"Field: '{field_name}' has type '{field['type']}' and confidence score \"\n                        f\"{doc_type.field_confidence[field_name]}\"\n                    )\n\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Attachments in Azure Communication Email SDK\nDESCRIPTION: Demonstrates how to send an email with a file attachment. The example reads a file, converts it to base64, and adds it as an attachment to the email.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport base64\n\nwith open(\"C://readme.txt\", \"r\") as file:\n    file_contents = file.read()\n\nfile_bytes_b64 = base64.b64encode(bytes(file_contents, 'utf-8'))\n\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"html><h1>This is the body</h1></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\n                \"address\": \"customer@domain.com\",\n                \"displayName\": \"Customer Name\"\n            }\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\",\n    \"attachments\": [\n        {\n            \"name\": \"attachment.txt\",\n            \"contentType\": \"text/plain\",\n            \"contentInBase64\": file_bytes_b64.decode()\n        }\n    ]\n}\n\npoller = client.begin_send(message)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Creating Text Analytics Client with Azure AD Authentication\nDESCRIPTION: Demonstrates how to create a TextAnalyticsClient using Azure Active Directory authentication through DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.textanalytics import TextAnalyticsClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ntext_analytics_client = TextAnalyticsClient(endpoint, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Batch of Events Synchronously to Event Hubs in Python\nDESCRIPTION: This function demonstrates sending a batch of events synchronously using `EventHubProducerClient`. It creates an `EventDataBatch`, adds a single `EventData` message to it, and then sends the batch using `producer.send_batch`. If no partition key or ID is specified, events are distributed round-robin across available partitions. Dependencies include `azure.eventhub.EventData` and an initialized `EventHubProducerClient` passed as the `producer` argument.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef send_event_data_batch(producer):\n    # Without specifying partition_id or partition_key\n    # the events will be distributed to available partitions via round-robin.\n    event_data_batch = producer.create_batch()\n    event_data_batch.add(EventData(\"Single message\"))\n    producer.send_batch(event_data_batch)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Document from Index using SearchClient in Python\nDESCRIPTION: Shows how to use get_document to retrieve a document from an Azure AI Search index when the key is already known. Instantiates the SearchClient and calls get_document with 'key=\"23\"', printing select details from the result. Requires pre-existing client configuration and the queried document to exist in the index. Input is the document's key; output is a dictionary of document attributes, displayed in formatted text.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.search.documents import SearchClient\\n\\nsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\\n\\nresult = search_client.get_document(key=\\\"23\\\")\\n\\nprint(\\\"Details for hotel '23' are:\\\")\\nprint(\\\"        Name: {}\\\".format(result[\\\"hotelName\\\"]))\n```\n\n----------------------------------------\n\nTITLE: Getting Hourly Weather Forecast with Azure Maps Weather API in Python\nDESCRIPTION: This code retrieves a detailed hourly weather forecast using the Azure Maps Weather API. It can provide forecasts for up to 24 hours or a daily forecast for up to 10 days depending on the configuration. The result is output as formatted JSON.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_hourly_forecast():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_hourly_forecast(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_hourly_forecast()\n```\n\n----------------------------------------\n\nTITLE: Utilizing Integrated Cache for Reads and Queries with Azure Cosmos DB SDK for Python\nDESCRIPTION: This snippet demonstrates how to utilize the Azure Cosmos DB integrated cache for both point reads and queries using the synchronous Python SDK. It initializes the `CosmosClient`, gets database and container clients, and then calls `read_item` and `query_items` with the `max_integrated_cache_staleness_in_ms` parameter set. Setting this parameter enables the use of the integrated cache for the respective operation, potentially reducing RU consumption and latency if the data is found in the cache within the specified staleness period. Requires `azure.cosmos.cosmos_client` and `os`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport azure.cosmos.cosmos_client as cosmos_client\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = cosmos_client.CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'testContainer'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\ndef integrated_cache_snippet():\n    item_id = body['id'] \n    query = 'SELECT * FROM c'\n\n    #item cache\n    container.read_item(item=item_id, partition_key=item_id, max_integrated_cache_staleness_in_ms=30000)\n\n    #query cache   \n    container.query_items(query=query,\n         partition_key=item_id, max_integrated_cache_staleness_in_ms=30000)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vector Indexes in Azure Cosmos DB Indexing Policy (Python)\nDESCRIPTION: Demonstrates how to configure an indexing policy that includes vector indexes alongside standard indexes. The example shows the three vector index types: flat, quantizedFlat, and diskANN.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nindexing_policy = {\n        \"automatic\": True,\n        \"indexingMode\": \"consistent\",\n        \"compositeIndexes\": [\n            [\n                {\"path\": \"/numberField\", \"order\": \"ascending\"},\n                {\"path\": \"/stringField\", \"order\": \"descending\"}\n            ]\n        ],\n        \"spatialIndexes\": [\n            {\"path\": \"/location/*\", \"types\": [\n                \"Point\",\n                \"Polygon\"]}\n        ],\n        \"vectorIndexes\": [\n            {\"path\": \"/vector1\", \"type\": \"flat\"},\n            {\"path\": \"/vector2\", \"type\": \"quantizedFlat\"},\n            {\"path\": \"/vector3\", \"type\": \"diskANN\"}\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Text Content for Harmful Content\nDESCRIPTION: Complete example of analyzing text content for different harm categories including hate, self-harm, sexual, and violence using the Content Safety API\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.contentsafety import ContentSafetyClient\nfrom azure.ai.contentsafety.models import TextCategory\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.ai.contentsafety.models import AnalyzeTextOptions\n\nkey = os.environ[\"CONTENT_SAFETY_KEY\"]\nendpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n# Create a Content Safety client\nclient = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n# Construct a request\nrequest = AnalyzeTextOptions(text=\"You are an idiot\")\n\n# Analyze text\ntry:\n    response = client.analyze_text(request)\nexcept HttpResponseError as e:\n    print(\"Analyze text failed.\")\n    if e.error:\n        print(f\"Error code: {e.error.code}\")\n        print(f\"Error message: {e.error.message}\")\n        raise\n    print(e)\n    raise\n\nhate_result = next(item for item in response.categories_analysis if item.category == TextCategory.HATE)\nself_harm_result = next(item for item in response.categories_analysis if item.category == TextCategory.SELF_HARM)\nsexual_result = next(item for item in response.categories_analysis if item.category == TextCategory.SEXUAL)\nviolence_result = next(item for item in response.categories_analysis if item.category == TextCategory.VIOLENCE)\n\nif hate_result:\n    print(f\"Hate severity: {hate_result.severity}\")\nif self_harm_result:\n    print(f\"SelfHarm severity: {self_harm_result.severity}\")\nif sexual_result:\n    print(f\"Sexual severity: {sexual_result.severity}\")\nif violence_result:\n    print(f\"Violence severity: {violence_result.severity}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Variables with EnvironmentVariableLoader in Python\nDESCRIPTION: This code snippet demonstrates configuring a test suite to automatically load and sanitize environment variables using devtools_testutils.EnvironmentVariableLoader for Azure SDK for Python. It uses functools.partial to predefine environment variable mappings and applies the resulting callable as a decorator to test methods, ensuring both live and playback test modes receive appropriate inputs. Dependencies include devtools_testutils and correct setup of service-specific environment variables; keyword arguments like service_endpoint and service_account_name specify the fake (sanitized) values to use in playback. Test methods receive environment variable values as keyword arguments, which should be handled carefully to avoid discrepancies between live and playback modes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/devtools_testutils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nfrom devtools_testutils import AzureRecordedTestCase, EnvironmentVariableLoader, recorded_by_proxy\n\nServicePreparer = functools.partial(\n    EnvironmentVariableLoader,\n    \"service\",\n    service_endpoint=\"fake-endpoint\",\n    service_account_name=\"fake-account-name\",\n)\n\nclass TestExample(AzureRecordedTestCase):\n\n    @ServicePreparer()\n    @recorded_by_proxy\n    def test_example_with_preparer(self, **kwargs):\n        service_endpoint = kwargs.pop(\"service_endpoint\")\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Hybrid Network Client - Python\nDESCRIPTION: This snippet shows how to authenticate and create an instance of the HybridNetworkManagementClient using environment-based credentials in Python. Dependencies include 'azure-identity' and 'azure-mgmt-hybridnetwork'. The code expects environment variables ('AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and 'AZURE_SUBSCRIPTION_ID') to be set with valid Azure credentials. The output is an authenticated client object ready for managing hybrid network resources; the code will raise errors if any required environment variables are missing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridnetwork/azure-mgmt-hybridnetwork/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridnetwork import HybridNetworkManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HybridNetworkManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Receiving Batches of Events from Azure Event Hubs in SDK v5\nDESCRIPTION: Example of how to receive batches of events from Azure Event Hubs using the v5 SDK with EventHubConsumerClient and a callback function that processes multiple events at once.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Receive batch\ndef on_event_batch(partition_context, event_batch):\n    print(\"Partition {}, Received count: {}\".format(partition_context.partition_id, len(event_batch)))\n\nconsumer_client = EventHubConsumerClient.from_connection_string(conn_str, consumer_group, eventhub_name=eh_name)\nwith consumer_client:\n    consumer_client.receive_batch(on_event_batch=on_event_batch, partition_id=partition_id)\n```\n\n----------------------------------------\n\nTITLE: Publishing Telemetry Message to Digital Twin via Azure SDK - Python\nDESCRIPTION: Publishes a telemetry payload for a given digital twin using publish_telemetry. Requires service_client, digital twin id, and a payload as a JSON-formatted string. No response is returned from this call. Ensure digital twin exists and payload is valid JSON.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_telemetry(\n    digita_twin_id,\n    telemetry_payload\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ChangeFeedClient Instance - Python\nDESCRIPTION: This snippet demonstrates how to import ChangeFeedClient from azure.storage.blob.changefeed and instantiate it using an account URL and credentials. The account_url parameter should be your Azure Storage account endpoint, and credential can be a SAS token, shared access key, or token credential. Returns a ChangeFeedClient object for accessing the Blob ChangeFeed. Requires azure-storage-blob-changefeed package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\nservice = ChangeFeedClient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Generating Chat Completions with ChatCompletionsClient - Python\nDESCRIPTION: This snippet demonstrates creating a ChatCompletionsClient, composing a sequence of system and user messages, and obtaining a chat completion using a REST call to the /chat/completions endpoint. The client is authenticated via AzureKeyCredential using a provided endpoint and key. The complete method takes a list of Message objects and returns a response containing completion results and token usage. Inputs include the message history; the output is typically the generated response text and usage metrics.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.ai.inference.models import SystemMessage, UserMessage\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.complete(\n    messages=[\n        SystemMessage(\"You are a helpful assistant.\"),\n        UserMessage(\"How many feet are in a mile?\"),\n    ],\n)\n\nprint(response.choices[0].message.content)\nprint(f\"\\nToken usage: {response.usage}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Pipeline Class in Python\nDESCRIPTION: Implementation of a Pipeline class that manages HTTP request processing through a chain of policies. The class is implemented as a context manager and handles both standard HTTP policies and SansIO policies, ultimately connecting to an HTTP transport layer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Pipeline:\n    \"\"\"A pipeline implementation.\n\n    This is implemented as a context manager, that will activate the context\n    of the HTTP sender.\n    \"\"\"\n\n    def __init__(self, transport, policies=None):\n        # type: (HttpTransport, List[Union[HTTPPolicy, SansIOHTTPPolicy]]) -> None\n        self._impl_policies = []  # type: List[HTTPPolicy]\n        self._transport = transport  # type: HTTPPolicy\n\n        for policy in (policies or []):\n            if isinstance(policy, SansIOHTTPPolicy):\n                self._impl_policies.append(_SansIOHTTPPolicyRunner(policy))\n            elif policy:\n                self._impl_policies.append(policy)\n        for index in range(len(self._impl_policies)-1):\n            self._impl_policies[index].next = self._impl_policies[index+1]\n        if self._impl_policies:\n            self._impl_policies[-1].next = _TransportRunner(self._transport)\n\n    def run(self, request, **kwargs):\n        # type: (HTTPRequestType, Any) -> PipelineResponse\n        context = PipelineContext(self._transport, **kwargs)\n        pipeline_request = PipelineRequest(request, context)  # type: PipelineRequest[HTTPRequestType]\n        first_node = self._impl_policies[0] if self._impl_policies else _TransportRunner(self._transport)\n        return first_node.send(pipeline_request)  # type: ignore\n```\n\n----------------------------------------\n\nTITLE: Authenticating BlobServiceClient with DefaultAzureCredential - Azure SDK - Python\nDESCRIPTION: Demonstrates authenticating the Azure Storage BlobServiceClient using DefaultAzureCredential from the Azure Identity library. Dependencies include azure-identity and azure-storage-blob Python packages. The 'account_url' variable must contain the URL to the Azure Blob Storage account. The client is initialized with DefaultAzureCredential for managed authentication flow, returning a BlobServiceClient object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.storage.blob import BlobServiceClient\n\ndefault_credential = DefaultAzureCredential()\n\nclient = BlobServiceClient(account_url, credential=default_credential)\n```\n\n----------------------------------------\n\nTITLE: Type Annotations Example in Python\nDESCRIPTION: Demonstrates how to use type annotations in a function signature with various parameter types including union types and default values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Union\n\ndef download_blob_from_url(\n        blob_url: str,\n        output: str,\n        credential: Union[AzureNamedKeyCredential, TokenCredential],\n        overwrite: bool = False,\n        **kwargs: Any\n) -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing BlobServiceClient with Customized URL and Credential Dict - Python\nDESCRIPTION: Demonstrates creating a BlobServiceClient for customized Azure blob endpoint URLs using a credentials dictionary containing account name and account key. Used when the service endpoint differs from the standard Azure URL format. Requires azure-storage-blob installed and both 'account_name' and 'account_key' values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\nservice = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", \n   credential={\"account_name\": \"<your_account_name>\", \"account_key\":\"<account_access_key>\"})\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Storage Account Using Azure SDK for Python\nDESCRIPTION: This snippet demonstrates creating a new Azure storage account using the Azure SDK for Python's management libraries. It sets up necessary credentials, instantiates the management client, checks for name availability, and proceeds to create the storage account if it does not already exist. Dependencies include azure-common and azure-mgmt-storage; parameters required are client credentials, subscription ID, resource group, and a unique storage account name. The output is a new or existing storage account in the specified Azure resource group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Management operations use a different set of credentials than data-plane operations.  This will be unified in the near-future.\\nfrom azure.common.credentials import ServicePrincipalCredentials\\nmanagement_credential = ServicePrincipalCredentials(client_id, client_secret, tenant=tenant_id)\\n\\nfrom azure.mgmt.storage import StorageManagementClient\\nfrom azure.mgmt.storage.models import StorageAccountCreateParameters, Sku, SkuName, Kind, Reason\\nmanagement_client = StorageManagementClient(management_credential, subscription_id)\\n# In case a user is picking up from where we left off, let's leverage that storage account.\\nstorage_account_name = input_storage_account_name or output_storage_account_name\\navailability = management_client.storage_accounts.check_name_availability(storage_account_name)\\nif availability.name_available: \\n    management_client.storage_accounts.create(\\n        output_resource_group, \\n        storage_account_name, \\n        StorageAccountCreateParameters(\\n            sku=Sku(name=SkuName.standard_lrs),\\n            kind=Kind.storage,\\n            location='westus2'\\n        ))\\nelse:\\n    print(\"Warning: Storage account already exists\")\n```\n\n----------------------------------------\n\nTITLE: Completing an Assigned Job (Python)\nDESCRIPTION: Marks a job as completed using the `router_client.complete_job` method. This requires the `job_id` and the `assignment_id` (obtained when the offer was accepted). An optional note can be provided using `CompleteJobOptions`. Requires an initialized `JobRouterClient` and the `AcceptJobOfferResult` object from the acceptance step.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom azure.communication.jobrouter.models import (\n    CompleteJobOptions\n)\ncomplete_job_result = router_client.complete_job(\n    \"jobId-1\",\n    accept_job_offer_result.assignment_id,\n    CompleteJobOptions(\n        note = f\"Job has been completed by {router_worker.id} at {datetime.datetime.utcnow()}\"\n    )\n)\n\nprint(f\"Job has been successfully completed.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Key from Azure Key Vault\nDESCRIPTION: This snippet demonstrates how to retrieve a key from Azure Key Vault using its name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkey = key_client.get_key(\"key-name\")\nprint(key.name)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Digital Twin in Python\nDESCRIPTION: Demonstrates how to create a digital twin using the DigitalTwinsClient.upsert_digital_twin() method. It creates a twin with a unique ID and properties based on a previously created model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndigital_twin_id = 'digitalTwin-' + str(uuid.uuid4())\ntemporary_twin = {\n    \"$metadata\": {\n        \"$model\": model_id\n    },\n    \"$dtId\": digital_twin_id,\n    \"Prop1\": 42\n}\n\ncreated_twin = service_client.upsert_digital_twin(digital_twin_id, temporary_twin)\nprint('Created Digital Twin:')\nprint(created_twin)\n```\n\n----------------------------------------\n\nTITLE: Custom Agent Event Handler Implementation in Python\nDESCRIPTION: Creates a custom event handler by extending AgentEventHandler to process different event types from an agent stream, returning formatted strings for each event.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n# With AgentEventHandler[str], the return type for each event functions is optional string.\nclass MyEventHandler(AgentEventHandler[str]):\n\n    def on_message_delta(self, delta: \"MessageDeltaChunk\") -> Optional[str]:\n        return f\"Text delta received: {delta.text}\"\n\n    def on_thread_message(self, message: \"ThreadMessage\") -> Optional[str]:\n        return f\"ThreadMessage created. ID: {message.id}, Status: {message.status}\"\n\n    def on_thread_run(self, run: \"ThreadRun\") -> Optional[str]:\n        return f\"ThreadRun status: {run.status}\"\n\n    def on_run_step(self, step: \"RunStep\") -> Optional[str]:\n        return f\"RunStep type: {step.type}, Status: {step.status}\"\n\n    def on_error(self, data: str) -> Optional[str]:\n        return f\"An error occurred. Data: {data}\"\n\n    def on_done(self) -> Optional[str]:\n        return \"Stream completed.\"\n\n    def on_unhandled_event(self, event_type: str, event_data: Any) -> Optional[str]:\n        return f\"Unhandled Event Type: {event_type}, Data: {event_data}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Single Resource Metrics Query Response in Python\nDESCRIPTION: This snippet demonstrates how to query Azure Monitor metrics for a single resource using `MetricsQueryClient`. It initializes the client with default credentials, queries a specific metric ('MatchedEventCount') with count aggregation, and then iterates through the `MetricsQueryResult` response to print the count and timestamp for each non-zero metric value. Requires the `azure-monitor-query` and `azure-identity` libraries, and the resource URI to be set in the 'METRICS_RESOURCE_URI' environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.monitor.query import MetricsQueryClient, MetricAggregationType\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = MetricsQueryClient(credential)\n\nmetrics_uri = os.environ['METRICS_RESOURCE_URI']\nresponse = client.query_resource(\n    metrics_uri,\n    metric_names=[\"MatchedEventCount\"],\n    aggregations=[MetricAggregationType.COUNT]\n    )\n\nfor metric in response.metrics:\n    print(metric.name)\n    for time_series_element in metric.timeseries:\n        for metric_value in time_series_element.data:\n            if metric_value.count != 0:\n                print(\n                    \"There are {} matched events at {}\".format(\n                        metric_value.count,\n                        metric_value.time_stamp\n                    )\n                )\n```\n\n----------------------------------------\n\nTITLE: Initializing EventHubConsumerClient with a Connection String - Azure EventHubs - Python\nDESCRIPTION: This snippet demonstrates how to initialize an asynchronous EventHubConsumerClient instance in Python using the Azure SDK for Python. It requires the azure-eventhub package and a valid Event Hubs namespace connection string, the consumer group, and the event hub name. The main input parameters are the connection string, consumer group, and event hub name; the output is an initialized EventHubConsumerClient object, which can be used for event consumption.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.eventhub.aio import EventHubConsumerClient\\neventhub_client = EventHubConsumerClient.from_connection_string(\\\"my_eventhub_namespace_connection_string\\\", \\\"my_consumer_group\\\", eventhub_name=\\\"my_eventhub\\\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Document Layout with Azure Document Intelligence SDK in Python\nDESCRIPTION: This Python snippet demonstrates how to use the Azure Document Intelligence SDK's `DocumentAnalysisClient` to extract layout details like text, styles, tables, and selection marks from a document. It initializes the client with credentials from environment variables, opens a document file, calls `begin_analyze_document` with the `prebuilt-layout` model, waits for the asynchronous operation to complete, and then iterates through the result object to print the extracted layout information, including coordinates and confidence scores. Requires the `azure-ai-formrecognizer` library and Azure credentials (endpoint and key) set as environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-layout\", document=f\n    )\nresult = poller.result()\n\nfor idx, style in enumerate(result.styles):\n    print(\n        \"Document contains {} content\".format(\n            \"handwritten\" if style.is_handwritten else \"no handwritten\"\n        )\n    )\n\nfor page in result.pages:\n    print(\"----Analyzing layout from page #{}----\".format(page.page_number))\n    print(\n        \"Page has width: {} and height: {}, measured with unit: {}\".format(\n            page.width, page.height, page.unit\n        )\n    )\n\n    for line_idx, line in enumerate(page.lines):\n        words = line.get_words()\n        print(\n            \"...Line # {} has word count {} and text '{}' within bounding polygon '{}'\".format(\n                line_idx,\n                len(words),\n                line.content,\n                line.polygon,\n            )\n        )\n\n        for word in words:\n            print(\n                \"......Word '{}' has a confidence of {}\".format(\n                    word.content, word.confidence\n                )\n            )\n\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' within bounding polygon '{}' and has a confidence of {}\".format(\n                selection_mark.state,\n                selection_mark.polygon,\n                selection_mark.confidence,\n            )\n        )\n\nfor table_idx, table in enumerate(result.tables):\n    print(\n        \"Table # {} has {} rows and {} columns\".format(\n            table_idx, table.row_count, table.column_count\n        )\n    )\n    for region in table.bounding_regions:\n        print(\n            \"Table # {} location on page: {} is {}\".format(\n                table_idx,\n                region.page_number,\n                region.polygon,\n            )\n        )\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.content,\n            )\n        )\n        for region in cell.bounding_regions:\n            print(\n                \"...content on page {} is within bounding polygon '{}'\".format(\n                    region.page_number,\n                    region.polygon,\n                )\n            )\n\nprint(\"----------------------------------------\")\n```\n```\n\n----------------------------------------\n\nTITLE: Consuming Events Individually Asynchronously from Event Hubs in Python\nDESCRIPTION: This snippet shows how to consume events individually asynchronously using `azure.eventhub.aio.EventHubConsumerClient`. It initializes the async client and uses the `receive` method with an async `on_event` callback. The callback processes each event asynchronously, logs information, and asynchronously updates the checkpoint using `await partition_context.update_checkpoint(event)`. It starts reading from the beginning (`starting_position=\"-1\"`). Dependencies: `logging`, `asyncio`, `azure.eventhub.aio.EventHubConsumerClient`, `azure.identity.aio.DefaultAzureCredential`. Placeholder values for connection details must be replaced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport logging\nimport asyncio\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.identity.aio import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\nasync def on_event(partition_context, event):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    await partition_context.update_checkpoint(event)\n\nasync def receive():\n    client = EventHubConsumerClient(\n        fully_qualified_namespace=fully_qualified_namespace,\n        eventhub_name=eventhub_name,\n        consumer_group=consumer_group,\n        credential=DefaultAzureCredential(),\n    )\n    async with client:\n        await client.receive(\n            on_event=on_event,\n            starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n        )\n        # receive events from specified partition:\n        # await client.receive(on_event=on_event, partition_id='0')\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(receive())\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading File and Thread Resource Attachment for File Search - Azure SDK for Python\nDESCRIPTION: Illustrates advanced resource handling by uploading a file, creating a vector store, instantiating a file search tool, and creating both an agent and thread with the proper associations for file search. Requires initialized Azure SDK objects, a file at the specified path, and proper environment configuration. Demonstrates tight association between uploaded resources, vector stores, and agent-thread lifecycles.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfile = project_client.agents.upload_file_and_poll(file_path=\"product_info_1.md\", purpose=\"assistants\")\nprint(f\"Uploaded file, file ID: {file.id}\")\n\nvector_store = project_client.agents.create_vector_store_and_poll(file_ids=[file.id], name=\"my_vectorstore\")\nprint(f\"Created vector store, vector store ID: {vector_store.id}\")\n\n# Create file search tool with resources followed by creating agent\nfile_search = FileSearchTool(vector_store_ids=[vector_store.id])\n\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"Hello, you are helpful assistant and can search information from uploaded files\",\n    tools=file_search.definitions,\n)\n\nprint(f\"Created agent, ID: {agent.id}\")\n\n# Create thread with file resources.\n# If the agent has multiple threads, only this thread can search this file.\nthread = project_client.agents.create_thread(tool_resources=file_search.resources)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Azure Key Vault Certificate Client\nDESCRIPTION: Shows how to handle exceptions when working with Azure Key Vault certificates, specifically demonstrating ResourceNotFoundError handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    certificate_client.get_certificate(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Azure AI Search - Azure SDK for Python\nDESCRIPTION: This code sample outlines how to set up an Azure AI Search tool integration for an agent. It retrieves a connection for Azure AI Search, specifies the target search index and query parameters, and encapsulates these as a tool. The agent is then created with these resources, making it capable of answering queries via Azure AI Search. Required dependencies are AzureAISearchTool, AzureAISearchQueryType, a search index, and valid environment configuration. The agent's capabilities depend on a well-structured search index with 'title' and 'url' fields.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nconnection = project_client.connections.get(connection_name=os.environ[\"AI_SEARCH_CONNECTION_NAME\"])\nconn_id = connection.id\n\nprint(conn_id)\n\n# Initialize agent AI search tool and add the search index connection id\nai_search = AzureAISearchTool(\n    index_connection_id=conn_id, index_name=\"sample_index\", query_type=AzureAISearchQueryType.SIMPLE, top_k=3, filter=\"\"\n)\n\n# Create agent with AI search tool and process assistant run\nwith project_client:\n    agent = project_client.agents.create_agent(\n        model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n        name=\"my-assistant\",\n        instructions=\"You are a helpful assistant\",\n        tools=ai_search.definitions,\n        tool_resources=ai_search.resources,\n    )\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Cognitive Services Management Client\nDESCRIPTION: Python code demonstrating how to instantiate the Cognitive Services Management Client using DefaultAzureCredential for authentication. It retrieves the subscription ID from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-mgmt-cognitiveservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.cognitiveservices import CognitiveServicesManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CognitiveServicesManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure Springappdiscovery Management Client in Python\nDESCRIPTION: This snippet demonstrates how to authenticate using Azure Active Directory and initialize the Springappdiscovery Management Client in Python. It depends on environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, AZURE_SUBSCRIPTION_ID) being set in the operating environment, and imports the necessary modules from the Azure SDK. Expected input is a correct set of environment variables, and the output is an authenticated client instance ready for management operations. This code must be executed in an environment with Python 3.8+ and the installed dependencies (azure-mgmt-springappdiscovery, azure-identity).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/springappdiscovery/azure-mgmt-springappdiscovery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.springappdiscovery import SpringAppDiscoveryMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SpringAppDiscoveryMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Complete Agent Conversations Run by Run in Python\nDESCRIPTION: Provides reusable functions to evaluate entire conversations, including evaluating individual runs within a conversation. It implements a process to extract data, evaluate each run using an intent resolution evaluator, and return aggregated results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/intent_resolution.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef evaluate_conversation_run(conversation : dict, run_id : str, verbose=False):\n    converted_conv = AIAgentConverter.convert_from_conversation(conversation, str(run_id))\n    # Extract the query and response from the conversation\n    query = converted_conv['query']\n    response = converted_conv['response']\n    tool_definitions = converted_conv['tool_definitions']\n    \n    if verbose:\n        print(f\"*********************************************\")\n        print(f\"Evaluating conversation run with ID: {run_id}\")\n        print(f\"Run ID: {run_id}\")\n        print(f\"Query: {query}\")\n        print(f\"Response: {response}\")\n        print(f\"Tool Definitions: {tool_definitions}\")\n\n    # Evaluate the query and response using the intent resolution evaluator\n    evaluation_result = intent_resolution_evaluator(query = query, response = response, tool_definitions = tool_definitions)\n    if verbose:\n        print(f\"Evaluation Result:\")\n        pprint(evaluation_result)\n\n    return evaluation_result\n\ndef evaluate_conversation(conversation, verbose=False):\n    run_ids = AIAgentConverter.run_ids_from_conversation(conversation)\n    print(f\"Runs available in conversation: {run_ids}\")\n    results = []\n    for run_id in run_ids:\n        result = evaluate_conversation_run(conversation, str(run_id), verbose)\n        results.append(result)\n    return results\n\nsample_conversation = sample_conversations[20]\nevaluate_conversation(sample_conversation, verbose=True)\n```\n\n----------------------------------------\n\nTITLE: Querying Digital Twins in Azure using Python\nDESCRIPTION: This snippet demonstrates how to query digital twins using SQL-like syntax. It includes examples of selecting all twins, filtering twins based on a condition, and counting the total number of twins.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/01_Patrons.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = 'SELECT * FROM digitaltwins'\nquery_result = service_client.query_twins(query_expression)\n\nquery_result = service_client.query_twins(\n\"\"\"\nSELECT  *\nFROM DigitalTwins T  \nWHERE T.satisfaction > 7\n\"\"\"\n)\n\nfor i in query_result:\n    print (i['$dtId'],i['satisfaction'])\n\nquery_result = service_client.query_twins(\n\"\"\"\nSELECT  COUNT() \nFROM DigitalTwins \n\"\"\"\n)\n\nfor i in query_result:\n    print(i)\n```\n\n----------------------------------------\n\nTITLE: Automatic Message Lock Renewal in Azure Service Bus\nDESCRIPTION: Shows how to use AutoLockRenewer to automatically maintain message locks for long-running operations. Includes message lock renewal for up to 60 seconds while processing messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import ServiceBusClient, AutoLockRenewer\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\n# Can also be called via \"with AutoLockRenewer() as renewer\" to automate closing.\nrenewer = AutoLockRenewer()\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver.receive_messages():\n            renewer.register(receiver, msg, max_lock_renewal_duration=60)\n            # Do your application logic here\n            receiver.complete_message(msg)\nrenewer.close()\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Transactional Batch Operations in Azure Cosmos DB (Python)\nDESCRIPTION: Demonstrates how to create a batch of operations (create, replace, read, upsert, patch, delete) and execute them as a single transaction. The batch will either commit all operations or roll back entirely if any operation fails.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nbatch_operations = [\n        (\"create\", (item_body,), kwargs),\n        (\"replace\", (item_id, item_body), kwargs),\n        (\"read\", (item_id,), kwargs),\n        (\"upsert\", (item_body,), kwargs),\n        (\"patch\", (item_id, operations), kwargs),\n        (\"delete\", (item_id,), kwargs),\n    ]\nbatch_results = container.execute_item_batch(batch_operations=batch_operations, partition_key=partition_key)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Digital Twins using Python SDK\nDESCRIPTION: This snippet shows how to connect to Azure Digital Twins using the DigitalTwinsClient from the azure-digitaltwins-core package. It uses AzureCliCredential for authentication and requires the digital twin URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/01_Patrons.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureCliCredential\nfrom azure.digitaltwins.core import DigitalTwinsClient\n\n# using yaml instead of \nimport yaml\nimport uuid\n\n# using altair instead of matplotlib for vizuals\nimport numpy as np\nimport pandas as pd\n\n# you will get this from the ADT resource at portal.azure.com\nyour_digital_twin_url = \"home-test-twin.api.wcus.digitaltwins.azure.net\"\n\nazure_cli = AzureCliCredential()\nservice_client = DigitalTwinsClient(\n    your_digital_twin_url, azure_cli)\nservice_client\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Fabric Tool - Azure SDK for Python\nDESCRIPTION: Demonstrates how to create an agent in the Azure SDK for Python using the Fabric tool. Requires the project client, proper environment variables, and the Fabric tool definitions. Inputs include model deployment name, agent name, instructions, Fabric tool definitions, and preview headers. The output is a new agent instance within the project client context. Limitations: Assumes required environment variables and initialized `project_client` and `fabric`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nwith project_client:\n    agent = project_client.agents.create_agent(\n        model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n        name=\"my-agent\",\n        instructions=\"You are a helpful agent\",\n        tools=fabric.definitions,\n        headers={\"x-ms-enable-preview\": \"true\"},\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing BlobServiceClient With Account URL and Credential - Python\nDESCRIPTION: Shows basic initialization of a BlobServiceClient instance by specifying the storage account URL and a credential. The blob service client is the entry point for interacting with an Azure storage account's blob containers and blobs. Prerequisite: azure-storage-blob installed; you must supply the correct account_url and valid credential suited to your authentication method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\n\nservice = BlobServiceClient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Consuming Events in Batches Asynchronously from Event Hubs in Python\nDESCRIPTION: This snippet demonstrates consuming events in batches asynchronously using `azure.eventhub.aio.EventHubConsumerClient`. It initializes the async client and uses the `receive_batch` method with an async `on_event_batch` callback. The callback processes a list of events asynchronously, logs information, and asynchronously updates the checkpoint using `await partition_context.update_checkpoint()`. It starts reading from the beginning (`starting_position=\"-1\"`). Dependencies: `logging`, `asyncio`, `azure.eventhub.aio.EventHubConsumerClient`, `azure.identity.aio.DefaultAzureCredential`. Placeholder values for connection details must be replaced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport logging\nimport asyncio\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.identity.aio import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\nasync def on_event_batch(partition_context, events):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    await partition_context.update_checkpoint()\n\nasync def receive_batch():\n    client = EventHubConsumerClient(\n        fully_qualified_namespace=fully_qualified_namespace,\n        eventhub_name=eventhub_name,\n        consumer_group=consumer_group,\n        credential=DefaultAzureCredential(),\n    )\n    async with client:\n        await client.receive_batch(\n            on_event_batch=on_event_batch,\n            starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n        )\n        # receive events from specified partition:\n        # await client.receive_batch(on_event_batch=on_event_batch, partition_id='0')\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(receive_batch())\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to an Azure Service Bus Queue - Python\nDESCRIPTION: Illustrates sending both a single message and a list of messages to an Azure Service Bus queue using Python. Assumes environment variables SERVICEBUS_FULLY_QUALIFIED_NAMESPACE and SERVICE_BUS_QUEUE_NAME are set, and relies on proper Azure AD authentication via DefaultAzureCredential (from azure-identity). The code initializes the ServiceBusClient, acquires a sender for the target queue, and sends messages. Messages are constructed as ServiceBusMessage objects; sending can be done for either single instances or lists. Proper resource cleanup is ensured via context managers. Requires installed azure-servicebus and azure-identity packages, Azure credentials, and an existing queue on Service Bus. Limitations: does not demonstrate error handling or message scheduling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import ServiceBusClient, ServiceBusMessage\\nfrom azure.identity import DefaultAzureCredential\\n\\nimport os\\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\\n\\ncredential = DefaultAzureCredential()\\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\\n    with client.get_queue_sender(queue_name) as sender:\\n        # Sending a single message\\n        single_message = ServiceBusMessage(\"Single message\")\\n        sender.send_messages(single_message)\\n\\n        # Sending a list of messages\\n        messages = [ServiceBusMessage(\"First message\"), ServiceBusMessage(\"Second message\")]\\n        sender.send_messages(messages)\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Azure Cosmos DB Container\nDESCRIPTION: This code shows how to delete items from a container in Cosmos DB by first querying for specific items and then deleting them using the delete_item method with the appropriate partition key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\nfor item in container.query_items(\n        query='SELECT * FROM products p WHERE p.productModel = \"Model 2\"',\n        enable_cross_partition_query=True):\n    container.delete_item(item, partition_key='Widget')\n```\n\n----------------------------------------\n\nTITLE: Registering a Schema using SchemaRegistryClient in Python\nDESCRIPTION: Demonstrates registering a schema (in Avro format in this example) with the Azure Schema Registry. It defines the schema structure, creates a `SchemaRegistryClient`, and then calls `register_schema` with the group name, schema name, definition, and format. The returned `schema_properties` object contains the ID of the registered schema. Requires environment variables `SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE` and `SCHEMA_REGISTRY_GROUP`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMA_REGISTRY_GROUP']\nname = \"your-schema-name\"\nformat = \"Avro\"\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\n\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\n    id = schema_properties.id\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Azure Key Vault using Python\nDESCRIPTION: This code shows how to retrieve a previously stored secret from Azure Key Vault using the SecretClient's get_secret method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret = secret_client.get_secret(\"secret-name\")\n\nprint(secret.name)\nprint(secret.value)\n```\n\n----------------------------------------\n\nTITLE: Training a Custom Model with Azure Form Recognizer v3.1.x - Python\nDESCRIPTION: This snippet shows how to train a custom model using the Form Training Client in Azure Form Recognizer SDK v3.1.x for Python. It uses the 'use_training_labels' argument and accepts a SAS URL to labeled training data. Dependencies are the 'FormTrainingClient' and 'AzureKeyCredential' classes from the SDK, and inputs include an endpoint, credential key, and container SAS URL. Outputs are printed details about the trained model and its submodels, including recognized fields and training documents. The code is specific to v3.1.x and requires properly labeled documents in storage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nform_training_client = FormTrainingClient(endpoint, AzureKeyCredential(key))\npoller = form_training_client.begin_training(\n    container_sas_url, use_training_labels=True, model_name=\"mymodel\"\n)\nmodel = poller.result()\n\n# Custom model information\nprint(\"Model ID: {}\".format(model.model_id))\nprint(\"Status: {}\".format(model.status))\nprint(\"Model name: {}\".format(model.model_name))\nprint(\"Is this a composed model?: {}\".format(model.properties.is_composed_model))\nprint(\"Training started on: {}\".format(model.training_started_on))\nprint(\"Training completed on: {}\".format(model.training_completed_on))\n\nprint(\"Recognized fields:\")\n# looping through the submodels, which contains the fields they were trained on\nfor submodel in model.submodels:\n    print(\"...The submodel has model ID: {}\".format(submodel.model_id))\n    print(\"...The submodel with form type {} has an average accuracy '{}'\".format(\n        submodel.form_type, submodel.accuracy\n    ))\n    for name, field in submodel.fields.items():\n        print(\"...The model found the field '{}' with an accuracy of {}\".format(\n            name, field.accuracy\n        ))\n\n# Training result information\nfor doc in model.training_documents:\n    print(\"Document name: {}\".format(doc.name))\n    print(\"Document status: {}\".format(doc.status))\n    print(\"Document page count: {}\".format(doc.page_count))\n    print(\"Document errors: {}\".format(doc.errors))\n```\n\n----------------------------------------\n\nTITLE: Authenticating SecretClient with ManagedIdentityCredential Using a Client ID - Azure Identity - Python\nDESCRIPTION: Authenticates SecretClient from azure-keyvault-secrets using ManagedIdentityCredential, targeting a user-assigned managed identity specified via its client_id. Requires both azure-identity and azure-keyvault-secrets Python packages. The managed identity client ID must be passed as a string, and the Key Vault URL provided. Returns a SecretClient object for managing secrets under the specified managed identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential(client_id=\"managed_identity_client_id\")\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n----------------------------------------\n\nTITLE: Getting ChatCompletionsClient and Making Call using azure-ai-inference in Python\nDESCRIPTION: Demonstrates obtaining an authenticated `ChatCompletionsClient` using `project_client.inference.get_chat_completions_client()` and then making a chat completion request with a specified model deployment name ('gpt-4o' in the example) and user message. Requires the `azure-ai-inference` package and an initialized `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninference_client = project_client.inference.get_chat_completions_client()\n\nresponse = inference_client.complete(\n    model=\"gpt-4o\", # Model deployment name\n    messages=[UserMessage(content=\"How many feet are in a mile?\")]\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Deploying a Project in Azure Question Answering (Python)\nDESCRIPTION: This snippet shows how to deploy a project and list all deployments using the Azure Question Answering Python SDK. It creates an AuthoringClient, deploys the project, and then lists all deployments for the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\n# get service secrets\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\n# create client\nclient = AuthoringClient(endpoint, AzureKeyCredential(key))\n\nproject_name = \"IssacNewton\"\n\n# deploy project\ndeployment_poller = client.begin_deploy_project(\n    project_name=project_name,\n    deployment_name=\"production\"\n)\ndeployment_poller.result()\n\n# list all deployments\ndeployments = client.list_deployments(\n    project_name=project_name\n)\n\nprint(\"view project deployments\")\nfor d in deployments:\n    print(d)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Tools Package\nDESCRIPTION: Package installation directive for Azure SDK tools from a local path, using pip's editable install mode (-e flag) to allow for development changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/powerbidedicated/azure-mgmt-powerbidedicated/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Performing Multiple Analyses with Azure Text Analytics in Python\nDESCRIPTION: This code snippet demonstrates how to use the Azure Text Analytics client to perform multiple analyses on a set of documents in a single request. It includes entity recognition, PII detection, key phrase extraction, linked entity recognition, and sentiment analysis.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import (\n    TextAnalyticsClient,\n    RecognizeEntitiesAction,\n    RecognizeLinkedEntitiesAction,\n    RecognizePiiEntitiesAction,\n    ExtractKeyPhrasesAction,\n    AnalyzeSentimentAction,\n)\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n)\n\ndocuments = [\n    'We went to Contoso Steakhouse located at midtown NYC last week for a dinner party, and we adore the spot! '\n    'They provide marvelous food and they have a great menu. The chief cook happens to be the owner (I think his name is John Doe) '\n    'and he is super nice, coming out of the kitchen and greeted us all.'\n    ,\n\n    'We enjoyed very much dining in the place! '\n    'The Sirloin steak I ordered was tender and juicy, and the place was impeccably clean. You can even pre-order from their '\n    'online menu at www.contososteakhouse.com, call 312-555-0176 or send email to order@contososteakhouse.com! '\n    'The only complaint I have is the food didn\\'t come fast enough. Overall I highly recommend it!'\n]\n\npoller = text_analytics_client.begin_analyze_actions(\n    documents,\n    display_name=\"Sample Text Analysis\",\n    actions=[\n        RecognizeEntitiesAction(),\n        RecognizePiiEntitiesAction(),\n        ExtractKeyPhrasesAction(),\n        RecognizeLinkedEntitiesAction(),\n        AnalyzeSentimentAction(),\n    ],\n)\n\ndocument_results = poller.result()\nfor doc, action_results in zip(documents, document_results):\n    print(f\"\\nDocument text: {doc}\")\n    for result in action_results:\n        if result.kind == \"EntityRecognition\":\n            print(\"...Results of Recognize Entities Action:\")\n            for entity in result.entities:\n                print(f\"......Entity: {entity.text}\")\n                print(f\".........Category: {entity.category}\")\n                print(f\".........Confidence Score: {entity.confidence_score}\")\n                print(f\".........Offset: {entity.offset}\")\n\n        elif result.kind == \"PiiEntityRecognition\":\n            print(\"...Results of Recognize PII Entities action:\")\n            for pii_entity in result.entities:\n                print(f\"......Entity: {pii_entity.text}\")\n                print(f\".........Category: {pii_entity.category}\")\n                print(f\".........Confidence Score: {pii_entity.confidence_score}\")\n\n        elif result.kind == \"KeyPhraseExtraction\":\n            print(\"...Results of Extract Key Phrases action:\")\n            print(f\"......Key Phrases: {result.key_phrases}\")\n\n        elif result.kind == \"EntityLinking\":\n            print(\"...Results of Recognize Linked Entities action:\")\n            for linked_entity in result.entities:\n                print(f\"......Entity name: {linked_entity.name}\")\n                print(f\".........Data source: {linked_entity.data_source}\")\n                print(f\".........Data source language: {linked_entity.language}\")\n                print(\n                    f\".........Data source entity ID: {linked_entity.data_source_entity_id}\"\n                )\n                print(f\".........Data source URL: {linked_entity.url}\")\n                print(\".........Document matches:\")\n                for match in linked_entity.matches:\n                    print(f\"............Match text: {match.text}\")\n                    print(f\"............Confidence Score: {match.confidence_score}\")\n                    print(f\"............Offset: {match.offset}\")\n                    print(f\"............Length: {match.length}\")\n\n        elif result.kind == \"SentimentAnalysis\":\n            print(\"...Results of Analyze Sentiment action:\")\n            print(f\"......Overall sentiment: {result.sentiment}\")\n            print(\n                f\"......Scores: positive={result.confidence_scores.positive}; \\\n                neutral={result.confidence_scores.neutral}; \\\n                negative={result.confidence_scores.negative} \\n\"\n            )\n\n        elif result.is_error is True:\n            print(\n                f\"...Is an error with code '{result.error.code}' and message '{result.error.message}'\"\n            )\n\n    print(\"------------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Certificate from Azure Key Vault using Python\nDESCRIPTION: This snippet demonstrates how to retrieve the latest version of a certificate from Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificate = certificate_client.get_certificate(\"cert-name\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\nprint(certificate.policy.issuer_name)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Async SecretClient with DefaultAzureCredential - Azure SDK - Python\nDESCRIPTION: Demonstrates authenticating the asynchronous SecretClient from the azure-keyvault-secrets.aio library using DefaultAzureCredential from azure.identity.aio. Requires the azure-identity and azure-keyvault-secrets packages and an async transport such as aiohttp. The Key Vault URL string must be provided. Returns a client for secret operations in an async environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ndefault_credential = DefaultAzureCredential()\nclient = SecretClient(\"https://my-vault.vault.azure.net\", default_credential)\n```\n\n----------------------------------------\n\nTITLE: Extracting Text (OCR) from an Image URL with Azure ImageAnalysisClient (Python)\nDESCRIPTION: This snippet demonstrates text extraction (OCR) from an image via a public URL using the analyze_from_url method of the ImageAnalysisClient in Python. It specifies VisualFeatures.READ to detect text, iterates over the resulting read object to extract lines, words, bounding polygons, and confidence. Requires the azure-ai-vision-imageanalysis package and a valid Azure client. Input: image URL. Output: prints detected lines and words with location and confidence. Only works for image files accessible online.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Extract text (OCR) from an image stream. This will be a synchronously (blocking) call.\\nresult = client.analyze_from_url(\\n    image_url=\\\"https://aka.ms/azsdk/image-analysis/sample.jpg\\\",\\n    visual_features=[VisualFeatures.READ]\\n)\\n\\n# Print text (OCR) analysis results to the console\\nprint(\\\"Image analysis results:\\\")\\nprint(\\\" Read:\\\")\\nif result.read is not None:\\n    for line in result.read.blocks[0].lines:\\n        print(f\\\"   Line: '{line.text}', Bounding box {line.bounding_polygon}\\\")\\n        for word in line.words:\\n            print(f\\\"     Word: '{word.text}', Bounding polygon {word.bounding_polygon}, Confidence {word.confidence:.4f}\\\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Python Package\nDESCRIPTION: Command to install the Azure Event Hubs client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install azure-eventhub\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Azure Core Performance Tests - CMD\nDESCRIPTION: Command prompt instructions for installing development dependencies and the local Azure core module in a Python virtual environment. First, all necessary test and development packages are installed using pip and the dev_requirements.txt file. Then, the Azure core module itself is installed in editable mode for local development and testing. The virtual environment must already be activated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/tests/perf_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-core> pip install -r dev_requirements.txt\\n(env) ~/azure-core> pip install .\n```\n\n----------------------------------------\n\nTITLE: Advanced Vector Search Query with Custom Parameters in Azure Cosmos DB (Python)\nDESCRIPTION: Demonstrates an advanced vector search query with optional parameters for exact search and custom specifications for data type and distance function, overriding the container's default settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nquery = \"SELECT TOP 10 c.title,VectorDistance(c.embedding, [{}], true, {{'dataType': 'float32' , 'distanceFunction': 'cosine'}}) AS \" \\\n            \"SimilarityScore FROM c ORDER BY VectorDistance(c.embedding, [{}], true, {{'dataType': \" \\\n            \"'float32', 'distanceFunction': 'cosine'}})\".format(embeddings_string, embeddings_string)\n```\n\n----------------------------------------\n\nTITLE: Sending Email to Multiple Recipients with Azure Communication Email SDK\nDESCRIPTION: Shows how to send an email to multiple recipients using to, cc, and bcc fields. Each recipient includes an email address and display name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"html><h1>This is the body</h1></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\"address\": \"customer@domain.com\", \"displayName\": \"Customer Name\"},\n            {\"address\": \"customer2@domain.com\", \"displayName\": \"Customer Name 2\"}\n        ],\n        \"cc\": [\n            {\"address\": \"ccCustomer@domain.com\", \"displayName\": \"CC Customer Name\"},\n            {\"address\": \"ccCustomer2@domain.com\", \"displayName\": \"CC Customer Name 2\"}\n        ],\n        \"bcc\": [\n            {\"address\": \"bccCustomer@domain.com\", \"displayName\": \"BCC Customer Name\"},\n            {\"address\": \"bccCustomer2@domain.com\", \"displayName\": \"BCC Customer Name 2\"}\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\"\n}\n\npoller = client.begin_send(message)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Liveness Detection with Face Verification Using Azure Face SessionClient - Python\nDESCRIPTION: This snippet demonstrates liveness detection with additional face verification using FaceSessionClient in Azure AI Vision Face SDK for Python. Dependencies are the same as the basic liveness session example, plus binary image file reading. The verify image is read from disk and sent to 'create_liveness_with_verify_session', and both session creation and verification results are displayed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\\n\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.vision.face import FaceSessionClient\\nfrom azure.ai.vision.face.models import CreateLivenessSessionContent, LivenessOperationMode\\n\\nendpoint = \"<your endpoint>\"\\nkey = \"<your api key>\"\\n\\nwith FaceSessionClient(endpoint=endpoint, credential=AzureKeyCredential(key)) as face_session_client:\\n    sample_file_path = \"<your verify image file>\"\\n    with open(sample_file_path, \"rb\") as fd:\\n        file_content = fd.read()\\n\\n    # Create a session.\\n    print(\"Create a new liveness with verify session with verify image.\")\\n\\n    created_session = face_session_client.create_liveness_with_verify_session(\\n        CreateLivenessSessionContent(\\n            liveness_operation_mode=LivenessOperationMode.PASSIVE,\\n            device_correlation_id=str(uuid.uuid4()),\\n            send_results_to_client=False,\\n            auth_token_time_to_live_in_seconds=60,\\n        ),\\n        verify_image=file_content,\\n    )\\n    print(f\"Result: {created_session}\")\\n\\n    # Get the liveness detection and verification result.\\n    print(\"Get the liveness detection and verification result.\")\\n    liveness_result = face_session_client.get_liveness_with_verify_session_result(created_session.session_id)\\n    print(f\"Result: {liveness_result}\")\n```\n\n----------------------------------------\n\nTITLE: Consuming Events in Batches Synchronously from Event Hubs in Python\nDESCRIPTION: This snippet demonstrates consuming events in batches using `EventHubConsumerClient`. It initializes the client similar to the single event consumer and uses the `receive_batch` method with an `on_event_batch` callback. The callback processes a list of received events, logs information for the batch, and updates the checkpoint. It starts reading from the beginning of the partitions (`starting_position=\"-1\"`). Dependencies: `logging`, `azure.eventhub.EventHubConsumerClient`, `azure.identity.DefaultAzureCredential`. Placeholder values for connection details must be replaced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport logging\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.identity import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nclient = EventHubConsumerClient(\n    fully_qualified_namespace=fully_qualified_namespace,\n    eventhub_name=eventhub_name,\n    consumer_group=consumer_group,\n    credential=DefaultAzureCredential(),\n)\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\ndef on_event_batch(partition_context, events):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    partition_context.update_checkpoint()\n\nwith client:\n    client.receive_batch(\n        on_event_batch=on_event_batch,\n        starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n    )\n    # receive events from specified partition:\n    # client.receive_batch(on_event_batch=on_event_batch, partition_id='0')\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Typing Notification\nDESCRIPTION: Demonstrates how to send a typing notification in a chat thread.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nchat_thread_client.send_typing_notification()\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultAzureCredential for Custom Cloud Authority in Python\nDESCRIPTION: This example demonstrates how to configure DefaultAzureCredential with a custom cloud authority URL for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nDefaultAzureCredential(authority=\"https://login.partner.microsoftonline.cn\")\n```\n\n----------------------------------------\n\nTITLE: Managing Users in Azure Confidential Ledger\nDESCRIPTION: Demonstrates user management operations including creating, updating, retrieving, and deleting users with different roles. Supports both AAD and certificate-based users.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\nuser_id = \"some AAD object id\"\nuser = ledger_client.create_or_update_user(\n    user_id, {\"assignedRole\": \"Contributor\"}\n)\n\nuser = ledger_client.get_user(user_id)\nassert user[\"userId\"] == user_id\nassert user[\"assignedRole\"] == \"Contributor\"\n\nledger_client.delete_user(user_id)\n\nuser_id = \"PEM certificate fingerprint\"\nuser = ledger_client.create_or_update_user(\n    user_id, {\"assignedRole\": \"Reader\"}\n)\n\nuser = ledger_client.get_user(user_id)\nassert user[\"userId\"] == user_id\nassert user[\"assignedRole\"] == \"Reader\"\n\nledger_client.delete_user(user_id)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Receipts with Prebuilt Model in Python\nDESCRIPTION: This snippet demonstrates how to use the Document Intelligence service to analyze receipts using a prebuilt model. It extracts various fields from the receipt such as merchant name, transaction date, items, subtotal, tax, tip, and total.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-receipt\", document=f, locale=\"en-US\"\n    )\nreceipts = poller.result()\n\nfor idx, receipt in enumerate(receipts.documents):\n    print(f\"--------Analysis of receipt #{idx + 1}--------\")\n    print(f\"Receipt type: {receipt.doc_type if receipt.doc_type else 'N/A'}\")\n    merchant_name = receipt.fields.get(\"MerchantName\")\n    if merchant_name:\n        print(\n            f\"Merchant Name: {merchant_name.value} has confidence: \"\n            f\"{merchant_name.confidence}\"\n        )\n    transaction_date = receipt.fields.get(\"TransactionDate\")\n    if transaction_date:\n        print(\n            f\"Transaction Date: {transaction_date.value} has confidence: \"\n            f\"{transaction_date.confidence}\"\n        )\n    if receipt.fields.get(\"Items\"):\n        print(\"Receipt items:\")\n        for idx, item in enumerate(receipt.fields.get(\"Items\").value):\n            print(f\"...Item #{idx + 1}\")\n            item_description = item.value.get(\"Description\")\n            if item_description:\n                print(\n                    f\"......Item Description: {item_description.value} has confidence: \"\n                    f\"{item_description.confidence}\"\n                )\n            item_quantity = item.value.get(\"Quantity\")\n            if item_quantity:\n                print(\n                    f\"......Item Quantity: {item_quantity.value} has confidence: \"\n                    f\"{item_quantity.confidence}\"\n                )\n            item_price = item.value.get(\"Price\")\n            if item_price:\n                print(\n                    f\"......Individual Item Price: {item_price.value} has confidence: \"\n                    f\"{item_price.confidence}\"\n                )\n            item_total_price = item.value.get(\"TotalPrice\")\n            if item_total_price:\n                print(\n                    f\"......Total Item Price: {item_total_price.value} has confidence: \"\n                    f\"{item_total_price.confidence}\"\n                )\n    subtotal = receipt.fields.get(\"Subtotal\")\n    if subtotal:\n        print(f\"Subtotal: {subtotal.value} has confidence: {subtotal.confidence}\")\n    tax = receipt.fields.get(\"TotalTax\")\n    if tax:\n        print(f\"Total tax: {tax.value} has confidence: {tax.confidence}\")\n    tip = receipt.fields.get(\"Tip\")\n    if tip:\n        print(f\"Tip: {tip.value} has confidence: {tip.confidence}\")\n    total = receipt.fields.get(\"Total\")\n    if total:\n        print(f\"Total: {total.value} has confidence: {total.confidence}\")\n    print(\"--------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Data Factory using DefaultAzureCredential\nDESCRIPTION: Code to authenticate with the Azure Data Factory Management Client using DefaultAzureCredential. This example reads the Azure subscription ID from an environment variable and initializes the client with the default credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.datafactory import DataFactoryManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataFactoryManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Setting up and Creating an Agent with Code Interpreter Tool in Python\nDESCRIPTION: Shows how to create an Agent equipped with a `CodeInterpreterTool`. It uploads a specific file (`nifty_500_quarterly_results.csv`) intended for use by the code interpreter, specifying the purpose as `FilePurpose.AGENTS`. It then initializes the `CodeInterpreterTool` with the uploaded file's ID and creates the Agent, passing the tool's definitions and resources. Requires `CodeInterpreterTool`, `FilePurpose`, `os` package, and `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfile = project_client.agents.upload_file_and_poll(\n    file_path=\"nifty_500_quarterly_results.csv\", purpose=FilePurpose.AGENTS\n)\nprint(f\"Uploaded file, file ID: {file.id}\")\n\ncode_interpreter = CodeInterpreterTool(file_ids=[file.id])\n\n# Create agent with code interpreter tool and tools_resources\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are helpful assistant\",\n    tools=code_interpreter.definitions,\n    tool_resources=code_interpreter.resources,\n)\n```\n\n----------------------------------------\n\nTITLE: Rotating a Key on-demand in Azure Key Vault\nDESCRIPTION: This snippet demonstrates how to rotate a key on-demand by creating a new version of the key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrotated_key = client.rotate_key(\"rotation-sample-key\")\nprint(f\"Rotated the key on-demand; new version is {rotated_key.properties.version}\")\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob using BlobClient in Python\nDESCRIPTION: This snippet demonstrates how to upload a blob to a container using the BlobClient. It initializes the client from a connection string and uploads the contents of a local file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as data:\n    blob.upload_blob(data)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Evaluation SDK\nDESCRIPTION: Command to install the Azure AI Evaluation SDK package using pip package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Analyzing Documents from URL with Azure Document Intelligence in Python\nDESCRIPTION: Demonstrates how to analyze documents from a URL using a pre-built receipt model. It uses the DocumentIntelligenceClient to process a receipt image and obtain the analysis results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import AnalyzeDocumentRequest, AnalyzeResult\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\n\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\nurl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/documentintelligence/azure-ai-documentintelligence/samples/sample_forms/receipt/contoso-receipt.png\"\npoller = document_intelligence_client.begin_analyze_document(\n    \"prebuilt-receipt\", AnalyzeDocumentRequest(url_source=url)\n)\nreceipts: AnalyzeResult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Recovery Services Site Recovery Management Client with AAD Authentication in Python\nDESCRIPTION: Demonstrates how to initialize the SiteRecoveryManagementClient for Azure Recovery Services in Python, authenticating with DefaultAzureCredential which relies on Azure Active Directory environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and optionally AZURE_SUBSCRIPTION_ID). Requires the azure-identity and azure-mgmt-recoveryservicessiterecovery packages pre-installed. The input environment variables must be correctly set for authentication to succeed. The output is an authenticated SiteRecoveryManagementClient object ready to interact with Azure Recovery Services Site Recovery Management resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicessiterecovery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.recoveryservicessiterecovery import SiteRecoveryManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SiteRecoveryManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Key Vault Performance Tests\nDESCRIPTION: Installs the required dependencies for running performance tests, including the devtools_testutils package and the local package in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-secrets> pip install -r dev_requirements.txt\n(env) ~/azure-keyvault-secrets> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Authenticating with azure-keyvault-keys using DefaultAzureCredential\nDESCRIPTION: Creates a KeyClient using DefaultAzureCredential from azure-identity in the new azure-keyvault-keys library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets Asynchronously in Azure Key Vault\nDESCRIPTION: Lists all secrets in an Azure Key Vault using the asynchronous SecretClient. Demonstrates iterating through secret properties without retrieving their values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret_properties = secret_client.list_properties_of_secrets()\n\nasync for secret_property in secret_properties:\n    # the list doesn't include values or versions of the secrets\n    print(secret_property.name)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure Key Vault\nDESCRIPTION: Demonstrates proper error handling when accessing non-existent keys in Azure Key Vault using try-except blocks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    key_client.get_key(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n----------------------------------------\n\nTITLE: Getting Route Directions\nDESCRIPTION: Python code showing how to request and get route directions between two points.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.route import MapsRouteClient\n\nroute_directions_result = client.get_route_directions(route_points=[(47.60323, -122.33028), (53.2, -106)]);\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Image Inputs in Various Formats - Azure SDK for Python\nDESCRIPTION: Showcases three ways to send images with agent messages: (1) as an uploaded file, (2) as a public URL, and (3) as a base64-encoded string. Each approach involves different preparation steps and parameter objects, such as `MessageImageFileParam`, `MessageImageUrlParam`, and relevant content block classes. Requires a thread and image resource(s). Outputs messages with attached image content for agent processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# Upload the local image file\nimage_file = project_client.agents.upload_file_and_poll(file_path=\"image_file.png\", purpose=\"assistants\")\n\n# Construct content using uploaded image\nfile_param = MessageImageFileParam(file_id=image_file.id, detail=\"high\")\ncontent_blocks = [\n    MessageInputTextBlock(text=\"Hello, what is in the image?\"),\n    MessageInputImageFileBlock(image_file=file_param),\n]\n\n# Create the message\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=content_blocks\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Specify the public image URL\nimage_url = \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\n\n# Create content directly referencing image URL\nurl_param = MessageImageUrlParam(url=image_url, detail=\"high\")\ncontent_blocks = [\n    MessageInputTextBlock(text=\"Hello, what is in the image?\"),\n    MessageInputImageUrlBlock(image_url=url_param),\n]\n\n# Create the message\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=content_blocks\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport base64\n\ndef image_file_to_base64(path: str) -> str:\n    with open(path, \"rb\") as f:\n        return base64.b64encode(f.read()).decode(\"utf-8\")\n\n# Convert your image file to base64 format\nimage_base64 = image_file_to_base64(\"image_file.png\")\n\n# Prepare the data URL\nimg_data_url = f\"data:image/png;base64,{image_base64}\"\n\n# Use base64 encoded string as image URL parameter\nurl_param = MessageImageUrlParam(url=img_data_url, detail=\"high\")\ncontent_blocks = [\n    MessageInputTextBlock(text=\"Hello, what is in the image?\"),\n    MessageInputImageUrlBlock(image_url=url_param),\n]\n\n# Create the message\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=content_blocks\n)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Events Within a Time Range using ChangeFeedClient - Python\nDESCRIPTION: This Python snippet lists blob change feed events occurring within a specified time range, leveraging the list_changes method with start_time and end_time arguments (as datetime objects). It prints each event in the range. Requires Azure credentials and an initialized ChangeFeedClient. Inputs include time range and credentials; output is a printed enumeration of event objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\ncf_client = ChangeFeedClient(\"https://{}.blob.core.windows.net\".format(\"YOUR_ACCOUNT_NAME\"),\n                             credential=\"Your_ACCOUNT_KEY\")\nstart_time = datetime(2020, 1, 6)\nend_time = datetime(2020, 3, 4)\nchange_feed = cf_client.list_changes(start_time=start_time, end_time=end_time)\n\n# print range of events\nfor event in change_feed:\n    print(event)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Queue Operations\nDESCRIPTION: Sets up detailed DEBUG level logging for Azure Queue operations using the standard Python logging library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.storage.queue import QueueServiceClient\n\nlogger = logging.getLogger('azure.storage.queue')\nlogger.setLevel(logging.DEBUG)\n\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nservice_client = QueueServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Overloading Functions Using typing.overload in Python\nDESCRIPTION: This example details the usage of typing.overload to provide multiple type-annotated signatures for a single function based on input types, enabling static checkers like mypy to infer precise return types. It depends on typing's overload and Union, and the involved analysis and result classes. Each overload maps a different analysis_kind to a specialized result, while only the final implementation contains executable logic and supports all combinations through runtime delegation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import overload, Union\n\n\n@overload\ndef analyze_text(text: str, analysis_kind: LanguageDetection) -> LanguageDetectionResult:\n    ...\n\n@overload\ndef analyze_text(text: str, analysis_kind: EntityRecognition) -> EntityRecognitionResult:\n    ...\n\n@overload\ndef analyze_text(text: str, analysis_kind: SentimentAnalysis) -> SentimentResult:\n    ...\n\n# actual implementation\ndef analyze_text(text: str, analysis_kind: Union[SentimentAnalysis, EntityRecognition, LanguageDetection]) -> Union[\n    SentimentResult, EntityRecognitionResult, LanguageDetectionResult]:\n    return _analyze(text, analysis_kind)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Blob Storage Client\nDESCRIPTION: Creates a BlobServiceClient to connect to Azure Storage using the provided credentials. Requires storage account name and authentication credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\n\ndef create_service_client(storage_account_name, credential):\n    oauth_url = \"https://{}.blob.core.windows.net\".format(\n        storage_account_name\n    )\n    return BlobServiceClient(account_url = oauth_url, credential=credential)\n\nservice_client = create_service_client(input_storage_account_name, credential)\n```\n\n----------------------------------------\n\nTITLE: Evaluating AI Application\nDESCRIPTION: Example showing how to evaluate a generative AI application using the evaluate API with custom configuration\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom askwiki import askwiki\n\nresult = evaluate(\n    data=\"data.jsonl\",\n    target=askwiki,\n    evaluators={\n        \"relevance\": relevance_eval\n    },\n    evaluator_config={\n        \"default\": {\n            \"column_mapping\": {\n                \"query\": \"${data.queries}\"\n                \"context\": \"${outputs.context}\"\n                \"response\": \"${outputs.response}\"\n            } \n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Digital Twin Relationships via Azure SDK - Python\nDESCRIPTION: Creates multiple relationships between digital twins using upsert_relationship from the Azure SDK for Python. The snippet builds a list of relationships, each requiring unique $relationshipId, $sourceId, $relationshipName, and $targetId fields. It iterates over the list to upsert each relationship for the corresponding twin.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhospital_relationships = [\n    {\n        \"$relationshipId\": \"BuildingHasFloor\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"has\",\n        \"$targetId\": floor_twin_id,\n        \"isAccessRestricted\": False\n    },\n    {\n        \"$relationshipId\": \"BuildingIsEquippedWithHVAC\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"isEquippedWith\",\n        \"$targetId\": hvac_twin_id\n    },\n    {\n        \"$relationshipId\": \"HVACCoolsFloor\",\n        \"$sourceId\": hvac_twin_id,\n        \"$relationshipName\": \"controlsTemperature\",\n        \"$targetId\": floor_twin_id\n    },\n    {\n        \"$relationshipId\": \"FloorContainsRoom\",\n        \"$sourceId\": floor_twin_id,\n        \"$relationshipName\": \"contains\",\n        \"$targetId\": room_twin_id\n    }\n]\n\nfor relationship in hospital_relationships:\n    service_client.upsert_relationship(\n        relationship[\"$sourceId\"],\n        relationship[\"$relationshipId\"],\n        relationship\n    )\n```\n\n----------------------------------------\n\nTITLE: Deleting a Secret from Azure Key Vault using Python\nDESCRIPTION: This code shows how to delete a secret from Azure Key Vault. It uses the begin_delete_secret method, which returns a poller to wait for the deletion to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ndeleted_secret = secret_client.begin_delete_secret(\"secret-name\").result()\n\nprint(deleted_secret.name)\nprint(deleted_secret.deleted_date)\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets Asynchronously with Azure Key Vault\nDESCRIPTION: Creates a secret in Azure Key Vault using the asynchronous SecretClient. Uses DefaultAzureCredential for authentication and demonstrates setting a secret value and accessing its properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\nsecret = await secret_client.set_secret(\"secret-name\", \"secret-value\")\n\nprint(secret.name)\nprint(secret.value)\nprint(secret.properties.version)\n```\n\n----------------------------------------\n\nTITLE: Executing Resource-Centric Logs Query in Azure Monitor with Python\nDESCRIPTION: Example of querying logs directly from an Azure resource using the query_resource method, with error handling and response processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pandas as pd\nfrom datetime import timedelta\nfrom azure.monitor.query import LogsQueryClient, LogsQueryStatus\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.identity import DefaultAzureCredential\n\ncredential  = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\nquery = \"\"\"AzureActivity | take 5\"\"\"\n\ntry:\n    response = client.query_resource(os.environ['LOGS_RESOURCE_ID'], query, timespan=timedelta(days=1))\n    if response.status == LogsQueryStatus.SUCCESS:\n        data = response.tables\n    else:\n        # LogsQueryPartialResult\n        error = response.partial_error\n        data = response.partial_data\n        print(error)\n\n    for table in data:\n        df = pd.DataFrame(data=table.rows, columns=table.columns)\n        print(df)\nexcept HttpResponseError as err:\n    print(\"something fatal happened\")\n    print(err)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Core Pipeline for an SDK Client in Python\nDESCRIPTION: This snippet demonstrates how an SDK developer can construct a service client (`FooServiceClient`) utilizing the Azure Core `Pipeline`. It imports necessary components like `Pipeline`, `HttpRequest`, `RequestsTransport`, and various policies. Inside the `__init__` method, it sets up a default transport and a list of policies (UserAgent, Headers, Authentication, ContentDecode, Proxy, Redirect, Retry, Logging), allowing for user overrides via `kwargs`. The `get_foo_properties` method shows how to create an `HttpRequest` and run it through the configured pipeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.pipeline import Pipeline\nfrom azure.core.rest import HttpRequest\nfrom azure.core.transport import RequestsTransport\nfrom azure.core.pipeline.policies import (\n    UserAgentPolicy,\n    HeadersPolicy,\n    RetryPolicy,\n    RedirectPolicy,\n    BearerTokenCredentialPolicy,\n    ContentDecodePolicy,\n    NetworkTraceLoggingPolicy,\n    ProxyPolicy\n)\n\nclass FooServiceClient:\n\n    def __init__(self, **kwargs):\n        transport = kwargs.get('transport', RequestsTransport(**kwargs))\n        policies = [\n            kwargs.get('user_agent_policy', UserAgentPolicy(\"ServiceUserAgentValue\", **kwargs)),\n            kwargs.get('headers_policy', HeadersPolicy({\"CustomHeader\": \"Value\"}, **kwargs)),\n            kwargs.get('authentication_policy', BearerTokenCredentialPolicy(credential, scopes, **kwargs)),\n            ContentDecodePolicy(),\n            kwargs.get('proxy_policy', ProxyPolicy(**kwargs)),\n            kwargs.get('redirect_policy', RedirectPolicy(**kwargs)),\n            kwargs.get('retry_policy', RetryPolicy(**kwargs)),\n            kwargs.get('logging_policy', NetworkTraceLoggingPolicy(**kwargs)),\n        ]\n        self._pipeline = Pipeline(transport, policies=policies)\n\n    def get_foo_properties(self, **kwargs)\n        # Create a generic HTTP Request. This is not specific to any particular transport\n        # or pipeline configuration.\n        new_request = HttpRequest(\"GET\", \"/\")\n\n        response = self._pipeline.run(new_request, **kwargs)\n        return deserialize_data(response.http_response)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Certificate Client in Python\nDESCRIPTION: This snippet demonstrates how to create a CertificateClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nVAULT_URL = os.environ[\"VAULT_URL\"]\ncredential = DefaultAzureCredential()\nclient = CertificateClient(vault_url=VAULT_URL, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Listing Incoming Digital Twin Relationships via Azure SDK - Python\nDESCRIPTION: Retrieves and prints all incoming relationships for a given digital twin using list_incoming_relationships. Requires service_client and a valid digital_twin_id. The function returns a list of incoming relationship items, which the snippet iterates over and prints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nincoming_relationships = service_client.list_incoming_relationships(digital_twin_id)\nfor incoming_relationship in incoming_relationships:\n    print(incoming_relationship)\n```\n\n----------------------------------------\n\nTITLE: Extending a Rendering Session Lease in Azure Remote Rendering with Python\nDESCRIPTION: This snippet shows how to check the remaining lease time of a rendering session and extend it if needed. It retrieves the current session properties and updates the lease time if less than 2 minutes remain, adding 10 more minutes to the lease.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    session = client.get_rendering_session(session_id)\n    if session.lease_time_minutes - session.elapsed_time_minutes < 2:\n        session = client.update_rendering_session(\n            session_id=session_id, lease_time_minutes=session.lease_time_minutes + 10\n        )\n```\n\n----------------------------------------\n\nTITLE: Extracting Key Phrases using Azure TextAnalyticsClient in Python\nDESCRIPTION: This code example illustrates how to extract significant key phrases from a set of documents using Azure's Text Analytics API. It configures a 'TextAnalyticsClient' and processes multiple article documents, with each output listing the key phrases identified per article. Prerequisites include the Azure Text Analytics client libraries and appropriate Azure endpoint/key settings in environment variables. Inputs should be a list of article texts; outputs are formatted key phrase lists per document in console output. The snippet manages typical errors by checking 'doc.is_error'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.textanalytics import TextAnalyticsClient\\n\\nendpoint = os.environ[\\\"AZURE_LANGUAGE_ENDPOINT\\\"]\\nkey = os.environ[\\\"AZURE_LANGUAGE_KEY\\\"]\\n\\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\\narticles = [\\n    \\\"\\\"\\\"\\n    Washington, D.C. Autumn in DC is a uniquely beautiful season. The leaves fall from the trees\\n    in a city chock-full of forests, leaving yellow leaves on the ground and a clearer view of the\\n    blue sky above...\\n    \\\"\\\"\\\",\\n    \\\"\\\"\\\"\\n    Redmond, WA. In the past few days, Microsoft has decided to further postpone the start date of\\n    its United States workers, due to the pandemic that rages with no end in sight...\\n    \\\"\\\"\\\",\\n    \\\"\\\"\\\"\\n    Redmond, WA. Employees at Microsoft can be excited about the new coffee shop that will open on campus\\n    once workers no longer have to work remotely...\\n    \\\"\\\"\\\"\\n]\\n\\nresult = text_analytics_client.extract_key_phrases(articles)\\nfor idx, doc in enumerate(result):\\n    if not doc.is_error:\\n        print(\\\"Key phrases in article #{}: {}\\\".format(\\n            idx + 1,\\n            \", \".join(doc.key_phrases)\\n        ))\n```\n\n----------------------------------------\n\nTITLE: Consuming Events with Checkpointing using BlobCheckpointStore in Python\nDESCRIPTION: This complete Python example illustrates how to consume events from Azure Event Hubs using `BlobCheckpointStore` for checkpoint management. It defines an `on_event` callback function to process received events and update checkpoints, initializes the `BlobCheckpointStore` using a storage connection string and container name, configures the `EventHubConsumerClient` with this store, and starts the event receiving process within a `with` statement for resource management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoreblob import BlobCheckpointStore\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nstorage_connection_str = '<< CONNECTION STRING OF THE STORAGE >>'\ncontainer_name = '<< STORAGE CONTAINER NAME>>'\n\n\ndef on_event(partition_context, event):\n    # Put your code here.\n    partition_context.update_checkpoint(event)  # Or update_checkpoint every N events for better performance.\n\ndef main():\n    checkpoint_store = BlobCheckpointStore.from_connection_string(\n        storage_connection_str,\n        container_name\n    )\n    client = EventHubConsumerClient.from_connection_string(\n        connection_str,\n        consumer_group,\n        eventhub_name=eventhub_name,\n        checkpoint_store=checkpoint_store,\n    )\n\n    with client:\n        client.receive(on_event)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentAnalysisClient with Azure Active Directory - Python\nDESCRIPTION: Instantiates a DocumentAnalysisClient using Azure Active Directory (AAD) credentials provided by the DefaultAzureCredential class from azure-identity. Assumes the environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET are set. Requires azure-ai-formrecognizer and azure-identity packages. This enables secure authentication using identity management rather than static keys.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"DefaultAzureCredential will use the values from these environment\nvariables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\"\"\"\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ndocument_analysis_client = DocumentAnalysisClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard and Transport Logging for Azure Event Hubs SDK in Python\nDESCRIPTION: This snippet demonstrates how to configure Python's standard `logging` library to capture detailed logs from the `azure.eventhub` SDK components. It sets up a handler to output logs to standard output (stdout), defines a specific log format, retrieves the `azure.eventhub` logger, sets its level to DEBUG, and adds the handler. Additionally, it shows how to enable lower-level AMQP transport logging by passing `logging_enable=True` during the instantiation of `EventHubProducerClient` and `EventHubConsumerClient`. This comprehensive logging setup is crucial for diagnosing issues.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/TROUBLESHOOTING.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nhandler = logging.StreamHandler(stream=sys.stdout)\nlog_fmt = logging.Formatter(fmt=\"%(asctime)s | %(threadName)s | %(levelname)s | %(name)s | %(message)s\")\nhandler.setFormatter(log_fmt)\nlogger = logging.getLogger('azure.eventhub')\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(handler)\n\n...\n\nfrom azure.eventhub import EventHubProducerClient, EventHubConsumerClient\n\nproducer = EventHubProducerClient(..., logging_enable=True)\nconsumer = EventHubConsumerClient(..., logging_enable=True)\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Communication SMS Package (Bash)\nDESCRIPTION: Installs the `azure-communication-sms` client library for Python using the pip package manager. This command downloads and installs the necessary package and its dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-sms\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Media Services using DefaultAzureCredential\nDESCRIPTION: Python code to authenticate with Azure Media Services using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/media/azure-mgmt-media/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.media import MediaManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MediaManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Markdown formatted changelog detailing version history, added features, bug fixes and other changes across multiple beta releases of the Azure SDK for Python\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b11 (2024-10-04)\n\n### Other Changes\n- Deprecation message added. \n\n## 1.0.0b10 (2024-10-03)\n\n### Bugs Fixed\n\n- Bug fixes\n\n## 1.0.0b9 (2024-09-16)\n\n### Bugs Fixed\n\n- Bug fixes\n\n## 1.0.0b8 (2024-03-27)\n\n### Other Changes\n- Bug fixes\n\n## 1.0.0b7 (2024-02-07)\n\n### Other Changes\n\n- Bug fixes\n\n## 1.0.0b6 (2024-02-06)\n\n### Other Changes\n\n- Recursive Text Splitter is now enabled by default for local index builds which mimics behavior of cloud index builds\n- Bug fixes\n\n## 1.0.0b5 (2024-02-02)\n\n### Features Added\n\n- Supports evaluate() on chat\n\n### Bugs Fixed\n\n- Fix promptflow evaluation bugs\n\n### Other Changes\n\n- Duplicate cleanup\n\n## 1.0.0b4 (2024-02-01)\n\n### Features Added\n\n- Support custom metrics for evaluation\n\n### Other Changes\n\n- Switched evaluate() function to run on promptflow engine\n- Use openai v1 environment variable\n\n## 1.0.0b3 (2024-01-30)\n\n### Other Changes\n\n- Support for Python 3.12\n\n## 1.0.0b2 (2023-11-30)\n\n### Features Added\n\n- Added new format to export data to in qa generator.\n\n### Other Changes\n\n- Dependency improvements.\n\n## 1.0.0b1 (2023-11-10)\n\n### Features Added\n\n- Try use langchain VectorStore and fallback to vendor.\n- Add azure-search-documents 11.4.0b11 and above support.\n- Invoke OpenAI with dynamic batch size.\n- Fix LangChain importing path\n- First preview.\n```\n\n----------------------------------------\n\nTITLE: Creating TableServiceClient with SAS Token in Python\nDESCRIPTION: Demonstrates how to create a TableServiceClient using a Shared Access Signature (SAS) token for authentication, including generating the SAS token.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.data.tables import TableServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\nfrom azure.core.credentials import AzureNamedKeyCredential, AzureSasCredential\n\ncredential = AzureNamedKeyCredential(\"my_account_name\", \"my_access_key\")\n# Create a SAS token to use for authentication of a client\nsas_token = generate_account_sas(\n    credential,\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1),\n)\n\nwith TableServiceClient(\n    endpoint=\"https://<my_account_name>.table.core.windows.net\", credential=AzureSasCredential(sas_token)\n) as table_service_client:\n    properties = table_service_client.get_service_properties()\n    print(f\"{properties}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Snapshot in Python\nDESCRIPTION: This snippet demonstrates creating a configuration snapshot in Azure App Configuration. It uses `ConfigurationSettingsFilter` to specify which settings (filtered by key and label) to include and then calls `begin_create_snapshot` on the client. The `response.result()` waits for the snapshot creation long-running operation to complete. Requires an initialized `client`, the `ConfigurationSettingsFilter` class, and a `snapshot_name` variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration import ConfigurationSettingsFilter\n\nfilters = [ConfigurationSettingsFilter(key=\"my_key1\", label=\"my_label1\")]\nresponse = client.begin_create_snapshot(name=snapshot_name, filters=filters)\ncreated_snapshot = response.result()\n```\n\n----------------------------------------\n\nTITLE: Handling SMS Send Errors and Checking Results (Python)\nDESCRIPTION: Provides an example of robust SMS sending by wrapping the `send` call in a `try...except` block to catch potential exceptions (like network issues or invalid credentials) raised by Azure Core. It also demonstrates iterating through the returned `sms_responses` list to check the `successful` boolean property of each individual `SmsSendResult` object, allowing developers to determine the outcome for each recipient and log specific error messages if a message failed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    sms_responses = sms_client.send(\n        from_=\"<leased-phone-number>\",\n        to=[\"<to-phone-number-1>\", \"<to-phone-number-2>\", \"<to-phone-number-3>\"],\n        message=\"Hello World via SMS\")\n\n    for sms_response in sms_responses:\n        if (sms_response.successful):\n            print(\"Message with message id {} was successful sent to {}\"\n            .format(sms_response.message_id, sms_response.to))\n        else:\n            print(\"Message failed to send to {} with the status code {} and error: {}\"\n            .format(sms_response.to, sms_response.http_status_code, sms_response.error_message))\nexcept Exception as ex:\n    print('Exception:')\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Tracing with Azure Monitor OpenTelemetry Distro in Python\nDESCRIPTION: This snippet demonstrates how to enable distributed tracing for Azure SDKs using the Azure Monitor OpenTelemetry Distro. It imports `configure_azure_monitor` and calls it with a connection string, which automatically configures Azure SDKs. It then shows an example of using `azure-storage-blob.BlobServiceClient`, where the `create_container` call will be automatically traced. A custom span named \"MyApplication\" is also created.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Enable Azure Monitor OpenTelemetry Distro\n# It confiures Azure SDKs to use OpenTelemetry as well\nfrom azure.monitor.opentelemetry import configure_azure_monitor\nfrom opentelemetry import trace\n\nconfigure_azure_monitor(\n   connection_string=\"<your-connection-string>\"\n)\n\n# Use Azure SDKs as usual, here as an example with Storage SDKs\n# you may also report your own spans for it.\nfrom azure.storage.blob import BlobServiceClient\n\ntracer = trace.get_tracer(__name__)\nwith tracer.start_as_current_span(name=\"MyApplication\"):\n    client = BlobServiceClient.from_connection_string('connectionstring')\n    client.create_container('my_container')  # Call will be traced\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret Client with DefaultAzureCredential in Python\nDESCRIPTION: This code demonstrates how to create a SecretClient instance using DefaultAzureCredential for authentication. It requires setting the VAULT_URL environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nVAULT_URL = os.environ[\"VAULT_URL\"]\ncredential = DefaultAzureCredential()\nclient = SecretClient(vault_url=VAULT_URL, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Red Hat Openshift Management SDK in Python\nDESCRIPTION: Commands to install the required Azure packages using pip. This installs both the Azure Red Hat Openshift management package and the Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redhatopenshift/azure-mgmt-redhatopenshift/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-redhatopenshift\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Cosmos DB with Simple Query\nDESCRIPTION: This snippet demonstrates how to query items in a Cosmos DB container using SQL-like syntax with the query_items method, enabling cross-partition queries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\n# Enumerate the returned items\nimport json\nfor item in container.query_items(\n        query='SELECT * FROM mycontainer r WHERE r.id=\"item3\"',\n        enable_cross_partition_query=True):\n    print(json.dumps(item, indent=True))\n```\n\n----------------------------------------\n\nTITLE: Consuming Events Individually Synchronously from Event Hubs in Python\nDESCRIPTION: This snippet shows how to consume events individually using `EventHubConsumerClient`. It initializes the client with necessary details (namespace, event hub name, consumer group, credentials) and uses the `receive` method with an `on_event` callback. The callback processes each received event, logs information, and updates the checkpoint. It starts reading from the beginning of the partitions (`starting_position=\"-1\"`). Dependencies: `logging`, `azure.eventhub.EventHubConsumerClient`, `azure.identity.DefaultAzureCredential`. Placeholder values for connection details must be replaced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport logging\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.identity import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nclient = EventHubConsumerClient(\n    fully_qualified_namespace=fully_qualified_namespace,\n    eventhub_name=eventhub_name,\n    consumer_group=consumer_group,\n    credential=DefaultAzureCredential(),\n)\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\ndef on_event(partition_context, event):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    partition_context.update_checkpoint(event)\n\nwith client:\n    client.receive(\n        on_event=on_event,\n        starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n    )\n    # receive events from specified partition:\n    # client.receive(on_event=on_event, partition_id='0')\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating with System-Assigned Managed Identity in Python\nDESCRIPTION: This example demonstrates how to authenticate using a system-assigned managed identity. It uses ManagedIdentityCredential without any configuration to create a SecretClient for Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential()\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Azure DataLake (Python)\nDESCRIPTION: Downloads a file from Azure Data Lake Storage to a local file. It creates a `DataLakeFileClient` using a connection string, file system name, and file path. It then opens a local file in binary write mode (`wb`), downloads the content using `download_file()`, and reads the downloaded stream into the local file using `readinto()`. Requires the `azure-storage-file-datalake` library and a valid connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.filedatalake import DataLakeFileClient\n\nfile = DataLakeFileClient.from_connection_string(\"my_connection_string\",\n                                                 file_system_name=\"myfilesystem\", file_path=\"myfile\")\n\nwith open(\"./BlockDestination.txt\", \"wb\") as my_file:\n    download = file.download_file()\n    download.readinto(my_file)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Images for Unsafe Content with Azure Content Safety Python SDK\nDESCRIPTION: This snippet shows how to analyze images using Azure AI Content Safety to detect unsafe content categories such as hate, self-harm, sexual, and violence. Prerequisites include azure-ai-contentsafety, access to required credentials, and a sample image file. The script constructs a ContentSafetyClient, reads image data, submits it for analysis, and then processes results for each category, printing severity levels. All exceptions are handled with detailed error output through HttpResponseError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.ai.contentsafety.models import ImageCategory\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n    from azure.ai.contentsafety.models import AnalyzeImageOptions, ImageData\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n    image_path = os.path.abspath(os.path.join(os.path.abspath(__file__), \"..\", \"./sample_data/image.jpg\"))\n\n    # Create a Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    # Build request\n    with open(image_path, \"rb\") as file:\n        request = AnalyzeImageOptions(image=ImageData(content=file.read()))\n\n    # Analyze image\n    try:\n        response = client.analyze_image(request)\n    except HttpResponseError as e:\n        print(\"Analyze image failed.\")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n\n    hate_result = next(item for item in response.categories_analysis if item.category == ImageCategory.HATE)\n    self_harm_result = next(item for item in response.categories_analysis if item.category == ImageCategory.SELF_HARM)\n    sexual_result = next(item for item in response.categories_analysis if item.category == ImageCategory.SEXUAL)\n    violence_result = next(item for item in response.categories_analysis if item.category == ImageCategory.VIOLENCE)\n\n    if hate_result:\n        print(f\"Hate severity: {hate_result.severity}\")\n    if self_harm_result:\n        print(f\"SelfHarm severity: {self_harm_result.severity}\")\n    if sexual_result:\n        print(f\"Sexual severity: {sexual_result.severity}\")\n    if violence_result:\n        print(f\"Violence severity: {violence_result.severity}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with InteractiveBrowserBrokerCredential on macOS (Python)\nDESCRIPTION: Demonstrates using `InteractiveBrowserBrokerCredential` on macOS to authenticate with Azure services, exemplified by `BlobServiceClient`. It uses `msal.PublicClientApplication.CONSOLE_WINDOW_HANDLE` as the parent window handle for console applications. This credential leverages the Company Portal broker on macOS.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity-broker/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# On macOS\nimport msal\nfrom azure.identity.broker import InteractiveBrowserBrokerCredential\nfrom azure.storage.blob import BlobServiceClient\n\ncredential = InteractiveBrowserBrokerCredential(\n    parent_window_handle=msal.PublicClientApplication.CONSOLE_WINDOW_HANDLE\n)\nclient = BlobServiceClient(account_url, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Sending Events Safely in Batches in azure-eventhub v5 (Python)\nDESCRIPTION: Demonstrates sending events in `azure-eventhub` v5 using the dedicated `EventHubProducerClient`. It contrasts with v1 by showing two methods: sending a list of `EventData` directly via `producer.send_batch()` (which might fail if size limits are exceeded) and the preferred, safer method of using `producer.create_batch()` to create an `EventDataBatch`. Events are added using `add()` (which raises `ValueError` if size limits are hit), and the batch is sent using `producer.send_batch()`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nproducer_client = EventHubProducerClient.from_connection_string(conn_str, eventhub_name)\n\n# Send list of EventData. This can fail if the list exceeds size limit.\nevent_data_batch = [EventData('Single message')]\nproducer.send_batch(event_data_batch)\n\n# Send EventDataBatch. Multiple messages will safely be sent by using `create_batch` to create a batch object.\n# `add` will throw a ValueError if added size results in the batch exceeding the maximum batch size.\nevent_data_batch = producer.create_batch()\nevent_data_batch.add(EventData('Single message'))\nproducer.send_batch(event_data_batch)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Devhub Management Client using DefaultAzureCredential\nDESCRIPTION: Python code snippet demonstrating how to authenticate with the Azure Devhub Management Client using DefaultAzureCredential. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devhub/azure-mgmt-devhub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devhub import DevHubMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevHubMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Adherence Evaluator\nDESCRIPTION: Sets up the Task Adherence Evaluator with Azure OpenAI configuration\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/task_adherence.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.evaluation import TaskAdherenceEvaluator, AzureOpenAIModelConfiguration\nfrom pprint import pprint\n\nmodel_config = AzureOpenAIModelConfiguration(\n    azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n    api_key=os.environ[\"AZURE_OPENAI_API_KEY\"],\n    api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n)\ntask_adherence_evaluator = TaskAdherenceEvaluator(model_config)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account using Azure CLI\nDESCRIPTION: Use Azure CLI commands to create a new resource group and storage account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n----------------------------------------\n\nTITLE: Supplying Messages as List of Dicts to ChatCompletionsClient - Python\nDESCRIPTION: This snippet illustrates passing only the messages argument as a list of Python dictionaries to the complete method of the ChatCompletionsClient. Each dictionary specifies the role and content for a chat message. This enables concise and flexible input construction. The method returns the chat completion response, which can be parsed for generated content or usage data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.complete(\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"You are an AI assistant that helps people find information.\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"How many feet are in a mile?\",\n        },\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing an Async Azure App Configuration Client in Python\nDESCRIPTION: This snippet demonstrates how to initialize an asynchronous `AzureAppConfigurationClient` using a connection string stored in an environment variable (`APPCONFIGURATION_CONNECTION_STRING`). It imports the necessary async client class from `azure.appconfiguration.aio` and the `os` module. Requires the `azure-appconfiguration` package installed with async support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.appconfiguration.aio import AzureAppConfigurationClient\n\nCONNECTION_STRING = os.environ[\"APPCONFIGURATION_CONNECTION_STRING\"]\n\n# Create an app config client\nclient = AzureAppConfigurationClient.from_connection_string(CONNECTION_STRING)\n```\n\n----------------------------------------\n\nTITLE: Configuring DEBUG Level Logging for Azure FarmBeats Client in Python\nDESCRIPTION: This snippet shows how to enable detailed DEBUG level logging for the Azure SDK, specifically for the `FarmBeatsClient`. It uses the standard Python `logging` library to get the logger for the 'azure' namespace, sets its level to DEBUG, and configures a `StreamHandler` to output logs to the console (stdout). The `FarmBeatsClient` is then instantiated with the `logging_enable=True` keyword argument, which activates logging of HTTP request/response details for all operations made by this client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\nendpoint = \"https://<my-account-name>.farmbeats.azure.net\"\ncredential = DefaultAzureCredential()\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = FarmBeatsClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n```\n\n----------------------------------------\n\nTITLE: Training LargePersonGroup for Face Recognition - Azure Face SDK - Python\nDESCRIPTION: This snippet starts and monitors the asynchronous training of a LargePersonGroup using FaceAdministrationClient. It assumes prior group creation and adding of persons and faces. The poller executes the train operation and waits until completion; errors will raise exceptions. No parameters beyond the previously defined LargePersonGroup ID are required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    print(f\"Start to train the large person group: {large_person_group_id}.\")\\n    poller = face_admin_client.large_person_group.begin_train(large_person_group_id)\\n\\n    # Wait for the train operation to be completed.\\n    # If the training status isn't succeed, an exception will be thrown from the poller.\\n    training_result = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Listing Digital Twin Relationships via Azure SDK - Python\nDESCRIPTION: Lists all relationships for a specific digital twin using the Azure SDK's list_relationships method. Requires a valid digital_twint_id and an initialized service_client. Iterates through the returned relationships and prints each to output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrelationships = service_client.list_relationships(digital_twint_id)\nfor relationship in relationships:\n    print(relationship)\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous ChatCompletionsClient\nDESCRIPTION: Examples of creating and authenticating a synchronous ChatCompletionsClient for different endpoints using API key or GitHub token authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\n\n# For GitHub models\nclient = ChatCompletionsClient(\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(github_token),\n    model=\"mistral-large\" # Update as needed. Alternatively, you can include this is the `complete` call.\n)\n\n# For Serverless API or Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,  # Of the form https://<your-host-name>.<your-azure-region>.models.ai.azure.com\n    credential=AzureKeyCredential(key)\n)\n\n# For Azure OpenAI endpoint\nclient = ChatCompletionsClient(\n    endpoint=endpoint,  # Of the form https://<your-resouce-name>.openai.azure.com/openai/deployments/<your-deployment-name>\n    credential=AzureKeyCredential(key),\n    api_version=\"2024-06-01\",  # Azure OpenAI api-version. See https://aka.ms/azsdk/azure-ai-inference/azure-openai-api-versions\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Digital Twins Models in Python\nDESCRIPTION: Demonstrates how to create models for Azure Digital Twins using the DigitalTwinsClient. It creates a component model and a main model that includes the component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntemporary_component = {\n    \"@id\": component_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"Component1\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"ComponentProp1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"ComponentTelemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\ntemporary_model = {\n    \"@id\": model_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"TempModel\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"Prop1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Component\",\n        \"name\": \"Component1\",\n        \"schema\": component_id\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"Telemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\nnew_models = [temporary_component, temporary_model]\nmodels = service_client.create_models(new_models)\nprint('Created Models:')\nprint(models)\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Azure Service Libraries using pip\nDESCRIPTION: Commands for installing specific Azure service libraries using pip package manager. Shows how to install both stable and preview versions of Azure SDK packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install azure-batch          # Install the latest Batch runtime library\n$ pip install azure-mgmt-storage   # Install the latest Storage management library\n```\n\n----------------------------------------\n\nTITLE: Specifying User-Assigned Managed Identity for DefaultAzureCredential - Azure Identity - Python\nDESCRIPTION: Configures DefaultAzureCredential to target a specific user-assigned managed identity by supplying managed_identity_client_id as a keyword argument. Requires the client_id string of the user-assigned managed identity. This enables authentication under that identity instead of the system-assigned default. Works in any environment where user-assigned managed identities are supported.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDefaultAzureCredential(managed_identity_client_id=client_id)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Blobs Asynchronously using ContainerClient in Python\nDESCRIPTION: This snippet shows how to list blobs asynchronously in a container using the ContainerClient. It initializes the async client and uses an async for loop to collect the blobs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.aio import ContainerClient\n\ncontainer = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nblob_list = []\nasync for blob in container.list_blobs():\n    blob_list.append(blob)\nprint(blob_list)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Refresh of Configurations - Azure App Configuration Python Provider - Python\nDESCRIPTION: Shows how to configure the provider to watch one or more keys (here, 'Sentinel') for changes and auto-refresh configurations on a given interval (60 seconds). It utilizes custom callbacks for success and failure events. Requires dependencies 'azure.appconfiguration.provider' and 'os'. The provider must have its 'refresh' method called to trigger checks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load, WatchKey\nimport os\n\nconnection_string = os.environ.get(\"APPCONFIGURATION_CONNECTION_STRING\")\n\ndef my_callback_on_success():\n    # Do something on success\n    ...\n\ndef my_callback_on_fail(error):\n    # Do something on fail\n    ...\n\nconfig = load(\n    connection_string=connection_string,\n    refresh_on=[WatchKey(\"Sentinel\")],\n    refresh_interval=60,\n    on_refresh_success=my_callback_on_success,\n    on_refresh_error=my_callback_on_fail,\n    **kwargs,\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Keys Asynchronously in Azure Key Vault\nDESCRIPTION: Shows how to asynchronously list all keys in an Azure Key Vault using the async API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkeys = key_client.list_properties_of_keys()\n\nasync for key in keys:\n    print(key.name)\n```\n\n----------------------------------------\n\nTITLE: Handling Table Existence Errors in Azure Tables with Python\nDESCRIPTION: Demonstrates how to handle HTTP response errors when creating tables that already exist. The example catches the HttpResponseError exception that occurs when attempting to create a duplicate table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\nfrom azure.core.exceptions import HttpResponseError\ntable_name = 'YourTableName'\n\nservice_client = TableServiceClient.from_connection_string(connection_string)\n\n# Create the table if it does not already exist\ntc = service_client.create_table_if_not_exists(table_name)\n\ntry:\n    service_client.create_table(table_name)\nexcept HttpResponseError:\n    print(f\"Table with name {table_name} already exists\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Simple Query-Response Pairs\nDESCRIPTION: Demonstrates evaluation of basic string-based query and response pairs for intent resolution, including both successful and failed resolution scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/intent_resolution.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = intent_resolution_evaluator(query=\"What are the opening hours of the Eiffel Tower?\",\n                                     response=\"Opening hours of the Eiffel Tower are 9:00 AM to 11:00 PM.\",\n                                    )\npprint(result)\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = intent_resolution_evaluator(query=\"What is the opening hours of the Eiffel Tower?\",\n                                     response=\"Please check the official website for the up-to-date information on Eiffel Tower opening hours.\",\n                                    )\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Getting Air Quality Hourly Forecasts\nDESCRIPTION: Example showing how to get hourly air quality forecasts for a specific location using coordinates. Returns forecasts for the next one to 96 hours including pollutant levels, risks, and precautions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_air_quality_hourly_forecasts():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_air_quality_hourly_forecasts(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_air_quality_hourly_forecasts()\n```\n\n----------------------------------------\n\nTITLE: Activating Persistent Token Caching with Azure Identity SDK for Python\nDESCRIPTION: This snippet demonstrates how to instantiate a ClientSecretCredential with persistent token caching enabled using TokenCachePersistenceOptions. The key parameter, cache_persistence_options, configures credentials to store access tokens securely on disk as per the host operating system, providing resilience and allowing previously issued tokens to be reused across restarts. Requires azure-identity, with platform-dependent secure storage backends. Inputs are identifiers and the client secret; output is a credential object ready for use with caching.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nClientSecretCredential(\n    \"tenant\", \"client-id\", \"secret\", cache_persistence_options=TokenCachePersistenceOptions()\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Azure File Share\nDESCRIPTION: Demonstrates how to upload a file to Azure File Share using ShareFileClient. Includes both synchronous and asynchronous implementations for file upload operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as source_file:\n    file_client.upload_file(source_file)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare.aio import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as source_file:\n    await file_client.upload_file(source_file)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Azure Communication User - Python\nDESCRIPTION: This snippet creates a new user by calling create_user on the CommunicationIdentityClient and prints its unique id. It assumes that identity_client has already been initialized. The resulting user object can be used for subsequent authentication and token issuance tasks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser = identity_client.create_user()\nprint(\"User created with id:\" + user.properties['id'])\n```\n\n----------------------------------------\n\nTITLE: Uploading Documents to Index using SearchClient in Python\nDESCRIPTION: Demonstrates batch upload of a new document to an Azure AI Search index using the upload_documents method. A sample hotel document is defined and uploaded via 'search_client'. Requires the client to be properly configured. Input is a list containing the document dictionary; output is the upload operation result, with immediate feedback on success status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nDOCUMENT = {\\n    \\\"hotelId\\\": \\\"1000\\\",\\n    \\\"hotelName\\\": \\\"Azure Inn\\\",\\n}\\n\\nresult = search_client.upload_documents(documents=[DOCUMENT])\\n\\nprint(\\\"Upload of new document succeeded: {}\\\".format(result[0].succeeded))\n```\n\n----------------------------------------\n\nTITLE: Analyzing Documents with Custom Model in Python\nDESCRIPTION: This snippet demonstrates how to analyze documents using a custom-built model. It extracts fields, tables, selection marks, and other elements from the document. The code processes both the overall document structure and individual page elements.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\nmodel_id = os.getenv(\"CUSTOM_BUILT_MODEL_ID\", custom_model_id)\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\n\n# Make sure your document's type is included in the list of document types the custom model can analyze\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        model_id=model_id, document=f\n    )\nresult = poller.result()\n\nfor idx, document in enumerate(result.documents):\n    print(f\"--------Analyzing document #{idx + 1}--------\")\n    print(f\"Document has type {document.doc_type}\")\n    print(f\"Document has document type confidence {document.confidence}\")\n    print(f\"Document was analyzed with model with ID {result.model_id}\")\n    for name, field in document.fields.items():\n        field_value = field.value if field.value else field.content\n        print(\n            f\"......found field of type '{field.value_type}' with value '{field_value}' and with confidence {field.confidence}\"\n        )\n\n# iterate over tables, lines, and selection marks on each page\nfor page in result.pages:\n    print(f\"\\nLines found on page {page.page_number}\")\n    for line in page.lines:\n        print(f\"...Line '{line.content}'\")\n    for word in page.words:\n        print(f\"...Word '{word.content}' has a confidence of {word.confidence}\")\n    if page.selection_marks:\n        print(f\"\\nSelection marks found on page {page.page_number}\")\n        for selection_mark in page.selection_marks:\n            print(\n                f\"...Selection mark is '{selection_mark.state}' and has a confidence of {selection_mark.confidence}\"\n            )\n\nfor i, table in enumerate(result.tables):\n    print(f\"\\nTable {i + 1} can be found on page:\")\n    for region in table.bounding_regions:\n        print(f\"...{region.page_number}\")\n    for cell in table.cells:\n        print(\n            f\"...Cell[{cell.row_index}][{cell.column_index}] has text '{cell.content}'\"\n        )\nprint(\"-----------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Updating Secret Metadata in Azure Key Vault using Python\nDESCRIPTION: This snippet demonstrates how to update a secret's metadata in Azure Key Vault. It updates the content type and disables the secret for further use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncontent_type = \"text/plain\"\n\nupdated_secret_properties = secret_client.update_secret_properties(\"secret-name\", content_type=content_type, enabled=False)\n\nprint(updated_secret_properties.updated_on)\nprint(updated_secret_properties.content_type)\nprint(updated_secret_properties.enabled)\n```\n\n----------------------------------------\n\nTITLE: Function Overloading with Literal Types\nDESCRIPTION: Shows how to use Literal types with function overloading to create type-safe APIs with different return types based on input parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Literal, overload\n\n\n@overload\ndef get_element(kind: Literal[\"selectionMark\"]) -> SelectionMark:\n    ...\n\n\n@overload\ndef get_element(kind: Literal[\"word\"]) -> FormWord:\n    ...\n\n\n@overload\ndef get_element(kind: Literal[\"line\"]) -> FormLine:\n    ...\n\n\ndef get_element(kind):\n    ...\n\n\ns = get_element(kind=\"selectionMark\")\nw = get_element(kind=\"word\")\nl = get_element(kind=\"line\")\n\nreveal_type(s)\nreveal_type(w)\nreveal_type(l)\n```\n\n----------------------------------------\n\nTITLE: Getting a Schema by Version using SchemaRegistryClient in Python\nDESCRIPTION: Illustrates retrieving a specific version of a schema by providing the group name, schema name, and version number. It creates a `SchemaRegistryClient` and uses the `get_schema` method with these parameters. The definition and properties of the specified schema version are returned. Requires `SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE` and `SCHEMAREGISTRY_GROUP` environment variables, and valid `name` and `version` values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ[\"SCHEMAREGISTRY_GROUP\"]\nname = \"your-schema-name\"\nversion = int(\"<your schema version>\")\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema = schema_registry_client.get_schema(group_name=group_name, name=name, version=version)\n    definition = schema.definition\n    properties = schema.properties\n```\n\n----------------------------------------\n\nTITLE: Loading and Evaluating Agent Conversations from Disk in Python\nDESCRIPTION: Demonstrates how to load conversations from a JSONL file, extract run IDs, convert conversations to a standard format, and evaluate them using an intent resolution evaluator. It includes functions to parse JSON data and print conversation details.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/intent_resolution.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom azure.ai.evaluation import AIAgentConverter\n\ndef load_conversations(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n        parsed_conversations = [json.loads(line) for line in lines]\n    print(f\"Loaded {len(parsed_conversations)} conversations from {filename}.\")\n    return parsed_conversations\n\nconversations_filename = r'sample_synthetic_conversations.jsonl'\n\n#this loads 90 conversations from the file sample_synthetic_conversations.jsonl\nsample_conversations = load_conversations(conversations_filename)\n\n#get the first conversation from the loaded conversations\nconversation = sample_conversations[10]\n\nrun_ids = AIAgentConverter.run_ids_from_conversation(conversation)\nprint(f\"Run IDs in conversation: {run_ids}\")\nrun_id = str(run_ids[0]) # convert run_id to string in case it is some other type, e.g. an int\nconverted_conv = AIAgentConverter.convert_from_conversation(conversation, run_id)\n# Extract the query and response from the conversation\nquery = converted_conv['query']\nresponse = converted_conv['response']\ntool_definitions = converted_conv['tool_definitions']\n\nprint(f\"Run ID: {run_id}\")\nprint(f\"Query: {query}\")\nprint(f\"Response: {response}\")\nprint(f\"Tool Definitions: {tool_definitions}\")\n\nresult = intent_resolution_evaluator(query = query, response = response, tool_definitions = tool_definitions)\nprint(f\"Evaluation result\")\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Database and Container Throughput with Azure Cosmos DB SDK for Python\nDESCRIPTION: This snippet shows how to get the provisioned throughput for both an Azure Cosmos DB database and a specific container within it using the Python SDK. It initializes the `CosmosClient`, retrieves the database and container clients, and uses the `get_throughput()` method on each to fetch the offer details, printing the offer ID and throughput value. Note that getting container throughput only works for containers with dedicated throughput; otherwise, it raises an error. Requires `azure-cosmos`, `os`, and `json` libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos import CosmosClient\nimport os\nimport json\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\n\n# Database\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\ndb_offer = database.get_throughput()\nprint('Found Offer \\'{0}\\' for Database \\'{1}\\' and its throughput is \\'{2}\\''.format(db_offer.properties['id'], database.id, db_offer.properties['content']['offerThroughput']))\n\n# Container with dedicated throughput only. Will return error \"offer not found\" for containers without dedicated throughput\nCONTAINER_NAME = 'testContainer'\ncontainer = database.get_container_client(CONTAINER_NAME)\ncontainer_offer = container.get_throughput()\nprint('Found Offer \\'{0}\\' for Container \\'{1}\\' and its throughput is \\'{2}\\''.format(container_offer.properties['id'], container.id, container_offer.properties['content']['offerThroughput']))\n```\n```\n\n----------------------------------------\n\nTITLE: Completing a Received Message from Azure Service Bus Queue (Python)\nDESCRIPTION: This snippet demonstrates how to successfully complete a received message using `receiver.complete_message()`. This action acknowledges successful processing and removes the message from the Azure Service Bus queue. This operation is only valid for messages received in `PEEK_LOCK` mode whose lock has not expired.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.complete_message(msg)\n```\n```\n\n----------------------------------------\n\nTITLE: Analyzing Receipts with Prebuilt Models in Python\nDESCRIPTION: This code shows how to analyze receipts using the prebuilt-receipt model in Document Intelligence. It extracts specific receipt information such as merchant name, transaction date, item details, prices, subtotal, tax, tip, and total amount with confidence scores.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import AnalyzeResult\n\ndef _format_price(price_dict):\n    if price_dict is None:\n        return \"N/A\"\n    return \"\".join([f\"{p}\" for p in price_dict.values()])\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\n\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_intelligence_client.begin_analyze_document(\"prebuilt-receipt\", body=f, locale=\"en-US\")\nreceipts: AnalyzeResult = poller.result()\n\nif receipts.documents:\n    for idx, receipt in enumerate(receipts.documents):\n        print(f\"--------Analysis of receipt #{idx + 1}--------\")\n        print(f\"Receipt type: {receipt.doc_type if receipt.doc_type else 'N/A'}\")\n        if receipt.fields:\n            merchant_name = receipt.fields.get(\"MerchantName\")\n            if merchant_name:\n                print(\n                    f\"Merchant Name: {merchant_name.get('valueString')} has confidence: \"\n                    f\"{merchant_name.confidence}\"\n                )\n            transaction_date = receipt.fields.get(\"TransactionDate\")\n            if transaction_date:\n                print(\n                    f\"Transaction Date: {transaction_date.get('valueDate')} has confidence: \"\n                    f\"{transaction_date.confidence}\"\n                )\n            items = receipt.fields.get(\"Items\")\n            if items:\n                print(\"Receipt items:\")\n                for idx, item in enumerate(items.get(\"valueArray\")):\n                    print(f\"...Item #{idx + 1}\")\n                    item_description = item.get(\"valueObject\").get(\"Description\")\n                    if item_description:\n                        print(\n                            f\"......Item Description: {item_description.get('valueString')} has confidence: \"\n                            f\"{item_description.confidence}\"\n                        )\n                    item_quantity = item.get(\"valueObject\").get(\"Quantity\")\n                    if item_quantity:\n                        print(\n                            f\"......Item Quantity: {item_quantity.get('valueString')} has confidence: \"\n                            f\"{item_quantity.confidence}\"\n                        )\n                    item_total_price = item.get(\"valueObject\").get(\"TotalPrice\")\n                    if item_total_price:\n                        print(\n                            f\"......Total Item Price: {_format_price(item_total_price.get('valueCurrency'))} has confidence: \"\n                            f\"{item_total_price.confidence}\"\n                        )\n            subtotal = receipt.fields.get(\"Subtotal\")\n            if subtotal:\n                print(\n                    f\"Subtotal: {_format_price(subtotal.get('valueCurrency'))} has confidence: {subtotal.confidence}\"\n                )\n            tax = receipt.fields.get(\"TotalTax\")\n            if tax:\n                print(f\"Total tax: {_format_price(tax.get('valueCurrency'))} has confidence: {tax.confidence}\")\n            tip = receipt.fields.get(\"Tip\")\n            if tip:\n                print(f\"Tip: {_format_price(tip.get('valueCurrency'))} has confidence: {tip.confidence}\")\n            total = receipt.fields.get(\"Total\")\n            if total:\n                print(f\"Total: {_format_price(total.get('valueCurrency'))} has confidence: {total.confidence}\")\n        print(\"--------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Generating Image Captions with Azure ImageAnalysisClient (Python)\nDESCRIPTION: This snippet shows how to generate a human-readable caption for a local image file using the Azure ImageAnalysisClient in Python. It loads an image as bytes, invokes the synchronous analyze method with the VisualFeatures.CAPTION enum, and optionally requests gender-neutral captions. It requires the azure-ai-vision-imageanalysis package, an initialized ImageAnalysisClient, and an accessible JPEG image. Input: image bytes. Output: caption text and confidence score printed to console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Load image to analyze into a 'bytes' object\\nwith open(\\\"sample.jpg\\\", \\\"rb\\\") as f:\\n    image_data = f.read()\\n\\n# Get a caption for the image. This will be a synchronously (blocking) call.\\nresult = client.analyze(\\n    image_data=image_data,\\n    visual_features=[VisualFeatures.CAPTION],\\n    gender_neutral_caption=True,  # Optional (default is False)\\n)\\n\\n# Print caption results to the console\\nprint(\\\"Image analysis results:\\\")\\nprint(\\\" Caption:\\\")\\nif result.caption is not None:\\n    print(f\\\"   '{result.caption.text}', Confidence {result.caption.confidence:.4f}\\\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Agent using Azure AI Projects SDK in Python\nDESCRIPTION: Creates a simple AI Agent using `project_client.agents.create_agent`. It specifies the model deployment name (retrieved from the environment variable `MODEL_DEPLOYMENT_NAME`), a name for the agent ('my-assistant'), and initial instructions. This requires an initialized `project_client` from the Azure AI Projects SDK and the `os` package for environment variable access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are helpful assistant\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Re-authentication for Azure Cache for Redis with Entra ID in Python\nDESCRIPTION: Shows how to handle re-authentication for long-running applications connecting to Azure Cache for Redis with Microsoft Entra ID. It fetches an initial token using `DefaultAzureCredential`. Within a retry loop, it checks if the token needs refreshing using `_need_refreshing` based on its expiry time and re-authenticates using the `AUTH` command if necessary. If a `redis.ConnectionError` occurs, it attempts to reconnect by fetching a new token and creating a new `redis.Redis` instance. Requires `redis`, `azure-identity`, `logging`, `time`, `base64`, and `json` libraries. Requires configuration of `host` and `port` variables. The `extract_username_from_token` function is used to get the username (OID) from the token.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/azure-aad-auth-with-redis-py.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport time\nimport logging\nimport redis\nimport base64\nimport json\nfrom azure.identity import DefaultAzureCredential\n\nscope = \"https://redis.azure.com/.default\"  # The current scope is for public preview and may change for GA release.\nhost = \"\"  # Required\nport = 6380  # Required\n\ndef extract_username_from_token(token):\n    parts = token.split('.')\n    base64_str = parts[1]\n\n    if len(base64_str) % 4 == 2:\n        base64_str += \"==\"\n    elif len(base64_str) % 4 == 3:\n        base64_str += \"=\"\n\n    json_bytes = base64.b64decode(base64_str)\n    json_str = json_bytes.decode('utf-8')\n    jwt = json.loads(json_str)\n\n    return jwt['oid']\n\ndef re_authentication():\n    _LOGGER = logging.getLogger(__name__)\n    cred = DefaultAzureCredential()\n    token = cred.get_token(scope)\n    user_name = extract_username_from_token(token.token)\n    r = redis.Redis(host=host,\n                    port=port,\n                    ssl=True,   # ssl connection is required.\n                    username=user_name,\n                    password=token.token,\n                    decode_responses=True)\n    max_retry = 3\n    for index in range(max_retry):\n        try:\n            if _need_refreshing(token):\n                _LOGGER.info(\"Refreshing token...\")\n                tmp_token = cred.get_token(scope)\n                if tmp_token:\n                    token = tmp_token\n                r.execute_command(\"AUTH\", user_name, token.token)\n            r.set(\"Az:key1\", \"value1\")\n            t = r.get(\"Az:key1\")\n            print(t)\n            break\n        except redis.ConnectionError:\n            _LOGGER.info(\"Connection lost. Reconnecting.\")\n            token = cred.get_token(scope)\n            r = redis.Redis(host=host,\n                            port=port,\n                            ssl=True,   # ssl connection is required.\n                            username=user_name,\n                            password=token.token,\n                            decode_responses=True)\n        except Exception:\n            _LOGGER.info(\"Unknown failures.\")\n            break\n\n\ndef _need_refreshing(token, refresh_offset=300):\n    return not token or token.expires_on - time.time() < refresh_offset\n\nif __name__ == '__main__':\n    re_authentication()\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Role Assignments in Azure Key Vault (Python)\nDESCRIPTION: Shows how to list all current role assignments using KeyVaultAccessControlClient and iterate through them.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.administration import KeyVaultRoleScope\n\nrole_assignments = client.list_role_assignments(KeyVaultRoleScope.GLOBAL)\nfor assignment in role_assignments:\n    assert assignment.properties\n    print(f\"Role assignment name: {assignment.name}\")\n    print(f\"Principal ID associated with this assignment: {assignment.properties.principal_id}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing QuestionAnsweringClient with API Key in Python\nDESCRIPTION: This Python snippet demonstrates how to create an instance of the `QuestionAnsweringClient`. It requires the service endpoint URL and an API key (obtained from the Azure portal or CLI) wrapped in an `AzureKeyCredential` object for authentication. This client is used for querying answers from a deployed knowledge base.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nendpoint = \"https://{myaccount}.api.cognitive.microsoft.com\"\ncredential = AzureKeyCredential(\"{api-key}\")\n\nclient = QuestionAnsweringClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Digital Twin Relationships in Python\nDESCRIPTION: This snippet shows how to create multiple relationships between Azure Digital Twins using the `upsert_relationship` method. It defines a list of relationship dictionaries, each specifying the source twin ID (`$sourceId`), relationship ID (`$relationshipId`), relationship name (`$relationshipName`), target twin ID (`$targetId`), and optional custom properties. The code iterates through this list, calling `upsert_relationship` for each definition to establish the connections.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_scenario\nhospital_relationships = [\n    {\n        \"$relationshipId\": \"BuildingHasFloor\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"has\",\n        \"$targetId\": floor_twin_id,\n        \"isAccessRestricted\": False\n    },\n    {\n        \"$relationshipId\": \"BuildingIsEquippedWithHVAC\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"isEquippedWith\",\n        \"$targetId\": hvac_twin_id\n    },\n    {\n        \"$relationshipId\": \"HVACCoolsFloor\",\n        \"$sourceId\": hvac_twin_id,\n        \"$relationshipName\": \"controlsTemperature\",\n        \"$targetId\": floor_twin_id\n    },\n    {\n        \"$relationshipId\": \"FloorContainsRoom\",\n        \"$sourceId\": floor_twin_id,\n        \"$relationshipName\": \"contains\",\n        \"$targetId\": room_twin_id\n    }\n]\n\nfor relationship in hospital_relationships:\n    service_client.upsert_relationship(\n        relationship[\"$sourceId\"],\n        relationship[\"$relationshipId\"],\n        relationship\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Cosmos DB Client with AAD Authentication\nDESCRIPTION: Python code that shows how to authenticate with Azure Active Directory credentials using either ClientSecretCredential or DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\nfrom azure.identity import ClientSecretCredential, DefaultAzureCredential\n\nimport os\nurl = os.environ['ACCOUNT_URI']\ntenant_id = os.environ['TENANT_ID']\nclient_id = os.environ['CLIENT_ID']\nclient_secret = os.environ['CLIENT_SECRET']\n\n# Using ClientSecretCredential\naad_credentials = ClientSecretCredential(\n    tenant_id=tenant_id,\n    client_id=client_id,\n    client_secret=client_secret)\n\n# Using DefaultAzureCredential (recommended)\naad_credentials = DefaultAzureCredential()\n\nclient = CosmosClient(url, aad_credentials)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Function Calls for Agents in Python\nDESCRIPTION: This code snippet demonstrates how to enable automatic function calls for an Azure AI Agent using the `azure-ai-project` Python SDK. The `enable_auto_function_calls` method is called on the `agents` namespace of a `project_client` instance, passing the `toolset` containing the functions to be automatically executed. This became necessary from version 1.0.0b9 onwards due to a redesign, ensuring tool calls are executed during agent runs like `create_and_process_run` or `create_stream`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nproject_client.agents.enable_auto_function_calls(toolset=toolset)\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token and Initializing BlobServiceClient - Python\nDESCRIPTION: Presents how to generate an account-level SAS (Shared Access Signature) token for a storage account using azure-storage-blob helpers and initialize a BlobServiceClient with the generated token. Requires an account name, account key, permissions, and expiry time. The resulting client is authorized via SAS for permitted operations until expiry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.storage.blob import BlobServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\nsas_token = generate_account_sas(\n    account_name=\"<storage-account-name>\",\n    account_key=\"<account-access-key>\",\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1)\n)\n\nblob_service_client = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=sas_token)\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Operation Tracing Options in Python\nDESCRIPTION: Demonstrates passing the `tracing_options` dictionary to an SDK client method call in Python. This allows enabling/disabling tracing and adding custom attributes (like `foo: bar`) to the OpenTelemetry span specifically for that operation, leveraging the `TracingOptions` TypedDict introduced in `azure-core` 1.33.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.method(tracing_options={\"enabled\": True, \"attributes\": {\"foo\": \"bar\"}})\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in Azure Key Vault using Python\nDESCRIPTION: This snippet demonstrates how to list the properties of all secrets in the Key Vault. It uses the list_properties_of_secrets method, which doesn't include the secret values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret_properties = secret_client.list_properties_of_secrets()\n\nfor secret_property in secret_properties:\n    # the list doesn't include values or versions of the secrets\n    print(secret_property.name)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Configuration Client Library - Python/Pip\nDESCRIPTION: This snippet instructs the user to install the Azure App Configuration Python client library (azure-appconfiguration) using pip in the command line. It is essential for all sample scripts and application code interacting with Azure App Configuration from Python. Make sure that Python 3.8 or later is installed in the environment; otherwise, installation or client code may fail.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install azure-appconfiguration\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Non-Redacted Logging Enabled in Python\nDESCRIPTION: Shows how to enable non-redacted logging when initializing an Azure AI Inference client (like `ChatCompletionsClient`). This is done by setting the `logging_enable=True` argument in the client constructor or in method calls like `complete` or `embed`. Note that the log level must also be set to DEBUG for non-redaction to take effect. Use with caution due to potential security implications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n```python\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n    logging_enable=True\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Message for Agent Processing - Azure SDK for Python\nDESCRIPTION: Shows how to create a user message within a thread for agent processing. Requires an active thread and message content. Key parameters are `thread_id`, user role, and string content. The result is a new message object attached to a thread, ready for agent processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nmessage = project_client.agents.create_message(thread_id=thread.id, role=\"user\", content=\"Hello, tell me a joke\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with FunctionTool and CodeInterpreterTool using ToolSet in Python\nDESCRIPTION: Demonstrates creating an Agent configured with multiple tools (`FunctionTool` initialized with `user_functions` and `CodeInterpreterTool`) combined into a `ToolSet`. It also enables automatic function calls for the provided toolset using `enable_auto_function_calls`. The agent is created with a model name from an environment variable, a name, instructions, and the configured `toolset`. Requires `FunctionTool`, `CodeInterpreterTool`, `ToolSet`, `os` package, and `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfunctions = FunctionTool(user_functions)\ncode_interpreter = CodeInterpreterTool()\n\ntoolset = ToolSet()\ntoolset.add(functions)\ntoolset.add(code_interpreter)\n\n# To enable tool calls executed automatically\nproject_client.agents.enable_auto_function_calls(toolset=toolset)\n\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are a helpful assistant\",\n    toolset=toolset,\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Stream Analytics Management Client with DefaultAzureCredential\nDESCRIPTION: This code demonstrates how to authenticate the Azure Stream Analytics Management Client using DefaultAzureCredential. It retrieves the Azure subscription ID from an environment variable and creates a client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.streamanalytics import StreamAnalyticsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StreamAnalyticsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Loading Configurations with Connection String - Azure App Configuration Python Provider - Python\nDESCRIPTION: Demonstrates initializing the provider by passing a connection string. 'load' loads all key-value pairs with '(No Label)' from the specified App Configuration store. Requires dependency on azure.appconfiguration.provider. Replace 'your-connection-string' appropriately. Outputs a Python dictionary with configuration values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load\n\nconfig = load(connection_string=\"your-connection-string\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Operation Resource Polling Strategy in Python\nDESCRIPTION: Creates a custom polling strategy that extends OperationResourcePolling to handle a non-standard 'ValidationFailed' status by raising an HttpResponseError. This implementation customizes the get_status method to handle service-specific status responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.polling.base_polling import OperationResourcePolling, _as_json\nfrom azure.core.exceptions import HttpResponseError\n\n\nclass CustomOperationResourcePolling(OperationResourcePolling):\n    \"\"\"Implements a operation resource polling, typically from the Operation-Location header.\n    Customized to raise an exception in the case of a \"ValidationFailed\" status returned\n    from the service.\n    \"\"\"\n\n    def get_status(self, pipeline_response: \"PipelineResponseType\") -> str:\n        \"\"\"This method is called on the response for each polling request\n        and is used to extract and return the LRO status from that response.\n        In the case that the operation has failed (i.e. a non-successful status),\n        an exception should be raised. This will bring polling to an end and raise\n        the failure to the listener.\n        \"\"\"\n        status = super().get_status(pipeline_response)\n        if status.lower() == \"validationfailed\":\n            response = pipeline_response.http_response\n            body = _as_json(response)\n            raise HttpResponseError(response=response, error=body[\"error\"])\n        return status\n```\n\n----------------------------------------\n\nTITLE: Handling HTTPResponse Errors in Python\nDESCRIPTION: This snippet demonstrates how to catch and handle HttpResponseError exceptions when using the Azure IoT Hub Device Provisioning client library. It shows an example of creating an individual enrollment and handling potential errors, including checking for specific HTTP status codes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    client.individual_enrollment.create_or_update(\n        id=\"<enrollment_id>\",\n        enrollment = {\n            \"registrationId\": \"<enrollment_id>\",\n            \"attestation\": {\n                \"type\": \"symmetricKey\",\n            },\n        }\n    )\nexcept HttpResponseError as error:\n    # handle the error here\n    if error.status_code == 409:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Principal using azure-common in Python\nDESCRIPTION: This snippet demonstrates how to authenticate a service principal for Azure SDK clients using ServicePrincipalCredentials from azure-common. The code requires the azure-common library and service principal credentials (client_id, client_secret, tenant_id). The resulting credential object is used to authorize requests to Azure services in legacy SDKs. The main output is a ServicePrincipalCredentials instance initialized with the appropriate parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.credentials import ServicePrincipalCredentials\\n\\ncredential = ServicePrincipalCredentials(client_id, client_secret, tenant=tenant_id)\n```\n\n----------------------------------------\n\nTITLE: Sending a 1:N SMS Message (Python)\nDESCRIPTION: Illustrates sending the same SMS message to multiple recipients (1:N) by passing a list of phone numbers to the `to` parameter of the `send` method. Similar to the 1:1 send, it requires `from_` and `message`, and supports optional `enable_delivery_report` and `tag` parameters. The method returns a list of `SmsSendResult` objects, one for each recipient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.sms import SendSmsOptions\n\nsms_responses = sms_client.send(\n    from_=\"<from-phone-number>\",\n    to=[\"<to-phone-number-1>\", \"<to-phone-number-2>\", \"<to-phone-number-3>\"],\n    message=\"Hello World via SMS\",\n    enable_delivery_report=True, # optional property\n    tag=\"custom-tag\") # optional property\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybridcontainerservice and Identity Libraries using pip (Bash)\nDESCRIPTION: Installs the necessary Azure management library for Hybrid Container Service (`azure-mgmt-hybridcontainerservice`) and the Azure identity library (`azure-identity`) using the pip package manager. These packages are required to interact with the Azure Hybrid Container Service API via Python and authenticate requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridcontainerservice/azure-mgmt-hybridcontainerservice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hybridcontainerservice\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Data Lake Store Management Client\nDESCRIPTION: Python code for authenticating with the Azure Data Lake Store Management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-store/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.datalake.store import DataLakeStoreAccountManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataLakeStoreAccountManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentAnalysisClient with API Key - Python\nDESCRIPTION: Initializes the DocumentAnalysisClient using API key authentication. Requires the azure-core and azure-ai-formrecognizer packages. The endpoint and credential values must be substituted with actual service values. This code enables authenticated operations such as document analysis against Azure Form Recognizer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\ndocument_analysis_client = DocumentAnalysisClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Populating References in Agent Responses with Azure AI Search - Azure SDK for Python\nDESCRIPTION: This snippet illustrates how to process and enrich agent responses by fetching all messages from a thread, detecting annotation placeholders, and replacing them with the correct reference titles and URLs from Azure AI Search results. It depends on message types from the SDK, presence of url_citation_annotations, and assumes result messages are structured according to the SDK's conventions. Inputs include thread identifiers and message sequences; outputs are printed augmented agent responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Fetch and log all messages\nmessages = project_client.agents.list_messages(thread_id=thread.id, order=ListSortOrder.ASCENDING)\nfor message in messages.data:\n    if message.role == MessageRole.AGENT and message.url_citation_annotations:\n        placeholder_annotations = {\n            annotation.text: f\" [see {annotation.url_citation.title}] ({annotation.url_citation.url})\"\n            for annotation in message.url_citation_annotations\n        }\n        for message_text in message.text_messages:\n            message_str = message_text.text.value\n            for k, v in placeholder_annotations.items():\n                message_str = message_str.replace(k, v)\n            print(f\"{message.role}: {message_str}\")\n    else:\n        for message_text in message.text_messages:\n            print(f\"{message.role}: {message_text.text.value}\")\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Job Closure in Azure Communication\nDESCRIPTION: Shows how to schedule a job to close at a future time using the Azure Communication Job Router. The code includes setting a future close time and verification of the job's status after the scheduled closure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom datetime import datetime, timedelta\nfrom azure.communication.jobrouter.models import (\n    RouterJob,\n    RouterJobStatus,\n    CloseJobOptions,\n)\n\nclose_job_in_future_result = router_client.close_job(\n    \"jobId-1\",\n    accept_job_offer_result.assignment_id,\n    CloseJobOptions(\n        note = f\"Job has been closed by {router_worker.id} at {datetime.utcnow()}\",\n        close_at = datetime.utcnow() + timedelta(seconds = 2)\n    )\n)\n\nprint(f\"Job has been marked to close\")\ntime.sleep(secs = 2)\nupdate_job: RouterJob = router_client.get_job(job_id = \"jobId-1\")\nprint(f\"Updated job status: {update_job.job_status == RouterJobStatus.CLOSED}\")\n```\n\n----------------------------------------\n\nTITLE: Creating and retrieving Azure Digital Twins\nDESCRIPTION: Shows how to create a digital twin instance and retrieve it using the Azure Digital Twins SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndigital_twin_id = 'digitalTwin-' + str(uuid.uuid4())\ntemporary_twin = {\n    \"$metadata\": {\n        \"$model\": model_id\n    },\n    \"$dtId\": digital_twin_id,\n    \"Prop1\": 42\n}\n\ncreated_twin = service_client.upsert_digital_twin(digital_twin_id, temporary_twin)\nprint('Created Digital Twin:')\nprint(created_twin)\n\nget_twin = service_client.get_digital_twin(digital_twin_id)\nprint('Get Digital Twin:')\nprint(get_twin)\n```\n\n----------------------------------------\n\nTITLE: Creating RSA and EC Keys in Azure Key Vault\nDESCRIPTION: This snippet shows how to create RSA and elliptic curve keys using a KeyClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Create an RSA key\nrsa_key = key_client.create_rsa_key(\"rsa-key-name\", size=2048)\nprint(rsa_key.name)\nprint(rsa_key.key_type)\n\n# Create an elliptic curve key\nec_key = key_client.create_ec_key(\"ec-key-name\", curve=\"P-256\")\nprint(ec_key.name)\nprint(ec_key.key_type)\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Resource Metrics with MetricsClient in Python\nDESCRIPTION: This snippet shows how to query metrics for multiple Azure resources simultaneously using `MetricsClient`. It requires initializing the client with a regional endpoint (e.g., 'https://westus3.metrics.monitor.azure.com') and default credentials. The `query_resources` method is used, taking a list of resource IDs, the metric namespace, metric names, timespan, granularity, and aggregation types. The resources must be in the same region as the endpoint and the same subscription. The example queries the 'Ingress' metric with average aggregation for two storage accounts and prints the timespan from the response. Requires `azure-monitor-query`, `azure-identity`, and `azure.core.exceptions` libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.query import MetricsClient, MetricAggregationType\n\nendpoint = \"https://westus3.metrics.monitor.azure.com\"\ncredential = DefaultAzureCredential()\nclient = MetricsClient(endpoint, credential)\n\nresource_ids = [\n    \"/subscriptions/<id>/resourceGroups/<rg-name>/providers/<source>/storageAccounts/<resource-name-1>\",\n    \"/subscriptions/<id>/resourceGroups/<rg-name>/providers/<source>/storageAccounts/<resource-name-2>\"\n]\n\nresponse = client.query_resources(\n    resource_ids=resource_ids,\n    metric_namespace=\"Microsoft.Storage/storageAccounts\",\n    metric_names=[\"Ingress\"],\n    timespan=timedelta(hours=2),\n    granularity=timedelta(minutes=5),\n    aggregations=[MetricAggregationType.AVERAGE],\n)\n\nfor metrics_query_result in response:\n    print(metrics_query_result.timespan)\n```\n\n----------------------------------------\n\nTITLE: Attaching a Function to an Agent with FunctionTool - Python\nDESCRIPTION: This snippet illustrates how to wrap a function using FunctionTool, obtain tool definitions, and register them with a new agent via the Azure SDK's project_client. It assumes a definition for project_client and that the environment variable MODEL_DEPLOYMENT_NAME is set; functions.definitions should yield function metadata for agent integration. Inputs include the function and agent configuration parameters, output is a new agent instance enriched with the custom tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/FunctionTool.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfunctions = FunctionTool({fetch_weather})\n\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are a helpful assistant\",\n    tools=functions.definitions,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating an Azure Communication Room Properties (Python)\nDESCRIPTION: This snippet illustrates updating a room's validity period and PSTN dial-out property with the update_room function. It demonstrates updating the room by ID and includes exception handling for service errors. Ensure that the valid_from variable is already set, and a RoomsClient instance has been initialized.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    update_room_response = client.update_room(\n        room_id=\"id of the room to be updated\",\n        valid_from=datetime.now(),\n        valid_until=valid_from + timedelta(weeks=4),\n        pstn_dial_out_enabled=false\n    )\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e))\n\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to a File in Azure DataLake (Python)\nDESCRIPTION: Uploads binary data to a file in Azure Data Lake Storage. It first creates a `DataLakeFileClient` using a connection string, specifying the file system and file path. It then creates the file, appends the data, and flushes the data to commit it. Requires the `azure-storage-file-datalake` library and a valid connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.filedatalake import DataLakeFileClient\n\ndata = b\"abc\"\nfile = DataLakeFileClient.from_connection_string(\"my_connection_string\",\n                                                 file_system_name=\"myfilesystem\", file_path=\"myfile\")\nfile.create_file ()\nfile.append_data(data, offset=0, length=len(data))\nfile.flush_data(len(data))\n```\n\n----------------------------------------\n\nTITLE: Setting a Secret in Azure Key Vault using Python\nDESCRIPTION: This snippet demonstrates how to set a secret in Azure Key Vault using the SecretClient. It creates a new secret or updates an existing one with the given name and value.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret = secret_client.set_secret(\"secret-name\", \"secret-value\")\n\nprint(secret.name)\nprint(secret.value)\nprint(secret.properties.version)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Communication Management Client\nDESCRIPTION: Python code to authenticate with Azure using DefaultAzureCredential and create a CommunicationServiceManagementClient instance. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-mgmt-communication/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.communication import CommunicationServiceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CommunicationServiceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Logging with Decorators\nDESCRIPTION: Implementation of method-level logging using distributed_trace and monitor_with_activity decorators. Shows how to properly instrument a method for activity monitoring and distributed tracing in the Azure Gen AI SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/_telemetry/guide_to_logging.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @distributed_trace\n    @monitor_with_activity(logger, \"Project.BeginCreate\", ActivityType.PUBLICAPI)\n    def begin_create(\n        self, *, project: Project, update_dependent_resources: bool = False, **kwargs\n    ) -> LROPoller[Project]:\n        \"\"\"Create a new project. Returns the project if it already exists.\n\n        :keyword project: Project definition.\n        :paramtype project: ~azure.ai.generative.entities.project\n        :keyword update_dependent_resources: Whether to update dependent resources\n        :paramtype update_dependent_resources: boolean\n        :return: An instance of LROPoller that returns a project.\n        :rtype: ~azure.core.polling.LROPoller[~azure.ai.generative.entities.project]\n        \"\"\"\n        return self._ml_client.workspaces.begin_create(\n            workspace=project._workspace,\n            update_dependent_resources=update_dependent_resources,\n            cls=lambda workspace: Project._from_v2_workspace(workspace=workspace),\n            **kwargs,\n        )\n```\n\n----------------------------------------\n\nTITLE: Executing Logs Query with Specified Timespan in Azure Monitor using Python\nDESCRIPTION: Example of querying logs from a Log Analytics workspace with a specified timespan, including error handling and response processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pandas as pd\nfrom datetime import datetime, timezone\nfrom azure.monitor.query import LogsQueryClient, LogsQueryResult\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\nquery = \"\"\"AppRequests | take 5\"\"\"\n\nstart_time=datetime(2021, 7, 2, tzinfo=timezone.utc)\nend_time=datetime(2021, 7, 4, tzinfo=timezone.utc)\n\ntry:\n    response = client.query_workspace(\n        workspace_id=os.environ['LOG_WORKSPACE_ID'],\n        query=query,\n        timespan=(start_time, end_time)\n        )\n    if response.status == LogsQueryStatus.SUCCESS:\n        data = response.tables\n    else:\n        # LogsQueryPartialResult\n        error = response.partial_error\n        data = response.partial_data\n        print(error)\n\n    for table in data:\n        df = pd.DataFrame(data=table.rows, columns=table.columns)\n        print(df)\nexcept HttpResponseError as err:\n    print(\"something fatal happened\")\n    print(err)\n```\n\n----------------------------------------\n\nTITLE: Batch Reverse Geocoding with Azure Maps Search Python SDK\nDESCRIPTION: This code shows how to perform batch reverse geocoding of multiple coordinate pairs using the Azure Maps Search client. It sends a batch request with multiple sets of coordinates and processes the response to extract formatted addresses for each location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.maps.search import MapsSearchClient\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef reverse_geocode_batch():\n    maps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_search_client.get_reverse_geocoding_batch({\n              \"batchItems\": [\n                {\"coordinates\": [-122.349309, 47.620498]},\n                {\"coordinates\": [-122.138679, 47.630356]},\n              ],\n            },)\n\n        if result.get('batchItems', False):\n            for idx, item in enumerate(result['batchItems']):\n                features = item['features']\n                if features:\n                    props = features[0].get('properties', {})\n                    if props and props.get('address', False):\n                        print(\n                            props['address'].get('formattedAddress', f'No formatted address for item {idx + 1} found'))\n                    else:\n                        print(f\"Address {idx + 1} is None\")\n                else:\n                    print(f\"No features available for item {idx + 1}\")\n        else:\n            print(\"No batch items found\")\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\n\nif __name__ == '__main__':\n   reverse_geocode_batch()\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Response Error Exception in Azure Core SDK (Python)\nDESCRIPTION: This snippet implements the HttpResponseError exception, inheriting from AzureError to handle HTTP errors when non-success status codes are returned from services. It stores the raw response, reason, and status_code, and attempts to parse the OData v4 error if present. The constructor accepts an optional error message, a response object, and additional keyword arguments. This exception enables detailed error reporting for HTTP protocol errors and is typically used in pipeline implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HttpResponseError(AzureError):\n    def __init__(self, message=None, response=None, **kwargs):\n        self.reason = None\n        self.response = response\n        if response:\n            self.reason = response.reason\n            self.status_code = response.status_code\n        self.error = self._parse_odata_body(ODataV4Format, response)  # type: Optional[ODataV4Format]\n        if self.error:\n            message = str(self.error)\n        else:\n            message = message or \"Operation returned an invalid status '{}'\".format(\n                self.reason\n            )\n\n        super(HttpResponseError, self).__init__(message=message, **kwargs)\n\n```\n\n----------------------------------------\n\nTITLE: Querying Documents using SearchClient in Python\nDESCRIPTION: Executes a search operation for documents matching the term 'luxury' using the previously configured SearchClient. Iterates over results and prints the hotel ID and hotel name of each match. Requires an initialized SearchClient and a populated index. Input is 'luxury' as search_text; output is printed hotel details.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresults = client.search(search_text=\\\"luxury\\\")\\n\\nfor result in results:\\n    print(\\\"{}: {})\\\".format(result[\\\"hotelId\\\"], result[\\\"hotelName\\\"]))\n```\n\n----------------------------------------\n\nTITLE: Asking a Follow-up Question using QuestionAnsweringClient in Python\nDESCRIPTION: This Python snippet shows how to ask a follow-up question based on a previous answer from the knowledge base. It uses the `get_answers` method of the `QuestionAnsweringClient`, providing the new question and context via `KnowledgeBaseAnswerContext`. The context includes the `qna_id` of the previous answer (`previous_answer.qna_id`) to maintain the conversational flow.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\nfrom azure.ai.language.questionanswering import models\n\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\nclient = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))\n\noutput = client.get_answers(\n    question=\"How long should charging take?\",\n    answer_context=models.KnowledgeBaseAnswerContext(\n        previous_qna_id=previous_answer.qna_id\n    ),\n    project_name=\"FAQ\",\n    deployment_name=\"production\"\n)\nfor candidate in output.answers:\n    print(\"({}) {}\".format(candidate.confidence, candidate.answer))\n    print(\"Source: {}\".format(candidate.source))\n\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Settings with Filters in Python\nDESCRIPTION: This example shows how to use client.list_configuration_settings with key_filter and tags_filter arguments to enumerate configuration settings. The result is iterable and printed for each setting. Effective for bulk retrieval with filter criteria.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nconfig_settings = client.list_configuration_settings(key_filter=\"MyKey*\", tags_filter=[\"my tag1=my tag1 value\"])\nfor config_setting in config_settings:\n    print(config_setting)\n```\n\n----------------------------------------\n\nTITLE: Authenticating ServiceBusClient with Azure Active Directory - Azure Service Bus - Python\nDESCRIPTION: Shows how to authenticate the ServiceBusClient using Azure Active Directory in the v7 SDK with the azure-identity library. Dependencies include azure-identity and a service principal or managed identity for DefaultAzureCredential. Requires fully_qualified_namespace and emits a ServiceBusClient bound to authenticated credentials. This method is unavailable in v0.50.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with Azure Active Directory in V7\nfrom azure.identity import DefaultAzureCredential\nservicebus_client = ServiceBusClient(fully_qualified_namespace, credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Role Assignment in Azure Key Vault (Python)\nDESCRIPTION: Shows how to fetch an existing role assignment using KeyVaultAccessControlClient with the specified scope and unique name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfetched_assignment = client.get_role_assignment(scope=scope, name=role_assignment.name)\nassert fetched_assignment.properties\nprint(f\"Role assignment for principal {fetched_assignment.properties.principal_id} fetched successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Notification Hubs Client\nDESCRIPTION: Code to authenticate with Azure Notification Hubs using DefaultAzureCredential and environment variables for client configuration. Requires AZURE_SUBSCRIPTION_ID, AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/notificationhubs/azure-mgmt-notificationhubs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.notificationhubs import NotificationHubsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NotificationHubsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Performing Cryptographic Operations with Azure Key Vault\nDESCRIPTION: Demonstrates how to use CryptographyClient to perform encryption and decryption operations using an RSA key from Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nfrom azure.keyvault.keys.crypto import CryptographyClient, EncryptionAlgorithm\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\nkey = key_client.get_key(\"key-name\")\ncrypto_client = CryptographyClient(key, credential=credential)\nplaintext = b\"plaintext\"\n\nresult = crypto_client.encrypt(EncryptionAlgorithm.rsa_oaep_256, plaintext)\ndecrypted = crypto_client.decrypt(result.algorithm, result.ciphertext)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Healthcare Entities using Azure TextAnalyticsClient in Python\nDESCRIPTION: This code snippet details extracting and relating healthcare entities from clinical documents using Azure's healthcare entity analysis API (long-running operation). It initializes the client, submits multiple patient medication statements, and iterates through returned healthcare entities and their relationships, showing entity details and medication dosage connections. Requires AzureKeyCredential, TextAnalyticsClient, and environment variables set. Input is a set of clinical note strings; output is detailed console prints of entities and relations. API version v3.1 or later is required, and the operation may take time due to its long-running nature.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nimport typing\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.textanalytics import TextAnalyticsClient, HealthcareEntityRelation\\n\\nendpoint = os.environ[\\\"AZURE_LANGUAGE_ENDPOINT\\\"]\\nkey = os.environ[\\\"AZURE_LANGUAGE_KEY\\\"]\\n\\ntext_analytics_client = TextAnalyticsClient(\\n    endpoint=endpoint,\\n    credential=AzureKeyCredential(key),\\n)\\n\\ndocuments = [\\n    \\\"\\\"\\\"\\n    Patient needs to take 100 mg of ibuprofen, and 3 mg of potassium. Also needs to take\\n    10 mg of Zocor.\\n    \\\"\\\"\\\",\\n    \\\"\\\"\\\"\\n    Patient needs to take 50 mg of ibuprofen, and 2 mg of Coumadin.\\n    \\\"\\\"\\\"\\n]\\n\\npoller = text_analytics_client.begin_analyze_healthcare_entities(documents)\\nresult = poller.result()\\n\\ndocs = [doc for doc in result if not doc.is_error]\\n\\nprint(\"Let's first visualize the outputted healthcare result:\")\\nfor doc in docs:\\n    for entity in doc.entities:\\n        print(f\"Entity: {entity.text}\")\\n        print(f\"...Normalized Text: {entity.normalized_text}\")\\n        print(f\"...Category: {entity.category}\")\\n        print(f\"...Subcategory: {entity.subcategory}\")\\n        print(f\"...Offset: {entity.offset}\")\\n        print(f\"...Confidence score: {entity.confidence_score}\")\\n        if entity.data_sources is not None:\\n            print(\"...Data Sources:\")\\n            for data_source in entity.data_sources:\\n                print(f\"......Entity ID: {data_source.entity_id}\")\\n                print(f\"......Name: {data_source.name}\")\\n        if entity.assertion is not None:\\n            print(\"...Assertion:\")\\n            print(f\"......Conditionality: {entity.assertion.conditionality}\")\\n            print(f\"......Certainty: {entity.assertion.certainty}\")\\n            print(f\"......Association: {entity.assertion.association}\")\\n    for relation in doc.entity_relations:\\n        print(f\"Relation of type: {relation.relation_type} has the following roles\")\\n        for role in relation.roles:\\n            print(f\"...Role '{role.name}' with entity '{role.entity.text}'\")\\n    print(\"------------------------------------------\")\\n\\nprint(\"Now, let's get all of medication dosage relations from the documents\")\\ndosage_of_medication_relations = [\\n    entity_relation\\n    for doc in docs\\n    for entity_relation in doc.entity_relations if entity_relation.relation_type == HealthcareEntityRelation.DOSAGE_OF_MEDICATION\\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting Correlated Log with Azure Monitor in Python\nDESCRIPTION: This example shows how to include context correlation information in logging telemetry using OpenTelemetry and Azure Monitor. It sets up both a tracer and a logger, and demonstrates logging inside and outside of a span.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport logging\n\nfrom opentelemetry import trace\nfrom opentelemetry._logs import set_logger_provider\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\nfrom opentelemetry.sdk.trace import TracerProvider\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\nlogger_provider = LoggerProvider()\nset_logger_provider(logger_provider)\n\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\n\n# Attach LoggingHandler to namespaced logger\nhandler = LoggingHandler()\nlogger = logging.getLogger(__name__)\nlogger.addHandler(handler)\nlogger.setLevel(logging.NOTSET)\n\nlogger.info(\"INFO: Outside of span\")\nwith tracer.start_as_current_span(\"foo\"):\n    logger.warning(\"WARNING: Inside of span\")\nlogger.error(\"ERROR: After span\")\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Settings Asynchronously with Filters in Python\nDESCRIPTION: This snippet demonstrates listing configuration settings asynchronously using filters (`key_filter`, `tags_filter`) with the async client. It calls `list_configuration_settings` (which returns an async iterator) and then iterates through the results using an `async for` loop. Requires an initialized async `client` from `azure.appconfiguration.aio`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nconfig_settings = client.list_configuration_settings(key_filter=\"MyKey*\", tags_filter=[\"my tag1=my tag1 value\"])\nasync for config_setting in config_settings:\n    print(config_setting)\n```\n\n----------------------------------------\n\nTITLE: Integrating Azure Event Hubs with Schema Registry for Sending in Python\nDESCRIPTION: This snippet shows how to integrate Azure Event Hubs with Schema Registry to send an EventData object. It encodes the content and sets the appropriate content type using JsonSchemaEncoder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventhub import EventHubProducerClient, EventData\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.jsonencoder import JsonSchemaEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_JSON_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\nschema_id = os.environ['PERSON_JSON_SCHEMA_ID']\nDRAFT2020_12_SCHEMA_IDENTIFIER = \"https://json-schema.org/draft/2020-12/schema\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\njson_schema_encoder = JsonSchemaEncoder(client=schema_registry_client, validate=DRAFT2020_12_SCHEMA_IDENTIFIER)\n\neventhub_producer = EventHubProducerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    eventhub_name=eventhub_name\n)\n\nwith eventhub_producer, json_schema_encoder:\n    event_data_batch = eventhub_producer.create_batch()\n    dict_content = {\"name\": \"Bob\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = json_schema_encoder.encode(dict_content, schema_id=schema_id, message_type=EventData)\n    event_data_batch.add(event_data)\n    eventhub_producer.send_batch(event_data_batch)\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Completions with ChatCompletionsClient - Python\nDESCRIPTION: This snippet demonstrates how to perform streaming chat completions by passing stream=True to the complete method. It creates a ChatCompletionsClient, sends a strongly-typed sequence of messages, and iterates over streaming updates, displaying output as it arrives. Requires Python client support for streaming responses. Inputs include the message sequence and optionally stream=True; outputs are processed incrementally, with usage statistics printed at the end of the stream.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.ai.inference.models import SystemMessage, UserMessage\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.complete(\n    stream=True,\n    messages=[\n        SystemMessage(\"You are a helpful assistant.\"),\n        UserMessage(\"Give me 5 good reasons why I should exercise every day.\"),\n    ],\n)\n\nfor update in response:\n    if update.choices and update.choices[0].delta:\n        print(update.choices[0].delta.content or \"\", end=\"\", flush=True)\n    if update.usage:\n        print(f\"\\n\\nToken usage: {update.usage}\")\n\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AstroMgmtClient Authentication - Python\nDESCRIPTION: Demonstrates how to authenticate and instantiate the AstroMgmtClient using Azure Active Directory credentials in Python. It imports DefaultAzureCredential (which reads environment variables for authentication) and initializes the client with the provided subscription ID. Key environment variables required include AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID. Outputs a client object authenticated for resource management operations. Ensure the environment is configured with the correct credentials before running.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/astro/azure-mgmt-astro/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.astro import AstroMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AstroMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating ShareServiceClient with Account Key in Python\nDESCRIPTION: Python code to create a ShareServiceClient instance using the storage account URL and account access key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareServiceClient\nservice = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=\"<account_access_key>\")\n```\n\n----------------------------------------\n\nTITLE: Submitting Transactional Batch Operations - Azure Data Tables - Python\nDESCRIPTION: This code sample shows how to submit a group of operations—upsert, delete, update, and create—using the 'submit_transaction' method of the 'TableClient' in the 'azure-data-tables' Python SDK. Operations are specified as tuples including the operation name, the entity, and optional keyword arguments. Dependencies include the 'azure-data-tables' package and a properly configured 'table_client'. Parameters are the list of operations, where each item defines the transactional action to perform on specific entities. Outputs are not directly returned; operations are processed as a transaction, which may raise exceptions on failure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntable_client = TableClient(...)\\n\\n# operations is a list of tuples formatted as:\\n# (\\\"operation\\\", entity, optional keyword args for the operation)\\noperations = [\\n    (\\\"upsert\\\", entity1),\\n    (\\\"delete\\\", entity2),\\n    (\\\"update\\\", entity3),\\n    (\\\"create\\\", entity4),\\n    (\\\"update\\\", entity5, {\\\"mode\\\": \\\"replace\\\"}),\\n]\\n\\ntable_client.submit_transaction(operations)\n```\n\n----------------------------------------\n\nTITLE: Listing Translation Operations with Document Translation Client\nDESCRIPTION: This snippet demonstrates how to list and enumerate all translation operations that have been submitted for a resource. It displays operation details including status, creation time, document counts, and character charges.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\n\nclient = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\noperations = client.list_translation_statuses()\n\nfor operation in operations:\n    print(f\"ID: {operation.id}\")\n    print(f\"Status: {operation.status}\")\n    print(f\"Created on: {operation.created_on}\")\n    print(f\"Last updated on: {operation.last_updated_on}\")\n    print(f\"Total number of operations on documents: {operation.documents_total_count}\")\n    print(f\"Total number of characters charged: {operation.total_characters_charged}\")\n\n    print(\"\\nOf total documents...\")\n    print(f\"{operation.documents_failed_count} failed\")\n    print(f\"{operation.documents_succeeded_count} succeeded\")\n    print(f\"{operation.documents_canceled_count} canceled\\n\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Events Asynchronously to Event Hubs in Python\nDESCRIPTION: This snippet demonstrates asynchronous event publishing using `azure.eventhub.aio.EventHubProducerClient`. The `create_batch` helper function asynchronously creates an `EventDataBatch` and fills it with `EventData` messages until the maximum size is reached. The `send` function initializes the async producer client, calls `create_batch`, and then asynchronously sends the batch using `client.send_batch`. It utilizes `asyncio` for running the asynchronous operations. Dependencies: `asyncio`, `azure.eventhub.aio.EventHubProducerClient`, `azure.eventhub.EventData`, `azure.identity.aio.DefaultAzureCredential`. Placeholder values for connection details must be replaced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport asyncio\nfrom azure.eventhub.aio import EventHubProducerClient   # The package name suffixed with \".aio\" for async\nfrom azure.eventhub import EventData\nfrom azure.identity.aio import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nasync def create_batch(client):\n    event_data_batch = await client.create_batch()\n    can_add = True\n    while can_add:\n        try:\n            event_data_batch.add(EventData('Message inside EventBatchData'))\n        except ValueError:\n            can_add = False  # EventDataBatch object reaches max_size.\n    return event_data_batch\n\nasync def send():\n    client = EventHubProducerClient(\n        fully_qualified_namespace=fully_qualified_namespace,\n        eventhub_name=eventhub_name,\n        credential=DefaultAzureCredential(),\n    )\n    batch_data = await create_batch(client)\n    async with client:\n        await client.send_batch(batch_data)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(send())\n```\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Operations in Transactional Batch with Azure Cosmos DB (Python)\nDESCRIPTION: Shows how to use condition-based operations in a batch by including if_match_etag, if_none_match_etag for concurrency control, and filter_predicate for conditional patching.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nbatch_operations = [\n        (\"replace\", (item_id, item_body), {\"if_match_etag\": etag}),\n        (\"patch\", (item_id, operations), {\"filter_predicate\": filter_predicate, \"if_none_match_etag\": etag}),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Cache Management Dependencies - Bash\nDESCRIPTION: These bash commands install the required packages to use the Azure Storage Cache Management SDK client in Python environments. The first line installs the main management package, and the second installs the Azure Identity library for authentication. Python 3.8 or greater should be pre-installed. Inputs are package names; the output is an updated local environment with the dependencies installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagecache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-storagecache\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Analysis Client with API Key Authentication in Python\nDESCRIPTION: Code snippet demonstrating how to create a synchronous ImageAnalysisClient using API key authentication. It retrieves endpoint and key values from environment variables and creates the client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.vision.imageanalysis import ImageAnalysisClient\nfrom azure.ai.vision.imageanalysis.models import VisualFeatures\nfrom azure.core.credentials import AzureKeyCredential\n\n# Set the values of your computer vision endpoint and computer vision key\n# as environment variables:\ntry:\n    endpoint = os.environ[\"VISION_ENDPOINT\"]\n    key = os.environ[\"VISION_KEY\"]\nexcept KeyError:\n    print(\"Missing environment variable 'VISION_ENDPOINT' or 'VISION_KEY'\")\n    print(\"Set them before running this sample.\")\n    exit()\n\n# Create an Image Analysis client for synchronous operations,\n# using API key authentication\nclient = ImageAnalysisClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TableServiceClient from Connection String in Python\nDESCRIPTION: Shows how to create a TableServiceClient using a connection string for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\n\nconnection_string = \"AccountName=<my_account_name>;AccountKey=<my_account_key>;EndpointSuffix=<endpoint_suffix>\"\nwith TableServiceClient.from_connection_string(conn_str=connection_string) as table_service_client:\n    properties = table_service_client.get_service_properties()\n    print(f\"{properties}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Device Update Client in Python\nDESCRIPTION: This snippet initializes the DeviceUpdateClient using environment variables for endpoint and instance information, along with a default Azure credential for authentication. Dependencies include the azure-identity and azure-deviceupdate SDK Python packages and the presence of required environment variables. Inputs are endpoint and instance information, and the output is a ready-to-use client object for sending requests to the Device Update service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ImportUpdate/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nendpoint = os.environ[\"DEVICEUPDATE_ENDPOINT\"]\ninstance = os.environ[\"DEVICEUPDATE_INSTANCE_ID\"]\nclient = DeviceUpdateClient(credential=DefaultAzureCredential(), endpoint=endpoint, instance_id=instance)\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Azure Service Bus Queue via Streaming (Python)\nDESCRIPTION: This snippet demonstrates how to continuously receive messages from an Azure Service Bus queue using the `ServiceBusReceiver` as a generator. It initializes a `ServiceBusClient` with credentials, obtains a queue receiver with a specified `max_wait_time`, and iterates through incoming messages. Messages are received in `PEEK_LOCK` mode by default, requiring lock renewal for long processing times.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient\nfrom azure.identity import DefaultAzureCredential\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    # max_wait_time specifies how long the receiver should wait with no incoming messages before stopping receipt.\n    # Default is None; to receive forever.\n    with client.get_queue_receiver(queue_name, max_wait_time=30) as receiver:\n        for msg in receiver:  # ServiceBusReceiver instance is a generator.\n            print(str(msg))\n            # If it is desired to halt receiving early, one can break out of the loop here safely.\n```\n```\n\n----------------------------------------\n\nTITLE: Analyzing Receipts with FormRecognizerClient in Azure SDK for Python 3.1.x\nDESCRIPTION: This code demonstrates how to analyze receipts using the FormRecognizerClient in version 3.1.x of the Azure SDK. It extracts information like receipt type, merchant name, transaction date, items, subtotal, tax, tip, and total amount from receipt documents.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith open(path_to_sample_forms, \"rb\") as f:\n    poller = form_recognizer_client.begin_recognize_receipts(receipt=f, locale=\"en-US\")\nreceipts = poller.result()\n\nfor idx, receipt in enumerate(receipts):\n    print(\"--------Recognizing receipt #{}--------\".format(idx+1))\n    receipt_type = receipt.fields.get(\"ReceiptType\")\n    if receipt_type:\n        print(\"Receipt Type: {} has confidence: {}\".format(receipt_type.value, receipt_type.confidence))\n    merchant_name = receipt.fields.get(\"MerchantName\")\n    if merchant_name:\n        print(\"Merchant Name: {} has confidence: {}\".format(merchant_name.value, merchant_name.confidence))\n    transaction_date = receipt.fields.get(\"TransactionDate\")\n    if transaction_date:\n        print(\"Transaction Date: {} has confidence: {}\".format(transaction_date.value, transaction_date.confidence))\n    if receipt.fields.get(\"Items\"):\n        print(\"Receipt items:\")\n        for idx, item in enumerate(receipt.fields.get(\"Items\").value):\n            print(\"...Item #{}\".format(idx+1))\n            item_name = item.value.get(\"Name\")\n            if item_name:\n                print(\"......Item Name: {} has confidence: {}\".format(item_name.value, item_name.confidence))\n            item_quantity = item.value.get(\"Quantity\")\n            if item_quantity:\n                print(\"......Item Quantity: {} has confidence: {}\".format(item_quantity.value, item_quantity.confidence))\n            item_price = item.value.get(\"Price\")\n            if item_price:\n                print(\"......Individual Item Price: {} has confidence: {}\".format(item_price.value, item_price.confidence))\n            item_total_price = item.value.get(\"TotalPrice\")\n            if item_total_price:\n                print(\"......Total Item Price: {} has confidence: {}\".format(item_total_price.value, item_total_price.confidence))\n    subtotal = receipt.fields.get(\"Subtotal\")\n    if subtotal:\n        print(\"Subtotal: {} has confidence: {}\".format(subtotal.value, subtotal.confidence))\n    tax = receipt.fields.get(\"Tax\")\n    if tax:\n        print(\"Tax: {} has confidence: {}\".format(tax.value, tax.confidence))\n    tip = receipt.fields.get(\"Tip\")\n    if tip:\n        print(\"Tip: {} has confidence: {}\".format(tip.value, tip.confidence))\n    total = receipt.fields.get(\"Total\")\n    if total:\n        print(\"Total: {} has confidence: {}\".format(total.value, total.confidence))\n    print(\"--------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Certificate from Azure Key Vault using Python\nDESCRIPTION: This snippet shows how to delete a certificate from Azure Key Vault and wait for the deletion to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ndeleted_certificate_poller = certificate_client.begin_delete_certificate(\"cert-name\")\n\ndeleted_certificate = deleted_certificate_poller.result()\nprint(deleted_certificate.name)\nprint(deleted_certificate.deleted_on)\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Logs Query with Multiple Requests in Python\nDESCRIPTION: Complete example of implementing batch logs queries using LogsBatchQuery objects. Includes credential setup, query configuration, and result handling with error checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom datetime import timedelta, datetime, timezone\nimport pandas as pd\nfrom azure.monitor.query import LogsQueryClient, LogsBatchQuery, LogsQueryStatus\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\nrequests = [\n    LogsBatchQuery(\n        query=\"AzureActivity | summarize count()\",\n        timespan=timedelta(hours=1),\n        workspace_id=os.environ['LOG_WORKSPACE_ID']\n    ),\n    LogsBatchQuery(\n        query= \"\"\"bad query\"\"\",\n        timespan=timedelta(days=1),\n        workspace_id=os.environ['LOG_WORKSPACE_ID']\n    ),\n    LogsBatchQuery(\n        query= \"\"\"let Weight = 92233720368547758;\n        range x from 1 to 3 step 1\n        | summarize percentilesw(x, Weight * 100, 50)\"\"\",\n        workspace_id=os.environ['LOG_WORKSPACE_ID'],\n        timespan=(datetime(2021, 6, 2, tzinfo=timezone.utc), datetime(2021, 6, 5, tzinfo=timezone.utc)), # (start, end)\n        include_statistics=True\n    ),\n]\nresults = client.query_batch(requests)\n\nfor res in results:\n    if res.status == LogsQueryStatus.PARTIAL:\n        ## this will be a LogsQueryPartialResult\n        print(res.partial_error)\n        for table in res.partial_data:\n            df = pd.DataFrame(table.rows, columns=table.columns)\n            print(df)\n    elif res.status == LogsQueryStatus.SUCCESS:\n        ## this will be a LogsQueryResult\n        table = res.tables[0]\n        df = pd.DataFrame(table.rows, columns=table.columns)\n        print(df)\n    else:\n        # this will be a LogsQueryError\n        print(res.message)\n```\n\n----------------------------------------\n\nTITLE: Writing Synchronous Unit Tests for Table Service Validation in Python\nDESCRIPTION: This example provides synchronous unit tests for Azure Table Service entities using the azure.data.tables library and pytest. The tests validate invalid table name constraints and type constraints for EntityProperty. Inputs include fake credentials; outputs are ValueError exceptions for invalid operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom azure.data.tables import TableServiceClient, EntityProperty, EdmType\n\nclass TestTablesUnitTest(object):\n\n    def test_invalid_table_name(self):\n        account_name = 'fake_account_name'\n        account_key = 'fake_account_key1234567890'\n        tsc = TableServiceClient(\n            account_url='https://{}.table.core.windows.net/'.format(account_name),\n            credential=account_key\n        )\n\n        invalid_table_name = \"bad_table_name\" # table name cannot have an '_' character\n\n        with pytest.raises(ValueError):\n            tsc.create_table(invalid_table_name)\n\n    def test_entity_properties(self):\n        ep = EntityProperty('abc', EdmType.STRING)\n        ep = EntityProperty(b'abc', EdmType.BINARY)\n        ep = EntityProperty(1.2345, EdmType.DOUBLE)\n\n        with pytest.raises(ValueError):\n            ep = EntityProperty(2 ** 75, EdmType.Int64) # Tables can only handle integers up to 2 ^ 63\n```\n\n----------------------------------------\n\nTITLE: Sending Read Receipt\nDESCRIPTION: Shows how to send a read receipt for a specific message in a chat thread.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncontent='hello world'\nsend_message_result = chat_thread_client.send_message(content)\nsend_message_result_id = send_message_result.id\nchat_thread_client.send_read_receipt(message_id=send_message_result_id)\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Digital Twins\nDESCRIPTION: Demonstrates how to query digital twins using the Azure Digital Twins Query Store language and iterate over the results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = 'SELECT * FROM digitaltwins'\nquery_result = service_client.query_twins(query_expression)\nprint('DigitalTwins:')\nfor twin in query_result:\n    print(twin)\n```\n\n----------------------------------------\n\nTITLE: Receiving and Managing Events from Azure Event Grid Namespace Subscription in Python\nDESCRIPTION: This snippet demonstrates receiving CloudEvents from an Azure Event Grid namespace subscription using `EventGridConsumerClient`. It initializes the client with endpoint, credentials, namespace topic, and subscription name. It receives a batch of events, iterates through them, extracts data and broker properties (like lock tokens), and categorizes lock tokens for acknowledge, release, or reject actions based on event data. It also shows how to renew locks and finally performs the acknowledge, release, and reject operations on the respective event batches using their lock tokens.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport uuid\nimport datetime as dt\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.eventgrid import EventGridConsumerClient\n\nkey = os.environ[\"EVENTGRID_KEY\"]\nendpoint = os.environ[\"EVENTGRID_ENDPOINT\"]\ntopic_name = os.environ[\"EVENTGRID_TOPIC_NAME\"]\nsub_name = os.environ[\"EVENTGRID_EVENT_SUBSCRIPTION_NAME\"]\n\ncredential = AzureKeyCredential(key)\nclient = EventGridConsumerClient(endpoint, credential, namespace_topic=topic_name, subscription=sub_name)\n\nevents = client.receive(max_events=4)\n\n# Initialize lists to hold lock tokens for different actions\nrelease_events = []\nacknowledge_events = []\nreject_events = []\nall_lock_tokens = [] # To store all lock tokens for renewal\n\nfor detail in events.value:\n    data = detail.event.data\n    broker_properties = detail.broker_properties\n    lock_token = broker_properties.lock_token\n    all_lock_tokens.append(lock_token) # Add token for renewal\n\n    # Assuming 'data' contains instructions like \"release\", \"acknowledge\", etc.\n    # This part needs adaptation based on actual event data structure and logic\n    if isinstance(data, str) and data == \"release\": # Example condition\n        release_events.append(lock_token)\n    elif isinstance(data, str) and data == \"acknowledge\": # Example condition\n        acknowledge_events.append(lock_token)\n    else:\n        reject_events.append(lock_token)\n\n# Renew all Locks if needed and if any events were received\nif all_lock_tokens:\n    renew_result = client.renew_locks(\n        lock_tokens=all_lock_tokens,\n    )\n\n# Perform actions only if there are tokens for them\nif release_events:\n    release_result = client.release(\n        lock_tokens=release_events,\n    )\n\nif acknowledge_events:\n    ack_result = client.acknowledge(\n        lock_tokens=acknowledge_events,\n    )\n\nif reject_events:\n    reject_result = client.reject(\n        lock_tokens=reject_events,\n    )\n```\n\n----------------------------------------\n\nTITLE: Modifying Container Properties (TTL) with Azure Cosmos DB SDK for Python\nDESCRIPTION: This snippet demonstrates how to modify the properties of an existing Azure Cosmos DB container, specifically setting the default Time-To-Live (TTL) for items to 10 seconds. It initializes the `CosmosClient`, gets the database and container clients, and then uses `database.replace_container()` specifying the container object, its partition key, and the desired `default_ttl`. Finally, it reads the container properties again to display the updated TTL value. Requires `azure-cosmos`, `PartitionKey`, `os`, and `json`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos import CosmosClient, PartitionKey\nimport os\nimport json\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\ndatabase.replace_container(\n    container,\n    partition_key=PartitionKey(path=\"/productName\"),\n    default_ttl=10,\n)\n# Display the new TTL setting for the container\ncontainer_props = container.read()\nprint(json.dumps(container_props['defaultTtl']))\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group and Storage Account - Azure CLI (Bash)\nDESCRIPTION: Provides Azure CLI commands to create a new resource group and storage account using az. These prerequisites must be created before using storage services. Key parameters include resource group name (my-resource-group), account name (my-storage-account-name), and region (westus2). Output is success info or error messages, run in a Bash shell with Azure CLI installed and authenticated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n----------------------------------------\n\nTITLE: Declaring NamedTuples and Type-Annotated Functions in Python\nDESCRIPTION: Demonstrates defining a NamedTuple Point with float attributes x and y, as well as a function bounding_box accepting a list of such Points, enforcing precise type usage. Requires Python's typing module. Inputs are lists of Points, and the function is annotated to return None but core logic is omitted for brevity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import NamedTuple, List\\n\\n\\nclass Point(NamedTuple):\\n    x: float\\n    y: float\\n\\n\\ndef bounding_box(points: List[Point]) -> None: ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Analysis Client with Entra ID Authentication in Python\nDESCRIPTION: Code snippet demonstrating how to create a synchronous ImageAnalysisClient using Entra ID authentication with DefaultAzureCredential. It retrieves the endpoint from environment variables and initializes the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.vision.imageanalysis import ImageAnalysisClient\nfrom azure.ai.vision.imageanalysis.models import VisualFeatures\nfrom azure.identity import DefaultAzureCredential\n\n# Set the value of your computer vision endpoint as environment variable:\ntry:\n    endpoint = os.environ[\"VISION_ENDPOINT\"]\nexcept KeyError:\n    print(\"Missing environment variable 'VISION_ENDPOINT'.\")\n    print(\"Set it before running this sample.\")\n    exit()\n\n# Create an Image Analysis client for synchronous operations,\n# using Entra ID authentication\nclient = ImageAnalysisClient(\n    endpoint=endpoint,\n    credential=DefaultAzureCredential(exclude_interactive_browser_credential=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ConversationAnalysisClient with API Key - Python\nDESCRIPTION: Instantiates an Azure CLU ConversationAnalysisClient using the resource endpoint and API key for authentication. Requires the azure-core and azure-ai-language-conversations packages to be installed. Inputs include the endpoint URL and an active API key; outputs a configured client for performing conversation analysis.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api-key>\")\nclient = ConversationAnalysisClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Initializing BlobServiceClient with Azure AD Token Credential - Python\nDESCRIPTION: Demonstrates obtaining an Azure Active Directory token using the DefaultAzureCredential from azure-identity and initializing BlobServiceClient with it. Requires environment variables AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET to be set and corresponding permissions granted in AAD for Azure Storage. Returns an authenticated client for further blob operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.storage.blob import BlobServiceClient\ntoken_credential = DefaultAzureCredential()\n\nblob_service_client = BlobServiceClient(\n    account_url=\"https://<my_account_name>.blob.core.windows.net\",\n    credential=token_credential\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Too Many Redirects Exception in Azure Core SDK (Python)\nDESCRIPTION: This snippet defines TooManyRedirectsError, a specialized exception for handling excessive HTTP redirects. It inherits from HttpResponseError and adds a history attribute to record redirect attempts. The error message is fixed and indentifies when the redirect policy threshold is exceeded. It is constructed with the redirect history, variadic args, and kwargs for context, facilitating troubleshooting of client network behavior.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TooManyRedirectsError(HttpResponseError):\n    def __init__(self, history, *args, **kwargs):\n        self.history = history\n        message = \"Reached maximum redirect attempts.\"\n        super(TooManyRedirectsError, self).__init__(message, *args, **kwargs)\n\n```\n\n----------------------------------------\n\nTITLE: Adding or Updating Room Participants (Python)\nDESCRIPTION: This snippet details adding or updating participants in an existing room by providing a list of RoomParticipant instances, each with their CommunicationUserIdentifier and optional roles. It shows how to use add_or_update_participants and handle service-level errors. Requires a valid room_id, initialized client, and constructed participants list.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparticipants = []\nparticipants.append(RoomParticipant(communication_identifier=CommunicationUserIdentifier(\"<ACS User MRI identity 1>\")))\nparticipants.append(RoomParticipant(communication_identifier=CommunicationUserIdentifier(\"<ACS User MRI identity 2>\"), role=ParticipantRole.ATTENDEE))\nparticipants.append(RoomParticipant(communication_identifier=CommunicationUserIdentifier(\"<ACS User MRI identity 3>\"), role=ParticipantRole.CONSUMER))\ntry:\n    response = client.add_or_update_participants(\n        room_id=\"id of the room to be updated\",\n        participants=participants\n    )\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e))\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Digital Twins in Python\nDESCRIPTION: Demonstrates how to query digital twins using the Azure Digital Twins Query Store language. It uses the DigitalTwinsClient.query_twins() method to execute the query.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = 'SELECT * FROM digitaltwins'\nquery_result = service_client.query_twins(query_expression)\nprint('DigitalTwins:')\nfor twin in query_result:\n    print(twin)\n```\n\n----------------------------------------\n\nTITLE: Implementing Implicit Certificate Rotation with a Custom Credential in Python\nDESCRIPTION: Defines a custom credential class `RotatingCertificateCredential` that handles implicit certificate rotation. It checks the modification time of the certificate file on disk before each token request using `refresh_certificate`. If the file has been updated, it re-initializes the internal `CertificateCredential` instance with the new certificate. This approach is suitable when certificate updates happen externally to the application process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/client_certificate_credential.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nclass RotatingCertificateCredential(object):\n    def __init__(self, tenant_id, client_id, certificate_path=None, **kwargs):\n        self._tenant_id = tenant_id\n        self._client_id = client_id\n        self._certificate_path = certificate_path\n        self._certificate_last_modified = time.time()\n        self.refresh_certificate()\n\n    def get_token(self, *scopes, **kwargs):\n        self.refresh_certificate()\n        return self._credential.get_token(*scopes, **kwargs)\n\n    def refresh_certificate():\n        certificate_last_modified = os.path.getmtime(self._certificate_path)\n        if self._certificate_last_modified < certificate_last_modified:\n            self._certificate_last_modified = certificate_last_modified\n            self._credential = CertificateCredential(tenant_id, client_id, self._certificate_path, **kwargs)\n```\n```\n\n----------------------------------------\n\nTITLE: Async Credential Usage and Cleanup - Azure Identity - Python\nDESCRIPTION: Illustrates how to use and properly close asynchronous credentials from azure.identity.aio. Each async credential instance should be either closed via await credential.close() or managed in an 'async with' context. Ensure an async transport such as aiohttp is installed (dependency). Proper cleanup of credential resources is important in long-running applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\n\n# call close when the credential is no longer needed\ncredential = DefaultAzureCredential()\n...\nawait credential.close()\n\n# alternatively, use the credential as an async context manager\ncredential = DefaultAzureCredential()\nasync with credential:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Simulator\nDESCRIPTION: Example showing simulator initialization and execution with custom configuration and conversation turns\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation.simulator import Simulator\nmodel_config = {\n    \"azure_endpoint\": os.environ.get(\"AZURE_ENDPOINT\"),\n    \"azure_deployment\": os.environ.get(\"AZURE_DEPLOYMENT_NAME\"),\n    \"api_version\": os.environ.get(\"AZURE_API_VERSION\"),\n}\ncustom_simulator = Simulator(model_config=model_config)\noutputs = asyncio.run(custom_simulator(\n    target=callback,\n    conversation_turns=[\n        [\n            \"What should I know about the public gardens in the US?\",\n        ],\n        [\n            \"How do I simulate data against LLMs\",\n        ],\n    ],\n    max_conversation_turns=2,\n))\nwith open(\"simulator_output.jsonl\", \"w\") as f:\n    for output in outputs:\n        f.write(output.to_eval_qr_json_lines())\n```\n\n----------------------------------------\n\nTITLE: Creating ChangeFeedClient from Connection String - Python\nDESCRIPTION: This snippet illustrates initializing a ChangeFeedClient using a storage connection string via the class method from_connection_string. The conn_str parameter is the Azure Storage account's connection string. This method simplifies authentication without manually handling URLs or secrets. Outputs a ChangeFeedClient instance ready for change feed operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\nservice = ChangeFeedClient.from_connection_string(conn_str=\"my_connection_string\")\n```\n\n----------------------------------------\n\nTITLE: Generating Blob SAS Token Using azure-storage-blob Python SDK\nDESCRIPTION: The functionality previously known as generate_blob_shared_access_signature is replaced by generate_blob_sas in v12 of the Azure SDK for Python. Instead of calling it as a method on a class, developers must import generate_blob_sas directly from azure.storage.blob. The required dependencies include the azure-storage-blob package, and the method parameters typically specify account credentials, container and blob names, permission scope, and an expiration. It outputs a SAS token string for secure, time-limited blob access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import generate_blob_sas\n# Usage example:\n# sas_token = generate_blob_sas(account_name, container_name, blob_name, account_key=account_key, ...)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Chat Thread Participants\nDESCRIPTION: Shows how to list participants in a chat thread with pagination options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nchat_participants = chat_thread_client.list_participants(results_per_page=5, skip=5)\nfor chat_participant_page in chat_participants.by_page():\n    for chat_participant in chat_participant_page:\n        print(\"ChatParticipant: \", chat_participant)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Face SDK in Python\nDESCRIPTION: This snippet demonstrates how to set up logging for the Azure Face SDK. It configures basic logging information at INFO level and enables detailed DEBUG level logging for specific operations using the logging_enable argument.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\nfrom azure.ai.vision.face import FaceClient\nfrom azure.core.credentials import AzureKeyCredential\n\nlogging.basicConfig(level=logging.DEBUG,\n                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    stream=sys.stdout)\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\nface_client = FaceClient(endpoint, credential)\n\nface.detect(..., logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Logic App Agent Integration\nDESCRIPTION: Demonstrates how to create an AI agent that integrates with Azure Logic Apps for workflow automation. Includes setup of Logic App tool registration and function creation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Create the project client\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n# Extract subscription and resource group from the project scope\nsubscription_id = project_client.scope[\"subscription_id\"]\nresource_group = project_client.scope[\"resource_group_name\"]\n\n# Logic App details\nlogic_app_name = \"<LOGIC_APP_NAME>\"\ntrigger_name = \"<TRIGGER_NAME>\"\n\n# Create and initialize AzureLogicAppTool utility\nlogic_app_tool = AzureLogicAppTool(subscription_id, resource_group)\nlogic_app_tool.register_logic_app(logic_app_name, trigger_name)\nprint(f\"Registered logic app '{logic_app_name}' with trigger '{trigger_name}'\")\n\n# Create the specialized \"send_email_via_logic_app\" function for your agent tools\nsend_email_func = create_send_email_function(logic_app_tool, logic_app_name)\n\n# Prepare the function tools for the agent\nfunctions_to_use: Set = {\n    fetch_current_datetime,\n    send_email_func,  # This references the AzureLogicAppTool instance via closure\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Authority Host Environment Variable in Shell\nDESCRIPTION: This shell command sets the AZURE_AUTHORITY_HOST environment variable to configure multiple credentials for authentication to a specific cloud authority.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nAZURE_AUTHORITY_HOST=https://login.partner.microsoftonline.cn\n```\n\n----------------------------------------\n\nTITLE: Performing a Full Key Backup in Azure Key Vault (Python)\nDESCRIPTION: Shows how to perform a full key backup using KeyVaultBackupClient with a specified container URL and managed identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nCONTAINER_URL = os.environ[\"CONTAINER_URL\"]\n\nbackup_result: KeyVaultBackupResult = client.begin_backup(CONTAINER_URL, use_managed_identity=True).result()\nprint(f\"Azure Storage Blob URL of the backup: {backup_result.folder_url}\")\n```\n\n----------------------------------------\n\nTITLE: Using the Async Azure Cosmos DB Client with a Context Manager in Python\nDESCRIPTION: This snippet showcases the recommended way to use the asynchronous Azure Cosmos DB client (`azure.cosmos.aio.CosmosClient`) using an `async with` statement. This approach acts as a context manager, automatically handling the initialization (`__aenter__`) and closing (`__aexit__`) of the client. Inside the context, it gets database and container clients and performs asynchronous item upserts. Requires `azure.cosmos.aio` and `os`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos.aio import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nDATABASE_NAME = 'testDatabase'\nCONTAINER_NAME = 'products'\n\nasync def create_products():\n    async with CosmosClient(URL, credential=KEY) as client: # the with statement will automatically initialize and close the async client\n        database = client.get_database_client(DATABASE_NAME)\n        container = database.get_container_client(CONTAINER_NAME)\n        for i in range(10):\n            await container.upsert_item({\n                    'id': 'item{0}'.format(i),\n                    'productName': 'Widget',\n                    'productModel': 'Model {0}'.format(i)\n                }\n            )\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Qumulo Management Client with Azure Identity - Python\nDESCRIPTION: Initializes the QumuloMgmtClient from the azure-mgmt-qumulo SDK in Python using DefaultAzureCredential for authentication. Requires 'azure-identity' and 'azure-mgmt-qumulo' packages to be installed and the environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be set. This code creates a client to make API calls to Azure Qumulo services and works for Python 3.8+. Input is credentials read from environment variables, and output is an authenticated QumuloMgmtClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/qumulo/azure-mgmt-qumulo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\\nfrom azure.mgmt.qumulo import QumuloMgmtClient\\nimport os\\n\\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\\nclient = QumuloMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Paloaltonetworksngfw Management Client Library for Python\nDESCRIPTION: This snippet shows how to install the Azure Paloaltonetworksngfw Management Client Library and Azure Identity library using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/paloaltonetworks/azure-mgmt-paloaltonetworksngfw/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-paloaltonetworksngfw\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Instance and Identity Libraries using Pip (Bash)\nDESCRIPTION: This snippet shows how to install the necessary Python packages (`azure-mgmt-containerinstance` and `azure-identity`) using the pip package installer. These packages are required to interact with Azure Container Instances and handle authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerinstance/azure-mgmt-containerinstance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-containerinstance\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Publishing Telemetry Message to Digital Twin Component via Azure SDK - Python\nDESCRIPTION: Publishes a telemetry message to a specific component of a digital twin. Requires instantiated service_client, digital twin id, target component name, and a JSON string payload. Input parameters are the digital twin id, component name, and the telemetry payload; no output is returned.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ncomponent_name = \"<COMPONENT_NAME>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_component_telemetry(\n    digita_twin_id,\n    component_name,\n    telemetry_payload\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Local Wheel for Azure AI Inference (Bash)\nDESCRIPTION: Steps to build a local wheel for the Azure AI Inference package and install it. This is useful for testing against a locally built version of the library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install wheel\npip install -r dev_requirements.txt\npython setup.py bdist_whee\npip install dist\\azure_ai_inference-1.0.0b2-py3-none-any.whl --user --force-reinstall\n```\n\n----------------------------------------\n\nTITLE: Making Ranged Queries in Ledger\nDESCRIPTION: Shows how to perform ranged queries between transaction IDs to retrieve multiple ledger entries. Includes creating sample entries and iterating through results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"First message\"}\n)\nfirst_transaction_id = post_poller.result()[\"transactionId\"]\n\nfor i in range(10):\n    ledger_client.create_ledger_entry(\n        {\"contents\": f\"Message {i}\"}\n    )\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Last message\"}\n)\nlast_transaction_id = post_poller.result()[\"transactionId\"]\n\nranged_result = ledger_client.list_ledger_entries(\n    from_transaction_id=first_transaction_id,\n    to_transaction_id=last_transaction_id,\n)\nfor entry in ranged_result:\n    print(f'Contents at {entry[\"transactionId\"]}: {entry[\"contents\"]}')\n```\n\n----------------------------------------\n\nTITLE: Setting Logs Query Timeout in Python\nDESCRIPTION: Example showing how to set server timeout for logs queries. Demonstrates configuring timeout up to 10 minutes (600 seconds).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom datetime import timedelta\nfrom azure.monitor.query import LogsQueryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\nresponse = client.query_workspace(\n    os.environ['LOG_WORKSPACE_ID'],\n    \"range x from 1 to 10000000000 step 1 | count\",\n    timespan=timedelta(days=1),\n    server_timeout=600 # sets the timeout to 10 minutes\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Enum with Case-Insensitive MetaClass (Python)\nDESCRIPTION: This snippet shows how to use the CaseInsensitiveEnumMeta metaclass from Azure Core to create case-insensitive enums. The MyCustomEnum class demonstrates support for string enums where lookup is not sensitive to casing, improving API usability and reducing bugs from inconsistent string usage. Requires the Enum class from Python's enum module and CaseInsensitiveEnumMeta from azure.core.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom azure.core import CaseInsensitiveEnumMeta\n\nclass MyCustomEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    FOO = 'foo'\n    BAR = 'bar'\n\n```\n\n----------------------------------------\n\nTITLE: Encoding Data with Avro Schema\nDESCRIPTION: Demonstrates how to encode content using the AvroEncoder with a predefined Avro schema. The example shows two approaches: encoding directly to EventData and encoding to a dictionary that can be converted to EventData.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\nfrom azure.eventhub import EventData\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nname = \"example.avro.User\"\nformat = \"Avro\"\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nschema_registry_client.register_schema(group_name, name, definition, format)\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\nwith encoder:\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema=definition, message_type=EventData)\n\n    # OR\n\n    message_content_dict = encoder.encode(dict_content, schema=definition)\n    event_data = EventData.from_message_content(message_content_dict[\"content\"], message_content_dict[\"content_type\"])\n```\n\n----------------------------------------\n\nTITLE: Specifying Tenant ID for AzureCliCredential in Python (Beta)\nDESCRIPTION: The ability to specify a `tenant_id` for the `AzureCliCredential` was added as a beta feature in version 1.11.0b3. This allows targeting a specific tenant when authenticating via the Azure CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n`tenant_id` for `AzureCliCredential`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Redis Management SDK with pip\nDESCRIPTION: Commands to install the Azure Redis Management client library and Azure Identity packages using pip. These are the required packages for managing Azure Redis Cache resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redis/azure-mgmt-redis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-redis\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating SearchClient with API Key Authentication\nDESCRIPTION: Python code snippet showing how to create a SearchClient instance using API key authentication, requiring an endpoint, index name, and API key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\n\nservice_endpoint = os.environ[\"AZURE_SEARCH_SERVICE_ENDPOINT\"]\nindex_name = os.environ[\"AZURE_SEARCH_INDEX_NAME\"]\nkey = os.environ[\"AZURE_SEARCH_API_KEY\"]\n\nsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n```\n\n----------------------------------------\n\nTITLE: Streaming Anomaly Detection Implementation\nDESCRIPTION: Implementation of streaming anomaly detection for real-time data analysis.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector.models import *\n\n\nSUBSCRIPTION_KEY = os.environ[\"ANOMALY_DETECTOR_KEY\"]\nANOMALY_DETECTOR_ENDPOINT = os.environ[\"ANOMALY_DETECTOR_ENDPOINT\"]\nTIME_SERIES_DATA_PATH = os.path.join(\"sample_data\", \"request-data.csv\")\nclient = AnomalyDetectorClient(ANOMALY_DETECTOR_ENDPOINT, AzureKeyCredential(SUBSCRIPTION_KEY))\n\nseries = []\ndata_file = pd.read_csv(TIME_SERIES_DATA_PATH, header=None, encoding=\"utf-8\", parse_dates=[0])\nfor index, row in data_file.iterrows():\n    series.append(TimeSeriesPoint(timestamp=row[0], value=row[1]))\n\nrequest = UnivariateDetectionOptions(\n    series=series,\n    granularity=TimeGranularity.DAILY,\n)\nprint(\"Detecting the anomaly status of the latest data point.\")\n\nif response.is_anomaly:\n    print(\"The latest point is detected as anomaly.\")\nelse:\n    print(\"The latest point is not detected as anomaly.\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Analytical Store Enabled Container in Azure Cosmos DB\nDESCRIPTION: This code demonstrates creating a container with Analytical Store enabled for reporting, BI, AI, and Advanced Analytics with Azure Synapse Link. The analytical_storage_ttl parameter controls data retention.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nCONTAINER_NAME = 'products'\ntry:\n    container = database.create_container(id=CONTAINER_NAME, partition_key=PartitionKey(path=\"/productName\"),analytical_storage_ttl=-1)\nexcept exceptions.CosmosResourceExistsError:\n    container = database.get_container_client(CONTAINER_NAME)\nexcept exceptions.CosmosHttpResponseError:\n    raise\n```\n\n----------------------------------------\n\nTITLE: Initializing DataLakeServiceClient in Python\nDESCRIPTION: Creates an instance of the `DataLakeServiceClient` using the storage account URL and a credential object. This client is the entry point for interacting with the Data Lake Storage service at the account level. Replace `<my-storage-account-name>` with the actual account name and `credential` with a valid credential object (e.g., SAS token, account key, or token credential from `azure.identity`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.filedatalake import DataLakeServiceClient\n\nservice = DataLakeServiceClient(account_url=\"https://<my-storage-account-name>.dfs.core.windows.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Defining the HttpResponseError Exception Class in Python\nDESCRIPTION: This snippet defines the `HttpResponseError` class, which inherits from `AzureError`. It represents errors arising from HTTP responses with non-success status codes. It stores the HTTP response object, reason phrase, status code, and attempts to parse an ODataV4 error format from the response body. If parsing fails or no response is provided, it constructs a default error message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HttpResponseError(AzureError):\n    def __init__(self, message=None, response=None, **kwargs):\n        self.reason = None\n        self.response = response\n        if response:\n            self.reason = response.reason\n            self.status_code = response.status_code\n        self.error = self._parse_odata_body(ODataV4Format, response)  # type: Optional[ODataV4Format]\n        if self.error:\n            message = str(self.error)\n        else:\n            message = message or \"Operation returned an invalid status '{}'\".format(\n                self.reason\n            )\n\n        super(HttpResponseError, self).__init__(message=message, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using Async API with Azure Key Vault Secrets in Python\nDESCRIPTION: This code demonstrates how to use the async API for Azure Key Vault Secrets. It shows proper resource management using async context managers for both the client and credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client and credential are no longer needed\nclient = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.AsyncExitStack can help)\nclient = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Querying Entities in Azure Tables with Python\nDESCRIPTION: Shows how to query entities from an Azure table using OData filter expressions. The example retrieves entities with a specific PartitionKey and displays all key-value pairs for each entity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableClient\nmy_filter = \"PartitionKey eq 'RedMarker'\"\ntable_client = TableClient.from_connection_string(conn_str=\"<connection_string>\", table_name=\"myTable\")\nentities = table_client.query_entities(my_filter)\nfor entity in entities:\n    for key in entity.keys():\n        print(f\"Key: {key}, Value: {entity[key]}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Interactive Authentication with DefaultAzureCredential - Azure Identity - Python\nDESCRIPTION: Shows how to enable interactive browser authentication as a fallback for DefaultAzureCredential in the Azure Identity library. Pass 'exclude_interactive_browser_credential=False' as a keyword argument to the credential constructor to allow the use of system browser-based authentication. Requires azure-identity library version supporting this parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDefaultAzureCredential(exclude_interactive_browser_credential=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Model-Specific Parameters to Chat Completions in Python\nDESCRIPTION: Demonstrates how to include additional, non-standard parameters in the request body when calling the `complete` method of `ChatCompletionsClient`. This is achieved by passing a dictionary to the `model_extras` argument. The library automatically adds the `extra-parameters: pass-through` HTTP header when `model_extras` is used.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python\nresponse = client.complete(\n    messages=[\n        SystemMessage(\"You are a helpful assistant.\"),\n        UserMessage(\"How many feet are in a mile?\"),\n    ],\n    model_extras={\"key1\": \"value1\", \"key2\": \"value2\"},  # Optional. Additional parameters to pass to the model.\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Cosmos DB with Parameterized Query\nDESCRIPTION: This code shows how to perform parameterized queries on a Cosmos DB container by passing a dictionary of parameters to the query_items method, which helps prevent SQL injection and improves performance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndiscontinued_items = container.query_items(\n    query='SELECT * FROM products p WHERE p.productModel = @model',\n    parameters=[\n        dict(name='@model', value='Model 7')\n    ],\n    enable_cross_partition_query=True\n)\nfor item in discontinued_items:\n    print(json.dumps(item, indent=True))\n```\n\n----------------------------------------\n\nTITLE: Downloading a Blob Asynchronously using BlobClient in Python\nDESCRIPTION: This snippet shows how to download a blob asynchronously using the BlobClient. It initializes the async client, downloads the blob data, and writes it to a local file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.aio import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./BlockDestination.txt\", \"wb\") as my_blob:\n    stream = await blob.download_blob()\n    data = await stream.readall()\n    my_blob.write(data)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Question Answering Project using AuthoringClient in Python\nDESCRIPTION: This Python example demonstrates using the `AuthoringClient` to create a new Question Answering project. It initializes the client with endpoint and key, then calls `create_project` specifying the project name and various options like description, language, multilingual support, and default answer settings. It prints details of the created project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\n# get service secrets\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\n# create client\nclient = AuthoringClient(endpoint, AzureKeyCredential(key))\nwith client:\n\n    # create project\n    project_name = \"IssacNewton\"\n    project = client.create_project(\n        project_name=project_name,\n        options={\n            \"description\": \"biography of Sir Issac Newton\",\n            \"language\": \"en\",\n            \"multilingualResource\": True,\n            \"settings\": {\n                \"defaultAnswer\": \"no answer\"\n            }\n        })\n\n    print(\"view created project info:\")\n    print(\"\\tname: {}\".format(project[\"projectName\"]))\n    print(\"\\tlanguage: {}\".format(project[\"language\"]))\n    print(\"\\tdescription: {}\".format(project[\"description\"]))\n\n```\n\n----------------------------------------\n\nTITLE: Accepting a Job Offer for a Worker (Python)\nDESCRIPTION: Finds a specific `RouterJobOffer` from a worker's list of offers based on the `job_id`. It then extracts the `offer_id` and uses `router_client.accept_job_offer` to accept the offer on behalf of the worker. Finally, it prints confirmation and verifies the job status has changed to `Assigned` by fetching the updated job details. Requires an initialized `JobRouterClient` and a `RouterWorker` object (`router_worker`) containing active offers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    RouterJobOffer,\n    AcceptJobOfferResult,\n    RouterJobStatus\n)\n\n# fetching the offer id\njob_offer: RouterJobOffer = [offer for offer in router_worker.offers if offer.job_id == \"jobId-1\"][0]\noffer_id = job_offer.offer_id\n\n# accepting the offer sent to `worker-1`\naccept_job_offer_result: AcceptJobOfferResult = router_client.accept_job_offer(\n    worker_id = \"worker-1\",\n    offer_id = offer_id\n)\n\nprint(f\"Offer: {job_offer.offer_id} sent to worker: {router_worker.id} has been accepted\")\nprint(f\"Job has been assigned to worker: {router_worker.id} with assignment: {accept_job_offer_result.assignment_id}\")\n\n# verify job assignment is populated when querying job\nupdated_job = router_client.get_job(job_id = \"jobId-1\")\nprint(f\"Job assignment has been successful: {updated_job.job_status == RouterJobStatus.Assigned and accept_job_offer_result.assignment_id in updated_job.assignments}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Digital Twins Client in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Azure Digital Twins client using AzureCliCredential. It also imports necessary libraries and sets up the digital twin URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureCliCredential\nfrom azure.digitaltwins.core import DigitalTwinsClient\n\n# using yaml instead of \nimport yaml\nimport uuid\n\n# using altair instead of matplotlib for vizuals\nimport numpy as np\nimport pandas as pd\n\n# you will get this from the ADT resource at portal.azure.com\nyour_digital_twin_url = \"home-test-twin.api.wcus.digitaltwins.azure.net\"\n\nazure_cli = AzureCliCredential()\nservice_client = DigitalTwinsClient(\n    your_digital_twin_url, azure_cli)\nservice_client\n```\n\n----------------------------------------\n\nTITLE: Updating Credential Handling in Azure SDK for Python (v1.0.0b1)\nDESCRIPTION: Version 1.0.0b1 introduced a breaking change in credential handling. The older `azure.common.credentials` and `msrestazure.azure_active_directory` instances are no longer supported. Users must migrate to classes provided by the `azure-identity` library. Additionally, the client constructor parameter `credentials` has been renamed to `credential`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Deprecated:\n# azure.common.credentials\n# msrestazure.azure_active_directory\n\n# Use instead:\n# azure-identity classes (e.g., from azure.identity import DefaultAzureCredential)\n\n# Parameter rename:\n# Old: MyClient(credentials, ...)\n# New: MyClient(credential, ...)\n```\n\n----------------------------------------\n\nTITLE: Sending a Single CloudEvent to Azure Event Grid Namespace Topic in Python\nDESCRIPTION: This snippet demonstrates how to publish a single CloudEvent to a specified Azure Event Grid namespace topic. It initializes an `EventGridPublisherClient` using an endpoint, an `AzureKeyCredential`, and the target namespace topic name retrieved from environment variables. A `CloudEvent` object is created with specific type, source, and data, and then sent using the client's `send` method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.messaging import CloudEvent\nfrom azure.eventgrid import EventGridPublisherClient\n\nkey = os.environ[\"EVENTGRID_KEY\"]\nendpoint = os.environ[\"EVENTGRID_ENDPOINT\"]\ntopic_name = os.environ[\"EVENTGRID_TOPIC_NAME\"]\n\n\nevent = CloudEvent(\n    type=\"Azure.Sdk.Sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team\": \"azure-sdk\"}\n)\n\ncredential = AzureKeyCredential(key)\nclient = EventGridPublisherClient(endpoint, credential, namespace_topic=topic_name)\n\nclient.send(event)\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Logging for Azure Monitor Query SDK in Python\nDESCRIPTION: Code snippet demonstrating how to enable detailed logging for the Azure Monitor Query client library to troubleshoot issues. It configures a logger for the 'azure.monitor.query' SDK with DEBUG level and console output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom azure.monitor.query import LogsQueryClient\n\n# Create a logger for the 'azure.monitor.query' SDK\nlogger = logging.getLogger('azure.monitor.query')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nclient = LogsQueryClient(credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring EnvironmentCredential Certificate Password via Environment Variable\nDESCRIPTION: Added support for the `AZURE_CLIENT_CERTIFICATE_PASSWORD` environment variable in `EnvironmentCredential`. This allows the credential to use a certificate whose private key is password-protected, reading the password from this environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_CLIENT_CERTIFICATE_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from Azure File Share\nDESCRIPTION: Shows how to download files from Azure File Share using ShareFileClient. Provides examples for both synchronous and asynchronous download operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"DEST_FILE\", \"wb\") as file_handle:\n    data = file_client.download_file()\n    data.readinto(file_handle)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare.aio import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"DEST_FILE\", \"wb\") as file_handle:\n    data = await file_client.download_file()\n    await data.readinto(file_handle)\n```\n\n----------------------------------------\n\nTITLE: Exporting Exceptions Log with Azure Monitor in Python\nDESCRIPTION: This example shows how to export exception telemetry using the AzureMonitorLogExporter. It sets up a logger and demonstrates two ways of logging exceptions: using logger.exception() and logger.error() with stack_info and exc_info parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport logging\n\nfrom opentelemetry._logs import (\n    get_logger_provider,\n    set_logger_provider,\n)\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\nset_logger_provider(LoggerProvider())\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nget_logger_provider().add_log_record_processor(BatchLogRecordProcessor(exporter))\n\n# Attach LoggingHandler to namespaced logger\nhandler = LoggingHandler()\nlogger = logging.getLogger(__name__)\nlogger.addHandler(handler)\nlogger.setLevel(logging.NOTSET)\n\n# The following code will generate two pieces of exception telemetry\n# that are identical in nature\ntry:\n    val = 1 / 0\n    print(val)\nexcept ZeroDivisionError:\n    logger.exception(\"Error: Division by zero\")\n\ntry:\n    val = 1 / 0\n    print(val)\nexcept ZeroDivisionError:\n    logger.error(\"Error: Division by zero\", stack_info=True, exc_info=True)\n```\n\n----------------------------------------\n\nTITLE: Attaching Files to an Existing Vector Store for Agent File Search in Python\nDESCRIPTION: Illustrates how to add files to an existing vector store for agent file search. It first creates an empty vector store, then creates a `VectorStoreDataSource` using an asset URI (presumably obtained from `project_client.upload_file`), and adds this data source to the vector store using `create_vector_store_file_batch_and_poll`. Finally, it initializes a `FileSearchTool` using the updated vector store ID. Requires `VectorStoreDataSource`, `VectorStoreDataSourceAssetType`, `FileSearchTool`, and `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Create a vector store with no file and wait for it to be processed\nvector_store = project_client.agents.create_vector_store_and_poll(data_sources=[], name=\"sample_vector_store\")\nprint(f\"Created vector store, vector store ID: {vector_store.id}\")\n\nds = VectorStoreDataSource(asset_identifier=asset_uri, asset_type=VectorStoreDataSourceAssetType.URI_ASSET)\n# Add the file to the vector store or you can supply data sources in the vector store creation\nvector_store_file_batch = project_client.agents.create_vector_store_file_batch_and_poll(\n    vector_store_id=vector_store.id, data_sources=[ds]\n)\nprint(f\"Created vector store file batch, vector store file batch ID: {vector_store_file_batch.id}\")\n\n# Create a file search tool\nfile_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n```\n\n----------------------------------------\n\nTITLE: Session Lock Renewal in Azure Service Bus\nDESCRIPTION: Demonstrates automatic session lock renewal using AutoLockRenewer for session-enabled queues. Maintains session lock for up to 300 seconds while processing messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import ServiceBusClient, AutoLockRenewer\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nsession_queue_name = os.environ['SERVICE_BUS_SESSION_QUEUE_NAME']\nsession_id = os.environ['SERVICE_BUS_SESSION_ID']\n\n# Can also be called via \"with AutoLockRenewer() as renewer\" to automate closing.\nrenewer = AutoLockRenewer()\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(session_queue_name, session_id=session_id) as receiver:\n        renewer.register(receiver, receiver.session, max_lock_renewal_duration=300) # Duration for how long to maintain the lock for, in seconds.\n\n        for msg in receiver.receive_messages():\n            # Do your application logic here\n            receiver.complete_message(msg)\nrenewer.close()\n```\n\n----------------------------------------\n\nTITLE: Exchanging Azure AD Token for Communication Identity Token (Teams User) - Python\nDESCRIPTION: Illustrates converting an Azure Active Directory token of a Teams user into a Communication Identity access token. Uses get_token_for_teams_user, which requires the existing AAD token, a client_id, and the user's object id. Prerequisites include Azure AD integration and a properly configured CommunicationIdentityClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nidentity_client.get_token_for_teams_user(aad_token, client_id, user_object_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Secrets and Azure Identity Packages\nDESCRIPTION: This snippet shows how to install the required packages using pip. It installs azure-keyvault-secrets for secret management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-secrets azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure EventHubs Checkpoint Store Package - Python\nDESCRIPTION: This snippet shows the pip command to install the Azure EventHubs Checkpoint Store async package for Python. It requires the user to have Python with pip installed. The command installs the azure-eventhub-checkpointstoreblob-aio package and its dependencies, enabling usage of blob-based checkpointing in asynchronous Event Hubs clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n$ pip install azure-eventhub-checkpointstoreblob-aio\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Configuration Client via Connection String in Python\nDESCRIPTION: This Python snippet creates an AzureAppConfigurationClient instance using a connection string typically acquired from environment variables or Azure CLI. It imports required classes and expects the 'APPCONFIGURATION_CONNECTION_STRING' environment variable to be set. The client enables all configuration read/write operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\nCONNECTION_STRING = os.environ[\"APPCONFIGURATION_CONNECTION_STRING\"]\n\n# Create app config client\nclient = AzureAppConfigurationClient.from_connection_string(CONNECTION_STRING)\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Number Capabilities (Python)\nDESCRIPTION: Updates the calling and SMS capabilities for a specified purchased phone number using begin_update_phone_number_capabilities. The capabilities must be one of NONE, INBOUND, OUTBOUND, or INBOUND_OUTBOUND. Changes are processed asynchronously with polling support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npoller = phone_numbers_client.begin_update_phone_number_capabilities(\n    \"<phone number>\",\n    PhoneNumberCapabilityType.OUTBOUND,\n    PhoneNumberCapabilityType.INBOUND_OUTBOUND,\n    polling = True\n)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Operations in Azure Question Answering (Python)\nDESCRIPTION: This snippet demonstrates how to perform asynchronous operations using the Azure Question Answering Python SDK. It creates an asynchronous QuestionAnsweringClient and uses it to get answers to a question.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.aio import QuestionAnsweringClient\n\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\nclient = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))\n\noutput = await client.get_answers(\n    question=\"How long should my Surface battery last?\",\n    project_name=\"FAQ\",\n    deployment_name=\"production\"\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with User-Assigned Managed Identity using Object ID in Python\nDESCRIPTION: This code snippet shows how to authenticate using a user-assigned managed identity with an object ID. It uses ManagedIdentityCredential to create a SecretClient for Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential(identity_config={\"object_id\": \"managed_identity_object_id\"})\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n----------------------------------------\n\nTITLE: Deleting and Purging Secrets Using Poller with Azure Key Vault Python SDK\nDESCRIPTION: This snippet shows how to initiate an asynchronous secret deletion using begin_delete_secret, wait for its completion via the poller, and then purge the deleted secret with purge_deleted_secret. This pattern ensures that purge is not called prematurely, avoiding potential errors. Requires an instance of secret_client and a valid secret name; all actions are performed against Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndeleted_secret_poller = secret_client.begin_delete_secret(name=\\\"secret-name\\\")\\ndeleted_secret = deleted_secret_poller.result()\\n\\ndeleted_secret_poller.wait()\\nsecret_client.purge_deleted_secret(name=\\\"secret-name\\\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to IoT Hub with EventHubConsumerClient (Python)\nDESCRIPTION: This snippet shows how to manually connect to an IoT Hub's built-in Event Hubs endpoint using the EventHubConsumerClient. It demonstrates how to create a client using the connection string for the IoT Hub's Event Hub-compatible endpoint and retrieve partition IDs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.eventhub import EventHubConsumerClient\n\nconnection_str = 'Endpoint=sb://my-iothub-namespace-[uid].servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-iot-hub-name'\nconsumer_group = '<< CONSUMER GROUP >>'\nclient = EventHubConsumerClient.from_connection_string(connection_str, consumer_group)\n\npartition_ids = client.get_partition_ids()\n```\n\n----------------------------------------\n\nTITLE: Instantiating QueueServiceClient with Shared Key (Python 12.X)\nDESCRIPTION: Creates a QueueServiceClient using account URL and credentials in version 12 of the Azure Storage Queue SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueServiceClient\n\nservice = QueueServiceClient(account_url=\"https://<my-storage-account-name>.queue.core.windows.net/\", credential={'account_name': \"<storage-account-name>\", 'account_key': \"<account-access-key>\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureMonitorLogExporter with Default Connection String\nDESCRIPTION: Creates an instance of AzureMonitorLogExporter that automatically retrieves the connection string from the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\nexporter = AzureMonitorLogExporter()\n```\n\n----------------------------------------\n\nTITLE: Translating Multiple Inputs to Different Target Languages with Document Translation\nDESCRIPTION: This snippet shows how to translate documents from multiple source containers to multiple target containers in different languages (French, Arabic, Spanish). It demonstrates how to configure complex translation jobs with multiple source-target pairs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient, DocumentTranslationInput, TranslationTarget\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\nsource_container_url_1 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_1\"]\nsource_container_url_2 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_2\"]\ntarget_container_url_fr = os.environ[\"AZURE_TARGET_CONTAINER_URL_FR\"]\ntarget_container_url_ar = os.environ[\"AZURE_TARGET_CONTAINER_URL_AR\"]\ntarget_container_url_es = os.environ[\"AZURE_TARGET_CONTAINER_URL_ES\"]\n\nclient = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n\npoller = client.begin_translation(\n    inputs=[\n        DocumentTranslationInput(\n            source_url=source_container_url_1,\n            targets=[\n                TranslationTarget(target_url=target_container_url_fr, language=\"fr\"),\n                TranslationTarget(target_url=target_container_url_ar, language=\"ar\"),\n            ],\n        ),\n        DocumentTranslationInput(\n            source_url=source_container_url_2,\n            targets=[TranslationTarget(target_url=target_container_url_es, language=\"es\")],\n        ),\n    ]\n)\nresult = poller.result()\n\nprint(f\"Status: {poller.status()}\")\nprint(f\"Created on: {poller.details.created_on}\")\nprint(f\"Last updated on: {poller.details.last_updated_on}\")\nprint(f\"Total number of translations on documents: {poller.details.documents_total_count}\")\n\nprint(\"\\nOf total documents...\")\nprint(f\"{poller.details.documents_failed_count} failed\")\nprint(f\"{poller.details.documents_succeeded_count} succeeded\")\n\nfor document in result:\n    print(f\"Document ID: {document.id}\")\n    print(f\"Document status: {document.status}\")\n    if document.status == \"Succeeded\":\n        print(f\"Source document location: {document.source_document_url}\")\n        print(f\"Translated document location: {document.translated_document_url}\")\n        print(f\"Translated to language: {document.translated_to}\\n\")\n    elif document.error:\n        print(f\"Error Code: {document.error.code}, Message: {document.error.message}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Downloading a Blob using BlobClient in Python\nDESCRIPTION: This snippet demonstrates how to download a blob from a container using the BlobClient. It initializes the client, downloads the blob data, and writes it to a local file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./BlockDestination.txt\", \"wb\") as my_blob:\n    blob_data = blob.download_blob()\n    blob_data.readinto(my_blob)\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Access Token Asynchronously with MixedRealityStsClient\nDESCRIPTION: Demonstrates how to retrieve an access token asynchronously using the asynchronous version of MixedRealityStsClient. This requires Python 3.5 or later and uses async/await syntax.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.authentication.aio import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = await client.get_token()\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in Azure Communication Service - Python\nDESCRIPTION: This snippet deletes a user from Azure Communication Service by invoking delete_user. Passes the user object as argument. This is part of user lifecycle management and resource cleanup scenarios. The operation has no output but irreversibly removes the user.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nidentity_client.delete_user(user)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Text Queries with Azure Conversational Language Understanding\nDESCRIPTION: This code demonstrates how to analyze a text query using the Azure ConversationAnalysisClient. It sends a request to CLU to identify the user's intent and entities in a restaurant reservation query.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# analyze query\nclient = ConversationAnalysisClient(clu_endpoint, AzureKeyCredential(clu_key))\nwith client:\n    query = \"Reserve a table for 2 at the Italian restaurant\"\n    result = client.analyze_conversation(\n        task={\n            \"kind\": \"Conversation\",\n            \"analysisInput\": {\n                \"conversationItem\": {\n                    \"participantId\": \"1\",\n                    \"id\": \"1\",\n                    \"modality\": \"text\",\n                    \"language\": \"en\",\n                    \"text\": query\n                },\n                \"isLoggingEnabled\": False\n            },\n            \"parameters\": {\n                \"projectName\": project_name,\n                \"deploymentName\": deployment_name,\n                \"verbose\": True\n            }\n        }\n    )\n\n# view result\nprint(\"query: {}\".format(result[\"result\"][\"query\"]))\nprint(\"project kind: {}\\n\".format(result[\"result\"][\"prediction\"][\"projectKind\"]))\n\n# top intent\ntop_intent = result[\"result\"][\"prediction\"][\"topIntent\"]\nprint(\"top intent: {}\".format(top_intent))\ntop_intent_object = result[\"result\"][\"prediction\"][\"intents\"][top_intent]\nprint(\"confidence score: {}\".format(top_intent_object[\"confidenceScore\"]))\nprint(\"project kind: {}\".format(top_intent_object[\"targetProjectKind\"]))\n\nif top_intent_object[\"targetProjectKind\"] == \"Luis\":\n    print(\"\\nluis response:\")\n    luis_response = top_intent_object[\"result\"][\"prediction\"]\n    print(\"top intent: {}\".format(luis_response[\"topIntent\"]))\n    print(\"\\nentities:\")\n    for entity in luis_response[\"entities\"]:\n        print(\"\\n{}\".format(entity))\n```\n\n----------------------------------------\n\nTITLE: Analyzing Documents with the General Document Model in Python\nDESCRIPTION: This code demonstrates how to use the Document Intelligence client to analyze documents using the prebuilt-layout model. It extracts key-value pairs, styles, text lines, words, selection marks, and tables from a document, with detailed processing of each element including position information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import DocumentAnalysisFeature, AnalyzeResult\n\ndef _in_span(word, spans):\n    for span in spans:\n        if word.span.offset >= span.offset and (word.span.offset + word.span.length) <= (span.offset + span.length):\n            return True\n    return False\n\ndef _format_bounding_region(bounding_regions):\n    if not bounding_regions:\n        return \"N/A\"\n    return \", \".join(\n        f\"Page #{region.page_number}: {_format_polygon(region.polygon)}\" for region in bounding_regions\n    )\n\ndef _format_polygon(polygon):\n    if not polygon:\n        return \"N/A\"\n    return \", \".join([f\"[{polygon[i]}, {polygon[i + 1]}]\" for i in range(0, len(polygon), 2)])\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\n\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_intelligence_client.begin_analyze_document(\n        \"prebuilt-layout\",\n        body=f,\n        features=[DocumentAnalysisFeature.KEY_VALUE_PAIRS],\n    )\nresult: AnalyzeResult = poller.result()\n\nif result.styles:\n    for style in result.styles:\n        if style.is_handwritten:\n            print(\"Document contains handwritten content: \")\n            print(\",\".join([result.content[span.offset : span.offset + span.length] for span in style.spans]))\n\nprint(\"----Key-value pairs found in document----\")\nif result.key_value_pairs:\n    for kv_pair in result.key_value_pairs:\n        if kv_pair.key:\n            print(\n                f\"Key '{kv_pair.key.content}' found within \"\n                f\"'{_format_bounding_region(kv_pair.key.bounding_regions)}' bounding regions\"\n            )\n        if kv_pair.value:\n            print(\n                f\"Value '{kv_pair.value.content}' found within \"\n                f\"'{_format_bounding_region(kv_pair.value.bounding_regions)}' bounding regions\\n\"\n            )\n\nfor page in result.pages:\n    print(f\"----Analyzing document from page #{page.page_number}----\")\n    print(f\"Page has width: {page.width} and height: {page.height}, measured with unit: {page.unit}\")\n\n    if page.lines:\n        for line_idx, line in enumerate(page.lines):\n            words = []\n            if page.words:\n                for word in page.words:\n                    print(f\"......Word '{word.content}' has a confidence of {word.confidence}\")\n                    if _in_span(word, line.spans):\n                        words.append(word)\n            print(\n                f\"...Line #{line_idx} has {len(words)} words and text '{line.content}' within \"\n                f\"bounding polygon '{_format_polygon(line.polygon)}'\"\n            )\n\n    if page.selection_marks:\n        for selection_mark in page.selection_marks:\n            print(\n                f\"Selection mark is '{selection_mark.state}' within bounding polygon \"\n                f\"'{_format_polygon(selection_mark.polygon)}' and has a confidence of \"\n                f\"{selection_mark.confidence}\"\n            )\n\nif result.tables:\n    for table_idx, table in enumerate(result.tables):\n        print(f\"Table # {table_idx} has {table.row_count} rows and {table.column_count} columns\")\n        if table.bounding_regions:\n            for region in table.bounding_regions:\n                print(\n                    f\"Table # {table_idx} location on page: {region.page_number} is {_format_polygon(region.polygon)}\"\n                )\n        for cell in table.cells:\n            print(f\"...Cell[{cell.row_index}][{cell.column_index}] has text '{cell.content}'\")\n            if cell.bounding_regions:\n                for region in cell.bounding_regions:\n                    print(\n                        f\"...content on page {region.page_number} is within bounding polygon '{_format_polygon(region.polygon)}'\\n\"\n                    )\nprint(\"----------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Closing Specific Handle in Azure Storage File Share SDK\nDESCRIPTION: This code snippet demonstrates how to close a specific handle using the close_handle() method in the Azure Storage File Share SDK for Python. It returns the number of closed handles.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclose_handle(handle)\n```\n\n----------------------------------------\n\nTITLE: Defining a User-Defined Generic Class with typing.Generic in Python\nDESCRIPTION: This code creates a user-defined generic class using typing.Generic and a covariant TypeVar, following the pattern used in Azure SDK pollers. The class LROPoller supports type-checked methods whose return type matches the provided generic argument. Dependencies: typing (TypeVar, Generic, Callable, Any, Optional) and PollingMethod[PollingReturnType_co]. 'result' method outputs the value of PollingReturnType_co as determined on instantiation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar, Generic, Callable, Any, Optional\n\nPollingReturnType_co = TypeVar(\"PollingReturnType_co\", covariant=True)\n\n\nclass LROPoller(Generic[PollingReturnType_co]):\n    def __init__(self, client: Any, initial_response: Any, deserialization_callback: Callable,\n                 polling_method: PollingMethod[PollingReturnType_co]):\n        ...\n\n    def result(self, timeout: Optional[int] = None) -> PollingReturnType_co:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Authenticating MapsSearchClient using Microsoft Entra ID (DefaultAzureCredential) - Python\nDESCRIPTION: This code shows how to authenticate the MapsSearchClient using Azure Identity's DefaultAzureCredential, suitable for use with Microsoft Entra ID (Azure Active Directory). Requires 'azure-identity' and related Azure Maps SDK packages. The service principal's credentials are pulled from environment variables. After registration and role assignment, the client is constructed for secure map search operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.search import MapsSearchClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nsearch_client = MapsSearchClient(credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Client-Level Logging for Azure Schema Registry Avro Encoder in Python\nDESCRIPTION: This snippet demonstrates how to enable detailed DEBUG level logging for the `SchemaRegistryClient` and the associated `AvroEncoder`. It configures the standard Python `logging` library to output logs from the `azure.schemaregistry` namespace to the console. The `SchemaRegistryClient` is instantiated with the `logging_enable=True` argument, which propagates logging settings to the encoder created from it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\nimport logging\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the SDK\nlogger = logging.getLogger('azure.schemaregistry')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\ncredential = DefaultAzureCredential()\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential, logging_enable=True)\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Get Dead-Letter Queue Receivers in Python\nDESCRIPTION: Introduced `get_queue_deadletter_receiver` and `get_subscription_deadletter_receiver` methods in `ServiceBusClient` to easily obtain a `ServiceBusReceiver` specifically configured for the dead-letter sub-queue of a given queue or subscription.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusClient.get_queue_deadletter_receiver(queue_name=...)\nServiceBusClient.get_subscription_deadletter_receiver(topic_name=..., subscription_name=...)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Digital Twins client with DefaultAzureCredential\nDESCRIPTION: Initializes an Azure Digital Twins client using DefaultAzureCredential for authentication. Requires environment variables for Azure tenant, client ID, client secret, and Digital Twins URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# DefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\n# It attempts to use multiple credential types in an order until it finds a working credential.\n\n# - AZURE_URL: The URL to the ADT in Azure\nurl = os.getenv(\"AZURE_URL\")\n\n# DefaultAzureCredential expects the following three environment variables:\n# - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n# - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n# - AZURE_CLIENT_SECRET: The client secret for the registered application\ncredential = DefaultAzureCredential()\nservice_client = DigitalTwinsClient(url, credential)\n```\n\n----------------------------------------\n\nTITLE: Listing Outgoing Digital Twin Relationships in Python\nDESCRIPTION: This snippet demonstrates listing all outgoing relationships originating from a specific Azure Digital Twin. It uses the `list_relationships` method of the service client, passing the digital twin's ID (`digital_twint_id`). The code then iterates through the returned relationships and prints each one.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_relationships_list\nrelationships = service_client.list_relationships(digital_twint_id)\nfor relationship in relationships:\n    print(relationship)\n```\n```\n\n----------------------------------------\n\nTITLE: Batch Anomaly Detection Implementation\nDESCRIPTION: Complete implementation of batch anomaly detection using the Anomaly Detector client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector.models import *\n\n\nSUBSCRIPTION_KEY = os.environ[\"ANOMALY_DETECTOR_KEY\"]\nANOMALY_DETECTOR_ENDPOINT = os.environ[\"ANOMALY_DETECTOR_ENDPOINT\"]\nTIME_SERIES_DATA_PATH = os.path.join(\"sample_data\", \"request-data.csv\")\nclient = AnomalyDetectorClient(ANOMALY_DETECTOR_ENDPOINT, AzureKeyCredential(SUBSCRIPTION_KEY))\n\nseries = []\ndata_file = pd.read_csv(TIME_SERIES_DATA_PATH, header=None, encoding=\"utf-8\", parse_dates=[0])\nfor index, row in data_file.iterrows():\n    series.append(TimeSeriesPoint(timestamp=row[0], value=row[1]))\n\nrequest = UnivariateDetectionOptions(\n    series=series,\n    granularity=TimeGranularity.DAILY,\n)\n\n\nif any(response.is_anomaly):\n    print(\"An anomaly was detected at index:\")\n    for i, value in enumerate(response.is_anomaly):\n        if value:\n            print(i)\nelse:\n    print(\"No anomalies were detected in the time series.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Policies in Azure Core\nDESCRIPTION: Examples of implementing custom HTTP policies for synchronous and asynchronous pipelines. These policies have more control over the HTTP workflow and must implement the send method with a call to the next policy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPolicy(HTTPPolicy):\n\n    def __init__(self):\n        self.next = None  # Will be set when pipeline is instantiated and all the policies chained.\n\n    def send(self, request):\n        \"\"\"Mutate the request.\"\"\"\n\n        return self.next.send(request)\n\nclass CustomAsyncPolicy(AsyncHTTPPolicy):\n\n    async def send(self, request):\n        \"\"\"Mutate the request.\"\"\"\n\n        return await self.next.send(request)\n```\n\n----------------------------------------\n\nTITLE: Handling Logs Query Response with Pandas in Python\nDESCRIPTION: Demonstrates how to process logs query response tables using pandas DataFrame in Python. Shows basic iteration over query results and conversion to pandas format.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.query(...)\nfor table in response:\n    df = pd.DataFrame(table.rows, columns=[col.name for col in table.columns])\n```\n\n----------------------------------------\n\nTITLE: Creating a Database with Azure Cosmos DB Python SDK\nDESCRIPTION: This code demonstrates how to create a SQL API database in Azure Cosmos DB using the CosmosClient, with error handling for cases where the database already exists.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient, exceptions\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ntry:\n    database = client.create_database(DATABASE_NAME)\nexcept exceptions.CosmosResourceExistsError:\n    database = client.get_database_client(DATABASE_NAME)\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous Queries with Azure Cosmos DB SDK for Python\nDESCRIPTION: This snippet demonstrates how to execute queries using the asynchronous Azure Cosmos DB client and handle the results. It initializes the async client, gets database and container clients, and runs a query using `container.query_items`. The result is an asynchronous iterator. The snippet shows two ways to consume the results: using an `async for` loop to iterate and append items to a list, and using an async list comprehension. Note that the async client performs cross-partition queries by default if no partition key is specified. Requires `azure.cosmos.aio` and `os`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos.aio import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\nasync def create_lists():\n    results = container.query_items(\n            query='SELECT * FROM products p WHERE p.productModel = \"Model 2\"')\n\n    # iterates on \"results\" iterator to asynchronously create a complete list of the actual query results\n\n    item_list = []\n    async for item in results:\n        item_list.append(item)\n\n    # Asynchronously creates a complete list of the actual query results. This code performs the same action as the for-loop example above.\n    item_list = [item async for item in results]\n    await client.close()\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Radiology Procedure Inference from Radiology Insights in Python\nDESCRIPTION: This code snippet illustrates how to traverse patient results and identify radiology procedure inferences in radiology insights data. It uses the RadiologyInsightsInferenceType enum for inference type determination.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.RADIOLOGY_PROCEDURE:\n            print(f\"Radiology Procedure Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Embedding Policy in Azure Cosmos DB (Python)\nDESCRIPTION: Shows how to define a vector embedding policy with multiple vector fields, specifying data types (float32, int8, uint8), dimensions, and distance functions (euclidean, dotproduct, cosine).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nvector_embedding_policy = {\n    \"vectorEmbeddings\": [\n        {\n            \"path\": \"/vector1\",\n            \"dataType\": \"float32\",\n            \"dimensions\": 256,\n            \"distanceFunction\": \"euclidean\"\n        },\n        {\n            \"path\": \"/vector2\",\n            \"dataType\": \"int8\",\n            \"dimensions\": 200,\n            \"distanceFunction\": \"dotproduct\"\n        },\n        {\n            \"path\": \"/vector3\",\n            \"dataType\": \"uint8\",\n            \"dimensions\": 400,\n            \"distanceFunction\": \"cosine\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure CDN Management Client - Python\nDESCRIPTION: This Python snippet initializes the 'CdnManagementClient' from the Azure SDK using DefaultAzureCredential for authentication. It requires the 'azure-identity' and 'azure-mgmt-cdn' packages, and expects environment variables 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and 'AZURE_SUBSCRIPTION_ID' to be set. The script retrieves the subscription ID from the environment, authenticates, and instantiates the CDN management client. Key input: Azure AD credentials and subscription ID via environment variables. Output: a ready-to-use 'CdnManagementClient' instance. Limitations: Will fail if the prerequisites or required environment variables are not set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cdn/azure-mgmt-cdn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.cdn import CdnManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CdnManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Extracting Figures with Azure Document Intelligence Client in Python\nDESCRIPTION: This snippet shows how to extract figure images from a document using the Azure Document Intelligence SDK for Python's 'prebuilt-layout' model. It demonstrates requesting figures as output options, polling the long-running operation, and downloading each figure through additional API calls. Required dependencies are azure-core, azure-ai-documentintelligence, and correct credentials set as environment variables. Inputs are document files, and outputs are PNG image files written to disk for each detected figure. Note that figures are only available if present in the analyzed document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\\nfrom azure.ai.documentintelligence.models import AnalyzeOutputOption, AnalyzeResult\\n\\nendpoint = os.environ[\\\"DOCUMENTINTELLIGENCE_ENDPOINT\\\"]\\nkey = os.environ[\\\"DOCUMENTINTELLIGENCE_API_KEY\\\"]\\n\\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\\n\\nwith open(path_to_sample_documents, \\\"rb\\\") as f:\\n    poller = document_intelligence_client.begin_analyze_document(\\n        \\\"prebuilt-layout\\\",\\n        body=f,\\n        output=[AnalyzeOutputOption.FIGURES],\\n    )\\nresult: AnalyzeResult = poller.result()\\noperation_id = poller.details[\\\"operation_id\\\"]\\n\\nif result.figures:\\n    for figure in result.figures:\\n        if figure.id:\\n            response = document_intelligence_client.get_analyze_result_figure(\\n                model_id=result.model_id, result_id=operation_id, figure_id=figure.id\\n            )\\n            with open(f\\\"{figure.id}.png\\\", \\\"wb\\\") as writer:\\n                writer.writelines(response)\\nelse:\\n    print(\\\"No figures found.\\\")\n```\n\n----------------------------------------\n\nTITLE: Uploading Container Images\nDESCRIPTION: Upload a container image by uploading individual layers, configuration, and manifest with a tag\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nself.repository_name = \"sample-oci-image\"\nlayer = BytesIO(b\"Sample layer\")\nconfig = BytesIO(\n    json.dumps(\n        {\n            \"sample config\": \"content\",\n        }\n    ).encode()\n)\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Upload a layer\n    layer_digest, layer_size = client.upload_blob(self.repository_name, layer)\n    print(f\"Uploaded layer: digest - {layer_digest}, size - {layer_size}\")\n    # Upload a config\n    config_digest, config_size = client.upload_blob(self.repository_name, config)\n    print(f\"Uploaded config: digest - {config_digest}, size - {config_size}\")\n    # Create an oci image with config and layer info\n    oci_manifest = {\n        \"config\": {\n            \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n            \"digest\": config_digest,\n            \"sizeInBytes\": config_size,\n        },\n        \"schemaVersion\": 2,\n        \"layers\": [\n            {\n                \"mediaType\": \"application/vnd.oci.image.layer.v1.tar\",\n                \"digest\": layer_digest,\n                \"size\": layer_size,\n                \"annotations\": {\n                    \"org.opencontainers.image.ref.name\": \"artifact.txt\",\n                },\n            },\n        ],\n    }\n    # Set the image with tag \"latest\"\n    manifest_digest = client.set_manifest(self.repository_name, oci_manifest, tag=\"latest\")\n    print(f\"Uploaded manifest: digest - {manifest_digest}\")\n```\n\n----------------------------------------\n\nTITLE: Listing Role Definitions in Azure Key Vault Administration\nDESCRIPTION: Demonstrates how to list role definitions using a KeyVaultAccessControlClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.administration import KeyVaultRoleScope\n\nrole_definitions = client.list_role_definitions(scope=KeyVaultRoleScope.GLOBAL)\nfor definition in role_definitions:\n    print(f\"Role name: {definition.role_name}; Role definition name: {definition.name}\")\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob using Async BlobClient in Python\nDESCRIPTION: This snippet shows how to upload a blob asynchronously using the BlobClient. It initializes the async client and awaits the upload_blob method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.aio import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as data:\n    await blob.upload_blob(data)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Documents with Custom Model in Azure Document Intelligence using Python\nDESCRIPTION: Shows how to analyze documents using a custom-built model. It processes documents, extracts fields and table data, and prints the results. The code handles both dynamic and fixed table structures in the document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import AnalyzeResult\n\ndef _print_table(header_names, table_data):\n    # Print a two-dimensional array like a table.\n    max_len_list = []\n    for i in range(len(header_names)):\n        col_values = list(map(lambda row: len(str(row[i])), table_data))\n        col_values.append(len(str(header_names[i])))\n        max_len_list.append(max(col_values))\n\n    row_format_str = \"\".join(map(lambda len: f\"{{:<{len + 4}}}\", max_len_list))\n\n    print(row_format_str.format(*header_names))\n    for row in table_data:\n        print(row_format_str.format(*row))\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\nmodel_id = os.getenv(\"CUSTOM_BUILT_MODEL_ID\", custom_model_id)\n\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\n# Make sure your document's type is included in the list of document types the custom model can analyze\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_intelligence_client.begin_analyze_document(model_id=model_id, body=f)\nresult: AnalyzeResult = poller.result()\n\nif result.documents:\n    for idx, document in enumerate(result.documents):\n        print(f\"--------Analyzing document #{idx + 1}--------\")\n        print(f\"Document has type {document.doc_type}\")\n        print(f\"Document has document type confidence {document.confidence}\")\n        print(f\"Document was analyzed with model with ID {result.model_id}\")\n        if document.fields:\n            for name, field in document.fields.items():\n                field_value = field.get(\"valueString\") if field.get(\"valueString\") else field.content\n                print(\n                    f\"......found field of type '{field.type}' with value '{field_value}' and with confidence {field.confidence}\"\n                )\n\n    # Extract table cell values\n    SYMBOL_OF_TABLE_TYPE = \"array\"\n    SYMBOL_OF_OBJECT_TYPE = \"object\"\n    KEY_OF_VALUE_OBJECT = \"valueObject\"\n    KEY_OF_CELL_CONTENT = \"content\"\n\n    for doc in result.documents:\n        if not doc.fields is None:\n            for field_name, field_value in doc.fields.items():\n                # Dynamic Table cell information store as array in document field.\n                if field_value.type == SYMBOL_OF_TABLE_TYPE and field_value.value_array:\n                    col_names = []\n                    sample_obj = field_value.value_array[0]\n                    if KEY_OF_VALUE_OBJECT in sample_obj:\n                        col_names = list(sample_obj[KEY_OF_VALUE_OBJECT].keys())\n                    print(\"----Extracting Dynamic Table Cell Values----\")\n                    table_rows = []\n                    for obj in field_value.value_array:\n                        if KEY_OF_VALUE_OBJECT in obj:\n                            value_obj = obj[KEY_OF_VALUE_OBJECT]\n                            extract_value_by_col_name = lambda key: (\n                                value_obj[key].get(KEY_OF_CELL_CONTENT)\n                                if key in value_obj and KEY_OF_CELL_CONTENT in value_obj[key]\n                                else \"None\"\n                            )\n                            row_data = list(map(extract_value_by_col_name, col_names))\n                            table_rows.append(row_data)\n                    _print_table(col_names, table_rows)\n\n                elif (\n                    field_value.type == SYMBOL_OF_OBJECT_TYPE\n                    and KEY_OF_VALUE_OBJECT in field_value\n                    and field_value[KEY_OF_VALUE_OBJECT] is not None\n                ):\n                    rows_by_columns = list(field_value[KEY_OF_VALUE_OBJECT].values())\n                    is_fixed_table = all(\n                        (\n                            rows_of_column[\"type\"] == SYMBOL_OF_OBJECT_TYPE\n                            and Counter(list(rows_by_columns[0][KEY_OF_VALUE_OBJECT].keys()))\n                            == Counter(list(rows_of_column[KEY_OF_VALUE_OBJECT].keys()))\n                        )\n                        for rows_of_column in rows_by_columns\n                    )\n\n                    # Fixed Table cell information store as object in document field.\n                    if is_fixed_table:\n                        print(\"----Extracting Fixed Table Cell Values----\")\n                        col_names = list(field_value[KEY_OF_VALUE_OBJECT].keys())\n                        row_dict: dict = {}\n                        for rows_of_column in rows_by_columns:\n                            rows = rows_of_column[KEY_OF_VALUE_OBJECT]\n                            for row_key in list(rows.keys()):\n                                if row_key in row_dict:\n                                    row_dict[row_key].append(rows[row_key].get(KEY_OF_CELL_CONTENT))\n                                else:\n                                    row_dict[row_key] = [\n                                        row_key,\n                                        rows[row_key].get(KEY_OF_CELL_CONTENT),\n                                    ]\n\n                        col_names.insert(0, \"\")\n                        _print_table(col_names, list(row_dict.values()))\n\nprint(\"------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Uploading Logs from JSON File or String in Python\nDESCRIPTION: This example shows how to upload logs to Azure Monitor when the data is in a JSON file or string format.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\nendpoint = os.environ[\"DATA_COLLECTION_ENDPOINT\"]\nrule_id = os.environ['LOGS_DCR_RULE_ID']\nstream_name = os.environ[\"LOGS_DCR_STREAM_NAME\"]\n\ncredential = DefaultAzureCredential()\nclient = LogsIngestionClient(endpoint=endpoint, credential=credential, logging_enable=True)\n\n# If you have a JSON file containing an array of JSON objects\nfile_path = \"./test-logs.json\"\nwith open(file_path, \"r\") as f:\n    logs = json.load(f)\n    try:\n        client.upload(rule_id=rule_id, stream_name=stream_name, logs=logs)\n    except HttpResponseError as e:\n        print(f\"Upload failed: {e}\")\n\n# If you have a JSON string representing an array of JSON objects\nstring = '[{\"Time\": \"2023-12-08T23:51:14.1104269Z\", \"Computer\": \"Computer1\", \"AdditionalContext\": \"context-2\"}]'\nlogs = json.loads(string)\ntry:\n    client.upload(rule_id=rule_id, stream_name=stream_name, logs=logs)\nexcept HttpResponseError as e:\n    print(f\"Upload failed: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Converting Document Intelligence Analysis Results to JSON in Python\nDESCRIPTION: Demonstrates how to convert Document Intelligence analysis results to a dictionary and save it as JSON, as well as how to convert a dictionary back to the original model object. This is useful for storing results or transmitting them between systems.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import AnalyzeResult\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\n\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_intelligence_client.begin_analyze_document(\"prebuilt-layout\", body=f)\nresult: AnalyzeResult = poller.result()\n\n# convert the received model to a dictionary\nanalyze_result_dict = result.as_dict()\n\n# save the dictionary as JSON content in a JSON file\nwith open(\"data.json\", \"w\") as output_file:\n    json.dump(analyze_result_dict, output_file, indent=4)\n\n# convert the dictionary back to the original model\nmodel = AnalyzeResult(analyze_result_dict)\n\n# use the model as normal\nprint(\"----Converted from dictionary AnalyzeResult----\")\nprint(f\"Model ID: '{model.model_id}'\")\nprint(f\"Number of pages analyzed {len(model.pages)}\")\nprint(f\"API version used: {model.api_version}\")\n\nprint(\"----------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Creating Entities in Azure Tables with Python\nDESCRIPTION: Demonstrates how to create and add an entity to an Azure table. The example includes various data types that Azure Tables supports, such as strings, numbers, booleans, datetime, and binary data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\nfrom datetime import datetime\n\nPRODUCT_ID = u'001234'\nPRODUCT_NAME = u'RedMarker'\n\nmy_entity = {\n    u'PartitionKey': PRODUCT_NAME,\n    u'RowKey': PRODUCT_ID,\n    u'Stock': 15,\n    u'Price': 9.99,\n    u'Comments': u\"great product\",\n    u'OnSale': True,\n    u'ReducedPrice': 7.99,\n    u'PurchaseDate': datetime(1973, 10, 4),\n    u'BinaryRepresentation': b'product_name'\n}\n\ntable_service_client = TableServiceClient.from_connection_string(conn_str=\"<connection_string>\")\ntable_client = table_service_client.get_table_client(table_name=\"myTable\")\n\nentity = table_client.create_entity(entity=my_entity)\n```\n\n----------------------------------------\n\nTITLE: Creating SchemaRegistryClient with DefaultAzureCredential in Python\nDESCRIPTION: Illustrates how to instantiate the `SchemaRegistryClient`. It uses `DefaultAzureCredential` from `azure-identity` for authentication and retrieves the Schema Registry namespace from an environment variable (`SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE`). This client is the entry point for interacting with the Schema Registry service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net/'\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\n```\n\n----------------------------------------\n\nTITLE: Sentiment Analysis with Azure Text Analytics\nDESCRIPTION: Implements sentiment analysis on multiple text documents using the Azure Text Analytics client, including opinion mining and sentiment scoring.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\ndocuments = [\n    \"\"\"I had the best day of my life. I decided to go sky-diving and it made me appreciate my whole life so much more.\n    I developed a deep-connection with my instructor as well, and I feel as if I've made a life-long friend in her.\"\"\",\n    \"\"\"This was a waste of my time. All of the views on this drop are extremely boring, all I saw was grass. 0/10 would\n    not recommend to any divers, even first timers.\"\"\",\n    \"\"\"This was pretty good! The sights were ok, and I had fun with my instructors! Can't complain too much about my experience\"\"\",\n    \"\"\"I only have one word for my experience: WOW!!! I can't believe I have had such a wonderful skydiving company right\n    in my backyard this whole time! I will definitely be a repeat customer, and I want to take my grandmother skydiving too,\n    I know she'll love it!\"\"\"\n]\n\n\nresult = text_analytics_client.analyze_sentiment(documents, show_opinion_mining=True)\ndocs = [doc for doc in result if not doc.is_error]\n\nprint(\"Let's visualize the sentiment of each of these documents\")\nfor idx, doc in enumerate(docs):\n    print(f\"Document text: {documents[idx]}\")\n    print(f\"Overall sentiment: {doc.sentiment}\")\n```\n\n----------------------------------------\n\nTITLE: Complete Trial Matching Example with Patient and Clinical Trial Configuration\nDESCRIPTION: Full Python example demonstrating how to use the Clinical Matching client to find clinical trials that match a patient's profile based on eligibility criteria and configurable filters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport datetime\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.clinicalmatching import ClinicalMatchingClient, models\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\n# Create a Trial Matcher client\n# <client>\ntrial_matcher_client = ClinicalMatchingClient(endpoint=ENDPOINT,\n                                              credential=AzureKeyCredential(KEY))\n# </client>\n\n# Create clinical info list\n# <clinicalInfo>\nclinical_info_list = [models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0032181\",\n                                                  name=\"Platelet count\",\n                                                  value=\"250000\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0002965\",\n                                                  name=\"Unstable Angina\",\n                                                  value=\"true\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C1522449\",\n                                                  name=\"Radiotherapy\",\n                                                  value=\"false\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0242957\",\n                                                  name=\"GeneOrProtein-Expression\",\n                                                  value=\"Negative;EntityType:GENEORPROTEIN-EXPRESSION\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C1300072\",\n                                                  name=\"cancer stage\",\n                                                  value=\"2\")]\n\n# </clinicalInfo>\n\n# Construct Patient\n# <PatientConstructor>\npatient_info = models.PatientInfo(sex=models.PatientInfoSex.MALE, birth_date=datetime.date(1965, 12, 26),\n                                  clinical_info=clinical_info_list)\npatient1 = models.PatientRecord(id=\"patient_id\", info=patient_info)\n# </PatientConstructor>\n\n# Create registry filter\nregistry_filters = models.ClinicalTrialRegistryFilter()\n# Limit the trial to a specific patient condition (\"Non-small cell lung cancer\")\nregistry_filters.conditions = [\"non small cell lung cancer (nsclc)\"]\n# Specify the clinical trial registry source as ClinicalTrials.Gov\nregistry_filters.sources = [models.ClinicalTrialSource.CLINICALTRIALS_GOV]\n# Limit the clinical trial to a certain location, in this case California, USA\nregistry_filters.facility_locations = [\n    models.GeographicLocation(country_or_region=\"United States\", city=\"Gilbert\", state=\"Arizona\")]\n# Limit the trial to a specific recruitment status\nregistry_filters.recruitment_statuses = [models.ClinicalTrialRecruitmentStatus.RECRUITING]\n\n# Construct ClinicalTrial instance and attach the registry filter to it.\nclinical_trials = models.ClinicalTrials(registry_filters=[registry_filters])\n\n# Create TrialMatcherRequest\nconfiguration = models.TrialMatcherModelConfiguration(clinical_trials=clinical_trials)\ntrial_matcher_data = models.TrialMatcherData(patients=[patient1], configuration=configuration)\n\npoller = trial_matcher_client.begin_match_trials(trial_matcher_data)\ntrial_matcher_result = poller.result()\nif trial_matcher_result.status == models.JobStatus.SUCCEEDED:\n    tm_results = trial_matcher_result.results\n    for patient_result in tm_results.patients:\n        print(f\"Inferences of Patient {patient_result.id}\")\n        for tm_inferences in patient_result.inferences:\n            print(f\"Trial Id {tm_inferences.id}\")\n            print(f\"Type: {str(tm_inferences.type)}  Value: {tm_inferences.value}\")\n            print(f\"Description {tm_inferences.description}\")\nelse:\n    tm_errors = trial_matcher_result.errors\n    if tm_errors is not None:\n        for error in tm_errors:\n            print(f\"{error.code} : {error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Executing and Handling Asynchronous Cancer Profiling with Azure Health Insights SDK in Python\nDESCRIPTION: This Python code configures the OncoPhenotype model to include evidence, constructs the `OncoPhenotypeData` request object containing patient data (`patient1`), and initiates an asynchronous cancer profiling job using `begin_infer_cancer_profile`. It then awaits the job completion using the poller's `result()` method. If the job succeeds, it iterates through the patient results, printing each inference's type, value, confidence score, and associated evidence. If the job fails, it prints any errors returned by the service. Assumes `cancer_profiling_client` and `patient1` (with populated `data`) are already initialized.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Set configuration to include evidence for the cancer staging inferences\nconfiguration = models.OncoPhenotypeModelConfiguration(include_evidence=True)\n\n# Construct the request with the patient and configuration\ncancer_profiling_data = models.OncoPhenotypeData(patients=[patient1], configuration=configuration)\n\npoller = await cancer_profiling_client.begin_infer_cancer_profile(cancer_profiling_data)\ncancer_profiling_result = await poller.result()\nif cancer_profiling_result.status == models.JobStatus.SUCCEEDED:\n    results = cancer_profiling_result.results\n    for patient_result in results.patients:\n        print(f\"\\n==== Inferences of Patient {patient_result.id} ====\")\n        for inference in patient_result.inferences:\n            print(\n                f\"\\n=== Clinical Type: {str(inference.type)} Value: {inference.value}\\\n                    ConfidenceScore: {inference.confidence_score} ===\")\n            for evidence in inference.evidence:\n                data_evidence = evidence.patient_data_evidence\n                print(\n                    f\"Evidence {data_evidence.id} {data_evidence.offset} {data_evidence.length}\\\n                        {data_evidence.text}\")\nelse:\n    errors = cancer_profiling_result.errors\n    if errors is not None:\n        for error in errors:\n            print(f\"{error.code} : {error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with FileSearchTool using Tools and Resources in Python\nDESCRIPTION: Illustrates creating an Agent equipped with a `FileSearchTool`. The tool is initialized with specific vector store IDs. Its definitions (`file_search_tool.definitions`) and resources (`file_search_tool.resources`) are passed separately to `create_agent` using the `tools` and `tool_resources` parameters, respectively. Requires `FileSearchTool`, `os` package, and `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfile_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n\n# Notices that FileSearchTool as tool and tool_resources must be added or the assistant unable to search the file\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are helpful assistant\",\n    tools=file_search_tool.definitions,\n    tool_resources=file_search_tool.resources,\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Geocoding Addresses with Azure Maps Search Python SDK\nDESCRIPTION: This code demonstrates how to perform batch geocoding of multiple addresses using the Azure Maps Search client. It creates a client using an Azure Key Credential, sends a batch request with multiple addresses, and extracts the longitude and latitude coordinates from the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef geocode_batch():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.search import MapsSearchClient\n\n    maps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_search_client.get_geocoding_batch({\n          \"batchItems\": [\n            {\"query\": \"400 Broad St, Seattle, WA 98109\"},\n            {\"query\": \"15127 NE 24th Street, Redmond, WA 98052\"},\n          ],\n        },)\n\n        if not result.get('batchItems', False):\n            print(\"No batchItems in geocoding\")\n            return\n\n        for item in result['batchItems']:\n            if not item.get('features', False):\n                print(f\"No features in item: {item}\")\n                continue\n\n            coordinates = item['features'][0]['geometry']['coordinates']\n            longitude, latitude = coordinates\n            print(longitude, latitude)\n\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    geocode_batch()\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Bing Grounding - Azure SDK for Python\nDESCRIPTION: This snippet demonstrates initializing a BingGroundingTool with a connection ID obtained from a project connection, and then creating an agent configured with the Bing tool through Azure's Python SDK. Required dependencies include an active project_client, BingGroundingTool, the target Bing connection, and appropriate environment variables. The main parameters set the agent's name, AI model deployment, custom instructions, and attach tools. The resulting agent is ready to process requests using Bing search functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbing_connection = project_client.connections.get(connection_name=os.environ[\"BING_CONNECTION_NAME\"])\nconn_id = bing_connection.id\n\nprint(conn_id)\n\n# Initialize agent bing tool and add the connection id\nbing = BingGroundingTool(connection_id=conn_id)\n\n# Create agent with the bing tool and process assistant run\nwith project_client:\n    agent = project_client.agents.create_agent(\n        model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n        name=\"my-assistant\",\n        instructions=\"You are a helpful assistant\",\n        tools=bing.definitions,\n        headers={\"x-ms-enable-preview\": \"true\"},\n    )\n```\n\n----------------------------------------\n\nTITLE: Exporting Question Answering Project with azure-ai-language-questionanswering in Python\nDESCRIPTION: This snippet demonstrates how to export a Question Answering project using the begin_export method in the new azure-ai-language-questionanswering library. It shows authentication and initiating the export process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n\nexport_poller = client.begin_export(\n    project_name=\"<project_name>\",\n    file_format=\"json\"\n)\nexport_result = export_poller.result()\nexport_url = export_result[\"resultUrl\"]\n```\n\n----------------------------------------\n\nTITLE: Querying a Knowledge Base with QuestionAnsweringClient in Python\nDESCRIPTION: This Python example demonstrates querying a deployed Question Answering project. It initializes a `QuestionAnsweringClient` using environment variables for the endpoint and key, then calls the `get_answers` method with the question, project name, and deployment name. The code iterates through the candidate answers, printing their confidence score, text, and source.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\nclient = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))\n\noutput = client.get_answers(\n    question=\"How long should my Surface battery last?\",\n    project_name=\"FAQ\",\n    deployment_name=\"production\"\n)\nfor candidate in output.answers:\n    print(\"({}) {}\".format(candidate.confidence, candidate.answer))\n    print(\"Source: {}\".format(candidate.source))\n\n```\n\n----------------------------------------\n\nTITLE: Creating Senders and Receivers - Service Bus v7 - Python\nDESCRIPTION: Presents the updated pattern for creating senders and receivers using context management directly from ServiceBusClient in v7. The new approach offers dedicated methods for queues, topics, and subscriptions, and supports the sub_queue parameter for dead-letter queues. Dependencies are similar to v0.50, but management of the client and entities is more uniform. Receivers and senders are obtained directly, reducing the client hierarchy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith ServiceBusClient.from_connection_string(connstr) as client:\n\n    # for queues\n    queue_sender = client.get_queue_sender(queue_name)\n    queue_receiver = client.get_queue_receiver(queue_name)\n    queue_dead_letter_receiver = client.get_queue_receiver(queue_name, sub_queue=ServiceBusSubQueue.DEAD_LETTER)\n\n    # for topics\n    topic_sender = client.get_topic_sender(topic_name)\n\n    # for subscription\n    subscription_receiver = client.get_subscription_receiver(topic_name, subscription_name)\n    subscription_dead_letter_receiver = client.get_subscription_receiver(topic_name, subscription_name, sub_queue=ServiceBusSubQueue.DEAD_LETTER)\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Form Recognizer Python SDK with Autorest\nDESCRIPTION: Command to generate the Python SDK for Azure Form Recognizer using Autorest. The command targets the swagger README and outputs to the specified Azure SDK for Python directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nautorest --use=@autorest/python@5.16.0 swagger/README.md --python-sdks-folder=<path to the root directory of your azure-sdk-for-python clone>\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure CommunicationIdentityClient - Python\nDESCRIPTION: This snippet demonstrates two methods for initializing the CommunicationIdentityClient: using Azure Active Directory authentication via DefaultAzureCredential and directly from a connection string. It requires specific Azure resource details and may need environment variables for AAD auth (AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET). The initialized client object enables performing identity and token operations for Azure Communication Services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# You can find your endpoint and access token from your resource in the Azure Portal\nimport os\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.identity import DefaultAzureCredential\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nidentity_client_managed_identity = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n\n#You can also authenticate using your connection string\nidentity_client = CommunicationIdentityClient.from_connection_string(connection_str)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Enrollment with Reprovisioning Policies in Python\nDESCRIPTION: Creates or updates an individual device enrollment, specifying reprovisioning policies. This example configures the policy to migrate device data and update hub assignment upon reprovisioning. It uses symmetric key attestation and initializes the client via a connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Create a reprovisioning policy to migrate the device's data and reassess hub assignment\nreprovision_policy = {\n    \"migrateDeviceData\": True,\n    \"updateHubAssignment\": True\n}\n\n# Create a symmetric key individual enrollment with reprovisioning policy\nclient.individual_enrollment.create_or_update(\n    id=\"<enrollment_id>\",\n    enrollment = {\n        \"registrationId\": \"<enrollment_id>\",\n        \"attestation\": {\n            \"type\": \"symmetricKey\",\n        },\n        \"deviceId\": \"<device_id>\",\n        \"reprovisionPolicy\": reprovision_policy\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Hybridcontainerservice Client using DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates how to create and authenticate an instance of `HybridContainerServiceMgmtClient` using `DefaultAzureCredential` from the `azure-identity` library. Authentication relies on pre-configured environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`). The Azure subscription ID is fetched from the `AZURE_SUBSCRIPTION_ID` environment variable using the `os` module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridcontainerservice/azure-mgmt-hybridcontainerservice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridcontainerservice import HybridContainerServiceMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HybridContainerServiceMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Readable Type Aliases and Using TypeAlias in Python\nDESCRIPTION: Demonstrates defining type aliases for tuples, lists, strings, and dictionaries for semantic clarity, and shows usage of typing_extensions.TypeAlias for unambiguous type alias declaration. These improve code readability and type checker accuracy; Python >=3.10 supports TypeAlias natively, while earlier versions require typing_extensions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Tuple, Dict\\n\\nCoordinate = Tuple[float, float]\\nRoute = List[Coordinate]\\nTrailName = str\\nTrails = Dict[TrailName, Route]\\n\\n\\ndef get_trails(state) -> Trails:\\n    ...\\n\\n# vs.\\n\\ndef get_trails(state) -> Dict[str, List[Tuple[float, float]]]:\\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# from typing import TypeAlias Python >=3.10\\nfrom typing_extensions import TypeAlias\\n\\nx: TypeAlias = 1\n```\n\n----------------------------------------\n\nTITLE: Initializing QuestionAnsweringClient with AAD Credential in Python\nDESCRIPTION: This Python code demonstrates creating a `QuestionAnsweringClient` using Azure Active Directory (AAD) authentication. It utilizes `DefaultAzureCredential` from the `azure-identity` library, which requires environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) to be set. A custom subdomain endpoint is necessary for AAD authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = QuestionAnsweringClient(endpoint=\"https://<my-custom-subdomain>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Digital Twins to Azure using Python\nDESCRIPTION: This snippet shows how to upload multiple digital twins to Azure Digital Twins. It iterates through a list of customer data and uses the upsert_digital_twin method to create or update each twin.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/01_Patrons.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor i in customer_twin_examples:\n    service_client.upsert_digital_twin(i[0], i[1])\n```\n\n----------------------------------------\n\nTITLE: Creating RSA and EC Keys Asynchronously in Azure Key Vault\nDESCRIPTION: Demonstrates asynchronous creation of RSA and elliptic curve keys in Azure Key Vault using the async API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Create an RSA key\nrsa_key = await key_client.create_rsa_key(\"rsa-key-name\", size=2048)\nprint(rsa_key.name)\nprint(rsa_key.key_type)\n\n# Create an elliptic curve key\nec_key = await key_client.create_ec_key(\"ec-key-name\", curve=\"P-256\")\nprint(ec_key.name)\nprint(ec_key.key_type)\n```\n\n----------------------------------------\n\nTITLE: Building Current Code Report\nDESCRIPTION: Command to generate a code report from the current local package code for changelog comparison.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/mgmt_release.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools.code_report azure-mgmt-trafficmanager\n```\n\n----------------------------------------\n\nTITLE: Initializing Cosmos DB Client with Key Authentication\nDESCRIPTION: Python code to create a CosmosClient instance using account URI and key authentication retrieved from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\n```\n\n----------------------------------------\n\nTITLE: Creating a Container using Async ContainerClient in Python\nDESCRIPTION: This snippet shows how to create a container asynchronously using the ContainerClient. It initializes the async client and awaits the create_container method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.aio import ContainerClient\n\ncontainer_client = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nawait container_client.create_container()\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Azure Image Analysis SDK Python\nDESCRIPTION: This snippet demonstrates how to catch and handle HTTP response errors when calling the 'analyze' method from the Azure Image Analysis SDK client. It catches 'HttpResponseError' exceptions and prints the associated status code, reason, and details from the error message, which helps diagnose issues such as authentication problems or inaccessible image URLs. Dependencies include the Azure Image Analysis SDK and Azure Core libraries; the exception object 'e' exposes the response status code and details. Inputs are results of the 'analyze' call, and outputs are the logging of related error information to the console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    result = client.analyze( ... )\nexcept HttpResponseError as e:\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Reason: {e.reason}\")\n    print(f\"Message: {e.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Creating ShareServiceClient from Connection String in Python\nDESCRIPTION: Python code to create a ShareServiceClient instance using a storage connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = ShareServiceClient.from_connection_string(conn_str=connection_string)\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Evaluation with Azure AI Projects SDK in Python\nDESCRIPTION: This snippet shows how to create a remote evaluation using the Azure AI Projects SDK. It includes uploading data, configuring evaluators, and creating an evaluation. The code also demonstrates how to retrieve the evaluation results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.projects import AIProjectClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.projects.models import Evaluation, Dataset, EvaluatorConfiguration, ConnectionType\nfrom azure.ai.evaluation import F1ScoreEvaluator, RelevanceEvaluator, HateUnfairnessEvaluator\n\n\n# Create project client\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n# Upload data for evaluation and get dataset id\ndata_id, _ = project_client.upload_file(\"<data_file.jsonl>\")\n\ndeployment_name = \"<deployment_name>\"\napi_version = \"<api_version>\"\n\n# Create an evaluation\nevaluation = Evaluation(\n    display_name=\"Remote Evaluation\",\n    description=\"Evaluation of dataset\",\n    data=Dataset(id=data_id),\n    evaluators={\n        \"f1_score\": EvaluatorConfiguration(\n            id=F1ScoreEvaluator.id,\n        ),\n        \"relevance\": EvaluatorConfiguration(\n            id=RelevanceEvaluator.id,\n            init_params={\n                \"model_config\": default_connection.to_evaluator_model_config(\n                    deployment_name=deployment_name, api_version=api_version\n                )\n            },\n        ),\n        \"violence\": EvaluatorConfiguration(\n            id=ViolenceEvaluator.id,\n            init_params={\"azure_ai_project\": project_client.scope},\n        ),\n    },\n)\n\n\nevaluation_response = project_client.evaluations.create(\n    evaluation=evaluation,\n)\n\n# Get evaluation\nget_evaluation_response = project_client.evaluations.get(evaluation_response.id)\n\nprint(\"----------------------------------------------------------------\")\nprint(\"Created evaluation, evaluation ID: \", get_evaluation_response.id)\nprint(\"Evaluation status: \", get_evaluation_response.status)\nif isinstance(get_evaluation_response.properties, dict):\n    print(\"AI Foundry URI: \", get_evaluation_response.properties[\"AiStudioEvaluationUri\"])\nprint(\"----------------------------------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Boundary Polygons for a Location with Azure Maps Search\nDESCRIPTION: This sample shows how to retrieve polygon data for a specific geographic coordinate using the Azure Maps Search client. It specifies the result type as a locality boundary and sets the resolution to small, then extracts and displays the geometry of the polygon.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.maps.search import Resolution\nfrom azure.maps.search import BoundaryResultType\n\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_polygon():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.search import MapsSearchClient\n\n    maps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_search_client.get_polygon(\n          coordinates=[-122.204141, 47.61256],\n          result_type=BoundaryResultType.LOCALITY,\n          resolution=Resolution.SMALL,\n        )\n\n        if not result.get('geometry', False):\n            print(\"No geometry found\")\n            return\n\n        print(result[\"geometry\"])\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_polygon()\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Trace Correlation in Azure Functions (Python)\nDESCRIPTION: This snippet demonstrates how to manually achieve trace correlation in Azure Functions by extracting the TraceContext. It configures Azure Monitor and starts a span using the current context.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport azure.functions as func\n\nfrom azure.monitor.opentelemetry import configure_azure_monitor\nfrom opentelemetry import trace\nfrom opentelemetry.propagate import extract\n\n# Configure Azure monitor collection telemetry pipeline\nconfigure_azure_monitor()\n\ndef main(req: func.HttpRequest, context) -> func.HttpResponse:\n   ...\n   # Store current TraceContext in dictionary format\n   carrier = {\n      \"traceparent\": context.trace_context.Traceparent,\n      \"tracestate\": context.trace_context.Tracestate,\n   }\n   tracer = trace.get_tracer(__name__)\n   # Start a span using the current context\n   with tracer.start_as_current_span(\n      \"http_trigger_span\",\n      context=extract(carrier),\n   ):\n      ...\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp for Async Support using Bash\nDESCRIPTION: Demonstrates installing the `aiohttp` package using `pip`. This is required if you plan to use the asynchronous (`async`) API provided by the Azure SDK client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Azure Tables with Python\nDESCRIPTION: Shows how to create a table in an Azure Storage account using the TableServiceClient and get a TableClient for the newly created table. Requires a connection string for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\ntable_service_client = TableServiceClient.from_connection_string(conn_str=\"<connection_string>\")\ntable_name = \"myTable\"\ntable_client = table_service_client.create_table(table_name=table_name)\n```\n\n----------------------------------------\n\nTITLE: Listing Chat Threads with Azure Communication Chat SDK\nDESCRIPTION: Demonstrates how to list chat threads using ChatClient with optional parameters for pagination and time filtering. Returns an iterator of ChatThreadItem objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential\nfrom datetime import datetime, timedelta\n\ntoken = \"<token>\"\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\nstart_time = datetime.utcnow() - timedelta(days=2)\n\nchat_threads = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)\nfor chat_thread_item_page in chat_threads.by_page():\n    for chat_thread_item in chat_thread_item_page:\n        print(\"thread id:\", chat_thread_item.id)\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Azure Queue\nDESCRIPTION: Retrieves and processes messages from an Azure Storage Queue, then deletes them after processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages()\n\nfor message in response:\n    print(message.content)\n    queue.delete_message(message)\n```\n\n----------------------------------------\n\nTITLE: Creating CloudEvents in Azure Event Grid v4.0 (Python)\nDESCRIPTION: Demonstrates two ways to define a CloudEvent for publishing with the `azure-eventgrid` v4.0 SDK. The first method uses the `CloudEvent` constructor imported from `azure.core.messaging`, specifying attributes like `type`, `source`, `data`, and `subject`. The second method shows defining the event directly as a Python dictionary with the required CloudEvents specification keys. Both formats are suitable for sending via the `EventGridPublisherClient`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.messaging import CloudEvent\n\ncloud_event = CloudEvent(\n    type=\"Contoso.Items.ItemReceived\",\n    source=\"/contoso/items\",\n    data={\n        \"itemSku\": \"Contoso Item SKU #1\"\n    },\n    subject=\"Door1\"\n)\n\n# as a dictionary\n\ncloud_event = {\n    \"type\":\"a0517898-9fa4-4e70-b4a3-afda1dd68672\",\n    \"source\":\"/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.Storage/storageAccounts/{storage-account}\",\n    \"data\": {\"hello\": \"world\"},\n    \"subject\": \"Door1\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Digital Twins models\nDESCRIPTION: Demonstrates how to create component and model definitions for Azure Digital Twins using the SDK. The example creates a component and a model that includes the component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntemporary_component = {\n    \"@id\": component_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"Component1\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"ComponentProp1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"ComponentTelemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\ntemporary_model = {\n    \"@id\": model_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"TempModel\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"Prop1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Component\",\n        \"name\": \"Component1\",\n        \"schema\": component_id\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"Telemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\nnew_models = [temporary_component, temporary_model]\nmodels = service_client.create_models(new_models)\nprint('Created Models:')\nprint(models)\n```\n\n----------------------------------------\n\nTITLE: Using Different Metric Instruments with Azure Monitor in Python\nDESCRIPTION: This example demonstrates the use of various metric instruments in the OpenTelemetry SDK with Azure Monitor. It includes counter, observable counter, up-down counter, observable up-down counter, histogram, and observable gauge instruments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom typing import Iterable\n\nfrom opentelemetry import metrics\nfrom opentelemetry.metrics import CallbackOptions, Observation\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\n\nexporter = AzureMonitorMetricExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\nmetrics.set_meter_provider(MeterProvider(metric_readers=[reader]))\n\n# Create a namespaced meter\nmeter = metrics.get_meter_provider().get_meter(\"sample\")\n\n# Callback functions for observable instruments\ndef observable_counter_func(options: CallbackOptions) -> Iterable[Observation]:\n    yield Observation(1, {})\n\n\ndef observable_up_down_counter_func(\n    options: CallbackOptions,\n) -> Iterable[Observation]:\n    yield Observation(-10, {})\n\n\ndef observable_gauge_func(options: CallbackOptions) -> Iterable[Observation]:\n    yield Observation(9, {})\n\n# Counter\ncounter = meter.create_counter(\"counter\")\ncounter.add(1)\n\n# Async Counter\nobservable_counter = meter.create_observable_counter(\n    \"observable_counter\", [observable_counter_func]\n)\n\n# UpDownCounter\nup_down_counter = meter.create_up_down_counter(\"up_down_counter\")\nup_down_counter.add(1)\nup_down_counter.add(-5)\n\n# Async UpDownCounter\nobservable_up_down_counter = meter.create_observable_up_down_counter(\n    \"observable_up_down_counter\", [observable_up_down_counter_func]\n)\n\n# Histogram\nhistogram = meter.create_histogram(\"histogram\")\nhistogram.record(99.9)\n\n# Async Gauge\ngauge = meter.create_observable_gauge(\"gauge\", [observable_gauge_func])\n\n# Upon application exit, one last collection is made and telemetry records are\n# flushed automatically. # If you would like to flush records manually yourself,\n# you can call force_flush()\nmeter_provider.force_flush()\n```\n\n----------------------------------------\n\nTITLE: Handling ClientAuthenticationError in Azure App Configuration Python SDK\nDESCRIPTION: This Python snippet demonstrates how to catch and handle authentication failures (`ClientAuthenticationError`) when interacting with Azure App Configuration using the `DefaultAzureCredential`. It initializes an `AzureAppConfigurationClient`, attempts to retrieve a configuration setting, and prints an error message if authentication fails. Dependencies include `azure.core.exceptions`, `azure.identity`, and `azure.appconfiguration`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.exceptions import ClientAuthenticationError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\n# Create a secret client using the DefaultAzureCredential\nclient = AzureAppConfigurationClient(\"<my_endpoint_string>\", DefaultAzureCredential())\ntry:\n    client.get_configuration_setting(\"key\")\nexcept ClientAuthenticationError as ex:\n    print(f\"Authentication failed. {ex.message}\")\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure MySQLManagementClient using DefaultAzureCredential (Python)\nDESCRIPTION: This Python code demonstrates initializing the `MySQLManagementClient`. It utilizes `DefaultAzureCredential` from the `azure-identity` library for authentication, which relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) being correctly configured. The Azure subscription ID is retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable using the `os` module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/rdbms/azure-mgmt-rdbms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.rdbms.mysql import MySQLManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MySQLManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Iterating over Recognition Results in Azure Form Recognizer - Python\nDESCRIPTION: This snippet demonstrates how to iterate through the results of a document analysis using the Form Recognizer Python SDK, printing details about lines, words, selection marks, and tables. It expects a 'result' object containing analyzed page and table data, typically returned from a recognition call. Dependencies include the Azure Form Recognizer client libraries and a valid 'result' instance. Inputs are the 'result' from a recognition run; outputs are printed details about recognized elements, and the limitation is that the code is designed for objects matching the SDK's result structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# iterate over tables, lines, and selection marks on each page\nfor page in result.pages:\n    print(\"\\nLines found on page {}\".format(page.page_number))\n    for line in page.lines:\n        print(\"...Line '{}'\".format(line.content))\n    for word in page.words:\n        print(\n            \"...Word '{}' has a confidence of {}\".format(\n                word.content, word.confidence\n            )\n        )\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' and has a confidence of {}\".format(\n                selection_mark.state, selection_mark.confidence\n            )\n        )\n\nfor i, table in enumerate(result.tables):\n    print(\"\\nTable {} can be found on page:\".format(i + 1))\n    for region in table.bounding_regions:\n        print(\"...{}\".format(i + 1, region.page_number))\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index, cell.column_index, cell.content\n            )\n        )\nprint(\"-----------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Consuming Events with BlobCheckpointStore - Azure EventHubs - Python\nDESCRIPTION: This snippet illustrates how to consume events from Azure Event Hubs using the EventHubConsumerClient in conjunction with the BlobCheckpointStore for persistent checkpointing, all in asynchronous Python. It depends on the azure-eventhub and azure-eventhub-checkpointstoreblob-aio packages. Users must provide connection strings for Event Hubs and Azure Storage, specify the consumer group, event hub name, and blob container name. The code sets up asynchronous handlers, creates the checkpoint store and client, and demonstrates event checkpointing in the on_event handler. Input parameters include event hub and storage credentials; the output is an event consumer that maintains its checkpoint progress asynchronously.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\n\\nfrom azure.eventhub.aio import EventHubConsumerClient\\nfrom azure.eventhub.extensions.checkpointstoreblobaio import BlobCheckpointStore\\n\\nconnection_str = '\\u003c\\u003c CONNECTION STRING FOR THE EVENT HUBS NAMESPACE \\u003e\\u003e'\\nconsumer_group = '\\u003c\\u003c CONSUMER GROUP \\u003e\\u003e'\\neventhub_name = '\\u003c\\u003c NAME OF THE EVENT HUB \\u003e\\u003e'\\nstorage_connection_str = '\\u003c\\u003c CONNECTION STRING OF THE STORAGE \\u003e\\u003e'\\ncontainer_name = '\\u003c\\u003c STORAGE CONTAINER NAME\\u003e\\u003e'\\n\\nasync def on_event(partition_context, event):\\n    # Put your code here.\\n    await partition_context.update_checkpoint(event)  # Or update_checkpoint every N events for better performance.\\n\\nasync def main():\\n    checkpoint_store = BlobCheckpointStore.from_connection_string(\\n        storage_connection_str,\\n        container_name\\n    )\\n    client = EventHubConsumerClient.from_connection_string(\\n        connection_str,\\n        consumer_group,\\n        eventhub_name=eventhub_name,\\n        checkpoint_store=checkpoint_store,\\n    )\\n\\n    async with client:\\n        await client.receive(on_event)\\n\\nif __name__ == '__main__':\\n    loop = asyncio.get_event_loop()\\n    loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Deleting a Received Share with PurviewSharingClient - Python\nDESCRIPTION: Deleting a received share terminates the consumer's access to shared data. The snippet initiates an asynchronous delete with begin_delete and waits for completion with result. It expects a valid received_share object with an 'id' property.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport os\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\ndelete_received_share_request = client.received_shares.begin_delete(received_share_id=received_share['id'])\\ndelete_received_share_response = delete_received_share_request.result()\\nprint(delete_received_share_response)\n```\n\n----------------------------------------\n\nTITLE: Identifying Faces from LargePersonGroup with Azure Face SDK - Python\nDESCRIPTION: This code uses FaceClient to detect a face from an image and then identifies that face against a trained LargePersonGroup. It depends on a previously trained group and uses the latest detection and recognition models from azure-ai-vision-face.models. Inputs are the binary data of the target image and IDs of group and faces; outputs are printed identification results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith FaceClient(endpoint=endpoint, credential=AzureKeyCredential(key)) as face_client:\\n    # Detect the face from the target image.\\n    target_image_file_path = \"./samples/images/identification1.jpg\"\\n    detect_result = face_client.detect(\\n        read_file_content(target_image_file_path),\\n        detection_model=FaceDetectionModel.DETECTION03,\\n        recognition_model=FaceRecognitionModel.RECOGNITION04,\\n        return_face_id=True,\\n    )\\n    target_face_ids = list(f.face_id for f in detect_result)\\n\\n    # Identify the faces in the large person group.\\n    result = face_client.identify_from_large_person_group(\\n        face_ids=target_face_ids, large_person_group_id=large_person_group_id\\n    )\\n    for idx, r in enumerate(result):\\n        print(f\"----- Identification result: #{idx+1} -----\")\\n        print(f\"{r.as_dict()}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a KeyVaultAccessControlClient in Python\nDESCRIPTION: Demonstrates how to create a KeyVaultAccessControlClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.administration import KeyVaultAccessControlClient\n\nMANAGED_HSM_URL = os.environ[\"MANAGED_HSM_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyVaultAccessControlClient(vault_url=MANAGED_HSM_URL, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Getting an Azure Communication Room (Python)\nDESCRIPTION: This code retrieves information about a specific room using its room_id via the get_room method of the RoomsClient. It handles exceptions thrown by the service, allowing you to inspect error messages if the operation fails. The client and room_id must be set up beforehand.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    get_room_response = client.get_room(room_id=\"id of the room to get\")\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Queue Asynchronously\nDESCRIPTION: Creates a new queue in Azure Storage using asynchronous QueueClient. Requires a connection string and queue name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue.aio import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nawait queue.create_queue()\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token and Creating ShareServiceClient in Python\nDESCRIPTION: Python code to generate a Shared Access Signature (SAS) token and use it to create a ShareServiceClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.storage.fileshare import ShareServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\nsas_token = generate_account_sas(\n    account_name=\"<storage-account-name>\",\n    account_key=\"<account-access-key>\",\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1)\n)\n\nshare_service_client = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=sas_token)\n```\n\n----------------------------------------\n\nTITLE: Creating Document Intelligence Resource with Azure CLI\nDESCRIPTION: PowerShell commands to create a new resource group and Document Intelligence resource using Azure CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Create a new resource group to hold the Document Intelligence resource\n# if using an existing resource group, skip this step\naz group create --name <your-resource-name> --location <location>\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Create the Document Intelligence resource\naz cognitiveservices account create \\\n    --name <your-resource-name> \\\n    --resource-group <your-resource-group-name> \\\n    --kind FormRecognizer \\\n    --sku <sku> \\\n    --location <location> \\\n    --yes\n```\n\n----------------------------------------\n\nTITLE: Initializing the SmsClient (Python)\nDESCRIPTION: Demonstrates initializing the `SmsClient` using either a connection string or Azure Active Directory authentication via `DefaultAzureCredential`. An initialized client is required to send SMS messages. Using `DefaultAzureCredential` requires environment variables `AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, and `AZURE_CLIENT_SECRET` to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.sms import SmsClient\nfrom azure.identity import DefaultAzureCredential\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nsms_client = SmsClient.from_connection_string(connection_string)\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\nsms_client = SmsClient(endpoint, DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Complete Cancer Profiling Example with Azure Health Insights\nDESCRIPTION: Complete Python example demonstrating how to use the Cancer Profiling client to infer cancer attributes from unstructured clinical documents, including imports, client initialization, and creating a patient record.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nimport datetime\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.cancerprofiling.aio import CancerProfilingClient\nfrom azure.healthinsights.cancerprofiling import models\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\n# Create an Onco Phenotype client\n# <client>\ncancer_profiling_client = CancerProfilingClient(endpoint=ENDPOINT,\n                                                credential=AzureKeyCredential(KEY))\n# </client>\n\n# Construct patient\n# <PatientConstructor>\npatient1 = models.PatientRecord(id=\"patient_id\")\n# </PatientConstructor>\n\n# Add document list\n```\n\n----------------------------------------\n\nTITLE: Enabling Client-Level Debug Logging for Azure SDK in Python\nDESCRIPTION: This snippet configures detailed DEBUG level logging for all operations performed by an Azure Digital Twins client instance. It uses the standard Python `logging` library to create a logger, sets its level to DEBUG, and adds a stream handler to output logs to stdout. When initializing the `DigitalTwinsClient`, the `logging_enable=True` argument is passed to activate logging for the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_digitaltwins_get.py\nimport sys\nimport logging\nfrom azure.digitaltwins.core import DigitalTwinsClient # Assuming import\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Assume url and credential are defined\nurl = \"<YOUR_INSTANCE_URL>\"\ncredential = \"<YOUR_CREDENTIAL_OBJECT>\"\n\n# Create service client and enable logging for all operations\nservice_client = DigitalTwinsClient(url, credential, logging_enable=True)\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Maps Timezone Client with Microsoft Entra ID - Python\nDESCRIPTION: Demonstrates client authentication for Azure Maps using Microsoft Entra ID via Azure Identity's DefaultAzureCredential. The code assumes that the required Microsoft Entra application is registered and the relevant environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET) are set. The sample instantiates the MapsTimeZoneClient for further use with role-based access control.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.maps.timezone import MapsTimeZoneClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\ntimezone_client = MapsTimeZoneClient(credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Querying Ingested Satellite Scenes using Azure FarmBeats SDK in Python\nDESCRIPTION: This snippet demonstrates how to query for satellite scenes ingested into Azure FarmBeats. It initializes the `FarmBeatsClient` using `DefaultAzureCredential`, specifies the `party_id` and `boundary_id`, and then calls the `list` method on `client.scenes`. The query is filtered by party, boundary, start/end date times, provider ('Microsoft'), and source ('Sentinel_2_L2A'). It iterates through the returned scenes and prints the names of the image bands available for each scene. Assumes `start_date_time` and `end_date_time` variables are defined elsewhere.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\nfrom datetime import datetime\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"boundary-1\"\n\nscenes = client.scenes.list(\n    party_id=party_id,\n    boundary_id=boundary_id,\n    start_date_time=start_date_time,\n    end_date_time=end_date_time,\n    provider=\"Microsoft\",\n    source=\"Sentinel_2_L2A\"\n)\n\nfor scene in scenes:\n    bands = [image_file[\"name\"] for image_file in scene[\"imageFiles\"]]\n    bands_str = \", \".join(bands)\n    print(f\"Scene has the bands {bands_str}\")\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Client with DefaultAzureCredential - Python\nDESCRIPTION: This Python snippet demonstrates setting up authentication for the Azure SDK client using the DefaultAzureCredential from the azure-identity library. It shows how to import the required modules, retrieve the Azure subscription ID from environment variables, and instantiate the client class (with placeholders for the package and client name). Required dependencies include the azure-identity package and the specific Azure SDK package being used. Inputs are environment variables such as AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and optionally AZURE_SUBSCRIPTION_ID. The output is an authenticated client object ready to interact with Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/packaging_tools/templates/packaging_files/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\\nfrom {{package_name | replace(\"-\", \".\")}}{{sub_namespace}} import {{ title }}\\nimport os\\n\\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\\nclient = {{ title }}(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Ingesting Satellite Data in FarmBeats\nDESCRIPTION: Example demonstrating how to trigger a satellite data ingestion job for a specific boundary and time period.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\nfrom isodate.tzinfo import Utc\nfrom datetime import datetime\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"westlake-boundary-1\"\nstart_date_time = \"2021-01-01T20:08:10.137Z\"\nend_date_time = \"2021-06-06T20:08:10.137Z\"\n\n# Queue the job\nsatellite_job_poller = client.scenes.begin_create_satellite_data_ingestion_job(\n    job_id=job_id,\n    job={\n        \"boundaryId\": boundary_id,\n        \"endDateTime\": end_date_time,\n        \"partyId\": party_id,\n        \"startDateTime\": start_date_time,\n        \"provider\": \"Microsoft\",\n        \"source\": \"Sentinel_2_L2A\",\n        \"data\": {\n            \"imageNames\": [\n                \"NDVI\"\n            ],\n            \"imageFormats\": [\n                \"TIF\"\n            ],\n            \"imageResolution\": [10]\n        },\n        \"name\": \"<string>\",\n        \"description\": \"<string>\"\n    }\n)\n\n# Wait for the job to terminate\nsatellite_job = satellite_job_poller.result()\njob_status = satellite_job_poller.status()\n```\n\n----------------------------------------\n\nTITLE: Geocoding an Address using MapsSearchClient - Python\nDESCRIPTION: This example implements address geocoding using MapsSearchClient, converting a user-supplied address into geographic coordinates. It handles authentication with a subscription key, executes the geocode operation, and extracts longitude and latitude from the response. Error handling for HTTP response issues is included. It requires 'azure.core.credentials', 'azure.maps.search', and 'azure.core.exceptions' packages, as well as a valid Azure Maps subscription key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef geocode():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.search import MapsSearchClient\n\n    maps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_search_client.get_geocoding(query=\"15127 NE 24th Street, Redmond, WA 98052\")\n        if result.get('features', False):\n            coordinates = result['features'][0]['geometry']['coordinates']\n            longitude = coordinates[0]\n            latitude = coordinates[1]\n\n            print(longitude, latitude)\n        else:\n            print(\"No results\")\n\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    geocode()\n```\n\n----------------------------------------\n\nTITLE: Translating Different Text Types (Plain or HTML) - Azure Text Translator - Python\nDESCRIPTION: This code demonstrates translating an HTML-formatted string by specifying the text_type as HTML, ensuring the translator interprets the markup correctly. Input should be a well-formed HTML element; output translation will respect the text type. Handles detection and translation with appropriate error management. Inputs: text_type (HTML), target languages, list of HTML source texts. Outputs: detected language and translated HTML string(s).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    text_type = TextType.HTML\\n    to_language = [\\\"cs\\\"]\\n    input_text_elements = [\\\"<html><body>This <b>is</b> a test.</body></html>\\\"]\\n\\n    response = text_translator.translate(body=input_text_elements, to_language=to_language, text_type=text_type)\\n    translation = response[0] if response else None\\n\\n    if translation:\\n        detected_language = translation.detected_language\\n        if detected_language:\\n            print(\\n                f\\\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\\\"\\n            )\\n        for translated_text in translation.translations:\\n            print(f\\\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\\\")\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with Filter in Python\nDESCRIPTION: Demonstrates how to create and use filters for querying entities in Azure Tables. This example shows filtering on PartitionKey and RowKey using parameterized queries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparameters = {\n    \"pk\": PartitionKey,\n    \"rk\": RowKey\n}\nquery_filter = \"PartitionKey eq @pk and RowKey eq @rk\"\ntable_client.query_entities(query_filter, parameters=parameters)\n```\n\n----------------------------------------\n\nTITLE: Updating a Role Definition in Azure Key Vault (Python)\nDESCRIPTION: Demonstrates how to update an existing role definition with new permissions using KeyVaultAccessControlClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnew_permissions = [\n    KeyVaultPermission(\n        data_actions=[KeyVaultDataAction.READ_HSM_KEY],\n        not_data_actions=[KeyVaultDataAction.CREATE_HSM_KEY]\n    )\n]\nunique_definition_name = role_definition.name\nupdated_definition = client.set_role_definition(\n    scope=scope, name=unique_definition_name, role_name=role_name, permissions=new_permissions\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Certificate Properties in Azure Key Vault using Python\nDESCRIPTION: This snippet demonstrates how to list the properties of all certificates in an Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificates = certificate_client.list_properties_of_certificates()\n\nfor certificate in certificates:\n    # this list doesn't include versions of the certificates\n    print(certificate.name)\n```\n\n----------------------------------------\n\nTITLE: Setting Azure SDK Tracing Implementation via Environment Variable\nDESCRIPTION: This command demonstrates how to configure Azure SDKs to use OpenTelemetry for tracing by setting the `AZURE_SDK_TRACING_IMPLEMENTATION` environment variable to `opentelemetry`. This is an alternative to setting the configuration in code and requires recent versions of `azure-core` and `azure-core-tracing-opentelemetry`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_SDK_TRACING_IMPLEMENTATION=opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Generic TypedDict Example\nDESCRIPTION: Example demonstrating usage of generic TypedDict with type variables, allowing for flexible typing of dictionary values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import TypedDict\nfrom typing import Generic, TypeVar, List\n\nT = TypeVar(\"T\")\n\n\nclass Employee(TypedDict, Generic[T]):\n    name: str\n    title: str\n    id: int\n    current: bool\n    additional_info: List[T]\n\nemployee = Employee[str](name=\"krista\", title=\"swe\", id=123, current=True, additional_info=[\"Redmond\"])\n```\n\n----------------------------------------\n\nTITLE: Retrieving a secret in azure-keyvault-secrets\nDESCRIPTION: Retrieves the latest version of a secret using the get_secret method of SecretClient in the new azure-keyvault-secrets package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsecret = secret_client.get_secret(name=\"secret-name\")\n\nprint(secret.name)\nprint(secret.value)\n\n# get the version of the secret\nsecret_version = secret.properties.version\n```\n\n----------------------------------------\n\nTITLE: Retrieving Finding Inference from Radiology Insights in Python\nDESCRIPTION: This snippet demonstrates how to iterate through patient results and identify finding inferences in radiology insights data. It uses the RadiologyInsightsInferenceType enum to check the inference type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n            counter = 0\n            for ri_inference in patient_result.inferences:\n                if ri_inference.kind == models.RadiologyInsightsInferenceType.FINDING:\n                    counter += 1\n                    print(f\"Finding Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Handling ClientAuthenticationError with Azure Identity in Python\nDESCRIPTION: This snippet demonstrates how to handle the ClientAuthenticationError exception when using Azure Identity to authenticate with Azure Key Vault. It sets up a SecretClient using DefaultAzureCredential and attempts to retrieve a secret, capturing authentication failures caused by credential issues. Dependencies include the azure.identity, azure.core.exceptions, and azure.keyvault.secrets modules; ensure these are installed and correctly configured. The client URI, as well as the secret name, must be supplied; if authentication fails, the error message will be printed for further diagnosis.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import ClientAuthenticationError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\n# Create a secret client using the DefaultAzureCredential\nclient = SecretClient(\"https://myvault.vault.azure.net/\", DefaultAzureCredential())\ntry:\n    secret = client.get_secret(\"secret1\")\nexcept ClientAuthenticationError as ex:\n    print(ex.message)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceProvisioningClient from Connection String in Python\nDESCRIPTION: Shows how to create a `DeviceProvisioningClient` instance using a DPS connection string. This method conveniently bundles the endpoint and authentication key (Shared Access Key). The connection string is passed to the `from_connection_string` class method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\nconnection_string = \"Hostname=https;SharedAccessKeyName=xxxx;SharedAccessKey=xxxx\"\nclient = DeviceProvisioningClient.from_connection_string(connection_string=connection_string)\n```\n\n----------------------------------------\n\nTITLE: Authenticating PostgreSQL Management Client with Azure Credentials\nDESCRIPTION: Python code demonstrating how to authenticate the PostgreSQL Management Client using DefaultAzureCredential. Requires environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.postgresqlflexibleservers import PostgreSQLManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PostgreSQLManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Safety Client with API Key\nDESCRIPTION: Python code to create ContentSafetyClient and BlocklistClient instances using an API key credential\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.contentsafety import ContentSafetyClient, BlocklistClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\ncontent_safety_client = ContentSafetyClient(endpoint, credential)\nblocklist_client = BlocklistClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Generating Image Captions from a URL with Azure ImageAnalysisClient (Python)\nDESCRIPTION: This snippet demonstrates how to generate a caption for an image accessible via a public URL using the ImageAnalysisClient in Python. It calls analyze_from_url with the image URL, requests the CAPTION visual feature, and can use gender-neutral captions. Dependencies include azure-ai-vision-imageanalysis and a configured client. Input: image URL string. Output: prints the generated caption and its confidence. Requires internet access and a public image link.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get a caption for the image. This will be a synchronously (blocking) call.\\nresult = client.analyze_from_url(\\n    image_url=\\\"https://aka.ms/azsdk/image-analysis/sample.jpg\\\",\\n    visual_features=[VisualFeatures.CAPTION],\\n    gender_neutral_caption=True,  # Optional (default is False)\\n)\\n\\n# Print caption results to the console\\nprint(\\\"Image analysis results:\\\")\\nprint(\\\" Caption:\\\")\\nif result.caption is not None:\\n    print(f\\\"   '{result.caption.text}', Confidence {result.caption.confidence:.4f}\\\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Communication RoomsClient (Python)\nDESCRIPTION: This snippet shows how to initialize a RoomsClient using a connection string to interact with Azure Communication Rooms services. The RoomsClient is the primary interface for all room-related operations. Ensure that the Azure SDK package is installed and that you have a valid Azure Communication Services resource connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.rooms import RoomsClient\n\nclient = RoomsClient.from_connection_string(conn_str='<connection_str>' )\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure App Configuration Management Client with Default Credentials - Python\nDESCRIPTION: This Python snippet illustrates how to instantiate the AppConfigurationManagementClient using DefaultAzureCredential for authentication. It requires the \"azure-identity\" and \"azure-mgmt-appconfiguration\" Python packages, as well as the AZURE_SUBSCRIPTION_ID environment variable set to a valid Azure Subscription ID. The dependencies must already be installed via pip as shown in previous steps, and prior authentication environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET) must be configured. The code initializes the client and is a foundational pattern for executing further management operations with Azure App Configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-mgmt-appconfiguration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appconfiguration import AppConfigurationManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AppConfigurationManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Listing and Reading Blobs from an Azure Container Using Azure Blob Storage SDK in Python\nDESCRIPTION: This snippet illustrates how to list blobs in a given Azure Blob Storage container and download and parse each blob's contents as JSON objects. It obtains a container client, enumerates blobs, downloads each blob's data, decodes it, and prints the resulting Python dictionary. This approach requires the azure-storage-blob package and assumes that blob contents are valid JSON strings. It is ideally used to inspect previously uploaded analytics results or model logs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncontainer = service_client.get_container_client(output_container_name)\\n    blob_list = container.list_blobs()\\n    for blob in blob_list:\\n        body = json.loads(container.download_blob(blob.name).readall().decode('utf8'))\\n        print(body)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Async Azure Cosmos DB Client Manually in Python\nDESCRIPTION: This snippet demonstrates the manual setup and usage of the asynchronous Azure Cosmos DB client (`azure.cosmos.aio.CosmosClient`). It defines an async function `create_products` that initializes the async client, manually calls `await client.__aenter__()` to cache account info, gets database and container clients, upserts items in a loop using `await`, and finally manually closes the client with `await client.close()`. This manual approach is discouraged in favor of context managers. Requires `azure.cosmos.aio` and `os`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos.aio import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nDATABASE_NAME = 'testDatabase'\nCONTAINER_NAME = 'products'    \n\nasync def create_products():\n    client = CosmosClient(URL, credential=KEY)\n    await client.__aenter__() # this piece is important for the SDK to cache account information\n    database = client.get_database_client(DATABASE_NAME)\n    container = database.get_container_client(CONTAINER_NAME)\n    for i in range(10):\n        await container.upsert_item({\n                'id': 'item{0}'.format(i),\n                'productName': 'Widget',\n                'productModel': 'Model {0}'.format(i)\n            }\n        )\n    await client.close() # the async client must be closed manually if it's not initialized in a with statement\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing ConversationAuthoringClient with API Key - Python\nDESCRIPTION: Creates a ConversationAuthoringClient for managing and authoring CLU resources, such as creating projects and deploying models. Requires the azure-core and azure-ai-language-conversations.authoring modules. Needs the endpoint URL and API key as input parameters; yields a client capable of language resource authoring operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations.authoring import ConversationAuthoringClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api-key>\")\nclient = ConversationAuthoringClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure ML Client Library with pip\nDESCRIPTION: Commands to install the Azure ML client library and the Azure Identity package using pip. These are the basic requirements for working with Azure Machine Learning in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-ml\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Extracting Layout with Azure Document Intelligence Client in Python\nDESCRIPTION: This snippet demonstrates how to use the Azure Document Intelligence SDK for Python to extract the layout, including text lines, words, selection marks, text styles, paragraphs, and table structures, from a document. Required dependencies are the azure-core and azure-ai-documentintelligence libraries, along with a valid endpoint and API key set as environment variables. The code performs asynchronous analysis using the 'prebuilt-layout' model, iterates through the results, and outputs detailed information about layout elements and their bounding polygons. Inputs are document files, and outputs include printed details about layout elements. Limitations include requiring installation of the Azure SDK, and access to Document Intelligence resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\\nfrom azure.ai.documentintelligence.models import AnalyzeResult\\n\\ndef _in_span(word, spans):\\n    for span in spans:\\n        if word.span.offset >= span.offset and (word.span.offset + word.span.length) <= (span.offset + span.length):\\n            return True\\n    return False\\n\\ndef _format_polygon(polygon):\\n    if not polygon:\\n        return \\\"N/A\\\"\\n    return \\\", \\\\ \".join([f\\\"[{polygon[i]}, {polygon[i + 1]}]\\\" for i in range(0, len(polygon), 2)])\\n\\nendpoint = os.environ[\\\"DOCUMENTINTELLIGENCE_ENDPOINT\\\"]\\nkey = os.environ[\\\"DOCUMENTINTELLIGENCE_API_KEY\\\"]\\n\\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\\nwith open(path_to_sample_documents, \\\"rb\\\") as f:\\n    poller = document_intelligence_client.begin_analyze_document(\\\"prebuilt-layout\\\", body=f)\\nresult: AnalyzeResult = poller.result()\\n\\nif result.styles and any([style.is_handwritten for style in result.styles]):\\n    print(\\\"Document contains handwritten content\\\")\\nelse:\\n    print(\\\"Document does not contain handwritten content\\\")\\n\\nfor page in result.pages:\\n    print(f\\\"----Analyzing layout from page #{page.page_number}----\\\")\\n    print(f\\\"Page has width: {page.width} and height: {page.height}, measured with unit: {page.unit}\\\")\\n\\n    if page.lines:\\n        for line_idx, line in enumerate(page.lines):\\n            words = []\\n            if page.words:\\n                for word in page.words:\\n                    print(f\\\"......Word '{word.content}' has a confidence of {word.confidence}\\\")\\n                    if _in_span(word, line.spans):\\n                        words.append(word)\\n            print(\\n                f\\\"...Line # {line_idx} has word count {len(words)} and text '{line.content}' \\\"\\n                f\\\"within bounding polygon '{_format_polygon(line.polygon)}'\\\"\\n            )\\n\\n    if page.selection_marks:\\n        for selection_mark in page.selection_marks:\\n            print(\\n                f\\\"Selection mark is '{selection_mark.state}' within bounding polygon \\\"\\n                f\\\"'{_format_polygon(selection_mark.polygon)}' and has a confidence of {selection_mark.confidence}\\\"\\n            )\\n\\nif result.paragraphs:\\n    print(f\\\"----Detected #{len(result.paragraphs)} paragraphs in the document----\\\")\\n    # Sort all paragraphs by span's offset to read in the right order.\\n    result.paragraphs.sort(key=lambda p: (p.spans.sort(key=lambda s: s.offset), p.spans[0].offset))\\n    print(\\\"-----Print sorted paragraphs-----\\\")\\n    for paragraph in result.paragraphs:\\n        if not paragraph.bounding_regions:\\n            print(f\\\"Found paragraph with role: '{paragraph.role}' within N/A bounding region\\\")\\n        else:\\n            print(f\\\"Found paragraph with role: '{paragraph.role}' within\\\")\\n            print(\\n                \\\", \\\\ \".join(\\n                    f\\\" Page #{region.page_number}: {_format_polygon(region.polygon)} bounding region\\\"\\n                    for region in paragraph.bounding_regions\\n                )\\n            )\\n        print(f\\\"...with content: '{paragraph.content}'\\\")\\n        print(f\\\"...with offset: {paragraph.spans[0].offset} and length: {paragraph.spans[0].length}\\\")\\n\\nif result.tables:\\n    for table_idx, table in enumerate(result.tables):\\n        print(f\\\"Table # {table_idx} has {table.row_count} rows and \\\" f\\\"{table.column_count} columns\\\")\\n        if table.bounding_regions:\\n            for region in table.bounding_regions:\\n                print(\\n                    f\\\"Table # {table_idx} location on page: {region.page_number} is {_format_polygon(region.polygon)}\\\"\\n                )\\n        for cell in table.cells:\\n            print(f\\\"...Cell[{cell.row_index}][{cell.column_index}] has text '{cell.content}'\\\")\\n            if cell.bounding_regions:\\n                for region in cell.bounding_regions:\\n                    print(\\n                        f\\\"...content on page {region.page_number} is within bounding polygon '{_format_polygon(region.polygon)}'\\\"\\n                    )\\n\\nprint(\\\"----------------------------------------\\\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracer and Console Exporter in Python\nDESCRIPTION: This snippet sets up a basic OpenTelemetry tracing environment in Python. It initializes a `ConsoleSpanExporter` to print traces to the console, configures a `TracerProvider`, obtains a tracer instance, and registers the exporter using a `SimpleSpanProcessor`. This setup is required before instrumenting code or using SDKs configured for OpenTelemetry tracing. Requires `opentelemetry-python` version 1.0.0 or higher.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor  # this requires opentelemetry >= 1.0.0\n\n# Simple console exporter\nexporter = ConsoleSpanExporter()\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\ntrace.get_tracer_provider().add_span_processor(\n    SimpleSpanProcessor(exporter)\n)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Blobs using ContainerClient in Python\nDESCRIPTION: This snippet demonstrates how to list blobs in a container using the ContainerClient. It initializes the client and iterates through the list of blobs, printing their names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import ContainerClient\n\ncontainer = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nblob_list = container.list_blobs()\nfor blob in blob_list:\n    print(blob.name + '\\n')\n```\n\n----------------------------------------\n\nTITLE: Streaming Agent Events with Iteration in Python\nDESCRIPTION: Creates a stream connection to an agent and processes different event types including message deltas, thread messages, runs, steps, and errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nwith project_client.agents.create_stream(thread_id=thread.id, agent_id=agent.id) as stream:\n\n    for event_type, event_data, _ in stream:\n\n        if isinstance(event_data, MessageDeltaChunk):\n            print(f\"Text delta received: {event_data.text}\")\n\n        elif isinstance(event_data, ThreadMessage):\n            print(f\"ThreadMessage created. ID: {event_data.id}, Status: {event_data.status}\")\n\n        elif isinstance(event_data, ThreadRun):\n            print(f\"ThreadRun status: {event_data.status}\")\n\n        elif isinstance(event_data, RunStep):\n            print(f\"RunStep type: {event_data.type}, Status: {event_data.status}\")\n\n        elif event_type == AgentStreamEvent.ERROR:\n            print(f\"An error occurred. Data: {event_data}\")\n\n        elif event_type == AgentStreamEvent.DONE:\n            print(\"Stream completed.\")\n            break\n\n        else:\n            print(f\"Unhandled Event Type: {event_type}, Data: {event_data}\")\n```\n\n----------------------------------------\n\nTITLE: Building Custom Document Model with Azure Document Intelligence in Python\nDESCRIPTION: Demonstrates how to build a custom document model using the DocumentIntelligenceAdministrationClient. It creates a model with a unique ID, specifies build mode and data source, and prints details of the created model including recognized document types and fields.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom azure.ai.documentintelligence import DocumentIntelligenceAdministrationClient\nfrom azure.ai.documentintelligence.models import (\n    DocumentBuildMode,\n    BuildDocumentModelRequest,\n    AzureBlobContentSource,\n    DocumentModelDetails,\n)\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\ncontainer_sas_url = os.environ[\"DOCUMENTINTELLIGENCE_STORAGE_CONTAINER_SAS_URL\"]\n\ndocument_intelligence_admin_client = DocumentIntelligenceAdministrationClient(endpoint, AzureKeyCredential(key))\npoller = document_intelligence_admin_client.begin_build_document_model(\n    BuildDocumentModelRequest(\n        model_id=str(uuid.uuid4()),\n        build_mode=DocumentBuildMode.TEMPLATE,\n        azure_blob_source=AzureBlobContentSource(container_url=container_sas_url),\n        description=\"my model description\",\n    )\n)\nmodel: DocumentModelDetails = poller.result()\n\nprint(f\"Model ID: {model.model_id}\")\nprint(f\"Description: {model.description}\")\nprint(f\"Model created on: {model.created_date_time}\")\nprint(f\"Model expires on: {model.expiration_date_time}\")\nif model.doc_types:\n    print(\"Doc types the model can recognize:\")\n    for name, doc_type in model.doc_types.items():\n        print(f\"Doc Type: '{name}' built with '{doc_type.build_mode}' mode which has the following fields:\")\n        if doc_type.field_schema:\n            for field_name, field in doc_type.field_schema.items():\n                if doc_type.field_confidence:\n                    print(\n                        f\"Field: '{field_name}' has type '{field['type']}' and confidence score \"\n                        f\"{doc_type.field_confidence[field_name]}\"\n                    )\n```\n\n----------------------------------------\n\nTITLE: Authenticating NotificationMessagesClient with AAD (Python)\nDESCRIPTION: This snippet demonstrates how to create an instance of `NotificationMessagesClient` using an Azure Active Directory token for authentication. It imports the necessary classes and uses `DefaultAzureCredential` from the `azure-identity` library, which typically requires environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) to be set. The client requires the service endpoint URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-messages/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.communication.messages import NotificationMessagesClient\n>>> from azure.identity import DefaultAzureCredential\n>>> client = NotificationMessagesClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Calculating Route Range\nDESCRIPTION: Python code demonstrating how to calculate reachable locations based on time budget.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.route import MapsRouteClient\n\nroute_range_result = client.get_route_range(coordinates=(47.60323, -122.33028), time_budget_in_sec=6000);\n```\n\n----------------------------------------\n\nTITLE: Estimating Azure Monitor Data Size - Python\nDESCRIPTION: Async function to estimate the size of data that will be returned by Azure Monitor Logs queries. Uses KQL summarize operations to calculate row counts and data size estimates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def estimate_data_size(query: str, end_time: datetime, days_back: int):\n    query = f\"{query} | summarize n_rows = count(), estimate_data_size = sum(estimate_data_size(*))\"\n    start_time = end_time - timedelta(days=days_back)\n    response = await client.query_workspace(\n        workspace_id=LOGS_WORKSPACE_ID,\n        query=query,\n        timespan=(start_time, end_time),\n    )\n\n    if response.status == LogsQueryStatus.PARTIAL:\n        raise Exception(f\"Error estimating data size: {response.partial_error}\")\n\n    columns = response.tables[0].columns\n    rows = response.tables[0].rows\n    df = pd.DataFrame(data=rows, columns=columns)\n    return df\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Queues Package with pip\nDESCRIPTION: Use pip to install the Azure Storage Queues client library for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-queue\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure HDInsight Management Client in Python\nDESCRIPTION: Demonstrates how to authenticate with the Azure HDInsight Management Client using DefaultAzureCredential. This authentication method relies on environment variables for client credentials and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsight/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hdinsight import HDInsightManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HDInsightManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Creating IoT Operations Management Client in Python\nDESCRIPTION: Python code to authenticate and create an IoT Operations Management client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iotoperations/azure-mgmt-iotoperations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.iotoperations import IoTOperationsMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = IoTOperationsMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Analyzing PDFs and Embedding Searchable Text with Azure Document Intelligence Client in Python\nDESCRIPTION: This snippet demonstrates how to convert an analog (image-based) PDF document into a searchable PDF with embedded text using the Azure Document Intelligence SDK for Python and the 'prebuilt-read' model. The code initiates document analysis with PDF output options, retrieves the resulting PDF, and saves the output file for subsequent use, such as in search or LLM chat applications. Dependencies are azure-core, azure-ai-documentintelligence, and appropriate Azure Document Intelligence credentials. Input is a PDF file, and output is a new PDF written to disk. Only supported for the 'prebuilt-read' model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\\nfrom azure.ai.documentintelligence.models import AnalyzeOutputOption, AnalyzeResult\\n\\nendpoint = os.environ[\\\"DOCUMENTINTELLIGENCE_ENDPOINT\\\"]\\nkey = os.environ[\\\"DOCUMENTINTELLIGENCE_API_KEY\\\"]\\n\\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\\n\\nwith open(path_to_sample_documents, \\\"rb\\\") as f:\\n    poller = document_intelligence_client.begin_analyze_document(\\n        \\\"prebuilt-read\\\",\\n        body=f,\\n        output=[AnalyzeOutputOption.PDF],\\n    )\\nresult: AnalyzeResult = poller.result()\\noperation_id = poller.details[\\\"operation_id\\\"]\\n\\nresponse = document_intelligence_client.get_analyze_result_pdf(model_id=result.model_id, result_id=operation_id)\\nwith open(\\\"analyze_result.pdf\\\", \\\"wb\\\") as writer:\\n    writer.writelines(response)\n```\n\n----------------------------------------\n\nTITLE: Removing Participants from a Room (Python)\nDESCRIPTION: This code removes specified participants from an existing room. It constructs a list of CommunicationUserIdentifier objects to pass to remove_participants, and handles errors via exception handling. The client, room_id, and MRI identities to be removed must be defined beforehand.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncommunication_identifiers = [CommunicationUserIdentifier(\"<ACS User MRI identity 2>\")]\n\ntry:\n    remove_participants_response = client.remove_participants(\n        room_id=\"id of the room to remove participants\",\n        participants=communication_identifiers\n    )\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Setting up VM Dependencies for Azure Cosmos DB SDK Testing in Ubuntu\nDESCRIPTION: A series of commands to install required packages and create a virtual environment for the Azure Cosmos DB SDK testing. This includes updating apt, installing Python dependencies, and creating a virtual environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/tests/workloads/dev.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install python3-pip\nsudo apt-get install python3.12-venv\npython3 -m venv azure-cosmosdb-sdk-environment\nsource azure-cosmosdb-sdk-environment/bin/activate\npip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple CloudEvents Batch to Azure Event Grid Namespace Topic in Python\nDESCRIPTION: This snippet shows how to send multiple CloudEvents in a single batch operation to an Azure Event Grid namespace topic for improved performance compared to sending events individually. It creates a list of `CloudEvent` objects, initializes the `EventGridPublisherClient` with endpoint, credentials, and namespace topic, and then sends the entire list using the `client.send` method. Environment variables are used for configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.messaging import CloudEvent\nfrom azure.eventgrid import EventGridPublisherClient\n\nkey = os.environ[\"EVENTGRID_KEY\"]\nendpoint = os.environ[\"EVENTGRID_ENDPOINT\"]\ntopic_name = os.environ[\"EVENTGRID_TOPIC_NAME\"]\n\nevent0 = CloudEvent(\n    type=\"Azure.Sdk.Sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team\": \"azure-sdk\"}\n)\nevent1 = CloudEvent(\n    type=\"Azure.Sdk.Sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team2\": \"azure-eventgrid\"}\n)\n\nevents = [event0, event1]\n\ncredential = AzureKeyCredential(key)\nclient = EventGridPublisherClient(endpoint, credential, namespace_topic=topic_name)\n\nclient.send(events)\n```\n\n----------------------------------------\n\nTITLE: Listing Incoming Digital Twin Relationships in Python\nDESCRIPTION: This snippet shows how to list all incoming relationships targeting a specific Azure Digital Twin. It utilizes the `list_incoming_relationships` method of the service client, providing the digital twin's ID (`digital_twin_id`). The code iterates over the resulting list of incoming relationships and prints each one.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_incoming_relationships_list\nincoming_relationships = service_client.list_incoming_relationships(digital_twin_id)\nfor incoming_relationship in incoming_relationships:\n    print(incoming_relationship)\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Image Embeddings using ImageEmbeddingsClient in Python\nDESCRIPTION: Demonstrates how to obtain image embeddings using the `ImageEmbeddingsClient` with Azure Key authentication. It involves initializing the client, creating `ImageEmbeddingInput` by loading an image file (e.g., \"sample1.png\"), calling the `embed` method, and processing the response data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.ai.inference import ImageEmbeddingsClient\nfrom azure.ai.inference.models import ImageEmbeddingInput\nfrom azure.core.credentials import AzureKeyCredential\n\nclient = ImageEmbeddingsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponse = client.embed(input=[ImageEmbeddingInput.load(image_file=\"sample1.png\", image_format=\"png\")])\n\nfor item in response.data:\n    length = len(item.embedding)\n    print(\n        f\"data[{item.index}]: length={length}, [{item.embedding[0]}, {item.embedding[1]}, \"\n        f\"..., {item.embedding[length-2]}, {item.embedding[length-1]}]\"\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing ClinicalMatchingClient with API Key Authentication\nDESCRIPTION: Python code that demonstrates how to create a ClinicalMatchingClient instance using API key authentication with AzureKeyCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.clinicalmatching import ClinicalMatchingClient\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\ntrial_matcher_client = ClinicalMatchingClient(endpoint=ENDPOINT, credential=AzureKeyCredential(KEY))\n```\n\n----------------------------------------\n\nTITLE: Using uAMQP as Transport Layer for Azure Event Hubs (Python)\nDESCRIPTION: This snippet demonstrates how to configure Azure Event Hubs clients to use uAMQP as the underlying transport layer instead of the default pure Python AMQP implementation. It shows how to create producer and consumer clients with the uamqp_transport parameter set to True for backward compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.eventhub import EventHubProducerClient, EventHubConsumerClient\nfrom azure.identity import DefaultAzureCredential\n\nfully_qualified_namespace = '<< EVENT HUBS FULLY QUALIFIED NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nclient = EventHubProducerClient(\n    fully_qualified_namespace=fully_qualified_namespace,\n    eventhub_name=eventhub_name,\n    credential=DefaultAzureCredential(),\n    uamqp_transport=True\n)\nclient = EventHubConsumerClient(\n    fully_qualified_namespace=fully_qualified_namespace,\n    eventhub_name=eventhub_name,\n    credential=DefaultAzureCredential(),\n    consumer_group=consumer_group,\n    uamqp_transport=True\n)\n```\n\n----------------------------------------\n\nTITLE: Resolving Azure Key Vault References with Credentials - Azure App Configuration Python Provider - Python\nDESCRIPTION: Shows how to resolve Key Vault references in config using AzureAppConfigurationKeyVaultOptions with a DefaultAzureCredential. All referenced secrets are fetched from Key Vault using the given identity, assuming adequate permissions. Dependencies: 'azure.appconfiguration.provider', 'azure.identity'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load, AzureAppConfigurationKeyVaultOptions\nfrom azure.identity import DefaultAzureCredential\n\nkey_vault_options = AzureAppConfigurationKeyVaultOptions(credential=DefaultAzureCredential())\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), key_vault_options=key_vault_options)\n```\n\n----------------------------------------\n\nTITLE: Getting Air Quality Daily Forecasts\nDESCRIPTION: Example showing how to get daily air quality forecasts for a specific location using coordinates. Returns forecasts for the next one to seven days including pollutant levels, risks, and precautions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_air_quality_daily_forecasts():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_air_quality_daily_forecasts(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_air_quality_daily_forecasts()\n```\n\n----------------------------------------\n\nTITLE: Listing Tags with Anonymous Access\nDESCRIPTION: List tags for a specific image using anonymous access without authentication\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(endpoint) as anon_client:\n    manifest = anon_client.get_manifest_properties(\"library/hello-world\", \"latest\")\n    if manifest.tags:\n        print(f\"Tags of {manifest.repository_name}: \")\n        # Iterate through all the tags\n        for tag in manifest.tags:\n            print(tag)\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Azure MSI Management Client\nDESCRIPTION: Example code for authenticating to the Azure MSI Management Client using DefaultAzureCredential from azure-identity. This demonstrates how to create a client instance with proper authentication after setting up environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-msi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.msi import ManagedServiceIdentityClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ManagedServiceIdentityClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing SearchClient for Azure AI Search in Python\nDESCRIPTION: Creates an instance of SearchClient to connect to a specific Azure AI Search index named 'hotels'. It fetches the service endpoint and API key from environment variables, creates AzureKeyCredential, and configures the client. Prerequisites include setting SEARCH_ENDPOINT and SEARCH_API_KEY in the environment. Input parameters are endpoint, index name, and credential; returns a configured SearchClient object for further interactions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nindex_name = \\\"hotels\\\"\\n# Get the service endpoint and API key from the environment\\nendpoint = os.environ[\\\"SEARCH_ENDPOINT\\\"]\\nkey = os.environ[\\\"SEARCH_API_KEY\\\"]\\n\\n# Create a client\\ncredential = AzureKeyCredential(key)\\nclient = SearchClient(endpoint=endpoint,\\n                      index_name=index_name,\\n                      credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Creating a certificate with azure-keyvault-certificates\nDESCRIPTION: Creates a certificate using the begin_create_certificate method of CertificateClient in the new azure-keyvault-certificates library, which returns a long-running operation poller.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncreate_certificate_poller = certificate_client.begin_create_certificate(\n    certificate_name=\"cert-name\",\n    policy=CertificatePolicy.get_default()\n)\n\n# calling result() will block execution until the certificate creation operation completes\ncertificate = create_certificate_poller.result()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Device Registry Management SDK with pip\nDESCRIPTION: Commands to install the Azure Device Registry Management client library and Azure Identity packages using pip. These packages are required for interacting with the Azure Device Registry service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceregistry/azure-mgmt-deviceregistry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-deviceregistry\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Retrieving IANA Version with Azure Maps Timezone SDK in Python\nDESCRIPTION: This snippet demonstrates how to get the current IANA version number as Metadata using the Azure Maps Timezone SDK. It initializes a MapsTimeZoneClient with an Azure Key Credential and handles potential HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_iana_version():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.timezone import MapsTimeZoneClient\n\n    timezone_client = MapsTimeZoneClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = timezone_client.get_iana_version()\n        print(result)\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_iana_version()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Data Lake Storage Client in Python\nDESCRIPTION: This snippet demonstrates how to set up logging for the Azure Data Lake Storage client. It configures a logger to output DEBUG level information about HTTP sessions to the console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.storage.filedatalake import DataLakeServiceClient\n\n# Create a logger for the 'azure.storage.filedatalake' SDK\nlogger = logging.getLogger('azure.storage')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = DataLakeServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Level Logging for Azure Digital Twins SDK - Python\nDESCRIPTION: Sets up logging for the Azure SDK at the client level, with detailed debug information. Imports the logging module, configures a logger to output debug-level logs to stdout, and creates the DigitalTwinsClient instance with logging enabled. Requires sys, logging, and instantiated DigitalTwinsClient, url, and credential. Enables logging for all operations on the service client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Create service client and enable logging for all operations\nservice_client = DigitalTwinsClient(url, credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Redis Enterprise Management Client in Python\nDESCRIPTION: Example showing how to authenticate with Azure using DefaultAzureCredential and create a RedisEnterpriseManagementClient. It uses environment variables for the Azure subscription ID and credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redisenterprise/azure-mgmt-redisenterprise/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.redisenterprise import RedisEnterpriseManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RedisEnterpriseManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic OpenTelemetry Tracing for Azure SDKs in Python\nDESCRIPTION: This complete example shows how to configure generic OpenTelemetry for Azure SDKs without the Azure Monitor Distro. First, it sets the tracing implementation using `azure.core.settings`. Then, it sets up a basic OpenTelemetry pipeline with a `TracerProvider`, `SimpleSpanProcessor`, and `ConsoleSpanExporter` to print spans to the console. Finally, it demonstrates creating a custom span and tracing an Azure Storage Blob client call (`create_container`), which will emit spans handled by the configured OpenTelemetry setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Declare OpenTelemetry as enabled tracing plugin for Azure SDKs\nfrom azure.core.settings import settings\n\nsettings.tracing_implementation = \"opentelemetry\"\n\n# In the below example, we use a simple console exporter.\n\n# See https://opentelemetry.io/docs/languages/python/ for more details on OpenTelemetry configuration\n\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor\n\n# Simple console exporter\nexporter = ConsoleSpanExporter()\n\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(\n    SimpleSpanProcessor(exporter)\n)\n\n# Example with Storage SDKs\n\nfrom azure.storage.blob import BlobServiceClient\n\ntracer = trace.get_tracer(__name__)\nwith tracer.start_as_current_span(name=\"MyApplication\"):\n    client = BlobServiceClient.from_connection_string('connectionstring')\n    client.create_container('my_container')  # Call will be traced\n```\n\n----------------------------------------\n\nTITLE: Defining the HttpResponseError Exception in Python\nDESCRIPTION: This defines the `HttpResponseError` class, inheriting from `AzureError`. It's raised when a request receives a non-success status code from the service. It stores the HTTP response, extracts the reason and status code, and attempts to parse OData v4 error details from the response body. The error message prioritizes the parsed OData error or uses a default message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HttpResponseError(AzureError):\n    def __init__(self, message=None, response=None, **kwargs):\n        self.reason = None\n        self.response = response\n        if response:\n            self.reason = response.reason\n            self.status_code = response.status_code\n        self.error = self._parse_odata_body(ODataV4Format, response)  # type: Optional[ODataV4Format]\n        if self.error:\n            message = str(self.error)\n        else:\n            message = message or \"Operation returned an invalid status '{}'\".format(\n                self.reason\n            )\n\n        super(HttpResponseError, self).__init__(message=message, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Decoding Avro-encoded Data\nDESCRIPTION: Shows how to decode Avro-encoded content using the AvroEncoder. The example demonstrates decoding from an EventData object and from a content dictionary with encoded bytes and content type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nencoder = AvroEncoder(client=schema_registry_client)\n\nwith encoder:\n    # event_data is an EventData object with Avro encoded body\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema=definition, message_type=EventData)\n    decoded_content = encoder.decode(event_data)\n\n    # OR \n\n    encoded_bytes = b'<content_encoded_by_azure_schema_registry_avro_encoder>'\n    content_type = 'avro/binary+<schema_id_of_corresponding_schema>'\n    content_dict = {\"content\": encoded_bytes, \"content_type\": content_type}\n    decoded_content = encoder.decode(content_dict)\n```\n\n----------------------------------------\n\nTITLE: Initializing JobRouter Clients with Connection String (Python)\nDESCRIPTION: Demonstrates how to initialize the `JobRouterClient` for job and worker operations and the `JobRouterAdministrationClient` for managing policies and queues. Both clients are instantiated using a connection string obtained from an Azure Communication Service resource. Requires the `azure-communication-jobrouter` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter import (\n    JobRouterClient,\n    JobRouterAdministrationClient\n)\n\nconnection_string = \"endpoint=ENDPOINT;accessKey=KEY\"\nrouter_client = JobRouterClient.from_connection_string(conn_str = connection_string)\nrouter_admin_client = JobRouterAdministrationClient.from_connection_string(conn_str = connection_string)\n```\n\n----------------------------------------\n\nTITLE: Performing Async Search Query in Azure AI Search with Python\nDESCRIPTION: This snippet demonstrates how to perform an asynchronous search query using the Azure AI Search Python SDK. It creates a SearchClient with async support and searches for hotels containing 'spa' in their name or other fields.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents.aio import SearchClient\n\nsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\nasync with search_client:\n    results = await search_client.search(search_text=\"spa\")\n\n    print(\"Hotels containing 'spa' in the name (or other fields):\")\n    async for result in results:\n        print(\"    Name: {} (rating {})\".format(result[\"hotelName\"], result[\"rating\"]))\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous LogsIngestionClient in Python\nDESCRIPTION: This snippet demonstrates how to create a synchronous LogsIngestionClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\nlogs_client = LogsIngestionClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Documents with General Model using Azure Document Intelligence SDK in Python\nDESCRIPTION: This Python code snippet shows how to analyze a document using the general document model (`prebuilt-document`) provided by the Azure Document Intelligence service. It utilizes the `DocumentAnalysisClient` from the `azure-ai-formrecognizer` SDK, authenticating via environment variables (endpoint and key). The script initiates the analysis by calling `begin_analyze_document` with the specific model ID, processes the asynchronous operation using a poller, and then prints extracted key-value pairs, handwritten content indicators, page layout details (lines, words, selection marks), and table structures. Requires the `azure-ai-formrecognizer` library and a valid document path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-document\", document=f\n    )\nresult = poller.result()\n\nfor style in result.styles:\n    if style.is_handwritten:\n        print(\"Document contains handwritten content: \")\n        print(\",\".join([result.content[span.offset:span.offset + span.length] for span in style.spans]))\n\nprint(\"----Key-value pairs found in document----\")\nfor kv_pair in result.key_value_pairs:\n    if kv_pair.key:\n        print(\n                \"Key '{}' found within '{}' bounding regions\".format(\n                    kv_pair.key.content,\n                    kv_pair.key.bounding_regions,\n                )\n            )\n    if kv_pair.value:\n        print(\n                \"Value '{}' found within '{}' bounding regions\\n\".format(\n                    kv_pair.value.content,\n                    kv_pair.value.bounding_regions,\n                )\n            )\n\nfor page in result.pages:\n    print(\"----Analyzing document from page #{}----\".format(page.page_number))\n    print(\n        \"Page has width: {} and height: {}, measured with unit: {}\".format(\n            page.width, page.height, page.unit\n        )\n    )\n\n    for line_idx, line in enumerate(page.lines):\n        words = line.get_words()\n        print(\n            \"...Line # {} has {} words and text '{}' within bounding polygon '{}'\".format(\n                line_idx,\n                len(words),\n                line.content,\n                line.polygon,\n            )\n        )\n\n        for word in words:\n            print(\n                \"......Word '{}' has a confidence of {}\".format(\n                    word.content, word.confidence\n                )\n            )\n\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' within bounding polygon '{}' and has a confidence of {}\".format(\n                selection_mark.state,\n                selection_mark.polygon,\n                selection_mark.confidence,\n            )\n        )\n\nfor table_idx, table in enumerate(result.tables):\n    print(\n        \"Table # {} has {} rows and {} columns\".format(\n            table_idx, table.row_count, table.column_count\n        )\n    )\n    for region in table.bounding_regions:\n        print(\n            \"Table # {} location on page: {} is {}\".format(\n                table_idx,\n                region.page_number,\n                region.polygon,\n            )\n        )\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.content,\n            )\n        )\n        for region in cell.bounding_regions:\n            print(\n                \"...content on page {} is within bounding polygon '{}'\\n\".format(\n                    region.page_number,\n                    region.polygon,\n                )\n            )\nprint(\"----------------------------------------\")\n```\n```\n\n----------------------------------------\n\nTITLE: Processing Events with EventHubConsumerClient (v5)\nDESCRIPTION: This snippet shows how to process events using the newer v5 SDK. It sets up logging, initializes an EventHubConsumerClient with a blob checkpoint store, and defines event handling callbacks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nimport logging\nfrom collections import defaultdict\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoreblobaio import BlobCheckpointStore\nlogging.basicConfig(level=logging.INFO)\nCONNECTION_STR = os.environ[\"EVENT_HUB_CONN_STR\"]\nSTORAGE_CONNECTION_STR = os.environ[\"AZURE_STORAGE_CONN_STR\"]\nBLOB_CONTAINER_NAME = \"your-blob-container-name\"\nlogger = logging.getLogger(\"azure.eventhub\")\nevents_processed = defaultdict(int)\nasync def on_event(partition_context, event):\n    partition_id = partition_context.partition_id\n    events_processed[partition_id] += 1\n    logger.info(\"Partition id {}, Events processed {}\".format(partition_id, events_processed[partition_id]))\n    await partition_context.update_checkpoint(event)\nasync def on_partition_initialize(context):\n    logger.info(\"Partition {} initialized\".format(context.partition_id))\nasync def on_partition_close(context, reason):\n    logger.info(\"Partition {} has closed, reason {})\".format(context.partition_id, reason))\nasync def on_error(context, error):\n    if context:\n        logger.error(\"Partition {} has a partition related error {!r}.\".format(context.partition_id, error))\n    else:\n        logger.error(\"Receiving event has a non-partition error {!r}\".format(error))\nasync def main():\n    checkpoint_store = BlobCheckpointStore.from_connection_string(STORAGE_CONNECTION_STR, BLOB_CONTAINER_NAME)\n    client = EventHubConsumerClient.from_connection_string(\n        CONNECTION_STR,\n        consumer_group=\"$Default\",\n        checkpoint_store=checkpoint_store,\n    )\n    async with client:\n        await client.receive(\n            on_event,\n            on_error=on_error,  # optional\n            on_partition_initialize=on_partition_initialize,  # optional\n            on_partition_close=on_partition_close,  # optional\n            starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n        )\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Sent Share Client\nDESCRIPTION: Initialize a PurviewSharingClient using environment variables and DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Oracle Database Management Client\nDESCRIPTION: Example showing how to authenticate and initialize the Oracle Database Management client using DefaultAzureCredential and subscription ID from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/oracledatabase/azure-mgmt-oracledatabase/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.oracledatabase import OracleDatabaseMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = OracleDatabaseMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure API Management Client in Python\nDESCRIPTION: Code to authenticate with Azure API Management using DefaultAzureCredential and create an API Management client instance. Requires environment variables for Azure credentials to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.apimanagement import ApiManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ApiManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with InteractiveBrowserBrokerCredential on Windows (Python)\nDESCRIPTION: Demonstrates using `InteractiveBrowserBrokerCredential` on Windows to authenticate with Azure services, exemplified by `BlobServiceClient`. It requires obtaining the parent window handle, shown here using `win32gui` from the `pywin32` package. This credential leverages the Web Account Manager (WAM) broker on Windows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity-broker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# On Windows\nimport win32gui\nfrom azure.identity.broker import InteractiveBrowserBrokerCredential\nfrom azure.storage.blob import BlobServiceClient\n\n# Get the handle of the current window\ncurrent_window_handle = win32gui.GetForegroundWindow()\n\ncredential = InteractiveBrowserBrokerCredential(parent_window_handle=current_window_handle)\nclient = BlobServiceClient(account_url, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Creating a Season in FarmBeats\nDESCRIPTION: Example demonstrating how to create a season object with specific date range in FarmBeats.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nseason_id = \"contoso-season\"\nseason_name = \"contoso-season-name\"\nseason_description = \"contoso-season-description\"\nyear = \"2021\"\nstart_date_time = \"2021-01-01T20:08:10.137Z\"\nend_date_time = \"2021-06-06T20:08:10.137Z\"\n\nseason = client.seasons.create_or_update(\n        season_id=season_id,\n        season={\n            \"name\": season_name,\n            \"year\": year,\n            \"startDateTime\": start_date_time,\n            \"endDateTime\": end_date_time,\n            \"description\": season_description\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Synchronous AIProjectClient - Azure AI Projects SDK - Python\nDESCRIPTION: Demonstrates creating a synchronous AIProjectClient using a connection string and Azure identity credentials. Requires the azure-ai-projects and azure-identity Python packages. The environment variable PROJECT_CONNECTION_STRING must be set with the Azure AI Foundry project connection string. Inputs: Azure credential object, connection string. Outputs: AIProjectClient instance configured for data operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.projects import AIProjectClient\nfrom azure.identity import DefaultAzureCredential\n\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n```\n\n----------------------------------------\n\nTITLE: Uploading and Retrieving Digital Twin Models in Python\nDESCRIPTION: This snippet demonstrates how to upload a digital twin model and retrieve it using the Azure Digital Twins SDK. It includes commented-out code for deleting and creating models, and shows how to get a model by its ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/01_Patrons.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npatron_model_id = \"dtmi:mymodels:patron;1\"\n\n# # Delete the model that you don't want. \n# service_client.delete_model(patron_model_id)\n\n# # Create it if you just deleted it.\n# patron_model_json = yaml.safe_load(open(\"models/patron.json\"))\n# service_client.create_models([patron_model_json])\n\n# Get the Patron model\nget_model = service_client.get_model(patron_model_id)\nget_model.as_dict()\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure SQL Management Client - Python\nDESCRIPTION: This Python snippet demonstrates how to authenticate against Azure and create an instance of the SqlManagementClient using the DefaultAzureCredential. It requires the 'azure-identity' and 'azure-mgmt-sql' packages and relies on environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID) for credentials. The inputs are the relevant environment variables; the output is an authenticated client object for managing SQL resources in Azure. Make sure dependencies are installed and environment variables properly set before executing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\\nfrom azure.mgmt.sql import SqlManagementClient\\nimport os\\n\\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\\nclient = SqlManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Searching for Available Phone Numbers with Capabilities (Python)\nDESCRIPTION: Searches for available phone numbers by specifying capabilities such as calling and SMS, phone number type, assignment type, country code, and optionally area code and quantity. The begin_search_available_phone_numbers method starts a long running operation, returning a poller object. Polling is enabled for asynchronous completion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncapabilities = PhoneNumberCapabilities(\n        calling = PhoneNumberCapabilityType.INBOUND,\n        sms = PhoneNumberCapabilityType.INBOUND_OUTBOUND\n    )\npoller = phone_numbers_client.begin_search_available_phone_numbers(\n    \"US\",\n    PhoneNumberType.TOLL_FREE,\n    PhoneNumberAssignmentType.APPLICATION,\n    capabilities,\n    area_code =\"833\", # Area code is optional for toll-free numbers\n    quantity = 2, # Quantity is optional. If not set, default is 1\n    polling = True\n)\nsearch_result = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Communication Room with Custom Participants (Python)\nDESCRIPTION: This example demonstrates creating a room with custom validity dates, multiple participants, and a PSTN dial-out property using the RoomsClient. It covers initialization, participant construction (with roles), and exception handling for service errors. Dependencies include azure.communication.rooms, azure.communication.identity, dateutil, and datetime; you must have a valid Azure Communication Services connection string and user MRI identities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\nfrom datetime import datetime, timedelta\nfrom azure.communication.rooms import (\n    RoomsClient,\n    RoomParticipant,\n    ParticipantRole\n)\nfrom azure.communication.identity import CommunicationUserIdentifier\nfrom dateutil.relativedelta import relativedelta\n\nclient = RoomsClient.from_connection_string(conn_str='<connection_str>')\nvalid_from = datetime.now()\nvalid_until = valid_from + relativedelta(months=+1)\nparticipants = []\nparticipants.append(RoomParticipant(communication_identifier=CommunicationUserIdentifier(\"<ACS User MRI identity 1>\")))\nparticipants.append(RoomParticipant(communication_identifier=CommunicationUserIdentifier(\"<ACS User MRI identity 2>\"), role=ParticipantRole.CONSUMER))\nparticipants.append(RoomParticipant(communication_identifier=CommunicationUserIdentifier(\"<ACS User MRI identity 3>\"), role=ParticipantRole.PRESENTER))\n\ntry:\n    create_room_response = client.create_room(\n        valid_from=valid_from,\n        valid_until=valid_until,\n        participants=participants,\n        pstn_dial_out_enabled=false\n\n    )\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Authentication using Access Key\nDESCRIPTION: Example of authenticating Event Grid client using AzureKeyCredential with an access key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventgrid import EventGridPublisherClient\nfrom azure.core.credentials import AzureKeyCredential\n\ntopic_key = os.environ[\"EVENTGRID_TOPIC_KEY\"]\nendpoint = os.environ[\"EVENTGRID_TOPIC_ENDPOINT\"]\n\ncredential_key = AzureKeyCredential(topic_key)\nclient = EventGridPublisherClient(endpoint, credential_key)\n```\n\n----------------------------------------\n\nTITLE: Decommissioning and Deleting Azure Digital Twins Models in Python\nDESCRIPTION: Shows how to decommission and delete a model using its ID with the DigitalTwinsClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Decommission a model\nservice_client.decommission_model(model_id)\n\n# Delete a model\nservice_client.delete_model(model_id)\n```\n\n----------------------------------------\n\nTITLE: Uploading File and Creating Message with Code Interpreter via Asset URI - Azure SDK for Python\nDESCRIPTION: Explains the process of uploading a file to Azure Blob Storage, constructing a vector store data source, and attaching it to an agent message with code interpreter tools. Demonstrates usage of asset URIs and the `VectorStoreDataSource` class. Requires an uploadable file, valid Azure SDK objects, the code interpreter tool definition, and a thread.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# We will upload the local file to Azure and will use it for vector store creation.\n_, asset_uri = project_client.upload_file(\"./product_info_1.md\")\nds = VectorStoreDataSource(asset_identifier=asset_uri, asset_type=VectorStoreDataSourceAssetType.URI_ASSET)\n\n# Create a message with the attachment\nattachment = MessageAttachment(data_source=ds, tools=code_interpreter.definitions)\nmessage = project_client.agents.create_message(\n    thread_id=thread.id, role=\"user\", content=\"What does the attachment say?\", attachments=[attachment]\n)\n```\n\n----------------------------------------\n\nTITLE: Using NULL Sentinel Value in Azure Core Serialization for Python\nDESCRIPTION: Demonstrates how to use the NULL sentinel value from azure.core.serialization to specify attributes with no data. This sentinel object is falsy and gets serialized to null on the wire when sent in requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.serialization import NULL\n\nassert bool(NULL) is False\n\nfoo = Foo(\n    attr=NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Maps SAS Token using Management SDK - Python\nDESCRIPTION: Presents a sample for generating a Shared Access Signature (SAS) token for Azure Maps using the azure-mgmt-maps management SDK. It includes environment setup, authentication via DefaultAzureCredential, and calls the list_sas method to acquire the token. Users must install azure-identity and azure-mgmt-maps, and set the appropriate Azure AD client credentials as environment variables. The sample is designed to be executed as a script and outputs the SAS information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maps import AzureMapsManagementClient\n\n\"\"\"\n# PREREQUISITES\n    pip install azure-identity\n    pip install azure-mgmt-maps\n# USAGE\n    python account_list_sas.py\n\n    Before run the sample, please set the values of the client ID, tenant ID and client secret\n    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\n    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:\n    https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n\"\"\"\n\ndef main():\n    client = AzureMapsManagementClient(\n        credential=DefaultAzureCredential(),\n        subscription_id=\"your-subscription-id\",\n    )\n\n    response = client.accounts.list_sas(\n        resource_group_name=\"myResourceGroup\",\n        account_name=\"myMapsAccount\",\n        maps_account_sas_parameters={\n            \"expiry\": \"2017-05-24T11:42:03.1567373Z\",\n            \"maxRatePerSecond\": 500,\n            \"principalId\": \"your-principal-id\",\n            \"regions\": [\"eastus\"],\n            \"signingKey\": \"primaryKey\",\n            \"start\": \"2017-05-24T10:42:03.1567373Z\",\n        },\n    )\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Creating FaceClient with AzureKeyCredential (Python)\nDESCRIPTION: Shows how to initialize the `FaceClient` using an `AzureKeyCredential` by providing the Face resource endpoint (custom subdomain or regional) and one of its API keys. This method is simpler for testing but less secure than Microsoft Entra ID for production environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.vision.face import FaceClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\nface_client = FaceClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Key Vault Management Client in Python\nDESCRIPTION: This snippet demonstrates how to authenticate with the Azure Key Vault Management Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.keyvault import KeyVaultManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = KeyVaultManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Vector Index Options in Azure Cosmos DB (Python)\nDESCRIPTION: Shows how to configure advanced options for diskANN and quantizedFlat vector index types, including quantizationByteSize, indexingSearchListSize, and vectorIndexShardKey.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nindexing_policy = {\n        \"automatic\": True,\n        \"indexingMode\": \"consistent\",\n        \"vectorIndexes\": [\n            {\"path\": \"/vector1\", \"type\": \"quantizedFlat\", \"quantizationByteSize\": 8},\n            {\"path\": \"/vector2\", \"type\": \"diskANN\", \"indexingSearchListSize\": 50},\n            {\"path\": \"/vector3\", \"type\": \"diskANN\", \"vectorIndexShardKey\": [\"/country/city\"]}\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing All Azure Digital Twins Event Routes in Python\nDESCRIPTION: This snippet shows how to retrieve a list of all configured event routes within an Azure Digital Twins instance. It calls the `list_event_routes` method of the service client, which returns an iterable collection of event routes. The code then iterates through this collection and prints each event route object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_event_routes_list\nevent_routes = service_client.list_event_routes()\nfor event_route in event_routes:\n    print(event_route)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Login Hint for InteractiveBrowserCredential in Python\nDESCRIPTION: Feature added in 1.7.0b2 introducing the `login_hint` keyword argument for `InteractiveBrowserCredential`. This allows pre-filling the username or email address field on the Azure login page during interactive authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nlogin_hint\n```\n\n----------------------------------------\n\nTITLE: Initializing PhoneNumbersClient with Azure AD Credentials (Python)\nDESCRIPTION: This snippet shows how to securely initialize a PhoneNumbersClient using Azure Active Directory authentication. Dependencies: azure.communication.phonenumbers, azure.identity, and required environment variables (AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET). Inputs include the ACS endpoint and credentials. Outputs a configured client object for managing phone numbers. Ensure the environment variables and dependencies are properly set before running.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.communication.phonenumbers import PhoneNumbersClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have your\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nphone_numbers_client = PhoneNumbersClient(endpoint, DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Groups in Azure\nDESCRIPTION: Examples of creating, updating, listing, and deleting resource groups using the ResourceManagementClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/mgmt_quickstart.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlocation = \"westus2\"\ngroup_name = \"my_resource_group_name\"\ngroup = resource_client.resource_groups.create_or_update(\n    group_name,\n    {'location': location}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ngroup_name = \"my_resource_group_name\"\ngroup.tags = {\n    \"environment\":\"test\",\n    \"department\":\"tech\"\n}\nupdated_group = resource_client.resource_groups.create_or_update(group_name, group)\n```\n\nLANGUAGE: python\nCODE:\n```\ngroup_list = self.resource_client.resource_groups.list()\nfor g in group_list:\n    print_resource_group(g)\n```\n\nLANGUAGE: python\nCODE:\n```\ndelete_async_op = resource_client.resource_groups.begin_delete(group_name)\ndelete_async_op.wait()\n```\n\n----------------------------------------\n\nTITLE: Publishing Telemetry for a Digital Twin Component in Python\nDESCRIPTION: This snippet demonstrates publishing a telemetry message specifically for a component within an Azure Digital Twin. It requires the digital twin's ID (`digita_twin_id`), the name of the target component (`component_name`), and the telemetry data as a JSON string payload (`telemetry_payload`). The `publish_component_telemetry` method of the service client sends the message to the specified component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_publish_component_telemetry\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ncomponent_name = \"<COMPONENT_NAME>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_component_telemetry(\n    digita_twin_id,\n    component_name,\n    telemetry_payload\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Properties Log with Azure Monitor in Python\nDESCRIPTION: This snippet demonstrates how to add custom properties to logging telemetry using OpenTelemetry and Azure Monitor. It sets up a logger and shows how to include extra information in a log message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport logging\n\nfrom opentelemetry._logs import set_logger_provider\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\nlogger_provider = LoggerProvider()\nset_logger_provider(logger_provider)\n\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\n\n# Attach LoggingHandler to namespaced logger\nhandler = LoggingHandler()\nlogger = logging.getLogger(__name__)\nlogger.addHandler(handler)\nlogger.setLevel(logging.NOTSET)\n\n# Custom properties\nlogger.debug(\"DEBUG: Debug with properties\", extra={\"debug\": \"true\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing BlobServiceClient from a Connection String - Python\nDESCRIPTION: Shows how to instantiate a BlobServiceClient directly from a full connection string, which encapsulates required endpoints and access keys. Simplifies client initialization when connection information is supplied as a single string, typically obtained from the Azure Portal or CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = BlobServiceClient.from_connection_string(conn_str=connection_string)\n```\n\n----------------------------------------\n\nTITLE: Using Progress Callback for Blob Upload/Download in Python Azure SDK\nDESCRIPTION: Shows how to use the new progress_hook callback parameter for tracking progress during blob upload or download operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nblob_client.upload_blob(data, progress_hook=my_callback)\nblob_client.download_blob(progress_hook=my_callback)\n```\n\n----------------------------------------\n\nTITLE: Sending Email Function - Python\nDESCRIPTION: Specifies the schema for a \\\"send_email\\\" function that requires recipient, subject, and body (all strings). Clearly describes parameter meanings, intended for use wherever email automation or notification is needed. Requires infrastructure to genuinely transmit email (not included in schema).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"send_email\",\n  \"description\": \"Sends an email with the specified subject and body to the recipient.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"recipient\": {\"type\": \"string\", \"description\": \"Email address of the recipient.\"},\n      \"subject\": {\"type\": \"string\", \"description\": \"Subject of the email.\"},\n      \"body\": {\"type\": \"string\", \"description\": \"Body content of the email.\"}\n    },\n    \"required\": [\"recipient\", \"subject\", \"body\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Document Intelligence Model Details in Python\nDESCRIPTION: Retrieves detailed information about a specific Document Intelligence model by its ID, including creation date, expiration date, and any warnings encountered during model building.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmy_model = document_intelligence_admin_client.get_model(model_id=model.model_id)\nprint(f\"\\nModel ID: {my_model.model_id}\")\nprint(f\"Description: {my_model.description}\")\nprint(f\"Model created on: {my_model.created_date_time}\")\nprint(f\"Model expires on: {my_model.expiration_date_time}\")\nif my_model.warnings:\n    print(\"Warnings encountered while building the model:\")\n    for warning in my_model.warnings:\n        print(f\"warning code: {warning.code}, message: {warning.message}, target of the error: {warning.target}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Information for a Purchased Phone Number (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve information for a specified purchased phone number using PhoneNumbersClient. Takes a phone number as a string input and prints the country code and number. Useful for validation and information lookup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresult = phone_numbers_client.get_purchased_phone_number(\"<phone number>\")\nprint(result.country_code)\nprint(result.phone_number)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Connections by Type - Azure AI Projects SDK - Python\nDESCRIPTION: Retrieves and lists connection properties filtered by connection type (e.g., Azure OpenAI) using the connections.list() function. Requires access to the ConnectionType enum and a project_client. Outputs filtered connection objects. Parameter: connection_type specifies the connections to retrieve.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconnections = project_client.connections.list(\n    connection_type=ConnectionType.AZURE_OPEN_AI,\n)\nfor connection in connections:\n    print(connection)\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Container Service Client\nDESCRIPTION: Example code showing how to authenticate with Azure using DefaultAzureCredential and create a ContainerServiceClient instance. Requires environment variables for Azure credentials and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerservice import ContainerServiceClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerServiceClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Edgezones Management Client in Python\nDESCRIPTION: Python code snippet demonstrating how to authenticate the EdgeZonesMgmtClient using DefaultAzureCredential and environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgezones/azure-mgmt-edgezones/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.edgezones import EdgeZonesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EdgeZonesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Sending/Receiving Messages with Azure Service Bus Topics/Subscriptions (Python)\nDESCRIPTION: This snippet shows how to send a message to an Azure Service Bus topic and receive it from a specific subscription associated with that topic. It involves getting a `topic_sender` to send the message and then a `subscription_receiver` linked to the topic and subscription names to receive and process the message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient, ServiceBusMessage\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\ntopic_name = os.environ['SERVICE_BUS_TOPIC_NAME']\nsubscription_name = os.environ['SERVICE_BUS_SUBSCRIPTION_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_topic_sender(topic_name) as sender:\n        sender.send_messages(ServiceBusMessage(\"Data\"))\n\n    # If session_id is null here, will receive from the first available session.\n    with client.get_subscription_receiver(topic_name, subscription_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Weather Forecast with Azure Maps Weather API in Python\nDESCRIPTION: This snippet shows how to fetch a daily detailed weather forecast using the Azure Maps Weather API. It gets a forecast for the next 1-45 days (depending on the configuration) for the specified coordinates, printing the result as formatted JSON or handling any errors that occur.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_daily_forecast():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_daily_forecast(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_daily_forecast()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Cosmos DB Client\nDESCRIPTION: Shows how to set up detailed DEBUG level logging for the Cosmos DB client using the standard Python logging library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.cosmos import CosmosClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure.cosmos')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = CosmosClient(URL, credential=KEY, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Recording Metrics with Attributes in Azure Monitor Python SDK\nDESCRIPTION: This example demonstrates how to use different attributes with metric instruments in the OpenTelemetry SDK. It shows setting up a counter with attributes and exporting the metrics to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\n\nexporter = AzureMonitorMetricExporter.from_connection_string(\n    os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\nmetrics.set_meter_provider(MeterProvider(metric_readers=[reader]))\n\nattribute_set1 = {\n    \"key1\": \"val1\"\n}\nattribute_set2 = {\n    \"key2\": \"val2\"\n}\nlarge_attribute_set = {}\nfor i in range(20):\n    key = \"key{}\".format(i)\n    val = \"val{}\".format(i)\n    large_attribute_set[key] = val\n\nmeter = metrics.get_meter_provider().get_meter(\"sample\")\n\n# Counter\ncounter = meter.create_counter(\"attr1_counter\")\ncounter.add(1, attribute_set1)\n```\n\n----------------------------------------\n\nTITLE: Setting up and Creating an Agent with Enterprise File Search using Azure Blob Storage in Python\nDESCRIPTION: Demonstrates configuring an Agent for Enterprise File Search using an Azure Blob Storage asset. It uploads a local file to Azure storage to get an asset URI, creates a `VectorStoreDataSource` from this URI, uses the data source to create a vector store, initializes a `FileSearchTool` with the store ID, and finally creates the agent with the tool's definitions and resources. Requires `VectorStoreDataSource`, `VectorStoreDataSourceAssetType`, `FileSearchTool`, `os` package, and `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# We will upload the local file to Azure and will use it for vector store creation.\n_, asset_uri = project_client.upload_file(\"./product_info_1.md\")\n\n# Create a vector store with no file and wait for it to be processed\nds = VectorStoreDataSource(asset_identifier=asset_uri, asset_type=VectorStoreDataSourceAssetType.URI_ASSET)\nvector_store = project_client.agents.create_vector_store_and_poll(data_sources=[ds], name=\"sample_vector_store\")\nprint(f\"Created vector store, vector store ID: {vector_store.id}\")\n\n# Create a file search tool\nfile_search_tool = FileSearchTool(vector_store_ids=[vector_store.id])\n\n# Notices that FileSearchTool as tool and tool_resources must be added or the assistant unable to search the file\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are helpful assistant\",\n    tools=file_search_tool.definitions,\n    tool_resources=file_search_tool.resources,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Role Assignment in Azure Key Vault (Python)\nDESCRIPTION: Demonstrates how to create a role assignment using KeyVaultAccessControlClient with specified scope, definition ID, and principal ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.administration import KeyVaultRoleScope\n\nscope = KeyVaultRoleScope.GLOBAL\nrole_assignment = client.create_role_assignment(scope=scope, definition_id=definition_id, principal_id=principal_id)\nprint(f\"Role assignment {role_assignment.name} created successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Azure Confidential Ledger with Python\nDESCRIPTION: This code snippet demonstrates error handling when working with Azure Confidential Ledger. It shows how to catch and handle ResourceNotFoundError exceptions that may occur when attempting to access a transaction that doesn't exist in the ledger.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import ResourceNotFoundError\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\ntry:\n    ledger_client.begin_get_ledger_entry(\n        transaction_id=\"10000.100000\"  # Using a very high id that probably doesn't exist in the ledger if it's relatively new.\n    )\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Update via Device Update SDK - Python\nDESCRIPTION: This snippet deletes an existing device update from the IoT Hub using the DeviceUpdateClient's begin_delete_update method. It retrieves the necessary update identifiers from environment variables, then invokes the asynchronous begin_delete_update call and waits for its completion. The snippet assumes that the DeviceUpdateClient has already been instantiated and the environment is configured for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeleteUpdate/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nupdate_provider = os.environ[\"DEVICEUPDATE_UPDATE_PROVIDER\"]\\nupdate_name = os.environ[\"DEVICEUPDATE_UPDATE_NAME\"]\\nupdate_version = os.environ[\"DEVICEUPDATE_UPDATE_VERSION\"]\\n\\nresponse = client.device_update.begin_delete_update(update_provider, update_name, update_version)\\nresponse.wait\n```\n\n----------------------------------------\n\nTITLE: Updating Certificate Properties in Azure Key Vault using Python\nDESCRIPTION: This snippet demonstrates how to update the properties of an existing certificate in Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# we will now disable the certificate for further use\nupdated_certificate= certificate_client.update_certificate_properties(\n    certificate_name=\"cert-name\", enabled=False\n)\n\nprint(updated_certificate.name)\nprint(updated_certificate.properties.enabled)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Device Update Client using Azure SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a DeviceUpdateClient instance using credentials and configuration values obtained from environment variables. It requires the Azure Identity and Device Update SDKs to be installed, and expects the environment variables DEVICEUPDATE_ENDPOINT and DEVICEUPDATE_INSTANCE_ID to be set. The client is used for subsequent calls to interact with the Device Update service for IoT Hub.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetUpdate/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nendpoint = os.environ[\"DEVICEUPDATE_ENDPOINT\"]\\ninstance = os.environ[\"DEVICEUPDATE_INSTANCE_ID\"]\\nclient = DeviceUpdateClient(credential=DefaultAzureCredential(), endpoint=endpoint, instance_id=instance)\n```\n\n----------------------------------------\n\nTITLE: Attesting an SGX Enclave in Python\nDESCRIPTION: Shows how to use the `attest_sgx_enclave` method to send an SGX quote and associated runtime data to the Azure Attestation service for validation. The service verifies the quote and checks if the SHA256 hash of the `runtime_data` matches the `report_data` in the quote, returning an attestation result and token upon success.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse, token = attest_client.attest_sgx_enclave(quote, runtime_data=runtime_data)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Ticket-Customer Relationships in Python\nDESCRIPTION: This snippet demonstrates how to create relationships between tickets and customers, simulating ticket sales.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef ticket_to_cust(ticket,cust):\n    tickethoder_relationship = {\n                \"$relationshipId\": f\"{ticket}ownedBy{cust}\",\n                \"$sourceId\": ticket,\n                \"$relationshipName\": \"ownedBy\",\n                \"$targetId\": cust,\n            }\n\n    service_client.upsert_relationship(\n            tickethoder_relationship[\"$sourceId\"],\n            tickethoder_relationship[\"$relationshipId\"],\n            tickethoder_relationship\n        )\n        \nticket_to_cust(\"ticket-58bf00bf-d5b8-4d06-9002-f8bf1693cc56\",\"customer-418cbc74-b101-4f50-8cf0-6075a2a8053c\")\nticket_to_cust(\"ticket-67f3cbfb-4b35-4e10-bf6d-3fd216093c3c\",\"customer-9c9b5c36-69f6-4f48-9362-4aaac4cb1be4\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Key from Azure Key Vault\nDESCRIPTION: This snippet demonstrates how to delete a key from Azure Key Vault and wait for the deletion to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ndeleted_key = key_client.begin_delete_key(\"key-name\").result()\n\nprint(deleted_key.name)\nprint(deleted_key.deleted_date)\n```\n\n----------------------------------------\n\nTITLE: Listing Certificate Properties Asynchronously in Azure Key Vault\nDESCRIPTION: Demonstrates how to asynchronously list properties of all certificates in an Azure Key Vault using the CertificateClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificates = certificate_client.list_properties_of_certificates()\nasync for certificate in certificates:\n    print(certificate.name)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role Assignment in Azure Key Vault (Python)\nDESCRIPTION: Demonstrates the deletion of a role assignment using KeyVaultAccessControlClient with the specified scope and unique name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_role_assignment(scope=scope, name=role_assignment.name)\n```\n\n----------------------------------------\n\nTITLE: Exporting Hello World Trace to Azure Monitor with OpenTelemetry\nDESCRIPTION: This example shows how to set up a basic trace export pipeline using OpenTelemetry with the Azure Monitor exporter. It creates a simple span and exports the telemetry to Application Insights using a connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"An example to show an application using Opentelemetry tracing api and sdk. Custom dependencies are\ntracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.\"\"\"\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\n\ntracer_provider = TracerProvider()\ntrace.set_tracer_provider(tracer_provider)\ntracer = trace.get_tracer(__name__)\n# This is the exporter that sends data to Application Insights\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nspan_processor = BatchSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nwith tracer.start_as_current_span(\"hello\"):\n    print(\"Hello, World!\")\n\n# Telemetry records are flushed automatically upon application exit\n# If you would like to flush records manually yourself, you can call force_flush()\ntracer_provider.force_flush()\n```\n\n----------------------------------------\n\nTITLE: Creating Text Analytics Client with Environment Variables\nDESCRIPTION: Initializes a TextAnalyticsClient using endpoint and key stored in environment variables for secure credential management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint, AzureKeyCredential(key))\n```\n\n----------------------------------------\n\nTITLE: Initializing BlobServiceClient with Shared Key Credential - Python\nDESCRIPTION: Explains standard initialization of a BlobServiceClient using a shared key (account access key) for authentication. Dependencies: azure-storage-blob library. The account URL and access key must match; the resulting client can perform all operations permitted to the account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\nservice = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=\"<account_access_key>\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Quota Management Client using DefaultAzureCredential (Python)\nDESCRIPTION: This snippet demonstrates how to initialize the `QuotaMgmtClient` for interacting with the Azure Quota Management service. It uses `DefaultAzureCredential` from the `azure.identity` library for authentication, which relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) being configured. The subscription ID is also retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/quota/azure-mgmt-quota/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.quota import QuotaMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = QuotaMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure Key Vault Secrets Client\nDESCRIPTION: Demonstrates error handling when attempting to access a non-existent secret in Azure Key Vault. Shows how to catch and handle ResourceNotFoundError exceptions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    secret_client.get_secret(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Portal Services Copilot Client\nDESCRIPTION: Python code to authenticate and initialize the Portal Services Copilot Management client using DefaultAzureCredential. Requires proper configuration of Azure environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portalservices/azure-mgmt-portalservicescopilot/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.portalservicescopilot import PortalServicesCopilotMgmtClient\n\nclient = PortalServicesCopilotMgmtClient(credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Entity Recognition with Azure Text Analytics\nDESCRIPTION: Demonstrates entity recognition in text documents, categorizing entities like organizations and tracking their occurrences across multiple reviews.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport typing\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\nreviews = [\n    \"\"\"I work for Foo Company, and we hired Contoso for our annual founding ceremony. The food\n    was amazing and we all can't say enough good words about the quality and the level of service.\"\"\",\n    \"\"\"We at the Foo Company re-hired Contoso after all of our past successes with the company.\n    Though the food was still great, I feel there has been a quality drop since their last time\n    catering for us. Is anyone else running into the same problem?\"\"\",\n    \"\"\"Bar Company is over the moon about the service we received from Contoso, the best sliders ever!!!!\"\"\"\n]\n\nresult = text_analytics_client.recognize_entities(reviews)\nresult = [review for review in result if not review.is_error]\norganization_to_reviews: typing.Dict[str, typing.List[str]] = {}\n\nfor idx, review in enumerate(result):\n    for entity in review.entities:\n        print(f\"Entity '{entity.text}' has category '{entity.category}'\")\n        if entity.category == 'Organization':\n            organization_to_reviews.setdefault(entity.text, [])\n            organization_to_reviews[entity.text].append(reviews[idx])\n\nfor organization, reviews in organization_to_reviews.items():\n    print(\n        \"\\n\\nOrganization '{}' has left us the following review(s): {}\".format(\n            organization, \"\\n\\n\".join(reviews)\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Clients for Logs and Metrics Querying in Python\nDESCRIPTION: Example of creating authenticated asynchronous clients for querying Logs and Metrics using DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.monitor.query.aio import LogsQueryClient, MetricsQueryClient, MetricsClient\n\ncredential = DefaultAzureCredential()\nasync_logs_query_client = LogsQueryClient(credential)\nasync_metrics_query_client = MetricsQueryClient(credential)\nasync_metrics_client = MetricsClient(\"https://<regional endpoint>\", credential)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Paths in Azure DataLake File System (Python)\nDESCRIPTION: Lists paths (files and directories) within a specified file system in Azure Data Lake Storage. It creates a `FileSystemClient` using a connection string and the file system name. It then calls `get_paths()` to retrieve an iterator of paths and loops through them, printing the name of each path. Requires the `azure-storage-file-datalake` library and a valid connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.filedatalake import FileSystemClient\n\nfile_system = FileSystemClient.from_connection_string(\"my_connection_string\", file_system_name=\"myfilesystem\")\n\npaths = file_system.get_paths()\nfor path in paths:\n    print(path.name + '\\n')\n```\n\n----------------------------------------\n\nTITLE: Listing Detached Received Shares with PurviewSharingClient - Python\nDESCRIPTION: Retrieves all detached received shares, which are shares never attached or previously detached. The snippet uses list_detached with an order_by parameter, printing out the response. Requires endpoint configuration and authentication, returning a list that may be used for attaching or retrieval in subsequent steps.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\nlist_detached_response = client.received_shares.list_detached(order_by=\\\"properties/createdAt desc\\\")\\nprint(list_detached_response)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Platform and Identity Libraries using pip (Bash)\nDESCRIPTION: Shows how to install the necessary Azure management library for App Platform (`azure-mgmt-appplatform`) and the Azure identity library (`azure-identity`) using pip. These packages are required to interact with Azure App Platform services from Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appplatform/azure-mgmt-appplatform/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-appplatform\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Account and Token Access\nDESCRIPTION: These commands verify the current Azure CLI account and its ability to obtain access tokens. The first command shows the current account, while the second retrieves an access token for the Azure Resource Manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz account show\n```\n\nLANGUAGE: bash\nCODE:\n```\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Closing Azure Communication Job Immediately\nDESCRIPTION: Demonstrates how to immediately close a job using the Azure Communication Job Router client. The code shows how to specify a close note and verify the job's closed status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    RouterJob,\n    RouterJobStatus,\n    CloseJobOptions,\n)\n\nclose_job_result = router_client.close_job(\n    \"jobId-1\",\n    accept_job_offer_result.assignment_id,\n    CloseJobOptions(\n        note = f\"Job has been closed by {router_worker.id} at {datetime.datetime.utcnow()}\"\n    )\n)\n\nprint(f\"Job has been successfully closed.\")\n\nupdate_job: RouterJob = router_client.get_job(job_id = \"jobId-1\")\nprint(f\"Updated job status: {update_job.job_status == RouterJobStatus.CLOSED}\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Processing Agent Run in Python\nDESCRIPTION: Creates and processes a run in a single method call without manual polling, handling function tool calls automatically.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nrun = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id)\n```\n\n----------------------------------------\n\nTITLE: Including Alignment Information in Translations\nDESCRIPTION: Shows how to include alignment projection information between source and translated text. Useful for mapping corresponding text segments between languages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    include_alignment = True\n    to_language = [\"cs\"]\n    input_text_elements = [\"The answer lies in machine translation.\"]\n\n    response = text_translator.translate(\n        body=input_text_elements, to_language=to_language, include_alignment=include_alignment\n    )\n    translation = response[0] if response else None\n\n    if translation:\n        detected_language = translation.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n            if translated_text.alignment:\n                print(f\"Alignments: {translated_text.alignment.proj}\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Attestation Policy (AAD Mode) in Python\nDESCRIPTION: Shows how to set an attestation policy for a specific type (e.g., SGX Enclave) when the service instance is in AAD mode. In this mode, providing a signing key and certificate is optional, simplifying the API call. The example includes retrieving the policy after setting it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npolicy_set_response = attest_client.set_policy(AttestationType.SGX_ENCLAVE,            \n    attestation_policy)\n# Now retrieve the policy which was just set.\nnew_policy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n\n\n```\n\n----------------------------------------\n\nTITLE: Enumerating Events by Page using ChangeFeedClient - Python\nDESCRIPTION: This code snippet retrieves blob change feed events in pages using the by_page iterator. It fetches the first page of events and prints each event from that page. The cf_client object must be properly authenticated. Useful for processing large result sets efficiently or for paginated workflows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\ncf_client = ChangeFeedClient(\"https://{}.blob.core.windows.net\".format(\"YOUR_ACCOUNT_NAME\"),\n                             credential=\"Your_ACCOUNT_KEY\")\n\nchange_feed = cf_client.list_changes().by_page()\n\n# print first page of events\nchange_feed_page1 = next(change_feed)\nfor event in change_feed_page1:\n    print(event)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory in Communication Email SDK\nDESCRIPTION: Creates an EmailClient instance using Azure Active Directory authentication via DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.email import EmailClient\nfrom azure.identity import DefaultAzureCredential\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nendpoint = \"https://<resource-name>.communication.azure.com\"\nclient = EmailClient(endpoint, DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Operation Debug Logging for Azure SDK in Python\nDESCRIPTION: This snippet demonstrates how to enable detailed DEBUG level logging for a single Azure Digital Twins SDK operation, rather than the entire client. It sets up the standard Python logger similarly to client-level logging. However, the `logging_enable=True` argument is passed directly to the specific SDK method call (e.g., `service_client.get_model`) to activate logging only for that particular operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_models_get.py\nimport sys\nimport logging\n\n# Assume service_client and model_id are defined\n# from previous examples or setup\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nmodel_id = \"<YOUR_MODEL_ID>\"\n\n# Get model with logging enabled\nmodel = service_client.get_model(model_id, logging_enable=True)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating TableServiceClient with TokenCredential in Python\nDESCRIPTION: Shows how to create a TableServiceClient using Azure Active Directory (Azure AD) authentication with a TokenCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\nfrom azure.identity import DefaultAzureCredential\n\nwith TableServiceClient(\n    endpoint=\"https://<my_account_name>.table.core.windows.net\", credential=DefaultAzureCredential()\n) as table_service_client:\n    properties = table_service_client.get_service_properties()\n    print(f\"{properties}\")\n```\n\n----------------------------------------\n\nTITLE: Receiving and Decoding Avro-Encoded Data from Azure Event Hubs using Python\nDESCRIPTION: This snippet shows how to receive and decode Avro-encoded messages from Azure Event Hubs. It initializes an `EventHubConsumerClient` and an `AvroEncoder`. An `on_event` callback function is defined to use the `avro_encoder.decode` method to deserialize the `body` of incoming `EventData` objects based on their content type and schema ID. The consumer then starts receiving events.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\neventhub_consumer = EventHubConsumerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    consumer_group='$Default',\n    eventhub_name=eventhub_name,\n)\n\ndef on_event(partition_context, event):\n    decoded_content = avro_encoder.decode(event)\n\nwith eventhub_consumer, avro_encoder:\n    eventhub_consumer.receive(on_event=on_event, starting_position=\"-1\")\n```\n\n----------------------------------------\n\nTITLE: Getting a Sent Share\nDESCRIPTION: Retrieves details of a specific sent share using its ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\nsent_share_id = uuid.uuid4()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nretrieved_sent_share = client.sent_shares.get(sent_share_id=str(sent_share_id))\nprint(retrieved_sent_share)\n```\n\n----------------------------------------\n\nTITLE: Comparing Core Classes in Azure Storage File Share SDK Versions\nDESCRIPTION: This table compares the core classes between version 2.x and 12.x of the Azure Storage File Share SDK. It shows how the FileService class has been split into more specific client classes for different levels of operations (account, share, directory, file) in both synchronous and new asynchronous versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| <= 2.X Classes (Clients)  | V12 Clients | NEW Asynchronous clients |\n|---:|---:|---:|\n| FileService (account-level operations) | ShareServiceClient | aio.ShareServiceClient |\n| FileService (share-level operations) | ShareClient | aio.ShareClient |\n| FileService (directory-level operations) | ShareDirectoryClient | aio.ShareDirectoryClient |\n| FileService (file-level operations) | ShareFileClient | aio.ShareFileClient |\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Identity for Resource Connector Management\nDESCRIPTION: Example showing how to authenticate with Azure Identity's DefaultAzureCredential and create a ResourceConnectorMgmtClient. This uses environment variables for authentication parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourceconnector/azure-mgmt-resourceconnector/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resourceconnector import ResourceConnectorMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceConnectorMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Declaring Function Tool Metadata for Automated Agents - JSON\nDESCRIPTION: This snippet defines a list of function objects, each representing a callable tool (e.g., fetching user info, converting units, sending emails) intended for SDK-based agent invocation. Each function object includes a name, high-level description, and a strictly typed parameters schema following JSON Schema standards. Functions include detailed structure for inputs (types, required fields) and may be used for runtime UI generation, validation, or invocation by automated agents. Inputs and outputs are described at the metadata level; actual implementations are not present. Dependencies include a system supporting JSON Schema for validation and dynamic agent invocation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/main_stream_response.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"get_user_info\",\n        \"description\": \"Retrieves user information based on user ID.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"user_id\": {\n              \"type\": \"integer\",\n              \"description\": \"ID of the user.\"\n            }\n          },\n          \"required\": [\"user_id\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"convert_temperature\",\n        \"description\": \"Converts temperature from Celsius to Fahrenheit.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"celsius\": {\n              \"type\": \"number\",\n              \"description\": \"Temperature in Celsius.\"\n            }\n          },\n          \"required\": [\"celsius\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"longest_word_in_sentences\",\n        \"description\": \"Finds the longest word in each sentence.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"sentences\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"A list of sentences.\"\n            }\n          },\n          \"required\": [\"sentences\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"toggle_flag\",\n        \"description\": \"Toggles a boolean flag.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"flag\": {\n              \"type\": \"boolean\",\n              \"description\": \"The flag to toggle.\"\n            }\n          },\n          \"required\": [\"flag\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"send_email\",\n        \"description\": \"Sends an email with the specified subject and body to the recipient.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"recipient\": {\n              \"type\": \"string\",\n              \"description\": \"Email address of the recipient.\"\n            },\n            \"subject\": {\n              \"type\": \"string\",\n              \"description\": \"Subject of the email.\"\n            },\n            \"body\": {\n              \"type\": \"string\",\n              \"description\": \"Body content of the email.\"\n            }\n          },\n          \"required\": [\"recipient\", \"subject\", \"body\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"process_records\",\n        \"description\": \"Process a list of records, where each record is a dictionary with string keys and integer values.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"records\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\"\n              },\n              \"description\": \"A list containing dictionaries that map strings to integers.\"\n            }\n          },\n          \"required\": [\"records\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"merge_dicts\",\n        \"description\": \"Merges two dictionaries.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"dict1\": {\n              \"type\": \"object\",\n              \"description\": \"First dictionary.\"\n            },\n            \"dict2\": {\n              \"type\": \"object\",\n              \"description\": \"Second dictionary.\"\n            }\n          },\n          \"required\": [\"dict1\", \"dict2\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"calculate_sum\",\n        \"description\": \"Calculates the sum of two integers.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"a\": {\n              \"type\": \"integer\",\n              \"description\": \"First integer.\"\n            },\n            \"b\": {\n              \"type\": \"integer\",\n              \"description\": \"Second integer.\"\n            }\n          },\n          \"required\": [\"a\", \"b\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"fetch_weather\",\n        \"description\": \"Fetches the weather information for the specified location.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The location to fetch weather for.\"\n            }\n          },\n          \"required\": [\"location\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"fetch_current_datetime\",\n        \"description\": \"Get the current time as a JSON string, optionally formatted.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"format\": {\n              \"type\": [\"string\", \"null\"],\n              \"description\": \"The format in which to return the current time. Defaults to None, which uses a standard format.\"\n            }\n          },\n          \"required\": []\n        },\n        \"strict\": false\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Azure AI Search Operation\nDESCRIPTION: This snippet demonstrates how to enable detailed logging for a single search operation in the Azure AI Search Python SDK, even when it's not enabled for the entire client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresult =  client.search(search_text=\"spa\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Inline Attachments in Azure Communication Email SDK\nDESCRIPTION: Shows how to send an email with inline attachments by adding a contentId parameter. This allows embedding images directly in the email body using HTML.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport base64\n\nwith open(\"C://inline_image.jpg\", \"r\") as file:\n    file_contents = file.read()\n\nfile_bytes_b64 = base64.b64encode(bytes(file_contents, 'utf-8'))\n\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"<html>This is the body<br /><img src=\\\"cid:my-inline-image\\\" /></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\n                \"address\": \"customer@domain.com\",\n                \"displayName\": \"Customer Name\"\n            }\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\",\n    \"attachments\": [\n        {\n            \"name\": \"inline_image.jpg\",\n            \"contentType\": \"image/jpeg\",\n            \"contentInBase64\": file_bytes_b64.decode(),\n            \"contentId\": \"my-inline-image\"\n        }\n    ]\n}\n\npoller = client.begin_send(message)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Deleting Blobs (Layers) from Azure Container Registry using Python\nDESCRIPTION: This snippet shows how to delete all blobs associated with a container image. It retrieves the manifest, then deletes each layer blob and the config blob using their respective digest identifiers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    received_manifest = get_manifest_result.manifest\n    # Delete the layers\n    for layer in received_manifest[\"layers\"]:\n        client.delete_blob(self.repository_name, layer[\"digest\"])\n    # Delete the config\n    client.delete_blob(self.repository_name, received_manifest[\"config\"][\"digest\"])\n```\n\n----------------------------------------\n\nTITLE: Triggering Refresh Manually on the Provider - Azure App Configuration Python Provider - Python\nDESCRIPTION: A direct example of invoking the refresh() method on the configuration provider. This checks if the required interval has passed and, if so, pulls updated values from the configuration store. Must be called to realize dynamic changes when refresh-on conditions are met. Outputs nothing directly, but updates the config object in place.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig.refresh()\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Setting Revisions with Filters in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the revision history of Azure App Configuration settings using the `list_revisions` method of the `AzureAppConfigurationClient`. It filters the revisions based on a specific key (`key_filter`) and tags (`tags_filter`) and iterates through the returned items. Requires an initialized `client` object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nitems = client.list_revisions(key_filter=\"MyKey\", tags_filter=[\"my tag=my tag value\"])\nfor item in items:\n    print(item)\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling with DeidentificationClient\nDESCRIPTION: Example showing how to create a DeidentificationClient and implement basic error handling using try/except blocks to catch HttpResponseError exceptions from the service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-health-deidentification/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.health.deidentification import DeidentificationClient\n>>> from azure.identity import DefaultAzureCredential\n>>> from azure.core.exceptions import HttpResponseError\n\n>>> client = DeidentificationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n>>> try:\n        <!-- write test code here -->\n    except HttpResponseError as e:\n        print('service responds error: {}'.format(e.response.json()))\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Blob URL via BlobClient in azure-storage-blob Python SDK\nDESCRIPTION: The make_blob_url method is replaced by using the url attribute of an instantiated BlobClient in v12 of the Azure SDK for Python. Instead of constructing a blob URL via method call, instantiate a BlobClient with the required parameters and access the .url property. Prerequisites include the azure-storage-blob package and authenticated blob endpoint configuration. The url attribute provides the direct HTTPS address to the blob resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobClient\nblob_client = BlobClient(account_url, container_name, blob_name, credential=credential)\nblob_url = blob_client.url\n\n```\n\n----------------------------------------\n\nTITLE: Translating and Transliterating Text - Azure Text Translator - Python\nDESCRIPTION: This snippet combines translation and transliteration in a single call to the text_translator SDK client. It sets both source and target scripts and languages, demonstrating the transliteration of an Arabic text in the Latin script to Simplified Chinese also in Latin script. Transliterated results are displayed if available. Inputs: from_script, from_language, to_script, to_language, input texts. Outputs: translated and transliterated text, with error handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    from_script = \\\"Latn\\\"\\n    from_language = \\\"ar\\\"\\n    to_script = \\\"Latn\\\"\\n    to_language = [\\\"zh-Hans\\\"]\\n    input_text_elements = [\\\"hudha akhtabar.\\\"]\\n\\n    response = text_translator.translate(\\n        body=input_text_elements,\\n        to_language=to_language,\\n        from_script=from_script,\\n        from_language=from_language,\\n        to_script=to_script,\\n    )\\n    translation = response[0] if response else None\\n\\n    if translation:\\n        if translation.source_text:\\n            print(f\\\"Source Text: {translation.source_text.text}\\\")\\n        first_translation = translation.translations[0]\\n        if first_translation:\\n            print(f\\\"Translation: '{first_translation.text}'.\\\")\\n            transliteration = first_translation.transliteration\\n            if transliteration:\\n                print(f\\\"Transliterated text ({transliteration.script}): {transliteration.text}\\\")\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\\n    raise\n```\n\n----------------------------------------\n\nTITLE: Setting Server Timeout for Long-Running Log Queries in Azure Monitor\nDESCRIPTION: Code example demonstrating how to configure an extended server timeout (up to 10 minutes) for complex Kusto queries that may take longer to execute in Azure Monitor Query.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.query import LogsQueryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n\nclient = LogsQueryClient(credential)\n\nclient.query_workspace(\n    \"{workspaceId}\",\n    \"{kusto-query-string}\",\n    timespan=\"{timespan}\",\n    server_timeout=600)\n```\n\n----------------------------------------\n\nTITLE: Handling Profanity in Translations\nDESCRIPTION: Implements profanity handling in translations using ProfanityAction and ProfanityMarker. Allows for deletion, marking, or no action on profane content.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    profanity_action = ProfanityAction.MARKED\n    profanity_maker = ProfanityMarker.ASTERISK\n    to_language = [\"cs\"]\n    input_text_elements = [\"This is ***.\"])\n\n    response = text_translator.translate(\n        body=input_text_elements,\n        to_language=to_language,\n        profanity_action=profanity_action,\n        profanity_marker=profanity_maker,\n    )\n    translation = response[0] if response else None\n\n    if translation:\n        detected_language = translation.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Language using Azure TextAnalyticsClient in Python\nDESCRIPTION: This snippet showcases language detection for an array of input documents using Azure's Text Analytics API. After creating a TextAnalyticsClient with credentials, it submits a batch of reviews and prints detected primary language names and ISO639-1 codes for each. Dependencies include Azure's SDK libraries and required environment variables. Input is a set of review texts; output is a console printout indicating the predicted language for each. Note: One of the sample reviews is in Chinese, but the dominant code comments and explanations remain in English.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.textanalytics import TextAnalyticsClient\\n\\nendpoint = os.environ[\\\"AZURE_LANGUAGE_ENDPOINT\\\"]\\nkey = os.environ[\\\"AZURE_LANGUAGE_KEY\\\"]\\n\\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\\ndocuments = [\\n    \\\"\\\"\\\"\\n    The concierge Paulette was extremely helpful. Sadly when we arrived the elevator was broken, but with Paulette's help we barely noticed this inconvenience.\\n    She arranged for our baggage to be brought up to our room with no extra charge and gave us a free meal to refurbish all of the calories we lost from\\n    walking up the stairs :). Can't say enough good things about my experience!\\n    \\\"\\\"\\\",\\n    \\\"\\\"\\\"\\n    最近由于工作压力太大，我们决定去富酒店度假。那儿的温泉实在太舒服了，我跟我丈夫都完全恢复了工作前的青春精神！加油！\\n    \\\"\\\"\\\"\\n]\\n\\nresult = text_analytics_client.detect_language(documents)\\nreviewed_docs = [doc for doc in result if not doc.is_error]\\n\\nprint(\\\"Let's see what language each review is in!\\\")\\n\\nfor idx, doc in enumerate(reviewed_docs):\\n    print(\\\"Review #{} is in '{}', which has ISO639-1 name '{}'\\\\n\\\".format(\\n        idx, doc.primary_language.name, doc.primary_language.iso6391_name\\n    ))\n```\n\n----------------------------------------\n\nTITLE: Initializing Cosmos DB Client with Diagnostic Logging\nDESCRIPTION: Example showing how to enable diagnostic logging with CosmosHttpLoggingPolicy when creating a Cosmos DB client and database.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclient = CosmosClient(URL, credential=KEY, enable_diagnostics_logging=True)\ndatabase = client.create_database(DATABASE_NAME, logger=logger)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Operation in Azure Tables with Python\nDESCRIPTION: Demonstrates how to enable detailed logging for a single operation in the Azure Tables SDK, even when logging is not enabled for the client. This is useful for debugging specific operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nservice_client.create_entity(entity=my_entity, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment State in Python\nDESCRIPTION: This snippet demonstrates how to monitor the status of a specific deployment. It uses the `get_deployment` method of the DeviceUpdateClient, providing the target device group ID and the deployment ID. The returned response object contains details about the deployment's current state, which is then printed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeployUpdate/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n``` python\nresponse = client.device_management.get_deployment(group, deployment_id)\nprint(response)\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Digital Twin in Python\nDESCRIPTION: Shows how to delete a digital twin using its ID with the DigitalTwinsClient.delete_digital_twin() method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nservice_client.delete_digital_twin(digital_twin_id)\n```\n\n----------------------------------------\n\nTITLE: Getting AzureOpenAI Client and Making Chat Completion Call in Python\nDESCRIPTION: Shows how to get an authenticated `AzureOpenAI` client using `project_client.inference.get_azure_openai_client()` with a specific API version. It then makes a chat completion request using the client's `chat.completions.create` method, specifying the model deployment name ('gpt-4o' in the example) and messages. Requires the `openai` package and an initialized `project_client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\naoai_client = project_client.inference.get_azure_openai_client(api_version=\"2024-06-01\")\n\nresponse = aoai_client.chat.completions.create(\n    model=\"gpt-4o\", # Model deployment name\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How many feet are in a mile?\",\n        },\n    ],\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Setting as Read-Only in Python\nDESCRIPTION: This snippet calls client.set_read_only with the updated configuration setting to mark it as read-only. This prevents modifications until the status is cleared. The method requires a valid ConfigurationSetting object and marks it as immutable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nread_only_config_setting = client.set_read_only(updated_config_setting)\n```\n\n----------------------------------------\n\nTITLE: Initializing QueueServiceClient with Azure AD Token in Python\nDESCRIPTION: Create a QueueServiceClient instance using an Azure Active Directory (AAD) token credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.storage.queue import QueueServiceClient\ntoken_credential = DefaultAzureCredential()\n\nqueue_service_client = QueueServiceClient(\n    account_url=\"https://<my_account_name>.queue.core.windows.net\",\n    credential=token_credential\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Monitor Client with DefaultAzureCredential in Python\nDESCRIPTION: This code demonstrates how to authenticate the Azure Monitor Management Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.monitor import MonitorManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MonitorManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Response Completeness Evaluator Instance\nDESCRIPTION: Initialization of ResponseCompletenessEvaluator with configured model settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/response_completeness.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation import ResponseCompletenessEvaluator , AzureOpenAIModelConfiguration\nfrom pprint import pprint\n\nresponse_completeness_evaluator = ResponseCompletenessEvaluator(model_config=model_config)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Role Definition in Azure Key Vault (Python)\nDESCRIPTION: Uses KeyVaultAccessControlClient to create a custom role definition with specified scope, name, and permissions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.administration import KeyVaultDataAction, KeyVaultPermission, KeyVaultRoleScope\n\nrole_name = \"customRole\"\nscope = KeyVaultRoleScope.GLOBAL\npermissions = [KeyVaultPermission(data_actions=[KeyVaultDataAction.CREATE_HSM_KEY])]\nrole_definition = client.set_role_definition(scope=scope, role_name=role_name, permissions=permissions)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Schema Registry Client in Python\nDESCRIPTION: This snippet shows how to configure logging for the Azure Schema Registry Client. It demonstrates setting up a logger, configuring console output, and enabling detailed logging for the client and individual operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\nimport logging\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.jsonencoder import JsonSchemaEncoder\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the SDK\nlogger = logging.getLogger('azure.schemaregistry')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nDRAFT2020_12_SCHEMA_IDENTIFIER = \"https://json-schema.org/draft/2020-12/schema\"\ncredential = DefaultAzureCredential()\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential, logging_enable=True)\nencoder = JsonSchemaEncoder(client=schema_registry_client, validate=DRAFT2020_12_SCHEMA_IDENTIFIER)\n\n# Enable logging for a single operation\nschema_registry_client.get_schema(schema_id, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role Definition in Azure Key Vault (Python)\nDESCRIPTION: Demonstrates the deletion of a role definition using KeyVaultAccessControlClient with the specified scope and unique name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_role_definition(scope=scope, name=unique_definition_name)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Renaming Message User Properties in Python\nDESCRIPTION: Renamed the `user_properties` property on `Message` (and inherited types `PeekMessage`, `ReceivedMessage`) to `properties` for better clarity. The original internal AMQP properties are now accessed via `_amqp_properties`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Renamed:\nMessage.user_properties -> Message.properties\n\n# Internalized:\nMessage.properties -> Message._amqp_properties\n```\n\n----------------------------------------\n\nTITLE: Sending Azure Event Grid CloudEvent with OpenTelemetry Tracing in Python\nDESCRIPTION: This snippet demonstrates sending a CloudEvent using `EventGridPublisherClient` while capturing trace information with OpenTelemetry. It assumes OpenTelemetry has been configured (as shown in previous snippets). It retrieves configuration from environment variables, creates a `CloudEvent`, initializes the client, and then calls `client.send` within an OpenTelemetry span created using `tracer.start_as_current_span`. This ensures the event publishing operation is traced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventgrid import EventGridPublisherClient\nfrom azure.core.messaging import CloudEvent\nfrom azure.core.credentials import AzureKeyCredential\n\n# Assuming 'tracer' is configured as in the previous OpenTelemetry snippet\nhostname = os.environ['CLOUD_TOPIC_HOSTNAME']\nkey = AzureKeyCredential(os.environ['CLOUD_ACCESS_KEY'])\ncloud_event = CloudEvent(\n    source = 'demo',\n    type = 'sdk.demo',\n    data = {'test': 'hello'},\n)\nwith tracer.start_as_current_span(name=\"MyApplication\"):\n    client = EventGridPublisherClient(hostname, key)\n    client.send(cloud_event)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Event Grid Management Client - Python\nDESCRIPTION: Demonstrates how to authenticate the Azure Event Grid Management Client using the DefaultAzureCredential class from the azure-identity package in Python. Requires that the environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and optionally AZURE_SUBSCRIPTION_ID are pre-configured. The code sets up the client object which is used to manage Event Grid resources programmatically. Input: the environment variable AZURE_SUBSCRIPTION_ID; Output: an authenticated EventGridManagementClient instance; Limitations: Fails if environment variables are misconfigured or missing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-mgmt-eventgrid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.eventgrid import EventGridManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EventGridManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with Parameterized Filters - Azure Data Tables - Python\nDESCRIPTION: This snippet demonstrates how to query entities in an Azure table with parameterized filters using the 'TableClient' from the 'azure-data-tables' Python SDK. It utilizes a query filter expression with '@' symbol-prefixed parameters and passes them in a dictionary, executing the query and iterating through the returned entities. Dependencies include the 'azure-data-tables' package and a valid 'table_client' object. The main parameters are the query filter string and a dictionary of parameter values. The output is printed entities that match the filter condition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# in the query filter with an '@' symbol prefix\\nquery_filter = \\\"age eq @age_param and married eq @married_param\\\"\\nparameters = {\\n    \\\"age_param\\\": 25,\\n    \\\"married_param\\\": True,\\n}\\n\\nfor entity in table_client.query_entities(query_filter, parameters=parameters):\\n    print(entity)\n```\n\n----------------------------------------\n\nTITLE: Getting Map Tiles\nDESCRIPTION: Example of retrieving map tiles in vector or raster formats for integration with map controls or SDKs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.render import MapsRenderClient\nfrom azure.maps.render import TilesetID\n\nmaps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_render_client.get_map_tile(\n    tileset_id=TilesetID.MICROSOFT_BASE,\n    z=6,\n    x=9,\n    y=22,\n    tile_size=\"512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Event Hubs SDK (Python)\nDESCRIPTION: This snippet demonstrates how to configure logging for the Azure Event Hubs SDK. It shows how to set up a stream handler, format logs, and enable AMQP frame level tracing when creating the client objects. This is useful for troubleshooting and debugging Event Hubs applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nhandler = logging.StreamHandler(stream=sys.stdout)\nlog_fmt = logging.Formatter(fmt=\"%(asctime)s | %(threadName)s | %(levelname)s | %(name)s | %(message)s\")\nhandler.setFormatter(log_fmt)\nlogger = logging.getLogger('azure.eventhub')\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(handler)\n\n...\n\nfrom azure.eventhub import EventHubProducerClient, EventHubConsumerClient\n\nproducer = EventHubProducerClient(..., logging_enable=True)\nconsumer = EventHubConsumerClient(..., logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Maps Timezone Client with Subscription Key - Python\nDESCRIPTION: Illustrates how to authenticate the MapsTimeZoneClient using an Azure Maps Subscription Key by reading the key from the AZURE_SUBSCRIPTION_KEY environment variable. It demonstrates instantiation of AzureKeyCredential and the client, suitable for applications where key-based authentication is appropriate. Requires the azure-core and azure-maps-timezone Python packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.timezone import MapsTimeZoneClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\ntimezone_client = MapsTimeZoneClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure AI Search Python SDK\nDESCRIPTION: This snippet shows how to configure logging for the Azure AI Search Python SDK. It sets up a logger for the 'azure' SDK, configures console output, and creates a SearchClient with detailed logging enabled.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = SearchClient(\"<service endpoint>\", \"<index_name>\", AzureKeyCredential(\"<api key>\"), logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Update File Metadata with Device Update SDK in Python\nDESCRIPTION: This snippet details how to extract metadata for each file within a device update by iterating over results from list_files and invoking get_file on each item. It requires a valid DeviceUpdateClient, environment variables to specify update attributes, and prints metadata for each file found.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetUpdate/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.device_update.list_files(update_provider, update_name, update_version)\\nfor item in response:\\n    print(client.device_update.get_file(update_provider, update_name, update_version, item))\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Azure SDK in Python\nDESCRIPTION: This code snippet sets up debug logging for the Azure SDK. It configures a logger to output debug information to stdout, which helps in tracing REST API calls made by the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/debug_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\nlogger = logging.getLogger('')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout, )\nlogger.addHandler(handler)\nformatter = logging.Formatter(\n    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipts with Azure Confidential Ledger in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a receipt for a committed write transaction in Azure Confidential Ledger. It shows setting up authentication, creating a certificate client to retrieve service identity, saving the ledger certificate, and using the ConfidentialLedgerClient to fetch a receipt for a specific transaction.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\n# Replace this with the Confidential Ledger ID \nledger_id = \"my-ledger-id\"\n\n# Setup authentication\ncredential = DefaultAzureCredential()\n\n# Create a Ledger Certificate client and use it to\n# retrieve the service identity for our ledger\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=ledger_id\n)\n\n# Save ledger service certificate into a file for later use\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\n# Create Confidential Ledger client\nledger_client = ConfidentialLedgerClient(\n    endpoint=f\"https://{ledger_id}.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\n# The method begin_get_receipt returns a poller that\n# we can use to wait for the receipt to be available for retrieval \nget_receipt_poller = ledger_client.begin_get_receipt(transaction_id)\nget_receipt_result = get_receipt_poller.result()\n\nprint(f\"Write receipt for transaction id {transaction_id} was successfully retrieved: {get_receipt_result}\")\n```\n\n----------------------------------------\n\nTITLE: Processing List of Records Function - Python\nDESCRIPTION: Outlines the \\\"process_records\\\" callable, which expects an array of dictionaries mapping strings to integers. The function's parameters define the input structure rigorously, suitable for batch-processing pipelines or record transformation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"process_records\",\n  \"description\": \"Process a list of records, where each record is a dictionary with string keys and integer values.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"records\": {\n        \"type\": \"array\",\n        \"items\": {\"type\": \"object\"},\n        \"description\": \"A list containing dictionaries that map strings to integers.\"\n      }\n    },\n    \"required\": [\"records\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Container SAS Token Using azure-storage-blob Python SDK\nDESCRIPTION: The method generate_container_shared_access_signature is updated to generate_container_sas in v12 of the Azure SDK for Python. As with blob SAS, this is no longer a class method, and must be imported from azure.storage.blob. Required prerequisites are the azure-storage-blob package and proper account/container credentials. The function returns a SAS token string for the specified container, defining granted permissions and lifetime.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import generate_container_sas\n# Usage example:\n# sas_token = generate_container_sas(account_name, container_name, account_key=account_key, ...)\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with User-Assigned Managed Identity using Resource ID in Python\nDESCRIPTION: This snippet demonstrates how to authenticate using a user-assigned managed identity with a resource ID. It uses ManagedIdentityCredential to create a SecretClient for Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\nresource_id = \"/subscriptions/<id>/resourceGroups/<rg>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<mi-name>\"\n\ncredential = ManagedIdentityCredential(identity_config={\"resource_id\": resource_id})\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Maps SAS Token via Azure Maps Management SDK - Python\nDESCRIPTION: This Python script illustrates how to generate a SAS token for Azure Maps using Azure Maps Management SDK with Azure Active Directory credentials. It requires 'azure-identity' and 'azure-mgmt-maps' to be installed, and environment variables for 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', and 'AZURE_CLIENT_SECRET'. The script authenticates with DefaultAzureCredential, creates a client, and calls 'list_sas' to obtain the SAS token for specified resource group and maps account details. Output is the SAS token response, which can be used for subsequent authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maps import AzureMapsManagementClient\n\n\"\"\"\n# PREREQUISITES\n    pip install azure-identity\n    pip install azure-mgmt-maps\n# USAGE\n    python account_list_sas.py\n    Before run the sample, please set the values of the client ID, tenant ID and client secret\n    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\n    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:\n    https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n\"\"\"\n\ndef main():\n    client = AzureMapsManagementClient(\n        credential=DefaultAzureCredential(),\n        subscription_id=\"your-subscription-id\",\n    )\n\n    response = client.accounts.list_sas(\n        resource_group_name=\"myResourceGroup\",\n        account_name=\"myMapsAccount\",\n        maps_account_sas_parameters={\n            \"expiry\": \"2017-05-24T11:42:03.1567373Z\",\n            \"maxRatePerSecond\": 500,\n            \"principalId\": \"your-principal-id\",\n            \"regions\": [\"eastus\"],\n            \"signingKey\": \"primaryKey\",\n            \"start\": \"2017-05-24T10:42:03.1567373Z\",\n        },\n    )\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Managed Applications Client\nDESCRIPTION: Example showing how to authenticate the Managed Applications client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedapplications/azure-mgmt-managedapplications/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.managedapplications import ManagedApplicationsMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ManagedApplicationsMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Package\nDESCRIPTION: Command to install the Azure Event Grid client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventgrid\n```\n\n----------------------------------------\n\nTITLE: Initializing Asynchronous AIProjectClient - Azure AI Projects SDK - Python\nDESCRIPTION: Shows how to initialize an asynchronous AIProjectClient using aiohttp, the async namespace, and Azure credential objects. Prerequisites: azure-ai-projects, aiohttp, and azure-identity Python packages. The code uses environment variable PROJECT_CONNECTION_STRING for the connection string. Inputs: Azure credential, connection string. Outputs: Async AIProjectClient instance for use with async workflows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport asyncio\nfrom azure.ai.projects.aio import AIProjectClient\nfrom azure.core.credentials import AzureKeyCredential\n\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding AzureApplicationCredential for Azure Deployments (Python, Beta)\nDESCRIPTION: Feature added in 1.7.0b2 introducing `AzureApplicationCredential`. This credential provides a default chain specifically designed for applications deployed within Azure services, attempting environment, managed identity, etc.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nAzureApplicationCredential\n```\n\n----------------------------------------\n\nTITLE: Downloading Container Images\nDESCRIPTION: Download a container image by retrieving its manifest and downloading individual layers and configuration\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Get the image\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    received_manifest = get_manifest_result.manifest\n    print(f\"Got manifest:\\n{received_manifest}\")\n\n    # Download and write out the layers\n    for layer in received_manifest[\"layers\"]:\n        # Remove the \"sha256:\" prefix from digest\n        layer_file_name = layer[\"digest\"].split(\":\")[1]\n        try:\n            stream = client.download_blob(self.repository_name, layer[\"digest\"])\n            with open(layer_file_name, \"wb\") as layer_file:\n                for chunk in stream:\n                    layer_file.write(chunk)\n        except DigestValidationError:\n            print(f\"Downloaded layer digest value did not match. Deleting file {layer_file_name}.\")\n            os.remove(layer_file_name)\n        print(f\"Got layer: {layer_file_name}\")\n    # Download and write out the config\n    config_file_name = \"config.json\"\n    try:\n        stream = client.download_blob(self.repository_name, received_manifest[\"config\"][\"digest\"])\n        with open(config_file_name, \"wb\") as config_file:\n            for chunk in stream:\n                config_file.write(chunk)\n    except DigestValidationError:\n        print(f\"Downloaded config digest value did not match. Deleting file {config_file_name}.\")\n        os.remove(config_file_name)\n    print(f\"Got config: {config_file_name}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Historical Normal Weather Data with Azure Maps Weather API in Python\nDESCRIPTION: This snippet fetches climatology data for historical normal temperatures, precipitation, and cooling/heating degree day information for a specified location and date range. It uses the MapsWeatherClient to query the API and handles any potential HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nimport datetime\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_daily_historical_normals():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_daily_historical_normals(\n            coordinates=[40.760139, -73.961968],\n            start_date=datetime.date(2024, 1, 1),\n            end_date=datetime.date(2024, 1, 31)\n        )\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_daily_historical_normals()\n```\n\n----------------------------------------\n\nTITLE: Searching for Tropical Storms using Azure Maps Weather API in Python\nDESCRIPTION: This code demonstrates how to search for tropical storms using the Azure Maps Weather SDK. It retrieves a list of storms issued by national weather forecasting agencies for a specified year.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_tropical_storm_search():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_tropical_storm_search(year=2022)\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_tropical_storm_search()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Configuration Snapshot by Name in Python\nDESCRIPTION: This snippet shows how to fetch an existing configuration snapshot from Azure App Configuration using its name. It calls the `get_snapshot` method on the client, passing the `snapshot_name`. Requires an initialized `client` and a `snapshot_name` variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nreceived_snapshot = client.get_snapshot(name=snapshot_name)\n```\n\n----------------------------------------\n\nTITLE: Creating AuthoringClient and Updating Sources in Azure Question Answering (Python)\nDESCRIPTION: This snippet demonstrates how to create an AuthoringClient, update sources for a project, and list the updated sources. It uses the Azure Question Answering Python SDK to interact with the service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# create client\nclient = AuthoringClient(endpoint, AzureKeyCredential(key))\n\nproject_name = \"IssacNewton\"\nupdate_sources_poller = client.begin_update_sources(\n    project_name=project_name,\n    sources=[\n        {\n            \"op\": \"add\",\n            \"value\": {\n                \"displayName\": \"Issac Newton Bio\",\n                \"sourceUri\": \"https://wikipedia.org/wiki/Isaac_Newton\",\n                \"sourceKind\": \"url\"\n            }\n        }\n    ]\n)\nupdate_sources_poller.result()\n\n# list sources\nprint(\"list project sources\")\nsources = client.list_sources(\n    project_name=project_name\n)\nfor source in sources:\n    print(\"project: {}\".format(source[\"displayName\"]))\n    print(\"\\tsource: {}\".format(source[\"source\"]))\n    print(\"\\tsource Uri: {}\".format(source[\"sourceUri\"]))\n    print(\"\\tsource kind: {}\".format(source[\"sourceKind\"]))\n```\n\n----------------------------------------\n\nTITLE: Creating Received Share Clients with PurviewSharingClient - Python\nDESCRIPTION: Initializes a PurviewSharingClient to operate on received shares using environment variables and default credentials. No operations beyond client creation are performed; provides a prerequisite for subsequent share management code. Requires Azure SDK dependencies and the ENDPOINT variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Certificate Authentication with Azure Confidential Ledger\nDESCRIPTION: Shows how to authenticate with the ledger using certificate-based authentication instead of Azure AD tokens. Uses ConfidentialLedgerCertificateCredential for mutual TLS.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import (\n    ConfidentialLedgerCertificateCredential,\n    ConfidentialLedgerClient,\n)\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = ConfidentialLedgerCertificateCredential(\n    certificate_path=\"Path to user certificate PEM file\"\n)\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Storage Mover Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the Azure Storage Mover Management Client using DefaultAzureCredential and environment variables for Azure AD token authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storagemover/azure-mgmt-storagemover/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storagemover import StorageMoverMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageMoverMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Operation Logging for Azure Digital Twins SDK - Python\nDESCRIPTION: Sets up temporary debug-level logging for a single service client operation (get_model). The logger is set up for debug output to stdout, and logging is enabled for the specific API call by setting logging_enable=True. Requires service_client, model_id, sys, and logging as dependencies. Only the specified operation has logging enabled.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Get model with logging enabled\nmodel = service_client.get_model(model_id, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Handling HttpResponseError Exceptions in Azure AI Inference Python SDK\nDESCRIPTION: Shows how to use a try-except block to catch `HttpResponseError` exceptions that may be raised by client methods like `complete` or `embed` upon receiving a non-success HTTP status code from the service. It demonstrates accessing the status code, reason phrase, and detailed error message from the exception object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.exceptions import HttpResponseError\n\n...\n\ntry:\n    result = client.complete( ... )\nexcept HttpResponseError as e:\n    print(f\"Status code: {e.status_code} ({e.reason})\")\n    print(e.message)\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Voice Services Management Client\nDESCRIPTION: Code example demonstrating how to authenticate with the Voice Services Management Client using DefaultAzureCredential. Retrieves the subscription ID from environment variables and initializes the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/voiceservices/azure-mgmt-voiceservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.voiceservices import VoiceServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = VoiceServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Getting a Schema by ID using SchemaRegistryClient in Python\nDESCRIPTION: Shows how to fetch a schema's definition and properties from the registry using its unique ID. It initializes a `SchemaRegistryClient` and calls the `get_schema` method, passing the `schema_id`. The schema definition and properties are then accessible from the returned schema object. Requires the `SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE` environment variable and a valid `schema_id`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\nschema_id = 'your-schema-id'\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema = schema_registry_client.get_schema(schema_id)\n    definition = schema.definition\n    properties = schema.properties\n```\n\n----------------------------------------\n\nTITLE: Translating Text Between Languages - Azure Text Translator - Python\nDESCRIPTION: This snippet demonstrates translating text from a specified source language ('en') into a target language ('cs') using the text_translator SDK client in Python. Required parameters include 'from_language', 'to_language', and the input text elements. Translations are iterated and printed, and exceptions are handled using HttpResponseError. Inputs: source and target languages, list of input texts. Outputs: printed translations. The text_translator client must be initialized beforehand.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    from_language = \\\"en\\\"\\n    to_language = [\\\"cs\\\"]\\n    input_text_elements = [\\\"This is a test\\\"]\\n\\n    response = text_translator.translate(\\n        body=input_text_elements, to_language=to_language, from_language=from_language\\n    )\\n    translation = response[0] if response else None\\n\\n    if translation:\\n        for translated_text in translation.translations:\\n            print(f\\\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\\\")\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\\n    raise\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction Receipts in Azure Confidential Ledger with Python\nDESCRIPTION: This code snippet shows how to verify a transaction receipt from Azure Confidential Ledger using the verify_receipt function. It reads the previously saved ledger certificate, optionally retrieves application claims from the receipt, and performs offline verification of the receipt's validity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger.receipt import (\n    verify_receipt,\n)\n\n# Read contents of service certificate file saved in previous step.\nwith open(ledger_tls_cert_file_name, \"r\") as service_cert_file:\n    service_cert_content = service_cert_file.read()\n\n# Optionally read application claims, if any\napplication_claims = get_receipt_result.get(\"applicationClaims\", None) \n\ntry:\n    # Verify the contents of the receipt.\n    verify_receipt(get_receipt_result[\"receipt\"], service_cert_content, application_claims=application_claims)\n    print(f\"Receipt for transaction id {transaction_id} successfully verified\")\nexcept ValueError:\n    print(f\"Receipt verification for transaction id {transaction_id} failed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Global DEBUG Logging for Azure SDK Client in Python\nDESCRIPTION: This snippet shows how to set up detailed DEBUG level logging for the Azure SDK using Python's standard logging library. It configures a logger for the 'azure' namespace, sets its level to DEBUG, directs output to the console (stdout), and then instantiates a `LoadTestAdministrationClient` with the `logging_enable=True` argument to activate detailed logging for that specific client instance. Note that DEBUG level logging can expose sensitive information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLogLevel(logging.DEBUG)\n\n# Configure console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Enable logging for a client\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential(), logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Managing and Training LargePersonGroup for Face Recognition - Azure Face SDK - Python\nDESCRIPTION: This snippet illustrates how to create a LargePersonGroup, add Persons and their images, and register faces using the FaceAdministrationClient from the Azure AI Vision Face SDK. Required dependencies are azure-core and azure-ai-vision-face. The function 'read_file_content' reads images as binary data. Inputs include endpoints, API keys, file paths for person images, and LargePersonGroup IDs. The snippet prepares the group for subsequent identification through face detection and recognition operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.vision.face import FaceAdministrationClient, FaceClient\\nfrom azure.ai.vision.face.models import FaceDetectionModel, FaceRecognitionModel\\n\\ndef read_file_content(file_path: str):\\n    with open(file_path, \"rb\") as fd:\\n        file_content = fd.read()\\n\\n    return file_content\\n\\nendpoint = \"<your endpoint>\"\\nkey = \"<your api key>\"\\n\\nlarge_person_group_id = \"lpg_family\"\\n\\nwith FaceAdministrationClient(endpoint=endpoint, credential=AzureKeyCredential(key)) as face_admin_client:\\n    print(f\"Create a large person group with id: {large_person_group_id}\")\\n    face_admin_client.large_person_group.create(\\n        large_person_group_id, name=\"My Family\", recognition_model=FaceRecognitionModel.RECOGNITION04\\n    )\\n\\n    print(\"Create a Person Bill and add a face to him.\")\\n    bill_person_id = face_admin_client.large_person_group.create_person(\\n        large_person_group_id, name=\"Bill\", user_data=\"Dad\"\\n    ).person_id\\n    bill_image_file_path = \"./samples/images/Family1-Dad1.jpg\"\\n    face_admin_client.large_person_group.add_face(\\n        large_person_group_id,\\n        bill_person_id,\\n        read_file_content(bill_image_file_path),\\n        detection_model=FaceDetectionModel.DETECTION03,\\n        user_data=\"Dad-0001\",\\n    )\\n\\n    print(\"Create a Person Clare and add a face to her.\")\\n    clare_person_id = face_admin_client.large_person_group.create_person(\\n        large_person_group_id, name=\"Clare\", user_data=\"Mom\"\\n    ).person_id\\n    clare_image_file_path = \"./samples/images/Family1-Mom1.jpg\"\\n    face_admin_client.large_person_group.add_face(\\n        large_person_group_id,\\n        clare_person_id,\\n        read_file_content(clare_image_file_path),\\n        detection_model=FaceDetectionModel.DETECTION03,\\n        user_data=\"Mom-0001\",\\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Fabric Agent Integration\nDESCRIPTION: Demonstrates how to create an AI agent that connects to Fabric data sources using FabricTool and an established connection to the Fabric resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfabric_connection = project_client.connections.get(connection_name=os.environ[\"FABRIC_CONNECTION_NAME\"])\nconn_id = fabric_connection.id\n\nprint(conn_id)\n\n# Initialize an Agent Fabric tool and add the connection id\nfabric = FabricTool(connection_id=conn_id)\n```\n\n----------------------------------------\n\nTITLE: Invoking Tool Functions and Handling Outputs in a Threaded Session - JSON\nDESCRIPTION: This snippet shows actual tool function invocation events and responses as part of a threaded session. Each record details the invocation step (step_01, call_01, call_02) and the output of functions such as fetch_current_datetime and fetch_weather, with input arguments and returned values. It is used as a trace for session execution, helpful both for logging and integrating real-time agent orchestrations. Inputs and outputs are JSON objects keyed by function name and their arguments; constraints follow the schemas described in the function definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/fetch_current_datetime_and_weather_stream_response.txt#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1735945043,\n  \"run_id\": \"run_01\",\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"type\": \"tool_calls\",\n  \"status\": \"completed\",\n  \"cancelled_at\": null,\n  \"completed_at\": 1735945046,\n  \"expires_at\": 1735945641,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\n    \"type\": \"tool_calls\",\n    \"tool_calls\": [\n      {\n        \"id\": \"call_01\",\n        \"type\": \"function\",\n        \"function\": {\n          \"name\": \"fetch_current_datetime\",\n          \"arguments\": \"{}\",\n          \"output\": \"{\\\"current_time\\\": \\\"2025-01-03 14:57:24\\\"}\"\n        }\n      },\n      {\n        \"id\": \"call_02\",\n        \"type\": \"function\",\n        \"function\": {\n          \"name\": \"fetch_weather\",\n          \"arguments\": \"{\\\"location\\\": \\\"New York\\\"}\",\n          \"output\": \"{\\\"weather\\\": \\\"Sunny, 25\\u00b0C\\\"}\"\n        }\n      }\n    ]\n  },\n  \"usage\": {\n    \"prompt_tokens\": 648,\n    \"completion_tokens\": 71,\n    \"total_tokens\": 719\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pairs in Azure App Configuration using Azure CLI (Powershell)\nDESCRIPTION: These Azure CLI commands set simple key-value pairs within a specified Azure App Configuration store. The `--name` parameter identifies the target store, `--key` specifies the key name, and `--value` sets its corresponding value. These commands are used to populate the configuration store with sample data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Powershell\nCODE:\n```\naz appconfig kv set --name <config-store-name> --key message --value \"hi\"\naz appconfig kv set --name <config-store-name> --key test.message --value \"Hi with test Prefix\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Indexing Policy with Full Text Search in Azure Cosmos DB\nDESCRIPTION: Shows how to configure an indexing policy that includes both composite indexes and full text search indexes for consistent indexing mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nindexing_policy = {\n        \"automatic\": True,\n        \"indexingMode\": \"consistent\",\n        \"compositeIndexes\": [\n            [\n                {\"path\": \"/numberField\", \"order\": \"ascending\"},\n                {\"path\": \"/stringField\", \"order\": \"descending\"}\n            ]\n        ],\n        \"fullTextIndexes\": [\n            {\"path\": \"/abstract\"}\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Evaluating Detailed Query and Response\nDESCRIPTION: Example showing evaluation of a query-response pair with full task adherence\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/task_adherence.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = task_adherence_evaluator(query=\"What are the best practices for maintaining a healthy rose garden during the summer?\",\n                                  response=\"For optimal summer care of your rose garden, start by watering deeply early in the morning to ensure the roots are well-hydrated without encouraging fungal growth. Apply a 2-3 inch layer of organic mulch around the base of the plants to conserve moisture and regulate soil temperature. Fertilize with a balanced rose fertilizer every 4–6 weeks to support healthy growth. Prune away any dead or diseased wood to promote good air circulation, and inspect regularly for pests such as aphids or spider mites, treating them promptly with an appropriate organic insecticidal soap. Finally, ensure that your roses receive at least 6 hours of direct sunlight daily for robust flowering.\",\n                                 )\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Removing Read-Only from Configuration Setting in Python\nDESCRIPTION: This snippet invokes client.set_read_only with the 'readonly' argument set to False to clear read-only status. This allows the configuration setting to be updated again. Provide the updated configuration setting object as input.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nread_write_config_setting = client.set_read_only(updated_config_setting, False)\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Messages in a Single Batch (Python)\nDESCRIPTION: Enhanced `ServiceBusSender.send()` (now `send_messages`) to accept a list of messages. The SDK attempts to send them as a single batch if they fit within size limits; otherwise, a `ValueError` (specifically `MessageContentTooLarge` if size is the issue) is raised.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusSender.send_messages([message1, message2]) # Sends as batch if possible\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceProvisioningClient with SAS Credentials in Python\nDESCRIPTION: Demonstrates creating a `DeviceProvisioningClient` using Shared Access Signature (SAS) credentials. It shows two approaches: using `AzureNamedKeyCredential` with the policy name and key, and using `AzureSasCredential` with a generated SAS token. Both require the DPS endpoint URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\nfrom azure.iot.deviceprovisioning import generate_sas_token\nfrom azure.core.credentials import AzureNamedKeyCredential, AzureSasCredential\n\ndps_endpoint = \"https://my-dps.azure-device-provisioning.net/\"\npolicy_name = \"<access_policy_name>\"\npolicy_key = \"<access_policy_primary_key>\"\n\n\n# AzureNamedKeyCredential\ncredential = AzureNamedKeyCredential(name=policy_name, key=policy_key)\n\n# AzureSasCredential\nsas_token = generate_sas_token(dps_endpoint, policy_name, policy_key)\ncredential = AzureSasCredential(signature=sas_token)\n\nclient = DeviceProvisioningClient(endpoint=dps_endpoint, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Monitor OpenTelemetry Exporters\nDESCRIPTION: Example of passing configuration parameters to the Azure Monitor OpenTelemetry exporter through the configure_azure_monitor function, including connection string and disabling offline storage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n...\nconfigure_azure_monitor(\n   connection_string=\"<your-connection-string>\",\n   disable_offline_storage=True,\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Maps Timezone SDK via pip - Bash\nDESCRIPTION: Shows how to install the Azure Maps Timezone SDK for Python using pip. This is a prerequisite for accessing the Azure Maps Timezone APIs from Python applications. The command needs to be run in an environment where Python 3.8 or higher and pip are installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-timezone\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication and Storage Details in Python\nDESCRIPTION: Sets up Azure authentication using `InteractiveBrowserCredential` or `ClientSecretCredential` from the `azure-identity` library. It defines placeholder variables for Azure subscription ID, storage account names (input and output), resource group, container names, and service principal credentials (tenant ID, client ID, client secret) required for interacting with Azure Storage and potentially creating resources. This prepares the environment for accessing Azure Blob storage containing App Insights data or other telemetry, and for storing model outputs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import InteractiveBrowserCredential\n\ncredential = InteractiveBrowserCredential()\n\n# The subscription ID you'll be utilizing\nsubscription_id = ''\n# The storage account to extract app insights logs from, and/or to write model metadata to.\ninput_storage_account_name = ''\n# The resource group to create a storage account from, if a distinct location is desired for model metadata being output.\noutput_resource_group = ''\n# If present, the distinct storage account to create for output data; otherwise the input_storage_account will be used.\noutput_storage_account_name = ''\n# The container to create and store output data in.\noutput_container_name = ''\n# The credentials needed for a service principle with authentication to the subscription for creating the output resources.\ntenant_id = ''\nclient_id = ''\nclient_secret = ''\n\nfrom azure.identity import ClientSecretCredential\ncredential = ClientSecretCredential(tenant_id, client_id, client_secret)\n\n# These settings are only relevant if you are following along with your own app-insights blob-exported data.os\n# The name of the container app-insights is sending data into.\napp_insights_container_name=''\n# The path your app-insights export is storing blobs under.\napp_blob_path = ''\n```\n\n----------------------------------------\n\nTITLE: Consuming and Deserializing EventGridEvents from Service Bus (Python)\nDESCRIPTION: Illustrates consuming messages from an Azure Service Bus queue and deserializing their JSON payloads into strongly-typed `EventGridEvent` objects using the `azure-eventgrid` v4.0 SDK's `from_dict` method. The code connects to Service Bus using `ServiceBusClient`, receives messages, decodes the message body (assuming UTF-8 encoded JSON), parses the JSON, and then uses `EventGridEvent.from_dict` for deserialization. This approach relies on `azure-servicebus` for message retrieval and requires `SERVICE_BUS_CONN_STR` and `SERVICE_BUS_QUEUE_NAME` environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.eventgrid import EventGridEvent\nfrom azure.servicebus import ServiceBusClient\nimport os\nimport json\n\n# all types of EventGridEvents below produce same DeserializedEvent\nconnection_str = os.environ['SERVICE_BUS_CONN_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connection_str) as sb_client:\n    payload =  sb_client.get_queue_receiver(queue_name).receive_messages()\n\n    ## deserialize payload into a list of typed Events\n    events = [EventGridEvent.from_dict(json.loads(next(msg.body).decode('utf-8'))) for msg in payload]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Account Key in MixedRealityStsClient\nDESCRIPTION: Creates a MixedRealityStsClient using account key authentication. This approach uses AzureKeyCredential with the account ID, domain, and key to authenticate with the Mixed Reality STS service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.authentication import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTP Test Server (Python)\nDESCRIPTION: This command utilizes Python's built-in `http.server` module to start a simple local web server. This server hosts the HTML, test files, and dependencies needed for the Pyodide integration tests, typically making them accessible at `http://localhost:8000`. The `-h` flag is likely a typo in the source document and should probably be `-m` to invoke the module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-experimental/samples/pyodide_integration/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -h http.server\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships and Updating Twin Properties in Python\nDESCRIPTION: This snippet shows how to create relationships between tickets and customers, and update the ticket state. It simulates selling tickets to customers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor c,t in enumerate(tickets_sold):\n    print(t)\n    tickethoder_relationship = {\n            \"$relationshipId\": f\"{t}ownedBy{customers_sold[c]}\",\n            \"$sourceId\": t,\n            \"$relationshipName\": \"ownedBy\",\n            \"$targetId\": customers_sold[c],\n            \"bought_online\": False\n        }\n\n    service_client.upsert_relationship(\n            tickethoder_relationship[\"$sourceId\"],\n            tickethoder_relationship[\"$relationshipId\"],\n            tickethoder_relationship\n        )\n\n    patch = [\n        {\n            \"op\": \"replace\",\n            \"path\": \"\",\n            \"value\": \"sold\"\n        }\n    ]\n    service_client.update_component(t,\"state\", patch)\n```\n\n----------------------------------------\n\nTITLE: Initializing SipRoutingClient with Azure AD Credentials (Python)\nDESCRIPTION: This snippet demonstrates how to initialize a SipRoutingClient using Azure Active Directory credentials. Dependencies: azure.communication.phonenumbers.siprouting, azure.identity, environment variables for Azure AD identity. Requires specification of the service endpoint. Returns a configured SIP routing client for trunk and route management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.communication.phonenumbers.siprouting import SipRoutingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have your\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nsip_routing_client = SipRoutingClient(endpoint, DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Service Client Generation\nDESCRIPTION: YAML configuration for generating the Confidential Ledger Identity Service client. Defines input specifications, output location, package details and generation options for the certificate-related functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/confidentialledger/data-plane/Microsoft.ConfidentialLedger/preview/2024-12-09-preview/identityservice.json\noutput-folder: ../azure/confidentialledger/certificate\nnamespace: azure.confidentialledger.certificate\npackage-name: azure-confidentialledger-certificate\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\ntitle: ConfidentialLedgerCertificateClient\nversion-tolerant: true\npackage-version: 1.1.3\npython: true\n```\n\n----------------------------------------\n\nTITLE: Single-Slot Personalization Implementation\nDESCRIPTION: Example showing how to implement single-slot personalization using the PersonalizerClient. Demonstrates ranking actions based on context features and sending reward feedback.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.personalizer import PersonalizerClient\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = \"https://<my-personalizer-instance>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\n\nclient = PersonalizerClient(endpoint, credential)\n\n# The list of actions to be ranked with metadata associated for each action.\nactions = [\n    {\n        \"id\": \"Video1\",\n        \"features\": [\n            {\"videoType\": \"documentary\", \"videoLength\": 35, \"director\": \"CarlSagan\"},\n            {\"mostWatchedByAge\": \"50-55\"},\n        ],\n    },\n    {\n        \"id\": \"Video2\",\n        \"features\": [\n            {\"videoType\": \"movie\", \"videoLength\": 120, \"director\": \"StevenSpielberg\"},\n            {\"mostWatchedByAge\": \"40-45\"},\n        ],\n    },\n]\n\n# Context of the user to which the action must be presented.\ncontext_features = [\n    {\"currentContext\": {\"day\": \"tuesday\", \"time\": \"night\", \"weather\": \"rainy\"}},\n    {\n        \"userContext\": {\n            \"payingUser\": True,\n            \"favoriteGenre\": \"documentary\",\n            \"hoursOnSite\": 0.12,\n            \"lastWatchedType\": \"movie\",\n        },\n    },\n]\n\nrequest = {\n    \"actions\": actions,\n    \"contextFeatures\": context_features,\n}\n\nrank_response = client.rank(request)\nprint(\"Sending reward event\")\nclient.reward(rank_response.get(\"eventId\"), {\"value\": 1.0})\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Single Azure Blob Operation\nDESCRIPTION: Demonstrates how to enable detailed logging for a specific blob operation without enabling it for the entire client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nservice_client.get_service_stats(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Authenticating SearchClient for National Cloud with Azure AD in Python\nDESCRIPTION: Configures a SearchClient for use with a national cloud (e.g., Azure China) using Azure Active Directory authentication and authority host settings. Demonstrates setting up DefaultAzureCredential with a specified AzureAuthorityHosts constant and providing an audience parameter to the client. Prerequisites include compatible azure-identity and azure-search-documents packages, and relevant environment variables. Inputs are environmental credentials and index name; outcome is a fully authenticated SearchClient for national cloud endpoints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create a SearchClient that will authenticate through AAD in the China national cloud.\\nimport os\\nfrom azure.identity import DefaultAzureCredential, AzureAuthorityHosts\\nfrom azure.search.documents import SearchClient\\n\\nindex_name = \\\"hotels\\\"\\nendpoint = os.environ[\\\"SEARCH_ENDPOINT\\\"]\\nkey = os.environ[\\\"SEARCH_API_KEY\\\"]\\ncredential = DefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_CHINA)\\n\\nsearch_client = SearchClient(endpoint, index_name, credential=credential, audience=\\\"https://search.azure.cn\\\")\n```\n\n----------------------------------------\n\nTITLE: Getting All Supported Translation Languages\nDESCRIPTION: Retrieves and displays all supported languages for translation, transliteration, and dictionary operations from the Text Translation service. The response includes language metadata for all supported scopes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response = text_translator.get_supported_languages()\n\n    print(\n        f\"Number of supported languages for translate operation: {len(response.translation) if response.translation is not None else 0}\"\n    )\n    print(\n        f\"Number of supported languages for transliterate operation: {len(response.transliteration) if response.transliteration is not None else 0}\"\n    )\n    print(\n        f\"Number of supported languages for dictionary operations: {len(response.dictionary) if response.dictionary is not None else 0}\"\n    )\n\n    if response.translation is not None:\n        print(\"Translation Languages:\")\n        for key, value in response.translation.items():\n            print(f\"{key} -- name: {value.name} ({value.native_name})\")\n\n    if response.transliteration is not None:\n        print(\"Transliteration Languages:\")\n        for key, value in response.transliteration.items():\n            print(f\"{key} -- name: {value.name}, supported script count: {len(value.scripts)}\")\n\n    if response.dictionary is not None:\n        print(\"Dictionary Languages:\")\n        for key, value in response.dictionary.items():\n            print(f\"{key} -- name: {value.name}, supported target languages count: {len(value.translations)}\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Configuration Client via AAD Token in Python\nDESCRIPTION: This Python snippet constructs an AzureAppConfigurationClient using DefaultAzureCredential for Azure Active Directory authentication and requires your configuration store's endpoint URL. Dependencies include installing both the azure-identity and azure-appconfiguration packages, and setting environment variables for the AAD application. This enables token-based client authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\ncredential = DefaultAzureCredential()\n\nclient = AzureAppConfigurationClient(base_url=\"your_endpoint_url\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Renaming Service Bus Runtime Info Classes in Python\nDESCRIPTION: Renamed entity runtime information classes: `QueueRuntimeInfo` to `QueueRuntimeProperties`, `TopicRuntimeInfo` to `TopicRuntimeProperties`, and `SubscriptionRuntimeInfo` to `SubscriptionRuntimeProperties`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nQueueRuntimeInfo -> QueueRuntimeProperties\nTopicRuntimeInfo -> TopicRuntimeProperties\nSubscriptionRuntimeInfo -> SubscriptionRuntimeProperties\n```\n\n----------------------------------------\n\nTITLE: Listing All Data Sources\nDESCRIPTION: Example showing how to list all data sources with error handling using the PurviewScanningClient\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.scanning import PurviewScanningClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\ncredential = DefaultAzureCredential()\nclient = PurviewScanningClient(endpoint=\"https://<my-account-name>.scan.purview.azure.com\", credential=credential)\ntry:\n    response = client.data_sources.list_all()\n    result = [item for item in response]\n    print(result)\nexcept HttpResponseError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure Communication Email SDK\nDESCRIPTION: Demonstrates how to handle exceptions when using the Email client. The example catches HttpResponseError exceptions from Azure Core.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    response = client.send(message)\nexcept HttpResponseError as ex:\n    print('Exception:')\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maps Copyright Information for World with MapsRenderClient in Python\nDESCRIPTION: Initializes an Azure Maps Render client using an API key credential and retrieves copyright information for the entire world map. This operation is essential for displaying proper attribution when using Azure Maps tiles.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.render import MapsRenderClient\n\nmaps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_render_client.get_copyright_for_world()\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Network Management Client with DefaultAzureCredential\nDESCRIPTION: Demonstrates how to authenticate the Azure Network Management Client using DefaultAzureCredential and environment variables for Azure credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.network import NetworkManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetworkManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Sending a 1:1 SMS Message (Python)\nDESCRIPTION: Shows how to send an SMS message to a single recipient using the `send` method of an initialized `SmsClient`. Key parameters include `from_` (the sender's SMS-enabled number), `to` (the recipient's number), and `message`. Optional parameters `enable_delivery_report` (boolean) and `tag` (string) can be used for delivery status tracking and custom tagging, respectively. The method returns a list containing a single `SmsSendResult` object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.sms import SendSmsOptions\n\nsms_responses = sms_client.send(\n    from_=\"<from-phone-number>\",\n    to=\"<to-phone-number-1>\",\n    message=\"Hello World via SMS\",\n    enable_delivery_report=True, # optional property\n    tag=\"custom-tag\") # optional property\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Digital Twins Models in Python\nDESCRIPTION: Shows how to list all created models using the DigitalTwinsClient.list_models() method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlisted_models = service_client.list_models()\nfor model in listed_models:\n    print(model)\n```\n\n----------------------------------------\n\nTITLE: Adding Chat Thread Participants\nDESCRIPTION: Demonstrates how to add new participants to a chat thread with error handling and retry logic.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.chat import ChatParticipant\nfrom datetime import datetime\n\n# create 2 users\nidentity_client = CommunicationIdentityClient.from_connection_string('<connection_string>')\nnew_users = [identity_client.create_user() for i in range(2)]\n\nparticipants = []\nfor _user in new_users:\n  chat_participant = ChatParticipant(\n    identifier=_user,\n    display_name='Fred Flinstone',\n    share_history_time=datetime.utcnow()\n  )\n  participants.append(chat_participant)\n\nresponse = chat_thread_client.add_participants(thread_participants=participants)\n\ndef decide_to_retry(error, **kwargs):\n    \"\"\"\n    Insert some custom logic to decide if retry is applicable based on error\n    \"\"\"\n    return True\n\n# verify if all users has been successfully added or not\n# in case of partial failures, you can retry to add all the failed participants\nretry = [p for p, e in response if decide_to_retry(e)]\nif retry:\n    chat_thread_client.add_participants(retry)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK and WebPubSubServiceClient - Python\nDESCRIPTION: Demonstrates how to use the Python logging module to produce debug output for Azure Web PubSub operations. Requires azure-identity and azure-messaging-webpubsubservice packages. Sets up a logger for the 'azure' namespace, sends logs to stdout, and creates a DefaultAzureCredential and client with logging enabled. Useful for troubleshooting requests and responses, especially during development. The service client logs debug messages for HTTP sessions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"<endpoint>\"\ncredential = DefaultAzureCredential()\n\n# This WebPubSubServiceClient will log detailed information about its HTTP sessions, at DEBUG level\nservice = WebPubSubServiceClient(endpoint=endpoint, hub='hub', credential=credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Document Models in Python\nDESCRIPTION: This snippet shows how to manage custom document models using the Document Intelligence service. It demonstrates getting account details, listing all models, and retrieving details of a specific custom model. The code uses the DocumentModelAdministrationClient for these operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.formrecognizer import DocumentModelAdministrationClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.exceptions import ResourceNotFoundError\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\n\ndocument_model_admin_client = DocumentModelAdministrationClient(endpoint, credential)\n\naccount_details = document_model_admin_client.get_resource_details()\nprint(\"Our account has {} custom models, and we can have at most {} custom models\".format(\n    account_details.custom_document_models.count, account_details.custom_document_models.limit\n))\n\n# Here we get a paged list of all of our models\nmodels = document_model_admin_client.list_document_models()\nprint(\"We have models with the following ids: {}\".format(\n    \", \".join([m.model_id for m in models])\n))\n\n# Replace with the custom model ID from the \"Build a model\" sample\nmodel_id = \"<model_id from the Build a Model sample>\"\n\ncustom_model = document_model_admin_client.get_document_model(model_id=model_id)\nprint(\"Model ID: {}\".format(custom_model.model_id))\nprint(\"Description: {}\".format(custom_model.description))\nprint(\"Model created on: {}\\n\".format(custom_model.created_on))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Best Updates for a Group with DeviceUpdateClient in Python\nDESCRIPTION: Fetches the best available updates for all devices belonging to a specific device group, identified by the `DEVICEUPDATE_DEVICE_GROUP` environment variable. It calls the `list_best_updates_for_group` method on the `device_management` attribute of the initialized `DeviceUpdateClient`. The code then iterates through the results, printing the provider, name, and version components of the update ID for each recommended update.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetDevice/Readme.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngroup = os.environ[\"DEVICEUPDATE_DEVICE_GROUP\"]\nresponse = client.device_management.list_best_updates_for_group(group)\nfor item in response:\n    print(f\"  {item['update']['updateId']['provider']}\")\n    print(f\"  {item['update']['updateId']['name']}\")\n    print(f\"  {item['update']['updateId']['version']}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Authenticated Inference Clients with Optional Connection Name in Python\nDESCRIPTION: These methods (`.inference.get_chat_completions_client`, `.inference.get_embeddings_client`, `.inference.get_azure_openai_client`) are available on an `AIProjectClient` instance in the `azure-ai-project` Python SDK (version 1.0.0b4+). They provide authenticated client instances (from `azure-ai-inference`) for interacting with various Azure AI inference endpoints. An optional `connection_name` argument allows specifying which project connection's configuration and credentials should be used for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.inference.get_chat_completions_client\n```\n\nLANGUAGE: python\nCODE:\n```\n.inference.get_embeddings_client\n```\n\nLANGUAGE: python\nCODE:\n```\n.inference.get_azure_openai_client\n```\n\n----------------------------------------\n\nTITLE: Initializing Anomaly Detector Client\nDESCRIPTION: Python code to initialize the AnomalyDetectorClient using an API key credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\n\ncredential = AzureKeyCredential(\"<api_key>\")\nclient = AnomalyDetectorClient(endpoint=\"https://<resource-name>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Multi-API Configuration\nDESCRIPTION: Configuration settings for multi-API generation. Defines batch processing of multiple API versions and tags.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nclear-output-folder: true\nbatch:\n  - tag: model-dataplane\n  - tag: dataset-dataplane\n  - tag: v2022-05-01\n  - tag: v2022-02-01-preview\n  - tag: v2022-01-01-preview\n  - tag: runhistory\n  - tag: v2020-09-01-dataplanepreview\n  - tag: registry-discovery\n  - tag: v2022-10-01-preview\n  - tag: v2022-12-01-preview\n  - tag: v2023-02-01-preview\n  - tag: v2023-04-01-preview\n  - tag: v2023-04-01\n  - tag: v2023-06-01-preview\n  - tag: v2023-08-01-preview\n  - tag: v2023-10-01\n  - tag: v2024-01-01-preview\n  - tag: v2024-04-01-preview\n  - tag: v2024-07-01-preview\n  - tag: v2024-10-01-preview\n  #unstable tags\n  - tag: v2021-10-01-dataplanepreview\n  - multiapiscript: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure AppComplianceAutomation Client\nDESCRIPTION: Python code to authenticate and initialize the AppComplianceAutomation management client using DefaultAzureCredential. Requires environment variables for Azure authentication and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcomplianceautomation/azure-mgmt-appcomplianceautomation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appcomplianceautomation import AppComplianceAutomationMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AppComplianceAutomationMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Defining TokenRequestOptions Structure\nDESCRIPTION: Defines the TokenRequestOptions TypedDict for structured token request parameters including claims, tenant_id, and CAE settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass TokenRequestOptions(TypedDict, total=False):\n    claims: str      # Additional claims required in the token\n    tenant_id: str   # The tenant ID for the token request\n    enable_cae: bool # Whether to enable Continuous Access Evaluation\n```\n\n----------------------------------------\n\nTITLE: Authenticating through Azure CLI using azure-identity in Python\nDESCRIPTION: This code demonstrates how to authenticate with Azure using the Azure CLI credentials via AzureCliCredential from azure-identity, suitable for recent Azure SDK versions (>= 15.0.0 for azure-mgmt-resource). The credential object is passed to the SubscriptionClient. Requires azure-identity and azure-mgmt-resource with Azure CLI configured. The result is a SubscriptionClient authenticated with the signed-in CLI identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureCliCredential\\nfrom azure.mgmt.resource import SubscriptionClient\\n\\ncredential = AzureCliCredential()\\nsubscription_client = SubscriptionClient(credential)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Liveness Detection Session - Azure Face SessionClient - Python\nDESCRIPTION: This snippet showcases how an app server can initiate and query a liveness detection session using Azure AI Vision Face SessionClient. Required dependencies include azure-core, azure-ai-vision-face, and the uuid module. Key parameters include operation mode, device correlation ID, and authorization token time-to-live. The results of session creation and liveness detection are printed; image or video upload by frontend is handled separately.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\\n\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.vision.face import FaceSessionClient\\nfrom azure.ai.vision.face.models import CreateLivenessSessionContent, LivenessOperationMode\\n\\nendpoint = \"<your endpoint>\"\\nkey = \"<your api key>\"\\n\\nwith FaceSessionClient(endpoint=endpoint, credential=AzureKeyCredential(key)) as face_session_client:\\n    # Create a session.\\n    print(\"Create a new liveness session.\")\\n    created_session = face_session_client.create_liveness_session(\\n        CreateLivenessSessionContent(\\n            liveness_operation_mode=LivenessOperationMode.PASSIVE,\\n            device_correlation_id=str(uuid.uuid4()),\\n            send_results_to_client=False,\\n            auth_token_time_to_live_in_seconds=60,\\n        )\\n    )\\n    print(f\"Result: {created_session}\")\\n\\n    # Get the liveness detection result.\\n    print(\"Get the liveness detection result.\")\\n    liveness_result = face_session_client.get_liveness_session_result(created_session.session_id)\\n    print(f\"Result: {liveness_result}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Consistency Level for Cosmos DB Client\nDESCRIPTION: Python code showing how to explicitly set the consistency level when initializing a Cosmos DB client, overriding the account default.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY, consistency_level='Session')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Windows Timezone IDs with Azure Maps Timezone SDK in Python\nDESCRIPTION: This snippet demonstrates how to retrieve a full list of Windows time zone IDs using the Azure Maps Timezone SDK. It creates a MapsTimeZoneClient with an Azure Key Credential and handles potential HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_windows_timezone_ids():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.timezone import MapsTimeZoneClient\n\n    timezone_client = MapsTimeZoneClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = timezone_client.get_windows_timezone_ids()\n        print(result)\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_windows_timezone_ids()\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Languages\nDESCRIPTION: Retrieves and displays the list of languages supported by the Translator service for translation, transliteration, and dictionary operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response = text_translator.get_supported_languages()\n\n    print(\n        f\"Number of supported languages for translate operation: {len(response.translation) if response.translation is not None else 0}\"\n    )\n    print(\n        f\"Number of supported languages for transliterate operation: {len(response.transliteration) if response.transliteration is not None else 0}\"\n    )\n    print(\n        f\"Number of supported languages for dictionary operations: {len(response.dictionary) if response.dictionary is not None else 0}\"\n    )\n\n    if response.translation is not None:\n        print(\"Translation Languages:\")\n        for key, value in response.translation.items():\n            print(f\"{key} -- name: {value.name} ({value.native_name})\")\n\n    if response.transliteration is not None:\n        print(\"Transliteration Languages:\")\n        for key, value in response.transliteration.items():\n            print(f\"{key} -- name: {value.name}, supported script count: {len(value.scripts)}\")\n\n    if response.dictionary is not None:\n        print(\"Dictionary Languages:\")\n        for key, value in response.dictionary.items():\n            print(f\"{key} -- name: {value.name}, supported target languages count: {len(value.translations)}\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: Migrating File-Based Authentication to azure-identity ClientSecretCredential in Python\nDESCRIPTION: This snippet provides a secure pattern for migrating from file-based authentication to azure-identity in Python. It loads credentials from a JSON file using json.load, then constructs a ClientSecretCredential and a KeyVaultManagementClient. Dependencies include Python's built-in json module, azure-identity, and azure-mgmt-keyvault. The credential file must contain specific fields; sensitive data must be protected and excluded from version control. Creates a KeyVaultManagementClient authenticated via loaded file credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\\nfrom azure.identity import ClientSecretCredential\\nfrom azure.mgmt.keyvault import KeyVaultManagementClient\\n\\nwith open(\"credentials.json\") as json_file:\\n    json_dict = json.load(json_file)\\n\\ncredential = ClientSecretCredential(\\n    tenant_id=json_dict[\"tenantId\"],\\n    client_id=json_dict[\"clientId\"],\\n    client_secret=json_dict[\"clientSecret\"],\\n    authority=json_dict[\"activeDirectoryEndpointUrl\"]\\n)\\nclient = KeyVaultManagementClient(\\n    credential,\\n    json_dict[\"subscriptionId\"],\\n    base_url=json_dict[\"resourceManagerEndpointUrl\"],\\n    credential_scopes=[\"{}/.default\".format(json_dict[\"resourceManagerEndpointUrl\"])]\\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureMonitorMetricExporter with Default Connection String\nDESCRIPTION: Creates an instance of AzureMonitorMetricExporter that automatically retrieves the connection string from the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\nexporter = AzureMonitorMetricExporter()\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Script File\nDESCRIPTION: Shows how to upload a JMX test script file to an existing test configuration using the LoadTestAdministrationClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.developer.loadtesting import LoadTestAdministrationClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\n# This sample uploads a JMX Test Script File\nTEST_ID = \"some-test-id\"  \nFILE_NAME = \"some-file-name.jmx\"  \n\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n\ntry:\n\n    # uploading .jmx file to a test\n    resultPoller = client.begin_upload_test_file(TEST_ID, FILE_NAME, open(\"sample.jmx\", \"rb\"))\n\n    # getting result of LRO poller with timeout of 600 secs\n    validationResponse = resultPoller.result(600)\n    print(validationResponse)\n    \nexcept HttpResponseError as e:\n    print(\"Failed with error: {}\".format(e.response.json()))\n```\n\n----------------------------------------\n\nTITLE: Instantiating Azure File Share Client with Shared Key - V2.X vs V12\nDESCRIPTION: Shows how to create File Share service clients using storage account credentials. V2.X uses FileService class while V12 introduces hierarchical clients with ShareServiceClient as the entry point.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.file import FileService\nservice = FileService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareServiceClient, ShareClient, ShareDirectoryClient, ShareFileClient\n\n# Get ShareServiceClient (for account-level operations)\nservice_client = ShareServiceClient(account_url=\"https://<my-storage-account-name>.file.core.windows.net/\", credential={'account_name': \"<storage-account-name>\", 'account_key': \"<account-access-key>\"})\n\n# Get ShareClient (for share-specific operations OR alternatively use constructor directly)\nshare_client = service_client.get_share_client(share=\"<share_name>\")\n\n# Get ShareDirectoryClient and ShareFileClient (OR alternatively use constructor directly)\ndirectory_client = share_client.get_directory_client(\"<directory_path>\")\nfile_client = share_client.get_file_client(\"<file_path>\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Container Orchestrator Runtime Client\nDESCRIPTION: Python code to initialize and authenticate the Container Orchestrator Runtime management client using DefaultAzureCredential. Requires environment variables for Azure credentials and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerorchestratorruntime/azure-mgmt-containerorchestratorruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerorchestratorruntime import ContainerOrchestratorRuntimeMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerOrchestratorRuntimeMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Checking Device Registration Status in Python\nDESCRIPTION: This snippet shows how to check device registration status using the Azure IoT Device Provisioning Client. It initializes the client, queries device registrations for an enrollment group, and retrieves the registration status for a specific device.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioningservice import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Query device registrations for an enrollment group\ndevice_registrations = client.device_registration_state.query(\n    id=\"<enrollment_group_id>\"\n)\n\n# Get device registration status for a particular device\nstate = client.device_registration_state.get(\n    id=\"<device_id>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Storage Account Keys via Azure CLI - Bash\nDESCRIPTION: Shows how to retrieve all access keys for a storage account using Azure CLI. The command outputs a JSON list of access keys for a given storage account and resource group, which are used for Shared Key authentication. This is typically run inside scripts or terminals for manual secret retrieval.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz storage account keys list -g MyResourceGroup -n MyStorageAccount\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Service Linker Management Client - Python\nDESCRIPTION: Demonstrates initializing the ServiceLinkerManagementClient with Azure Active Directory token-based authentication using environment variables for client credentials and subscription ID. Requires the 'azure-identity' and 'azure-mgmt-servicelinker' packages. The environment variables 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and 'AZURE_SUBSCRIPTION_ID' must be set appropriately for successful authentication. The expected result is an authenticated client instance capable of managing Azure Service Linker resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicelinker/azure-mgmt-servicelinker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicelinker import ServiceLinkerManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceLinkerManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Listing Participants in a Room (Python)\nDESCRIPTION: This snippet fetches the current list of participants for a given room by its room_id via the list_participants function. It manages potential exceptions thrown by the RoomsClient service. Prior to use, set up the client instance and specify the room_id whose participants should be listed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    participants = client.list_participants(room_id=\"id of the room to list participants\")\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestsTransport with Custom Session in Python\nDESCRIPTION: This snippet demonstrates how to customize the synchronous `RequestsTransport` by providing a pre-configured `requests.Session` instance. This allows for advanced settings like modifying the connection pool size using `requests.adapters.HTTPAdapter`. It also shows how to control session lifecycle management using the `session_owner` parameter and emphasizes the need to close the session manually if `session_owner` is `False`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n ```python\n import requests\n from azure.core.pipeline.transport import RequestsTransport\n session = requests.Session()\n adapter = requests.adapters.HTTPAdapter(pool_connections=42, pool_maxsize=42)\n session.mount('https://', adapter)\n client = FooServiceClient(endpoint, creds, transport=RequestsTransport(session=session, session_owner=False))\n\n # Here we want to manage the session by ourselves. When we are done with the session, we need to close the session.\n session.close()\n\n # Note: `session_owner` gives the information of ownership of the requests sessions to the transport instance, to authorize it to close on customer's behalf. If you're ok that the client closes your session on your behalf as necessary, you don't need to pass a value.\n ```\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Async Function Tool via AsyncToolSet - Azure SDK for Python\nDESCRIPTION: This example demonstrates using asynchronous user-defined functions with the AsyncFunctionTool and AsyncToolSet components of the Azure SDK, and enabling automatic function invocation for agents. The agent is created using async workflows (note the 'await' keyword) and assumes all imports (including from azure.ai.projects.aio) and definitions are in place. This allows for scalable, non-blocking function-backed agent responses. Proper coroutine usage and the async project_client context are required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfunctions = AsyncFunctionTool(user_async_functions)\n\ntoolset = AsyncToolSet()\ntoolset.add(functions)\nproject_client.agents.enable_auto_function_calls(toolset=toolset)\n\nagent = await project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are a helpful assistant\",\n    toolset=toolset,\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Chat Thread\nDESCRIPTION: Demonstrates how to delete a chat thread using its thread_id.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nchat_client.delete_chat_thread(thread_id=thread_id)\n```\n\n----------------------------------------\n\nTITLE: Listing All Text Blocklists Using Azure Content Safety BlocklistClient in Python\nDESCRIPTION: This snippet lists all text blocklists available in Azure Content Safety using the BlocklistClient. It requires azure-ai-contentsafety and azure-core, as well as proper environment credentials. After initializing the client, it retrieves and prints each blocklist's name and description. Error handling is robust, and the function provides immediate insight into all defined blocklists, typically for administrative review.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    try:\n        blocklists = client.list_text_blocklists()\n        if blocklists:\n            print(\"\\nList blocklists: \")\n            for blocklist in blocklists:\n                print(f\"Name: {blocklist.blocklist_name}, Description: {blocklist.description}\")\n    except HttpResponseError as e:\n        print(\"\\nList text blocklists failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Index using SearchIndexClient in Python\nDESCRIPTION: Uses SearchIndexClient to define and create a new Azure AI Search index called 'hotels', specifying fields using SimpleField, SearchableField, and ComplexField objects. Configures CORS settings and scoring profiles. Dependencies include 'SearchIndexClient', 'AzureKeyCredential', relevant field classes, and a valid Azure Search endpoint and key. Inputs are field definitions and index name; output is the result of index creation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclient = SearchIndexClient(service_endpoint, AzureKeyCredential(key))\\nname = \\\"hotels\\\"\\nfields = [\\n    SimpleField(name=\\\"hotelId\\\", type=SearchFieldDataType.String, key=True),\\n    SimpleField(name=\\\"hotelName\\\", type=SearchFieldDataType.String, searchable=True),\\n    SimpleField(name=\\\"baseRate\\\", type=SearchFieldDataType.Double),\\n    SearchableField(name=\\\"description\\\", type=SearchFieldDataType.String, collection=True),\\n    ComplexField(\\n        name=\\\"address\\\",\\n        fields=[\\n            SimpleField(name=\\\"streetAddress\\\", type=SearchFieldDataType.String),\\n            SimpleField(name=\\\"city\\\", type=SearchFieldDataType.String),\\n        ],\\n        collection=True,\\n    ),\\n]\\ncors_options = CorsOptions(allowed_origins=[\\\"*\\\"], max_age_in_seconds=60)\\nscoring_profiles: List[ScoringProfile] = []\\nindex = SearchIndex(name=name, fields=fields, scoring_profiles=scoring_profiles, cors_options=cors_options)\\n\\nresult = client.create_index(index)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Azure Identity Tests\nDESCRIPTION: Uses `pip` to install all Python packages listed in the `requirements.txt` file located in the current directory (`azure-sdk-for-python/sdk/identity/azure-identity/tests/managed-identity-live`). These dependencies, including pytest, are necessary for executing the Azure Identity tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/azure_arc.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed Identity Endpoint Availability via curl - Bash\nDESCRIPTION: This shell snippet demonstrates how to verify the availability of the Azure managed identity endpoint from within a virtual machine, App Service, or similar environment. The script uses curl to send a GET request to the local instance metadata endpoint for OAuth2 token retrieval, specifying the required API version and resource. The \"Metadata: true\" HTTP header is necessary. The expected output is a JSON payload containing an access token if the endpoint is available. This code requires curl to be installed, network connectivity to 169.254.169.254, and applicable Azure environment variables or permissions. Usage may expose sensitive data in output and is intended for administrative diagnostics; access token in response should not be shared.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: List Containers Performance Test Implementation - Python\nDESCRIPTION: Example implementation of a performance test class for listing containers in Azure Blob Storage. Includes both synchronous and asynchronous test methods with setup and cleanup functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.perfstress_tests import PerfStressTest\n\nfrom azure.storage.blob import BlobServiceClient as SyncBlobServiceClient\nfrom azure.storage.blob.aio import BlobServiceClient as AsyncBlobServiceClient\n\n\nclass ListContainersTest(PerfStressTest):\n\n    def __init__(self, arguments):\n        super().__init__(arguments)\n\n        # Auth configuration\n        connection_string = self.get_from_env(\"AZURE_STORAGE_CONNECTION_STRING\")\n\n        # Create clients\n        self.service_client = SyncBlobServiceClient.from_connection_string(conn_str=connection_string)\n        self.async_service_client = AsyncBlobServiceClient.from_connection_string(conn_str=connection_string)\n\n    async def global_setup(self):\n        \"\"\"The global setup is run only once.\n\n        Use this for any setup that can be reused multiple times by all test instances.\n        \"\"\"\n        await super().global_setup()\n        containers = [self.async_service_client.create_container(str(i)) for i in self.args.num_containers]\n        await asyncio.wait(containers)\n\n     async def global_cleanup(self):\n        \"\"\"The global cleanup is run only once.\n\n        Use this to cleanup any resources created in setup.\n        \"\"\"\n        async for container in self.async_service_client.list_containers():\n            await self.async_service_client.delete_container(container)\n        await super().global_cleanup()\n\n    async def close(self):\n        \"\"\"This is run after cleanup.\n\n        Use this to close any open handles or clients.\n        \"\"\"\n        await self.async_service_client.close()\n        await super().close()\n\n    def run_sync(self):\n        \"\"\"The synchronous perf test.\n\n        Try to keep this minimal and focused. Using only a single client API.\n        Avoid putting any ancillary logic (e.g. generating UUIDs), and put this in the setup/init instead\n        so that we're only measuring the client API call.\n        \"\"\"\n        for _ in self.client.list_containers():\n            pass\n\n    async def run_async(self):\n        \"\"\"The asynchronous perf test.\n\n        Try to keep this minimal and focused. Using only a single client API.\n        Avoid putting any ancillary logic (e.g. generating UUIDs), and put this in the setup/init instead\n        so that we're only measuring the client API call.\n        \"\"\"\n        async for _ in self.async_client.list_containers():\n            pass\n\n    @staticmethod\n    def add_arguments(parser):\n        super(ListContainersTest, ListContainersTest).add_arguments(parser)\n        parser.add_argument('--num-containers', nargs='?', type=int, help='Number of containers to list. Defaults to 100', default=100)\n```\n\n----------------------------------------\n\nTITLE: Listing All Sent Shares\nDESCRIPTION: Retrieves a list of all sent shares created by the data provider.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nprovider_storage_account_resource_id = \"/subscriptions/{subscription-id}/resourceGroups/provider-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage\"\n\nlist_request = client.sent_shares.list(\n    reference_name=provider_storage_account_resource_id,\n    order_by=\"properties/createdAt desc\")\n\nfor list_response in list_request:\n    print(list_response)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Digital Twin\nDESCRIPTION: Shows how to delete a digital twin instance using its ID with the Azure Digital Twins SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nservice_client.delete_digital_twin(digital_twin_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceProvisioningClient with DefaultAzureCredential in Python\nDESCRIPTION: Illustrates creating an instance of the `DeviceProvisioningClient` using Azure Active Directory (AAD) authentication. It utilizes the `DefaultAzureCredential` from the `azure-identity` library, which attempts various credential types available in the environment. Requires the DPS endpoint URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\nfrom azure.identity import DefaultAzureCredential\n\n# Initialize credential object\ncredential = DefaultAzureCredential()\n\n# Create client using endpoint and credential\nclient = DeviceProvisioningClient(endpoint=\"https://my-dps.azure-device-provisioning.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Digital Twins Client\nDESCRIPTION: Code to authenticate and initialize the Azure Digital Twins Management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-mgmt-digitaltwins/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.digitaltwins import AzureDigitalTwinsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureDigitalTwinsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Projects SDK - Bash\nDESCRIPTION: Installs the azure-ai-projects Python package using pip, ensuring the core SDK is available for use. Required before importing or using any SDK features. This operation should be run in the terminal or shell. No input parameters, this installs the latest version by default.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-projects\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure BatchManagementClient with DefaultAzureCredential in Python\nDESCRIPTION: Demonstrates authenticating the Azure BatchManagementClient using DefaultAzureCredential and environment variables for client secrets and subscription ID. Dependencies include 'azure-identity', 'azure-mgmt-batch', and 'os'. The client is instantiated by loading 'AZURE_SUBSCRIPTION_ID' from the environment and constructing the SDK client with token credentials. Requires environment variables 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and optionally 'AZURE_SUBSCRIPTION_ID'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/batch/azure-mgmt-batch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.batch import BatchManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = BatchManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to a Group in Python\nDESCRIPTION: Shows how to send a text message to a group that the client has joined. The message will be received by all clients that have joined the same group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ...continues the code snippet from above\n\n# Send a message to a joined group\nclient.send_to_group(group_name, \"hello world\", WebPubSubDataType.TEXT);\n\n# In the Console tab of your developer tools found in your browser, you should see the message printed there.\n```\n\n----------------------------------------\n\nTITLE: Listing Chat Messages\nDESCRIPTION: Shows how to list messages from a chat thread with pagination and time filtering options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\nstart_time = datetime.utcnow() - timedelta(days=1)\n\nchat_messages = chat_thread_client.list_messages(results_per_page=1, start_time=start_time)\nfor chat_message_page in chat_messages.by_page():\n    for chat_message in chat_message_page:\n        print(\"ChatMessage: Id=\", chat_message.id, \"; Content=\", chat_message.content.message)\n```\n\n----------------------------------------\n\nTITLE: Translating Text with Auto-Detection - Azure Text Translator - Python\nDESCRIPTION: This snippet illustrates omitting the source language parameter so that the Text Translator service auto-detects the language of the input text. The detection score and language are printed along with the translation results. Inputs: to_language and input text. Outputs: detected language info and translated text. Suggested for cases where the source language is unknown. Handles HttpResponseError for robustness.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    to_language = [\\\"cs\\\"]\\n    input_text_elements = [\\\"This is a test\\\"]\\n\\n    response = text_translator.translate(body=input_text_elements, to_language=to_language)\\n    translation = response[0] if response else None\\n\\n    if translation:\\n        detected_language = translation.detected_language\\n        if detected_language:\\n            print(\\n                f\\\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\\\"\\n            )\\n        for translated_text in translation.translations:\\n            print(f\\\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\\\")\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\\n    raise\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Weather Activity Indices with Azure Maps Weather API in Python\nDESCRIPTION: This snippet demonstrates how to fetch daily indices which indicate if weather conditions are optimal for specific activities such as outdoor sports, construction, or farming. It creates a MapsWeatherClient and calls the get_daily_indices method with coordinates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_daily_indices():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_daily_indices(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_daily_indices()\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Saving Files from Agent Messages in Python\nDESCRIPTION: Retrieves image files and file path annotations from agent messages, then saves the retrieved files to the local filesystem.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nmessages = project_client.agents.list_messages(thread_id=thread.id)\nprint(f\"Messages: {messages}\")\n\nfor image_content in messages.image_contents:\n    file_id = image_content.image_file.file_id\n    print(f\"Image File ID: {file_id}\")\n    file_name = f\"{file_id}_image_file.png\"\n    project_client.agents.save_file(file_id=file_id, file_name=file_name)\n    print(f\"Saved image file to: {Path.cwd() / file_name}\")\n\nfor file_path_annotation in messages.file_path_annotations:\n    print(f\"File Paths:\")\n    print(f\"Type: {file_path_annotation.type}\")\n    print(f\"Text: {file_path_annotation.text}\")\n    print(f\"File ID: {file_path_annotation.file_path.file_id}\")\n    print(f\"Start Index: {file_path_annotation.start_index}\")\n    print(f\"End Index: {file_path_annotation.end_index}\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Document Translation Implementation\nDESCRIPTION: Demonstrates translating documents from multiple source containers to different target containers with specified target languages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient, DocumentTranslationInput, TranslationTarget\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\nsource_container_url_1 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_1\"]\nsource_container_url_2 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_2\"]\ntarget_container_url_fr = os.environ[\"AZURE_TARGET_CONTAINER_URL_FR\"]\ntarget_container_url_ar = os.environ[\"AZURE_TARGET_CONTAINER_URL_AR\"]\ntarget_container_url_es = os.environ[\"AZURE_TARGET_CONTAINER_URL_ES\"]\n\nclient = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n\npoller = client.begin_translation(\n    inputs=[\n        DocumentTranslationInput(\n            source_url=source_container_url_1,\n            targets=[\n                TranslationTarget(target_url=target_container_url_fr, language=\"fr\"),\n                TranslationTarget(target_url=target_container_url_ar, language=\"ar\"),\n            ],\n        ),\n        DocumentTranslationInput(\n            source_url=source_container_url_2,\n            targets=[TranslationTarget(target_url=target_container_url_es, language=\"es\")],\n        ),\n    ]\n)\nresult = poller.result()\n\nprint(f\"Status: {poller.status()}\")\nprint(f\"Created on: {poller.details.created_on}\")\nprint(f\"Last updated on: {poller.details.last_updated_on}\")\nprint(f\"Total number of translations on documents: {poller.details.documents_total_count}\")\n\nprint(\"\\nOf total documents...\")\nprint(f\"{poller.details.documents_failed_count} failed\")\nprint(f\"{poller.details.documents_succeeded_count} succeeded\")\n\nfor document in result:\n    print(f\"Document ID: {document.id}\")\n    print(f\"Document status: {document.status}\")\n    if document.status == \"Succeeded\":\n        print(f\"Source document location: {document.source_document_url}\")\n        print(f\"Translated document location: {document.translated_document_url}\")\n        print(f\"Translated to language: {document.translated_to}\\n\")\n    elif document.error:\n        print(f\"Error Code: {document.error.code}, Message: {document.error.message}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Archiving a Configuration Snapshot in Python\nDESCRIPTION: This snippet demonstrates how to archive an existing configuration snapshot in Azure App Configuration, changing its status to 'Archived'. It calls the `archive_snapshot` method on the client, providing the `snapshot_name`. Requires an initialized `client` and a `snapshot_name` variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\narchived_snapshot = client.archive_snapshot(name=snapshot_name)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing RecoveryServicesBackupClient (Python)\nDESCRIPTION: Demonstrates how to authenticate and initialize the `RecoveryServicesBackupClient` using `DefaultAzureCredential` from the `azure-identity` library. Authentication relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`, `AZURE_SUBSCRIPTION_ID`). The script retrieves the subscription ID from the environment and uses it along with the credential to create the client instance. Dependencies include `azure.identity`, `azure.mgmt.recoveryservicesbackup.activestamp`, and the `os` module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicesbackup/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.recoveryservicesbackup.activestamp import RecoveryServicesBackupClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RecoveryServicesBackupClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Event Route for Digital Twins via Azure SDK - Python\nDESCRIPTION: Deletes a specified event route by invoking delete_event_route with a given event_route_id. Dependencies include service_client and a valid event_route_id string. No output is returned unless there is an error.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nservice_client.delete_event_route(event_route_id)\n```\n\n----------------------------------------\n\nTITLE: HttpRequest Class Implementation in Azure Core\nDESCRIPTION: The HttpRequest class API used to represent HTTP requests in the Azure SDK. This class is transport-agnostic and provides methods for handling request details like URL, method, headers, and content.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass HttpRequest:\n\n    def __init__(\n        self,\n        method: str,\n        url: str,\n        *,\n        params: Optional[ParamsType] = None,\n        headers: Optional[MutableMapping[str, str]] = None,\n        json: Any = None,\n        content: Optional[ContentType] = None,\n        data: Optional[dict] = None,\n        files: Optional[FilesType] = None,\n        **kwargs\n    ):\n        self.url = url\n        self.method = method\n        self.headers = CaseInsensitiveDict(default_headers)\n\n    @property\n    def content(self) -> Any:\n        \"\"\"Get's the request's content\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ledger Entries\nDESCRIPTION: Demonstrates how to retrieve both current and historical ledger entries using transaction IDs. Shows handling of asynchronous retrieval for historical entries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Original hello\"}\n)\npost_result = post_poller.result()\n\npost_transaction_id = post_result[\"transactionId\"]\n\nlatest_entry = ledger_client.get_current_ledger_entry()\nprint(\n    f'Current entry (transaction id = {latest_entry[\"transactionId\"]}) '\n    f'in collection {latest_entry[\"collectionId\"]}: {latest_entry[\"contents\"]}'\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Hello!\"}\n)\npost_result = post_poller.result()\n\nget_entry_poller = ledger_client.begin_get_ledger_entry(post_transaction_id)\nolder_entry = get_entry_poller.result()\nprint(\n    f'Contents of {older_entry[\"entry\"][\"collectionId\"]} at {post_transaction_id}: {older_entry[\"entry\"][\"contents\"]}'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Patient Clinical Documents using Azure Health Insights SDK in Python\nDESCRIPTION: This snippet demonstrates how to create `PatientDocument` objects using the Azure Health Insights SDK in Python. It defines three separate documents with inline text content representing different clinical notes (initial visit, oncology clinic, pathology report), specifying metadata like document type, clinical type, language, and creation date. These documents are then collected into a list and assigned to a patient object's data attribute (`patient1.data`), preparing them for analysis.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# <DocumentList>\ndoc_content1 = \"\"\"\n            15.8.2021\n            Jane Doe 091175-8967\n            42 year old female, married with 3 children, works as a nurse\n            Healthy, no medications taken on a regular basis.\n            PMHx is significant for migraines with aura, uses Mirena for contraception.\n            Smoking history of 10 pack years (has stopped and relapsed several times).\n            She is in c/o 2 weeks of productive cough and shortness of breath.\n            She has a fever of 37.8 and general weakness.\n            Denies night sweats and rash. She denies symptoms of rhinosinusitis, asthma, and heartburn.\n            On PE:\n            GENERAL: mild pallor, no cyanosis. Regular breathing rate.\n            LUNGS: decreased breath sounds on the base of the right lung. Vesicular breathing. \n                No crackles, rales, and wheezes. Resonant percussion.\n            PLAN:\n            Will be referred for a chest x-ray.\n            ======================================\n            CXR showed mild nonspecific opacities in right lung base.\n            PLAN:\n            Findings are suggestive of a working diagnosis of pneumonia. The patient is referred to a\n            follow-up CXR in 2 weeks.\"\"\"\n\npatient_document1 = models.PatientDocument(type=models.DocumentType.NOTE,\n                                           id=\"doc1\",\n                                           content=models.DocumentContent(\n                                               source_type=models.DocumentContentSourceType.INLINE,\n                                               value=doc_content1),\n                                           clinical_type=models.ClinicalDocumentType.IMAGING,\n                                           language=\"en\",\n                                           created_date_time=datetime.datetime(2021, 8, 15))\n\ndoc_content2 = \"\"\"\n            Oncology Clinic\n            20.10.2021\n            Jane Doe 091175-8967\n            42-year-old healthy female who works as a nurse in the ER of this hospital.\n            First menstruation at 11 years old. First delivery- 27 years old. She has 3 children.\n            Didn't breastfeed.\n            Contraception- Mirena.\n            Smoking- 10 pack years.\n            Mother- Belarusian. Father- Georgian. \n            About 3 months prior to admission, she stated she had SOB and was febrile.\n            She did a CXR as an outpatient which showed a finding in the base of the right lung-\n            possibly an infiltrate.\n            She was treated with antibiotics with partial response.\n            6 weeks later a repeat CXR was performed- a few solid dense findings in the right lung.\n            Therefore, she was referred for a PET-CT which demonstrated increased uptake in the right\n            breast, lymph nodes on the right a few areas in the lungs and liver.\n            On biopsy from the lesion in the right breast- triple negative adenocarcinoma. Genetic\n            testing has not been done thus far.\n            Genetic counseling- the patient denies a family history of breast, ovary, uterus,\n            and prostate cancer. Her mother has chronic lymphocytic leukemia (CLL).\n            She is planned to undergo genetic tests because the aggressive course of the disease,\n            and her young age.\n            Impression:\n            Stage 4 triple negative breast adenocarcinoma.\n            Could benefit from biological therapy.\n            Different treatment options were explained- the patient wants to get a second opinion.\"\"\"\n\npatient_document2 = models.PatientDocument(type=models.DocumentType.NOTE,\n                                           id=\"doc2\",\n                                           content=models.DocumentContent(\n                                               source_type=models.DocumentContentSourceType.INLINE,\n                                               value=doc_content2),\n                                           clinical_type=models.ClinicalDocumentType.PATHOLOGY,\n                                           language=\"en\",\n                                           created_date_time=datetime.datetime(2021, 10, 20))\n\ndoc_content3 = \"\"\"\n            PATHOLOGY REPORT\n                                    Clinical Information\n            Ultrasound-guided biopsy; A. 18 mm mass; most likely diagnosis based on imaging:  IDC\n                                        Diagnosis\n            A.  BREAST, LEFT AT 2:00 4 CM FN; ULTRASOUND-GUIDED NEEDLE CORE BIOPSIES:\n            - Invasive carcinoma of no special type (invasive ductal carcinoma), grade 1\n            Nottingham histologic grade:  1/3 (tubules 2; nuclear grade 2; mitotic rate 1;\n            total score; 5/9)\n            Fragments involved by invasive carcinoma:  2\n            Largest measurement of invasive carcinoma on a single fragment:  7 mm\n            Ductal carcinoma in situ (DCIS):  Present\n            Architectural pattern:  Cribriform\n            Nuclear grade:  2-\n                            -intermediate\n            Necrosis:  Not identified\n            Fragments involved by DCIS:  1\n            Largest measurement of DCIS on a single fragment:  Span 2 mm\n            Microcalcifications:  Present in benign breast tissue and invasive carcinoma\n            Blocks with invasive carcinoma:  A1\n            Special studies: Pending\"\"\"\n\npatient_document3 = models.PatientDocument(type=models.DocumentType.NOTE,\n                                           id=\"doc3\",\n                                           content=models.DocumentContent(\n                                               source_type=models.DocumentContentSourceType.INLINE,\n                                               value=doc_content3),\n                                           clinical_type=models.ClinicalDocumentType.PATHOLOGY,\n                                           language=\"en\",\n                                           created_date_time=datetime.datetime(2022, 1, 1))\n\npatient_doc_list = [patient_document1, patient_document2, patient_document3]\npatient1.data = patient_doc_list\n# <\\DocumentList>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Azure Search Performance Tests\nDESCRIPTION: Example commands for running specific performance tests such as SearchDocumentsTest, AutoCompleteTest, and SuggestTest using the perfstress tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/search/azure-search-documents/tests> perfstress SearchDocumentsTest\n(env) ~/search/azure-search-documents/tests> perfstress AutoCompleteTest\n(env) ~/search/azure-search-documents/tests> perfstress SuggestTest\n```\n\n----------------------------------------\n\nTITLE: Getting Raw HTTP Response from Document Intelligence API in Python\nDESCRIPTION: Demonstrates how to capture the raw HTTP response from a Document Intelligence API call using the raw_response_hook parameter, which allows accessing status codes and the original JSON response body.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceAdministrationClient\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\n\nclient = DocumentIntelligenceAdministrationClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\nresponses = {}\n\ndef callback(response):\n    responses[\"status_code\"] = response.http_response.status_code\n    responses[\"response_body\"] = response.http_response.json()\n\nclient.get_resource_details(raw_response_hook=callback)\n\nprint(f\"Response status code is: {responses['status_code']}\")\nresponse_body = responses[\"response_body\"]\nprint(\n    f\"Our resource has {response_body['customDocumentModels']['count']} custom models, \"\n    f\"and we can have at most {response_body['customDocumentModels']['limit']} custom models.\"\n    f\"The quota limit for custom neural document models is {response_body['customNeuralDocumentModelBuilds']['quota']} and the resource has\"\n    f\"used {response_body['customNeuralDocumentModelBuilds']['used']}. The resource quota will reset on {response_body['customNeuralDocumentModelBuilds']['quotaResetDateTime']}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Container and Uploading Model Parameters with Azure Blob Storage SDK in Python\nDESCRIPTION: This code shows how to use the Azure Blob Storage SDK to create a new container and upload model parameters as a JSON blob. It establishes a data-plane client connection, handles errors related to resource existence, and writes the model's results using a serialized dictionary. Prerequisites include the azure-storage-blob and azure-core packages as well as an OAuth storage account credential. Required inputs are the storage account name, container name, forecast timestamp, and model parameter variables. The functions print warnings in case of naming collisions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Technically we don't need to recreate this, but not assuming readers ran the prior step if they skipped Azure egress.\\nfrom azure.storage.blob import BlobServiceClient\\nfrom azure.core.exceptions import ResourceExistsError\\noauth_url = \"https://{}.blob.core.windows.net\".format(\\n        storage_account_name\\n    )\\nservice_client = BlobServiceClient(account_url = oauth_url, credential=credential)\\n\\n# Now create the actual container\\ntry:\\n    service_client.create_container(output_container_name)\\nexcept ResourceExistsError:\\n    print(\"Warning: Container already exists\")\\n\\n# And populate our data within a blob.\\nimport json\\nblob_client = service_client.get_blob_client(output_container_name, str(forecast_time))\\ntry:\\n    blob_client.upload_blob(json.dumps({'rmse':rmse, 'aic':aic, 'forecast_time':str(forecast_time), 'params':list(params)}))\\nexcept ResourceExistsError:\\n    print(\"Warning: Blob already exists\")\n```\n\n----------------------------------------\n\nTITLE: Getting Connection Properties by Name - Azure AI Projects SDK - Python\nDESCRIPTION: Obtains properties for a specified connection by name, including optional credentials. Requires the project_client, connection_name variable, and ConnectionType if needed. Outputs: specific connection object details. Parameters: connection_name (required), include_credentials (optional, default False).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconnection = project_client.connections.get(\n    connection_name=connection_name,\n    include_credentials=True  # Optional. Defaults to \"False\"\n)\nprint(connection)\n\n```\n\n----------------------------------------\n\nTITLE: Evaluate API Usage with Azure AI Evaluation SDK\nDESCRIPTION: Shows how to use the evaluate API with Azure AI Evaluation SDK, including DefaultAzureCredential authentication and JSONL file processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.evaluation import ContentSafetyEvaluator\nimport pathlib\nfrom pprint import pprint\n\n\nazure_cred = DefaultAzureCredential()\nproject_scope = {\n    \"subscription_id\": \"<your-subscription-id>\",\n    \"resource_group_name\": \"<your-resource-group>\",\n    \"project_name\": \"<your-project-name>\",\n}\ncontent_safety_eval = ContentSafetyEvaluator(azure_cred, project_scope)\n\n# Using Evaluate API\n\nfile_path = pathlib.Path(\"data.jsonl\")\nresult = evaluate(\n    data=file_path,\n    azure_ai_project=project_scope,\n    evaluators={\"content_safety\": content_safety_eval},\n)\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Encoding Data with JsonSchemaEncoder in Python\nDESCRIPTION: This snippet shows how to use the JsonSchemaEncoder to encode and validate content against a pre-registered schema. It demonstrates various methods of encoding, including creating an EventData object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nfrom azure.schemaregistry import SchemaRegistryClient, SchemaFormat\nfrom azure.schemaregistry.encoder.jsonencoder import JsonSchemaEncoder\nfrom azure.identity import DefaultAzureCredential\nfrom azure.eventhub import EventData\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_JSON_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nformat = SchemaFormat.JSON\nDRAFT2020_12_SCHEMA_IDENTIFIER = \"https://json-schema.org/draft/2020-12/schema\"\n\nschema = {\n    \"$id\": \"https://example.com/person.schema.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"title\": \"Person\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Person's name.\"\n        },\n        \"favorite_color\": {\n            \"type\": \"string\",\n            \"description\": \"Favorite color.\"\n        },\n        \"favorite_number\": {\n            \"description\": \"Favorite number.\",\n            \"type\": \"integer\",\n        }\n    }\n}\nname = schema[\"title\"]\ndefinition = json.dumps(schema)\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nschema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\nschema_id = schema_properties.id\n\n# group_name only needed if passing `schema` to encode\nencoder = JsonSchemaEncoder(client=schema_registry_client, validate=DRAFT2020_12_SCHEMA_IDENTIFIER, group_name=group_name)\n\nwith encoder:\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema_id=schema_id, message_type=EventData)\n\n    # OR\n\n    message_content_dict = encoder.encode(dict_content, schema_id=schema_id)\n    event_data = EventData.from_message_content(message_content_dict[\"content\"], message_content_dict[\"content_type\"])\n\n    # OR\n\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    message_content = encoder.encode(dict_content, schema=definition)  # group_name required in constructor when `schema` is passed\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAPI Agent Integration\nDESCRIPTION: Shows how to create an AI agent that uses OpenAPI specifications to interact with REST endpoints. Includes setup for multiple API definitions and anonymous authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"./weather_openapi.json\", \"r\") as f:\n    openapi_weather = jsonref.loads(f.read())\n\nwith open(\"./countries.json\", \"r\") as f:\n    openapi_countries = jsonref.loads(f.read())\n\n# Create Auth object for the OpenApiTool (note that connection or managed identity auth setup requires additional setup in Azure)\nauth = OpenApiAnonymousAuthDetails()\n\n# Initialize agent OpenApi tool using the read in OpenAPI spec\nopenapi_tool = OpenApiTool(\n    name=\"get_weather\",\n    spec=openapi_weather,\n    description=\"Retrieve weather information for a location\",\n    auth=auth,\n    default_parameters=[\"format\"],\n)\nopenapi_tool.add_definition(\n    name=\"get_countries\",\n    spec=openapi_countries,\n    description=\"Retrieve a list of countries\",\n    auth=auth,\n)\n\n# Create agent with OpenApi tool and process assistant run\nwith project_client:\n    agent = project_client.agents.create_agent(\n        model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n        name=\"my-assistant\",\n        instructions=\"You are a helpful assistant\",\n        tools=openapi_tool.definitions,\n    )\n```\n\n----------------------------------------\n\nTITLE: Abandoning a Received Message from Azure Service Bus Queue (Python)\nDESCRIPTION: This snippet shows how to abandon a received message using `receiver.abandon_message()`. This action releases the lock on the message and returns it immediately to the Azure Service Bus queue, making it available for processing by other receivers (or the same one later). This is typically used when a receiver cannot process the message currently but expects it to be processable later.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.abandon_message(msg)\n```\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares the code pattern for receiving messages (batch and continuous) in v0.50 and v7. In v0.50, a `QueueClient` was obtained, then a `Receiver` using `get_receiver`. Batch receive used `fetch_next`. In v7, a `ServiceBusReceiver` is obtained directly using `ServiceBusClient.get_queue_receiver`. Batch receive uses `receive_messages`. Message completion logic moves from the message object to the receiver object (`receiver.complete_message(message)`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclient = ServiceBusClient.from_connection_string(CONNECTION_STR)\nqueue_client = client.get_queue(queue)\n\nwith queue_client.get_receiver(idle_timeout=1, mode=ReceiveSettleMode.PeekLock, prefetch=10) as receiver:\n\n    # Receive list of messages as a batch\n    batch = receiver.fetch_next(max_batch_size=10)\n    for message in batch:\n        print(\"Message: {}\".format(message))\n        message.complete()\n\n    # Receive messages as a continuous generator\n    for message in receiver:\n        print(\"Message: {}\".format(message))\n        message.complete()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith ServiceBusClient.from_connection_string(conn_str=CONNECTION_STR, receive_mode=ServiceBusReceiveMode.PEEK_LOCK) as client:\n\n    with client.get_queue_receiver(queue_name=QUEUE_NAME) as receiver:\n        batch = receiver.receive_messages(max_message_count=10, max_wait_time=5)\n        for message in batch:\n            print(\"Message: {}\".format(message))\n            receiver.complete_message(message)\n\n        for message in receiver:\n            print(\"Message: {}\".format(message))\n            receiver.complete_message(message)\n```\n\n----------------------------------------\n\nTITLE: Publishing Telemetry for a Digital Twin in Python\nDESCRIPTION: This snippet illustrates how to publish a telemetry message for a specific Azure Digital Twin. It requires the target digital twin's ID (`digita_twin_id`) and the telemetry data as a JSON string payload (`telemetry_payload`). The `publish_telemetry` method of the service client is used to send the message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_publish_telemetry\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_telemetry(\n    digita_twin_id,\n    telemetry_payload\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Running Azure Maps Route SDK Sample Scripts\nDESCRIPTION: Bash commands for installing the Azure Maps Route SDK and running sample scripts. This shows how to set an Azure subscription key environment variable, install the SDK package, and execute various sample scripts for route operations in both synchronous and asynchronous modes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-route --pre\n\npython samples/sample_authentication.py\npython sample/sample_get_route_range.py\npython samples/sample_get_route_directions.py\npython samples/sample_request_route_matrix.py\npython samples/async_samples/sample_authentication_async.py\npython samples/async_samples/sample_get_route_range_async.py\npython samples/async_samples/sample_request_route_matrix_async.py\npython samples/async_samples/sample_get_route_directions_async.py\n```\n\n----------------------------------------\n\nTITLE: Getting Default Connection Properties - Azure AI Projects SDK - Python\nDESCRIPTION: Fetches properties of the default connection for a given type (such as Azure OpenAI), with optional inclusion of credentials. If include_credentials is True, authentication keys or tokens are returned in the connection object. Prerequisites: project_client and ConnectionType definition. Outputs: connection object with selected properties. Parameters: connection_type (required), include_credentials (optional).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconnection = project_client.connections.get_default(\n    connection_type=ConnectionType.AZURE_OPEN_AI,\n    include_credentials=True,  # Optional. Defaults to \"False\".\n)\nprint(connection)\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Security Center using DefaultAzureCredential in Python\nDESCRIPTION: Python code for authenticating with Azure Security Center using DefaultAzureCredential. This snippet demonstrates how to initialize the SecurityCenter client with proper credentials and subscription ID from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.security import SecurityCenter\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SecurityCenter(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Email Message with Azure Communication Email SDK\nDESCRIPTION: Demonstrates how to send a simple email message using the EmailClient. The example includes subject, plain text, HTML content, and recipient information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"html><h1>This is the body</h1></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\n                \"address\": \"customer@domain.com\",\n                \"displayName\": \"Customer Name\"\n            }\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\"\n}\n\npoller = client.begin_send(message)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python SDK Update Mode for Azure Machine Learning Services\nDESCRIPTION: YAML configuration for updating an existing Azure Machine Learning Services Python SDK. Specifies the output folder structure and namespace settings for update operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.python.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npython:\n  no-namespace-folders: true\n  output-folder: $(python-sdks-folder)/machinelearning/azure-mgmt-machinelearningservices/azure/mgmt/machinelearningservices\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Longest Idle Distribution Policy (Python)\nDESCRIPTION: Creates a `DistributionPolicy` object configured to use the `LongestIdleMode` distribution strategy, with specified concurrent offer limits and an offer expiration time. It then uses the `upsert_distribution_policy` method of the `JobRouterAdministrationClient` to create or update the policy in Azure Communication Services. Requires an initialized `JobRouterAdministrationClient`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    LongestIdleMode,\n    DistributionPolicy\n)\n\ndistribution_policy: DistributionPolicy = DistributionPolicy(\n    offer_expires_after_seconds = 24 * 60 * 60,\n    mode = LongestIdleMode(\n        min_concurrent_offers = 1,\n        max_concurrent_offers = 1\n    )\n)\n\ndistribution_policy: DistributionPolicy = router_admin_client.upsert_distribution_policy(\n    \"distribution-policy-1\",\n    distribution_policy\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Text (OCR) from an Image File with Azure ImageAnalysisClient (Python)\nDESCRIPTION: This snippet extracts printed or handwritten text from a local image file in Python using the ImageAnalysisClient with the VisualFeatures.READ enum. It loads the image bytes, sends them to the analyze method, and parses the returned ReadResult for text lines, words, and bounding polygons. Dependencies: azure-ai-vision-imageanalysis, a properly initialized ImageAnalysisClient, and access to a JPEG image file. Input: image bytes. Output: prints lines, words, bounding polygons, and confidence scores. The snippet is limited to supported image formats and size constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Load image to analyze into a 'bytes' object\\nwith open(\\\"sample.jpg\\\", \\\"rb\\\") as f:\\n    image_data = f.read()\\n\\n# Extract text (OCR) from an image stream. This will be a synchronously (blocking) call.\\nresult = client.analyze(\\n    image_data=image_data,\\n    visual_features=[VisualFeatures.READ]\\n)\\n\\n# Print text (OCR) analysis results to the console\\nprint(\\\"Image analysis results:\\\")\\nprint(\\\" Read:\\\")\\nif result.read is not None:\\n    for line in result.read.blocks[0].lines:\\n        print(f\\\"   Line: '{line.text}', Bounding box {line.bounding_polygon}\\\")\\n        for word in line.words:\\n            print(f\\\"     Word: '{word.text}', Bounding polygon {word.bounding_polygon}, Confidence {word.confidence:.4f}\\\")\n```\n\n----------------------------------------\n\nTITLE: Updating Chat Thread Topic\nDESCRIPTION: Shows how to update a chat thread's topic using the update_topic method and verify the change.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntopic = \"new topic\"\nchat_thread_client.update_topic(topic=topic)\n\nchat_thread = chat_thread_client.get_properties(thread_id)\n\nassert chat_thread.topic == topic\n```\n\n----------------------------------------\n\nTITLE: Deleting a Configuration Setting by Key and Label in Python\nDESCRIPTION: This Python snippet deletes an existing configuration setting by key and label using client.delete_configuration_setting. No output is returned if successful. Attempting to delete missing keys will result in an error.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_configuration_setting(key=\"MyKey\", label=\"MyLabel\")\n```\n\n----------------------------------------\n\nTITLE: Counting Customers in Multiple Lines Using Azure Digital Twins Query\nDESCRIPTION: Demonstrates how to count customers across multiple lines using a single query. This approach works around the limitation of not being able to get counts per line in a single query.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/04_Lots_on_Queries.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = \"\"\"\nSELECT line, customer\nFROM DIGITALTWINS customer\nJOIN line RELATED customer.locatedIn\nWHERE line.$dtId IN ['line-0','line-1','line-2', 'line-3']\nAND IS_OF_MODEL(customer, 'dtmi:mymodels:patron;1')\n\"\"\"\n\ncustomers_in_lines = query_to_df(query)\ncustomers_in_lines\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Entra ID\nDESCRIPTION: Examples of creating ChatCompletionsClient using Entra ID authentication with DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install azure.identity\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.identity import DefaultAzureCredential\n\n# For Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=DefaultAzureCredential(exclude_interactive_browser_credential=False)\n)\n\n# For Azure OpenAI endpoint\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=DefaultAzureCredential(exclude_interactive_browser_credential=False),\n    credential_scopes=[\"https://cognitiveservices.azure.com/.default\"],\n    api_version=\"2024-06-01\",  # Azure OpenAI api-version. See https://aka.ms/azsdk/azure-ai-inference/azure-openai-api-versions\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Policy Insights Client\nDESCRIPTION: Example showing how to authenticate with Azure Policy Insights using DefaultAzureCredential. Requires environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/policyinsights/azure-mgmt-policyinsights/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.policyinsights import PolicyInsightsClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PolicyInsightsClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Updating Digital Twin Component via Azure SDK - Python\nDESCRIPTION: This snippet demonstrates how to update (patch) a component property of a digital twin using the Azure SDK for Python. Dependencies include service_client (DigitalTwinsClient instance) and valid digital_twin_id and component_name values. The patch operation uses a JSON Patch style operation array to specify component property changes. Inputs are the digital twin id, component name, and patch; no direct output is returned.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncomponent_name = \"Component1\"\npatch = [\n    {\n        \"op\": \"replace\",\n        \"path\": \"/ComponentProp1\",\n        \"value\": \"value2\"\n    }\n]\nservice_client.update_component(digital_twin_id, component_name, patch)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor OpenTelemetry Exporter via pip\nDESCRIPTION: Command to install the Azure Monitor OpenTelemetry Exporter package using pip. The --pre flag indicates installation of pre-release versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/logs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install azure-monitor-opentelemetry-exporter --pre\n```\n\n----------------------------------------\n\nTITLE: Handling Connected Event in Python\nDESCRIPTION: Registers a callback for the connected event which is triggered when a client successfully connects to the Web PubSub resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.subscribe(CallbackType.CONNECTED, lambda e: print(f\"Connection {e.connection_id} is connected\"))\n```\n\n----------------------------------------\n\nTITLE: Appending Entry to Azure Confidential Ledger\nDESCRIPTION: Demonstrates how to append a new entry to the ledger and wait for commit confirmation. Uses DefaultAzureCredential for authentication and includes setting up the ledger client with proper certificates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_entry_result = ledger_client.create_ledger_entry(\n        {\"contents\": \"Hello world!\"}\n    )\ntransaction_id = post_entry_result[\"transactionId\"]\n\nwait_poller = ledger_client.begin_wait_for_commit(transaction_id)\nwait_poller.wait()\nprint(f'Ledger entry at transaction id {transaction_id} has been committed successfully')\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Maps Route SDK in Python\nDESCRIPTION: Sets up logging for the Azure Maps Route SDK using Python's standard logging library. This snippet configures a console output handler at DEBUG level to capture detailed information about HTTP sessions, including request/response bodies and headers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.maps.route import MapsRouteClient\n\n# Create a logger for the 'azure.maps.route' SDK\nlogger = logging.getLogger('azure.maps.route')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Authentication in New Version using ClientSecretCredential\nDESCRIPTION: Shows the new authentication method using ClientSecretCredential from azure-identity to create a compute client, providing unified authentication for all Azure SDKs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/python_mgmt_migration_guide.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport azure.mgmt.compute\nfrom azure.identity import ClientSecretCredential\n\ncredential = ClientSecretCredential(\n    tenant_id=tenant_id,\n    client_id=client_id,\n    client_secret=client_secret\n)\ncompute_client = azure.mgmt.compute.ComputeManagementClient(credential=credential, subscription_id=self.subscription_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Libraries via pip\nDESCRIPTION: This command uses the Python package installer `pip` to install the required Azure SDK libraries. It installs `azure-identity` for handling authentication, `azure-keyvault-certificates` for managing Key Vault certificates, and `azure-keyvault-secrets` for managing Key Vault secrets. These libraries are necessary prerequisites for executing the accompanying Python sample code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install azure-identity azure-keyvault-certificates azure-keyvault-secrets\n```\n\n----------------------------------------\n\nTITLE: Function Using Union Type Hint\nDESCRIPTION: Example showing usage of Union type hint to accept multiple parameter types. The build_mode parameter can accept either a string or DocumentBuildMode enum.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\n\ndef begin_build_model(\n    self, source: str, build_mode: Union[str, DocumentBuildMode], **kwargs: Any\n) -> DocumentModelAdministrationLROPoller[DocumentModelInfo]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Renaming 'conversion_input_settings' to 'asset_conversion_input_settings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'conversion_input_settings' definition in the Swagger document. It renames the client-side representation of this definition to 'asset_conversion_input_settings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion_input_settings'\n    transform: >\n        $[\"x-ms-client-name\"] = \"asset_conversion_input_settings\";\n```\n\n----------------------------------------\n\nTITLE: Updating or Overriding a Configuration Setting with set_configuration_setting in Python\nDESCRIPTION: This snippet changes the value and content type of an existing ConfigurationSetting object, then updates the store using client.set_configuration_setting. It demonstrates how to overwrite or create configuration settings. The input is an already populated ConfigurationSetting instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nadded_config_setting.value = \"new value\"\nadded_config_setting.content_type = \"new content type\"\nupdated_config_setting = client.set_configuration_setting(added_config_setting)\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in Batches from Azure Queue\nDESCRIPTION: Retrieves and processes messages in batches from an Azure Storage Queue, with configurable batch size.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages(messages_per_page=10)\n\nfor message_batch in response.by_page():\n    for message in message_batch:\n        print(message.content)\n        queue.delete_message(message)\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Structure in Azure Tables with Python\nDESCRIPTION: Demonstrates how to structure an entity (similar to a row) in Azure Tables using a Python dictionary. The entity includes the required PartitionKey and RowKey along with additional properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nentity = {\n    'PartitionKey': 'color',\n    'RowKey': 'brand',\n    'text': 'Marker',\n    'color': 'Purple',\n    'price': '5'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for Azure SDK Tracing using pip\nDESCRIPTION: Provides the pip commands to install the required Python packages for enabling OpenTelemetry tracing with Azure SDKs. This includes the core OpenTelemetry library and the Azure SDK tracing plugin (`azure-core-tracing-opentelemetry`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install opentelemetry\npip install azure-core-tracing-opentelemetry\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Disconnected Event in Python\nDESCRIPTION: Registers a callback for the disconnected event which is triggered when a client is disconnected and fails to recover the connection.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.subscribe(CallbackType.DISCONNECTED, lambda e: print(f\"Connection disconnected: {e.message}\"))\n```\n\n----------------------------------------\n\nTITLE: Listing All Azure Communication Rooms (Python)\nDESCRIPTION: This snippet fetches all valid rooms associated with the ACS resource using list_rooms from RoomsClient. It is useful for enumerating rooms for administrative or user selection scenarios. Service errors are caught and printed, while no parameters are required for the function call.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    list_room_response = client.list_rooms()\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Health Care APIs using DefaultAzureCredential\nDESCRIPTION: Python code to authenticate with Azure using environment variables and DefaultAzureCredential to create a HealthcareApisManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthcareapis/azure-mgmt-healthcareapis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.healthcareapis import HealthcareApisManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HealthcareApisManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Loading Configurations with Azure Active Directory Authentication - Azure App Configuration Python Provider - Python\nDESCRIPTION: Illustrates connecting to the configuration store using an endpoint and DefaultAzureCredential for authentication. Requires 'azure.appconfiguration.provider' and 'azure-identity' packages. The 'load' function authenticates via AAD and retrieves configurations, outputting a dictionary of key/value pairs with default labels.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load\n\nconfig = load(endpoint=\"your-endpoint\", credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Response\nDESCRIPTION: Shows how to handle errors using raise_for_status() method on the response object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response.raise_for_status()  # raises an error if your response is not good\nexcept HttpResponseError as e:\n    print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Running Event Batch Performance Test\nDESCRIPTION: Example command for running a batch event sending performance test with specific parameters including parallel execution, duration, event size, and transport configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/perfstress_tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventhub> perfstress SendEventBatchTest --parallel=2 --duration=30 --event-size 2048 --batch-size 200 --transport-type 1 --uamqp-transport\n```\n\n----------------------------------------\n\nTITLE: Creating AvroEncoder using SchemaRegistryClient\nDESCRIPTION: Initializes the AvroEncoder by creating a SchemaRegistryClient with the appropriate namespace and credentials. This is the basic setup required before encoding or decoding operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net'\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Search Query in Azure Cosmos DB (Python)\nDESCRIPTION: Shows how to create a basic vector search query using the VectorDistance function. The query selects the top 10 items ordered by vector similarity to the provided embedding.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nquery = \"SELECT TOP 10 c.title,VectorDistance(c.embedding, [{}]) AS \" \\\n            \"SimilarityScore FROM c ORDER BY VectorDistance(c.embedding, [{}])\".format(embeddings_string, embeddings_string)\n```\n\n----------------------------------------\n\nTITLE: Deleting Old Images\nDESCRIPTION: Delete all but the three most recent images in each repository based on last updated timestamp\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    for repository in client.list_repository_names():\n        # Keep the three most recent images, delete everything else\n        manifest_count = 0\n        for manifest in client.list_manifest_properties(\n            repository, order_by=ArtifactManifestOrder.LAST_UPDATED_ON_DESCENDING\n        ):\n            manifest_count += 1\n            if manifest_count > 3:\n                # Make sure will have the permission to delete the manifest later\n                client.update_manifest_properties(repository, manifest.digest, can_write=True, can_delete=True)\n                print(f\"Deleting {repository}:{manifest.digest}\")\n                client.delete_manifest(repository, manifest.digest)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure File Share using Python SDK\nDESCRIPTION: Creates a new file share in Azure Storage using ShareClient. Shows both synchronous and asynchronous implementations using connection string authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareClient\n\nshare = ShareClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\")\nshare.create_share()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare.aio import ShareClient\n\nshare = ShareClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\")\nawait share.create_share()\n```\n\n----------------------------------------\n\nTITLE: Initializing SipRoutingClient with Connection String (Python)\nDESCRIPTION: This snippet shows how to instantiate a SipRoutingClient using a connection string from the Azure Portal. Required dependency: azure.communication.phonenumbers.siprouting. The given connection string authenticates the client for SIP trunk and route configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# You can find your connection string from your resource in the Azure Portal\nimport os\nfrom azure.communication.phonenumbers.siprouting import SipRoutingClient\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nsip_routing_client = SipRoutingClient.from_connection_string(connection_str)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cosmos DB Authentication\nDESCRIPTION: Azure CLI commands to retrieve and export Cosmos DB account URI and primary key as environment variables for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRES_GROUP=<resource-group-name>\nACCT_NAME=<cosmos-db-account-name>\n\nexport ACCOUNT_URI=$(az cosmosdb show --resource-group $RES_GROUP --name $ACCT_NAME --query documentEndpoint --output tsv)\nexport ACCOUNT_KEY=$(az cosmosdb list-keys --resource-group $RES_GROUP --name $ACCT_NAME --query primaryMasterKey --output tsv)\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Weather Conditions with Azure Maps Weather API in Python\nDESCRIPTION: This code demonstrates how to get current weather conditions for specific coordinates using the Azure Maps Weather API. It initializes a MapsWeatherClient with an Azure Key Credential and calls the get_current_conditions method, handling any HTTP response errors that might occur.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_current_conditions():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_current_conditions(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_current_conditions()\n```\n\n----------------------------------------\n\nTITLE: Loading Feature Flags - Azure App Configuration Python Provider - Python\nDESCRIPTION: Demonstrates loading all feature flags (with no label) by setting 'feature_flags_enabled=True'. Returns feature flag data nested under 'feature_management' > 'feature_flags' in the configuration dictionary. Utilizes 'DefaultAzureCredential'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), feature_flags_enabled=True)\nalpha = config[\"feature_management\"][\"feature_flags\"][\"Alpha\"]\nprint(alpha[\"enabled\"])\n```\n\n----------------------------------------\n\nTITLE: Exporting Hello World Log with Azure Monitor in Python\nDESCRIPTION: This snippet demonstrates how to set up OpenTelemetry logging with Azure Monitor exporter. It initializes a logger provider, sets up an Azure Monitor log exporter, and logs a simple 'Hello World' message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport logging\n\nfrom opentelemetry._logs import set_logger_provider\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\nlogger_provider = LoggerProvider()\nset_logger_provider(logger_provider)\n\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\n\n# Attach LoggingHandler to namespaced logger\nhandler = LoggingHandler()\nlogger = logging.getLogger(__name__)\nlogger.addHandler(handler)\nlogger.setLevel(logging.NOTSET)\n\nlogger.warning(\"Hello World!\")\n\n# Telemetry records are flushed automatically upon application exit\n# If you would like to flush records manually yourself, you can call force_flush()\nlogger_provider.force_flush()\n```\n\n----------------------------------------\n\nTITLE: Initializing CertificateCredential from Certificate Data in Python\nDESCRIPTION: Shows an alternative method to initialize `CertificateCredential` by first reading the certificate file content into memory as bytes and then passing this data, along with the tenant ID and client ID, to the constructor using the `certificate_data` parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/client_certificate_credential.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\ncertificate_data = open(CERT_PATH, \"rb\").read()\n\ncredential = CertificateCredential(tenant_id, client_id, certificate_data=certificate_data)\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Settings within a Snapshot in Python\nDESCRIPTION: This snippet shows how to list the specific configuration settings that are part of a named snapshot in Azure App Configuration. It calls `list_configuration_settings` on the client, specifying the `snapshot_name` parameter. Requires an initialized `client` and a `snapshot_name` variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfor config_setting in client.list_configuration_settings(snapshot_name=snapshot_name):\n    print(config_setting)\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure ML Metrics Requirements with Generative AI Support\nDESCRIPTION: Package requirement specification for azureml-metrics with generative AI capabilities enabled through optional dependency bracket syntax.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/evaluate/pf_templates/built_in_metrics/chat/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nazureml-metrics[generative-ai]\n```\n\n----------------------------------------\n\nTITLE: Configuring Purview Client Logging\nDESCRIPTION: Example of setting up detailed DEBUG level logging for the Purview client using the standard Python logging library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.purview.administration.account import PurviewAccountClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-account-name>.purview.azure.com\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = PurviewAccountClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Batch Route Directions\nDESCRIPTION: Python code demonstrating how to retrieve results from a batch route directions request.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.route import MapsRouteClient\n\nroute_directions_batch_poller_result = client.begin_get_route_directions_batch_result(batch_id=\"11111111-2222-3333-4444-555555555555\");\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Requests Library with OpenTelemetry in Python\nDESCRIPTION: This example demonstrates how to use OpenTelemetry instrumentation with the requests library. The requests instrumentation automatically tracks HTTP calls made with the library and exports the telemetry to Application Insights.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"An example to show an application instrumented with the OpenTelemetry requests instrumentation.\nCalls made with the requests library will be automatically tracked and telemetry is exported to \napplication insights with the AzureMonitorTraceExporter.\nSee more info on the requests instrumentation here:\nhttps://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation/opentelemetry-instrumentation-requests\"\"\"\nimport os\nimport requests\nfrom opentelemetry import trace\nfrom opentelemetry.instrumentation.requests import RequestsInstrumentor\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\n\n# This line causes your calls made with the requests library to be tracked.\nRequestsInstrumentor().instrument()\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nspan_processor = BatchSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\n# This request will be traced\nresponse = requests.get(url=\"https://azure.microsoft.com/\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Traffic Manager Client\nDESCRIPTION: Python code to initialize the Traffic Manager Management Client using DefaultAzureCredential for authentication. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trafficmanager/azure-mgmt-trafficmanager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.trafficmanager import TrafficManagerManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = TrafficManagerManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Using AutoLockRenewer in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares the usage of automatic lock renewal in v0.50 and v7. The class `AutoLockRenew` in v0.50 is renamed to `AutoLockRenewer` in v7. The `register` method in v7 now requires both the receiver and the object whose lock needs renewal (message or session) as arguments, whereas v0.50 only required the object. The cleanup method is changed from `shutdown()` to `close()`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import AutoLockRenew\nauto_lock_renew = AutoLockRenew()\n\nwith receiver:\n    auto_lock_renew.register(received_message)\n\nwith session_receiver:\n    auto_lock_renew.register(session_receiver)\n\nauto_lock_renew.shutdown()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import AutoLockRenewer\nauto_lock_renewer = AutoLockRenewer()\n\nwith receiver:\n    auto_lock_renewer.register(receiver, received_message)\n\nwith session_receiver:\n    auto_lock_renewer.register(session_receiver, session_receiver.session)\n\nauto_lock_renewer.close()\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Pinecone Vector DB Client\nDESCRIPTION: Example of authenticating the Pinecone Vector DB management client using DefaultAzureCredential and environment variables for Azure subscription ID. Requires AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID environment variables to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/pineconevectordb/azure-mgmt-pineconevectordb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.pineconevectordb import PineconeVectorDbMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PineconeVectorDbMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LRO Polling Method in Python\nDESCRIPTION: Defines a custom polling method class that implements the core polling mechanism for file upload monitoring. Includes initialization, status tracking, resource management, and continuation token support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nimport time\nimport base64\nfrom typing import Any, Tuple, Callable, MutableMapping\nfrom azure.core.pipeline import PipelineResponse\nfrom azure.core.polling import PollingMethod\nfrom azure.core.polling.base_polling import BadResponse\nfrom azure.core.exceptions import ResourceNotFoundError\nJSON = MutableMapping[str, Any]\n\n\nclass CustomPollingMethod(PollingMethod):\n    def __init__(self, polling_interval: float = 30, **kwargs: Any) -> None:\n        \"\"\"Creates a custom polling method which polls until a file is uploaded.\n        For our example, the operation is considered to have reached a terminal state once a successful GET\n        is done on the file (e.g. no ResourceNotFoundError is raised).\n\n        :param polling_interval: The amount of time to wait between polls. This fictitious service does not\n            use retry-after so we will default to this value.\n        :param kwargs: Any operation-specific keyword arguments that should be passed into the GET call.\n        \"\"\"\n        self._polling_interval = polling_interval\n        self._kwargs = kwargs\n\n    def initialize(self, client: Any, initial_response: PipelineResponse, deserialization_callback: Callable) -> None:\n        \"\"\"Set the initial status of this LRO, verify that we can poll, and\n        initialize anything necessary for polling.\n\n        :param client: An instance of a client. In this example, the generated client.\n        :param initial_response: In this example, the PipelineResponse returned from the initial call.\n        :param deserialization_callback: A callable to transform the final result before returning to the end user.\n        \"\"\"\n\n        # verify we have the information to poll\n        if self._operation.can_poll(initial_response) is False:\n            raise BadResponse(\"No file_id in response.\")\n\n        response = initial_response.http_response.json()\n\n        # initialize\n        self.client = client\n        self.file_id = response[\"file_id\"]\n        self._initial_response = initial_response\n        self._deserialization_callback = deserialization_callback\n        self._resource = None\n        self._finished = False\n\n        # sets our strategy\n        self._operation = CustomPollingStrategy()\n\n        # create the command which will be polled against as the status monitor\n        self._command = functools.partial(self.client.get_upload_file, file_id=self.file_id, **self._kwargs)\n\n        # set initial status\n        self._status = self._operation.set_initial_status(initial_response)\n\n\n    def status(self) -> str:\n        \"\"\"Should return the current status as a string. The initial status is set by\n        the polling strategy with set_initial_status() and then subsequently set by\n        each call to get_status().\n\n        This is what is returned to the user when status() is called on the LROPoller.\n\n        :rtype: str\n        \"\"\"\n        return self._status\n\n    def finished(self) -> bool:\n        \"\"\"Is this polling finished?\n        Controls whether the polling loop should continue to poll.\n\n        :returns: Return True if the operation has reached a terminal state\n            or False if polling should continue.\n        :rtype: bool\n        \"\"\"\n        return True if self.status() == \"Succeeded\" else False\n\n    def resource(self) -> JSON:\n        \"\"\"Return the built resource.\n        This is what is returned when to the user when result() is called on the LROPoller.\n\n        This might include a deserialization callback (passed in initialize())\n        to transform or customize the final result, if necessary.\n        \"\"\"\n        return self._deserialization_callback(self._resource)\n\n    def run(self) -> None:\n        \"\"\"The polling loop.\n\n        The polling should call the status monitor, evaluate and set the current status,\n        insert delay between polls, and continue polling until a terminal state is reached.\n        \"\"\"\n        while not self.finished():\n            self.update_status()\n            if not self.finished():\n                # inserts delay if not done\n                time.sleep(self._polling_interval)\n\n    def update_status(self):\n        \"\"\"Update the current status of the LRO by calling the status monitor\n        and then using the polling strategy's get_status() to set the status.\"\"\"\n        try:\n            self._resource = self._command()\n        except ResourceNotFoundError:\n            pass\n\n        self._status = self._operation.get_status(self._resource)\n\n    def get_continuation_token(self) -> str:\n        \"\"\"Returns an opaque token which can be used by the user to rehydrate/restart the LRO.\n        Saves the initial state of the LRO so that polling can be resumed from that context.\n\n        .. code-block:: python\n\n            initial_poller = client.begin_upload(data)\n            continuation_token = initial_poller.continuation_token()\n\n            poller: LROPoller = client.begin_upload(None, continuation_token=continuation_token)\n            poller.result()\n\n        In standard LROs, the PipelineResponse is serialized here, however, there may be a need to\n        customize this further depending on your scenario.\n        \"\"\"\n        import pickle\n\n        return base64.b64encode(pickle.dumps(self._initial_response)).decode(\"ascii\")\n\n    @classmethod\n    def from_continuation_token(cls, continuation_token: str, **kwargs: Any) -> Tuple[Any, PipelineResponse, Callable]:\n        \"\"\"Deserializes the user-provided continuation_token to the initial response and returns\n        the context necessary to rebuild the LROPoller from its classmethod.\n        \"\"\"\n        try:\n            client = kwargs[\"client\"]\n        except KeyError:\n            raise ValueError(\"Need kwarg 'client' to be recreated from continuation_token\")\n\n        try:\n            deserialization_callback = kwargs[\"deserialization_callback\"]\n        except KeyError:\n            raise ValueError(\n                \"Need kwarg 'deserialization_callback' to be recreated from continuation_token\"\n            )\n\n        import pickle\n\n        initial_response = pickle.loads(base64.b64decode(continuation_token))  # nosec\n        # Restore the transport in the context\n        initial_response.context.transport = client._client._pipeline._transport  # pylint: disable=protected-access\n        return client, initial_response, deserialization_callback\n```\n\n----------------------------------------\n\nTITLE: Handling Group Rejoin Failures in Python\nDESCRIPTION: Configures auto-rejoin behavior and adds a callback to handle rejoin group failures which may occur when a client is disconnected and reconnects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# By default auto_rejoin_groups=True. You can disable it by setting to False.\nclient = WebPubSubClient(\"<client-access-url>\", auto_rejoin_groups=True);\n\n# Registers a listener to handle \"rejoin-group-failed\" event\nclient.subscribe(CallbackType.REJOIN_GROUP_FAILED, lambda e: print(f\"Rejoin group {e.group} failed: {e.error}\"))\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure ML Client\nDESCRIPTION: Code to authenticate with Azure Machine Learning services using DefaultAzureCredential. This creates an MLClient instance that can be used to interact with Azure ML resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential\n\nml_client = MLClient(\n    DefaultAzureCredential(), subscription_id, resource_group, workspace\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Severe Weather Alerts with Azure Maps Weather API in Python\nDESCRIPTION: This snippet shows how to obtain information about severe weather conditions such as hurricanes, thunderstorms, flooding, lightning, heat waves, or forest fires for a specific location. It uses the MapsWeatherClient to query the API and handles any errors returned.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_severe_weather_alerts():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_severe_weather_alerts(coordinates=[39.793451, -104.944511])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_severe_weather_alerts()\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Setting with add_configuration_setting in Python\nDESCRIPTION: This Python snippet uses the ConfigurationSetting class to create a new setting with custom key, label, value, content type, and tags. It then adds this setting to the config store using client.add_configuration_setting, which only succeeds if the key does not already exist. Requires valid client object from previous setup, with error handling for duplicate keys.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconfig_setting = ConfigurationSetting(\n    key=\"MyKey\", label=\"MyLabel\", value=\"my value\", content_type=\"my content type\", tags={\"my tag\": \"my tag value\"}\n)\nadded_config_setting = client.add_configuration_setting(config_setting)\n```\n\n----------------------------------------\n\nTITLE: Authentication using Azure Active Directory\nDESCRIPTION: Example of authenticating Event Grid client using DefaultAzureCredential from azure-identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.eventgrid import EventGridPublisherClient, EventGridEvent\n\ndefault_az_credential = DefaultAzureCredential()\nendpoint = os.environ[\"EVENTGRID_TOPIC_ENDPOINT\"]\nclient = EventGridPublisherClient(endpoint, default_az_credential)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Tool Call Accuracy with Single Tool Call - Python\nDESCRIPTION: Invokes the ToolCallAccuracyEvaluator using a single query, a single tool call, and its definition, printing the scored response. This demonstrates the core evaluation function and returns a binary score based on relevance and correctness, using pprint for readable output. This snippet depends on previous object initializations and definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = tool_call_accuracy(query=query, tool_calls=tool_call, tool_definitions=tool_definition)\npprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships Between Lines and Areas in Python\nDESCRIPTION: This snippet demonstrates how to create relationships between lines and areas, simulating the physical connections in a venue.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef line_to_room(line,area,walking):\n    tickethoder_relationship = {\n                \"$relationshipId\": f\"{line}leadsTo{area}\",\n                \"$sourceId\": line,\n                \"$relationshipName\": \"leadsTo\",\n                \"$targetId\": area,\n                \"walk_distance\": walking\n            }\n\n    service_client.upsert_relationship(\n            tickethoder_relationship[\"$sourceId\"],\n            tickethoder_relationship[\"$relationshipId\"],\n            tickethoder_relationship\n        )\n        \nline_to_room(\"line-0\",\"area-0\",5)\nline_to_room(\"line-1\",\"area-1\",5)\nline_to_room(\"line-2\",\"area-2\",5)\nline_to_room(\"line-3\",\"area-3\",5)\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Analytics Client with API Key\nDESCRIPTION: Creates a TextAnalyticsClient instance using an endpoint and API key for authentication. This is the basic setup for accessing Azure Text Analytics services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\ncredential = AzureKeyCredential(\"<api_key>\")\ntext_analytics_client = TextAnalyticsClient(endpoint=\"https://<resource-name>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Azure FarmBeats API Call in Python\nDESCRIPTION: This snippet illustrates how to enable detailed logging for a specific API call using the Azure FarmBeats SDK, even if logging is not enabled for the entire client instance. By passing the `logging_enable=True` keyword argument directly to the `client.crops.get` method, detailed information about the HTTP request and response for just this operation will be logged, assuming logging handlers are configured as shown in the previous example.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\nclient.crops.get(crop_id=\"crop_id\", logging_enable=True)\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Chat Thread Properties\nDESCRIPTION: Retrieves the properties of a chat thread using the chat thread client, providing information about the thread configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nchat_thread_properties = chat_thread_client.get_properties()\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Storage Account Connection String via Azure CLI - Bash\nDESCRIPTION: Uses az command in Bash to retrieve the connection string for a storage account, essential for initializing Python clients using the from_connection_string factory. Parameters: resource group (MyResourceGroup) and storage account name (MyStorageAccount). Output is a connection string as JSON.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Dynatrace Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the Dynatrace Observability Management Client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dynatrace/azure-mgmt-dynatrace/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dynatrace import DynatraceObservabilityMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DynatraceObservabilityMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Load Testing Package with pip\nDESCRIPTION: Command to install the azure-developer-loadtesting package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-developer-loadtesting\n```\n\n----------------------------------------\n\nTITLE: Listing Keys in Azure Key Vault\nDESCRIPTION: This snippet shows how to list the properties of all keys in the client's Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkeys = key_client.list_properties_of_keys()\n\nfor key in keys:\n    # the list doesn't include values or versions of the keys\n    print(key.name)\n```\n\n----------------------------------------\n\nTITLE: Specifying Encryption Version in Python Azure Blob Storage SDK\nDESCRIPTION: Demonstrates how to specify the encryption version when initializing a client. This example shows setting the encryption version to 2.0, which uses AES-GCM-256 encryption.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient = BlobClient(..., encryption_version='2.0')\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document Content with FormRecognizerClient in Azure SDK for Python 3.1.x\nDESCRIPTION: This code demonstrates how to extract content from documents using the FormRecognizerClient in version 3.1.x. It processes page dimensions, tables, text lines, words, and selection marks, and can detect handwritten content that may be signatures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith open(path_to_sample_forms, \"rb\") as f:\n    poller = form_recognizer_client.begin_recognize_content(form=f)\nform_pages = poller.result()\n\nfor idx, content in enumerate(form_pages):\n    print(\"----Recognizing content from page #{}----\".format(idx+1))\n    print(\"Page has width: {} and height: {}, measured with unit: {}\".format(\n        content.width,\n        content.height,\n        content.unit\n    ))\n    for table_idx, table in enumerate(content.tables):\n        print(\"Table # {} has {} rows and {} columns\".format(table_idx, table.row_count, table.column_count))\n        print(\"Table # {} location on page: {}\".format(table_idx, table.bounding_box))\n        for cell in table.cells:\n            print(\"...Cell[{}][{}] has text '{}' within bounding box '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.text,\n                cell.bounding_box\n            ))\n\n    for line_idx, line in enumerate(content.lines):\n        print(\"Line # {} has word count '{}' and text '{}' within bounding box '{}'\".format(\n            line_idx,\n            len(line.words),\n            line.text,\n            line.bounding_box\n        ))\n        if line.appearance:\n            if line.appearance.style_name == \"handwriting\" and line.appearance.style_confidence > 0.8:\n                print(\"Text line '{}' is handwritten and might be a signature.\".format(line.text))\n        for word in line.words:\n            print(\"...Word '{}' has a confidence of {}\".format(word.text, word.confidence))\n\n    for selection_mark in content.selection_marks:\n        print(\"Selection mark is '{}' within bounding box '{}' and has a confidence of {}\".format(\n            selection_mark.state,\n            selection_mark.bounding_box,\n            selection_mark.confidence\n        ))\n    print(\"----------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultAzureCredential for Azure Government Cloud in Python\nDESCRIPTION: This snippet shows how to configure DefaultAzureCredential to authenticate to Azure Government Cloud using the AzureAuthorityHosts enum.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureAuthorityHosts\n\nDefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_GOVERNMENT)\n```\n\n----------------------------------------\n\nTITLE: Async Client Cleanup with Azure Key Vault Certificate Client\nDESCRIPTION: Demonstrates how to properly close async clients and credentials when working with Azure Key Vault certificates. Shows both manual closing and context manager approaches.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client and credential are no longer needed\nclient = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.AsyncExitStack can help)\nclient = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Playing Media in a Call Connection\nDESCRIPTION: Uses an established call connection to play a media file to all participants in the call. This demonstrates how to perform media actions once a call is connected.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# using call connection id, get call connection\ncall_connection = client.get_call_connection(call_connection_id)\n\n# from callconnection of result above, play media to all participants\nmy_file = FileSource(url=\"https://<FILE-SOURCE>/<SOME-FILE>.wav\")\ncall_connection.play_to_all(my_file)\n```\n\n----------------------------------------\n\nTITLE: Listing Sent Share Invitations\nDESCRIPTION: Retrieves a list of all sent share invitations for a specific share.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nsent_share_id = uuid.uuid4()\n\nlist_request = client.sent_shares.list_invitations(sent_share_id=str(sent_share_id))\n\nfor list_response in list_request:\n    print(list_response)\n```\n\n----------------------------------------\n\nTITLE: Using StorageManagementClient as Context Manager in Python\nDESCRIPTION: Example of using the StorageManagementClient as a context manager for improved performance, as recommended in version 4.0.0 changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nwith StorageManagementClient(...) as client:\n    # Perform operations\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Certificate in Azure Key Vault using Python\nDESCRIPTION: This snippet shows how to create a new certificate in Azure Key Vault using the CertificateClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient, CertificatePolicy\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncreate_certificate_poller = certificate_client.begin_create_certificate(\n    certificate_name=\"cert-name\", policy=CertificatePolicy.get_default()\n)\nprint(create_certificate_poller.result())\n```\n\n----------------------------------------\n\nTITLE: Sending Avro-Encoded Data to Azure Event Hubs using Python\nDESCRIPTION: This snippet demonstrates how to send Avro-encoded data to Azure Event Hubs. It initializes an `EventHubProducerClient` and an `AvroEncoder` using `SchemaRegistryClient`. A Python dictionary is encoded into an `EventData` object with the Avro payload and appropriate content type using the encoder. The `EventData` is added to a batch and sent to the specified Event Hub. Environment variables are used for configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventhub import EventHubProducerClient, EventData\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name, auto_register=True)\n\neventhub_producer = EventHubProducerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    eventhub_name=eventhub_name\n)\n\nwith eventhub_producer, avro_encoder:\n    event_data_batch = eventhub_producer.create_batch()\n    dict_content = {\"name\": \"Bob\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = avro_encoder.encode(dict_content, schema=definition, message_type=EventData)\n    event_data_batch.add(event_data)\n    eventhub_producer.send_batch(event_data_batch)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Azure Text Analytics Performance Test in Shell\nDESCRIPTION: Shows an example command for executing the 'DetectLanguagePerfStressTest' perf test with custom options: running 50 parallel tests and using a 1-second warm-up. This illustrates how to specify a single test and pass command line options to control execution parameters such as concurrency and warm-up duration. Users must adjust parameters according to their test requirements and environment capabilities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-textanalytics/tests/perfstress_tests> perfstress DetectLanguagePerfStressTest --parallel=50 --warmup=1\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Communication Room (Python)\nDESCRIPTION: This example shows how to delete a room with a specified room_id using the delete_room function of RoomsClient. Exception handling is included to capture and display errors returned by the service. Before calling, ensure the client is initialized and the room_id is valid.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    client.delete_room(\n        room_id=\"id of the room to be deleted\")\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e))\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Cache for Redis with Entra ID in Python (Basic)\nDESCRIPTION: Demonstrates basic authentication to Azure Cache for Redis using Microsoft Entra ID. It utilizes `azure.identity.DefaultAzureCredential` to fetch an access token for the specified scope (`https://redis.azure.com/.default`), extracts the user OID from the token to use as the username via the `extract_username_from_token` helper function, and connects to the Redis instance using the full token as the password over an SSL connection. Requires the `redis` and `azure-identity` libraries, and configuration of the `host` and `port` variables for the target Redis instance. Performs a simple set and get operation to verify the connection.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/azure-aad-auth-with-redis-py.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport redis\nimport base64\nimport json\nfrom azure.identity import DefaultAzureCredential\n\nscope = \"https://redis.azure.com/.default\"  # The current scope is for public preview and may change for GA release.\nhost = \"\"  # Required\nport = 6380  # Required\n\ndef extract_username_from_token(token):\n    parts = token.split('.')\n    base64_str = parts[1]\n\n    if len(base64_str) % 4 == 2:\n        base64_str += \"==\"\n    elif len(base64_str) % 4 == 3:\n        base64_str += \"=\"\n\n    json_bytes = base64.b64decode(base64_str)\n    json_str = json_bytes.decode('utf-8')\n    jwt = json.loads(json_str)\n\n    return jwt['oid']\n\ndef hello_world():\n    cred = DefaultAzureCredential()\n    token = cred.get_token(scope)\n    user_name = extract_username_from_token(token.token)\n    r = redis.Redis(host=host,\n                    port=port,\n                    ssl=True,    # ssl connection is required.\n                    username=user_name,\n                    password=token.token,\n                    decode_responses=True)\n    r.set(\"Az:key1\", \"value1\")\n    t = r.get(\"Az:key1\")\n    print(t)\n\nif __name__ == '__main__':\n    hello_world()\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Function Agent with Queue Trigger\nDESCRIPTION: Sets up an AI agent that leverages Azure Functions with queue triggers for asynchronous processing. Configures input/output queues and parameter definitions for weather information retrieval.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nstorage_service_endpoint = \"https://<your-storage>.queue.core.windows.net\"\n\nazure_function_tool = AzureFunctionTool(\n    name=\"get_weather\",\n    description=\"Get weather information using Azure Function\",\n    parameters={\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\", \"description\": \"The location of the weather.\"}\n            },\n            \"required\": [\"location\"]\n        },\n    input_queue=AzureFunctionStorageQueue(\n        queue_name=\"input\",\n        storage_service_endpoint=storage_service_endpoint,\n    ),\n    output_queue=AzureFunctionStorageQueue(\n        queue_name=\"output\",\n        storage_service_endpoint=storage_service_endpoint,\n    ),\n)\n\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are a helpful assistant\",\n    tools=azure_function_tool.definitions,\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Azure Monitor Logs Data - Python\nDESCRIPTION: Implementation of log data fetching with concurrent query execution, data processing, and file output handling. Includes semaphore-based concurrency control and customizable data processing pipeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\n\nsemaphore = asyncio.Semaphore(MAX_CONCURRENT_QUERIES)\n\nasync def fetch_logs(query: str, start_time: datetime, end_time: datetime, query_id: str, correlation_request_id: str):\n    async with semaphore:\n        response = await execute_query(query, start_time, end_time, query_id=query_id, correlation_request_id=correlation_request_id)\n        df = await process_logs(response)\n        if df is not None and not df.empty:\n            write_to_file(df, query_id)\n            return len(df)\n        return 0\n\nasync def process_logs(response):\n    if response:\n        df = pd.DataFrame(data=response.rows, columns=response.columns)\n        return df\n    return None\n\ndef write_to_file(df, query_id):\n    path = os.path.join(OUTPUT_DIRECTORY, f\"{OUTPUT_FILE_PREFIX}_{query_id}.pkl\")\n    df.to_pickle(path)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing the Azure Appcontainers Client - Python\nDESCRIPTION: This snippet shows how to authenticate with Azure Active Directory and initialize the ContainerAppsAPIClient using Azure credentials from environment variables. Required dependencies are 'azure-identity' and 'azure-mgmt-appcontainers', and the relevant environment variables ('AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', 'AZURE_SUBSCRIPTION_ID') must be set prior to running the code. The script creates a client instance ready for Azure management operations; it outputs nothing by default but raises errors if credentials are misconfigured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcontainers/azure-mgmt-appcontainers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appcontainers import ContainerAppsAPIClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerAppsAPIClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Detecting Faces Using Azure AI Vision Face SDK - Python\nDESCRIPTION: This snippet demonstrates how to detect faces and analyze face attributes in an image using Azure AI Vision Face SDK for Python. Dependencies include azure-core, azure-ai-vision-face, and their respective models. Required parameters are the service endpoint, API key, and image file path. The detected faces and attributes are printed; the code relies on the latest detection and recognition models and reads the image as binary data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.ai.vision.face import FaceClient\\nfrom azure.ai.vision.face.models import (\\n    FaceDetectionModel,\\n    FaceRecognitionModel,\\n    FaceAttributeTypeDetection03,\\n    FaceAttributeTypeRecognition04,\\n)\\n\\nendpoint = \"<your endpoint>\"\\nkey = \"<your api key>\"\\n\\nwith FaceClient(endpoint=endpoint, credential=AzureKeyCredential(key)) as face_client:\\n    sample_file_path = \"<your image file>\"\\n    with open(sample_file_path, \"rb\") as fd:\\n        file_content = fd.read()\\n\\n    result = face_client.detect(\\n        file_content,\\n        detection_model=FaceDetectionModel.DETECTION03,  # The latest detection model.\\n        recognition_model=FaceRecognitionModel.RECOGNITION04,  # The latest recognition model.\\n        return_face_id=True,\\n        return_face_attributes=[\\n            FaceAttributeTypeDetection03.HEAD_POSE,\\n            FaceAttributeTypeDetection03.MASK,\\n            FaceAttributeTypeRecognition04.QUALITY_FOR_RECOGNITION,\\n        ],\\n        return_face_landmarks=True,\\n        return_recognition_model=True,\\n        face_id_time_to_live=120,\\n    )\\n\\n    print(f\"Detect faces from the file: {sample_file_path}\")\\n    for idx, face in enumerate(result):\\n        print(f\"----- Detection result: #{idx+1} -----\")\\n        print(f\"Face: {face.as_dict()}\")\n```\n\n----------------------------------------\n\nTITLE: Generating Account SAS Token Using azure-storage-blob Python SDK\nDESCRIPTION: The API for generating account-level SAS has changed from generate_account_shared_access_signature to generate_account_sas, which is not a class method in the v12 SDK for Python. You must import generate_account_sas directly from azure.storage.blob. Ensure the azure-storage-blob package is installed, with the necessary account credentials and parameters. The output is a SAS token granting requested privileges at the account level.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import generate_account_sas\n# Usage example:\n# sas_token = generate_account_sas(account_name, account_key, ...)\n\n```\n\n----------------------------------------\n\nTITLE: Reverse Geocoding Coordinates to Addresses with Azure Maps Search\nDESCRIPTION: This example demonstrates how to translate coordinate locations into human-readable street addresses (reverse geocoding) using the Azure Maps Search client. It takes a longitude and latitude coordinate pair, sends a reverse geocoding request, and extracts the formatted address from the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef reverse_geocode():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.search import MapsSearchClient\n\n    maps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_search_client.get_reverse_geocoding(coordinates=[-122.138679, 47.630356])\n        if result.get('features', False):\n            props = result['features'][0].get('properties', {})\n            if props and props.get('address', False):\n                print(props['address'].get('formattedAddress', 'No formatted address found'))\n            else:\n                print(\"Address is None\")\n        else:\n            print(\"No features available\")\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\n\nif __name__ == '__main__':\n   reverse_geocode()\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Transport Properties in Python\nDESCRIPTION: This snippet illustrates how to configure common properties applicable to various Azure Core transports (synchronous and asynchronous) using keyword arguments during initialization. It demonstrates setting `connection_timeout`, `connection_verify` (for SSL verification, including paths to CA bundles), `connection_cert` (for client-side certificates), and `connection_data_block_size`, using `AioHttpTransport` as an example.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\ntransport = AioHttpTransport(\n        # The connect and read timeout value. Defaults to 100 seconds.\n        connection_timeout=100,\n\n        # SSL certificate verification. Enabled by default. Set to False to disable,\n        # alternatively can be set to the path to a CA_BUNDLE file or directory with\n        # certificates of trusted CAs.\n        connection_verify=True,\n\n        # Client-side certificates. You can specify a local cert to use as client side\n        # certificate, as a single file (containing the private key and the certificate)\n        # or as a # tuple of both files' paths.\n        connection_cert=None,\n\n        # The block size of data sent over the connection. Defaults to 4096 bytes.\n        connection_data_block_size=4096\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing AuthoringClient with API Key in Python\nDESCRIPTION: This Python snippet shows how to instantiate the `AuthoringClient`, which is used for managing Question Answering projects (e.g., creating, updating, deploying). Similar to `QuestionAnsweringClient`, it requires the service endpoint and an API key provided via `AzureKeyCredential` for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nendpoint = \"https://{myaccount}.api.cognitive.microsoft.com\"\ncredential = AzureKeyCredential(\"{api-key}\")\n\nclient = AuthoringClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login for Testing\nDESCRIPTION: This command logs in to Azure using the Azure CLI, which is necessary for authentication during testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Listing Credentials Supporting tenant_id in get_token (Python)\nDESCRIPTION: Enumerates the credential types that support the `tenant_id` argument within their `get_token()` method: `AuthorizationCodeCredential`, `AzureCliCredential`, `AzurePowerShellCredential`, `InteractiveBrowserCredential`, `DeviceCodeCredential`, `EnvironmentCredential`, and `UsernamePasswordCredential`. For other credential types, this argument is ignored.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nAuthorizationCodeCredential\n```\n\nLANGUAGE: Python\nCODE:\n```\nAzureCliCredential\n```\n\nLANGUAGE: Python\nCODE:\n```\nAzurePowerShellCredential\n```\n\nLANGUAGE: Python\nCODE:\n```\nInteractiveBrowserCredential\n```\n\nLANGUAGE: Python\nCODE:\n```\nDeviceCodeCredential\n```\n\nLANGUAGE: Python\nCODE:\n```\nEnvironmentCredential\n```\n\nLANGUAGE: Python\nCODE:\n```\nUsernamePasswordCredential\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attestation Policy in Python\nDESCRIPTION: Demonstrates fetching the current attestation policy for a specific attestation type (e.g., SGX Enclave) from the Azure Attestation service using the `get_policy` method. It returns the policy document and the associated JSON Web Token (JWT).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npolicy, token = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\nprint('Instance SGX policy: ', policy)\nprint('Token: ', token)\n\n```\n\n----------------------------------------\n\nTITLE: Getting a Received Share with PurviewSharingClient - Python\nDESCRIPTION: Retrieves details of a specific received share for the consumer using its ID. It lists all detached received shares, selects the first, then fetches and prints detailed information by calling the get method. The snippet utilizes json.loads to parse SDK responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport os\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\nlist_detached_response = client.received_shares.list_detached(order_by=\\\"properties/createdAt desc\\\")\\nlist_detached = json.loads(list_detached_response)\\nreceived_share = list_detached[0]\\n\\nget_share_response = client.received_shares.get(received_share_id=received_share['id'])\\nretrieved_share = json.loads(get_share_response)\\nprint(retrieved_share)\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Azure Digital Twins Model in Python\nDESCRIPTION: Demonstrates how to retrieve a specific model using its ID with the DigitalTwinsClient.get_model() method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get a model\nget_model = service_client.get_model(model_id)\nprint('Get Model:')\nprint(get_model)\n```\n\n----------------------------------------\n\nTITLE: Creating Question Answering Project with azure-ai-language-questionanswering in Python\nDESCRIPTION: This snippet shows how to create a new Question Answering project using the AuthoringClient in the new azure-ai-language-questionanswering library. It demonstrates authentication and project creation with custom options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n\nproject = client.create_project(\n    project_name=\"<project_name>\",\n    options={\n        \"description\": \"This is the description for a test project\",\n        \"language\": \"en\",\n        \"multilingualResource\": True,\n        \"settings\": {\n            \"defaultAnswer\": \"no answer\"\n        }\n    })\n\nprint(f\"Project name: {project['projectName']}\")\nprint(f\"language: {project['language']}\")\nprint(f\"description: {project['description']}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Service Fabric Management Client - Python\nDESCRIPTION: This snippet shows how to create a Service Fabric Management Client authenticated via Azure Active Directory using environment-based credentials in Python. The code requires predefined environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID. It imports DefaultAzureCredential from azure.identity for authentication and the ServiceFabricManagementClient from azure.mgmt.servicefabric for resource management. The client object can be used to interact with Azure Service Fabric resources securely.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicefabric/azure-mgmt-servicefabric/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicefabric import ServiceFabricManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceFabricManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Azure environment variables for authentication\nDESCRIPTION: Commands for setting environment variables needed for Azure authentication across different shells, including PowerShell, Windows CMD, and Linux shell.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$env:AZURE_TENANT_ID='<value>'        # PowerShell only\nset AZURE_TENANT_ID=<value>         # Windows CMD (alternatively, use export AZURE_TENANT_ID=<value> to export to the global env)\nexport AZURE_TENANT_ID=<value>      # Linux shell only\n```\n\n----------------------------------------\n\nTITLE: Receiving Single Events from Azure Event Hubs in SDK v5\nDESCRIPTION: Example of how to receive individual events from Azure Event Hubs using the v5 SDK with EventHubConsumerClient and a callback function that processes events one at a time.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Receive\ndef on_event(partition_context, event):\n    print(\"Received event from partition: {}.\" .format(partition_context.partition_id))\n\nconsumer_client = EventHubConsumerClient.from_connection_string(conn_str, consumer_group, eventhub_name=eh_name)\nwith consumer_client:\n    consumer_client.receive(on_event=on_even, partition_id=partition_id)\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Dependencies in Requirements File - Python\nDESCRIPTION: This requirements file enumerates the dependencies for the Azure SDK for Python project, including third-party packages (aiohttp, typing_extensions) with version requirements, a core Azure library reference, and an editable install of custom development tools. It must be processed by pip or compatible tooling to install dependencies. Each entry is a path or package specifier required for the runtime or development environment; relative paths assume the expected directory structure. There is no strict input/output; the file is consumed by package managers. Dependencies must be available in the specified locations or PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../core/azure-core\naiohttp>=3.0\ntyping_extensions>=3.7.2\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Key Vault Operations\nDESCRIPTION: Shows how to set up detailed logging for Azure Key Vault operations using the standard Python logging library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Python Library - Bash\nDESCRIPTION: Installs the azure-identity package to enable AAD authentication with Azure Service Bus in Python. This package provides implementations of TokenCredential required by the ServiceBusClient for role-based authentication. Run this after installing the main Azure Service Bus SDK if you plan on using Azure Active Directory authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Azure Container Registry - Shell\nDESCRIPTION: Pushes the previously built Docker images for Service Fabric applications to the specified Azure Container Registry. The images must be correctly tagged and the user authenticated to ACR. Successful upload allows Service Fabric to access these images for deployment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker push $ACR_NAME.azurecr.io/sfmitestsystem\\ndocker push $ACR_NAME.azurecr.io/sfmitestuser\n```\n\n----------------------------------------\n\nTITLE: Complete Example with Synchronous Client\nDESCRIPTION: This snippet provides a complete example of using a synchronous ExampleClient to send a request and handle the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.example import ExampleClient\nfrom azure.example.rest import build_analyze_text_request\nfrom azure.core.exceptions import HttpResponseError\n\nclient = ExampleClient(\n    endpoint=\"https://example.org\",\n    credential=DefaultAzureCredential()\n)\n\nrequest = build_analyze_text_request(\n    json={\"document\": \"Hello world!\"},\n    language=\"en\",\n)\n\nresponse = client.send_request(request)\n\ntry:\n    response.raise_for_status()\n    json_response = response.json()\n    # Play with your response!\nexcept HttpResponseError:\n    print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Entra ID Environment Variables for Tests (cmd)\nDESCRIPTION: Sets required but unused environment variables (`VISION_TENANT_ID`, `VISION_CLIENT_ID`, `VISION_CLIENT_SECRET`) using the `set` command in the Windows Command Prompt (`cmd`). Although required by the test framework, any value can be assigned as they are not used for live service tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nset VISION_TENANT_ID=not-used\nset VISION_CLIENT_ID=not-used\nset VISION_CLIENT_SECRET=not-used\n```\n\n----------------------------------------\n\nTITLE: Removing Block Items from Azure Content Safety using Python\nDESCRIPTION: This snippet demonstrates the workflow of adding and then removing a block item from a content safety blocklist. It first creates a block item with filtered text, adds it to the specified blocklist, and then demonstrates how to remove it using the RemoveTextBlocklistItemsOptions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import (\n        TextBlocklistItem,\n        AddOrUpdateTextBlocklistItemsOptions,\n        RemoveTextBlocklistItemsOptions,\n    )\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    block_item_text_1 = \"k*ll\"\n\n    try:\n        # Add a blockItem\n        add_result = client.add_or_update_blocklist_items(\n            blocklist_name=blocklist_name,\n            options=AddOrUpdateTextBlocklistItemsOptions(blocklist_items=[TextBlocklistItem(text=block_item_text_1)]),\n        )\n        if not add_result or not add_result.blocklist_items or len(add_result.blocklist_items) <= 0:\n            raise RuntimeError(\"BlockItem not created.\")\n        block_item_id = add_result.blocklist_items[0].blocklist_item_id\n\n        # Remove this blockItem by blockItemId\n        client.remove_blocklist_items(\n            blocklist_name=blocklist_name, options=RemoveTextBlocklistItemsOptions(blocklist_item_ids=[block_item_id])\n        )\n        print(f\"\\nRemoved blockItem: {add_result.blocklist_items[0].blocklist_item_id}\")\n    except HttpResponseError as e:\n        print(\"\\nRemove block item failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Providing Full Chat Request as Python Dictionary to ChatCompletionsClient - Python\nDESCRIPTION: This snippet shows how to send the entire chat request as a Python dictionary to the complete method of the ChatCompletionsClient. This approach supports dynamic request construction without relying on strongly-typed message classes. The request includes an array of messages, each with explicit role and content fields. The output is a response object containing chat completions, mirroring the behavior of using typed messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.complete(\n    {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are an AI assistant that helps people find information. Your replies are short, no more than two sentences.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"What year was construction of the International Space Station mostly done?\",\n            },\n            {\n                \"role\": \"assistant\",\n                \"content\": \"The main construction of the International Space Station (ISS) was completed between 1998 and 2011. During this period, more than 30 flights by US space shuttles and 40 by Russian rockets were conducted to transport components and modules to the station.\",\n            },\n            {\"role\": \"user\", \"content\": \"And what was the estimated cost to build it?\"},\n        ]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Send Request Usage Example\nDESCRIPTION: Demonstrates basic usage of send_request method using ExampleClient with DefaultAzureCredential authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.example.service import ExampleClient\nfrom azure.core.rest import HttpRequest, HttpResponse\nclient = ExampleClient(endpoint=\"https://www.example.org/\", credential=DefaultAzureCredential())\nrequest = HttpRequest(method=\"GET\", url=\"https://www.example.org\")\nrequest\nresponse = client.send_request(request)\nresponse\nresponse.raise_for_status()\nresponse.text()\n'Happy to see you!'\n```\n\n----------------------------------------\n\nTITLE: Issuing or Refreshing a Scoped Access Token for a User - Python\nDESCRIPTION: Demonstrates how to invoke get_token on the CommunicationIdentityClient to issue or refresh a scoped access token for a user, specifying CommunicationTokenScope (e.g., CHAT). Accepts a user object and a list of scopes. Outputs the issued token string; required for accessing Azure Communication Services like chat. Assumes valid identity_client and user.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT])\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n----------------------------------------\n\nTITLE: Uploading Data for Evaluation in Python\nDESCRIPTION: This snippet demonstrates how to upload a data file for evaluation using the Azure AI Projects SDK. It uses the project client to upload a file and obtain a dataset ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndata_id, _ = project_client.upload_file(\"<data_file.jsonl>\")\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Azure Queue Asynchronously\nDESCRIPTION: Sends multiple messages to an Azure Storage Queue using asynchronous client. Messages are sent concurrently using asyncio.gather().\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom azure.storage.queue.aio import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nawait asyncio.gather(\n    queue.send_message(\"I'm using queues!\"),\n    queue.send_message(\"This is my second message\")\n)\n```\n\n----------------------------------------\n\nTITLE: Revoking a User's Access Tokens - Python\nDESCRIPTION: Demonstrates how to invalidate all existing access tokens for a user using revoke_tokens on the CommunicationIdentityClient. This operation requires a valid user object and is essential for enforcing session/logout policies. It does not return a value but ensures previously issued tokens are no longer usable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nidentity_client.revoke_tokens(user)\n```\n\n----------------------------------------\n\nTITLE: Deserializing Event Grid Events (Python)\nDESCRIPTION: Demonstrates how to parse a JSON payload received from Azure Event Grid into a list of strongly-typed `EventGridEvent` objects using the `azure-eventgrid` library. Assumes the `payload` variable contains the raw JSON data from Event Grid. Requires the `azure-eventgrid` and `json` libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Parse the JSON payload into a list of events\nfrom azure.eventgrid import EventGridEvent\nimport json\n\n## deserialize payload into a list of typed Events\nevents = [EventGridEvent.from_json(msg) for msg in payload]\n```\n\n----------------------------------------\n\nTITLE: Updating Key Properties in Azure Key Vault\nDESCRIPTION: This snippet shows how to update the properties of an existing key in Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# we will now disable the key for further use\nupdated_key = key_client.update_key_properties(\"key-name\", enabled=False)\n\nprint(updated_key.name)\nprint(updated_key.properties.enabled)\n```\n\n----------------------------------------\n\nTITLE: Getting a Configuration Setting Asynchronously in Python\nDESCRIPTION: This snippet shows how to retrieve a specific configuration setting asynchronously from Azure App Configuration using the async client. It uses `await` with the `get_configuration_setting` method, passing the setting's `key` and `label`. Requires an initialized async `client` from `azure.appconfiguration.aio`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfetched_config_setting = await client.get_configuration_setting(key=\"MyKey\", label=\"MyLabel\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Datadog Management SDK using DefaultAzureCredential\nDESCRIPTION: Example of authenticating with the Azure Datadog Management SDK using DefaultAzureCredential. This code retrieves the subscription ID from environment variables and creates an authenticated client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datadog/azure-mgmt-datadog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.datadog import MicrosoftDatadogClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftDatadogClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Database Watcher Management Client using DefaultAzureCredential\nDESCRIPTION: Python code that demonstrates how to authenticate with the Database Watcher Management Client using DefaultAzureCredential. This approach relies on environment variables for authentication details and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databasewatcher/azure-mgmt-databasewatcher/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.databasewatcher import DatabaseWatcherMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DatabaseWatcherMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Classes with Variance in Python\nDESCRIPTION: Illustrates best practices for naming and structuring TypeVars for generic classes, particularly with variance (covariant and contravariant). It contrasts vague TypeVar names and demonstrates naming conventions like 'PollingReturnType_co' for public APIs; also shows proper subclassing with typing.Generic. Prerequisites include familiarity with Python generics and typing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar, Generic\\n\\n# No:\\nT = TypeVar(\\\"T\\\", covariant=True)\\n\\nclass LROPoller(Generic[\\\"T\\\"]):\\n    ...\\n\\n# Yes:\\nPollingReturnType_co = TypeVar(\\\"PollingReturnType_co\\\", covariant=True)\\n\\nclass LROPoller(Generic[PollingReturnType_co]):\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing InformaticaDataMgmtClient with DefaultAzureCredential in Python\nDESCRIPTION: Demonstrates how to initialize the `InformaticaDataMgmtClient` for interacting with Azure Informatica Data Management services. It uses `DefaultAzureCredential` from `azure.identity` for authentication, which typically relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`), and retrieves the Azure subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable using `os.getenv`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/informaticadatamanagement/azure-mgmt-informaticadatamanagement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.informaticadatamanagement import InformaticaDataMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = InformaticaDataMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Service Management in Python\nDESCRIPTION: This code initializes the Azure Service Management service by creating a ServiceManagementService object with the subscription ID and path to the client certificate file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicemanagement import ServiceManagementService\nsubscription_id = '00000000-0000-0000-0000-000000000000'\ncert_file = 'mycert.pem'\nsms = ServiceManagementService(subscription_id, cert_file)\n```\n\n----------------------------------------\n\nTITLE: Enabling Sampling with ApplicationInsightsSampler in OpenTelemetry\nDESCRIPTION: This example shows how to enable sampling to limit the amount of telemetry sent to Application Insights. It uses the ApplicationInsightsSampler with a specified sampling rate to control the volume of data exported.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"An example to show an application using the ApplicationInsightsSampler to enable sampling for your telemetry.\nSpecify a sampling rate for the sampler to limit the amount of telemetry records you receive. Custom dependencies\n are tracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.\"\"\"\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom azure.monitor.opentelemetry.exporter import (\n    ApplicationInsightsSampler,\n    AzureMonitorTraceExporter,\n)\n\n# Sampler expects a sample rate of between 0 and 1 inclusive\n# A rate of 0.75 means approximately 75% of your telemetry will be sent\nsampler = ApplicationInsightsSampler(0.75)\ntrace.set_tracer_provider(TracerProvider(sampler=sampler))\ntracer = trace.get_tracer(__name__)\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nspan_processor = BatchSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nfor i in range(100):\n    # Approximately 25% of these spans should be sampled out\n    with tracer.start_as_current_span(\"hello\"):\n        print(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Deferral in Azure Service Bus Python\nDESCRIPTION: Demonstrates how to defer messages in a Service Bus queue using the Azure Service Bus Python SDK. Uses DefaultAzureCredential for authentication and defers messages as they are received.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import ServiceBusClient\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.defer_message(msg)\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientSecretCredential for ADFS Authentication in Python\nDESCRIPTION: Demonstrates how to set up a ClientSecretCredential to work with ADFS authorities by specifying the authority and using \"adfs\" as the tenant ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nClientSecretCredential(authority=\"<your ADFS URI>\", tenant_id=\"adfs\")\n```\n\n----------------------------------------\n\nTITLE: Summarizing Conversations with Azure Conversational Language Understanding\nDESCRIPTION: This snippet demonstrates how to use the SDK to summarize a conversation between an agent and a customer. It extracts both the issue and resolution aspects from the conversation using the ConversationalSummarizationTask.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# import libraries\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n# get secrets\nendpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nkey = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\n# analyze query\nclient = ConversationAnalysisClient(endpoint, AzureKeyCredential(key))\nwith client:\n    poller = client.begin_conversation_analysis(\n        task={\n            \"displayName\": \"Analyze conversations from xxx\",\n            \"analysisInput\": {\n                \"conversations\": [\n                    {\n                        \"conversationItems\": [\n                            {\n                                \"text\": \"Hello, how can I help you?\",\n                                \"modality\": \"text\",\n                                \"id\": \"1\",\n                                \"role\": \"Agent\",\n                                \"participantId\": \"Agent\"\n                            },\n                            {\n                                \"text\": \"How to upgrade Office? I am getting error messages the whole day.\",\n                                \"modality\": \"text\",\n                                \"id\": \"2\",\n                                \"role\": \"Customer\",\n                                \"participantId\": \"Customer\"\n                            },\n                            {\n                                \"text\": \"Press the upgrade button please. Then sign in and follow the instructions.\",\n                                \"modality\": \"text\",\n                                \"id\": \"3\",\n                                \"role\": \"Agent\",\n                                \"participantId\": \"Agent\"\n                            }\n                        ],\n                        \"modality\": \"text\",\n                        \"id\": \"conversation1\",\n                        \"language\": \"en\"\n                    },\n                ]\n            },\n            \"tasks\": [\n                {\n                    \"taskName\": \"Issue task\",\n                    \"kind\": \"ConversationalSummarizationTask\",\n                    \"parameters\": {\n                        \"summaryAspects\": [\"issue\"]\n                    }\n                },\n                {\n                    \"taskName\": \"Resolution task\",\n                    \"kind\": \"ConversationalSummarizationTask\",\n                    \"parameters\": {\n                        \"summaryAspects\": [\"resolution\"]\n                    }\n                },\n            ]\n        }\n    )\n\n    # view result\n    result = poller.result()\n    task_results = result[\"tasks\"][\"items\"]\n    for task in task_results:\n        print(f\"\\n{task['taskName']} status: {task['status']}\")\n        task_result = task[\"results\"]\n        if task_result[\"errors\"]:\n            print(\"... errors occurred ...\")\n            for error in task_result[\"errors\"]:\n                print(error)\n        else:\n            conversation_result = task_result[\"conversations\"][0]\n            if conversation_result[\"warnings\"]:\n                print(\"... view warnings ...\")\n                for warning in conversation_result[\"warnings\"]:\n                    print(warning)\n            else:\n                summaries = conversation_result[\"summaries\"]\n                print(\"... view task result ...\")\n                for summary in summaries:\n                    print(f\"{summary['aspect']}: {summary['text']}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure OpenAI Endpoint in Python\nDESCRIPTION: This code retrieves the default Azure OpenAI endpoint connection details from an Azure AI Foundry project. It's useful for evaluators that require a model supporting chat completion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndefault_connection = project_client.connections.get_default(connection_type=ConnectionType.AZURE_OPEN_AI)\n```\n\n----------------------------------------\n\nTITLE: Running Python Sample Files\nDESCRIPTION: Example command for running a sample Python script for Azure Maps Render operations. Shows how to execute the map tile sample file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_get_map_tile.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating Clients in azure-data-tables\nDESCRIPTION: Shows how to authenticate and create TableServiceClient and TableClient using azure-data-tables with AzureNamedKeyCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureNamedKeyCredential\nfrom azure.data.tables import TableClient, TableServiceClient\n\nkey = os.environ[\"TABLES_ACCOUNT_KEY\"]\nname = os.environ[\"TABLES_ACCOUNT_NAME\"]\nurl = os.environ[\"TABLES_ACCOUNT_URL\"]\n\ncredential = AzureNamedKeyCredential(key=key, name=name)\n\ntable_service_client = TableServiceClient(account_url, credential=credential)\n\ntable_client = TableClient(account_url, \"tablename\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Image Builder Client using DefaultAzureCredential\nDESCRIPTION: Python code snippet demonstrating how to authenticate with the Azure Image Builder Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-imagebuilder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.imagebuilder import ImageBuilderClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ImageBuilderClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Tool Call Accuracy Evaluator - Azure AI SDK - Python\nDESCRIPTION: This snippet initializes the ToolCallAccuracyEvaluator by setting up an AzureOpenAIModelConfiguration using Azure endpoint, API key, API version, and deployment information from environment variables. It demonstrates the required imports and provides an evaluator instance to be used for subsequent accuracy checks. Dependencies are the previously installed Azure AI packages, and the environment variables listed above must be populated prior to execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.evaluation import ToolCallAccuracyEvaluator , AzureOpenAIModelConfiguration\nfrom pprint import pprint\n\nmodel_config = AzureOpenAIModelConfiguration(\n    azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n    api_key=os.environ[\"AZURE_OPENAI_API_KEY\"],\n    api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n)\n\n\ntool_call_accuracy = ToolCallAccuracyEvaluator(model_config=model_config)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dictionary Usage Examples with Azure TextTranslator SDK in Python\nDESCRIPTION: This snippet demonstrates how to retrieve grammatical structure and context examples for a given source-target term pair ('fly' - 'volar') using the Azure TextTranslator SDK. The code requires the 'DictionaryExampleTextItem' for input structure and a configured 'text_translator' client. Parameters 'from_language', 'to_language', and 'input_text_elements' must be specified. The output displays the count of examples and details of the first one. The snippet features exception handling for HttpResponseError, printing error details if the call fails. Ensure models are imported and the service is properly authenticated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    from_language = \\\"en\\\"\\n    to_language = \\\"es\\\"\\n    input_text_elements = [DictionaryExampleTextItem(text=\\\"fly\\\", translation=\\\"volar\\\")]\\n\\n    response = text_translator.lookup_dictionary_examples(\\n        body=input_text_elements, from_language=from_language, to_language=to_language\\n    )\\n    dictionary_entry = response[0] if response else None\\n\\n    if dictionary_entry:\\n        print(f\\\"For the given input {len(dictionary_entry.examples)} entries were found in the dictionary.\\\")\\n        print(\\n            f\\\"First example: '{dictionary_entry.examples[0].target_prefix}{dictionary_entry.examples[0].target_term}{dictionary_entry.examples[0].target_suffix}'.\\\"\\n        )\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\\nraise\n```\n\n----------------------------------------\n\nTITLE: Dead-Lettering a Received Message from Azure Service Bus Queue (Python)\nDESCRIPTION: This snippet demonstrates how to move a received message to the dead-letter sub-queue using `receiver.dead_letter_message()`. This is typically done when a message cannot be processed successfully after multiple attempts or due to inherent errors. Messages in the dead-letter queue can be examined later for diagnosis. Accessing the dead-letter queue requires specifying `sub_queue=ServiceBusSubQueue.DEAD_LETTER` when getting the receiver.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient\nfrom azure.identity import DefaultAzureCredential\n\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.dead_letter_message(msg)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Load Test Configuration\nDESCRIPTION: Demonstrates creating a new load test with configuration settings including engine instances, pass/fail criteria, secrets, and environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.developer.loadtesting import LoadTestAdministrationClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\nimport os\n\nTEST_ID = \"some-test-id\"  \nDISPLAY_NAME = \"my-load-test\"  \n\n# set SUBSCRIPTION_ID as an environment variable\nSUBSCRIPTION_ID = os.environ[\"SUBSCRIPTION_ID\"]  \n\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n\ntry:\n    result = client.create_or_update_test(\n        TEST_ID,\n        {\n            \"description\": \"\",\n            \"displayName\": \"My New Load Test\",\n            \"loadTestConfiguration\": {\n                \"engineInstances\": 1,\n                \"splitAllCSVs\": False,\n            },\n            \"passFailCriteria\": {\n                \"passFailMetrics\": {\n                    \"condition1\": {\n                        \"clientmetric\": \"response_time_ms\",\n                        \"aggregate\": \"avg\",\n                        \"condition\": \">\",\n                        \"value\": 300\n                    },\n                    \"condition2\": {\n                        \"clientmetric\": \"error\",\n                        \"aggregate\": \"percentage\",\n                        \"condition\": \">\",\n                        \"value\": 50\n                    },\n                    \"condition3\": {\n                        \"clientmetric\": \"latency\",\n                        \"aggregate\": \"avg\",\n                        \"condition\": \">\",\n                        \"value\": 200,\n                        \"requestName\": \"GetCustomerDetails\"\n                    }\n                }\n            },\n            \"secrets\": {\n                \"secret1\": {\n                    \"value\": \"https://sdk-testing-keyvault.vault.azure.net/secrets/sdk-secret\",\n                    \"type\": \"AKV_SECRET_URI\"\n                }\n            },\n            \"environmentVariables\": {\n                \"my-variable\": \"value\"\n            }\n        }\n    )\n    print(result)\nexcept HttpResponseError as e:\n     print('Service responded with error: {}'.format(e.response.json()))\n```\n\n----------------------------------------\n\nTITLE: Replacing SIP Trunks and Routes (Python)\nDESCRIPTION: This snippet demonstrates how to replace all existing SIP trunks and routes using the set_trunks and set_routes methods of SipRoutingClient. The new_trunks and new_routes are defined with appropriate FQDNs, ports, route names, regex patterns, and trunk associations. Changes existing configuration entirely; ensure new settings are correct before applying.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nnew_trunks = [SipTrunk(fqdn=\"sbs1.contoso.com\", sip_signaling_port=1122), SipTrunk(fqdn=\"sbs2.contoso.com\", sip_signaling_port=1123)]\nnew_routes = [SipTrunkRoute(name=\"First rule\", description=\"Handle numbers starting with '+123'\", number_pattern=\"\\+123[0-9]+\", trunks=[\"sbs1.sipconfigtest.com\"])]\nsip_routing_client.set_trunks(new_trunks)\nsip_routing_client.set_routes(new_routes)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cancer Profiling Client for Inferring Cancer Attributes\nDESCRIPTION: Python code showing how to initialize the CancerProfilingClient object for inferring cancer attributes from clinical documents. This is part of a complete example for cancer profiling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncancer_profiling_client = CancerProfilingClient(endpoint=ENDPOINT,\n                                                credential=AzureKeyCredential(KEY))\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureMonitorLogExporter with Connection String\nDESCRIPTION: Creates an instance of AzureMonitorLogExporter using an explicit connection string from environment variables for logging telemetry to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Document Intelligence Resource Details in Python\nDESCRIPTION: Retrieves information about the Document Intelligence resource, including the current number of custom models and the maximum limit of custom models allowed for the account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\naccount_details = document_intelligence_admin_client.get_resource_details()\nprint(\n    f\"Our resource has {account_details.custom_document_models.count} custom models, \"\n    f\"and we can have at most {account_details.custom_document_models.limit} custom models\"\n)\n```\n\n----------------------------------------\n\nTITLE: Joining Groups and Subscribing to Group Messages in Python\nDESCRIPTION: Demonstrates how to subscribe to group messages and join a group to receive messages. The client must join a group before it can receive messages from that group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ...continues the code snippet from above\n\n# Registers a listener for the event 'group-message' early before joining a group to not miss messages\ngroup_name = \"group1\";\nclient.subscribe(CallbackType.GROUP_MESSAGE, lambda e: print(f\"Received message: {e.data}\"));\n\n# A client needs to join the group it wishes to receive messages from\nclient.join_group(groupName);\n```\n\n----------------------------------------\n\nTITLE: Enumerating All Connections - Azure AI Projects SDK - Python\nDESCRIPTION: Lists all connection properties available in the Azure AI Foundry project using the connections.list() method of AIProjectClient. Relies on a pre-created project_client. Outputs each connection object retrieved, typically printed to console. No additional parameters required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconnections = project_client.connections.list()\nfor connection in connections:\n    print(connection)\n\n```\n\n----------------------------------------\n\nTITLE: Creating, Connecting to, and Deleting a Dev Box in Azure DevCenter\nDESCRIPTION: This example demonstrates the complete lifecycle of a Dev Box: listing available projects and pools, creating a new Dev Box, connecting to it via a remote connection, and finally deleting it when no longer needed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.developer.devcenter import DevCenterClient\nfrom azure.identity import DefaultAzureCredential\n\n# Set the values of the dev center endpoint, client ID, and client secret of the AAD application as environment variables:\n# DEVCENTER_ENDPOINT, AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET\ntry:\n    endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\nexcept KeyError:\n    raise ValueError(\"Missing environment variable 'DEVCENTER_ENDPOINT' - please set it before running the example\")\n\n# Build a client through AAD\nclient = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n\n# List available Projects\nprojects = client.list_projects()\nif projects:\n    print(\"\\nList of projects: \")\n    for project in projects:\n        print(f\"{project.name}\")\n\n    # Select first project in the list\n    target_project_name = list(projects)[0].name\nelse:\n    raise ValueError(\"Missing Project - please create one before running the example\")\n\n# List available Pools\npools = client.list_pools(target_pool_name)\nif pools:\n    print(\"\\nList of pools: \")\n    for pool in pools:\n        print(f\"{pool.name}\")\n\n    # Select first pool in the list\n    target_pool_name = list(pools)[0].name\nelse:\n    raise ValueError(\"Missing Pool - please create one before running the example\")\n\n# Stand up a new Dev Box\nprint(f\"\\nStarting to create dev box in project {target_project_name} and pool {target_pool_name}\")\n\ndev_box_poller = client.begin_create_dev_box(\n    target_project_name, \"me\", \"Test_DevBox\", {\"poolName\": target_pool_name}\n)\ndev_box = dev_box_poller.result()\nprint(f\"Provisioned dev box with status {dev_box.provisioning_state}.\")\n\n# Connect to the provisioned Dev Box\nremote_connection = client.get_remote_connection(target_project_name, \"me\", dev_box.name)\nprint(f\"Connect to the dev box using web URL {remote_connection.web_url}\")\n\n# Tear down the Dev Box when finished\nprint(f\"Starting to delete dev box.\")\n\ndelete_poller = client.begin_delete_dev_box(target_project_name, \"me\", \"Test_DevBox\")\ndelete_result = delete_poller.result()\nprint(f\"Completed deletion for the dev box with status {delete_result.status}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Load Testing Client\nDESCRIPTION: Python code to authenticate and initialize the Load Testing Management client using DefaultAzureCredential. Requires environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-mgmt-loadtesting/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.loadtesting import LoadTestMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = LoadTestMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure ImpactReporting Management Client Using Azure Identity in Python\nDESCRIPTION: This Python snippet demonstrates how to authenticate the Azure ImpactReporting Management Client using default Azure credentials and a subscription ID taken from the 'AZURE_SUBSCRIPTION_ID' environment variable. Dependencies include the azure-identity and azure-mgmt-impactreporting packages. Required environment variables are 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and optionally 'AZURE_SUBSCRIPTION_ID'. The code initializes the ImpactReportingMgmtClient for subsequent management operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/impactreporting/azure-mgmt-impactreporting/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.impactreporting import ImpactReportingMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ImpactReportingMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure App Platform Management Client with DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates creating an instance of the `AppPlatformManagementClient` using `DefaultAzureCredential` for authentication in Python. It retrieves the Azure subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable. `DefaultAzureCredential` relies on environment variables like `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET` for service principal authentication, or other methods if those are not set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appplatform/azure-mgmt-appplatform/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appplatform import AppPlatformManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AppPlatformManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Handling Different Result Types in Text Analytics\nDESCRIPTION: Shows how to handle different types of analysis results using the kind attribute to distinguish between sentiment analysis and key phrase extraction results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npoller = text_analytics_client.begin_analyze_actions(documents, actions)\nresponse = poller.result()\nfor result in response:\n    if result.kind == \"SentimentAnalysis\":\n        print(f\"Sentiment is {result.sentiment}\")\n    elif result.kind == \"KeyPhraseExtraction\":\n        print(f\"Key phrases: {result.key_phrases}\")\n    elif result.is_error is True:\n        print(f\"Document error: {result.code}, {result.message}\")\n```\n\n----------------------------------------\n\nTITLE: Using Secret Resolver for Key Vault References - Azure App Configuration Python Provider - Python\nDESCRIPTION: Shows how to deploy a custom secret resolver for Key Vault references, bypassing the need for direct Key Vault or credentials. 'secret_resolver' is a callback that takes the URI and returns a resolved value. Useful for local development or testing. Dependencies: 'azure.appconfiguration.provider'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load, AzureAppConfigurationKeyVaultOptions\nfrom azure.identity import DefaultAzureCredential\n\ndef secret_resolver(uri):\n    return \"From Secret Resolver\"\n\nkey_vault_options = AzureAppConfigurationKeyVaultOptions(\n    secret_resolver=secret_resolver)\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), key_vault_options=key_vault_options)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Custom Documents with Azure Form Recognizer 3.1.x (Python)\nDESCRIPTION: This snippet demonstrates how to analyze custom documents using a trained model in Azure Form Recognizer 3.1.x. It processes forms, extracts fields, and analyzes tables, lines, and selection marks on each page.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nwith open(path_to_sample_forms, \"rb\") as f:\n    poller = form_recognizer_client.begin_recognize_custom_forms(\n        model_id=model_id, form=f, include_field_elements=True\n    )\nforms = poller.result()\n\nfor idx, form in enumerate(forms):\n    print(\"--------Recognizing Form #{}--------\".format(idx+1))\n    print(\"Form has type {}\".format(form.form_type))\n    print(\"Form has form type confidence {}\".format(form.form_type_confidence))\n    print(\"Form was analyzed with model with ID {}\".format(form.model_id))\n    for name, field in form.fields.items():\n        # each field is of type FormField\n        # label_data is populated if you are using a model trained without labels,\n        # since the service needs to make predictions for labels if not explicitly given to it.\n        if field.label_data:\n            print(\"...Field '{}' has label '{}' with a confidence score of {}\".format(\n                name,\n                field.label_data.text,\n                field.confidence\n            ))\n\n        print(\"...Label '{}' has value '{}' with a confidence score of {}\".format(\n            field.label_data.text if field.label_data else name, field.value, field.confidence\n        ))\n\n    # iterate over tables, lines, and selection marks on each page\n    for page in form.pages:\n        for i, table in enumerate(page.tables):\n            print(\"\\nTable {} on page {}\".format(i+1, table.page_number))\n            for cell in table.cells:\n                print(\"...Cell[{}][{}] has text '{}' with confidence {}\".format(\n                    cell.row_index, cell.column_index, cell.text, cell.confidence\n                ))\n        print(\"\\nLines found on page {}\".format(page.page_number))\n        for line in page.lines:\n            print(\"...Line '{}' is made up of the following words: \".format(line.text))\n            for word in line.words:\n                print(\"......Word '{}' has a confidence of {}\".format(\n                    word.text,\n                    word.confidence\n                ))\n        if page.selection_marks:\n            print(\"\\nSelection marks found on page {}\".format(page.page_number))\n            for selection_mark in page.selection_marks:\n                print(\"......Selection mark is '{}' and has a confidence of {}\".format(\n                    selection_mark.state,\n                    selection_mark.confidence\n                ))\n\n    print(\"-----------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing DevSpacesManagementClient in Python\nDESCRIPTION: This code demonstrates how to authenticate and initialize the DevSpacesManagementClient using DefaultAzureCredential. It requires the AZURE_SUBSCRIPTION_ID environment variable to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/aks/azure-mgmt-devspaces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devspaces import DevSpacesManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevSpacesManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Single Operations in Azure Key Vault\nDESCRIPTION: Shows how to enable detailed logging for a single operation using the logging_enable parameter, even when logging is not enabled for the entire client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsecret_client.get_secret(\"my-secret\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Cache Persistence in Python\nDESCRIPTION: Demonstrates how to configure token cache persistence for DeviceCodeCredential using the TokenCachePersistenceOptions class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# before (e.g. in 1.6.0b1):\nDeviceCodeCredential(enable_persistent_cache=True, allow_unencrypted_cache=True)\n\n# after:\ncache_options = TokenCachePersistenceOptions(allow_unencrypted_storage=True)\nDeviceCodeCredential(cache_persistence_options=cache_options)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for T1 Legacy Performance Tests\nDESCRIPTION: Installs the necessary dependencies for running T1 (legacy) SDK performance tests, including dev requirements and specific T1 test requirements.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share> pip install -r dev_requirements.txt\n(env) ~/azure-storage-file-share> pip install tests/perfstress_tests/T1_legacy_tests/t1_test_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling DEBUG Logging for a Single SDK Method Call in Python\nDESCRIPTION: This snippet demonstrates enabling detailed DEBUG logging for a specific Azure SDK client method call (e.g., `create_or_update_test`) by passing the `logging_enable=True` argument directly to the method. This allows for targeted debugging for a single operation without enabling verbose logging for the entire client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.create_or_update_test(..., logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Auto-detecting Language while Finding Sentence Boundaries with Azure Translator\nDESCRIPTION: Demonstrates how to use Azure Translator Text API to automatically detect the language of input text while finding sentence boundaries. This example omits the language parameter, allowing the API to perform language auto-detection.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    input_text_elements = [\"This is a test. This is the second sentence.\"]\n\n    response = text_translator.find_sentence_boundaries(body=input_text_elements)\n    sentence_boundaries = response[0] if response else None\n\n    if sentence_boundaries:\n        detected_language = sentence_boundaries.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        print(f\"The detected sentence boundaries:\")\n        for boundary in sentence_boundaries.sent_len:\n            print(boundary)\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating Event Hub Management Client - Azure SDK for Python\nDESCRIPTION: This Python snippet shows how to authenticate the EventHubManagementClient using environment variables and Azure Identity. It imports the required modules, reads the Azure subscription ID from the environment, and creates an authenticated client using the DefaultAzureCredential. Required dependencies are 'azure-identity' and 'azure-mgmt-eventhub'. Environment variables 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and 'AZURE_SUBSCRIPTION_ID' must be set. The client object is ready for use in resource management operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-mgmt-eventhub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.eventhub import EventHubManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EventHubManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating an Asyncio Sample in Python for Azure SDK\nDESCRIPTION: This snippet demonstrates how to create an asynchronous pipeline using AsyncioRequestsTransport in Azure SDK for Python. It shows the proper way to annotate the beginning and end of a code snippet for documentation purposes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/code_snippets.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# [START asyncio]\nfrom azure.core.pipeline.transport import AsyncioRequestsTransport\n\nasync with AsyncPipeline(AsyncioRequestsTransport(), policies=policies) as pipeline:\n    response = await pipeline.run(request)\n# [END asyncio]\n```\n\n----------------------------------------\n\nTITLE: Creating Certificates Asynchronously in Azure Key Vault\nDESCRIPTION: Shows how to asynchronously create a certificate in Azure Key Vault using the CertificateClient. Uses default certificate policy and demonstrates handling the creation response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\nfrom azure.keyvault.certificates import CertificatePolicy\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncreate_certificate_result = await certificate_client.create_certificate(\n    certificate_name=\"cert-name\", policy=CertificatePolicy.get_default()\n)\nprint(create_certificate_result)\n```\n\n----------------------------------------\n\nTITLE: Initializing CertificateCredential from File Path in Python\nDESCRIPTION: Demonstrates how to instantiate the `CertificateCredential` by providing the tenant ID, client ID, and the file path to a certificate file (e.g., .pfx). This is a common way to load certificate credentials from disk.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/client_certificate_credential.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\ncredential = CertificateCredential(tenant_id, client_id, \"./certs/cert.pfx\")\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Region Support with Preferred Locations\nDESCRIPTION: Python code demonstrating how to configure preferred read regions for a Cosmos DB client to enable multi-region support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY, preferred_locations=[\"West US\", \"Central US\"])\n```\n\n----------------------------------------\n\nTITLE: Handling HttpResponseError in Azure Form Recognizer Python SDK\nDESCRIPTION: Example of how to catch and handle HttpResponseError exceptions when using the Azure Form Recognizer client library. This pattern allows graceful error handling when document analysis operations fail.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-document\", document=f\n    )\n    result = poller.result()\n    # process request result\nexcept HttpResponseError as error:\n    # handle the error here\n```\n\n----------------------------------------\n\nTITLE: Authenticating MapsSearchClient using SAS Token - Python\nDESCRIPTION: This snippet demonstrates initializing MapsSearchClient with an AzureSASCredential, which uses a previously generated SAS token. The Azure SAS token is read from the 'AZURE_SAS_TOKEN' environment variable. It requires 'azure.core.credentials' and 'azure.maps.search' packages, and the authenticated client is ready to perform Azure Maps Search operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureSASCredential\nfrom azure.maps.search import MapsSearchClient\n\ncredential = AzureSASCredential(os.environ.get(\"AZURE_SAS_TOKEN\"))\n\nsearch_client = MapsSearchClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Configuration Setting by Key and Label in Python\nDESCRIPTION: This snippet fetches a configuration setting from the store by specifying key and label arguments to client.get_configuration_setting. It returns a ConfigurationSetting object with all metadata. Requires that the client is authenticated and the setting already exists.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfetched_config_setting = client.get_configuration_setting(key=\"MyKey\", label=\"MyLabel\")\n```\n\n----------------------------------------\n\nTITLE: Initializing FabricMgmtClient with DefaultAzureCredential in Python\nDESCRIPTION: Demonstrates how to initialize the `FabricMgmtClient` for interacting with Azure Fabric Management. It imports `DefaultAzureCredential` from `azure.identity` for authentication and `FabricMgmtClient` from `azure.mgmt.fabric`. The script retrieves the Azure Subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable using the `os` module and uses it along with the credential to create the client instance. This setup assumes environment variables `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET` are configured for `DefaultAzureCredential`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/fabric/azure-mgmt-fabric/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.fabric import FabricMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = FabricMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Listing Document Intelligence Models in Python\nDESCRIPTION: Retrieves and displays a list of all custom models that are in the 'ready' state, showing their IDs and descriptions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Next, we get a paged list of all of our custom models\nmodels = document_intelligence_admin_client.list_models()\n\nprint(\"We have the following 'ready' models with IDs and descriptions:\")\nfor model in models:\n    print(f\"{model.model_id} | {model.description}\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Custom Documents with Azure Form Recognizer 3.2.x (Python)\nDESCRIPTION: This snippet shows how to analyze custom documents using a trained model in Azure Form Recognizer 3.2.x. It processes documents, extracts fields, and provides confidence scores for each field.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Make sure your document's type is included in the list of document types the custom model can analyze\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        model_id=model_id, document=f\n    )\nresult = poller.result()\n\nfor idx, document in enumerate(result.documents):\n    print(\"--------Analyzing document #{}--------\".format(idx + 1))\n    print(\"Document has type {}\".format(document.doc_type))\n    print(\"Document has confidence {}\".format(document.confidence))\n    print(\"Document was analyzed by model with ID {}\".format(result.model_id))\n    for name, field in document.fields.items():\n        field_value = field.value if field.value else field.content\n        print(\"......found field of type '{}' with value '{}' and with confidence {}\".format(field.value_type, field_value, field.confidence))\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Front Door Service Client in Python\nDESCRIPTION: Authenticate the Azure Front Door Management Client using DefaultAzureCredential. This snippet demonstrates how to create a client instance using environment variables for authentication and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.frontdoor import FrontDoorManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = FrontDoorManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Maps Render SDK in Python\nDESCRIPTION: Sets up detailed DEBUG level logging for the Azure Maps Render client. This configuration enables logging HTTP session details including request/response bodies and headers to console output, which is useful for troubleshooting API interactions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.maps.render import MapsRenderClient\n\n# Create a logger for the 'azure.maps.render' SDK\nlogger = logging.getLogger('azure.maps.render')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Using Typing Extensions for Backward Compatibility\nDESCRIPTION: Shows how to use typing-extensions to access newer typing features while maintaining compatibility with older Python versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# from typing import TypedDict Python >3.8\nfrom typing_extensions import TypedDict\n```\n\n----------------------------------------\n\nTITLE: Multi-Slot Personalization Implementation\nDESCRIPTION: Example demonstrating multi-slot personalization implementation using PersonalizerClient. Shows how to rank actions for multiple slots and send slot-specific rewards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.personalizer import PersonalizerClient\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = \"https://<my-personalizer-instance>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\n\nclient = PersonalizerClient(endpoint, credential)\n\n# We want to rank the actions for two slots.\nslots = [\n    {\n        \"id\": \"Main Article\",\n        \"baselineAction\": \"NewsArticle\",\n        \"positionFeatures\": [{\"Size\": \"Large\", \"Position\": \"Top Middle\"}],\n    },\n    {\n        \"id\": \"Side Bar\",\n        \"baselineAction\": \"SportsArticle\",\n        \"positionFeatures\": [{\"Size\": \"Small\", \"Position\": \"Bottom Right\"}],\n    },\n]\n\n# The list of actions to be ranked with metadata associated for each action.\nactions = [\n    {\"id\": \"NewsArticle\", \"features\": [{\"type\": \"News\"}]},\n    {\"id\": \"SportsArticle\", \"features\": [{\"type\": \"Sports\"}]},\n    {\"id\": \"EntertainmentArticle\", \"features\": [{\"type\": \"Entertainment\"}]},\n]\n\n# Context of the user to which the action must be presented.\ncontext_features = [\n    {\"user\": {\"profileType\": \"AnonymousUser\", \"latLong\": \"47.6,-122.1\"}},\n    {\"environment\": {\"dayOfMonth\": \"28\", \"monthOfYear\": \"8\", \"weather\": \"Sunny\"}},\n    {\"device\": {\"mobile\": True, \"windows\": True}},\n    {\"recentActivity\": {\"itemsInCart\": 3}},\n]\n\nrequest = {\n    \"slots\": slots,\n    \"actions\": actions,\n    \"contextFeatures\": context_features,\n}\nrank_response = client.rank_multi_slot(request)\nprint(\"Sending reward event for Main Article slot\")\nclient.reward_multi_slot(\n    rank_response.get(\"eventId\"),\n    {\"reward\": [{\"slotId\": \"Main Article\", \"value\": 1.0}]})\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue-Triggered Azure Function\nDESCRIPTION: Example of an Azure Function that processes queue messages, handles weather information requests, and sends responses back through an output queue. Includes correlation ID handling and error management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport azure.functions as func\nimport logging\nimport json\n\napp = func.FunctionApp()\n\n@app.get_weather(arg_name=\"inputQueue\",\n                   queue_name=\"input\",\n                   connection=\"AzureWebJobsStorage\")\n@app.queue_output(arg_name=\"outputQueue\",\n                  queue_name=\"output\",\n                  connection=\"AzureWebJobsStorage\")\ndef get_weather(inputQueue: func.QueueMessage, outputQueue: func.Out[str]):\n    try:\n        messagepayload = json.loads(inputQueue.get_body().decode(\"utf-8\"))\n        location = messagepayload[\"location\"]\n        weather_result = f\"Weather is 82 degrees and sunny in {location}.\"\n\n        response_message = {\n            \"Value\": weather_result,\n            \"CorrelationId\": messagepayload[\"CorrelationId\"]\n        }\n\n        outputQueue.set(json.dumps(response_message))\n\n        logging.info(f\"Sent message to output queue with message {response_message}\")\n    except Exception as e:\n        logging.error(f\"Error processing message: {e}\")\n        return\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Nginx Management Client Library and Azure Identity\nDESCRIPTION: This snippet shows how to install the required packages using pip. It installs the Azure Nginx Management Client Library and Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-nginx\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating a Radiology Insights Analysis Request (Python)\nDESCRIPTION: Constructs a RadiologyInsightsJob object needed to start an analysis. It involves creating detailed patient records including patient demographics (sex, birth date), encounter information, and patient documents (report content, type, creation date, author). Model configuration options like verbosity, evidence inclusion, and locale are also set. Requires the `azure.healthinsights.radiologyinsights.models` module and `datetime`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc_content1 = \"\"\"CLINICAL HISTORY:   \n        20-year-old female presenting with abdominal pain. Surgical history significant for appendectomy.\n        COMPARISON:   \n        Right upper quadrant sonographic performed 1 day prior.\n        TECHNIQUE:   \n        Transabdominal grayscale pelvic sonography with duplex color Doppler and spectral waveform analysis of the ovaries.\n        FINDINGS:   \n        The uterus is unremarkable given the transabdominal technique with endometrial echo complex within physiologic normal limits. The ovaries are symmetric in size, measuring 2.5 x 1.2 x 3.0 cm and the left measuring 2.8 x 1.5 x 1.9 cm.\\n On duplex imaging, Doppler signal is symmetric.\n        IMPRESSION:   \n        1. Normal pelvic sonography. Findings of testicular torsion.\n        A new US pelvis within the next 6 months is recommended.\n        These results have been discussed with Dr. Jones at 3 PM on November 5 2020.\"\"\"\n\n# Create ordered procedure\nprocedure_coding = models.Coding(\n    system=\"Http://hl7.org/fhir/ValueSet/cpt-all\",\n    code=\"USPELVIS\",\n    display=\"US PELVIS COMPLETE\",\n)\nprocedure_code = models.CodeableConcept(coding=[procedure_coding])\nordered_procedure = models.OrderedProcedure(description=\"US PELVIS COMPLETE\", code=procedure_code)\n# Create encounter\nstart = datetime.datetime(2021, 8, 28, 0, 0, 0, 0)\nend = datetime.datetime(2021, 8, 28, 0, 0, 0, 0)\nencounter = models.PatientEncounter(\n    id=\"encounter2\",\n    class_property=models.EncounterClass.IN_PATIENT,\n    period=models.TimePeriod(start=start, end=end),\n)\n# Create patient info\nbirth_date = datetime.date(1959, 11, 11)\npatient_info = models.PatientDetails(sex=models.PatientSex.FEMALE, birth_date=birth_date)\n# Create author\nauthor = models.DocumentAuthor(id=\"author2\", full_name=\"authorName2\")\n\ncreate_date_time = datetime.datetime(2024, 2, 19, 0, 0, 0, 0, tzinfo=datetime.timezone.utc)\npatient_document1 = models.PatientDocument(\n    type=models.DocumentType.NOTE,\n    clinical_type=models.ClinicalDocumentType.RADIOLOGY_REPORT,\n    id=\"doc2\",\n    content=models.DocumentContent(source_type=models.DocumentContentSourceType.INLINE, value=doc_content1),\n    created_at=create_date_time,\n    specialty_type=models.SpecialtyType.RADIOLOGY,\n    administrative_metadata=models.DocumentAdministrativeMetadata(\n        ordered_procedures=[ordered_procedure], encounter_id=\"encounter2\"\n        ),\n    authors=[author],\n    language=\"en\",\n)\n\n# Construct patient\npatient1 = models.PatientRecord(\n    id=\"patient_id2\",\n    details=patient_info,\n    encounters=[encounter],\n    patient_documents=[patient_document1],\n)\n\n# Create a configuration\nconfiguration = models.RadiologyInsightsModelConfiguration(verbose=False, include_evidence=True, locale=\"en-US\")\n\n# Construct the request with the patient and configuration\npatient_data = models.RadiologyInsightsJob(job_data=models.RadiologyInsightsData(patients=[patient1], configuration=configuration))\n```\n\n----------------------------------------\n\nTITLE: Creating Digital Twins in Azure using Python\nDESCRIPTION: This snippet shows how to create a digital twin instance using the Azure Digital Twins SDK. It creates a new twin with a unique ID and sets initial properties based on a predefined model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/01_Patrons.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndigital_twin_id = 'customer-' + str(uuid.uuid4())\n\ncustomer_json = {\n    \"$metadata\": {\n        \"$model\": patron_model_id\n    },\n    \"satisfaction\": 10,\n    \"totalWaitTime\": 10\n}\n\ncreated_twin = service_client.upsert_digital_twin(digital_twin_id, customer_json)\n```\n\n----------------------------------------\n\nTITLE: Listing Read Receipts in Azure Communication Chat SDK for Python\nDESCRIPTION: This code demonstrates how to retrieve and process read receipts for a chat thread using the list_read_receipts method. It shows how to set pagination parameters and access properties of the read receipt objects including sender, message ID, and timestamp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nread_receipts = chat_thread_client.list_read_receipts(results_per_page=5, skip=5)\n\nfor read_receipt_page in read_receipts.by_page():\n    for read_receipt in read_receipt_page:\n        print(read_receipt)\n        print(read_receipt.sender)\n        print(read_receipt.chat_message_id)\n        print(read_receipt.read_on)\n```\n\n----------------------------------------\n\nTITLE: Listing Rendering Sessions in Azure Remote Rendering with Python\nDESCRIPTION: This snippet demonstrates how to retrieve and display information about all rendering sessions using the list_rendering_sessions method. It prints details such as session ID, status, and creation time for each session.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    print(\"sessions:\")\n    rendering_sessions = client.list_rendering_sessions()\n    for session in rendering_sessions:\n        print(\n            \"\\t session:  id:\",\n            session.id,\n            \"status:\",\n            session.status,\n            \"created on:\",\n            session.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        )\n```\n\n----------------------------------------\n\nTITLE: Authenticating Runtime Client with DefaultAzureCredential (New QnA SDK) in Python\nDESCRIPTION: Illustrates authenticating the `QuestionAnsweringClient` from the modern `azure-ai-language-questionanswering` library using `DefaultAzureCredential` from the `azure-identity` library. This method supports various authentication mechanisms based on the environment (e.g., environment variables, managed identity). Requires the Azure Cognitive Services endpoint URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nclient = QuestionAnsweringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=DefaultAzureCredential()\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing HybridComputeManagementClient - Azure SDK for Python\nDESCRIPTION: Demonstrates authenticating with Azure using DefaultAzureCredential and initializing HybridComputeManagementClient with your Azure Subscription ID. This example assumes required environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`, and `AZURE_SUBSCRIPTION_ID`) are set. The code initializes the client, which is then ready to make resource management calls; proper configuration of Azure identity is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridcompute/azure-mgmt-hybridcompute/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridcompute import HybridComputeManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HybridComputeManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HttpRequest\nDESCRIPTION: This snippet demonstrates how to create a custom HttpRequest for more advanced scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.example.core.rest import HttpRequest\n\n# this URL is relative to the endpoint we passed our client\nrequest = HttpRequest(\"POST\", \"/helloWorld\",\n    json={\"document\": \"Hello world!\"},\n    params={\"language\": \"en\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Thread with Participants and Idempotency\nDESCRIPTION: Creates a chat thread with initial participants and idempotency token, also demonstrating error handling for participant addition failures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.chat import ChatParticipant, ChatClient, CommunicationTokenCredential\nimport uuid\nfrom datetime import datetime\n\n# create an user\nidentity_client = CommunicationIdentityClient.from_connection_string('<connection_string>')\nuser = identity_client.create_user()\n\n# user access tokens\ntokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\ntoken = tokenresponse.token\n\n## OR pass existing user\n# from azure.communication.chat import CommunicationUserIdentifier\n# user_id = 'some_user_id'\n# user = CommunicationUserIdentifier(user_id)\n\n# create the chat_client\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n# modify function to implement customer logic\ndef get_unique_identifier_for_request(**kwargs):\n    res = uuid.uuid4()\n    return res\n\ntopic = \"test topic\"\nthread_participants = [ChatParticipant(\n    identifier=user,\n    display_name='name',\n    share_history_time=datetime.utcnow()\n)]\n\n# obtains idempotency_token using some customer logic\nidempotency_token = get_unique_identifier_for_request()\n\ncreate_chat_thread_result = chat_client.create_chat_thread(\n    topic,\n    thread_participants=thread_participants,\n    idempotency_token=idempotency_token)\nthread_id = create_chat_thread_result.chat_thread.id\n\n# fetch ChatThreadClient\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\n# Additionally, you can also check if all participants were successfully added or not\n# and subsequently retry adding the failed participants again\ndef decide_to_retry(error, **kwargs):\n    \"\"\"\n    Insert some custom logic to decide if retry is applicable based on error\n    \"\"\"\n    return True\n\nretry = [thread_participant for thread_participant, error in create_chat_thread_result.errors if decide_to_retry(error)]\nif retry:\n    chat_thread_client.add_participants(retry)\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Trace Logging for Single Operations\nDESCRIPTION: Shows how to enable network trace logging for individual certificate operations in Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncertificate = certificate_client.get_certificate(certificate_name=\"cert-name\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating an Azure Digital Twins Event Route in Python\nDESCRIPTION: This snippet demonstrates creating or updating an event route in Azure Digital Twins. It generates a unique event route ID using `uuid`, defines an event filter string, creates a `DigitalTwinsEventRoute` object specifying the target endpoint name and the filter, and then calls `upsert_event_route` on the service client with the ID and route object. Dependencies include the `uuid` library and the `DigitalTwinsEventRoute` class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_scenario\nimport uuid\nfrom azure.digitaltwins.core import DigitalTwinsEventRoute # Assuming import\n\nevent_route_id = 'eventRoute-' + str(uuid.uuid4())\nevent_filter = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\"\nroute = DigitalTwinsEventRoute(\n    endpoint_name=event_hub_endpoint_name,\n    filter=event_filter\n)\nservice_client.upsert_event_route(event_route_id, route)\n```\n```\n\n----------------------------------------\n\nTITLE: Registering a General Regex Sanitizer with the Test Proxy in Python\nDESCRIPTION: This example shows how to add a regex-based sanitizer to automatically replace storage endpoint account names in URIs throughout test proxy recordings. The regex identifies account names in various Azure Table, Blob, and Queue storage endpoints and replaces them with a fake value ('fakeendpoint'). Requires devtools_testutils and can be placed in pytest fixtures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nadd_general_regex_sanitizer(\n    regex=\"(?<=\\\\/\\\\/)[a-z]+(?=(?:|-secondary)\\\\.(?:table|blob|queue)\\\\.core\\\\.windows\\\\.net)\",\n    value=\"fakeendpoint\",\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing ServiceNetworkingMgmtClient in Python\nDESCRIPTION: Demonstrates how to authenticate and initialize the ServiceNetworkingMgmtClient using DefaultAzureCredential. It requires environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET for the credential and AZURE_SUBSCRIPTION_ID for the client initialization. The resulting client object can be used to interact with the Azure Service Networking management plane.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicenetworking/azure-mgmt-servicenetworking/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicenetworking import ServiceNetworkingMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceNetworkingMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Querying Supported Languages - Azure Text Translator - Python\nDESCRIPTION: This snippet shows how to retrieve and display supported languages for translation, transliteration, and dictionary operations using the Azure Text Translator SDK in Python. You optionally specify a BCP 47 language tag (shown: 'es') to localize the returned language names. The code handles exceptions using HttpResponseError and extracts language lists from the API response. Inputs: accept_language parameter. Outputs: printed information about language support. Requires an initialized text_translator client and Azure SDK dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    accept_language = \\\"es\\\"\\n    response = text_translator.get_supported_languages(accept_language=accept_language)\\n\\n    print(\\n        f\\\"Number of supported languages for translate operation: {len(response.translation) if response.translation is not None else 0}\\\"\\n    )\\n    print(\\n        f\\\"Number of supported languages for transliterate operation: {len(response.transliteration) if response.transliteration is not None else 0}\\\"\\n    )\\n    print(\\n        f\\\"Number of supported languages for dictionary operations: {len(response.dictionary) if response.dictionary is not None else 0}\\\"\\n    )\\n\\n    if response.translation is not None:\\n        print(\\\"Translation Languages:\\\")\\n        for key, value in response.translation.items():\\n            print(f\\\"{key} -- name: {value.name} ({value.native_name})\\\")\\n\\n    if response.transliteration is not None:\\n        print(\\\"Transliteration Languages:\\\")\\n        for key, value in response.transliteration.items():\\n            print(f\\\"{key} -- name: {value.name}, supported script count: {len(value.scripts)}\\\")\\n\\n    if response.dictionary is not None:\\n        print(\\\"Dictionary Languages:\\\")\\n        for key, value in response.dictionary.items():\\n            print(f\\\"{key} -- name: {value.name}, supported target languages count: {len(value.translations)}\\\")\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\\n    raise\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships Between Digital Twins in Python\nDESCRIPTION: Demonstrates how to create relationships between digital twins, specifically connecting a ticket to a customer who purchased it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/02_Purchasing_Tickets.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntickethoder_relationship = {\n        \"$relationshipId\": f\"{customer_selection}ownedBy{user}\",\n        \"$sourceId\": customer_selection,\n        \"$relationshipName\": \"ownedBy\",\n        \"$targetId\": user,\n        \"bought_online\": True\n    }\n\nservice_client.upsert_relationship(\n        tickethoder_relationship[\"$sourceId\"],\n        tickethoder_relationship[\"$relationshipId\"],\n        tickethoder_relationship\n    )\n```\n\n----------------------------------------\n\nTITLE: Using AvroEncoder to encode data (New)\nDESCRIPTION: Example showing how to use the new AvroEncoder class to encode dictionary data into Avro format with schema. The new API returns a TypedDict with content and content_type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith encoder:\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    message_content_ben = encoder.encode(content=dict_content, schema=SCHEMA_STRING)\n    print(message_content_ben)  # prints {\"content\": <Avro-encoded content>, \"content_type\": \"<Avro MIME type>+<Schema ID>\"}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Translator with Category ID\nDESCRIPTION: Shows how to use a custom translation system with a specific Category ID. Includes fallback options for when custom systems are unavailable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    category = \"<<Category ID>>\"\n    to_language = [\"cs\"]\n    input_text_elements = [\"This is a test\"]\n\n    response = text_translator.translate(body=input_text_elements, to_language=to_language, category=category)\n    translation = response[0] if response else None\n\n    if translation:\n        detected_language = translation.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Complex Message-Based Interactions\nDESCRIPTION: Shows how to evaluate complex conversational interactions using structured messages, including system messages, user queries, and tool-assisted responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/intent_resolution.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery = [\n    {\n        \"role\": \"system\",\n        \"content\": \"You are a friendly and helpful customer service agent.\"\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:14:20Z\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"Hi, I need help with the last 2 orders on my account #888. Could you please update me on their status?\"\n            }\n        ]\n    }\n]\n\nresponse = [\n    {\n        \"createdAt\": \"2025-03-14T06:14:30Z\",\n        \"run_id\": \"0\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"Hello! Let me quickly look up your account details.\"\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:14:35Z\",\n        \"run_id\": \"0\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"tool_call\",\n                \"tool_call_id\": \"tool_call_20250310_001\",\n                \"name\": \"get_orders\",\n                \"arguments\": {\n                    \"account_number\": \"888\"\n                }\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:14:40Z\",\n        \"run_id\": \"0\",\n        \"tool_call_id\": \"tool_call_20250310_001\",\n        \"role\": \"tool\",\n        \"content\": [\n            {\n                \"type\": \"tool_result\",\n                \"tool_result\": \"[{ \\\"order_id\\\": \\\"123\\\" }, { \\\"order_id\\\": \\\"124\\\" }]\"\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:14:45Z\",\n        \"run_id\": \"0\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"Thanks for your patience. I see two orders on your account. Let me fetch the details for both.\"\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:14:50Z\",\n        \"run_id\": \"0\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"tool_call\",\n                \"tool_call_id\": \"tool_call_20250310_002\",\n                \"name\": \"get_order\",\n                \"arguments\": {\n                    \"order_id\": \"123\"\n                }\n            },\n            {\n                \"type\": \"tool_call\",\n                \"tool_call_id\": \"tool_call_20250310_003\",\n                \"name\": \"get_order\",\n                \"arguments\": {\n                    \"order_id\": \"124\"\n                }\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:14:55Z\",\n        \"run_id\": \"0\",\n        \"tool_call_id\": \"tool_call_20250310_002\",\n        \"role\": \"tool\",\n        \"content\": [\n            {\n                \"type\": \"tool_result\",\n                \"tool_result\": \"{ \\\"order\\\": { \\\"id\\\": \\\"123\\\", \\\"status\\\": \\\"shipped\\\", \\\"delivery_date\\\": \\\"2025-03-15\\\" } }\"\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:15:00Z\",\n        \"run_id\": \"0\",\n        \"tool_call_id\": \"tool_call_20250310_003\",\n        \"role\": \"tool\",\n        \"content\": [\n            {\n                \"type\": \"tool_result\",\n                \"tool_result\": \"{ \\\"order\\\": { \\\"id\\\": \\\"124\\\", \\\"status\\\": \\\"delayed\\\", \\\"expected_delivery\\\": \\\"2025-03-20\\\" } }\"\n            }\n        ]\n    },\n    {\n        \"createdAt\": \"2025-03-14T06:15:05Z\",\n        \"run_id\": \"0\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"The order with ID 123 has been shipped and is expected to be delivered on March 15, 2025. However, the order with ID 124 is delayed and should now arrive by March 20, 2025. Is there anything else I can help you with?\"\n            }\n        ]\n    }\n]\n\ntool_definitions = [\n    {\n        \"name\": \"get_orders\",\n        \"description\": \"Get the list of orders for a given account number.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"account_number\": {\n                    \"type\": \"string\",\n                    \"description\": \"The account number to get the orders for.\"\n                }\n            }\n        }\n    },\n    {\n        \"name\": \"get_order\",\n        \"description\": \"Get the details of a specific order.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"order_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The order ID to get the details for.\"\n                }\n            }\n        }\n    },\n    {\n        \"name\": \"initiate_return\",\n        \"description\": \"Initiate the return process for an order.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"order_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The order ID for the return process.\"\n                }\n            }\n        }\n    },\n    {\n        \"name\": \"update_shipping_address\",\n        \"description\": \"Update the shipping address for a given account.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"account_number\": {\n                    \"type\": \"string\",\n                    \"description\": \"The account number to update.\"\n                },\n                \"new_address\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new shipping address.\"\n                }\n            }\n        }\n    }\n]\n\nresult = intent_resolution_evaluator(query            = query,\n                                     response         = response,\n                                     tool_definitions = tool_definitions,\n                                    )\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory using DefaultAzureCredential\nDESCRIPTION: Code snippet demonstrating how to authenticate with Azure services using environment variables and the DefaultAzureCredential. Creates a HealthDataAIServicesMgmtClient instance with proper authentication for accessing resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-mgmt-healthdataaiservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.healthdataaiservices import HealthDataAIServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HealthDataAIServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing BareMetalInfrastructureClient with DefaultAzureCredential in Python\nDESCRIPTION: This Python code demonstrates initializing the `BareMetalInfrastructureClient` for interacting with the Azure Bare Metal Infrastructure service. It utilizes `DefaultAzureCredential` from the `azure-identity` library for authentication, which relies on environment variables like `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET`. The subscription ID is fetched from the `AZURE_SUBSCRIPTION_ID` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/baremetalinfrastructure/azure-mgmt-baremetalinfrastructure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.baremetalinfrastructure import BareMetalInfrastructureClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = BareMetalInfrastructureClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Azure Fleet Management Release History\nDESCRIPTION: Markdown formatted release history documenting version changes, features added, and breaking changes across multiple SDK versions from 1.0.0b1 to 3.1.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservicefleet/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.1.0 (2025-04-10)\n\n### Features Added\n\n  - Client `ContainerServiceFleetMgmtClient` added operation group `auto_upgrade_profiles`\n  - Client `ContainerServiceFleetMgmtClient` added operation group `auto_upgrade_profile_operations`\n  - Model `APIServerAccessProfile` added property `enable_vnet_integration`\n  - Model `APIServerAccessProfile` added property `subnet_id`\n  - Model `Fleet` added property `status`\n  - Model `FleetMember` added property `status`\n  - Model `NodeImageSelection` added property `custom_node_image_versions`\n  - Enum `NodeImageSelectionType` added member `CUSTOM`\n  - Model `UpdateRun` added property `auto_upgrade_profile_id`\n  - Added enum `AutoUpgradeLastTriggerStatus`\n  - Added model `AutoUpgradeNodeImageSelection`\n  - Added enum `AutoUpgradeNodeImageSelectionType`\n  - Added model `AutoUpgradeProfile`\n  - Added model `AutoUpgradeProfileListResult`\n  - Added enum `AutoUpgradeProfileProvisioningState`\n  - Added model `AutoUpgradeProfileStatus`\n  - Added model `FleetMemberStatus`\n  - Added model `FleetStatus`\n  - Added model `GenerateResponse`\n  - Added enum `UpgradeChannel`\n  - Added operation group `AutoUpgradeProfileOperationsOperations`\n  - Added operation group `AutoUpgradeProfilesOperations`\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Search SDK Namespaces in Python\nDESCRIPTION: Demonstrates the import of essential modules required for interacting with Azure AI Search using the Azure SDK for Python. Dependencies include 'os', 'azure.core.credentials.AzureKeyCredential', and 'azure.search.documents.SearchClient'. These imports are prerequisites for all subsequent examples and are required for authentication and client instantiation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom azure.core.credentials import AzureKeyCredential\\nfrom azure.search.documents import SearchClient\n```\n\n----------------------------------------\n\nTITLE: Question Set After Pronoun Replacement\nDESCRIPTION: Questions revised with appropriate pronouns replacing repeated entity references\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/synthetic/templates/prompt_qa_conversation_modify.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[Q]: What is a Compute instance?\n[Q]: What do they provide for IT administrators?\n[Q]: Which tools do they come with?\n[Q]: What kind of computes are Compute clusters?\n[Q]: What is it?\n[Q]: Are Online and Batch endpoints the same?\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure Bot Service Client in Python\nDESCRIPTION: Demonstrates initializing the Azure Bot Service client using DefaultAzureCredential with environment variable-based authentication. Dependencies required are the azure-identity and azure-mgmt-botservice packages. The environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID must be set. The code fetches the subscription ID from the environment, creates a client with proper authentication, and prepares it for Azure resource management operations. Input: environment variables and installed libraries; Output: an authenticated AzureBotService client object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/botservice/azure-mgmt-botservice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.botservice import AzureBotService\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureBotService(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Key with Required Parameters\nDESCRIPTION: Example of creating a key using the simplified parameter structure with only name and key_type as positional arguments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nkey_client.create_key(name, key_type)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Health Insights Endpoint using Azure CLI (Bash)\nDESCRIPTION: Azure CLI command to retrieve the endpoint URL for a specified Health Insights service resource. Requires Azure CLI to be installed and authenticated, and the user must provide the correct resource name and resource group name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating MapsSearchClient using Subscription Key - Python\nDESCRIPTION: This snippet demonstrates initializing the MapsSearchClient in Python with a subscription key for authentication. It requires the 'azure.core.credentials' and 'azure.maps.search' packages. The key is read from the 'AZURE_SUBSCRIPTION_KEY' environment variable and passed as an AzureKeyCredential. Inputs include the credential; the output is an authenticated client ready for map search operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.search import MapsSearchClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nsearch_client = MapsSearchClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Tenant ID in get_token Method (Python)\nDESCRIPTION: The `get_token()` method supports a `tenant_id` argument, but its effectiveness is limited to specific credential types. Passing this argument allows requesting a token for a specific tenant.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n`tenant_id` argument in get_token() method\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Relative Path\nDESCRIPTION: This line installs Azure SDK tools in editable mode using pip. The tools are located in a relative path three directories up from the current location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-search-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory\nDESCRIPTION: This snippet shows how to authenticate an ExampleClient using DefaultAzureCredential from azure-identity library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.example import ExampleClient\n\nclient = ExampleClient(\n    endpoint=\"https://www.example.org/\",\n    credential=DefaultAzureCredential()\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Azure Event Hubs with Schema Registry for Receiving in Python\nDESCRIPTION: This snippet demonstrates how to integrate Azure Event Hubs with Schema Registry to receive and decode EventData objects. It uses the JsonSchemaEncoder to decode the encoded body value of received events.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.jsonencoder import JsonSchemaEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_JSON_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\nDRAFT2020_12_SCHEMA_IDENTIFIER = \"https://json-schema.org/draft/2020-12/schema\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\njson_schema_encoder = JsonSchemaEncoder(client=schema_registry_client, validate=DRAFT2020_12_SCHEMA_IDENTIFIER)\n\neventhub_consumer = EventHubConsumerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    consumer_group='$Default',\n    eventhub_name=eventhub_name,\n)\n\ndef on_event(partition_context, event):\n    decoded_content = json_schema_encoder.decode(event)\n\nwith eventhub_consumer, json_schema_encoder:\n    eventhub_consumer.receive(on_event=on_event, starting_position=\"-1\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure Question Answering (Python)\nDESCRIPTION: This snippet shows how to handle errors when using the Azure Question Answering Python SDK. It demonstrates catching an HttpResponseError when querying a non-existent knowledge base.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    client.get_answers(\n        question=\"Why?\",\n        project_name=\"invalid-knowledge-base\",\n        deployment_name=\"production\"\n    )\nexcept HttpResponseError as error:\n    print(\"Query failed: {}\".format(error.message))\n```\n\n----------------------------------------\n\nTITLE: Fetching Quarter-Day Weather Forecast with Azure Maps Weather API in Python\nDESCRIPTION: This code demonstrates how to retrieve a Quarter-Day Forecast for the next 1, 5, 10, or 15 days using the Azure Maps Weather API. It shows how to initialize the Maps Weather Client with credentials and handle any errors that might occur during the API call.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_quarter_day_forecast():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_quarter_day_forecast(coordinates=[39.793451, -104.944511])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_quarter_day_forecast()\n```\n\n----------------------------------------\n\nTITLE: AsyncHttpResponse Class Extensions for Asynchronous Operations\nDESCRIPTION: The AsyncHttpResponse class API that extends HttpResponse with asynchronous methods for handling HTTP responses in async contexts. It provides async versions of read and iteration methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncHttpResponse:\n\n    ...\n\n    async def read(self) -> bytes:\n        \"\"\"Read the response's bytes into memory.\"\"\"\n\n    async def iter_raw(self, **kwargs: Any) -> AsyncIterator[bytes]:\n        \"\"\"Asynchronously iterates over the response's bytes. Will not decompress in the process.\"\"\"\n\n    async def iter_bytes(self, **kwargs: Any) -> AsyncIterator[bytes]:\n        \"\"\"Asynchronously iterates over the response's bytes. Will decompress in the process.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing Chat Thread Participant\nDESCRIPTION: Shows how to remove a participant from a chat thread.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nchat_thread_client.remove_participant(identifier=new_user)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AVS Management SDK Dependencies\nDESCRIPTION: Commands to install the required Azure AVS Management package and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-avs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-avs\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure Extended Location Client (Python)\nDESCRIPTION: Demonstrates how to authenticate using `DefaultAzureCredential` from `azure-identity` and initialize the `CustomLocations` client from `azure-mgmt-extendedlocation`. Authentication relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`, `AZURE_SUBSCRIPTION_ID`). The subscription ID is retrieved from the environment using the `os` module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/extendedlocation/azure-mgmt-extendedlocation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.extendedlocation import CustomLocations\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CustomLocations(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Using NewType for Contextual Type Safety\nDESCRIPTION: Shows how to use NewType to create distinct types for improved type safety and catching logic errors at compile time.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import NewType\n\nSanitized = NewType(\"Sanitized\", str)\n\n\ndef sanitize(log) -> Sanitized:\n    return Sanitized(_sanitize(log))\n\ndef print_log(log: Sanitized) -> None: ...\n```\n\n----------------------------------------\n\nTITLE: Combining Chunked Data into Pandas DataFrame - Python\nDESCRIPTION: This snippet initializes an empty DataFrame and defines a function to concatenate all DataFrames stored as pickle files in a specified directory into a single DataFrame for further analysis. It depends on the pandas and os modules, uses global state for the result, and processes files matching a specific prefix. Output is a merged DataFrame accessible as full_data_df. Key limitations include in-memory concatenation, which can exhaust RAM for very large datasets. Parameters like OUTPUT_DIRECTORY and OUTPUT_FILE_PREFIX must be configured in the notebook context.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfull_data_df = pd.DataFrame()\\n\\ndef combine_all_files_to_df():\\n    global full_data_df\\n    for file in os.listdir(OUTPUT_DIRECTORY):\\n        if file.startswith(OUTPUT_FILE_PREFIX):\\n            path = os.path.join(OUTPUT_DIRECTORY, file)\\n            df = pd.read_pickle(path)\\n            full_data_df = pd.concat([full_data_df, df], ignore_index=True)\\n\\n# Combine all files into a single DataFrame.\\n# combine_all_files_to_df()\\n\\n# Inspect the combined DataFrame.\\nprint(f\"Shape of combined DataFrame: {full_data_df.shape}\")\\nfull_data_df.head(30)\\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Route for Digital Twins via Azure SDK - Python\nDESCRIPTION: Creates a new event route pointing to a specified endpoint with an optional filter for event types. Requires uuid, DigitalTwinsEventRoute class, service_client, event_hub_endpoint_name, and credentials. An event_route_id is generated dynamically, and the route is upserted via upsert_event_route. Input includes endpoint name and an event-type filter expression.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nevent_route_id = 'eventRoute-' + str(uuid.uuid4())\nevent_filter = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\"\nroute = DigitalTwinsEventRoute(\n    endpoint_name=event_hub_endpoint_name,\n    filter=event_filter\n)\nservice_client.upsert_event_route(event_route_id, route)\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone by Coordinates using MapsTimeZoneClient - Python\nDESCRIPTION: Shows how to retrieve timezone data for specific geographic coordinates using MapsTimeZoneClient. Using a subscription key for authentication, the sample demonstrates calling get_timezone_by_coordinates with latitude and longitude, along with error handling for potential HTTP exceptions. The operation returns timezone information relevant for the input location coordinates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_timezone_by_coordinates():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.timezone import MapsTimeZoneClient\n\n    timezone_client = MapsTimeZoneClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = timezone_client.get_timezone_by_coordinates(coordinates=[25.0338053, 121.5640089])\n        print(result)\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_timezone_by_coordinates()\n```\n\n----------------------------------------\n\nTITLE: Enumerating Update Files with Device Update SDK in Python\nDESCRIPTION: This snippet illustrates how to list all files associated with a specific device update using the list_files method of the DeviceUpdateClient. It iterates over the response and prints each file identity. The snippet relies on previously set environment variables for update identification and the initialized client object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetUpdate/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.device_update.list_files(update_provider, update_name, update_version)\\nfor item in response:\\n    print(f\"  {item}\")\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Operations with New Azure Key Vault SDK\nDESCRIPTION: Shows the simplified cryptographic operations using azure-keyvault-keys SDK with CryptographyClient, supporting local operations when possible.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.keys.crypto import CryptographyClient, EncryptionAlgorithm\n\nkey = key_client.get_key(name=\"key-name\")\ncrypto_client = CryptographyClient(key=key, credential=credential)\n\nplaintext = b\"plaintext\"\n\n# encrypt data using the key\nresult = crypto_client.encrypt(algorithm=EncryptionAlgorithm.rsa_oaep_256, plaintext=plaintext)\nciphertext = result.ciphertext\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Maps Management Client using DefaultAzureCredential\nDESCRIPTION: Initialize the Azure Maps Management Client using DefaultAzureCredential. This authentication method relies on environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID) for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-mgmt-maps/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maps import AzureMapsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureMapsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Removing x-ms-pageable from Swagger Document\nDESCRIPTION: YAML directive to remove x-ms-pageable property from GET operations in the swagger document due to compatibility issues with autorest.python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]..get\n  transform: >\n    if $(\"x-ms-pageable\")) { delete $(\"x-ms-pageable\"); }\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Service Bus\nDESCRIPTION: Shows how to set up logging for Azure Service Bus operations including AMQP frame level tracing. Configures detailed logging output with timestamp, thread name, level, logger name, and message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nhandler = logging.StreamHandler(stream=sys.stdout)\nlog_fmt = logging.Formatter(fmt=\"%(asctime)s | %(threadName)s | %(levelname)s | %(name)s | %(message)s\")\nhandler.setFormatter(log_fmt)\nlogger = logging.getLogger('azure.servicebus')\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(handler)\n\n...\n\nfrom azure.servicebus import ServiceBusClient\n\nclient = ServiceBusClient(..., logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Extracting Age Mismatch Inference from Radiology Insights Results (Python)\nDESCRIPTION: Iterates through the results of a completed Radiology Insights analysis job (`radiology_insights_result`). It checks each inference within the patient results to identify if it is of type 'Age Mismatch' and prints a confirmation message if found. Requires the `azure.healthinsights.radiologyinsights.models` module and assumes `radiology_insights_result` contains the job output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.AGE_MISMATCH:\n            print(f\"Age Mismatch Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Log Analytics Management Client using DefaultAzureCredential\nDESCRIPTION: Python code snippet demonstrating how to authenticate with the Azure Log Analytics Management Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-mgmt-loganalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.loganalytics import LogAnalyticsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = LogAnalyticsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Translating Multiple Input Texts - Azure Text Translator - Python\nDESCRIPTION: This code demonstrates how to translate multiple input texts, with possible variation in input language, letting the SDK auto-detect the language for each element. Translated texts and detected languages with their scores are printed for each item. Inputs: list of input texts, to_language. Outputs: detected language info and translations per input. Exceptions are also handled gracefully.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    to_language = [\\\"cs\\\"]\\n    input_text_elements = [\\n        \\\"This is a test.\\\",\\n        \\\"Esto es una prueba.\\\",\\n        \\\"Dies ist ein Test.\\\",\\n    ]\\n\\n    translations = text_translator.translate(body=input_text_elements, to_language=to_language)\\n\\n    for translation in translations:\\n        print(\\n            f\\\"Detected languages of the input text: {translation.detected_language.language if translation.detected_language else None} with score: {translation.detected_language.score if translation.detected_language else None}.\\\"\\n        )\\n        print(\\n            f\\\"Text was translated to: '{translation.translations[0].to if translation.translations else None}' and the result is: '{translation.translations[0].text if translation.translations else None}'.\\\"\\n        )\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\n```\n\n----------------------------------------\n\nTITLE: Enumerating All Events using ChangeFeedClient - Python\nDESCRIPTION: This snippet retrieves all available blob change feed events by calling list_changes on a ChangeFeedClient without specifying a time range. It prints each event returned. The client requires storage account URL and credentials. No additional input is required apart from connection details. Outputs event data from the account's change feed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\ncf_client = ChangeFeedClient(\"https://{}.blob.core.windows.net\".format(\"YOUR_ACCOUNT_NAME\"),\n                             credential=\"Your_ACCOUNT_KEY\")\nchange_feed = cf_client.list_changes()\n\n# print all events\nfor event in change_feed:\n    print(event)\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Safety Client with Microsoft Entra ID\nDESCRIPTION: Python code to create ContentSafetyClient and BlocklistClient instances using Microsoft Entra ID authentication\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.contentsafety import ContentSafetyClient, BlocklistClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = DefaultAzureCredential()\ncontent_safety_client = ContentSafetyClient(endpoint, credential)\nblocklist_client = BlocklistClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure NetApp Files Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the Azure NetApp Files Management Client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.netapp import NetAppManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetAppManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure SQL Virtual Machine Management Client with DefaultAzureCredential (Python)\nDESCRIPTION: This Python snippet demonstrates authenticating the SqlVirtualMachineManagementClient using Azure Active Directory environment credentials and the azure-identity library. It imports DefaultAzureCredential and the management client, retrieves the subscription ID from an environment variable, and instantiates the SQL VM Management Client. Required environment variables include AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID. Inputs are environment variables; output is an authenticated client object ready for use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sqlvirtualmachine/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.sqlvirtualmachine import SqlVirtualMachineManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SqlVirtualMachineManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Key Rotation in Azure Key Vault\nDESCRIPTION: This snippet shows how to configure automatic key rotation for a key in Azure Key Vault by specifying a rotation policy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.keys import KeyRotationLifetimeAction, KeyRotationPolicy, KeyRotationPolicyAction\n\n# Here we set the key's automated rotation policy to rotate the key two months after the key was created.\n# If you pass an empty KeyRotationPolicy() as the `policy` parameter, the rotation policy will be set to the\n# default policy. Any keyword arguments will update specified properties of the policy.\nactions = [KeyRotationLifetimeAction(KeyRotationPolicyAction.rotate, time_after_create=\"P2M\")]\nupdated_policy = client.update_key_rotation_policy(\n    \"rotation-sample-key\", policy=KeyRotationPolicy(), expires_in=\"P90D\", lifetime_actions=actions\n)\nassert updated_policy.expires_in == \"P90D\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure API Center Client\nDESCRIPTION: Example showing how to authenticate and initialize the API Center Management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apicenter/azure-mgmt-apicenter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.apicenter import ApiCenterMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ApiCenterMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Search Management Client and Identity Packages\nDESCRIPTION: Commands to install the required Azure packages using pip. This installs the Azure Search Management client library and the Azure Identity package needed for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-mgmt-search/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-search\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities with Numeric Properties in Python\nDESCRIPTION: Shows how to filter entities based on numeric properties using the Azure Data Tables client library. This example filters on Age and AmountDue fields.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"Age gt 30\"\ntable_client.query_entities(query_filter)\n```\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"AmountDue le 100.25\"\ntable_client.query_entities(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Generating and Using SAS Tokens - V2.X vs V12\nDESCRIPTION: Demonstrates how to generate and use SAS tokens for authentication. V2.X generates tokens through FileService while V12 provides standalone generation functions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.file import FileService\nfrom azure.storage.common import (\n    ResourceTypes,\n    AccountPermissions,\n)\nfrom datetime import datetime, timedelta\n\nservice = FileService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\n                        \ntoken = service.generate_account_shared_access_signature(\n    ResourceTypes.CONTAINER,\n    AccountPermissions.READ,\n    datetime.utcnow() + timedelta(hours=1),\n)\n\n# Create a service and use the SAS\nsas_service = FileService(\n    account_name=\"<storage-account-name>\",\n    sas_token=token,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.storage.fileshare import ShareServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\nsas_token = generate_account_sas(\n    account_name=\"<storage-account-name>\",\n    account_key=\"<account-access-key>\",\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1)\n)\n\nshare_service_client = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=sas_token)\n```\n\n----------------------------------------\n\nTITLE: Creating LogsQueryClient with Authentication\nDESCRIPTION: Creates an authenticated LogsQueryClient using either DefaultAzureCredential or a custom authentication policy for the demo workspace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.pipeline.policies import AzureKeyCredentialPolicy\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.query import LogsQueryClient\n\nif LOGS_WORKSPACE_ID == \"DEMO_WORKSPACE\":\n    credential = AzureKeyCredential(\"DEMO_KEY\")\n    header_name = \"X-Api-Key\"\n    authentication_policy = AzureKeyCredentialPolicy(name=header_name, credential=credential)\nelse:\n    credential = DefaultAzureCredential()\n    authentication_policy = None\n\nlogs_query_client = LogsQueryClient(credential, authentication_policy=authentication_policy)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Confidential Ledger in Python\nDESCRIPTION: This snippet shows how to configure detailed logging for the Azure Confidential Ledger client. It sets up a logger for the Azure SDK at DEBUG level and demonstrates how to enable detailed HTTP session logging for both client initialization and individual operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level.\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name,\n    logging_enable=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Form Recognizer Endpoint URL Formats\nDESCRIPTION: Documents the format for regional and custom subdomain endpoints for Azure Cognitive Services. These endpoints are used when configuring the SDK clients; no execution is required but developers must use the correct URL type for AAD support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nRegional endpoint: https://<region>.api.cognitive.microsoft.com/\nCustom subdomain: https://<resource-name>.cognitiveservices.azure.com/\n```\n\n----------------------------------------\n\nTITLE: Building Blob Client with SAS Token in Azure Storage SDK\nDESCRIPTION: Shows how to generate SAS tokens and create blob service clients using these tokens in both version 2.X and version 12 of the Azure Storage SDK for Python. Version 12 implements SAS token generation as a standalone API rather than a class method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlockBlobService\nfrom azure.storage.common import (\n    ResourceTypes,\n    AccountPermissions,\n)\nfrom datetime import datetime, timedelta\n\nservice = BlockBlobService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\n                        \ntoken = service.generate_account_shared_access_signature(\n    ResourceTypes.CONTAINER,\n    AccountPermissions.READ,\n    datetime.utcnow() + timedelta(hours=1),\n)\n\n# Create a service and use the SAS\nsas_service = BlockBlobService(\n    account_name=\"<storage-account-name>\",\n    sas_token=token,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.storage.blob import BlobServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\nsas_token = generate_account_sas(\n    account_name=\"<storage-account-name>\",\n    account_key=\"<account-access-key>\",\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1)\n)\n\nblob_service_client = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=sas_token)\n```\n\n----------------------------------------\n\nTITLE: Using Managed Identity for Backup and Restore Operations\nDESCRIPTION: Added support for authentication via Managed Identity in backup and restore operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nKeyVaultBackupClient.begin_backup(..., use_managed_identity=True)\nKeyVaultBackupClient.begin_restore(..., use_managed_identity=True)\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token and Creating QueueServiceClient (Python 12.X)\nDESCRIPTION: Shows how to generate a SAS token and create a QueueServiceClient using it in version 12 of the Azure Storage Queue SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.storage.queue import QueueServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\nsas_token = generate_account_sas(\n    account_name=\"<storage-account-name>\",\n    account_key=\"<account-access-key>\",\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1)\n)\n\nqueue_service_client = QueueServiceClient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=sas_token)\n```\n\n----------------------------------------\n\nTITLE: Exporting Azure App Configuration AAD Credentials in Bash\nDESCRIPTION: This Bash example demonstrates exporting the App Configuration AAD service principal credentials as environment variables. These variables must be set prior to running any Python code that uses DefaultAzureCredential for authentication. Set the values according to your created service principal output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\n\n----------------------------------------\n\nTITLE: Creating BlobClient from URL in Python Azure Blob Storage SDK\nDESCRIPTION: Demonstrates the correct usage of BlobClient.from_blob_url() method, emphasizing the need for a full '/container/blob' path in the URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nblob_client = BlobClient.from_blob_url(\"https://account.blob.core.windows.net/container/blob\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure ML Services Client\nDESCRIPTION: Example showing how to authenticate the Azure ML Services management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.machinelearningservices import MachineLearningServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MachineLearningServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Summing Two Integers Function - Python\nDESCRIPTION: Defines the \\\"calculate_sum\\\" function schema, accepting two integer parameters (a and b) to return their sum. Critical for cases where lightweight, programmable arithmetic is required within automation or transformation routines.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"calculate_sum\",\n  \"description\": \"Calculates the sum of two integers.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"a\": {\"type\": \"integer\", \"description\": \"First integer.\"},\n      \"b\": {\"type\": \"integer\", \"description\": \"Second integer.\"}\n    },\n    \"required\": [\"a\", \"b\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Model Updates - Version 27.1.0\nDESCRIPTION: New parameters added to various Azure compute models including CommunityGalleryImage, DiskEncryptionSet, and SharedGalleryImage\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nModel CommunityGalleryImage has a new parameter architecture\nModel CommunityGalleryImage has a new parameter eula\nModel CommunityGalleryImage has a new parameter privacy_statement_uri\nModel CommunityGalleryImageVersion has a new parameter exclude_from_latest\nModel CommunityGalleryImageVersion has a new parameter storage_profile\nModel DiskEncryptionSet has a new parameter federated_client_id\n```\n\n----------------------------------------\n\nTITLE: Initializing ShareServiceClient in Python\nDESCRIPTION: Python code to create a ShareServiceClient instance using the storage account URL and a credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareServiceClient\n\nservice = ShareServiceClient(account_url=\"https://<my-storage-account-name>.file.core.windows.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Getting Tropical Storm Locations with Azure Maps Weather API in Python\nDESCRIPTION: This snippet illustrates how to obtain the locations of tropical storms from national weather forecasting agencies using the Azure Maps Weather SDK. It includes parameters for year, basin ID, and government storm ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_tropical_storm_locations():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_tropical_storm_locations(\n            year=2021,\n            basin_id=\"NP\",\n            government_storm_id=2\n        )\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_tropical_storm_locations()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Properties with Azure Cosmos DB SDK for Python\nDESCRIPTION: This snippet demonstrates how to retrieve and display the properties of a specific Azure Cosmos DB database using the Python SDK. It initializes a `CosmosClient` using account credentials from environment variables, gets a client for the target database ('testDatabase'), reads its properties using `database.read()`, and prints them as a JSON string. Requires the `azure-cosmos`, `os`, and `json` libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos import CosmosClient\nimport os\nimport json\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nproperties = database.read()\nprint(json.dumps(properties))\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating DataMapClient with DefaultAzureCredential\nDESCRIPTION: Example showing how to initialize the DataMapClient using DefaultAzureCredential for authentication. Requires endpoint URL and proper Azure credentials configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.purview.datamap import DataMapClient\n>>> from azure.identity import DefaultAzureCredential\n>>> client = DataMapClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Instantiating Azure ImageAnalysisClient with Debug Logging in Python\nDESCRIPTION: This snippet demonstrates how to instantiate an ImageAnalysisClient for the Azure SDK with full, non-redacted logging by passing 'logging_enable=True'. This is typically needed for detailed troubleshooting, but such logs are only generated at the 'logging.DEBUG' level and may include sensitive information. Dependencies include the Azure SDK classes 'ImageAnalysisClient' and 'AzureKeyCredential'. Inputs are 'endpoint', 'key', and the 'logging_enable' argument; the output is a configured client object capable of sending verbose, unredacted logs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Create an Image Analysis client with none redacted log\nclient = ImageAnalysisClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n    logging_enable=True\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Dashboard Management Client in Python\nDESCRIPTION: Python code snippet demonstrating how to authenticate with the Azure Dashboard Management client using the DefaultAzureCredential method. This requires environment variables to be configured with your Azure credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dashboard/azure-mgmt-dashboard/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dashboard import DashboardManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DashboardManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token using Azure Management SDK\nDESCRIPTION: Example demonstrating how to generate a SAS token using the azure-mgmt-maps package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maps import AzureMapsManagementClient\n\ndef main():\n    client = AzureMapsManagementClient(\n        credential=DefaultAzureCredential(),\n        subscription_id=\"your-subscription-id\",\n    )\n\n    response = client.accounts.list_sas(\n        resource_group_name=\"myResourceGroup\",\n        account_name=\"myMapsAccount\",\n        maps_account_sas_parameters={\n            \"expiry\": \"2017-05-24T11:42:03.1567373Z\",\n            \"maxRatePerSecond\": 500,\n            \"principalId\": \"your-principal-id\",\n            \"regions\": [\"eastus\"],\n            \"signingKey\": \"primaryKey\",\n            \"start\": \"2017-05-24T10:42:03.1567373Z\",\n        },\n    )\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Running an Async Pipeline with TrioRequestsTransport in Python\nDESCRIPTION: This example demonstrates how to create and use an `AsyncPipeline` with the `TrioRequestsTransport`. It shows initializing the pipeline with the specific transport and optional policies, then running a request asynchronously within a Trio context (`async with`). This requires the `trio` library and `azure-core`'s async components.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.pipeline.transport import TrioRequestsTransport\nasync with AsyncPipeline(TrioRequestsTransport(), policies=policies) as pipeline:\n    return await pipeline.run(request)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with HDInsight Containers Management Client in Python\nDESCRIPTION: Creates an authenticated HDInsight Containers Management client using DefaultAzureCredential. Requires environment variables for Azure authentication including client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsightcontainers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hdinsightcontainers import HDInsightContainersMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HDInsightContainersMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory for Dependencymap Management\nDESCRIPTION: Code to authenticate with Azure Active Directory using DefaultAzureCredential and initialize the DependencyMapMgmtClient. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dependencymap/azure-mgmt-dependencymap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dependencymap import DependencyMapMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DependencyMapMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Logging Sample\nDESCRIPTION: Command to run the sample_log.py file which demonstrates basic logging with the AzureMonitorLogExporter. Requires setting the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable first.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/logs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_log.py\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Azure Monitor Custom Table - Python\nDESCRIPTION: Shows how to instantiate authentication credentials using ClientSecretCredential and create a LogsIngestionClient for Azure Monitor in Python. The snippet demonstrates ingesting data from a DataFrame, formatted to JSON, to a custom table via the DCR stream. Requires the azure.core.exceptions, azure.identity, and azure.monitor.ingestion packages. Key parameters include endpoint, rule_id, and stream_name; outputs are status messages based on the ingestion request result. Exception handling for upload failures via HttpResponseError is included. Table availability may be delayed up to 15 minutes after creation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\\nfrom azure.identity import ClientSecretCredential\\nfrom azure.monitor.ingestion import LogsIngestionClient\\n\\n\\ncredential = ClientSecretCredential(\\n    tenant_id=AZURE_TENANT_ID,\\n    client_id=AZURE_CLIENT_ID,\\n    client_secret=AZURE_CLIENT_SECRET\\n)\\n\\nclient = LogsIngestionClient(endpoint=DATA_COLLECTION_ENDPOINT, credential=credential, logging_enable=True)\\n\\nbody = json.loads(anomalies_df.to_json(orient='records', date_format='iso'))\\n\\ntry:\\n   response = client.upload(rule_id=LOGS_DCR_RULE_ID, stream_name=LOGS_DCR_STREAM_NAME, logs=body)\\n   print(\"Upload request accepted\")\\nexcept HttpResponseError as e:\\n    print(f\"Upload failed: {e}\")\\n\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Discriminated Unions with Literal\nDESCRIPTION: Demonstrates creating type-safe discriminated unions using Literal type annotations to enable compile-time checking of union types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nfrom typing_extensions import Literal\n\n\n# client library code\nclass SelectionMark:\n\n    def __init__(self):\n        self.kind: Literal[\"selectionMark\"] = \"selectionMark\"\n        self.state = \"selected\"\n\n\nclass FormWord:\n\n    def __init__(self):\n        self.kind: Literal[\"word\"] = \"word\"\n        self.word = \"hello\"\n\n\nclass FormLine:\n\n    def __init__(self):\n        self.kind: Literal[\"line\"] = \"line\"\n        self.line = \"hello world\"\n\n\ndef get_element() -> Union[SelectionMark, FormWord, FormLine]:\n    ...\n\n\n# user code\nele = get_element()\n\nif ele.kind == \"selectionMark\":\n    print(ele.state)\nelif ele.kind == \"word\":\n    print(ele.word)\nelif ele.kind == \"line\":\n    print(ele.line)\n```\n\n----------------------------------------\n\nTITLE: Setting Artifact Properties\nDESCRIPTION: Set read-only properties for a specific image version by disabling write and delete permissions\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Set permissions on image \"library/hello-world:v1\"\n    client.update_manifest_properties(\"library/hello-world\", \"v1\", can_write=False, can_delete=False)\n```\n\n----------------------------------------\n\nTITLE: Getting AI Model Information with Azure AI Inference Client - Python\nDESCRIPTION: This snippet shows how to retrieve AI model metadata using the client\\'s get_model_info method. It assumes that a synchronous Azure AI inference client has already been created and authenticated (using an endpoint and AzureKeyCredential or any supported authentication). This call returns a structured object with properties such as model name, provider, and type, and does not require any additional input. Note: the information is cached within the client after the first call, and repeated calls will not make additional REST requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodel_info = client.get_model_info()\n\nprint(f\"Model name: {model_info.model_name}\")\nprint(f\"Model provider name: {model_info.model_provider_name}\")\nprint(f\"Model type: {model_info.model_type}\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Configurations with SettingSelector - Azure App Configuration Python Provider - Python\nDESCRIPTION: Demonstrates advanced configuration selection using SettingSelector to filter based on key and label. Requires 'azure.appconfiguration.provider', 'azure.identity', and uses two selectors to prioritize 'dev' label over the empty label. Outputs configurations accessible as a Python dictionary.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load, SettingSelector\nfrom azure.identity import DefaultAzureCredential\n\nselects = {SettingSelector(key_filter=\"*\", label_filter=\"\\0\"), SettingSelector(key_filter=\"*\", label_filter=\"dev\")}\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), selects=selects)\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Azure AD Authentication\nDESCRIPTION: Creates a Document Translation client instance using Azure Active Directory authentication via DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ndocument_translation_client = DocumentTranslationClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Setting up to Add a Knowledge Source using AuthoringClient in Python\nDESCRIPTION: This Python snippet shows the initial setup required before adding a knowledge source to a Question Answering project using the `AuthoringClient`. It imports necessary modules, retrieves the service endpoint and API key from environment variables, and initializes the `AuthoringClient`. The subsequent code (not shown) would use this client instance to call methods for adding sources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\n# get service secrets\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document with Markdown Content Format in Python\nDESCRIPTION: This snippet demonstrates how to use the DocumentIntelligenceClient to analyze a document and receive the output in Markdown format. It uses the prebuilt-layout model and specifies the output content format as Markdown.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/MIGRATION_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import AnalyzeDocumentRequest, DocumentContentFormat\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\nurl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/documentintelligence/azure-ai-documentintelligence/samples/sample_forms/forms/Invoice_1.pdf\"\n\nclient = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\npoller = client.begin_analyze_document(\n    \"prebuilt-layout\", AnalyzeDocumentRequest(url_source=url), output_content_format=DocumentContentFormat.MARKDOWN\n)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Using BatchMessage Creation Pattern\nDESCRIPTION: Demonstrates the new pattern for creating and sending batched messages using create_batch() and add() methods introduced in version 7.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsender = service_bus_client.get_queue_sender(\"queue_name\")\nbatch = sender.create_batch()\nbatch.add(message)\nsender.send_messages(batch)\n```\n\n----------------------------------------\n\nTITLE: Creating JsonSchemaEncoder with SchemaRegistryClient in Python\nDESCRIPTION: Shows how to create a `JsonSchemaEncoder` instance. It first creates a `SchemaRegistryClient` for communication and then passes it to the encoder constructor along with the schema group name retrieved from an environment variable (`SCHEMAREGISTRY_GROUP`). The encoder is used for encoding/decoding messages using JSON schemas from the registry. Requires `SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.jsonencoder import JsonSchemaEncoder\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net'\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\nencoder = JsonSchemaEncoder(client=schema_registry_client, group_name=group_name)\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Development Dependencies\nDESCRIPTION: This requirements file lists the necessary dependencies for developing with the Azure SDK for Python. It includes references to the Azure SDK tools in editable mode, the Azure Identity package, and the Azure Resource Management package in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmosdbforpostgresql/azure-mgmt-cosmosdbforpostgresql/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Basic Azure Resource Group Creation and Deletion Test in Python\nDESCRIPTION: This snippet demonstrates a basic test for creating and deleting an Azure resource group using the ResourceManagementClient. It utilizes AzureMgmtRecordedTestCase for HTTP recording and playback, and the recorded_by_proxy decorator.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.resource import ResourceManagementClient\nfrom devtools_testutils import AzureMgmtRecordedTestCase, recorded_by_proxy\n\nAZURE_LOCATION = 'eastus'\n\nclass TestExampleResourceGroup(AzureMgmtRecordedTestCase):\n    def setup_method(self, method):\n        self.client = self.create_mgmt_client(ResourceManagementClient)\n    \n    @recorded_by_proxy\n    def test_create_resource_group(self):\n        test_group_name = self.get_resource_name('testgroup')\n        group = self.client.resource_groups.create_or_update(\n            test_group_name,\n            {'location': 'westus'}\n        )\n        assert group.name == test_group_name\n        self.client.resource_groups.begin_delete(group.name)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Data Schema Error in Python Evaluation\nDESCRIPTION: This code snippet illustrates a previously problematic data schema that caused errors in the evaluate function. It shows how numeric characters in field names were not supported, which has now been fixed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"query1\": \"some query\", \"response: \"some response\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Confidential Ledger Client with Certificate\nDESCRIPTION: Creates a Confidential Ledger client by first retrieving the ledger's TLS certificate and initializing the client with proper authentication credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Tracing for Azure SDK in Python\nDESCRIPTION: This snippet configures the Azure SDK for Python to use OpenTelemetry for distributed tracing. It imports necessary components from `azure.core` and sets the global `settings.tracing_implementation` to `OpenTelemetrySpan`. This enables tracing capabilities within Azure SDK libraries like `azure-eventgrid`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.settings import settings\nfrom azure.core.tracing.ext.opentelemetry_span import OpenTelemetrySpan\n\nsettings.tracing_implementation = OpenTelemetrySpan\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Nginx Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate and initialize the Nginx Management Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.nginx import NginxManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NginxManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0b2 in Markdown\nDESCRIPTION: Lists the features added in version 1.0.0b2 of the Azure SDK for Python, including new operations, operation groups, and model parameter additions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/testbase/azure-mgmt-testbase/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b2 (2022-11-04)\n\n### Features Added\n\n  - Added operation PackagesOperations.run_test\n  - Added operation TestResultsOperations.get_console_log_download_url\n  - Added operation group BillingHubServiceOperations\n  - Model ScriptExecutionResult has a new parameter stderr_log_file_name\n  - Model ScriptExecutionResult has a new parameter stdout_log_file_name\n  - Model TargetOSInfo has a new parameter baseline_o_ss\n  - Model Test has a new parameter validation_result_id\n  - Model TestResultResource has a new parameter interop_media_type\n  - Model TestResultResource has a new parameter interop_media_version\n  - Model TestSummaryResource has a new parameter package_tags\n```\n\n----------------------------------------\n\nTITLE: Initializing Purview Clients\nDESCRIPTION: Initialize PurviewAccountClient and PurviewMetadataPoliciesClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.administration.account import PurviewAccountClient\nfrom azure.purview.administration.metadatapolicies import PurviewMetadataPoliciesClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nendpoint = \"https://<my-account-name>.purview.azure.com\"\naccount_client = PurviewAccountClient(endpoint=endpoint, credential=credential)\nmetadatapolicy_client = PurviewMetadataPoliciesClient(endpoint=endpoint, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureQuantumManagementClient with DefaultAzureCredential (Python)\nDESCRIPTION: This Python code snippet demonstrates initializing the `AzureQuantumManagementClient`. It uses `DefaultAzureCredential` from the `azure-identity` library, which automatically handles authentication based on environment variables or other configured credentials. The Azure subscription ID is retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable. The resulting `client` object can be used to interact with the Azure Quantum management plane.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/quantum/azure-mgmt-quantum/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.quantum import AzureQuantumManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureQuantumManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Data Box Edge Management Client using DefaultAzureCredential\nDESCRIPTION: Example code that demonstrates how to authenticate with the Data Box Edge Management Client using DefaultAzureCredential. It retrieves the subscription ID from environment variables and initializes the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databoxedge/azure-mgmt-databoxedge/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.databoxedge import DataBoxEdgeManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataBoxEdgeManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Modifying Receive Behavior with Prefetch in Python\nDESCRIPTION: `receive_messages()` (formerly `receive()`) no longer raises a `ValueError` if the requested `max_batch_size` is less than the `prefetch` count configured during `ServiceBusReceiver` initialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n# Previously might raise ValueError if max_batch_size < prefetch:\nreceiver.receive_messages(max_batch_size=5)\n\n# Now proceeds without error in this scenario.\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Form Recognizer via pip - Bash\nDESCRIPTION: Installs the azure-ai-formrecognizer Python package using pip. Requires Python 3.8 or later. The command is run in a bash shell, and after installation, users can import and use the SDK in their Python applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-formrecognizer\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Renaming AutoLockRenew Shutdown Method in Python\nDESCRIPTION: Renamed `AutoLockRenew.shutdown` to `AutoLockRenew.close` to align with standard naming conventions for resource cleanup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nAutoLockRenew.shutdown -> AutoLockRenew.close\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure Identity Dependency in Python Requirements\nDESCRIPTION: Includes the 'azure-identity' package as a required dependency, enabling authentication features for the Azure SDK for Python. This refers to the official package typically fetched from PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/dev_requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSockets for Azure Event Hubs in Python\nDESCRIPTION: Code reference for WebSocket configuration in the Azure Event Hubs Python SDK. The actual implementation is available in the referenced sample file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/TROUBLESHOOTING.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Placeholder for WebsocketConfig sample\n# Actual code is at: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/async_samples/send_and_receive_amqp_annotated_message_async.py#L95\n```\n\n----------------------------------------\n\nTITLE: Performing Dictionary Lookup with Azure TextTranslator SDK in Python\nDESCRIPTION: This snippet shows how to perform a dictionary lookup using the Azure TextTranslator SDK to retrieve equivalent words for a given source term ('fly' from English to Spanish). Dependencies include the Azure TextTranslator client library and a properly configured client instance named 'text_translator'. Required parameters are 'from_language', 'to_language', and 'input_text_elements'. On success, it prints the number of translations found and details of the first translation. The snippet includes error handling for HttpResponseError, outputting error code and message on failure. Inputs must be properly formed; the SDK must be authenticated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    from_language = \\\"en\\\"\\n    to_language = \\\"es\\\"\\n    input_text_elements = [\\\"fly\\\"]\\n\\n    response = text_translator.lookup_dictionary_entries(\\n        body=input_text_elements, from_language=from_language, to_language=to_language\\n    )\\n    dictionary_entry = response[0] if response else None\\n\\n    if dictionary_entry:\\n        print(f\\\"For the given input {len(dictionary_entry.translations)} entries were found in the dictionary.\\\")\\n        print(\\n            f\\\"First entry: '{dictionary_entry.translations[0].display_target}', confidence: {dictionary_entry.translations[0].confidence}.\\\"\\n        )\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\\n    raise\n```\n\n----------------------------------------\n\nTITLE: Uploading a Pandas DataFrame to ADLS as JSON - Python\nDESCRIPTION: This helper function uploads a provided pandas DataFrame to a designated path in Azure Data Lake Storage as a single JSON file. It serializes the DataFrame, accesses the correct container and directory, creates the directory if necessary, and then uploads the JSON content. Dependencies include pandas and a previously initialized adls_service_client. Parameters: df (the DataFrame), adls_dirname (remote directory), adls_filename (target file name), and container_name (ADLS container). Exceptions are caught and printed. Requires permissions to write to the specified ADLS location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef upload_df_to_adls_path(\\n    df: pd.DataFrame,\\n    adls_dirname: str,\\n    adls_filename: str,\\n    container_name: str,\\n):\\n    \"\"\"\\n    Upload a pandas DataFrame to the specified ADLS path as a single JSON file.\\n    \"\"\"\\n    json_data = df.to_json(orient=\"records\", lines=True, date_format=\"iso\")\\n    file_system_client = adls_service_client.get_file_system_client(file_system=container_name)\\n\\n    try:\\n        file_system_client.create_directory(adls_dirname)\\n    except Exception as e:\\n        print(e)\\n\\n    try:\\n        directory_client = file_system_client.get_directory_client(adls_dirname)\\n        file_client = directory_client.get_file_client(adls_filename)\\n        file_client.upload_data(json_data, overwrite=True)\\n    except Exception as e:\\n        print(e)\\n\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Azure ML Client\nDESCRIPTION: Example showing how to handle exceptions when working with Azure ML clients. It demonstrates catching an HttpResponseError when trying to retrieve a compute resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    ml_client.compute.get(\"cpu-cluster\")\nexcept HttpResponseError as error:\n    print(\"Request failed: {}\".format(error.message))\n```\n\n----------------------------------------\n\nTITLE: Uploading Logs with Custom Error Handling in Python\nDESCRIPTION: This example demonstrates how to upload logs with custom error handling by passing a callback function to the on_error parameter of the upload method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Example 1: Collect all logs that failed to upload.\nfailed_logs = []\ndef on_error(error):\n    print(\"Log chunk failed to upload with error: \", error.error)\n    failed_logs.extend(error.failed_logs)\n\n# Example 2: Ignore all errors.\ndef on_error_pass(error):\n    pass\n\nclient.upload(rule_id=rule_id, stream_name=stream_name, logs=body, on_error=on_error)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Daily Historical Weather Data with Azure Maps Weather API in Python\nDESCRIPTION: This code retrieves historical climatology data including past daily actual observed temperatures, precipitation, snowfall and snow depth. It requires start and end dates to specify the historical period, and outputs the results as formatted JSON.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nimport datetime\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_daily_historical_actuals():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_daily_historical_actuals(\n            coordinates=[40.760139, -73.961968],\n            start_date=datetime.date(2024, 1, 1),\n            end_date=datetime.date(2024, 1, 31)\n        )\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_daily_historical_actuals()\n```\n\n----------------------------------------\n\nTITLE: Querying a Worker for Active Job Offers (Python)\nDESCRIPTION: Retrieves the current state of a specific worker using `router_client.get_worker` by providing the `worker_id`. It then iterates through the `offers` attribute of the returned `RouterWorker` object to check for and print details about any active job offers assigned to that worker. Requires an initialized `JobRouterClient`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    RouterWorker,\n)\n\nrouter_worker: RouterWorker = router_client.get_worker(worker_id = \"worker-1\")\n\nfor offer in router_worker.offers:\n    print(f\"Worker {router_worker.id} has an active offer for job {offer.job_id}\")\n```\n\n----------------------------------------\n\nTITLE: Using load_client Function\nDESCRIPTION: Example of using the load_client function to create appropriate client based on endpoint type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference import load_client\nfrom azure.core.credentials import AzureKeyCredential\n\n# For Serverless API or Managed Compute endpoints only.\n```\n\n----------------------------------------\n\nTITLE: Evaluating Single Response Against Ground Truth\nDESCRIPTION: Example of evaluating a single response against its ground truth for completeness scoring.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/response_completeness.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = response_completeness_evaluator(\n    response=\"The capital of Japan\",\n    ground_truth=\"The capital of Japan is Tokyo.\"\n)\nresult\n```\n\n----------------------------------------\n\nTITLE: Consuming an SDK Client with Various Pipeline Configurations in Python\nDESCRIPTION: This snippet illustrates different ways an end-user can consume an SDK client (`FooServiceClient`) built with the Azure Core pipeline. It covers scenarios like using the default configuration, tweaking settings (logging, retries) via constructor arguments, overriding settings (max redirects) for a specific request, and providing a fully custom policy (`CustomRetryPolicy`) during client initialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.credentials import FooCredentials\nfrom azure.foo import FooServiceClient\n\ncreds = FooCredentials(\"api-key\")\nendpoint = \"http://service.azure.net\n\n# Scenario using entirely default configuration\n# We use the SDK-developer defined configuration.\nclient = FooServiceClient(endpoint, creds)\nresponse = client.get_foo_properties()\n\n# Scenario where user wishes to tweak a couple of settings\n# In this case the configurable options can be passed directly into the client constructor.\nclient = FooServiceClient(endpoint, creds, logging_enable=True, retries_total=5)\nresponse = client.get_foo_properties()\n\n# Scenario where user wishes to tweak settings for only a specific request\n# All the options available on construction are available as per-request overrides.\n# These can also be specified by the SDK developer - and it will be up to them to resolve\n# conflicts with user-defined parameters.\nclient = FooServiceClient(endpoint, creds)\nresponse = client.get_foo_properties(redirects_max=0)\n\n# Scenario where user wishes to fully customize the policies.\n# All configuration options are passed through kwargs\nclient = FooServiceClient(\n    endpoint,\n    creds,\n    retry_policy=CustomRetryPolicy()\n    redirect_max=5,\n    logging_enable=True\n)\nresponse = client.get_foo_properties()\n```\n```\n\n----------------------------------------\n\nTITLE: Purging Deleted Secrets with Azure Key Vault Python SDK\nDESCRIPTION: This snippet demonstrates using the client.purge_deleted_secret method to permanently remove a previously deleted secret from an Azure Key Vault instance. It requires an authenticated client instance and expects the vault_base_url and secret_name as parameters. The purge operation will fail if the deletion has not yet completed, so it is important to ensure secret deletion is finalized before purging.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# this purge would fail if deletion hadn't finished\\nclient.purge_deleted_secret(\\n    vault_base_url=\\\"https://my-key-vault.vault.azure.net/\\\",\\n    secret_name=\\\"secret-name\\\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Continuous Access Evaluation for Token Requests\nDESCRIPTION: Added support for Continuous Access Evaluation (CAE) by passing enable_cae=True to all get_token requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nget_token(..., enable_cae=True)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Event Handler with Agent Stream in Python\nDESCRIPTION: Creates an agent stream with a custom event handler and processes the events, displaying the event type, data, and handler function return values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nwith project_client.agents.create_stream(\n    thread_id=thread.id, agent_id=agent.id, event_handler=MyEventHandler()\n) as stream:\n    for event_type, event_data, func_return in stream:\n        print(f\"Received data.\")\n        print(f\"Streaming receive Event Type: {event_type}\")\n        print(f\"Event Data: {str(event_data)[:100]}...\")\n        print(f\"Event Function return: {func_return}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Device Update Management Client Library in Python\nDESCRIPTION: Commands to install the required packages for using the Azure Device Update Management Client Library. Installs azure-mgmt-deviceupdate for the main library and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-mgmt-deviceupdate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-deviceupdate\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Purchasing Phone Numbers with Search Result (Python)\nDESCRIPTION: This snippet purchases the phone numbers found in a prior search by passing the search_id from the search_result object. It uses begin_purchase_phone_numbers, which initiates a long running operation for provisioning. Polling is used to track completion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npurchase_poller = phone_numbers_client.begin_purchase_phone_numbers(\n    search_result.search_id,\n    polling=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Digital Twins with Random Attributes in Python\nDESCRIPTION: This snippet demonstrates how to create multiple digital twins with random attributes using a custom function. It creates a list of 40 customers with varying satisfaction levels and initializes their wait times.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/01_Patrons.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_new_customer():\n    digital_twin_id = 'customer-' + str(uuid.uuid4())\n    customer_json = {\n        \"$metadata\": {\n            \"$model\": patron_model_id\n        },\n        \"satisfaction\": np.random.randint(5,10),\n        \"totalWaitTime\": 0\n    }\n    return digital_twin_id,customer_json\n    \ncustomer_twin_examples = [create_new_customer() for i in range(40)]\ncustomer_twin_examples[:5]\n```\n\n----------------------------------------\n\nTITLE: Linked Entity Recognition with Azure Text Analytics\nDESCRIPTION: Shows how to recognize and link entities to Wikipedia articles, tracking entity mentions and their frequencies in the text.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\ndocuments = [\n    \"\"\"\n    Microsoft was founded by Bill Gates with some friends he met at Harvard. One of his friends,\n    Steve Ballmer, eventually became CEO after Bill Gates as well. Steve Ballmer eventually stepped\n    down as CEO of Microsoft, and was succeeded by Satya Nadella.\n    Microsoft originally moved its headquarters to Bellevue, Washington in January 1979, but is now\n    headquartered in Redmond.\n    \"\"\"\n]\n\nresult = text_analytics_client.recognize_linked_entities(documents)\ndocs = [doc for doc in result if not doc.is_error]\n\nprint(\n    \"Let's map each entity to it's Wikipedia article. I also want to see how many times each \"\n    \"entity is mentioned in a document\\n\\n\"\n)\nentity_to_url = {}\nfor doc in docs:\n    for entity in doc.entities:\n        print(\"Entity '{}' has been mentioned '{}' time(s)\".format(\n            entity.name, len(entity.matches)\n        ))\n        if entity.data_source == \"Wikipedia\":\n            entity_to_url[entity.name] = entity.url\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentIntelligenceClient with Azure Active Directory\nDESCRIPTION: Python code to create a DocumentIntelligenceClient instance using Azure Active Directory authentication with DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"DefaultAzureCredential will use the values from these environment\nvariables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\"\"\"\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Gradient Boosting Regression Pipeline in Python\nDESCRIPTION: Implements a gradient boosting regression model using HistGradientBoostingRegressor with ordinal encoding for categorical features.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\n\nordinal_encoder = OrdinalEncoder(categories=[data_types])\n\ngradient_boosting_pipeline = make_pipeline(\n    ColumnTransformer(\n        transformers=[\n            (\"categorical\", ordinal_encoder, categorical_columns),\n        ],\n        remainder=\"passthrough\",\n    ),\n    HistGradientBoostingRegressor(\n        categorical_features=range(1),\n    ),\n)\n\ngradient_boosting_pipeline.fit(X, Y)\nprint(\"Score of Gradient Boosting Regression:\")\nevaluate(gradient_boosting_pipeline, X, Y, cv=ts_cv)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for an Azure SDK Component\nDESCRIPTION: This configuration snippet lists the necessary Python dependencies for an Azure SDK component using a format compatible with tools like `pip`. It includes references to core Azure libraries (`azure-core`, `azure-identity`), development tools (`azure-sdk-tools`) installed in editable mode (`-e`), and an external asynchronous HTTP client library (`aiohttp` version 3.0 or greater). These dependencies are essential for the component's build and runtime environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Creating a DevCenter Client with Azure Active Directory Authentication\nDESCRIPTION: This code demonstrates how to instantiate a DevCenterClient object using DefaultAzureCredential. It requires the DevCenter endpoint from environment variables to establish a connection.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.developer.devcenter import DevCenterClient\nfrom azure.identity import DefaultAzureCredential\n\n# Set the values of the dev center endpoint, client ID, and client secret of the AAD application as environment variables:\n# DEVCENTER_ENDPOINT, AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET\ntry:\n    endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\nexcept KeyError:\n    raise ValueError(\"Missing environment variable 'DEVCENTER_ENDPOINT' - please set it before running the example\")\n\n# Build a client through AAD\nclient = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Newrelicobservability Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate with the Azure Newrelicobservability Management Client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/newrelicobservability/azure-mgmt-newrelicobservability/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.newrelicobservability import NewRelicObservabilityMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NewRelicObservabilityMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureMonitorMetricExporter with Connection String\nDESCRIPTION: Creates an instance of AzureMonitorMetricExporter using an explicit connection string from environment variables for metrics telemetry to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\nexporter = AzureMonitorMetricExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Purchased Phone Numbers Using PhoneNumbersClient (Python)\nDESCRIPTION: This example lists all purchased phone numbers using the PhoneNumbersClient. The call to list_purchased_phone_numbers returns an iterable of number objects. Each object's 'phone_number' property is printed. Requires an authenticated PhoneNumbersClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npurchased_phone_numbers = phone_numbers_client.list_purchased_phone_numbers()\nfor acquired_phone_number in purchased_phone_numbers:\n    print(acquired_phone_number.phone_number)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Cognitive Services API Key using PowerShell\nDESCRIPTION: This Azure CLI command, executed in PowerShell, retrieves the API keys associated with a specific Azure Cognitive Services Language resource. The keys are needed for authenticating client requests. Replace `<resource-group-name>` and `<resource-name>` with your specific resource group and resource name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\naz cognitiveservices account keys list --resource-group <resource-group-name> --name <resource-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Event Hubs Client in Python\nDESCRIPTION: Code example for client creation in the Azure Event Hubs Python SDK. This is referenced in the documentation but the actual code is stored in a separate sample file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/TROUBLESHOOTING.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Placeholder for ClientCreation sample\n# Actual code is at: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/sync_samples/client_creation.py\n```\n\n----------------------------------------\n\nTITLE: Excluding Content from Translation using HTML class\nDESCRIPTION: Demonstrates how to exclude specific content from translation using the notranslate HTML class attribute. The example translates HTML content from English to Czech while preserving specified untranslatable sections.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    text_type = TextType.HTML\n    from_language = \"en\"\n    to_language = [\"cs\"]\n    input_text_elements = [\n        '<div class=\"notranslate\">This will not be translated.</div><div>This will be translated. </div>'\n    ]\n\n    response = text_translator.translate(\n        body=input_text_elements,\n        to_language=to_language,\n        from_language=from_language,\n        text_type=text_type,\n    )\n    translation = response[0] if response else None\n\n    if translation:\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\"))\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Connection String in Azure Communication Email SDK\nDESCRIPTION: Creates an EmailClient instance using a connection string from an Azure Communication Resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.email import EmailClient\n\nconnection_string = \"endpoint=https://<resource-name>.communication.azure.com/;accessKey=<Base64-Encoded-Key>\"\nclient = EmailClient.from_connection_string(connection_string);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure DNS Resolver Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate with the Azure DNS Resolver Management Client using the DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dnsresolver import DnsResolverManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DnsResolverManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Synapse Client with DefaultAzureCredential\nDESCRIPTION: Example demonstrating how to authenticate the Synapse Management Client using DefaultAzureCredential and environment variables for Azure subscription ID. Requires AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID environment variables to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-mgmt-synapse/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.synapse import SynapseManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SynapseManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Basic Client Creation with Retry Options\nDESCRIPTION: Example showing how to configure retry options when instantiating an Event Hubs client. The code demonstrates setting retry total attempts, backoff factor, maximum backoff time, and retry mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nretry_total=3\nretry_backoff_factor=1\nretry_backoff_max=10\nretry_mode='fixed'\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure DevTestLabs Client with New Credentials\nDESCRIPTION: Example of initializing the DevTestLabs client with the new credential system using azure-identity instead of the deprecated azure.common.credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing QueueServiceClient from Connection String in Python\nDESCRIPTION: Create a QueueServiceClient instance using a storage connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = QueueServiceClient.from_connection_string(conn_str=connection_string)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and creating Kusto Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate and create a KustoManagementClient using DefaultAzureCredential. It requires the AZURE_SUBSCRIPTION_ID environment variable to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.kusto import KustoManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = KustoManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Schedule Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip package manager. Installs both the compute schedule management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computeschedule/azure-mgmt-computeschedule/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-computeschedule\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Getting Chat Message\nDESCRIPTION: Demonstrates how to retrieve a specific message using its message_id.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nchat_message = chat_thread_client.get_message(message_id=send_message_result_id)\nprint(\"get_chat_message succeeded, message id:\", chat_message.id, \"content: \", chat_message.content)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Redis Management Client\nDESCRIPTION: Code example showing how to authenticate with the Redis Management Client using DefaultAzureCredential. This snippet demonstrates initializing the client with proper authentication to interact with Azure Redis Cache resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redis/azure-mgmt-redis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.redis import RedisManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RedisManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Batch Query Endpoints\nDESCRIPTION: Implements two helper functions that determine appropriate time ranges for batched queries based on either row count or data size limits. These functions help overcome Azure Monitor service limits by splitting large queries into smaller chunks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\nimport pandas as pd\n\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.monitor.query import LogsQueryPartialResult, LogsQueryStatus\n\n\nasync def get_batch_endpoints_by_row_count(\n    query: str,\n    end_time: datetime,\n    days_back: int,\n    max_rows_per_query: int = int(1e5),\n    time_col: str = \"TimeGenerated\",\n):\n    \"\"\"\n    Determine the timestamp endpoints for each chunked query\n    such that number of rows returned by each query is (approximately) `max_rows_per_query`\n    \"\"\"\n\n    # This query will assign a batch number to each row depending on the maximum number of rows per query.\n    # Then the earliest timestamp for each batch number is used for each query endpoint.\n    find_batch_endpoints_query = f\"\"\"\n        {query}\n        | sort by {time_col} desc\n        | extend batch_num = row_cumsum(1) / {max_rows_per_query}\n        | summarize endpoint=min({time_col}) by batch_num\n        | sort by batch_num asc\n        | project endpoint\n    \"\"\"\n\n    start_time = end_time - timedelta(days=days_back)\n    try:\n        response = await client.query_workspace(\n            workspace_id=LOGS_WORKSPACE_ID,\n            query=find_batch_endpoints_query,\n            timespan=(start_time, end_time),\n        )\n    except HttpResponseError as e:\n        print(\"Error batching endpoints by row count\")\n        raise e\n\n    if response.status == LogsQueryStatus.PARTIAL:\n        raise Exception(f\"Error batching endpoints by data size: {response.partial_error}\")\n\n    batch_endpoints = [end_time]\n    batch_endpoints += [row[0] for row in response.tables[0].rows]\n    return batch_endpoints\n\n\nasync def get_batch_endpoints_by_byte_size(\n    query: str,\n    end_time: datetime,\n    days_back: int,\n    max_bytes_per_query: int = 100 * 1024 * 1024, # 100 MiB\n    time_col: str = \"TimeGenerated\",\n):\n    \"\"\"\n    Determine the timestamp endpoints for each chunked query such that\n    the size of the data returned is less than `max_bytes_per_query`.\n    \"\"\"\n\n    # This query will assign a batch number to each row depending on the estimated data size.\n    # Then the earliest timestamp for each batch number is used for each query endpoint.\n    find_batch_endpoints_query = f\"\"\"\n        {query}\n        | sort by {time_col} desc\n        | extend batch_num = row_cumsum(estimate_data_size(*)) / {max_bytes_per_query}\n        | summarize endpoint=min({time_col}) by batch_num\n        | sort by batch_num asc\n        | project endpoint\n    \"\"\"\n\n    start_time = end_time - timedelta(days=days_back)\n    try:\n        response = await client.query_workspace(\n            workspace_id=LOGS_WORKSPACE_ID,\n            query=find_batch_endpoints_query,\n            timespan=(start_time, end_time)\n        )\n    except HttpResponseError as e:\n        print(\"Error batching endpoints by byte size\")\n        raise e\n\n    if response.status == LogsQueryStatus.PARTIAL:\n        raise Exception(f\"Error batching endpoints by byte size: {response.partial_error}\")\n\n    batch_endpoints = [end_time]\n    batch_endpoints += [row[0] for row in response.tables[0].rows]\n    return batch_endpoints\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Digital Twins Client with DefaultAzureCredential in Python\nDESCRIPTION: Creates an Azure Digital Twins client using DefaultAzureCredential for authentication. Requires AZURE_URL, AZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET environment variables to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.digitaltwins.core import DigitalTwinsClient\n\n# DefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\n# It attempts to use multiple credential types in an order until it finds a working credential.\n\n# - AZURE_URL: The URL to the ADT in Azure\nurl = os.getenv(\"AZURE_URL\")\n\n# DefaultAzureCredential expects the following three environment variables:\n# - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n# - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n# - AZURE_CLIENT_SECRET: The client secret for the registered application\ncredential = DefaultAzureCredential()\nservice_client = DigitalTwinsClient(url, credential)\n```\n\n----------------------------------------\n\nTITLE: Translating Documents from Source to Target Container with Azure Document Translation\nDESCRIPTION: This snippet demonstrates how to translate documents from a source container to a target container in Spanish using Azure Document Translation. It creates a client, initiates a translation job, and processes the results after completion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = \"https://<resource-name>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\nsource_container_sas_url_en = \"<sas-url-en>\"\ntarget_container_sas_url_es = \"<sas-url-es>\"\n\ndocument_translation_client = DocumentTranslationClient(endpoint, credential)\n\npoller = document_translation_client.begin_translation(source_container_sas_url_en, target_container_sas_url_es, \"es\")\n\nresult = poller.result()\n\nprint(f\"Status: {poller.status()}\")\nprint(f\"Created on: {poller.details.created_on}\")\nprint(f\"Last updated on: {poller.details.last_updated_on}\")\nprint(f\"Total number of translations on documents: {poller.details.documents_total_count}\")\n\nprint(\"\\nOf total documents...\")\nprint(f\"{poller.details.documents_failed_count} failed\")\nprint(f\"{poller.details.documents_succeeded_count} succeeded\")\n\nfor document in result:\n    print(f\"Document ID: {document.id}\")\n    print(f\"Document status: {document.status}\")\n    if document.status == \"Succeeded\":\n        print(f\"Source document location: {document.source_document_url}\")\n        print(f\"Translated document location: {document.translated_document_url}\")\n        print(f\"Translated to language: {document.translated_to}\\n\")\n    else:\n        print(f\"Error Code: {document.error.code}, Message: {document.error.message}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Creating a ClinicalMatchingClient for Trial Matching\nDESCRIPTION: Code snippet that initializes a ClinicalMatchingClient used for matching patients with clinical trials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a Trial Matcher client\ntrial_matcher_client = ClinicalMatchingClient(endpoint=ENDPOINT,\n                                              credential=AzureKeyCredential(KEY))\n```\n\n----------------------------------------\n\nTITLE: Issuing or Refreshing an Access Token with Custom Expiration for a User - Python\nDESCRIPTION: This snippet requests an access token for a user with a custom expiration using the token_expires_in parameter (timedelta). The default is 24 hours, but the example sets it to 1 hour. Requires prior import of timedelta and valid CommunicationIdentityClient and user objects. Outputs the generated token value.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntoken_expires_in = timedelta(hours=1)\ntokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT], token_expires_in=token_expires_in)\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Weightsandbiases Management Client Library with pip\nDESCRIPTION: Commands to install the required packages for using the Azure Weightsandbiases Management Client. Installs both the management client and the Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/weightsandbiases/azure-mgmt-weightsandbiases/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-weightsandbiases\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Extracting Follow-up Recommendation Inference from Radiology Insights in Python\nDESCRIPTION: This snippet illustrates how to traverse patient results and identify follow-up recommendation inferences in radiology insights data. It utilizes the RadiologyInsightsInferenceType enum to determine the inference type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.FOLLOWUP_RECOMMENDATION:\n            print(f\"Follow-up Recommendation Inference found\") \n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Compute Schedule Client\nDESCRIPTION: Python code to authenticate and initialize the Compute Schedule Management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computeschedule/azure-mgmt-computeschedule/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.computeschedule import ComputeScheduleMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ComputeScheduleMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Generating Account SAS Using Azure Storage File Share SDK\nDESCRIPTION: This code snippet shows how to generate an Account SAS (Shared Access Signature) using the Azure Storage File Share SDK for Python. It replaces the previous method of generating SAS on client objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ngenerate_account_sas()\n```\n\n----------------------------------------\n\nTITLE: Operation Retrying with Acknowledgment IDs in Python\nDESCRIPTION: Demonstrates how to handle operation failures and retry using the same acknowledgment ID to ensure deduplication by the Web PubSub service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  client.join_group(group_name)\nexcept SendMessageError as e:\n  client.join_group(group_name, ack_id=e.ack_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group Custom Function\nDESCRIPTION: Implementation of the create_resource_group custom function which creates a new resource group with specified name, location, tags, and managed-by properties using the ResourceManagementClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/find_sdk/find_sdk_in_cli_command.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_resource_group(cmd, rg_name, location, tags=None, managed_by=None):\n    \"\"\" Create a new resource group.\n    :param str resource_group_name:the desired resource group name\n    :param str location:the resource group location\n    :param str tags:tags in 'a=b c' format\n    \"\"\"\n    rcf = _resource_client_factory(cmd.cli_ctx)\n\n    ResourceGroup = cmd.get_models('ResourceGroup')\n    parameters = ResourceGroup(\n        location=location,\n        tags=tags\n    )\n\n    if cmd.supported_api_version(min_api='2016-09-01'):\n        parameters.managed_by = managed_by\n\n    return rcf.resource_groups.create_or_update(rg_name, parameters)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 2.0.0b2 in Markdown\nDESCRIPTION: Lists new features added in version 2.0.0b2 of the Azure Stream Analytics Python SDK, including new models for data sources and serialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0b2 (2024-01-22)\n\n### Features Added\n\n  - Added model AzureDataExplorerOutputDataSource\n  - Added model DeltaSerialization\n```\n\n----------------------------------------\n\nTITLE: Uploading Custom Logs to Azure Monitor in Python\nDESCRIPTION: This example demonstrates how to upload custom logs to Azure Monitor using the LogsIngestionClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\nrule_id = os.environ['LOGS_DCR_RULE_ID']\nstream_name = os.environ['LOGS_DCR_STREAM_NAME']\n\ncredential = DefaultAzureCredential()\nclient = LogsIngestionClient(endpoint=endpoint, credential=credential, logging_enable=True)\n\nbody = [\n      {\n        \"Time\": \"2021-12-08T23:51:14.1104269Z\",\n        \"Computer\": \"Computer1\",\n        \"AdditionalContext\": \"context-2\"\n      },\n      {\n        \"Time\": \"2021-12-08T23:51:14.1104269Z\",\n        \"Computer\": \"Computer2\",\n        \"AdditionalContext\": \"context\"\n      }\n    ]\n\ntry:\n    client.upload(rule_id=rule_id, stream_name=stream_name, logs=body)\nexcept HttpResponseError as e:\n    print(f\"Upload failed: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory for DNS Private Zones Management\nDESCRIPTION: Demonstrates how to authenticate using DefaultAzureCredential and create a PrivateDnsManagementClient instance. Requires environment variables for Azure credentials to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.privatedns import PrivateDnsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PrivateDnsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Container Registry Client\nDESCRIPTION: Initialize ContainerRegistryClient with Azure AD authentication using DefaultAzureCredential\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a ContainerRegistryClient that will authenticate through Active Directory\nfrom azure.containerregistry import ContainerRegistryClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://mycontainerregistry.azurecr.io\"\naudience = \"https://management.azure.com\"\nclient = ContainerRegistryClient(endpoint, DefaultAzureCredential(), audience=audience)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Configuration Client Library in Python via Pip\nDESCRIPTION: This snippet demonstrates how to install the Azure App Configuration client library using pip. The only prerequisite is Python 3.8 or later. The command downloads and installs the latest version of the package from PyPI, making its classes and functions available to your Python application.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-appconfiguration\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Large Instance Management Client in Python\nDESCRIPTION: This snippet demonstrates how to authenticate and initialize the Large Instance Management Client using DefaultAzureCredential. It requires environment variables for Azure credentials and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/largeinstance/azure-mgmt-largeinstance/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.largeinstance import LargeInstanceMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = LargeInstanceMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Asynchronous Transports in Python\nDESCRIPTION: This snippet showcases the initialization of various asynchronous transports available in Azure Core: `AsyncioRequestsTransport` (requests with asyncio), `TrioRequestsTransport` (requests with trio), and `AioHttpTransport` (aiohttp with asyncio). It demonstrates how to pass a chosen asynchronous transport (e.g., `AioHttpTransport`) to an asynchronous SDK client (`FooServiceClient`) during instantiation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.foo.aio import FooServiceClient\nfrom azure.core.pipeline.transport import (\n    # Identical implementation as the synchronous RequestsTransport wrapped in an asynchronous using the\n    # built-in asyncio event loop.\n    AsyncioRequestsTransport,\n\n    # Identical implementation as the synchronous RequestsTransport wrapped in an asynchronous using the\n    # third party trio event loop.\n    TrioRequestsTransport,\n\n    # Fully asynchronous implementation using the aiohttp library, using the built-in asyncio event loop.\n    AioHttpTransport,\n)\n\nclient = FooServiceClient(endpoint, creds, transport=AioHttpTransport())\nresponse = await client.get_foo_properties()\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureMonitorTraceExporter with Connection String\nDESCRIPTION: Creates an instance of AzureMonitorTraceExporter using an explicit connection string from environment variables for distributed tracing telemetry to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Using async KeyClient with azure-keyvault-keys\nDESCRIPTION: Shows how to create and use an async KeyClient for asynchronous operations in azure-keyvault-keys.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client is no longer needed\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\n\n# alternatively, use the client as an async context manager\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Client Library and Azure Identity in Python\nDESCRIPTION: This snippet shows how to install the required packages for using the Azure Monitor Client Library and Azure Identity in Python using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-monitor\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Search Management Client\nDESCRIPTION: Python code example demonstrating how to authenticate with the Azure Search Management Client using DefaultAzureCredential. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-mgmt-search/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.search import SearchManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SearchManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Security Rules Source/Destination Updates - Version 1.6.0\nDESCRIPTION: Updates to address prefix handling in security rules, making source and destination address prefixes mutually exclusive with application security groups.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n**Bug fixes**\n\n- sourceAddressPrefix, sourceAddressPrefixes and sourceApplicationSecurityGroups are mutually exclusive\n- destinationAddressPrefix, destinationAddressPrefixes and destinationApplicationSecurityGroups are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Rooms SDK with pip (Bash)\nDESCRIPTION: This snippet demonstrates how to install the Azure Communication Rooms SDK for Python using pip. It requires Python 3.7 or later to be installed in your environment. Running the command will fetch and install the package and its dependencies, making it available for import in your Python scripts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-communication-rooms\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Operation in Azure Data Lake Storage SDK\nDESCRIPTION: This code snippet shows how to enable detailed logging for a single operation in the Azure Data Lake Storage SDK, even when it's not enabled for the entire client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nservice_client.list_file_systems(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Validation for Time Series Data in Python\nDESCRIPTION: Defines a cross-validation function using TimeSeriesSplit from scikit-learn to evaluate model performance using MAE and RMSE metrics.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import TimeSeriesSplit\n\nts_cv = TimeSeriesSplit()\n\ndef evaluate(model, X, Y, cv):\n    cv_results = cross_validate(\n        model,\n        X,\n        Y,\n        cv=cv,\n        scoring=[\"neg_mean_absolute_error\", \"neg_root_mean_squared_error\"],\n    )\n    mae = -cv_results[\"test_neg_mean_absolute_error\"]\n    rmse = -cv_results[\"test_neg_root_mean_squared_error\"]\n    print(\n        f\"Mean Absolute Error:     {mae.mean():.3f} +/- {mae.std():.3f}\\n\"\n        f\"Root Mean Squared Error: {rmse.mean():.3f} +/- {rmse.std():.3f}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Copying Blob Tags in Python Azure Blob Storage SDK\nDESCRIPTION: Demonstrates how to copy source blob tags when using start_copy_from_url() by specifying 'COPY' for the tags keyword.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nblob_client.start_copy_from_url(source_url, tags=\"COPY\")\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token and Initializing QueueServiceClient in Python\nDESCRIPTION: Generate a Shared Access Signature (SAS) token and use it to initialize a QueueServiceClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom azure.storage.queue import QueueServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\nsas_token = generate_account_sas(\n    account_name=\"<storage-account-name>\",\n    account_key=\"<account-access-key>\",\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    start=datetime.utcnow(),\n    expiry=datetime.utcnow() + timedelta(hours=1)\n)\n\nqueue_service_client = QueueServiceClient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=sas_token)\n```\n\n----------------------------------------\n\nTITLE: Change Point Detection Implementation\nDESCRIPTION: Implementation of change point detection to identify trend changes in time series data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector.models import *\n\n\nSUBSCRIPTION_KEY = os.environ[\"ANOMALY_DETECTOR_KEY\"]\nANOMALY_DETECTOR_ENDPOINT = os.environ[\"ANOMALY_DETECTOR_ENDPOINT\"]\nTIME_SERIES_DATA_PATH = os.path.join(\"sample_data\", \"request-data.csv\")\nclient = AnomalyDetectorClient(ANOMALY_DETECTOR_ENDPOINT, AzureKeyCredential(SUBSCRIPTION_KEY))\n\nseries = []\ndata_file = pd.read_csv(TIME_SERIES_DATA_PATH, header=None, encoding=\"utf-8\", parse_dates=[0])\nfor index, row in data_file.iterrows():\n    series.append(TimeSeriesPoint(timestamp=row[0], value=row[1]))\n\nrequest = UnivariateChangePointDetectionOptions(\n    series=series,\n    granularity=TimeGranularity.DAILY,\n)\n\n\nif any(response.is_change_point):\n    print(\"An change point was detected at index:\")\n    for i, value in enumerate(response.is_change_point):\n        if value:\n            print(i)\nelse:\n    print(\"No change point were detected in the time series.\")\n```\n\n----------------------------------------\n\nTITLE: Creating a KeyVaultBackupClient with Managed Identity in Python\nDESCRIPTION: Shows how to create a KeyVaultBackupClient using ManagedIdentityCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.administration import KeyVaultBackupClient\n\nMANAGED_HSM_URL = os.environ[\"MANAGED_HSM_URL\"]\nMANAGED_IDENTITY_CLIENT_ID = os.environ[\"CLIENT_ID\"]\ncredential = ManagedIdentityCredential(client_id=MANAGED_IDENTITY_CLIENT_ID)\nclient = KeyVaultBackupClient(vault_url=MANAGED_HSM_URL, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Retrieving IANA Timezone IDs with Azure Maps Timezone SDK in Python\nDESCRIPTION: This snippet shows how to get a full list of IANA time zone IDs using the Azure Maps Timezone SDK. It creates a MapsTimeZoneClient instance with an Azure Key Credential and handles potential HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_iana_timezone_ids():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.timezone import MapsTimeZoneClient\n\n    timezone_client = MapsTimeZoneClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = timezone_client.get_iana_timezone_ids()\n        print(result)\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_iana_timezone_ids()\n```\n\n----------------------------------------\n\nTITLE: Extracting Critical Result Inference from Radiology Insights Results (Python)\nDESCRIPTION: Analyzes the output (`radiology_insights_result`) from a Radiology Insights job. It iterates through patient results and inferences, specifically looking for 'Critical Result' inferences. If found, it extracts the description of the critical result and prints it. Depends on the `azure.healthinsights.radiologyinsights.models` module and a populated `radiology_insights_result` object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.CRITICAL_RESULT:\n            critical_result = ri_inference.result\n                print(\n                f\"Critical Result Inference found: {critical_result.description}\")\n```\n\n----------------------------------------\n\nTITLE: Key Client Usage with Context Manager\nDESCRIPTION: Example showing KeyClient usage with context manager pattern for automatic resource cleanup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nwith KeyClient() as key_client:\n    # operations with key_client\n    # socket is automatically closed on exit\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Client via Keyword Arguments in Python (v1.0.0b1)\nDESCRIPTION: Starting with version 1.0.0b1, the `config` attribute on client objects is removed. Configuration settings should now be passed directly as keyword arguments (kwargs) during client initialization. This relies on capabilities provided by the `azure-core` library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Example of new configuration method:\nMyClient(credential, subscription_id, enable_logging=True)\n\n# See azure-core documentation for available configuration kwargs.\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Messages\nDESCRIPTION: Shows how to send messages to a chat thread with optional parameters like sender display name and message type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.chat import ChatMessageType\n\ntopic = \"test topic\"\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nthread_id = create_chat_thread_result.chat_thread.id\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\ncontent='hello world'\nsender_display_name='sender name'\nchat_message_type = ChatMessageType.TEXT\n\n# without specifying sender_display_name and chat_message_type\nsend_message_result = chat_thread_client.send_message(content)\nsend_message_result_id = send_message_result.id\nprint(\"Message sent: id: \", send_message_result_id)\n\n# specifying sender_display_name and chat_message_type\nsend_message_result_w_type = chat_thread_client.send_message(\n            content,\n            sender_display_name=sender_display_name,\n            chat_message_type=chat_message_type # equivalent to chat_message_type = 'text'\n)\nsend_message_result_w_type_id = send_message_result_w_type.id\nprint(\"Message sent: id: \", send_message_result_w_type_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory in MixedRealityStsClient\nDESCRIPTION: Creates a MixedRealityStsClient using Azure Active Directory authentication. Uses DefaultAzureCredential from the azure.identity package, which is the recommended approach for production applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mixedreality.authentication import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\ndefault_credential = DefaultAzureCredential()\n\nclient = MixedRealityStsClient(account_id, account_domain, default_credential)\n```\n\n----------------------------------------\n\nTITLE: Annotating Callables and Higher-Order Functions Using Python Typing\nDESCRIPTION: Demonstrates how to use typing.Callable for annotating functions that accept or return functions, with strict signature enforcement. Shows add, multiply, and do_math functions leveraging static annotations to ensure callable interface. Inputs include functions and integers; outputs are integer results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Callable\\n\\n\\ndef add(x: int, y: int) -> int:\\n    return x + y\\n\\n\\ndef multiply(x: int, y: int) -> int:\\n    return x * y\\n\\n\\ndef do_math(op: Callable[[int, int], int], x: int, y: int) -> int:\\n    return op(x, y)\\n\\n\\nproduct = do_math(multiply, 2, 2)\\nsum = do_math(add, 2, 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Container Instance Name as Environment Variable in Shell\nDESCRIPTION: This shell command sets the CONTAINER_NAME environment variable to a formatted string based on the Python version in use. It is used when deploying the test container. Input parameters must be pre-defined, and correct string slicing is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport CONTAINER_NAME=managed-id-container-test-python${PYTHON_VERSION::1}\n```\n\n----------------------------------------\n\nTITLE: Getting Schema ID in Python using Azure Schema Registry Client\nDESCRIPTION: This snippet demonstrates how to retrieve the schema ID of a schema by its definition and properties using the SchemaRegistryClient. It requires the Azure Identity and Schema Registry libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMA_REGISTRY_GROUP']\nname = \"your-schema-name\"\nformat = \"Avro\"\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\n\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\n    id = schema_properties.id\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Subscription for Cosmos DB Operations\nDESCRIPTION: Shell command to set the current Azure subscription context using the Azure CLI. This ensures all subsequent commands run against the correct subscription.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naz account set --subscription $subscriptionId\n```\n\n----------------------------------------\n\nTITLE: Duck Typing with Protocol in Python\nDESCRIPTION: Demonstrates structural subtyping using Protocol to define a SupportsFly interface that requires a fly() method. Shows type checking for compatible and incompatible implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n# from typing import Protocol  # Python >=3.8\nfrom typing_extensions import Protocol\n\n\nclass SupportsFly(Protocol):\n    def fly(self) -> None: ...\n\n\nclass Butterfly:\n    def fly(self) -> None: ...\n\n    def sunbathe(self) -> None: ...\n\n\nclass Plane:\n    def fly(self) -> None: ...\n\n\nclass Penguin:\n    def waddle(self) -> None: ...\n\n\ndef ascend(f: SupportsFly) -> None:\n    f.fly()\n\n\np = Plane()\nascend(p)  # OK\n\nb = Butterfly()\nascend(b)  # OK\n\ng = Penguin()\nascend(g)  # Mypy complains below\n```\n\n----------------------------------------\n\nTITLE: Listing and retrieving Azure Digital Twins models\nDESCRIPTION: Shows how to list all models and retrieve a specific model by ID using the Azure Digital Twins SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlisted_models = service_client.list_models()\nfor model in listed_models:\n    print(model)\n\n# Get a model\nget_model = service_client.get_model(model_id)\nprint('Get Model:')\nprint(get_model)\n```\n\n----------------------------------------\n\nTITLE: Autorest Configuration for Azure AgriFood Farming FarmBeats SDK\nDESCRIPTION: YAML configuration for Autorest specifying input swagger file, output settings, package details, and security configurations. This determines how the SDK will be generated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/e38daec67d57ef9c4804b1e3055753407e45fa71/specification/agrifood/data-plane/Microsoft.AgFoodPlatform/preview/2022-11-01-preview/agfood.json\noutput-folder: ../azure/agrifood/farming\nnamespace: azure.agrifood.farming\npackage-name: azure-agrifood-farming\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\ntitle: FarmBeatsClient\npackage-version: 1.0.0b2\nsecurity: AADToken\nsecurity-scopes: https://farmbeats.azure.net/.default\n```\n\n----------------------------------------\n\nTITLE: Initializing ServiceBusClient with Updated Configuration Parameters\nDESCRIPTION: Shows the new configuration parameters available when creating a ServiceBusClient instance in version 7.0.0b1, including credential and http_proxy settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nServiceBusClient(\n    credential=token_credential,  # implements TokenCredential interface\n    http_proxy={\"proxy_settings\": \"value\"},  # dictionary of proxy settings\n    fully_qualified_namespace=\"namespace.servicebus.windows.net\",\n    logging_enable=True\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Power BI Embedded Client\nDESCRIPTION: Example showing how to authenticate the Power BI Embedded Management Client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/powerbiembedded/azure-mgmt-powerbiembedded/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.powerbiembedded import PowerBIEmbeddedManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PowerBIEmbeddedManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Thread - Azure SDK for Python\nDESCRIPTION: Shows how to create a new thread attached to an agent using the Azure SDK for Python. Requires an initialized project client. No additional parameters are needed. The output is a thread instance, used for managing individual agent sessions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nthread = project_client.agents.create_thread()\n```\n\n----------------------------------------\n\nTITLE: Creating RSA Keys with CryptographyClient in Python\nDESCRIPTION: Example of using the new create_rsa_private_key and create_rsa_public_key methods added in version 4.9.0b2 to create KeyVaultRSAPrivateKey and KeyVaultRSAPublicKey instances.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.keys import CryptographyClient\n\ncrypto_client = CryptographyClient(key_id, credential)\nprivate_key = crypto_client.create_rsa_private_key()\npublic_key = crypto_client.create_rsa_public_key()\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Python SDK Version History\nDESCRIPTION: Complete changelog markdown documenting the evolution of the Azure Storage Python SDK including features, bug fixes, breaking changes, and API version support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.5.0 (2017-12-12)\n\n**Features**\n\n  - Add StorageV2 as valid kind\n  - Add official support for API version 2017-10-01\n\n## 1.4.0 (2017-09-26)\n\n**Bug fixes**\n\n  - Add skus operations group to the generic client\n\n**Features**\n\n  - Add official support for API version 2016-01-01\n\n## 1.3.0 (2017-09-08)\n\n**Features**\n\n  - Adds list_skus operation (2017-06-01)\n\n**Breaking changes**\n\n  - Rename the preview attribute \"network_acls\" to \"network_rule_set\"\n\n## 1.2.1 (2017-08-14)\n\n**Bugfixes**\n\n  - Remove \"tests\" packaged by mistake (#1365)\n\n## 1.2.0 (2017-07-19)\n\n**Features**\n\n  - Api version 2017-06-01 is now the default\n  - This API version adds Network ACLs objects (2017-06-01 as preview)\n\n## 1.1.0 (2017-06-28)\n\n  - Added support for https traffic only (2016-12-01)\n\n## 1.0.0 (2017-05-15)\n\n  - Tag 1.0.0rc1 as stable (same content)\n\n## 1.0.0rc1 (2017-04-11)\n\n**Features**\n\nTo help customers with sovereign clouds (not general Azure), this\nversion has official multi ApiVersion support for 2015-06-15 and\n2016-12-01\n\n## 0.31.0 (2017-01-19)\n\n  - New `list_account_sas` operation\n  - New `list_service_sas` operation\n  - Name syntax are now checked before RestAPI call, not the server\n    (exception changed)\n\nBased on API version 2016-12-01.\n\n## 0.30.0 (2016-11-14)\n\n  - Initial release. Based on API version 2016-01-01 Note that this is\n    the same content as 0.30.0rc6, committed as 0.30.0.\n\n## 0.20.0 (2015-08-31)\n\n  - Initial preview release. Based on API version 2015-05-01-preview.\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Confidential Ledger Client Library with pip\nDESCRIPTION: This command installs the Azure Confidential Ledger service client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-confidentialledger\n```\n\n----------------------------------------\n\nTITLE: Matching Collection Type Annotations with Required Operations\nDESCRIPTION: Demonstrates the importance of ensuring that the collection type hint supports the operations used in the function body, such as using Sequence instead of Iterable when length checking is needed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Sequence, Iterable\n\n# No: the function calls len(), Iterable doesn't support it\ndef create_batch(entities: Iterable[Entity]) -> None:\n    if len(entities) > 1:\n        ...\n\n# Yes:\ndef create_batch(entities: Sequence[Entity]) -> None:\n    if len(entities) > 1:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Azure SDK Python\nDESCRIPTION: Lists required Python packages for building documentation. Includes Sphinx for documentation generation, Read the Docs theme for styling, and MyST Parser for Markdown support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nsphinx\nsphinx_rtd_theme\nmyst-parser\n```\n\n----------------------------------------\n\nTITLE: Creating an EventHubConsumerClient from a Connection String in Python\nDESCRIPTION: This Python snippet demonstrates initializing an `EventHubConsumerClient` using the `from_connection_string` method. It requires the Event Hubs namespace connection string, the consumer group name, and the specific event hub name. This is a fundamental step before consuming events.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.eventhub import EventHubConsumerClient\neventhub_client = EventHubConsumerClient.from_connection_string(\"my_eventhub_namespace_connection_string\", \"my_consumer_group\", eventhub_name=\"my_eventhub\")\n```\n\n----------------------------------------\n\nTITLE: Sending Custom HTTP Requests to Document Intelligence API in Python\nDESCRIPTION: Shows how to use the send_request method to make custom HTTP requests to the Document Intelligence API while leveraging the client's existing authentication pipeline. This example retrieves resource details using a manually constructed request.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.rest import HttpRequest\nfrom azure.ai.documentintelligence import DocumentIntelligenceAdministrationClient\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\n\nclient = DocumentIntelligenceAdministrationClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\n# The `send_request` method can send custom HTTP requests that share the client's existing pipeline,\n# Now let's use the `send_request` method to make a resource details fetching request.\n# The URL of the request should be absolute, and append the API version used for the request.\nrequest = HttpRequest(method=\"GET\", url=f\"{endpoint}/documentintelligence/info?api-version=2024-11-30\")\nresponse = client.send_request(request)\nresponse.raise_for_status()\nresponse_body = response.json()\nprint(\n    f\"Our resource has {response_body['customDocumentModels']['count']} custom models, \"\n    f\"and we can have at most {response_body['customDocumentModels']['limit']} custom models.\"\n    f\"The quota limit for custom neural document models is {response_body['customNeuralDocumentModelBuilds']['quota']} and the resource has\"\n    f\"used {response_body['customNeuralDocumentModelBuilds']['used']}. The resource quota will reset on {response_body['customNeuralDocumentModelBuilds']['quotaResetDateTime']}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK Using Python Logging Module\nDESCRIPTION: This snippet shows how to configure Python's standard logging library to capture logs from the Azure SDK, including both 'azure.core' and 'azure.ai.vision.imageanalysis'. It sets up a logger, selects a log level, attaches a handler to stdout (or optionally to a file), and defines a log message format with timestamps. Dependencies include Python's built-in 'logging' and 'sys' modules. Key parameters are the logger name ('azure'), logging level, handler type (stdout or file), and formatter. The expected input is log-generating actions by the SDK, and the output is formatted and redirected log entries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\n# Acquire the logger for this client library. Use 'azure' to affect both\n# 'azure.core` and `azure.ai.vision.imageanalysis' libraries.\nlogger = logging.getLogger(\"azure\")\n\n# Set the desired logging level. logging.INFO or logging.DEBUG are good options.\nlogger.setLevel(logging.INFO)\n\n# Direct logging output to stdout (the default):\nhandler = logging.StreamHandler(stream=sys.stdout)\n# Or direct logging output to a file:\n# handler = logging.FileHandler(filename = 'sample.log')\nlogger.addHandler(handler)\n\n# Optional: change the default logging format. Here we add a timestamp.\nformatter = logging.Formatter(\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\nhandler.setFormatter(formatter)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Recognizer Endpoint with Azure CLI - Bash\nDESCRIPTION: Fetches the endpoint URL for a Form Recognizer resource. The command uses the Azure CLI and returns the endpoint property required to configure SDK clients. Replace placeholders with actual resource and group names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get the endpoint for the Form Recognizer resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Single Operation Logging in Azure Cosmos DB\nDESCRIPTION: Demonstrates how to enable logging for a single database creation operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndatabase = client.create_database(DATABASE_NAME, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Tables SDK in Python\nDESCRIPTION: Shows how to configure detailed DEBUG level logging for the Azure Tables SDK. The example sets up a logger for the 'azure' namespace and enables logging for a TableServiceClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.data.tables import TableServiceClient\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = TableServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages and Batching - Service Bus v7 - Python\nDESCRIPTION: Illustrates sending single, multiple, and batched messages in v7. Sending can accept a single ServiceBusMessage, a list of them, or a ServiceBusMessageBatch created via create_message_batch. Batching guarantees size limits via MessageSizeExceededError. The sender is used as a context manager, and APIs have been renamed to send_messages in keeping with SDK-wide conventions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith sender:\n\n    # send a single message\n    sender.send_messages(ServiceBusMessage(\"Hello world!\"))\n\n    # send multiple messages. This can fail if the batch exceeded size limit\n    sender.send_messages([ServiceBusMessage(\"data1\"), [ServiceBusMessage(\"data2\"), [ServiceBusMessage(\"data3\")])\n\n    # safely send multiple messages by using a batch object\n    message_batch = sender.create_message_batch()\n    # add_message will throw MessageSizeExceededError if added size results in the batch exceeding the maximum batch size\n    message_batch.add_message(ServiceBusMessage(\"data\"))\n    sender.send_messages(message_batch)\n```\n\n----------------------------------------\n\nTITLE: Installing Aiohttp for Async API Support - Bash\nDESCRIPTION: Installs aiohttp to provide async HTTP transport required for asynchronous usage of the Azure Service Bus Python SDK. Use this after installing azure-servicebus and azure-identity if you intend to write async Python code with Service Bus. No additional configuration required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Digital Twins Client in Python\nDESCRIPTION: Sets up the Azure Digital Twins client using AzureCliCredential for authentication. Requires the azure-identity and azure-digitaltwins-core packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/02_Purchasing_Tickets.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureCliCredential\nfrom azure.digitaltwins.core import DigitalTwinsClient\n\n# using yaml instead of \nimport yaml\nimport uuid\n\n# using altair instead of matplotlib for vizuals\nimport numpy as np\nimport pandas as pd\n\n# you will get this from the ADT resource at portal.azure.com\nyour_digital_twin_url = \"home-test-twin.api.wcus.digitaltwins.azure.net\"\n\nazure_cli = AzureCliCredential()\nservice_client = DigitalTwinsClient(\n    your_digital_twin_url, azure_cli)\nservice_client\n```\n\n----------------------------------------\n\nTITLE: Running Azure Maps Search SDK Samples with Command Line\nDESCRIPTION: This code snippet provides bash commands to run the sample code for Azure Maps Search SDK. It demonstrates how to set the subscription key environment variable, install the SDK, and run various sample scripts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-search --pre\n\npython samples/sample_geocode.py\npython samples/sample_geocode_batch.py\npython samples/sample_get_polygon.py\npython samples/sample_reverse_geocode.py\npython samples/sample_reverse_geocode_batch.py\n```\n\n----------------------------------------\n\nTITLE: Running Specific Performance Test for Azure Key Vault Keys\nDESCRIPTION: This command shows how to run a specific performance test (GetKeyTest) using the perfstress tool for the Azure Key Vault Keys SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-keys/tests> perfstress GetKeyTest\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Router Queue (Python)\nDESCRIPTION: Creates a `RouterQueue` object, associating it with a previously created distribution policy using its ID. It then uses the `upsert_queue` method of the `JobRouterAdministrationClient` to create or update the queue in Azure Communication Services. Requires an initialized `JobRouterAdministrationClient` and an existing distribution policy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    RouterQueue\n)\n\nqueue: RouterQueue = RouterQueue(\n    distribution_policy_id = \"distribution-policy-1\"\n)\n\nqueue: RouterQueue = router_admin_client.upsert_queue(\n    \"queue-1\",\n    queue\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Case-Insensitive Enum with CaseInsensitiveEnumMeta in Python\nDESCRIPTION: This snippet demonstrates how to create a custom string-based enumeration (`MyCustomEnum`) that supports case-insensitive member lookup. It achieves this by using `CaseInsensitiveEnumMeta` from `azure.core` as the metaclass for the Enum definition. Requires `enum.Enum` and `azure.core.CaseInsensitiveEnumMeta`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom azure.core import CaseInsensitiveEnumMeta\n\nclass MyCustomEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    FOO = 'foo'\n    BAR = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with AzureKeyCredential\nDESCRIPTION: This snippet demonstrates how to authenticate an ExampleClient using AzureKeyCredential for libraries that support it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.example import ExampleClient\n\ncredential = \"myCredential\"\nclient = ExampleClient(\n    endpoint=\"https://www.example.org/\",\n    credential=AzureKeyCredential(credential)\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Static Map Image\nDESCRIPTION: Example of generating a static map image for a specific rectangular area with customizable zoom level.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.render import MapsRenderClient\n\nmaps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_render_client.get_map_static_image(\n    zoom=10,\n    bounding_box_private=[13.228, 52.4559, 13.5794, 52.629]\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Purview Roles\nDESCRIPTION: Example of listing all roles using PurviewMetadataPoliciesClient with DefaultAzureCredential authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.administration.metadatapolicies import PurviewMetadataPoliciesClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewMetadataPoliciesClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\nresponse = client.metadata_roles.list()\nresult = [item for item in response]\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Access Token Synchronously with MixedRealityStsClient\nDESCRIPTION: Demonstrates how to retrieve an access token synchronously using the MixedRealityStsClient. The token can be used to authenticate requests to Mixed Reality services with a lifetime of 24 hours.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.authentication import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = client.get_token()\n```\n\n----------------------------------------\n\nTITLE: Performing a JOIN Query in Azure Digital Twins\nDESCRIPTION: Illustrates a more complex query using JOIN to relate twins based on their relationships. This query finds customers located in a specific area (line-2) and analyzes their satisfaction levels.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/04_Lots_on_Queries.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery_expression =\"\"\"\nSELECT T, CT\nFROM DIGITALTWINS T\nJOIN CT RELATED T.locatedIn\nWHERE CT.$dtId = 'line-2'\n\"\"\"\n\ncustomers_in_area_2 = query_to_df(query_expression)\ncustomers_in_area_2\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Edge Order Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the Azure Edge Order Management Client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgeorder/azure-mgmt-edgeorder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.edgeorder import EdgeOrderManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EdgeOrderManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Dictionary for Entity Translation\nDESCRIPTION: Shows how to use a custom dictionary for translating specific terms. Uses mstrans:dictionary markup to specify custom translations for compound nouns and proper names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from_language = \"en\"\n    to_language = [\"cs\"]\n    input_text_elements = [\n        'The word <mstrans:dictionary translation=\"wordomatic\">wordomatic</mstrans:dictionary> is a dictionary entry.'\n    ]\n\n    response = text_translator.translate(\n        body=input_text_elements, to_language=to_language, from_language=from_language\n    )\n    translation = response[0] if response else None\n\n    if translation:\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing xUnit-style Test Setup in Python\nDESCRIPTION: Example showing how to use setup_method and setup_class for pre-test initialization in a test class. setup_method runs before each test and has access to instance utilities, while setup_class runs once before all tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests-advanced.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.azure_recorded_testcase import get_credential\n\nclass TestService(AzureRecordedTestCase):\n    def setup_method(self, method):\n        \"\"\"This method is called before each test in the class executes.\"\"\"\n        credential = self.get_credential(ServiceClient)  # utility from parent class\n        self.client = ServiceClient(\"...\", credential)\n\n    @classmethod\n    def setup_class(cls):\n        \"\"\"This method is called only once, before any tests execute.\"\"\"\n        credential = get_credential()  # only module-level and classmethod utilities are available\n        cls.client = ServiceClient(\"...\", credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Connected Cache Client\nDESCRIPTION: Python code to authenticate and initialize the Connected Cache Management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedcache/azure-mgmt-connectedcache/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.connectedcache import ConnectedCacheMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ConnectedCacheMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing ChatCompletionsClient with Custom HTTP Headers in Python\nDESCRIPTION: Shows how to add custom HTTP request headers when initializing the `ChatCompletionsClient` (or other clients in the package). A dictionary of header names and values is passed to the `headers` keyword argument in the client constructor. Requires endpoint and credential details (`AzureKeyCredential`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n    headers={\"header1\", \"value1\", \"header2\", \"value2\"}\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Detecting Sentence Boundaries with Specified Language Parameters in Azure Translator\nDESCRIPTION: Shows how to use the Azure Translator Text API to detect sentence boundaries in text when the source language and script are known. The code provides the language and script parameters and processes the response to extract boundary information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from_language = \"zh-Hans\"\n    source_script = \"Latn\"\n    input_text_elements = [\"zhè shì gè cè shì。\"]\n\n    response = text_translator.find_sentence_boundaries(\n        body=input_text_elements, language=from_language, script=source_script\n    )\n    sentence_boundaries = response[0] if response else None\n\n    if sentence_boundaries:\n        detected_language = sentence_boundaries.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        print(f\"The detected sentence boundaries:\")\n        for boundary in sentence_boundaries.sent_len:\n            print(boundary)\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: Adding Close Method and Context Manager Support to Credentials (Python)\nDESCRIPTION: Credentials in the `azure.identity` namespace gained context manager methods (`__enter__`, `__exit__`) and an explicit `close()` method. Using a credential in a `with` statement or calling `close()` ensures its underlying transport session is properly closed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclose()\n```\n\nLANGUAGE: Python\nCODE:\n```\nwith` block\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Storage Management Client in Python\nDESCRIPTION: This Python code snippet demonstrates how to initialize the `StorageManagementClient`. It imports required classes, retrieves the Azure Subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable, uses `DefaultAzureCredential` to handle authentication (which relies on environment variables like `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`), and then creates an instance of the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Analytics Management SDK for Python\nDESCRIPTION: Commands to install the Azure Network Analytics Management SDK and Azure Identity library using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkanalytics/azure-mgmt-networkanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-networkanalytics\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Requests with Client's Pipeline\nDESCRIPTION: Added a send_request method to clients for sending custom requests using the client's existing pipeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclient.send_request(...)\n```\n\n----------------------------------------\n\nTITLE: Declaring Covariant and Contravariant TypeVars in Python\nDESCRIPTION: Provides sample patterns for creating explicitly covariant and contravariant TypeVar symbols, useful for defining type relationships in generic classes and APIs. Relies on typing.TypeVar as the primary dependency. These declarations improve static type expressiveness in inheritance hierarchies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar\\n\\nT_co = TypeVar(\\\"T_co\\\", covariant=True)\\nT_contra = TypeVar(\\\"T_contra\\\", contravariant=True)\n```\n\n----------------------------------------\n\nTITLE: Getting an Azure Digital Twin in Python\nDESCRIPTION: Shows how to retrieve a specific digital twin using its ID with the DigitalTwinsClient.get_digital_twin() method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nget_twin = service_client.get_digital_twin(digital_twin_id)\nprint('Get Digital Twin:')\nprint(get_twin)\n```\n\n----------------------------------------\n\nTITLE: Listing Attached Received Shares with PurviewSharingClient - Python\nDESCRIPTION: Lists attached received shares by specifying the storage account's resource ID and the desired ordering. The response is printed for examination, enabling consumers to enumerate their currently active attached shares.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport os\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\nconsumer_storage_account_resource_id = \\\"/subscriptions/{subscription-id}/resourceGroups/consumer-storage-rg/providers/Microsoft.Storage/storageAccounts/consumerstorage\\\"\\n\\nlist_attached_response = client.received_shares.list_attached(\\n    reference_name=consumer_storage_account_resource_id,\\n    order_by=\\\"properties/createdAt desc\\\")\\nprint(list_attached_response)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Event Hub Partitions\nDESCRIPTION: Example demonstrating how to create an EventHubConsumerClient using DefaultAzureCredential and connect to an Event Hub. Shows basic client initialization and authentication setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.identity import DefaultAzureCredential\n\nFULLY_QUALIFIED_NAMESPACE = os.environ[\"EVENT_HUB_HOSTNAME\"]\nEVENTHUB_NAME = os.environ['EVENT_HUB_NAME']\n\nconsumer_client = EventHubConsumerClient(\n    fully_qualified_namespace=FULLY_QUALIFIED_NAMESPACE,\n    consumer_group='$Default',\n    eventhub_name=EVENTHUB_NAME,\n    credential=DefaultAzureCredential(),\n)\n\nwith consumer_client:\n    pass # consumer_client is now ready to be used.\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Code Generation (PowerShell)\nDESCRIPTION: Navigates into the directory containing the Swagger definition file and executes the Autorest tool to generate code based on the 'SWAGGER.md' file. Assumes Autorest is installed and the specified Swagger file exists.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n```ps\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n```\n\n----------------------------------------\n\nTITLE: Getting an Existing Container from Azure Cosmos DB\nDESCRIPTION: This code shows how to retrieve an existing container from a database in Azure Cosmos DB using the get_container_client method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Update Client with Azure SDK - Python\nDESCRIPTION: This snippet demonstrates how to instantiate the DeviceUpdateClient using credentials and parameters loaded from environment variables. It requires both the azure-identity and azure-iot-deviceupdate packages, Python 3.6+, and properly configured environment variables. The client object created is used for subsequent operations such as updating or deleting updates in the Device Update for IoT Hub service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeleteUpdate/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nendpoint = os.environ[\"DEVICEUPDATE_ENDPOINT\"]\\ninstance = os.environ[\"DEVICEUPDATE_INSTANCE_ID\"]\\nclient = DeviceUpdateClient(credential=DefaultAzureCredential(), endpoint=endpoint, instance_id=instance)\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone by ID using MapsTimeZoneClient - Python\nDESCRIPTION: Provides example code for retrieving timezone details for a specified IANA timezone ID using the MapsTimeZoneClient. The sample demonstrates authentication via subscription key, instantiation of the client, execution of the get_timezone_by_id method, and error handling for HTTP response exceptions. The returned data includes current, historical, and future timezone information for the provided ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_timezone_by_id():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.timezone import MapsTimeZoneClient\n\n    timezone_client = MapsTimeZoneClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = timezone_client.get_timezone_by_id(timezone_id=\"sr-Latn-RS\")\n        print(result)\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_timezone_by_id()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Devcenter Management Client using DefaultAzureCredential\nDESCRIPTION: Python code to authenticate and initialize the Azure Devcenter Management Client using DefaultAzureCredential. This sample demonstrates how to use environment variables for authentication parameters and create a client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-mgmt-devcenter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devcenter import DevCenterMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevCenterMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cognitive Services Management Client and Dependencies\nDESCRIPTION: Commands for installing the required packages using pip. The azure-mgmt-cognitiveservices package provides the client library, while azure-identity is needed for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-mgmt-cognitiveservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-cognitiveservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Importing StorageManagementClient in Python\nDESCRIPTION: Updated import statement for StorageManagementClient after code generation changes in version 4.0.0. The client can no longer be imported from the storage_management_client submodule.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.storage import StorageManagementClient\n```\n\n----------------------------------------\n\nTITLE: SecurityRule Constructor Parameter Order Fix - Version 1.7.1\nDESCRIPTION: Documents a breaking change fix in the SecurityRule constructor parameter order to maintain consistency with versions prior to 1.6.0, ensuring semantic versioning compliance for third-party dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n**Bugfixes**\n\nFix `SecurityRule` constructor parameters order to respect the one used until 1.5.0.\n```\n\n----------------------------------------\n\nTITLE: Get Geolocation Example\nDESCRIPTION: Example demonstrating how to use the geolocation service to get and validate country codes for IP addresses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.geolocation import MapsGeolocationClient\n\nBLOCK_COUNTRY_LIST = ['US', 'TW', 'AF', 'AX', 'DL']\nINCOME_IP_ADDRESS = \"2001:4898:80e8:b::189\"\ngeolocation_result = client.get_country_code(ip_address=INCOME_IP_ADDRESS)\n\nresult_country_code = geolocation_result.iso_code\n\nif result_country_code in BLOCK_COUNTRY_LIST:\n    raise Exception(\"These IP address is from forebiden country\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Graph Services using DefaultAzureCredential\nDESCRIPTION: Python code demonstrating how to authenticate with the Azure Graph Services Management client using DefaultAzureCredential. This relies on environment variables for authentication details and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/graphservices/azure-mgmt-graphservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.graphservices import GraphServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = GraphServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Update Information with Device Update SDK in Python\nDESCRIPTION: This snippet shows how to retrieve metadata for a particular update using the DeviceUpdateClient. It fetches the provider, name, and version from environment variables and calls get_update on the client to obtain the update data, printing the response. Dependencies include the initialized client and the respective environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetUpdate/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nupdate_provider = os.environ[\"DEVICEUPDATE_UPDATE_PROVIDER\"]\\nupdate_name = os.environ[\"DEVICEUPDATE_UPDATE_NAME\"]\\nupdate_version = os.environ[\"DEVICEUPDATE_UPDATE_VERSION\"]\\nresponse = client.device_update.get_update(update_provider, update_name, update_version)\\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Printing FunctionTool Definitions for Verification - Python\nDESCRIPTION: Prints serialized, human-readable definitions of all tools attached to the FunctionTool instance. This aids in verifying that docstrings and type information are correctly parsed into tool schema. Assumes 'functions.definitions' contains the registered tool definitions, which are output as formatted JSON.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/FunctionTool.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[print(json.dumps(tool.as_dict(), indent=4)) for tool in functions.definitions]\n```\n\n----------------------------------------\n\nTITLE: Getting Chat Thread Client from Existing Thread ID\nDESCRIPTION: Retrieves a ChatThreadClient using an existing thread ID, allowing operations on previously created chat threads.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchat_thread_client = chat_client.get_chat_thread_client(thread_id) # thread_id is the id of an existing chat thread\n```\n\n----------------------------------------\n\nTITLE: Using Azure CLI Configuration with SDK\nDESCRIPTION: Example showing how to use Azure CLI configuration with the Python SDK to create a compute management client. This allows sharing authentication and configuration between CLI and SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.compute import ComputeManagementClient\nclient = get_client_from_cli_profile(ComputeManagementClient)\nclient.virtual_machines.get('rg', 'vm')\n```\n\n----------------------------------------\n\nTITLE: Metadata Policies Package Configuration\nDESCRIPTION: Specific configuration settings for generating the Purview Metadata Policies client package including input file, output location, and authentication settings\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/purview/data-plane/Azure.Analytics.Purview.MetadataPolicies/preview/2021-07-01-preview/purviewMetadataPolicy.json\noutput-folder: ../azure/purview/administration/metadatapolicies\nnamespace: azure.purview.administration.metadatapolicies\nclear-output-folder: true\ntitle: PurviewMetadataPoliciesClient\nadd-credential: true\ncredential-scopes: https://purview.azure.net/.default\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Tracing Implementation\nDESCRIPTION: Sets up the Azure SDK tracing implementation to use OpenTelemetry by configuring the settings programmatically.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.settings import settings\n\nsettings.tracing_implementation = \"opentelemetry\"\n```\n\n----------------------------------------\n\nTITLE: Creating Message with File Search Attachment - Azure SDK for Python\nDESCRIPTION: Demonstrates attaching a file search tool to a message, enabling content search capabilities. Requires a file ID and instantiation of `MessageAttachment` with `FileSearchTool`. The message references a thread, user role, question content, and the file search attachment, facilitating more advanced content queries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nattachment = MessageAttachment(file_id=file.id, tools=FileSearchTool().definitions)\nmessage = project_client.agents.create_message(\n    thread_id=thread.id, role=\"user\", content=\"What feature does Smart Eyewear offer?\", attachments=[attachment]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Schema Registry Avro Serializer and Azure Identity with pip\nDESCRIPTION: Commands for installing the required Azure libraries using pip. This installs both the Azure Schema Registry Avro Serializer client library and the Azure Identity client library which are prerequisites for running the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroserializer/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-schemaregistry-avroserializer azure-identity\n```\n\n----------------------------------------\n\nTITLE: Resolving Azure Key Vault References with Specific SecretClients - Azure App Configuration Python Provider - Python\nDESCRIPTION: Configures AzureAppConfigurationKeyVaultOptions with a dictionary mapping Key Vault URIs to credential configurations, enabling explicit control over which clients are used for resolution. Dependencies: 'azure.appconfiguration.provider', 'azure.identity'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load, AzureAppConfigurationKeyVaultOptions\nfrom azure.identity import DefaultAzureCredential\n\nkey_vault_options = AzureAppConfigurationKeyVaultOptions(\n    client_configs={key_vault_uri: {'credential': credential}})\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), key_vault_options=key_vault_options)\n```\n\n----------------------------------------\n\nTITLE: Setting Access Policy on Azure Key Vault for Managed Identity in Shell\nDESCRIPTION: This shell snippet assigns an access policy to the previously created Azure Key Vault, granting the specified managed identity permissions for secrets (set, delete, list). It dynamically queries the managed identity's object id. Required dependencies are Azure CLI and previously created resource group, key vault, and managed identity. The command modifies access policies on the Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naz keyvault set-policy -n $KEY_VAULT_NAME \\\n  --object-id $(az identity show -g $RESOURCE_GROUP -n $MANAGED_IDENTITY_NAME --query principalId -o tsv) \\\n  --secret-permissions set delete list\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Grid Consumer Client\nDESCRIPTION: Python code showing initialization of EventGridConsumerClient for Event Grid Namespaces.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Event Grid Namespace Client\nclient = EventGridConsumerClient(endpoint, credential, namespace_topic=YOUR_TOPIC_NAME, subscription=YOUR_SUBSCRIPTION_NAME)\n```\n\n----------------------------------------\n\nTITLE: Querying and Visualizing Azure Monitor Log Data\nDESCRIPTION: Queries the Usage table in the Log Analytics workspace to get data ingestion information for the past week, then displays the results as a DataFrame and a graph.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTABLE = \"Usage\"\n\nQUERY = f\"\"\"\nlet starttime = 7d; // Start date for the time series, counting back from the current date\nlet endtime = 0d; // today\n{TABLE} | project TimeGenerated, DataType, Quantity\n| where TimeGenerated between (ago(starttime)..ago(endtime))\n| summarize ActualUsage=sum(Quantity) by TimeGenerated=bin(TimeGenerated, 1h), DataType\n\"\"\"\n\ndf = query_logs_workspace(QUERY)\ndisplay(df)\n\ndisplay_graph(df, \"All Data Types - last week usage\")\n```\n\n----------------------------------------\n\nTITLE: Recovering an Archived Configuration Snapshot in Python\nDESCRIPTION: This snippet shows how to recover an archived configuration snapshot in Azure App Configuration, changing its status back to 'Ready'. It calls the `recover_snapshot` method on the client with the `snapshot_name`. Requires an initialized `client` and a `snapshot_name` variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nrecovered_snapshot = client.recover_snapshot(name=snapshot_name)\n```\n\n----------------------------------------\n\nTITLE: Listing Threads for an Agent - Azure SDK for Python\nDESCRIPTION: Demonstrates retrieving all threads attached to an agent using the Azure SDK for Python. Requires an initialized project client. The output is a list of thread objects tied to the current agent session. Useful for session enumeration and management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nthreads = project_client.agents.list_threads()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Stack HCI and Identity Libraries using pip (Bash)\nDESCRIPTION: Installs the `azure-mgmt-azurestackhci` library for managing Azure Stack HCI resources and the `azure-identity` library for authentication via pip. Requires Python 3.8+ and pip to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/azurestackhci/azure-mgmt-azurestackhci/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-azurestackhci\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Asset Conversions in Azure Remote Rendering with Python\nDESCRIPTION: This snippet shows how to retrieve information about all asset conversions, including their status, creation time, and output asset URIs for successful conversions. It uses the list_asset_conversions method to get all conversions regardless of their status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    print(\"conversions:\")\n    for c in client.list_asset_conversions():\n        print(\n            \"\\t conversion:  id:\",\n            c.id,\n            \"status:\",\n            c.status,\n            \"created on:\",\n            c.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        )\n        if c.status == AssetConversionStatus.SUCCEEDED:\n            print(\"\\t\\tconversion result URI:\", c.output.asset_uri)\n```\n\n----------------------------------------\n\nTITLE: Simplified Confidential Ledger Client Initialization\nDESCRIPTION: Alternative method to create a Confidential Ledger client where the certificate file handling is managed automatically by the client constructor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=\"ledger_certificate.pem\"\n)\n\n# The ledger TLS certificate is written to `ledger_certificate.pem`.\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account using Azure CLI\nDESCRIPTION: Azure CLI commands to create a new resource group and storage account for use with the File Share client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n----------------------------------------\n\nTITLE: Creating Type Aliases for Enhanced Readability in Python Typing\nDESCRIPTION: Defines a type alias named 'CredentialTypes' using typing.Union and references to Azure credentials. Dependencies include typing.Union, typing.Dict, and Azure-specific credential classes. The alias simplifies function signatures and type annotations by grouping possible types; does not affect runtime but aids typing and documentation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union, Dict\\nfrom azure.core.credentials import AzureKeyCredential, TokenCredential, AzureSasCredential\\n\\nCredentialTypes = Union[AzureKeyCredential, TokenCredential, AzureSasCredential, Dict[str, str]]  # PascalCase\n```\n\n----------------------------------------\n\nTITLE: Retrieving SIP Trunks and Routes Using SipRoutingClient (Python)\nDESCRIPTION: This example retrieves the list of SIP trunks and routes configured in the resource using SipRoutingClient. Loops through trunks and routes to print properties such as FQDN, port, route name, description, regex pattern, and associated trunks. Used for validation and auditing of current telephony routing setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntrunks = sip_routing_client.list_trunks()\nfor trunk in trunks:\n    print(trunk.fqdn)\n    print(trunk.sip_signaling_port)\nroutes = sip_routing_client.list_routes()\nfor route in routes:\n    print(route.name)\n    print(route.description)\n    print(route.number_pattern)\n    for trunk_fqdn in route.trunks:\n        print(trunk_fqdn)\n```\n\n----------------------------------------\n\nTITLE: Importing Update via DeviceUpdateClient in Python\nDESCRIPTION: This snippet initiates the asynchronous import of update content into Device Update for IoT Hub by calling begin_import_update with the constructed payload, then waits for the response. It depends on successful client initialization and proper formatting of the import payload. Input is a structured content array, and the operation starts the import process on the Azure backend, returning a long-running operation object for result tracking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ImportUpdate/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.device_update.begin_import_update(content)\nresponse.wait\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies for Data Visualization in Python\nDESCRIPTION: This requirements file specifies the exact versions of Python packages needed for data visualization and analysis. It includes core libraries like matplotlib (3.2.1), numpy (1.19.5), pandas (1.0.4), scipy (1.5.1), and seaborn (0.10.1), along with their dependencies like cycler, kiwisolver, pyparsing, python-dateutil, and pytz.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/environment/environment_files/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncycler==0.10.0            # via matplotlib\nkiwisolver==1.2.0         # via matplotlib\nmatplotlib==3.2.1\nnumpy==1.19.5\npandas==1.0.4\npyparsing==2.4.7          # via matplotlib\npython-dateutil==2.8.1    # via matplotlib, pandas\npytz==2020.1              # via pandas\nscipy==1.5.1              # via seaborn\nseaborn==0.10.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Operations Class with LRO Support\nDESCRIPTION: Defines a service operations class that implements the begin_upload method using the custom polling mechanism. Includes support for continuation tokens to resume operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AnyStr, MutableMapping, Any\nfrom azure.core.polling import LROPoller\nJSON = MutableMapping[str, Any]\n\n\nclass ServiceOperations:\n\n    def begin_upload(self, data: AnyStr, **kwargs) -> LROPoller[JSON]:\n        continuation_token = kwargs.pop(\"continuation_token\", None)\n        polling_method = CustomPollingMethod(**kwargs)\n\n        # if continuation_token is provided, we should rehydrate the LRO using the from_continuation_token method\n        # which calls our implementation on the CustomPollingMethod method\n        if continuation_token is not None:\n            return LROPoller.from_continuation_token(\n                continuation_token=continuation_token,\n                polling_method=polling_method,\n                deserialization_callback=lambda x: x,\n                client=self\n            )\n```\n\n----------------------------------------\n\nTITLE: Initializing OpsLogger for Class-level Logging in Azure ML SDK\nDESCRIPTION: Shows how to configure logging for a class by instantiating an OpsLogger with the module name and updating it with additional information. This is the first step in setting up logging for Azure ML SDK operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/azure/ai/ml/_telemetry/guide_to_logging.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.ml._utils._logger_utils import OpsLogger\n\n\nops_logger = OpsLogger(__name__)\nmodule_logger = ops_logger.module_logger\n\nclass DataOperations(_ScopeDependentOperations):\n    def __init__(\n        self,\n        operation_scope: OperationScope,\n        operation_config: OperationConfig,\n        service_client: Union[ServiceClient042023_preview, ServiceClient102021Dataplane],\n        service_client_012024_preview: ServiceClient012024_preview,\n        datastore_operations: DatastoreOperations,\n        **kwargs: Any,\n    ):\n        super(DataOperations, self).__init__(operation_scope, operation_config)\n        ops_logger.update_info(kwargs) # <--- Need this line in constructor\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for Azure Digital Twins SDK Generation\nDESCRIPTION: Primary configuration block for AutoRest that specifies input swagger file, output settings, namespace configuration, and authentication parameters for generating the Azure Digital Twins Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/3026119ab41bbce77275cfa3a1afbabf43af5aea/specification/digitaltwins/data-plane/Microsoft.DigitalTwins/preview/2021-06-30-preview/digitaltwins.json\noutput-folder: ../azure/digitaltwins/core/_generated\nnamespace: azure.digitaltwins.core\nno-namespace-folders: true\nadd-credentials: true\ncredential-scopes: \"https://digitaltwins.azure.net/.default\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nvanilla: true\nclear-output-folder: true\npython: true\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Client Libraries with pip\nDESCRIPTION: This command installs the Azure Key Vault client libraries for Python using pip. It includes the packages for keys, secrets, and certificates operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-keyvault\n```\n\n----------------------------------------\n\nTITLE: Iterating Over File Data Stream in Azure Storage File Share SDK\nDESCRIPTION: This code snippet shows how to iterate over a file data stream using the chunks property of StorageStreamDownloader in the Azure Storage File Share SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nStorageStreamDownloader.chunks\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Azure SDK for Python\nDESCRIPTION: Demonstrates exception handling using the simplified azure.core.exceptions.HttpResponseError, which replaces the previous CloudError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    result = client.operation(...)\nexcept HttpResponseError as e:\n    print(f\"Operation failed: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure-AI-Vision-ImageAnalysis Python SDK and Dependencies\nDESCRIPTION: These bash snippets demonstrate how to install the Azure Image Analysis SDK using pip, along with aiohttp for asynchronous sample support. The first command installs the main SDK, and the second is required only if the asynchronous samples are to be run.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-vision-imageanalysis\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Connecting to Public Azure using ADAL\nDESCRIPTION: This snippet demonstrates how to use ADAL (Azure Active Directory Authentication Library) to connect to public Azure. It sets up authentication using a Service Principal and creates a ResourceManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/multicloud.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport adal\nfrom msrestazure.azure_active_directory import AdalAuthentication\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Service Principal\ntenant = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\nclient_id = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\npassword = 'password\n\n# Public Azure - default values\nauthentication_endpoint = 'https://login.microsoftonline.com/'\nazure_endpoint = 'https://management.azure.com/'\n    \ncontext = adal.AuthenticationContext(authentication_endpoint+tenant)\ncredentials = AdalAuthentication(\n    context.acquire_token_with_client_credentials,\n    azure_endpoint,\n    client_id,\n    password\n)\nsubscription_id = '33333333-3333-3333-3333-333333333333'\n\nresource_client = ResourceManagementClient(\n    credentials,\n    subscription_id,\n    base_url=azure_endpoint\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Named Resource Group Example for New-TestResources.ps1\nDESCRIPTION: An example showing how to customize the resource group name and location when deploying test resources. This also creates a new AAD application and Service Principal for test access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount -Subscription 'REPLACE_WITH_SUBSCRIPTION_ID'\nNew-TestResources.ps1 `\n    -BaseName 'azsdk' `\n    -ServiceDirectory 'keyvault' `\n    -SubscriptionId 'REPLACE_WITH_SUBSCRIPTION_ID' `\n    -ResourceGroupName 'REPLACE_WITH_NAME_FOR_RESOURCE_GROUP' `\n    -Location 'eastus'\n```\n\n----------------------------------------\n\nTITLE: Installing Azure WebPubSub Management SDK and Azure Identity\nDESCRIPTION: Commands to install the required Python packages for using Azure WebPubSub Management SDK. Installs both the WebPubSub management package and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-mgmt-webpubsub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-webpubsub\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Queue\nDESCRIPTION: Creates a new queue in Azure Storage using synchronous QueueClient. Requires a connection string and queue name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nqueue.create_queue()\n```\n\n----------------------------------------\n\nTITLE: Attaching a Received Share with PurviewSharingClient - Python\nDESCRIPTION: Attaches a received share to a specified storage location. It fetches a detached received share, constructs a sink object pointing to a storage account, and calls begin_create_or_replace to attach the share, printing the outcome. Consumption of this snippet assumes the consumer's storage account resource ID and necessary share information. Handles JSON serialization and updates the received share properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os, json\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\nconsumer_storage_account_resource_id = \\\"/subscriptions/{subscription-id}/resourceGroups/consumer-storage-rg/providers/Microsoft.Storage/storageAccounts/consumerstorage\\\"\\n\\nlist_detached_response = client.received_shares.list_detached(order_by=\\\"properties/createdAt desc\\\")\\nreceived_share = next(x for x in list_detached_response)\\n\\nstore_reference = {\\n    \\\"referenceName\\\": consumer_storage_account_resource_id,\\n    \\\"type\\\": \\\"ArmResourceReference\\\"\\n}\\n\\nsink = {\\n    \\\"properties\\\": {\\n        \\\"containerName\\\": \\\"container-test\\\",\\n        \\\"folder\\\": \\\"folder-test\\\",\\n        \\\"mountPath\\\": \\\"mountPath-test\\\",\\n    },\\n    \\\"storeKind\\\": \\\"AdlsGen2Account\\\",\\n    \\\"storeReference\\\": store_reference\\n}\\n\\nreceived_share['properties']['sink'] = sink\\n\\nupdate_request = client.received_shares.begin_create_or_replace(\\n    received_share['id'],\\n    content_type=\\\"application/json\\\",\\n    content=json.dumps(received_share))\\n\\nupdate_response = update_request.result()\\nprint(update_response)\n```\n\n----------------------------------------\n\nTITLE: Creating Digital Twins for Tickets in Python\nDESCRIPTION: Defines functions to generate and upsert digital twins for tickets. Demonstrates creating multiple tickets for different events.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/02_Purchasing_Tickets.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef generate_twin(name,model_id):\n    digital_twin_id = f'{name}-{str(uuid.uuid4())}'\n    dt_json = {\n        \"$metadata\": {\n            \"$model\": model_id\n        }\n    }\n    return digital_twin_id,dt_json\n\ndef updsert_twin():\n    created_twin = service_client.upsert_digital_twin(digital_twin_id, dt_json)\n    return created_twin\n\ndef generate_tickets(title,n_tickets):\n    tickets = []\n    for i in range(n_tickets):\n        ticket_id, ticket_json = generate_twin(\"ticket\",ticket_model_id)\n        ticket_json['event_title'] = title\n        ticket_json['state'] = 'open'\n        ticket_json['ticket_location'] = i\n        ticket_json['uid'] = f'ticket-{str(uuid.uuid4())}'\n        tickets.append(ticket_json)\n    return tickets\n\ntickets_df = pd.concat([pd.DataFrame(generate_tickets('Nirvana',5)),\n          pd.DataFrame(generate_tickets('Smashing Pumpkins',5)),\n           pd.DataFrame(generate_tickets('Foo Fighters',5))]).reset_index(drop=True)\n\ntickets_df\n```\n\n----------------------------------------\n\nTITLE: Release History Entry - Version 1.0.0b1\nDESCRIPTION: Initial release changelog entry from June 9, 2021.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-mgmt-agrifood/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2021-06-09)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure IoT Hub Management Client in Python\nDESCRIPTION: Demonstrates how to authenticate with the Azure IoT Hub Management Client using DefaultAzureCredential. This snippet assumes the necessary environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID) are properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.iothub import IotHubClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = IotHubClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Query Execution Function\nDESCRIPTION: Defines a function for asynchronously executing Log Analytics queries for a specific time range with error handling and status reporting. Includes options for query identification and correlation IDs for tracing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def execute_query(\n    query: str,\n    start_time: datetime,\n    end_time: datetime,\n    *,\n    query_id: str = \"\",\n    correlation_request_id: str = \"\",\n):\n    \"\"\"\n    Asynchronously execute the given query, restricted to the given time range, and parse the API response.\n\n    :param str query: The query to execute.\n    :param datetime start_time: The start of the time range to query.\n    :param datetime end_time: The end of the time range to query.\n    :keyword str query_id: Optional identifier for the query, used for printing.\n    :keyword str correlation_request_id, Optional correlation ID to use in the query headers for tracing.\n    \"\"\"\n    headers = {}\n    if correlation_request_id:\n        headers[\"x-ms-correlation-request-id\"] = correlation_request_id\n\n    try:\n        response = await client.query_workspace(\n            workspace_id=LOGS_WORKSPACE_ID,\n            query=query,\n            timespan=(start_time, end_time),\n            server_timeout=360,\n            include_statistics=False, # Can be used for debugging.\n            headers=headers,\n            retry_on_methods=[\"POST\"]\n        )\n    except HttpResponseError as e:\n        print(f\"Error when attempting query {query_id} (query time span: {start_time} to {end_time}):\\n\\t\", e)\n        return []\n\n    if response.status == LogsQueryStatus.SUCCESS:\n        print(f\"Query {query_id} successful (query time span: {start_time} to {end_time}). Row count: {len(response.tables[0].rows)}\")\n        return response.tables[0]\n    else:\n        # This will be a LogsQueryPartialResult.\n        error = response.partial_error\n        print(f\"Partial results returned for query {query_id} (query time span: {start_time} to {end_time}):\\n\\t\", error)\n        return response.partial_data[0]\n\n```\n\n----------------------------------------\n\nTITLE: Querying Blob Service Account URL With Azure CLI - Bash\nDESCRIPTION: Uses the Azure CLI to retrieve the primary blob service endpoint (URL) for a given Azure storage account. Parameters: storage account name (my-storage-account-name) and resource group (my-resource-group). Outputs the endpoint as JSON. Requires Azure CLI installed and logged in.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get the blob service account url for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.blob\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers in Item Operations with Azure Cosmos DB SDK for Python\nDESCRIPTION: This snippet illustrates how to access response headers after performing an item point operation (like `create_item`) using the Azure Cosmos DB Python SDK. It initializes the client, gets database and container clients, creates an item, and then retrieves the response headers using the `get_response_headers()` method on the operation response object. Specific headers like `etag` (for optimistic concurrency) and `x-ms-request-charge` (for RU cost) are then extracted. Requires `azure-cosmos` and `os`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nDATABASE_NAME = 'testDatabase'\nCONTAINER_NAME = 'products'\nclient = CosmosClient(URL, credential=KEY)\ndatabase = client.get_database_client(DATABASE_NAME)\ncontainer = database.get_container_client(CONTAINER_NAME)\n\noperation_response = container.create_item({\"id\": \"test_item\", \"productName\": \"test_item\"})\noperation_headers = operation_response.get_response_headers()\netag_value = operation_headers['etag']\nrequest_charge = operation_headers['x-ms-request-charge']\n```\n```\n\n----------------------------------------\n\nTITLE: Toggling Boolean Flag Function - Python\nDESCRIPTION: Defines \\\"toggle_flag\\\", which inverts a provided boolean flag. The input parameter \\\"flag\\\" enforces boolean type, and the description clarifies the operation. Useful in automation contexts where state toggling is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"toggle_flag\",\n  \"description\": \"Toggles a boolean flag.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"flag\": {\"type\": \"boolean\", \"description\": \"The flag to toggle.\"}\n    },\n    \"required\": [\"flag\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureMonitorTraceExporter with Default Connection String\nDESCRIPTION: Creates an instance of AzureMonitorTraceExporter that automatically retrieves the connection string from the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\nexporter = AzureMonitorTraceExporter()\n```\n\n----------------------------------------\n\nTITLE: Releasing a Purchased Phone Number (Python)\nDESCRIPTION: This code releases a specified purchased phone number using the begin_release_phone_number method on the PhoneNumbersClient. The operation is asynchronous and returns a poller. The phone number must be owned by the resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npoller = phone_numbers_client.begin_release_phone_number(\n    \"<phone number>\",\n    polling = True\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities by Properties in Python\nDESCRIPTION: Shows how to filter entities based on their properties using the Azure Data Tables client library. This example filters on FirstName and LastName fields.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparameters = {\n    \"first\": first_name,\n    \"last\": last_name\n}\nquery_filter = \"FirstName eq @first or LastName eq @last\"\ntable_client.query_entities(query_filter, parameters=parameters)\n```\n\n----------------------------------------\n\nTITLE: Generating SDK with Autorest (PowerShell)\nDESCRIPTION: These commands navigate to the folder containing the Swagger definition file (`<swagger-folder>`) and then execute Autorest using the `SWAGGER.md` configuration file (typically `readme.md` in Azure specs) to generate the client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/swagger/SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: ps\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single SIP Trunk (Python)\nDESCRIPTION: Fetches a single SIP trunk by its FQDN using SipRoutingClient's get_trunk method. Input is the trunk's FQDN as a string. Output is a SipTrunk object containing its configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntrunk = sip_routing_client.get_trunk(\"sbs1.contoso.com\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Offer ID from RouterWorkerOfferIssued Event (Python)\nDESCRIPTION: Iterates through a list of deserialized `EventGridEvent` objects (presumably obtained from the previous step) to find an event of type `Microsoft.Communication.RouterWorkerOfferIssued`. If found, it extracts the `offer_id` from the event's data payload. Assumes `events` is a list of `EventGridEvent` instances.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noffer_id = \"\"\nfor event in events:\n    if event.event_type == \"Microsoft.Communication.RouterWorkerOfferIssued\":\n        offer_id = event.data.offer_id\n    else:\n        continue\n```\n\n----------------------------------------\n\nTITLE: Creating User and Generating Access Token\nDESCRIPTION: Creates a communication user and generates an access token with chat scope using the Identity Client. This token is required to authenticate chat operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.identity import CommunicationIdentityClient\nidentity_client = CommunicationIdentityClient.from_connection_string(\"<connection string of your Communication service>\")\nuser = identity_client.create_user()\ntokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\ntoken = tokenresponse.token\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Anomaly Detector Package\nDESCRIPTION: Command to install the Azure Anomaly Detector Python package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-ai-anomalydetector\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Translation Client\nDESCRIPTION: Creates a TextTranslationClient instance using AzureKeyCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncredential = AzureKeyCredential(apikey)\ntext_translator = TextTranslationClient(credential=credential, region=region)\n```\n\n----------------------------------------\n\nTITLE: Creating Counters with OpenTelemetry Metrics in Python\nDESCRIPTION: This snippet demonstrates how to create and use multiple counters with different attribute sets in OpenTelemetry. It shows adding values to counters with various attribute combinations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Counter2\ncounter2 = meter.create_counter(\"attr2_counter\")\ncounter2.add(10, attribute_set1)\ncounter2.add(30, attribute_set2)\n\n# Counter3\ncounter3 = meter.create_counter(\"large_attr_counter\")\ncounter3.add(100, attribute_set1)\ncounter3.add(200, large_attribute_set)\n```\n\n----------------------------------------\n\nTITLE: Creating a Rendering Session in Azure Remote Rendering with Python\nDESCRIPTION: This snippet demonstrates how to create a new rendering session with Azure Remote Rendering. It specifies a session ID, size (standard), and lease duration (20 minutes) and waits for the session to become ready using a session poller.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    print(\"starting rendering session with id:\", session_id)\n    try:\n        session_poller = client.begin_rendering_session(\n            session_id=session_id, size=RenderingSessionSize.STANDARD, lease_time_minutes=20\n        )\n        print(\n            \"rendering session with id:\",\n            session_id,\n            \"created. Waiting for session to be ready.\",\n        )\n        session = session_poller.result()\n        print(\n            \"session with id:\",\n            session.id,\n            \"is ready. lease_time_minutes:\",\n            session.lease_time_minutes,\n        )\n    except Exception as e:\n        print(\"Session startup failed\", e)\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceUpdateClient in Python\nDESCRIPTION: This snippet demonstrates how to instantiate the DeviceUpdateClient using credentials obtained via DefaultAzureCredential and configuration details (endpoint, instance ID) read from environment variables. This client object is used for subsequent interactions with the Device Update service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeployUpdate/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n``` python\nendpoint = os.environ[\"DEVICEUPDATE_ENDPOINT\"]\ninstance = os.environ[\"DEVICEUPDATE_INSTANCE_ID\"]\nclient = DeviceUpdateClient(credential=DefaultAzureCredential(), endpoint=endpoint, instance_id=instance)\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SAS Token\nDESCRIPTION: Python code showing authentication using Azure SAS Credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureSASCredential\nfrom azure.maps.route import MapsRouteClient\n\ncredential = AzureSASCredential(os.environ.get(\"AZURE_SAS_TOKEN\"))\n\nroute_client = MapsRouteClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Evaluation\nDESCRIPTION: Setup and execution of batch evaluation for multiple responses using JSONL file format and Azure AI Project configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/response_completeness.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pandas as pd\n\ndata = [\n    {\n        \"response\": \"The temperature of Seattle now is 70 degrees. Based on the temperature, having an outdoor office party is recommended.\",\n        \"ground_truth\": \"The temperature of Seattle now is 50 degrees. It will be recommended to bring a jacket in the evening.\",\n    },\n    {\n        \"response\": \"The email draft \\\"Project Plan\\\" is attached. Please review and provide feedback.\",\n        \"ground_truth\": \"The email draft \\\"Project Plan\\\" is attached. Please review and provide feedback by EOD.\",\n    },\n    {\n        \"response\": \"Based on the retrieved documents, the shareholder meeting discussed the operational efficiency of the company and financing options.\",\n        \"ground_truth\": \"The shareholder meeting discussed the compensation package of the company CEO.\",\n    }\n]\n\nfile_path = \"response_completeness_data.jsonl\"\n\npd.DataFrame(data).to_json(\n    file_path, orient=\"records\", lines=True\n)\n\nfrom azure.ai.evaluation import evaluate\n\nazure_ai_project={\n        \"subscription_id\": os.environ[\"AZURE_SUBSCRIPTION_ID\"],\n        \"project_name\": os.environ[\"PROJECT_NAME\"],\n        \"resource_group_name\": os.environ[\"RESOURCE_GROUP_NAME\"],\n    }\n\nresponse = evaluate(\n    data=file_path,\n    evaluators={\n        \"response_completeness\": response_completeness_evaluator,\n    },\n    azure_ai_project=azure_ai_project,\n)\n\npprint(f'AI Foundry URL: {response.get(\"studio_url\")}')\n```\n\n----------------------------------------\n\nTITLE: Getting Map Tileset Metadata\nDESCRIPTION: Example of retrieving metadata for a specific tileset.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.render import MapsRenderClient\nfrom azure.maps.render import TilesetID\n\nmaps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_render_client.get_map_tileset(tileset_id=TilesetID.MICROSOFT_BASE)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Search Python Package\nDESCRIPTION: Command to install the Azure AI Search client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-search-documents\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity with pip - Shell\nDESCRIPTION: Installs the Azure Identity library in the Python environment using the pip package manager. This is a prerequisite to using any of the Python code examples with Azure authentication. The command must be run in the terminal or shell with access to the target Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Customer-Area Relationships in Python\nDESCRIPTION: This snippet shows how to create relationships between customers and areas or lines, simulating customer movement in a venue.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef cust_to_area(cust,area):\n    tickethoder_relationship = {\n                \"$relationshipId\": f\"{cust}locatedIn{area}\",\n                \"$sourceId\": cust,\n                \"$relationshipName\": \"locatedIn\",\n                \"$targetId\": area,\n            }\n\n    service_client.upsert_relationship(\n            tickethoder_relationship[\"$sourceId\"],\n            tickethoder_relationship[\"$relationshipId\"],\n            tickethoder_relationship\n        )\n        \ncust_to_area(\"customer-e6f49d8a-711b-41c3-9db8-c7ece3dbc32c\",\"line-1\")\ncust_to_area(\"customer-21e17d28-76c3-4c04-8df9-396703692a68\",\"line-1\")\n# cust_to_area(\"customer-25e19268-3433-4f09-afe3-94f466313368\",\"line-0\")\n# cust_to_area(\"customer-c87adbfa-1c6e-4ea9-9f03-83e3877ef5fc\",\"line-2\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Mobile Network Management Client using Default Credentials\nDESCRIPTION: Creates an authenticated client for Azure Mobile Network Management using the DefaultAzureCredential. This snippet demonstrates how to initialize the client with environment variables for authentication and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mobilenetwork/azure-mgmt-mobilenetwork/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.mobilenetwork import MobileNetworkManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MobileNetworkManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Logging for Azure Monitor Ingestion in Python\nDESCRIPTION: This code snippet demonstrates how to enable detailed logging for the Azure Monitor Ingestion client library using the standard Python logging library. It sets up a logger for the 'azure.monitor.ingestion' SDK and configures console output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\nfrom azure.monitor.ingestion import LogsIngestionClient\n\n# Create a logger for the 'azure.monitor.ingestion' SDK\nlogger = logging.getLogger('azure.monitor.ingestion')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nclient = LogsIngestionClient(endpoint, credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Message with Code Interpreter Attachment - Azure SDK for Python\nDESCRIPTION: Illustrates enabling the code interpreter tool for both agent and message attachment creation. The agent must be configured with code interpreter on creation; otherwise, file attachments cannot be interpreted. Dependencies include `CodeInterpreterTool` and file resource, and the message content should request specific analytical or chart operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# Notice that CodeInterpreter must be enabled in the agent creation,\n# otherwise the agent will not be able to see the file attachment for code interpretation\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=\"my-assistant\",\n    instructions=\"You are helpful assistant\",\n    tools=CodeInterpreterTool().definitions,\n)\nprint(f\"Created agent, agent ID: {agent.id}\")\n\nthread = project_client.agents.create_thread()\nprint(f\"Created thread, thread ID: {thread.id}\")\n\n# Create an attachment\nattachment = MessageAttachment(file_id=file.id, tools=CodeInterpreterTool().definitions)\n\n# Create a message\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=\"Could you please create bar chart in TRANSPORTATION sector for the operating profit from the uploaded csv file and provide file to me?\",\n    attachments=[attachment],\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using ClientSecretCredential\nDESCRIPTION: Python code snippet for authenticating with Azure using ClientSecretCredential from the azure-identity package, which requires client ID, secret, and tenant ID from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity import ClientSecretCredential\n\ncredentials = ClientSecretCredential(\n    client_id = os.environ['AZURE_CLIENT_ID'],\n    secret = os.environ['AZURE_CLIENT_SECRET'],\n    tenant = os.environ['AZURE_TENANT_ID']\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Azure Service Bus v7\nDESCRIPTION: Example showing how to send individual messages and batches using ServiceBusSender in Azure Service Bus SDK v7. Demonstrates the updated syntax for both single message sending and batch message sending patterns.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwith ServiceBusClient.from_connection_string(conn_str=CONNECTION_STR) as client:\n\n    with client.get_queue_sender(queue_name=QUEUE_NAME) as sender:\n        # Sending one at a time.\n        for i in range(100):\n            message = ServiceBusMessage(\"Sample message no. {}\".format(i))\n            sender.send_messages(message)\n\n        # Send as a batch\n        batch = new ServiceBusMessageBatch()\n        for i in range(10):\n            batch.add_message(ServiceBusMessage(\"Batch message no. {}\".format(i)))\n        sender.send_messages(batch)\n```\n\n----------------------------------------\n\nTITLE: Clarifying Async ManagedIdentityCredential as Context Manager (Python)\nDESCRIPTION: Clarified that `azure.identity.aio.ManagedIdentityCredential` functions as an async context manager. When used in an `async with` statement, it automatically closes its underlying transport session upon exiting the block.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nazure.identity.aio.ManagedIdentityCredential\n```\n\n----------------------------------------\n\nTITLE: Clarifying Types with typing.cast in Python\nDESCRIPTION: Illustrates using typing.cast to inform the static type checker (like mypy) about the intended type, especially in the presence of ambiguous union arguments. The function accepts either an int or List[int] for sequence_numbers and always works internally as List[int], using cast to ensure type safety. Dependencies are typing (Union, List, Optional, Any, cast) and ServiceBusReceivedMessage. Inputs are int or list of ints, output is List[ServiceBusReceivedMessage].\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union, List, Optional, Any, cast\n\n\ndef receive_deferred_messages(\n        self, sequence_numbers: Union[int, List[int]], *, timeout: Optional[float] = None, **kwargs: Any\n) -> List[ServiceBusReceivedMessage]:\n    if isinstance(sequence_numbers, int):\n        sequence_numbers = [sequence_numbers]\n    sequence_numbers = cast(List[int], sequence_numbers)  # mypy clarity\n\n    for num in sequence_numbers:  # if not cast to List[int], mypy will error\n        print(num)\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous ChatCompletionsClient\nDESCRIPTION: Example of creating an asynchronous ChatCompletionsClient using the aio namespace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom azure.ai.inference.aio import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\n\n# For Serverless API or Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing AuthorizationManagementClient with DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates how to initialize the `AuthorizationManagementClient` for interacting with Azure Authorization services. It uses `DefaultAzureCredential` from the `azure-identity` library for authentication, which automatically reads credentials from environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`). The Azure subscription ID is also retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.authorization import AuthorizationManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AuthorizationManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities with String Comparison in Python\nDESCRIPTION: Demonstrates how to use string comparison operators in filters when querying Azure Tables. This example filters LastName values alphabetically.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"LastName ge 'A' and LastName lt 'B'\"\ntable_client.query_entities(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Initializing PhoneNumbersClient with Connection String (Python)\nDESCRIPTION: This example initializes PhoneNumbersClient using a connection string obtained from the Azure Portal. Only requires the SDK and a valid connection string for authentication. Returns a PhoneNumbersClient bound to the specified ACS resource for further operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# You can find your connection string from your resource in the Azure Portal\nimport os\nfrom azure.communication.phonenumbers import PhoneNumbersClient\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nphone_numbers_client = PhoneNumbersClient.from_connection_string(connection_str)\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key from Azure Search Service\nDESCRIPTION: Azure CLI command to retrieve the admin API key from an Azure Search service, which can be used for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\naz search admin-key show --service-name <mysearch> --resource-group <mysearch-rg>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure WebPubSub Management Client\nDESCRIPTION: Code to authenticate with the Azure WebPubSub Management Client using DefaultAzureCredential. This snippet demonstrates how to initialize the client with proper credentials and subscription ID from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-mgmt-webpubsub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.webpubsub import WebPubSubManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WebPubSubManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents in Azure File Share\nDESCRIPTION: Demonstrates how to list directories and files under a parent directory in Azure File Share. Includes both synchronous and asynchronous implementations for directory listing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare import ShareDirectoryClient\n\nparent_dir = ShareDirectoryClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", directory_path=\"parent_dir\")\n\nmy_list = list(parent_dir.list_directories_and_files())\nprint(my_list)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.fileshare.aio import ShareDirectoryClient\n\nparent_dir = ShareDirectoryClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", directory_path=\"parent_dir\")\n\nmy_files = []\nasync for item in parent_dir.list_directories_and_files():\n    my_files.append(item)\nprint(my_files)\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Datetime Function - Python\nDESCRIPTION: Outlines the callable \\\"fetch_current_datetime\\\" that returns the current time as a JSON string, optionally with a formatting argument. The format parameter is optional and defaults to None; the returned timestamp's presentation may depend on input and implementation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"fetch_current_datetime\",\n  \"description\": \"Get the current time as a JSON string, optionally formatted.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"format\": {\"type\": [\"string\", \"null\"], \"description\": \"The format in which to return the current time. Defaults to None, which uses a standard format.\"}\n    },\n    \"required\": []\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Asynchronous Implementation\nDESCRIPTION: Full example of creating and sending a request using asynchronous client with context managers and error handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.example.service.aio import ExampleClient\nfrom azure.core.rest import HttpRequest, AsyncHttpResponse\nfrom azure.core.exceptions import HttpResponseError\n\nrequest = HttpRequest(\n    method=\"POST\",\n    url=\"/helloWorld\",\n    json={\"document\": \"Hello world!\"},\n    params={\"language\": \"en\"}\n)\n\nwith DefaultAzureCredential() as credential:\n    with ExampleClient(endpoint=\"https://example.org\", credential=credential) as client:\n        response = await client.send_request(request)\n\n        try:\n            response.raise_for_status()\n            await response.load_body()\n            json_response = response.json()  # returns an azure.core.rest.AsyncHttpResponse\n            # Play with your response!\n            print(json_response[\"language\"])\n        except HttpResponseError:\n            print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Creating TableServiceClient with Shared Key in Python\nDESCRIPTION: Demonstrates how to create a TableServiceClient using a shared key (account key) for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\nfrom azure.core.credentials import AzureNamedKeyCredential\n\ncredential = AzureNamedKeyCredential(\"my_account_name\", \"my_access_key\")\nwith TableServiceClient(\n    endpoint=\"https://<my_account_name>.table.core.windows.net\", credential=credential\n) as table_service_client:\n    properties = table_service_client.get_service_properties()\n    print(f\"{properties}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services Backup and Identity Libraries (Bash)\nDESCRIPTION: Installs the required Python packages for Azure Recovery Services Backup management (`azure-mgmt-recoveryservicesbackup`) and Azure authentication (`azure-identity`) using the pip package manager. Prerequisites include Python 3.8+ and an Azure subscription.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicesbackup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-recoveryservicesbackup\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Object in Python\nDESCRIPTION: This snippet constructs a Python dictionary representing the deployment payload. It retrieves update provider, name, version, and target device group from environment variables, generates a unique deployment ID using UUID, sets the current UTC time as the start time, and assembles these details into the required structure for the deployment API call.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeployUpdate/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n``` python\nupdate_provider = os.environ[\"DEVICEUPDATE_UPDATE_PROVIDER\"]\nupdate_name = os.environ[\"DEVICEUPDATE_UPDATE_NAME\"]\nupdate_version = os.environ[\"DEVICEUPDATE_UPDATE_VERSION\"]\ngroup = os.environ[\"DEVICEUPDATE_DEVICE_GROUP\"]\ndeployment_id = uuid.uuid4().hex\ndeployment = {\n    \"deploymentId\": deployment_id,\n    \"startDateTime\": str(datetime.now(timezone.utc)),\n    \"updateId\": {\n        \"provider\": update_provider,\n        \"name\": update_name,\n        \"version\": update_version\n    },\n    \"groupId\": group\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest Settings for Runtime API (Conditional)\nDESCRIPTION: This YAML block defines Autorest settings that are applied only when the `release_runtime_1_1` tag is specified during generation. It sets the input OpenAPI specification file URL, the output folder for the runtime client, and the title for the generated client class (`ConversationAnalysisClient`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'release_runtime_1_1'\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/53240ebc58b3c4e99de723194032064db1d97e63/specification/cognitiveservices/data-plane/Language/stable/2023-04-01/analyzeconversations.json\noutput-folder: ../azure/ai/language/conversations\ntitle: ConversationAnalysisClient\n```\n\n----------------------------------------\n\nTITLE: Integrating Distributed Tracing in Azure Python SDK\nDESCRIPTION: Highlights the new native support for distributed tracing libraries. The SDK now integrates with `OpenCensus` and `OpenTelemetry` for enhanced observability.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nOpenCensus or OpenTelemetry\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Client SDK - Bash\nDESCRIPTION: Demonstrates how to install the Azure Service Bus client library for Python using pip. Install this package to enable Python applications to interact with Azure Service Bus. No prerequisites except Python and pip; command outputs the library files to your Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-servicebus\n```\n\n----------------------------------------\n\nTITLE: Correcting Versioned Client Configuration Import Path in azure-mgmt-containerregistry (Python)\nDESCRIPTION: Covers the v3.0.0rc2 breaking change for the import path of the version-specific `ContainerRegistryManagementClientConfiguration`. It was moved from the versioned client module (`azure.mgmt.containerregistry.v20xx_yy_zz.containerregistry_management_client`) to the versioned package namespace (`azure.mgmt.containerregistry.v20xx_yy_zz`) due to code generator updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Old versioned configuration import location (potentially incorrect)\n# from azure.mgmt.containerregistry.v20xx_yy_zz.containerregistry_management_client import ContainerRegistryManagementClientConfiguration\n```\n\nLANGUAGE: python\nCODE:\n```\n# Correct versioned configuration import location starting from v3.0.0rc2\nfrom azure.mgmt.containerregistry.v20xx_yy_zz import ContainerRegistryManagementClientConfiguration\n```\n\n----------------------------------------\n\nTITLE: Importing DevTestLabs Operations\nDESCRIPTION: Example of the correct way to import operations classes after the restructuring of import paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.devtestlabs.operations import MyClassOperations\n```\n\n----------------------------------------\n\nTITLE: Downloading Blob Content in Azure Storage SDK\nDESCRIPTION: Compares blob download operations between Azure Storage SDK version 2.X (using get_blob_to_text method) and version 12 (using download_blob method), demonstrating how to retrieve the text content of a blob in both versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlockBlobService\nservice = BlockBlobService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\nblob_object = service.get_blob_to_text(\"<container_name>\", \"<blob_name>\")\ntext_content = blob_object.content\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\nservice_client = BlobServiceClient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential={'account_name': \"<storage-account-name>\", 'account_key': \"<account-access-key>\"})\nblob_client = service_client.get_blob_client(\"<container_name>\", \"<blob_name>\")\nstream_downloader = blob_client.download_blob(max_concurrency=2, encoding='UTF-8')\ntext_content = stream_downloader.readall()\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure AVS Management Client\nDESCRIPTION: Example showing how to authenticate an AVS Management client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-avs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.avs import AVSClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AVSClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Importing a Conversation Project to Azure CLU\nDESCRIPTION: This code demonstrates how to use the authoring part of the SDK to import a conversation project. It creates a new project with predefined intents, entities, and example utterances for training.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations.authoring import ConversationAuthoringClient\n\nclu_endpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nclu_key = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\n\nproject_name = \"test_project\"\n\nexported_project_assets = {\n    \"projectKind\": \"Conversation\",\n    \"intents\": [{\"category\": \"Read\"}, {\"category\": \"Delete\"}],\n    \"entities\": [{\"category\": \"Sender\"}],\n    \"utterances\": [\n        {\n            \"text\": \"Open Blake's email\",\n            \"dataset\": \"Train\",\n            \"intent\": \"Read\",\n            \"entities\": [{\"category\": \"Sender\", \"offset\": 5, \"length\": 5}],\n        },\n        {\n            \"text\": \"Delete last email\",\n            \"language\": \"en-gb\",\n            \"dataset\": \"Test\",\n            \"intent\": \"Delete\",\n            \"entities\": [],\n        },\n    ],\n}\n\nclient = ConversationAuthoringClient(\n    clu_endpoint, AzureKeyCredential(clu_key)\n)\npoller = client.begin_import_project(\n    project_name=project_name,\n    project={\n        \"assets\": exported_project_assets,\n        \"metadata\": {\n            \"projectKind\": \"Conversation\",\n            \"settings\": {\"confidenceThreshold\": 0.7},\n            \"projectName\": \"EmailApp\",\n            \"multilingual\": True,\n            \"description\": \"Trying out CLU\",\n            \"language\": \"en-us\",\n        },\n        \"projectFileVersion\": \"2022-05-01\",\n        \"stringIndexType\": \"Utf16CodeUnit\",\n    },\n)\nresponse = poller.result()\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Requests with KeyClient in Python\nDESCRIPTION: Example of using the new send_request method added in version 4.8.0 to send custom requests using the client's existing pipeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.keys import KeyClient\nfrom azure.core.pipeline.policies import HttpLoggingPolicy\n\nkey_client = KeyClient(vault_url, credential)\nresponse = key_client.send_request(\"GET\", \"/keys\", logging_policy=HttpLoggingPolicy())\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Monitor Query Clients for Sovereign Cloud in Python\nDESCRIPTION: Example of configuring Azure Monitor Query clients to use a sovereign cloud by specifying the correct endpoint or audience.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureAuthorityHosts, DefaultAzureCredential\nfrom azure.monitor.query import LogsQueryClient, MetricsQueryClient, MetricsClient\n\ncredential = DefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_GOVERNMENT)\n\nlogs_query_client = LogsQueryClient(credential, endpoint=\"https://api.loganalytics.us/v1\")\nmetrics_query_client = MetricsQueryClient(credential, endpoint=\"https://management.usgovcloudapi.net\")\nmetrics_client = MetricsClient(\n    \"https://usgovvirginia.metrics.monitor.azure.us\", credential, audience=\"https://metrics.monitor.azure.us\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Maps Timezone SDK in Python\nDESCRIPTION: This snippet demonstrates how to set up logging for the Azure Maps Timezone SDK. It configures a logger for 'azure.maps.timezone' at DEBUG level with console output to stdout, enabling detailed logging information about HTTP sessions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\n# Create a logger for the 'azure.maps.timezone' SDK\nlogger = logging.getLogger('azure.maps.timezone')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP 200 LRO Responses and Pageable Results - YAML\nDESCRIPTION: Provides transformation directives to explicitly define HTTP 200 responses for long-running operations (LROs) and to add paging metadata. Ensures that successful deployments, imports, upserts, and asset operations return structured, discoverable results. Useful for improving SDK usability and conformance to expected patterns.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n# Define HTTP 200 responses for LROs to document result model.\n# Note there is no transform for DeleteProject. This should return None.\ndirective:\n- where-operation: QuestionAnsweringProjects_DeployProject\n  transform: |\n    $.responses[\"200\"] = {\n      description: \"Project deployment details.\",\n      schema: {\n        \"$ref\": \"#/definitions/ProjectDeployment\"\n      }\n    };\n- where-operation: QuestionAnsweringProjects_Import\n  transform: |\n    $.responses[\"200\"] = {\n      description: \"Gets the status of an Import job.\",\n      schema: {\n        \"$ref\": \"#/definitions/JobState\"\n      }\n    };\n- where-operation: QuestionAnsweringProjects_UpdateQnas\n  transform: |\n    $[\"x-ms-pageable\"] = {\n      \"nextLinkName\": \"nextLink\",\n      \"itemName\": \"value\"\n    };\n    $.responses[\"200\"] = {\n      description: \"All the QnAs of a project.\",\n      schema: {\n        \"$ref\": \"#/definitions/QnaAssets\"\n      }\n    };\n- where-operation: QuestionAnsweringProjects_UpdateSources\n  transform: |\n    $[\"x-ms-pageable\"] = {\n      \"nextLinkName\": \"nextLink\",\n      \"itemName\": \"value\"\n    };\n    $.responses[\"200\"] = {\n      description: \"All the sources of a project.\",\n      schema: {\n        \"$ref\": \"#/definitions/QnaSources\"\n      }\n    };\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Maps Search SDK\nDESCRIPTION: This code demonstrates how to configure logging for the Azure Maps Search SDK. It shows how to create and configure a logger that outputs detailed DEBUG-level information about HTTP sessions, including request/response bodies and headers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.maps.search import MapsSearchClient\n\n# Create a logger for the 'azure.maps.search' SDK\nlogger = logging.getLogger('azure.maps.search')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Reading Complete Download Stream in Azure Storage File Share SDK\nDESCRIPTION: This code snippet demonstrates how to read the complete download stream as bytes using the readall() method of StorageStreamDownloader in the Azure Storage File Share SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nStorageStreamDownloader.readall()\n```\n\n----------------------------------------\n\nTITLE: Using Default Broker Account with InteractiveBrowserBrokerCredential (Python)\nDESCRIPTION: Shows how to configure `InteractiveBrowserBrokerCredential` to attempt silent authentication using the default account managed by the broker. Setting `use_default_broker_account` to `True` bypasses the account selection dialog. If silent authentication fails, it falls back to interactive authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity-broker/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncredential = InteractiveBrowserBrokerCredential(\n    parent_window_handle=current_window_handle,\n    use_default_broker_account=True\n)\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for runhistory\nDESCRIPTION: Configuration settings for the runhistory tag, specifying the input file for run-history and the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'runhistory'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/runhistory/run-history.json\noutput-folder: $(python-sdks-folder)/runhistory\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentIntelligenceClient with AzureKeyCredential\nDESCRIPTION: Python code to create a DocumentIntelligenceClient instance using an API key with AzureKeyCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\ndocument_intelligence_client = DocumentIntelligenceClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Workspaces in Python\nDESCRIPTION: Shows how to execute a logs query across multiple Log Analytics workspaces simultaneously.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclient.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    additional_workspaces=['<workspace 2>', '<workspace 3>']\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview DataMap Python Package\nDESCRIPTION: Command to install the Azure Purview DataMap client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-purview-datamap\n```\n\n----------------------------------------\n\nTITLE: Allowing Any Tenant for DefaultAzureCredential in Python (Pre-1.11.0 Behavior)\nDESCRIPTION: This snippet shows how to configure the `DefaultAzureCredential` in Python to allow token acquisition from any tenant, replicating the behavior prior to `azure-identity` version 1.11.0. By setting the `additionally_allowed_tenants` parameter to a list containing only the wildcard character `'*'`, the credential will not restrict token acquisition based on tenant ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/BREAKING_CHANGES.md#2025-04-23_snippet_1\n\nLANGUAGE: py\nCODE:\n```\ncredential = DefaultAzureCredential(additionally_allowed_tenants=['*'])\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Container Registry Client\nDESCRIPTION: Python code demonstrating how to authenticate with the Azure Container Registry using DefaultAzureCredential and create a ContainerRegistryManagementClient instance. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerregistry import ContainerRegistryManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerRegistryManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Setting a secret in azure-keyvault-secrets\nDESCRIPTION: Sets a secret using the set_secret method of SecretClient in the new azure-keyvault-secrets package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsecret = secret_client.set_secret(name=\"secret-name\", value=\"secret-value\")\nsecret_value = secret.value\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Principal using azure-identity in Python\nDESCRIPTION: This code shows how to authenticate with Azure services using ClientSecretCredential from the azure-identity library, the preferred way for modern Azure SDKs. It requires azure-identity and a service principal's tenant_id, client_id, and client_secret. The returned credential object can be used with new Azure SDK clients that expect an azure-identity credential, facilitating token acquisition and authentication. Outputs a ClientSecretCredential instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ClientSecretCredential\\n\\ncredential = ClientSecretCredential(tenant_id, client_id, client_secret)\n```\n\n----------------------------------------\n\nTITLE: Loading Labeled Feature Flags Using SettingSelector - Azure App Configuration Python Provider - Python\nDESCRIPTION: Shows how to load feature flags with a specific label (e.g., 'dev') using 'feature_flag_selectors'. Utilizes the 'SettingSelector' class to filter loaded feature flags. Dependencies: 'azure.appconfiguration.provider'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load, SettingSelector\n\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), feature_flags_enabled=True, feature_flag_selectors=[SettingSelector(key_filter=\"*\", label_filter=\"dev\")])\nalpha = config[\"feature_management\"][\"feature_flags\"][\"Alpha\"]\nprint(alpha[\"enabled\"])\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Resource Mover Service using DefaultAzureCredential\nDESCRIPTION: Creates an authenticated client for the Azure Resource Mover service using DefaultAzureCredential. This example shows how to retrieve the subscription ID from environment variables and initialize the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourcemover/azure-mgmt-resourcemover/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resourcemover import ResourceMoverServiceAPI\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceMoverServiceAPI(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Traffic Manager SDK Dependencies\nDESCRIPTION: Commands to install the required Azure Traffic Manager management package and Azure identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trafficmanager/azure-mgmt-trafficmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-trafficmanager\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Digital Twin components\nDESCRIPTION: Demonstrates how to update a component property within a digital twin using a JSON patch operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncomponent_name = \"Component1\"\npatch = [\n    {\n        \"op\": \"replace\",\n        \"path\": \"/ComponentProp1\",\n        \"value\": \"value2\"\n    }\n]\nservice_client.update_component(digital_twin_id, component_name, patch)\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Resource Group with Default Parameters in PowerShell\nDESCRIPTION: This snippet shows the default syntax for using the Update-TestResources.ps1 cmdlet. It requires a ServiceDirectory parameter and accepts optional parameters for BaseName, SubscriptionId, and DeleteAfterHours.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 [-ServiceDirectory] <String> [-BaseName <String>] [-SubscriptionId <String>]\n [-DeleteAfterHours <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Python Logging for Azure SDKs\nDESCRIPTION: Demonstrates how to configure the standard Python logging library to capture logs from Azure SDKs, including `azure.ai.inference` and `azure.core`. It shows how to get the logger, set the level (e.g., DEBUG), add a handler (e.g., `StreamHandler` for stdout or `FileHandler` for a file), and optionally customize the log format.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport sys\nimport logging\n\n# Acquire the logger for this client library. Use 'azure' to affect both\n# 'azure.core` and `azure.ai.inference' libraries.\nlogger = logging.getLogger(\"azure\")\n\n# Set the desired logging level. logging.INFO or logging.DEBUG are good options.\nlogger.setLevel(logging.DEBUG)\n\n# Direct logging output to stdout:\nhandler = logging.StreamHandler(stream=sys.stdout)\n# Or direct logging output to a file:\n# handler = logging.FileHandler(filename=\"sample.log\")\nlogger.addHandler(handler)\n\n# Optional: change the default logging format. Here we add a timestamp.\nformatter = logging.Formatter(\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\nhandler.setFormatter(formatter)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Match Condition Enum for Azure SDK (Python)\nDESCRIPTION: This snippet introduces the MatchConditions enum, which is used to specify precondition evaluation strategies (e.g., unconditionally, if modified, if not modified, etc.) for Azure client requests. The enum helps control concurrency and update logic based on object state, such as HTTP entity tags. Each member has a specific integer value to facilitate serialization and programmatic checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MatchConditions(Enum):\n    Unconditionally = 1  # Matches any condition\n    IfNotModified = 2  # If the target object is not modified. Usually it maps to etag=<specific etag>\n    IfModified = 3  # Only if the target object is modified. Usually it maps to etag!=<specific etag>\n    IfPresent = 4   # If the target object exists. Usually it maps to etag='*'\n    IfMissing = 5   # If the target object does not exist. Usually it maps to etag!='*'\n\n```\n\n----------------------------------------\n\nTITLE: Changes to Operation Keyword Arguments (`raw`/`cls`) in Azure SDK (v1.0.0b1)\nDESCRIPTION: In version 1.0.0b1, the `raw` keyword argument for operations was removed. To access the raw HTTP response, use the `cls` keyword argument, which accepts a callback function. This callback receives the pipeline response object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# 'raw' parameter removed:\n# result = client.operation(..., raw=True) # No longer works\n\n# Use 'cls' callback for advanced access:\ndef callback(pipeline_response):\n    # Access pipeline_response.http_response, etc.\n    return pipeline_response # Or transformed result\n\nresult = client.operation(..., cls=callback)\n```\n\n----------------------------------------\n\nTITLE: Running Agent Evaluation\nDESCRIPTION: Executes the evaluation process using configured evaluators and displays results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation import evaluate\n\nresponse = evaluate(\n    data=file_name,\n    evaluators={\n        \"tool_call_accuracy\": tool_call_accuracy,\n        \"intent_resolution\": intent_resolution,\n        \"task_adherence\": task_adherence,\n    },\n    azure_ai_project={\n        \"subscription_id\": os.environ[\"AZURE_SUBSCRIPTION_ID\"],\n        \"project_name\": os.environ[\"PROJECT_NAME\"],\n        \"resource_group_name\": os.environ[\"RESOURCE_GROUP_NAME\"],\n    }\n)\npprint(f'AI Foundary URL: {response.get(\"studio_url\")}')\n```\n\n----------------------------------------\n\nTITLE: BatchPerfTest Class Implementation\nDESCRIPTION: Implementation of BatchPerfTest class for batch operation testing, requiring implementations that return the number of completed operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass BatchPerfTest:\n    def run_batch_sync(self) -> int:\n        # Run cumulative operation(s) synchronously - i.e. an operation that results in more than a single logical result.\n        # When inheriting from BatchPerfTest, this method will need to be implemented.\n        # Must return the number of completed results represented by a single successful test run.\n\n    async def run_batch_async(self) -> int:\n        # Run cumulative operation(s) asynchronously - i.e. an operation that results in more than a single logical result.\n        # When inheriting from BatchPerfTest, this method will need to be implemented.\n        # Must return the number of completed results represented by a single successful test run.\n        # If writing a test for an SDK without async support (e.g. a T1 legacy SDK), implement this method and raise an exception.\n```\n\n----------------------------------------\n\nTITLE: Initializing ConversationAnalysisClient with Azure AD Authentication - Python\nDESCRIPTION: Creates a ConversationAnalysisClient using Azure Active Directory (AAD) authentication via DefaultAzureCredential from azure-identity. Expectation is that environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET are set. Inputs are the endpoint URL and a DefaultAzureCredential instance; output is a client object authenticated with AAD, suitable for enterprise or managed environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.language.conversations import ConversationAnalysisClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = ConversationAnalysisClient(endpoint=\"https://<my-custom-subdomain>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Async Operation in New Version for Creating Virtual Machine\nDESCRIPTION: Shows the new method of performing an asynchronous operation to create a virtual machine, using the 'begin_' prefix for async APIs and explicitly retrieving the result.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/python_mgmt_migration_guide.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = self.compute_client.virtual_machines.begin_create_or_update(\n    group_name,\n    vm_name,\n    parameters\n)\nvm = result.result()\n```\n\n----------------------------------------\n\nTITLE: Correcting Operation Class Import Path in azure-mgmt-containerregistry (Python)\nDESCRIPTION: Explains the v3.0.0rc2 breaking change affecting the import of operation classes (e.g., `MyClassOperations`). These classes should no longer be imported from their specific file within the `operations` sub-module (e.g., `azure.mgmt.containerregistry.v20xx_yy_zz.operations.my_class_operations`). Instead, import them directly from the `operations` sub-module (e.g., `from azure.mgmt.containerregistry.v20xx_yy_zz.operations import MyClassOperations`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect operation class import path after v3.0.0rc2\n# import azure.mgmt.containerregistry.v20xx_yy_zz.operations.my_class_operations\n```\n\nLANGUAGE: python\nCODE:\n```\n# Correct operation class import path starting from v3.0.0rc2\nfrom azure.mgmt.containerregistry.v20xx_yy_zz.operations import MyClassOperations\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Dependencies for Azure SDK for Python\nDESCRIPTION: A requirements file that references local development dependencies through relative paths and specifies the aiohttp package for asynchronous HTTP requests. The file includes tools, resource management, and identity components from the Azure SDK ecosystem.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-mgmt-search/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Azure Service Bus Python SDK and Dependencies - Bash\nDESCRIPTION: Demonstrates installation of the azure-mgmt-servicebus and azure-identity packages using pip. These are required to manage Service Bus resources with the Azure SDK in Python. This snippet is run in a Bash shell prior to Python development and requires Internet access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-mgmt-servicebus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-servicebus\\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Azure Service Bus v0.50\nDESCRIPTION: Example showing how to send individual messages and batches using QueueClient and Sender in Azure Service Bus SDK v0.50. Demonstrates both single message sending and batch message sending patterns.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclient = ServiceBusClient.from_connection_string(CONNECTION_STR)\n\nqueue_client = client.get_queue(queue)\nwith queue_client.get_sender() as sender:\n    # Send one at a time.\n    for i in range(100):\n        message = Message(\"Sample message no. {}\".format(i))\n        sender.send(message)\n\n    # Send as a batch.\n    messages_to_batch = [Message(\"Batch message no. {}\".format(i)) for i in range(10)]\n    batch = BatchMessage(messages_to_batch)\n    sender.send(batch)\n```\n\n----------------------------------------\n\nTITLE: Scheduling and Cancelling Messages in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares message scheduling and cancellation in v0.50 and v7. In v0.50, `schedule` and `cancel_scheduled_messages` accepted messages or sequence numbers as variable arguments. In v7, `schedule_messages` takes a list of messages via the `messages` parameter, and `cancel_scheduled_messages` takes a list of sequence numbers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith sender:\n    sender.schedule(schedule_time=schedule_time_utc, message1, message2)\n    sender.cancel_scheduled_messages(sequence_number1, sequence_number2)\n```\n\nLANGUAGE: python\nCODE:\n```\nwith sender:\n    sender.schedule_messages(messages=[message1, message2], schedule_time_utc=schedule_time_utc)\n    sender.cancel_scheduled_messages([sequence_number1, sequence_number2])\n```\n\n----------------------------------------\n\nTITLE: Parsing Key Vault Certificate Identifier in Python\nDESCRIPTION: Shows how to use the KeyVaultCertificateIdentifier class to parse a full certificate ID returned by Key Vault, extracting the name, vault URL, and version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Parse a Key Vault certificate identifier\nidentifier = KeyVaultCertificateIdentifier(full_certificate_id)\nname = identifier.name\nvault_url = identifier.vault_url\nversion = identifier.version\n```\n\n----------------------------------------\n\nTITLE: Feature Additions and Breaking Changes in Azure Network Management Client 26.0.0\nDESCRIPTION: This code snippet details the new features added and breaking changes in version 26.0.0 of the Azure Network Management Client, including new operations and model changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 26.0.0 (2024-07-21)\n\n### Features Added\n\n  - Added operation InboundSecurityRuleOperations.get\n  - Model BastionHost has a new parameter enable_session_recording\n  - Model ExpressRouteCircuitAuthorization has a new parameter connection_resource_uri\n  - Model FlowLog has a new parameter identity\n  - Model FlowLogInformation has a new parameter identity\n  - Model Probe has a new parameter no_healthy_backends_behavior\n  - Model ServiceEndpointPropertiesFormat has a new parameter network_identifier\n  - Model VirtualNetworkGateway has a new parameter identity\n  - Operation ExpressRouteCrossConnectionsOperations.list has a new optional parameter filter\n\n### Breaking Changes\n\n  - Model FirewallPacketCaptureParameters no longer has parameter id\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Account Variables for Cosmos DB Role Assignment\nDESCRIPTION: Shell commands to set variables for Cosmos DB account details. These variables are used in subsequent commands to create role definitions and assignments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsubscriptionId='<subscriptionId>'\nresourceGroupName='<resourceGroupName>'\naccountName='<accountName>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Proxy for Live Service Tests\nDESCRIPTION: These commands set environment variables to configure the test proxy for running live service tests without recordings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_TEST_RUN_LIVE=true\nset AZURE_SKIP_LIVE_RECORDING=true\nset PROXY_URL=http://localhost:5000\nset AZURE_TEST_USE_CLI_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Default Syntax for New-TestResources.ps1 PowerShell Script\nDESCRIPTION: The default parameter set for the New-TestResources.ps1 script, which deploys live test resources defined for a service directory to Azure. This syntax provides numerous optional parameters for customizing the deployment process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>\n [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]\n [-TestApplicationOid <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>] [-Location <String>]\n [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]\n [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]\n [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]\n [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Generating Docs for PartitionContext (aio, Python)\nDESCRIPTION: Sphinx directive to automatically generate documentation for the asynchronous `PartitionContext` class in `azure.eventhub.aio`. Includes all members, undocumented members, and inherited members using the specified options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.aio.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.aio.PartitionContext\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Cosmos DB Account with Azure CLI\nDESCRIPTION: Azure CLI command to create a new Cosmos DB account with SQL API. This requires a resource group name and a Cosmos DB account name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz cosmosdb create --resource-group <resource-group-name> --name <cosmos-account-name>\n```\n\n----------------------------------------\n\nTITLE: Initializing AzureDatabricksManagementClient with DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates how to initialize the `AzureDatabricksManagementClient` for interacting with Azure Databricks management APIs. It uses `DefaultAzureCredential` from `azure.identity` for authentication, which relies on environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET) and retrieves the subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable. Dependencies include `azure-identity` and `azure-mgmt-databricks` packages and properly configured environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databricks/azure-mgmt-databricks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.databricks import AzureDatabricksManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureDatabricksManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Example Error Output for Unauthorized (401) Exception\nDESCRIPTION: Illustrates the typical output printed when an `HttpResponseError` with a status code of 401 (Unauthorized) is caught, often due to an incorrect authentication key. It shows the status code, reason, and error message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n```text\nStatus code: 401 (Unauthorized)\nOperation returned an invalid status 'Unauthorized'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Azure Storage Blob SDK\nDESCRIPTION: Sets up detailed DEBUG level logging for Azure Storage Blob operations using Python's standard logging library. Creates a logger instance and configures it to output HTTP session details to console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.storage.blob import BlobServiceClient\n\n# Create a logger for the 'azure.storage.blob' SDK\nlogger = logging.getLogger('azure.storage.blob')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = BlobServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating x509 CA Certificate Enrollment Group in Python\nDESCRIPTION: This snippet demonstrates how to create an enrollment group with an x509 CA certificate attestation using the Azure IoT Device Provisioning Client. It initializes the client, loads a CA certificate, and creates an enrollment group with CA references.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Load certificate contents\nca_certificate = open(\"ca_certificate.pem\", \"rt\", encoding=\"utf-8\")\nca_contents = certificate.read()\n\n# Create x509 enrollment group with CA References\nclient.enrollment_groups.create_or_update(\n    id=\"<enrollment_group_id>\",\n    enrollment_group={\n        \"enrollmentGroupId\": \"<enrollment_group_id>\",\n        \"attestation\": {\n            \"type\": \"x509\",\n            \"x509\": {\n                \"caReferences\": {\n                    \"primary\": f\"{ca_contents}\",\n                    \"secondary\": f\"{ca_contents}\",\n                }\n            },\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Attestation Providers using Python SDK\nDESCRIPTION: Demonstrates how to initialize the `AttestationManagementClient` using `DefaultAzureCredential` (which requires environment variables like AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET to be set) and a subscription ID. It then calls the `list()` method on the `attestation_providers` attribute to retrieve and print the list of Attestation Providers within the specified Azure subscription.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-mgmt-attestation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import ClientAuthenticationError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.attestation import AttestationManagementClient\n\nclient = AttestationManagementClient(\n    credential=DefaultAzureCredential(),\n    subscription_id=\"00000000-0000-0000-0000-000000000000\",\n)\n\nresponse = client.attestation_providers.list()\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Silent User Authentication with Persisted AuthenticationRecord in Azure Identity (Python)\nDESCRIPTION: Demonstrates silent authentication by loading a previously persisted AuthenticationRecord and using it to instantiate InteractiveBrowserCredential. This enables applications to reuse cached tokens for the same user across restarts, reducing interactive prompts. Requires authentication record in serialized JSON (record_json), the azure-identity Python package, and consistent cache persistence setup. Outputs a credential capable of silent authentication if a valid token is found in the persisted cache.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndeserialized_record = AuthenticationRecord.deserialize(record_json)\nnew_credential = InteractiveBrowserCredential(\n    cache_persistence_options=TokenCachePersistenceOptions(), authentication_record=deserialized_record\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Events with EventProcessorHost (v1)\nDESCRIPTION: This snippet demonstrates how to set up an event processor host using the older v1 SDK. It initializes the event loop, creates an EventProcessorHost instance, and runs the event processing loop.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nloop = asyncio.get_event_loop()\nhost = EventProcessorHost(\n    EventProcessor,\n    eh_config,\n    storage_manager,\n    ep_params=[\"param1\",\"param2\"],\n    eph_options=eh_options,\n    loop=loop)\ntry:\n    loop.run_until_complete(host.open_async())\nfinally:\n    await host.close_async()\n    loop.stop()\n```\n\n----------------------------------------\n\nTITLE: Uploading Pickled DataFiles to ADLS via Helper Function - Python\nDESCRIPTION: This snippet demonstrates how to iterate through data files in a directory, read each as a pickled pandas DataFrame, and upload each to Azure Data Lake Storage using the upload_df_to_adls_path helper function. Variables such as CONTAINER_NAME, DIRECTORY_NAME, and FILENAME must be configured before use. Each file matching the OUTPUT_FILE_PREFIX is processed and uploaded, making this approach memory efficient for chunked data. Relies on proper prior setup of ADLS container and correct initialization of all functions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# NAme of the storage container. This must already exist.\\nCONTAINER_NAME = \"<container_name>\"\\n\\n# Name of the directory to write to. This will be created if it does not exist.\\nDIRECTORY_NAME = \"monitor-log-dump\"\\n\\n# Name of the file to write to (include the .json extension).\\nFILENAME = \"monitor-log-dump.json\"\\n\\n\\nfor file in os.listdir(OUTPUT_DIRECTORY):\\n    if file.startswith(OUTPUT_FILE_PREFIX):\\n        path = os.path.join(OUTPUT_DIRECTORY, file)\\n        df = pd.read_pickle(path)\\n        upload_df_to_adls_path(df, DIRECTORY_NAME, FILENAME, CONTAINER_NAME)\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Deprecated Claims via Token Body in Azure Attestation Python SDK\nDESCRIPTION: Illustrates how to access token claims that were removed or renamed in the `AttestationResult` type in version 1.0.0b4. This involves accessing the raw token body via the `get_body()` method on the `AttestationToken` object (obtained from the `AttestationResponse`) to retrieve deprecated fields like `deprecated_tee`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif response.token.get_body().deprecated_tee != 'sgx':\n    print(\"Unexpected tee claim in token\")\n```\n\n----------------------------------------\n\nTITLE: Listing secret properties in azure-keyvault-secrets\nDESCRIPTION: Lists the properties of secrets in a vault using the list_properties_of_secrets method of SecretClient in the new azure-keyvault-secrets package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsecrets = secret_client.list_properties_of_secrets()\n\nfor secret in secrets:\n    print(secret.name)\n    print(secret.content_type)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure IoT DPS Instance using Azure CLI\nDESCRIPTION: Demonstrates how to create an Azure IoT Device Provisioning Service instance using the Azure Command-Line Interface (CLI). It first creates a resource group (if needed) and then provisions the DPS instance within that group and specified location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new resource group (if necessary)\naz group create --name my-resource-group --location westus2\n\n# Create the DPS instance\naz iot dps create --name my-dps --resource-group my-resource-group --location westus2\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure IoT Hub Provisioning Services using DefaultAzureCredential\nDESCRIPTION: This Python code snippet demonstrates how to authenticate with the Azure IoT Hub Provisioning Services using DefaultAzureCredential. It requires the AZURE_SUBSCRIPTION_ID environment variable to be set and uses the IotDpsClient from the azure.mgmt.iothubprovisioningservices package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.iothubprovisioningservices import IotDpsClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = IotDpsClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Text Policy in Azure Cosmos DB Python\nDESCRIPTION: Demonstrates how to set up a full text policy with default language and specific path language settings. Currently only supports 'en-US' language code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfull_text_policy = {\n    \"defaultLanguage\": \"en-US\",\n    \"fullTextPaths\": [\n        {\n            \"path\": \"/text1\",\n            \"language\": \"en-US\"\n        },\n        {\n            \"path\": \"/text2\",\n            \"language\": \"en-US\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TextTranslationClient for Azure AI Translator Container\nDESCRIPTION: Creates a TextTranslationClient instance for use with Azure AI Translator Container without authentication. Only requires specifying the container endpoint.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntext_translator = TextTranslationClient(endpoint=endpoint)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview Sharing Package\nDESCRIPTION: Command to install the Azure Purview Sharing client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-purview-sharing\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure StorageCacheManagementClient - Python\nDESCRIPTION: This Python example demonstrates how to authenticate to Azure using DefaultAzureCredential and environment variables for client ID, tenant ID, client secret, and subscription ID. It then instantiates the StorageCacheManagementClient for subsequent API calls. Before running, ensure the environment variables 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and 'AZURE_SUBSCRIPTION_ID' are set. This code provides no output by itself but prepares a ready-to-use client for managing Azure Storage Caches. The main dependencies are 'azure-identity' and 'azure-mgmt-storagecache' libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagecache/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storagecache import StorageCacheManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageCacheManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Complex Message-Based Interaction\nDESCRIPTION: Demonstrates evaluation of a complex interaction using structured messages and tool definitions\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/task_adherence.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are an expert in literature and at provid can provide book recommendations.\"\n            },\n            {\n                \"createdAt\": \"2025-03-14T08:00:00Z\",\n                \"role\": \"user\",\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": \"I love historical fiction. Can you recommend a good book from that genre?\"\n                    }\n                ]\n            }\n        ]\n\nresponse =  [\n                {\n                    \"createdAt\": \"2025-03-14T08:00:05Z\",\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Let me fetch a recommendation for historical fiction.\"\n                        }\n                    ]\n                },\n                {\n                    \"createdAt\": \"2025-03-14T08:00:10Z\",\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"type\": \"tool_call\",\n                            \"tool_call_id\": \"tool_call_20250314_001\",\n                            \"name\": \"get_book\",\n                            \"arguments\": {\n                                \"genre\": \"historical fiction\"\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"createdAt\": \"2025-03-14T08:00:15Z\",\n                    \"role\": \"tool\",\n                    \"tool_call_id\": \"tool_call_20250314_001\",\n                    \"content\": [\n                        {\n                            \"type\": \"tool_result\",\n                            \"tool_result\": \"{ \\\"book\\\": { \\\"title\\\": \\\"The Pillars of the Earth\\\", \\\"author\\\": \\\"Ken Follett\\\", \\\"summary\\\": \\\"A captivating tale set in medieval England that weaves historical events with personal drama.\\\" } }\"\n                        }\n                    ]\n                },\n                {\n                    \"createdAt\": \"2025-03-14T08:00:20Z\",\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Based on our records, I recommend 'The Pillars of the Earth' by Ken Follett. This novel is an excellent example of historical fiction with a rich narrative and well-developed characters. Would you like more details or another suggestion?\"\n                        }\n                    ]\n                }\n       ]\n\ntool_definitions = [\n                    {\n                        \"name\": \"get_book\",\n                        \"description\": \"Retrieve a book recommendation for a specified genre.\",\n                        \"parameters\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"genre\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"The genre for which a book recommendation is requested.\"\n                                }\n                            }\n                        }\n                    }\n                ]\n\nresult = task_adherence_evaluator(query=query,\n                                  response=response,\n                                  tool_definitions=tool_definitions,\n                                 )\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Self-Signed X509 Certificate in PowerShell\nDESCRIPTION: This snippet demonstrates how to import the X509Certificate2 module, create a new certificate with a specified subject name and validity period, and format the certificate in various output formats.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/scripts/X509Certificate2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ./eng/common/scripts/X509Certificate2 # assumes $PWD is repo root\n\n$cert1 = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Redmond, S=WA, C=US' -ValidDays 3652\n\n$CaPublicKeyBase64 = $cert1 | Format-X509Certificate2 -Type CertificateBase64\n$CaPrivateKeyPem = $cert1 | Format-X509Certificate2 -Type Pkcs1\n$CaKeyPairPkcs12Base64 = $cert1 | Format-X509Certificate2 -Type Pkcs12Base64\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OAuth - V2.X vs V12\nDESCRIPTION: Shows OAuth authentication implementation differences. V2.X uses ADAL library while V12 leverages azure-identity package for simplified token management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.common import (\n    TokenCredential,\n)\nimport adal\n\ncontext = adal.AuthenticationContext(\n    str.format(\"{}/{}\", \"<active_directory_auth_endpoint>\", \"<active_directory_tenant_id>\"),\n    api_version=None, validate_authority=True)\n\ntoken = context.acquire_token_with_client_credentials(\n    \"https://storage.azure.com\",\n    \"<active_directory_application_id>\",\n    \"<active_directory_application_secret>\")[\"accessToken\"]\ntoken_credential = TokenCredential(token)\n\nservice = FileService(\"<storage_account_name>\", token_credential=token_credential)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\ntoken_credential = DefaultAzureCredential()\n\n# Instantiate a ShareServiceClient using a token credential\nfrom azure.storage.fileshare import ShareServiceClient\nshare_service_client = ShareServiceClient(\"https://<my-storage-account-name>.file.core.windows.net\", credential=token_credential)\n```\n\n----------------------------------------\n\nTITLE: Getting Sent Share Invitation\nDESCRIPTION: Retrieves details of a specific sent share invitation using share ID and invitation ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nsent_share_id = uuid.uuid4()\nsent_share_invitation_id = uuid.uuid4()\n\nget_invitation_response = client.sent_shares.get_invitation(\n    sent_share_id=str(sent_share_id), \n    sent_share_invitation_id=str(sent_share_invitation_id))\n\nretrieved_share_invitation = json.loads(get_invitation_response)\nprint(retrieved_share_invitation)\n```\n\n----------------------------------------\n\nTITLE: Initializing Enum with str Mixin in Python\nDESCRIPTION: Example of using the 'str' mixin with Enum to improve behavior when encountering unrecognized enum values. This change affects how enum values are represented and compared.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-mgmt-cognitiveservices/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AzureEnum(str, Enum):\n```\n\n----------------------------------------\n\nTITLE: Computing CRC64 with Azure Storage Python Extensions - Python\nDESCRIPTION: Demonstrates the usage of the Azure Storage Extensions package to compute the CRC64 hash using its custom polynomial. The example imports the crc64 extension, computes the CRC64 for given byte sequences, and shows how to chain hashes by passing the previous result as the initial value. Requires that 'azure-storage-extensions' is installed and available in the Python environment. Inputs are byte strings; outputs are CRC64 hash values as integers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-extensions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.extensions import crc64\n\ndata = b'Hello World!'\nresult = crc64.compute_crc64(data, 0)\n\n# Chain together calculations\ndata2 = b'Goodbye World!`\nresult2 = crc64.compute_crc64(data2, result)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Microsoft Entra ID\nDESCRIPTION: Example of creating a MapsRenderClient using DefaultAzureCredential for Microsoft Entra ID authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.render import MapsRenderClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nrender_client = MapsRenderClient(\n    client_id=\"<Azure Maps Client ID>\",\n    credential=credential\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Symmetric Key Enrollment in Python\nDESCRIPTION: Creates or updates an individual device enrollment using symmetric key attestation. It initializes the `DeviceProvisioningClient` from a connection string and defines an initial device twin state with desired properties and tags. The `create_or_update` method on the `individual_enrollment` namespace is used.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Construct initial twin with desired properties of {\"key\": \"value\"} and a tag of {\"env\": \"Development\"}\ninitial_twin = {\n    \"properties\": {\n        \"desired\": {\n            \"key\": \"value\"\n        }\n    },\n    \"tags\": {\n        \"env\": \"Development\"\n    }\n}\n\n# Create a symmetric key individual enrollment with initial twin\nclient.individual_enrollment.create_or_update(\n    id=\"<enrollment_id>\",\n    enrollment = {\n        \"registrationId\": \"<enrollment_id>\",\n        \"attestation\": {\n            \"type\": \"symmetricKey\",\n        },\n        \"deviceId\": \"<device_id>\",\n        \"initialTwin\": initial_twin\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Example Custom Credential Implementation\nDESCRIPTION: Shows how to implement a new credential type that supports both SupportsTokenInfo and TokenCredential protocols for maximum compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AccessToken, AccessTokenInfo, TokenRequestOptions\n\n\nclass MyNewCredential(SupportsTokenInfo):\n    def get_token_info(self, *scopes: str, options: Optional[TokenRequestOptions] = None) -> AccessTokenInfo:\n        # Primary implementation\n        ...\n\n    def get_token(\n        self,\n        *scopes: str,\n        claims: Optional[str] = None,\n        tenant_id: Optional[str] = None,\n        enable_cae: bool = False,\n        **kwargs: Any,\n     ) -> AccessToken:\n\n        # Secondary implementation for backwards compatibility\n        options: TokenRequestOptions = {}\n        if tenant_id:\n            options[\"tenant_id\"] = tenant_id\n        if claims:\n            options[\"claims\"] = claims\n        options[\"enable_cae\"] = enable_cae\n\n        token_info = self.get_token_info(*scopes, options=options)\n        return AccessToken(token_info.token, token_info.expires_on)\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Recognizer Resource with Azure CLI - PowerShell\nDESCRIPTION: Deploys a new Form Recognizer resource into a specified resource group via Azure CLI. Users must provide the resource name, group, SKU, location, and use the FormRecognizer kind. This step is crucial for provisioning the Form Recognizer service in their Azure subscription.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Create form recognizer\naz cognitiveservices account create \\\n    --name <your-resource-name> \\\n    --resource-group <your-resource-group-name> \\\n    --kind FormRecognizer \\\n    --sku <sku> \\\n    --location <location> \\\n    --yes\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Deployment in Python\nDESCRIPTION: This code creates a new deployment in an existing Azure Cloud Service. It requires a package URL, configuration file, and various parameters such as service name, deployment name, and slot. It also checks the operation status after creation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nservice_name = \"myhostedservice\"\ndeployment_name = \"v1\"\nslot = 'Production'\npackage_url = \"URL_for_.cspkg_file\"\nconfiguration = base64.b64encode(open(file_path, 'rb').read('path_to_.cscfg_file'))\nlabel = service_name\n\nresult = sms.create_deployment(service_name,\n                     slot,\n                     deployment_name,\n                     package_url,\n                     label,\n                     configuration)\n\noperation = sms.get_operation_status(result.request_id)\nprint('Operation status: ' + operation.status)\n```\n\n----------------------------------------\n\nTITLE: Fetching Tropical Storm Forecasts using Azure Maps Weather API in Python\nDESCRIPTION: This code snippet shows how to retrieve forecasts for tropical storms using the Azure Maps Weather SDK. It specifies parameters such as year, basin ID, and government storm ID to get specific forecast data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_tropical_storm_forecast():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_tropical_storm_forecast(\n            year=2021,\n            basin_id=\"NP\",\n            government_storm_id=2\n        )\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_tropical_storm_forecast()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Role Definition in Azure Key Vault (Python)\nDESCRIPTION: Shows how to fetch a role definition using KeyVaultAccessControlClient with the specified scope and unique name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfetched_definition = client.get_role_definition(scope=scope, name=unique_definition_name)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Checkpoint Store Blob Library with pip - Python\nDESCRIPTION: Demonstrates how to install the Azure Event Hubs checkpoint store blob library for Python using pip, which is a prerequisite for running the provided samples. This step enables persistent checkpointing of events when working with the Event Hubs client. Ensure that you have Python 3.8 or later and the proper environment before installation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventhub-checkpointstoreblob-aio\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Orbital Management Client with DefaultAzureCredential\nDESCRIPTION: This code demonstrates how to authenticate the Azure Orbital Management Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/orbital/azure-mgmt-orbital/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.orbital import AzureOrbital\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureOrbital(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Registering/Updating a Router Worker (Python)\nDESCRIPTION: Creates a `RouterWorker` object, defining its total capacity, the queues it serves, its labels (e.g., skills like `Some-Skill`), the channels it can handle work from, and its availability status. It uses the `upsert_worker` method of the `JobRouterClient` to register or update the worker. Requires an initialized `JobRouterClient` and an existing queue.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    RouterWorker,\n    RouterChannel\n)\n\nrouter_worker: RouterWorker = RouterWorker(\n    capacity = 1,\n    queues = [\n        \"queue-1\"\n    ],\n    labels = {\n        \"Some-Skill\": 11\n    },\n    channels = [\n        RouterChannel(channel_id = \"my-channel\", capacity_cost_per_job = 1)\n    ],\n    available_for_offers = True\n)\n\nworker = router_client.upsert_worker(\n    \"worker-1\",\n    router_worker\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Dependency in Python\nDESCRIPTION: This line installs Azure SDK tools in editable mode from a relative path. It's typically used in development environments to work with the latest version of the tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-mgmt-deviceupdate/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Managing Async Client Lifecycle in Azure Key Vault\nDESCRIPTION: Shows how to properly initialize and close async clients and credentials using context managers or explicit close methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client and credential are no longer needed\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.AsyncExitStack can help)\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Reliable Protocol Type for Web PubSub Client\nDESCRIPTION: Shows how to specify the JSON reliable protocol type when creating a WebPubSubClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.messaging.webpubsubclient.models import WebPubSubProtocolType\n# Change to use json.reliable.webpubsub.azure.v1\nconst client = new WebPubSubClient(\"<client-access-url>\", protocol_type=WebPubSubProtocolType.JSON_RELIABLE);\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure ML Experiment Run in Python\nDESCRIPTION: This snippet demonstrates initializing an Azure Machine Learning workspace from a configuration file, defining or getting an experiment within that workspace, and starting a new run associated with the experiment using the `azureml.core` Python library. The `start_logging()` method initiates the run, which can then be used to track metrics and outputs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/tests/unittests/data/unsupported_file_type.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azureml.core import Experiment, Run\nfrom azureml.core.workspace import Workspace\n\n# Define workspace and experiment\nws = Workspace.from_config()\nexp = Experiment(workspace=ws, name='my_experiment')\n\n# Create a new run\nrun = exp.start_logging()\n```\n\n----------------------------------------\n\nTITLE: Removing x-ms-parameterized-host Setting via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive targets the root of the Swagger document and removes the `x-ms-parameterized-host` extension by setting its value to `undefined`. This might be done to simplify URL construction in the generated code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $\n  transform: >\n    $[\"x-ms-parameterized-host\"] = undefined;\n```\n\n----------------------------------------\n\nTITLE: Decoding from EventData with AvroEncoder (New)\nDESCRIPTION: Example showing how to directly pass an EventData object to AvroEncoder for automatic decoding using the MessageType protocol.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef on_event(partition_context, event):\n    decoded_content = avro_encoder.decode(content=event)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoTFirmwareDefense SDK and Azure Identity in Bash\nDESCRIPTION: Installs the azure-mgmt-iotfirmwaredefense and azure-identity packages using pip for Python environments. These packages are required to interact with Azure IoTFirmwareDefense resources and to handle authentication. Expected to be run in a command-line shell where Python 3.8+ and pip are available.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iotfirmwaredefense/azure-mgmt-iotfirmwaredefense/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-iotfirmwaredefense\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Getting Random Bytes from Managed HSM in Python\nDESCRIPTION: Example of using the new get_random_bytes method added in version 4.5.0b1 to get a requested number of random bytes from a managed HSM.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.keys import KeyClient\n\nkey_client = KeyClient(vault_url, credential)\nrandom_bytes = key_client.get_random_bytes(32)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document Layout with Azure Form Recognizer (Python)\nDESCRIPTION: This snippet demonstrates how to analyze document layout using the prebuilt-layout model. It processes pages, lines, words, selection marks, and tables, extracting information such as content, confidence scores, and bounding polygons.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-layout\", document=f\n    )\nresult = poller.result()\n\nfor idx, style in enumerate(result.styles):\n    print(\n        \"Document contains {} content\".format(\n            \"handwritten\" if style.is_handwritten else \"no handwritten\"\n        )\n    )\n\nfor page in result.pages:\n    print(\"----Analyzing layout from page #{}----\".format(page.page_number))\n    print(\n        \"Page has width: {} and height: {}, measured with unit: {}\".format(\n            page.width, page.height, page.unit\n        )\n    )\n\n    for line_idx, line in enumerate(page.lines):\n        words = line.get_words()\n        print(\n            \"...Line # {} has word count {} and text '{}' within bounding polygon '{}'\".format(\n                line_idx,\n                len(words),\n                line.content,\n                line.polygon,\n            )\n        )\n\n        for word in words:\n            print(\n                \"......Word '{}' has a confidence of {}\".format(\n                    word.content, word.confidence\n                )\n            )\n\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' within bounding polygon '{}' and has a confidence of {}\".format(\n                selection_mark.state,\n                selection_mark.polygon,\n                selection_mark.confidence,\n            )\n        )\n\nfor table_idx, table in enumerate(result.tables):\n    print(\n        \"Table # {} has {} rows and {} columns\".format(\n            table_idx, table.row_count, table.column_count\n        )\n    )\n    for region in table.bounding_regions:\n        print(\n            \"Table # {} location on page: {} is {}\".format(\n                table_idx,\n                region.page_number,\n                region.polygon,\n            )\n        )\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.content,\n            )\n        )\n        for region in cell.bounding_regions:\n            print(\n                \"...content on page {} is within bounding polygon '{}'\".format(\n                    region.page_number,\n                    region.polygon,\n                )\n            )\n\nprint(\"----------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Tool Call Accuracy with Tool Calls Extracted from Response - Python\nDESCRIPTION: Uses the ToolCallAccuracyEvaluator to process a query with a response list containing multiple agent and tool call result messages, along with corresponding tool definitions. Demonstrates the evaluator's capacity to parse conversation history for tool calls, and outputs the accuracy result. This snippet is dependent on the response and tool_definitions variables being previously assigned.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = tool_call_accuracy(query=query, response=response, tool_definitions=tool_definitions)\npprint(response)\n```\n\n----------------------------------------\n\nTITLE: Querying Digital Twins in Python\nDESCRIPTION: Demonstrates how to query digital twins using the DigitalTwinsClient. This example retrieves all twins of a specific model type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/02_Purchasing_Tickets.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = \"SELECT * FROM digitaltwins t where IS_OF_MODEL('dtmi:billmanh:patron;1')\"\nquery_result = service_client.query_twins(query_expression)\n\nvalues = []\nfor i in query_result:\n    values.append(i)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Version of a Certificate in Azure Key Vault using Python\nDESCRIPTION: This snippet shows how to retrieve a specific version of a certificate from Azure Key Vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ncertificate = certificate_client.get_certificate_version(certificate_name=\"cert-name\", version=\"cert-version\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Security Center Management SDK in Python\nDESCRIPTION: Commands to install the Azure Security Center Management SDK and the Azure Identity library using pip. These packages are required for authenticating and interacting with Azure Security Center services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-security\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test Examples for Azure Metrics Advisor\nDESCRIPTION: Example commands showing how to run specific performance tests for the Metrics Advisor service, including listing anomalies, incidents, and root causes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-metricsadvisor/tests> perfstress ListAnomaliesTest\n(env) ~/azure-ai-metricsadvisor/tests> perfstress ListIncidentsTest\n(env) ~/azure-ai-metricsadvisor/tests> perfstress ListRootCausesTest\n```\n\n----------------------------------------\n\nTITLE: Detecting Laterality Discrepancy Inference in Radiology Insights using Python\nDESCRIPTION: This code snippet demonstrates how to iterate through patient results and identify laterality discrepancy inferences in radiology insights data. It uses the RadiologyInsightsInferenceType enum for inference type checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.LATERALITY_DISCREPANCY:\n            print(f\"Laterality Discrepancy Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Configuration Management SDK and Azure Identity Using pip - Bash\nDESCRIPTION: This code snippet demonstrates how to install the required Azure packages (azure-mgmt-appconfiguration and azure-identity) using pip. These packages are prerequisites for managing Azure App Configuration resources programmatically with the Python SDK. Run each command in your terminal to ensure the necessary dependencies are available before initializing the client or running SDK code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-mgmt-appconfiguration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-appconfiguration\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Azure SDK Python Package Version 1.0.0\nDESCRIPTION: Stable release notes from May 2021 documenting new metadata parameters for MarkdownPart and DashboardPart.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portal/azure-mgmt-portal/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2021-05-21)\n\n**Features**\n\n  - Model MarkdownPartMetadata has a new parameter additional_properties\n  - Model DashboardPartMetadata has a new parameter additional_properties\n```\n\n----------------------------------------\n\nTITLE: Initializing Cancer Profiling Client with API Key Authentication\nDESCRIPTION: Python code snippet showing how to initialize the CancerProfilingClient using an API key credential. The example retrieves the key and endpoint from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.cancerprofiling.aio import CancerProfilingClient\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\ncancer_profiling_client = CancerProfilingClient(endpoint=ENDPOINT, credential=AzureKeyCredential(KEY))\n```\n\n----------------------------------------\n\nTITLE: Deleting Certificates with New Azure Key Vault Certificates SDK\nDESCRIPTION: Shows certificate deletion using the new azure-keyvault-certificates SDK. Features long-running operation support with poller object for tracking deletion status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndeleted_certificate_poller = certificate_client.begin_delete_certificate(certificate_name=\"cert-name\")\ndeleted_certificate = deleted_certificate_poller.result()\n\ndeleted_certificate_poller.wait()\ncertificate_client.purge_deleted_certificate(certificate_name=\"cert-name\")\n```\n\n----------------------------------------\n\nTITLE: Event Hub Exceptions Class Documentation in RST\nDESCRIPTION: ReStructuredText documentation directives for Azure Event Hub exception classes including EventHubError, ConnectError, ConnectionLostError, EventDataError, EventDataSendError, AuthenticationError, OwnershipLostError, ClientClosedError, and OperationTimeoutError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.exceptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n    .. autoclass:: azure.eventhub.exceptions.EventHubError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.ConnectError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.ConnectionLostError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.EventDataError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.EventDataSendError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.AuthenticationError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.OwnershipLostError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.ClientClosedError\n        :members:\n        :undoc-members:\n\n    .. autoclass:: azure.eventhub.exceptions.OperationTimeoutError\n        :members:\n        :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Authenticating with DefaultAzureCredential in azure-keyvault-secrets\nDESCRIPTION: Creates a SecretClient using DefaultAzureCredential from azure-identity in the new azure-keyvault-secrets package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Service Bus Management Client - Python\nDESCRIPTION: Shows how to instantiate a ServiceBusManagementClient using DefaultAzureCredential for authentication, sourcing credentials and subscription ID from environment variables. Requires prior installation of azure-identity and azure-mgmt-servicebus, along with configuration of AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID in the environment. The resulting client object is ready for use in managing Service Bus resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-mgmt-servicebus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\\nfrom azure.mgmt.servicebus import ServiceBusManagementClient\\nimport os\\n\\nsub_id = os.getenv(\\\"AZURE_SUBSCRIPTION_ID\\\")\\nclient = ServiceBusManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating through Azure CLI using azure-common in Python\nDESCRIPTION: This snippet explains how to leverage Azure CLI credentials using the legacy azure-common approach for older Azure SDKs. It shows usage of get_client_from_cli_profile to automatically fetch credentials for the SubscriptionClient. Dependencies include azure-common and azure-mgmt-resource libraries, and the Azure CLI must be installed and logged in for this to work. It returns an authenticated SubscriptionClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.client_factory import get_client_from_cli_profile\\nfrom azure.mgmt.resource import SubscriptionClient\\n\\nsubscription_client = get_client_from_cli_profile(SubscriptionClient)\n```\n\n----------------------------------------\n\nTITLE: Configuring CosmosHttpLoggingPolicy with File Output\nDESCRIPTION: Shows how to set up diagnostic logging using CosmosHttpLoggingPolicy with file output configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom azure.cosmos import CosmosClient\n\n#Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure.cosmos')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a file output\nhandler = logging.FileHandler(filename=\"azure\")\nlogger.addHandler(handler)\n\n# This client will log diagnostic information from the HTTP session by using the CosmosHttpLoggingPolicy.\n# Since we passed in the logger to the client, it will log information on every request.\nclient = CosmosClient(URL, credential=KEY, logger=logger, enable_diagnostics_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LRO Polling Strategy in Python\nDESCRIPTION: Defines a custom polling strategy class that extends LongRunningOperation to handle file upload status monitoring. Implements core polling logic including status checks, URL management, and operation state handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, MutableMapping, Any\nfrom azure.core.polling.base_polling import LongRunningOperation, OperationFailed\nfrom azure.core.pipeline import PipelineResponse\nJSON = MutableMapping[str, Any]\n\n\nclass CustomPollingStrategy(LongRunningOperation):\n    \"\"\"CustomPollingStrategy which provides default logic\n    for interpreting operation responses and status updates.\n    \"\"\"\n\n    def can_poll(self, pipeline_response: PipelineResponse) -> bool:\n        \"\"\"Determine from the initial response that we can poll.\n        In this example, we need a file_id present to proceed with polling.\n\n        :param PipelineResponse pipeline_response: initial REST call response.\n        \"\"\"\n        response = pipeline_response.http_response.json()\n        if response.get(\"file_id\", None) is None:\n            return False\n        return True\n\n    def get_polling_url(self) -> str:\n        \"\"\"Return the polling URL. This is the URL for the status monitor\n        and where the GET requests will be made during polling.\n\n        For this example, we don't need to extract the URL\n        from the initial response so it is not implemented.\n        \"\"\"\n        raise NotImplementedError(\"The polling strategy does not need to extract a polling URL.\")\n\n    def set_initial_status(self, pipeline_response: PipelineResponse) -> str:\n        \"\"\"Process first response after initiating long running operation and set initial status.\n\n        :param PipelineResponse pipeline_response: initial REST call response.\n        \"\"\"\n\n        response = pipeline_response.http_response\n        if response.status_code == 200:\n            return \"InProgress\"\n        raise OperationFailed(\"Operation failed or canceled\")\n\n    def get_status(self, response: JSON) -> str:\n        \"\"\"Return the status based on this response.\n\n        Typically, this method extracts a status string from the\n        response. In this example, we determine status based on whether our\n        result is populated or not.\n        \"\"\"\n        if response is None:\n            return \"InProgress\"\n        return \"Succeeded\"\n\n    def get_final_get_url(self, pipeline_response: PipelineResponse) -> Optional[str]:\n        \"\"\"If a final GET is needed when the LRO is complete, returns the URL.\n\n        :rtype: str\n        \"\"\"\n        return None\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Clients via `aio` Namespace in Azure Python SDK\nDESCRIPTION: Announces stable support for asynchronous programming. The async version of the client and its operations are available within the `aio` namespace of the SDK package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\naio\n```\n\n----------------------------------------\n\nTITLE: Defining MatchConditions Enum for Azure SDK in Python\nDESCRIPTION: The MatchConditions enum defines various conditional operations for HTTP requests, such as unconditional or conditional on modification/presence. It is used to express conditional headers or behaviors in the Azure SDK pipelines and transports, relying on Python's standard Enum. Each value indicates a unique match semantics (like IfModified or IfPresent), facilitating fine-grained request control.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass MatchConditions(Enum):\n    Unconditionally = 1\n    IfNotModified = 2\n    IfModified = 3\n    IfPresent = 4\n    IfMissing = 5\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Trusted Signing Management Client\nDESCRIPTION: Example showing how to authenticate the TrustedSigningMgmtClient using DefaultAzureCredential. Requires environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trustedsigning/azure-mgmt-trustedsigning/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.trustedsigning import TrustedSigningMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = TrustedSigningMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Instantiating QueueService Client with Shared Key (Python 2.X)\nDESCRIPTION: Creates a QueueService client using storage account name and access key in version 2.X of the Azure Storage Queue SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueService\nservice = QueueService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Microsoft Entra ID Credential\nDESCRIPTION: Example showing how to authenticate with the Azure Maps Weather client using Microsoft Entra ID (formerly Azure AD). Uses DefaultAzureCredential from the azure-identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.maps.weather import MapsWeatherClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nweather_client = MapsWeatherClient(credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a local relative path for the Azure SDK tools as a development dependency. It uses the '-e' flag to indicate an editable install, allowing developers to work on the tools alongside the main SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-storage-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Swapping Parameter Order in Schedule Method (Python)\nDESCRIPTION: Swapped the order of the `schedule_time_utc` and `messages` parameters in `ServiceBusSender.schedule()` (now `schedule_messages`) to align better with the syntax of the `send_messages()` method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\n# Old parameter order:\n# ServiceBusSender.schedule(schedule_time_utc, messages)\n\n# New parameter order:\nServiceBusSender.schedule_messages(messages, schedule_time_utc)\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration Attributes (Python)\nDESCRIPTION: Shows how to access and modify client configuration settings, such as `long_running_operation_timeout`, after the client (e.g., `ResourceManagementClient`) has been initialized using the simplified constructor introduced in version 2.0.0rc4/0.30.0rc4. Configuration is accessed via the `config` attribute of the client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresource_client.config.long_running_operation_timeout = 5\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path in pip Requirements File\nDESCRIPTION: This requirement installs the Azure SDK tools from a relative local path. The -e flag indicates an editable installation, which is useful for development purposes where the source code might change.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-msi/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Running AutoRest to Generate Python SDK - PowerShell\nDESCRIPTION: Changes the current directory to a target Swagger folder and invokes the autorest command to generate SDK client code as per the provided SWAGGER.md file. Dependencies include an initialized Swagger/OpenAPI definition in the target folder and a working AutoRest installation. Inputs are the path to SWAGGER.md; output is the generated SDK code following defined settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/swagger/SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd <swagger-folder>\nautorest ./SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Setting playback mode in testsettings_local.cfg\nDESCRIPTION: Configuration setting for enabling playback mode in the Azure SDK test framework, to be added to testsettings_local.cfg file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nlive-mode: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Registry Test Class in Python\nDESCRIPTION: Shows the structure of a test class for Schema Registry including client creation helper method and a test case. Uses AzureRecordedTestCase as base class and implements recorded tests with proper decorators.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass TestSchemaRegistry(AzureRecordedTestCase):\n\n    def create_schemareg_client(self, endpoint):\n        credential = self.get_credential(SchemaRegistryClient)\n        client = self.create_client_from_credential(SchemaRegistryClient, credential=credential, endpoint=endpoint)\n        return client\n\n    ...\n\n    @SchemaRegistryPreparer()\n    @recorded_by_proxy\n    def test_client_creation(self, schemaregistry_endpoint):\n        client = self.create_schemareg_client(schemaregistry_endpoint)\n        assert client is not None\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities with GUID Properties in Python\nDESCRIPTION: Demonstrates how to filter entities based on GUID properties using the Azure Data Tables client library. This example filters on the GuidValue field.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"GuidValue eq guid'a455c695-df98-5678-aaaa-81d3367e5a34'\"\ntable_client.query_entities(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Changelog Entry - Version 34.0.0\nDESCRIPTION: Release notes documenting breaking changes including removal of API versions and model parameter changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 34.0.0 (2025-01-20)\n\n### Features Added\n\n  - Model CloudServiceVaultCertificate has a new parameter is_bootstrap_certificate\n\n### Breaking Changes\n\n  - Removed subfolders of some unused Api-Versions for smaller package size\n  - Model Gallery no longer has parameter identity\n  - Model GalleryImage no longer has parameter allow_update_image\n```\n\n----------------------------------------\n\nTITLE: Using Python SDK Tooling for Code Generation\nDESCRIPTION: Simplified Python command that leverages the SDK's built-in tooling to generate code from a REST API specification's readme file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generation.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -m packaging_tools.generate_sdk -v -m restapi_path/readme.md\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Breaking Changes - Version 27.0.0\nDESCRIPTION: Breaking changes and new feature additions including updates to VirtualMachineScaleSet and RunCommand operations\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nOperation VirtualMachineRunCommandsOperations.begin_create_or_update has a new optional and keyword-only parameter content_type\nOperation VirtualMachineRunCommandsOperations.begin_update has a new optional and keyword-only parameter content_type\nModel PurchasePlan no longer has parameter promotion_code\n```\n\n----------------------------------------\n\nTITLE: Authentication with Microsoft Entra ID\nDESCRIPTION: Example showing how to authenticate with Azure Maps using Microsoft Entra ID credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.geolocation import MapsGeolocationClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\ngeolocation_client = MapsGeolocationClient(\n    client_id=\"<Azure Maps Client ID>\",\n    credential=credential\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Package Configuration Files\nDESCRIPTION: Commands for updating packaging configuration files locally or for a pull request. These tools help manage setup.py, MANIFEST.in, and other packaging files.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools --build-conf azure-mgmt-myservice\n```\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools.update_pr -v -p 3979\n```\n\n----------------------------------------\n\nTITLE: Authenticating with azure-keyvault-certificates using DefaultAzureCredential\nDESCRIPTION: Creates a CertificateClient using DefaultAzureCredential from azure-identity for authentication in the new azure-keyvault-certificates library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Accessing Certificate Thumbprint in Python\nDESCRIPTION: Demonstrates how to access the SHA-1 thumbprint of a certificate as a hexadecimal string using the CertificateProperties class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Get hexadecimal representation of certificate thumbprint\nthumprint_hex = CertificateProperties.x509_thumbprint.hex()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Device Registry Management Client using DefaultAzureCredential\nDESCRIPTION: Python code example showing how to authenticate with the Azure Device Registry Management Client using DefaultAzureCredential. The code retrieves the subscription ID from environment variables and initializes the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceregistry/azure-mgmt-deviceregistry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.deviceregistry import DeviceRegistryMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DeviceRegistryMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating a Boundary in FarmBeats\nDESCRIPTION: Example showing how to create a geographic boundary using GeoJSON coordinates in FarmBeats.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"boundary-1\"\n\nboundary = client.boundaries.create_or_update(\n    party_id=party_id,\n    boundary_id=boundary_id,\n    boundary={\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\":\n                [\n                    [\n                        [73.70457172393799, 20.545385304358106],\n                        [73.70457172393799, 20.545385304358106],\n                        [73.70448589324951, 20.542411534243367],\n                        [73.70877742767334, 20.541688176010233],\n                        [73.71023654937744, 20.545083911372505],\n                        [73.70663166046143, 20.546992723579137],\n                        [73.70457172393799, 20.545385304358106],\n                    ]\n                ]\n        },\n        \"status\": \"<string>\",\n        \"name\": \"<string>\",\n        \"description\": \"<string>\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Configuration Store via Azure CLI in PowerShell\nDESCRIPTION: This PowerShell example uses the Azure CLI to create a new Azure App Configuration store. You must replace the placeholders with your configuration store name and resource group. Dependencies include having an Azure subscription, the Azure CLI installed, and credentials with sufficient privileges. The store will be provisioned in the 'eastus' Azure region.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure SDK Client with DefaultAzureCredential (Python)\nDESCRIPTION: This Python snippet shows how to authenticate the Azure Storage Sync management client using the DefaultAzureCredential and an Azure subscription ID obtained from the environment. Required dependencies are 'azure-identity', 'azure-mgmt-storagesync', and 'os'. Key parameters include 'AZURE_SUBSCRIPTION_ID' (from environment variables) and optional Azure service principal variables. The input is the current environment configuration; the output is an authenticated client object ready for use. Ensure environment variables for client ID, tenant ID, and client secret are set as required for DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagesync/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storagesync import MicrosoftStorageSync\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftStorageSync(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Model Evaluation Metrics\nDESCRIPTION: Calculates performance metrics for the ARIMA model including RMSE, AIC, and forecast timestamp. Used for model evaluation and tracking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.metrics import mean_squared_error\n\n# Root mean squared error, a common method for observing the delta between a forecast and the source-of-truth.\nrmse = numpy.sqrt(mean_squared_error(test, forecast))\n# Akaike's information criterion, a measure that also folds the \"simplicity\" of the model into the score.\naic = model.aic()\n# We should also record what data we were \"up to\" when we made this forecast.\nforecast_time = test.index[-1]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Elastic Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip package manager. Installs both the elastic management and identity packages needed for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elastic/azure-mgmt-elastic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-elastic\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Resource Management Client using DefaultAzureCredential\nDESCRIPTION: Python code sample demonstrating how to authenticate with the Azure Resource Management Client using DefaultAzureCredential from the azure-identity package. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-resource/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Enabling and Refreshing Feature Flags - Azure App Configuration Python Provider - Python\nDESCRIPTION: Illustrates enabling refresh for feature flags (decoupled from configuration refresh) via 'feature_flag_refresh_enabled=True'. Refreshes both configuration values and feature flags using the provider's 'refresh' method. Ensures automatic change detection for feature flags.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), feature_flags_enabled=True, feature_flag_refresh_enabled=True)\n\n...\n\nconfig.refresh()\n```\n\n----------------------------------------\n\nTITLE: Disabling Challenge Resource Verification in Azure Key Vault Secret Client\nDESCRIPTION: This snippet demonstrates how to create a SecretClient for Azure Key Vault with challenge resource verification disabled. This is useful when working with mock services or non-transparent proxies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nclient = SecretClient(\"https://my-key-vault.vault.azure.net/\", credential, verify_challenge_resource=False)\n```\n\n----------------------------------------\n\nTITLE: Backwards compatibility with AvroSerializer encoded content\nDESCRIPTION: Complete example showing how to decode content that was previously encoded with AvroSerializer by using azure-schemaregistry-avroencoder v1.0.0b2 which can detect the preamble format.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\neventhub_consumer = EventHubConsumerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    consumer_group='$Default',\n    eventhub_name=eventhub_name,\n)\n\ndef on_event(partition_context, event):\n    decoded_content = avro_encoder.decode(event)\n\nwith eventhub_consumer, avro_encoder:\n    eventhub_consumer.receive(on_event=on_event, starting_position=\"-1\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure China using ADAL\nDESCRIPTION: This snippet shows how to use ADAL to connect to Azure China. It configures the authentication and management endpoints specific to Azure China and creates a ResourceManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/multicloud.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport adal\nfrom msrestazure.azure_active_directory import AdalAuthentication\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Service Principal\ntenant = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\nclient_id = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\npassword = 'password\n\n# Azure China\nauthentication_endpoint = 'https://login.chinacloudapi.cn/'\nazure_endpoint = 'https://management.chinacloudapi.cn/'\n    \ncontext = adal.AuthenticationContext(authentication_endpoint+tenant)\ncredentials = AdalAuthentication(\n    context.acquire_token_with_client_credentials,\n    azure_endpoint,\n    client_id,\n    password\n)\nsubscription_id = '33333333-3333-3333-3333-333333333333'\n\nresource_client = ResourceManagementClient(\n    credentials,\n    subscription_id,\n    base_url=azure_endpoint\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Maps Timezone Client with SAS Token - Python\nDESCRIPTION: Shows how to instantiate the MapsTimeZoneClient using a SAS token stored in the AZURE_SAS_TOKEN environment variable. The example uses AzureSASCredential, and is suitable for applications using token-based authentication to the Azure Maps APIs. Dependencies include azure-core and azure-maps-timezone packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureSASCredential\nfrom azure.maps.timezone import MapsTimeZoneClient\n\ncredential = AzureSASCredential(os.environ.get(\"AZURE_SAS_TOKEN\"))\n\ntimezone_client = MapsTimeZoneClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs for integration with Schema Registry\nDESCRIPTION: Command to install the Azure Event Hubs library at version 5.9.0 or higher for integration with the Schema Registry Avro Encoder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventhub>=5.9.0\n```\n\n----------------------------------------\n\nTITLE: Generating Share SAS Using Azure Storage File Share SDK\nDESCRIPTION: This code snippet demonstrates how to generate a Share SAS (Shared Access Signature) using the Azure Storage File Share SDK for Python. It replaces the previous method of generating SAS on client objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ngenerate_share_sas()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Text for Intents and Entities with Conversation App - Python\nDESCRIPTION: Demonstrates a full workflow for using ConversationAnalysisClient to analyze a user utterance and extract custom intents and entities. It loads configuration and secrets from environment variables, constructs the analysis task, and parses results including displaying intents and entity resolutions. Expects valid Azure CLU resource keys and project details to be present in the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# import libraries\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n\n# get secrets\nclu_endpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nclu_key = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\nproject_name = os.environ[\"AZURE_CONVERSATIONS_PROJECT_NAME\"]\ndeployment_name = os.environ[\"AZURE_CONVERSATIONS_DEPLOYMENT_NAME\"]\n\n# analyze quey\nclient = ConversationAnalysisClient(clu_endpoint, AzureKeyCredential(clu_key))\nwith client:\n    query = \"Send an email to Carol about the tomorrow's demo\"\n    result = client.analyze_conversation(\n        task={\n            \"kind\": \"Conversation\",\n            \"analysisInput\": {\n                \"conversationItem\": {\n                    \"participantId\": \"1\",\n                    \"id\": \"1\",\n                    \"modality\": \"text\",\n                    \"language\": \"en\",\n                    \"text\": query\n                },\n                \"isLoggingEnabled\": False\n            },\n            \"parameters\": {\n                \"projectName\": project_name,\n                \"deploymentName\": deployment_name,\n                \"verbose\": True\n            }\n        }\n    )\n\n# view result\nprint(\"query: {}\".format(result[\"result\"][\"query\"]))\nprint(\"project kind: {}\\n\".format(result[\"result\"][\"prediction\"][\"projectKind\"]))\n\nprint(\"top intent: {}\".format(result[\"result\"][\"prediction\"][\"topIntent\"]))\nprint(\"category: {}\".format(result[\"result\"][\"prediction\"][\"intents\"][0][\"category\"]))\nprint(\"confidence score: {}\\n\".format(result[\"result\"][\"prediction\"][\"intents\"][0][\"confidenceScore\"]))\n\nprint(\"entities:\")\nfor entity in result[\"result\"][\"prediction\"][\"entities\"]:\n    print(\"\\ncategory: {}\".format(entity[\"category\"]))\n    print(\"text: {}\".format(entity[\"text\"]))\n    print(\"confidence score: {}\".format(entity[\"confidenceScore\"]))\n    if \"resolutions\" in entity:\n        print(\"resolutions\")\n        for resolution in entity[\"resolutions\"]:\n            print(\"kind: {}\".format(resolution[\"resolutionKind\"]))\n            print(\"value: {}\".format(resolution[\"value\"]))\n    if \"extraInformation\" in entity:\n        print(\"extra info\")\n        for data in entity[\"extraInformation\"]:\n            print(\"kind: {}\".format(data[\"extraInformationKind\"]))\n            if data[\"extraInformationKind\"] == \"ListKey\":\n                print(\"key: {}\".format(data[\"key\"]))\n            if data[\"extraInformationKind\"] == \"EntitySubtype\":\n                print(\"value: {}\".format(data[\"value\"]))\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Static Access Token in Python\nDESCRIPTION: Code to authenticate with the Azure Remote Rendering service using a static access token obtained from the Mixed Reality STS service. This approach retrieves a token from the authentication service first.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mixedreality.authentication import MixedRealityStsClient\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\n\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = client.get_token()\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=token,\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Batch Logs Query Response in Python\nDESCRIPTION: Shows how to handle batch logs query responses, including success status checking and conversion to pandas DataFrame.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor result in response:\n    if result.status == LogsQueryStatus.SUCCESS:\n        for table in result:\n            df = pd.DataFrame(table.rows, columns=table.columns)\n            print(df)\n```\n\n----------------------------------------\n\nTITLE: Using Union Types for Parameter Flexibility\nDESCRIPTION: Demonstrates how to use typing.Union to specify that a parameter can accept multiple types, allowing for more flexible function interfaces.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\n\ndef begin_build_model(\n    self, source: str, build_mode: Union[str, DocumentBuildMode], **kwargs: Any\n) -> DocumentModelAdministrationLROPoller[DocumentModelInfo]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Encoding EventData with AvroEncoder (New)\nDESCRIPTION: Example showing how to use the MessageType protocol with AvroEncoder to automatically encode content and set it on an EventData object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith encoder:\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(content=dict_content, schema=SCHEMA_STRING, message_type=EventData)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library\nDESCRIPTION: Command to install the Azure Identity library for Python using pip. This library is required for authentication with Azure Active Directory when using Azure OpenAI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Data from Public Blob\nDESCRIPTION: Downloads and loads sample data from a public Azure blob storage into a pandas DataFrame. Includes datetime parsing and indexing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pandas\ndata = pandas.read_csv(r\"https://kibrantnstoragetest.blob.core.windows.net/public/synthetic_data.csv\", parse_dates=[0], index_col=[0])\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Marketplace Ordering SDK using DefaultAzureCredential\nDESCRIPTION: Sample code demonstrating how to authenticate with the Azure Marketplace Ordering SDK using DefaultAzureCredential. It retrieves the subscription ID from environment variables and initializes the MarketplaceOrderingAgreements client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/marketplaceordering/azure-mgmt-marketplaceordering/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.marketplaceordering import MarketplaceOrderingAgreements\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MarketplaceOrderingAgreements(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation Entry\nDESCRIPTION: Documents version changes, including features added and breaking changes for Azure Communication Service Management SDK\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-mgmt-communication/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.1.0 (2024-03-18)\n\n### Features Added\n\n  - Model CommunicationServiceResource has a new parameter identity\n  - Model CommunicationServiceResourceUpdate has a new parameter identity\n```\n\n----------------------------------------\n\nTITLE: Initializing DocumentAnalysis and DocumentModelAdministration Clients (Azure SDK, Python 3.x)\nDESCRIPTION: This example illustrates initializing DocumentAnalysisClient and DocumentModelAdministrationClient as of azure-ai-formrecognizer version 3.2.x, using API keys and endpoint information from environment variables. These clients consolidate the SDK's interface for new API versions (2022-08-31 and later), providing modernized, unified methods for both analysis and model management. Dependencies include azure-core and azure-ai-formrecognizer, and users must provide correct endpoint and credentials as environment parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient, DocumentModelAdministrationClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\n\ndocument_model_admin_client = DocumentModelAdministrationClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sent Share\nDESCRIPTION: Creates a new sent share with specified artifacts and properties for data sharing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nsent_share_id = uuid.uuid4()\n\nartifact = {\n    \"properties\": {\n        \"paths\": [\n            {\n                \"containerName\": \"container-name\",\n                \"receiverPath\": \"shared-file-name.txt\",\n                \"senderPath\": \"original/file-name.txt\"\n            }\n        ]\n    },\n    \"storeKind\": \"AdlsGen2Account\",\n    \"storeReference\": {\n        \"referenceName\": \"/subscriptions/{subscription-id}/resourceGroups/provider-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage\",\n        \"type\": \"ArmResourceReference\"\n    }\n}\n\nsent_share = {\n    \"properties\": {\n        \"artifact\": artifact,\n        \"displayName\": \"sampleShare\",\n        \"description\": \"A sample share\"\n    },\n    \"shareKind\": \"InPlace\"\n}\n\nrequest = client.sent_shares.begin_create_or_replace(\n    str(sent_share_id),\n    sent_share=sent_share)\n\nresponse = request.result()\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weather Along Route with Azure Maps Weather API in Python\nDESCRIPTION: This snippet shows how to get weather forecasts and hazard assessments along a specified route using the Azure Maps Weather SDK. It takes a query parameter representing the route coordinates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_weather_along_route():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_weather_along_route(\n            query='25.033075,121.525694,0:25.0338053,121.5640089,2'\n        )\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_weather_along_route()\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Logging for a Single Avro Encode Operation in Python\nDESCRIPTION: This snippet shows how to enable detailed logging for a specific call to the `encode` method of the `AvroEncoder`, even if logging is not enabled at the client level. By passing `logging_enable=True` directly to the `encode` method, detailed information about the HTTP request/response for that specific operation will be logged.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nencoder.encode(dict_content, schema=definition, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Registry Dependencies with pip\nDESCRIPTION: Commands to install the required Azure Container Registry management package and Azure identity package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-containerregistry\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Retrieving Managed Identity Object ID for System-Assigned Identity\nDESCRIPTION: Command to list the object ID of the system-assigned managed identity for the sfmitestsystem application.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\naz ad sp list --display-name $CLUSTER_NAME/applications/sfmitestsystem\n```\n\n----------------------------------------\n\nTITLE: Updating Operations Class Import Path in Python\nDESCRIPTION: Explains the change for importing operations classes (e.g., `MyClassOperations`). Imports from specific operations sub-modules like `azure.mgmt.datafactory.operations.my_class_operations` are deprecated; operations classes should now be imported from the `azure.mgmt.datafactory.operations` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Old import pattern (no longer works)\nazure.mgmt.datafactory.operations.my_class_operations\n```\n\nLANGUAGE: python\nCODE:\n```\n# New import pattern (works)\nazure.mgmt.datafactory.operations\n```\n\n----------------------------------------\n\nTITLE: Transliterating Text\nDESCRIPTION: Shows how to transliterate text from one script to another (Chinese simplified to Latin script).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    language = \"zh-Hans\"\n    from_script = \"Hans\"\n    to_script = \"Latn\"\n    input_text_elements = [\"这是个测试。\"]\n\n    response = text_translator.transliterate(\n        body=input_text_elements,\n        language=language,\n        from_script=from_script,\n        to_script=to_script,\n    )\n    transliteration = response[0] if response else None\n\n    if transliteration:\n        print(\n            f\"Input text was transliterated to '{transliteration.script}' script. Transliterated text: '{transliteration.text}'.\"\n        )\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: Creating a CryptographyClient for cryptographic operations\nDESCRIPTION: Demonstrates how to create a CryptographyClient for performing cryptographic operations with a specific key in azure-keyvault-keys.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.keys.crypto import CryptographyClient\n\nkey = key_client.get_key(\"key-name\")\ncrypto_client = CryptographyClient(key=key, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Using KeyVaultSettingsClient for Managing Managed HSM Settings\nDESCRIPTION: Added sync and async KeyVaultSettingsClient for getting and updating Managed HSM settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nKeyVaultSettingsClient.get_setting(...)\nKeyVaultSettingsClient.update_setting(...)\n```\n\n----------------------------------------\n\nTITLE: Getting Route Matrix Results\nDESCRIPTION: Python code showing how to retrieve results from a previous route matrix request.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.route import MapsRouteClient\n\nroute_matrix_result = client.begin_get_route_matrix_result(matrix_id=\"11111111-2222-3333-4444-555555555555\");\n```\n\n----------------------------------------\n\nTITLE: PerfTest Base Class Implementation\nDESCRIPTION: Core base class implementation defining the fundamental structure for performance testing, including setup, cleanup, and execution methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass _PerfTestBase:\n    args = {}  # Command line arguments\n\n    @property\n    def completed_operations(self) -> int:\n        # Total number of operations completed by run_all(). Reset after warmup.\n\n    @property\n    def last_completion_time(self) -> float:\n        # Elapsed time between start of warmup/run and last completed operation. Reset after warmup.\n\n    def __init__(self, arguments):\n        # The command line args can be accessed on construction.\n\n    async def global_setup(self) -> None:\n        # Can be optionally defined. Only run once per process, regardless of multi-threading.\n        # The baseclasses will also define logic here, so if you override this method, make sure you include a call to super().\n\n    async def global_cleanup(self) -> None:\n        # Can be optionally defined. Only run once per process, regardless of multi-threading.\n        # The baseclasses will also define logic here, so if you override this method, make sure you include a call to super().\n\n    async def post_setup(self) -> None:\n        # Post-setup called once per parallel test instance.\n        # Used by base classes to setup state (like test-proxy) after all derived class setup is complete.\n        # There should be no need to overwrite this function.\n\n    async def pre_cleanup(self) -> None:\n        # Pre-cleanup called once per parallel test instance.\n        # Used by base classes to cleanup state (like test-proxy) before all derived class cleanup runs.\n        # There should be no need to overwrite this function.\n\n    async def setup(self) -> None:\n        # Can be optionally defined. Run once per test instance, after global_setup.\n        # The baseclasses will also define logic here, so if you override this method, make sure you include a call to super().\n\n    async def cleanup(self) -> None:\n        # Can be optionally defined. Run once per test instance, before global_cleanup.\n        # The baseclasses will also define logic here, so if you override this method, make sure you include a call to super().\n\n    async def close(self) -> None:\n        # Can be optionally defined. Run once per test instance, after cleanup and global_cleanup.\n        # The baseclasses will also define logic here, so if you override this method, make sure you include a call to super().\n\n    def run_all_sync(self, duration: int, *, run_profiler: bool = False, **kwargs) -> None:\n        # Run all sync tests, including both warmup and duration. This method is implemented by the provided base\n        # classes, there should be no need to overwrite this function.\n\n    async def run_all_async(self, duration: int, *, run_profiler: bool = False, **kwargs) -> None:\n        # Run all async tests, including both warmup and duration. This method is implemented by the provided base\n        # classes, there should be no need to overwrite this function.\n\n    @staticmethod\n    def add_arguments(parser):\n        # Override this method to add test-specific argparser args to the class.\n        # These are accessible in __init__() and the self.args property.\n\n    @staticmethod\n    def get_from_env(variable):\n        # Get the value of an env var. If empty or not found, a ValueError will be raised.\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing SignalR Management Client (Python)\nDESCRIPTION: Demonstrates how to authenticate and initialize the `SignalRManagementClient`. It uses `DefaultAzureCredential` from the `azure-identity` library, which automatically handles authentication based on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`). The Azure subscription ID is retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable. This setup allows interaction with the Azure SignalR management API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/signalr/azure-mgmt-signalr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.signalr import SignalRManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SignalRManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating TextTranslationClient with API Key Credential\nDESCRIPTION: Creates a TextTranslationClient instance using AzureKeyCredential with an API key and region for global endpoint authentication. This is the standard way to authenticate with the Text Translation service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncredential = AzureKeyCredential(apikey)\ntext_translator = TextTranslationClient(credential=credential, region=region)\n```\n\n----------------------------------------\n\nTITLE: Creating DataLakeServiceClient with Connection String (Python)\nDESCRIPTION: Initializes a `DataLakeServiceClient` using a storage account connection string. This is an alternative authentication method that bundles the account endpoint and credentials. Requires the `azure-storage-file-datalake` library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.filedatalake import DataLakeServiceClient\n\nservice = DataLakeServiceClient.from_connection_string(conn_str=\"my_connection_string\")\n```\n\n----------------------------------------\n\nTITLE: Listing Package Dependencies in Requirements File - Plain Text\nDESCRIPTION: This snippet provides a curated list of dependencies for a Python project, used by package managers such as pip to install required modules. Entries may refer to relative paths within the project's directory structure (for tools and internal packages), editable installs, or external libraries (like requests and aiohttp). The file expects that referenced paths and dependencies actually exist and are resolvable from the environment invoking the install, and it must be used on systems configured to resolve both local and remote resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicessiterecovery/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nrequests\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Thread with Idempotency Token\nDESCRIPTION: Creates a chat thread with an idempotency token to ensure request repeatability, preventing duplicate thread creation if the request is retried.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncreate_chat_thread_result = chat_client.create_chat_thread(\n    topic,\n    thread_participants=thread_participants,\n    idempotency_token=idempotency_token\n)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\n----------------------------------------\n\nTITLE: Integrating Tracing with Azure SDK for Python (v1.0.0b1)\nDESCRIPTION: Starting from version 1.0.0b1, the Azure SDK for Python includes native support for distributed tracing libraries like OpenCensus and OpenTelemetry. This allows developers to instrument their applications for better monitoring and diagnostics. Integration typically requires installing appropriate tracing packages like `azure-core-tracing-opentelemetry`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Example (conceptual - requires setup of chosen tracer):\n# from azure.core.settings import settings\n# from azure.core.tracing.ext.opentelemetry import OpenTelemetrySpan\n\n# settings.tracing_implementation.set(OpenTelemetrySpan)\n\n# ... subsequent SDK client usage will be traced ...\n```\n\n----------------------------------------\n\nTITLE: Enabling uAMQP Debug Logging\nDESCRIPTION: Configuration to enable debug level logging for the uAMQP transport layer with a custom handler.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nuamqp_logger = logging.getLogger('uamqp')\nuamqp_logger.setLevel(logging.DEBUG)\nuamqp_logger.addHandler(handler)\n\n...\n\nfrom azure.servicebus import ServiceBusClient\n\nclient = ServiceBusClient(..., logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Graph Services Management SDK with pip\nDESCRIPTION: Commands to install the required Azure packages using pip. This installs both the graph services management client and the Azure identity package needed for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/graphservices/azure-mgmt-graphservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-graphservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration for Azure SDK Python\nDESCRIPTION: Requirements file listing all necessary Python package dependencies with specific version constraints. Includes testing frameworks like pytest, development tools, and version-specific dependencies for different Python versions. Notable sections include CI testing requirements, Azure SDK tools dependencies, and version-specific pylint configurations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/regression_test_tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip==20.2\n\n# requirements leveraged by ci for testing\npytest==7.3.1\npytest-asyncio==0.21.0\npytest-cov==4.0.0\npytest-custom-exit-code==0.3.0\npytest-xdist==3.2.1\ncoverage==7.2.5\nbandit==1.6.2\nprotobuf==3.17.3; python_version == '2.7'\nchardet>=2.0,<5.0\ncmarkgfm<0.7.0\ntyping-extensions<=4.6.3\n\n# locking packages defined as deps from azure-sdk-tools\npytoml==0.1.21\nreadme-renderer[md]==25.0\njson-delta==2.0\nConfigArgParse==1.7\nsix==1.14.0\npyyaml==5.4.1\npackaging==23.1\nJinja2==3.1.2\n\n# Locking pylint and required packages\npylint==1.8.4; python_version < '3.4'\npylint==2.9.3; python_version >= '3.6' and python_version <= '3.10'\npylint==2.14.5; python_version >= '3.11'\n\n# python-dotenv\npython-dotenv==0.15.0\n```\n\n----------------------------------------\n\nTITLE: Toggling Authority Validation Support in Python (Beta Feature)\nDESCRIPTION: Introduced `validate_authority` support for the MSAL client in beta versions (e.g., 1.11.0b1, 1.10.0b1, 1.9.0b1). This feature allows control over authority validation during authentication but was noted as unavailable in the stable releases 1.10.0 and 1.9.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nvalidate_authority\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Stream Test Implementation - Python\nDESCRIPTION: Implementation of a performance test for uploading blobs using streaming, demonstrating both synchronous and asynchronous upload methods with configurable stream size and concurrency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.perfstress_tests import RandomStream, get_random_bytes\nfrom devtools_testutils.perfstress_tests import AsyncRandomStream\n\nfrom ._test_base import _StorageStreamTestBase\n\n\nclass UploadTest(_StorageStreamTestBase):\n    def __init__(self, arguments):\n        super().__init__(arguments)\n\n        # Setup service clients\n        blob_name = \"uploadtest\"\n        self.blob_client = self.service_client.get_blob_client(self.container_name, blob_name)\n        self.async_blob_client = self.async_serive_client.get_blob_client(self.container_name, blob_name)\n\n        # Setup readable file-like upload data sources, using the configurable 'size' argument\n        self.upload_stream = RandomStream(self.args.size)\n        self.upload_stream_async = AsyncRandomStream(self.args.size)\n\n    def run_sync(self):\n        # The stream needs to be reset at the start of each run.\n        # This sets the position index back to 0 with minimal overhead.\n        self.upload_stream.reset()\n\n        # Test the upload API\n        self.blob_client.upload_blob(\n            self.upload_stream,\n            length=self.args.size,\n            overwrite=True,\n            max_concurrency=self.args.max_concurrency)\n\n    async def run_async(self):\n        # The stream needs to be reset at the start of each run.\n        # This sets the position index back to 0 with minimal overhead.\n        self.upload_stream_async.reset()\n\n        # Test the upload API\n        await self.async_blob_client.upload_blob(\n            self.upload_stream_async,\n            length=self.args.size,\n            overwrite=True,\n            max_concurrency=self.args.max_concurrency)\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Monitor Tracing in Python\nDESCRIPTION: This code demonstrates how to enable Azure Monitor tracing using the Azure AI Projects SDK. It configures the tracing with the Application Insights connection string and starts a trace span for the current scenario.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom azure.monitor.opentelemetry import configure_azure_monitor\n\n# Enable Azure Monitor tracing\napplication_insights_connection_string = project_client.telemetry.get_connection_string()\nif not application_insights_connection_string:\n    print(\"Application Insights was not enabled for this project.\")\n    print(\"Enable it via the 'Tracing' tab in your AI Foundry project page.\")\n    exit()\nconfigure_azure_monitor(connection_string=application_insights_connection_string)\n\n# enable additional instrumentations\nproject_client.telemetry.enable()\n\nscenario = os.path.basename(__file__)\ntracer = trace.get_tracer(__name__)\n\nwith tracer.start_as_current_span(scenario):\n    with project_client:\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Compute Client with Different API Versions\nDESCRIPTION: Demonstrates different ways to initialize an Azure Compute Management client with specific API versions or profiles. Shows default initialization, explicit API version specification, and profile-based initialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/multiapi.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = ComputeManagementClient(credentials, sub_id)\nclient = ComputeManagementClient(credentials, sub_id, api_version='2018-06-01')\nclient = ComputeManagementClient(credentials, sub_id, profile=KnownProfile.v2018_06_01_hybrid)\n```\n\n----------------------------------------\n\nTITLE: Listing Page Ranges in Python Azure Blob Storage SDK\nDESCRIPTION: Shows the usage of the new paginated method list_page_ranges() for listing page ranges, which replaces the deprecated get_page_ranges() method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npage_ranges = blob_client.list_page_ranges()\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token with Azure Management SDK\nDESCRIPTION: Example of generating a SAS token using azure-mgmt-maps package and Azure Management SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maps import AzureMapsManagementClient\n\ndef main():\n    client = AzureMapsManagementClient(\n        credential=DefaultAzureCredential(),\n        subscription_id=\"your-subscription-id\",\n    )\n\n    response = client.accounts.list_sas(\n        resource_group_name=\"myResourceGroup\",\n        account_name=\"myMapsAccount\",\n        maps_account_sas_parameters={\n            \"expiry\": \"2017-05-24T11:42:03.1567373Z\",\n            \"maxRatePerSecond\": 500,\n            \"principalId\": \"your-principal-id\",\n            \"regions\": [\"eastus\"],\n            \"signingKey\": \"primaryKey\",\n            \"start\": \"2017-05-24T10:42:03.1567373Z\",\n        },\n    )\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Creating QueueServiceClient with OAuth Credentials (Python 12.X)\nDESCRIPTION: Demonstrates how to create a QueueServiceClient using OAuth credentials with the azure-identity package in version 12 of the Azure Storage Queue SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\ntoken_credential = DefaultAzureCredential()\n\n# Instantiate a QueueServiceClient using a token credential\nfrom azure.storage.queue import QueueServiceClient\nqueue_service_client = QueueServiceClient(\"https://<my-storage-account-name>.queue.core.windows.net\", credential=token_credential)\n```\n\n----------------------------------------\n\nTITLE: Main Autorest Configuration Settings\nDESCRIPTION: Primary YAML configuration for SDK generation including output settings, namespace configuration, and various generation options\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntag: 1.0-preview\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/maps/data-plane/Geolocation/readme.md\noutput-folder: ../azure/maps/geolocation/_generated\nnamespace: azure.maps.geolocation\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nvanilla: true\nclear-output-folder: true\npython: true\npython3-only: true\nversion-tolerant: true\nmodels-mode: msrest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DataLake SDK using pip (Bash)\nDESCRIPTION: Installs the preview version of the `azure-storage-file-datalake` Python package using pip. This package is required to interact with Azure Data Lake Storage Gen2 services from Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-file-datalake --pre\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure PowerShell Account and Token Access\nDESCRIPTION: These PowerShell commands verify the current Azure PowerShell account context and its ability to obtain access tokens. The first command displays the current context, while the second retrieves an access token for the Azure Resource Manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Get-AzContext\n\nName                                     Account             SubscriptionName    Environment         TenantId\n----                                     -------             ----------------    -----------         --------\nSubscription1 (xxxxxxxx-xxxx-xxxx-xxx... test@outlook.com    Subscription1       AzureCloud          xxxxxxxx-x...\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AzAccessToken -ResourceUrl \"https://management.core.windows.net\"\n```\n\n----------------------------------------\n\nTITLE: Installing Async Transport for Azure Monitor Ingestion Client\nDESCRIPTION: This command installs the aiohttp package, which is required for using asynchronous clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Newrelicobservability Management Client Library in Python\nDESCRIPTION: This snippet shows how to install the Azure Newrelicobservability Management Client Library and Azure Identity packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/newrelicobservability/azure-mgmt-newrelicobservability/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-newrelicobservability\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Renaming 'session_properties' Definition to 'rendering_session' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'session_properties' definition in the Swagger document. It renames the client-side representation of this definition to 'rendering_session' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.session_properties'\n    transform: >\n        $[\"x-ms-client-name\"] = \"rendering_session\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Creating Azure Management Clients\nDESCRIPTION: Initialize Azure resource and network management clients using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/mgmt_quickstart.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport azure.mgmt.resource\nimport azure.mgmt.network\nfrom azure.identity import DefaultAzureCredential\n...\nsubscription_id = os.environ.get(\"AZURE_SUBSCRIPTION_ID\")\ncredential = DefaultAzureCredential()\nresource_client = azure.mgmt.resource.ResourceManagementClient(credential=credential, subscription_id=subscription_id)\nnetwork_client = azure.mgmt.network.NetworkManagementClient(credential=credential, subscription_id=subscription_id)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Update Providers using DeviceUpdateClient in Python\nDESCRIPTION: This snippet shows how to retrieve a list of all update providers registered in the configured Device Update instance. It calls the `list_providers` method on the `device_update` attribute of an initialized `DeviceUpdateClient` and iterates over the response, printing each provider name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ListUpdates/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n``` python\nresponse = client.device_update.list_providers()\nfor item in response:\n    print(f\"  {item}\")\n```\n```\n\n----------------------------------------\n\nTITLE: Release History Entry - Version 1.0.0b2\nDESCRIPTION: Changelog entry for version 1.0.0b2 released on September 2, 2022. Documents new operations, model changes and client name update.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-mgmt-agrifood/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b2 (2022-09-02)\n\n### Features Added\n\n  - Added operation FarmBeatsModelsOperations.begin_update\n  - Added operation FarmBeatsModelsOperations.get_operation_result\n  - Added operation group PrivateEndpointConnectionsOperations\n  - Added operation group PrivateLinkResourcesOperations\n  - Model FarmBeats has a new parameter identity\n  - Model FarmBeats has a new parameter private_endpoint_connections\n  - Model FarmBeats has a new parameter public_network_access\n  - Model FarmBeats has a new parameter sensor_integration\n  - Model FarmBeatsUpdateRequestModel has a new parameter identity\n  - Model FarmBeatsUpdateRequestModel has a new parameter properties\n  - Model ProxyResource has a new parameter system_data\n  - Model Resource has a new parameter system_data\n  - Model TrackedResource has a new parameter system_data\n\n### Breaking Changes\n\n  - Client name is changed to `AgriFoodMgmtClient`\n  - Removed operation FarmBeatsModelsOperations.update\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Digital Twins Client in Python\nDESCRIPTION: Sets up the Azure Digital Twins client using AzureCliCredential and DigitalTwinsClient. Requires the Azure CLI to be installed and logged in.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/04_Lots_on_Queries.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureCliCredential\nfrom azure.digitaltwins.core import DigitalTwinsClient\n\n# using yaml instead of \nimport yaml\nimport uuid\n\n# using altair instead of matplotlib for vizuals\nimport numpy as np\nimport pandas as pd\n\n# you will get this from the ADT resource at portal.azure.com\nyour_digital_twin_url = \"home-test-twin.api.wcus.digitaltwins.azure.net\"\n\nazure_cli = AzureCliCredential()\nservice_client = DigitalTwinsClient(\n    your_digital_twin_url, azure_cli)\nservice_client\n```\n\n----------------------------------------\n\nTITLE: Using @final Decorator for Method and Class Protection\nDESCRIPTION: Shows how to use the @final decorator from typing_extensions to prevent method overriding in Python classes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import final\n\nclass BlobClient:\n    @final\n    def download(self) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Getting Endpoint using Azure CLI\nDESCRIPTION: Azure CLI command to retrieve the endpoint for an Anomaly Detector service resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Querying Patrons Using IS_OF_MODEL in Azure Digital Twins\nDESCRIPTION: Demonstrates how to query for specific models (in this case, patrons) using the IS_OF_MODEL function. The results are converted to a DataFrame for analysis of customer satisfaction.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/04_Lots_on_Queries.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = \"SELECT * FROM digitaltwins where IS_OF_MODEL('dtmi:mymodels:patron;1')\"\ncustomers = query_to_df(query_expression)\ncustomers.satisfaction.describe()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Desktop Virtualization Management Client in Python\nDESCRIPTION: Code example demonstrating how to authenticate with the Azure Desktop Virtualization Management client using DefaultAzureCredential. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/desktopvirtualization/azure-mgmt-desktopvirtualization/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.desktopvirtualization import DesktopVirtualizationMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DesktopVirtualizationMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Query Operations - Python\nDESCRIPTION: Main execution logic for running batch queries against Azure Monitor Logs. Handles time range splitting, concurrent query execution, and results aggregation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nasync def run():\n    print(\"Calculating batch endpoints...\")\n    row_batch_endpoints = await get_batch_endpoints_by_row_count(QUERY, END_TIME, days_back=DAYS_BACK, max_rows_per_query=MAX_ROWS_PER_QUERY)\n    byte_batch_endpoints = await get_batch_endpoints_by_byte_size(QUERY, END_TIME, days_back=DAYS_BACK, max_bytes_per_query=MAX_BYTES_PER_QUERY)\n    batch_endpoints = sorted(set(byte_batch_endpoints + row_batch_endpoints), reverse=True)\n\n    print(\"Clearing output directory...\")\n    if os.path.exists(OUTPUT_DIRECTORY):\n        for filename in os.listdir(OUTPUT_DIRECTORY):\n            if filename.startswith(OUTPUT_FILE_PREFIX):\n                os.remove(os.path.join(OUTPUT_DIRECTORY, filename))\n    else:\n        os.makedirs(OUTPUT_DIRECTORY)\n\n    if len(batch_endpoints) == 1:\n        print(f\"No data with time generated earlier than {batch_endpoints[0]} was found in the queried data. \"\n              \"Verify that the query is correct and that the data exists in your specified time range.\")\n        print(f\"Will attempt to query the data with the start and end time both set to {batch_endpoints[0]}. This may fail if \"\n              \"the data exceeds API limits. Another field to split on in the query may be necessary.\")\n        batch_endpoints.append(batch_endpoints[0])\n\n    queries = []\n    end_time = batch_endpoints[0]\n    correlation_request_id = str(uuid.uuid4())\n\n    print(f\"Querying {len(batch_endpoints) - 1} time ranges, from {batch_endpoints[-1]} to {end_time}\")\n    print(f\"Correlation request ID: {correlation_request_id}\")\n\n    for i in range(1, len(batch_endpoints)):\n        start_time = batch_endpoints[i]\n        queries.append(fetch_logs(QUERY, start_time, end_time, query_id=str(i), correlation_request_id=correlation_request_id))\n        end_time = start_time - timedelta(microseconds=1)\n\n    counts = await asyncio.gather(*queries)\n    return sum(counts)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Digital Twin Component in Python\nDESCRIPTION: This snippet demonstrates how to fetch a specific component of an Azure Digital Twin using the `get_component` method of the service client. It requires the ID of the digital twin (`digital_twin_id`) and the name of the component (`component_name`) as input. The retrieved component information is then printed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_component_lifecycle\nget_component = service_client.get_component(digital_twin_id, component_name)\nprint('Get Component:')\nprint(get_component)\n```\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Test Implementation Example\nDESCRIPTION: Example test class showing configuration, parametrization, and assertion patterns for Azure OpenAI API testing. Uses pytest fixtures and demonstrates parallel testing against Azure and OpenAI endpoints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport openai\n\nfrom devtools_testutils import AzureRecordedTestCase\nfrom conftest import (\n    GPT_4_AZURE,  # Maps to Azure resource with gpt-4* model deployed\n    GPT_4_OPENAI, # Maps to OpenAI testing with gpt-4* model\n    configure,    # Configures the client and necessary kwargs for the test\n    PREVIEW,      # Maps to the latest preview version of the API\n    STABLE,       # Maps to the latest stable version of the API\n)\n\n@pytest.mark.live_test_only  # test is live only\nclass TestFeature(AzureRecordedTestCase):  \n    @configure  # creates the client and passes through the kwargs to the test\n    @pytest.mark.parametrize(  # parametrizes the test to run with Azure and OpenAI clients\n        \"api_type, api_version\",\n        [(GPT_4_AZURE, PREVIEW), (GPT_4_OPENAI, \"v1\")]  # list[tuple(api_type, api_version), ...]\n    )\n    def test_responses(self, client: openai.AzureOpenAI | openai.OpenAI, api_type, api_version, **kwargs):\n        # call the API feature(s) to test\n        response = client.responses.create(\n            input=\"Hello, how are you?\",\n            **kwargs,  # model is passed through kwargs\n        )\n\n        # test response assertions\n        assert response.id is not None\n        assert response.created_at is not None\n        assert response.model\n        assert response.object == \"response\"\n        assert response.status in [\"completed\", \"incomplete\", \"failed\", \"in_progress\"]\n        assert response.usage.input_tokens is not None\n        assert response.usage.output_tokens is not None\n```\n\n----------------------------------------\n\nTITLE: Running the Program\nDESCRIPTION: Command to execute the main Python program from the SmokeTest directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython .\\Program.py\n```\n\n----------------------------------------\n\nTITLE: Detecting Sex Mismatch Inference in Radiology Insights using Python\nDESCRIPTION: This snippet demonstrates how to iterate through patient results and identify sex mismatch inferences in radiology insights data. It utilizes the RadiologyInsightsInferenceType enum to check the inference type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.SEX_MISMATCH:\n            print(f\"Sex Mismatch Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Updating Chat Message\nDESCRIPTION: Shows how to update an existing message's content.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ncontent = \"updated message content\"\nchat_thread_client.update_message(send_message_result_id, content=content)\n\nchat_message = chat_thread_client.get_message(message_id=send_message_result_id)\n\nassert chat_message.content.message == content\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Release History Documentation\nDESCRIPTION: Markdown formatted changelog documenting the version history and changes for an Azure SDK Python package. Includes details on breaking changes, new features, and version-specific updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/aks/azure-mgmt-devspaces/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b3 (2023-08-22)\n\n### Other Changes\n\n  - Regular release\n\n## 1.0.0b2 (2022-11-02)\n\n### Features Added\n\n  - Model Controller has a new parameter target_container_host_api_server_fqdn\n\n### Breaking Changes\n\n  - Operation ContainerHostMappingsOperations.get_container_host_mapping has a new parameter container_host_mapping\n  - Operation ContainerHostMappingsOperations.get_container_host_mapping has a new parameter kwargs\n  - Operation ContainerHostMappingsOperations.get_container_host_mapping no longer has parameter container_host_resource_id\n  - Operation ControllersOperations.get has a new parameter kwargs\n  - Operation ControllersOperations.list has a new parameter kwargs\n  - Operation ControllersOperations.list_by_resource_group has a new parameter kwargs\n  - Operation ControllersOperations.list_connection_details has a new parameter kwargs\n  - Operation ControllersOperations.list_connection_details has a new parameter list_connection_details_parameters\n  - Operation ControllersOperations.list_connection_details no longer has parameter target_container_host_resource_id\n  - Operation ControllersOperations.update has a new parameter controller_update_parameters\n  - Operation ControllersOperations.update has a new parameter kwargs\n  - Operation ControllersOperations.update no longer has parameter tags\n  - Operation ControllersOperations.update no longer has parameter target_container_host_credentials_base64\n  - Operation Operations.list has a new parameter kwargs\n  - Renamed operation ControllersOperations.create to ControllersOperations.begin_create\n  - Renamed operation ControllersOperations.delete to ControllersOperations.begin_delete\n```\n\n----------------------------------------\n\nTITLE: Using Regex-based Sanitizer for Complex Pattern Matching\nDESCRIPTION: Example of using a regular expression sanitizer to replace account names in Table storage endpoints with a fixed value in test recordings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nadd_general_regex_sanitizer(\n    regex=\"(?<=\\/\\/)[a-z]+(?=(?:|-secondary)\\.table\\.core\\.windows\\.net)\",\n    value=\"fakeendpoint\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single SIP Trunk (Python)\nDESCRIPTION: Deletes a trunk from the SIP trunk collection based on its FQDN using the delete_trunk method. Requires the FQDN string as input. Once deleted, any routes referencing the removed trunk must be updated to avoid configuration errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsip_routing_client.delete_trunk(\"sbs1.contoso.com\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK Python\nDESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Python, including version numbers, release dates, and change descriptions. It covers two beta releases: 1.0.0b2 and 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgezones/azure-mgmt-edgezones/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2025-04-01)\n\n### Other Changes\n\n- regular release\n\n## 1.0.0b1 (2024-07-05)\n\n### Other Changes\n\n- Initial version\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Entry for Azure SDK Python 2.0.0\nDESCRIPTION: Release history entry documenting the initial 2.0.0 release in markdown format.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-iot-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0 (2021-03-08)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cost Management SDK and Dependencies in Python\nDESCRIPTION: Commands to install the Azure Cost Management client library and the Azure Identity package for authentication. These packages are required to interact with the Azure Cost Management service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/costmanagement/azure-mgmt-costmanagement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-costmanagement\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements file defines two dependencies: a local installation of azure-sdk-tools in editable mode from a relative path, and a version constraint for the azure-mgmt-resource package limiting it to versions up to 21.1.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hanaonazure/azure-mgmt-hanaonazure/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-mgmt-resource<=21.1.0\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Metrics Advisor Environment Variables\nDESCRIPTION: Environment variables required to access live Metrics Advisor resources for performance testing. These include service endpoint, keys, and various resource IDs needed by the tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_METRICS_ADVISOR_ENDPOINT=<service endpoint>\nAZURE_METRICS_ADVISOR_SUBSCRIPTION_KEY=<service subscription key>\nAZURE_METRICS_ADVISOR_API_KEY=<service api key>\nAZURE_METRICS_ADVISOR_ANOMALY_ALERT_CONFIGURATION_ID=<anomaly alert configuration id>\nAZURE_METRICS_ADVISOR_ALERT_ID=<alert id>\nAZURE_METRICS_ADVISOR_ANOMALY_DETECTION_CONFIGURATION_ID=<anomaly detection configuration id>\nAZURE_METRICS_ADVISOR_INCIDENT_ID=<incident id>\n```\n\n----------------------------------------\n\nTITLE: Renaming CommunicationIdentityTokenScope Enum in Swagger - YAML\nDESCRIPTION: Uses an AutoRest directive to programmatically change the enum name 'CommunicationIdentityTokenScope' to 'CommunicationTokenScope' within the Swagger definitions before code generation. This transformation ensures the generated SDK uses consistent enum names, avoiding manual code changes post-generation. Inputs are the Swagger JSON path and transformation command, with output reflected in the generated client code's type naming.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/swagger/SWAGGER.md#2025-04-23_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions.CommunicationIdentityTokenScope\n    transform: >\n      $[\"x-ms-enum\"].name = \"CommunicationTokenScope\";\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with OData in azure-cosmosdb-table\nDESCRIPTION: Demonstrates how to query entities using OData filters in azure-cosmosdb-table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmosdb.table import TableService\nclient = TableService(...)\nquery_filter = \"PartitionKey eq 'pk001' or RowKey eq 'rk001' or Value gt '5'\"\ntable_name = \"tableName\"\n\nfor entity in list(client.query_entities(table_name, filter=query_filter)):\n    print(entity.RowKey)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies with Editable Installs using Pip Requirements\nDESCRIPTION: This snippet lists Python package dependencies in a format compatible with pip, typically found in a requirements.txt file. It uses the '-e' flag to specify editable installs for local packages relative to the file's location (azure-sdk-tools, azure-core, azure-identity, azure-storage-blob), allowing changes in their source code to be immediately effective without reinstalling. It also requires the 'aiohttp' library, version 3.0 or greater. This file is typically used with 'pip install -r <filename>' to set up the development environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\n-e ../azure-storage-blob\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Updating ClusterPatchParameters Model in Python\nDESCRIPTION: Changes to the ClusterPatchParameters model in version 2.1.0b1, adding new properties for analytics output settings, secret archive settings, and vulnerability scanning settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nModel `ClusterPatchParameters` added property `analytics_output_settings`\nModel `ClusterPatchParameters` added property `secret_archive_settings`\nModel `ClusterPatchParameters` added property `vulnerability_scanning_settings`\n```\n\n----------------------------------------\n\nTITLE: Creating Translator Resource\nDESCRIPTION: Azure CLI command to create a new Document Translation resource with S1 tier in the specified resource group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz cognitiveservices account create \\\n    --name document-translation-resource \\\n    --custom-domain document-translation-resource \\\n    --resource-group my-resource-group \\\n    --kind TextTranslation \\\n    --sku S1 \\\n    --location westus2 \\\n    --yes\n```\n\n----------------------------------------\n\nTITLE: Corrected Model Import Path (v0.2.0+)\nDESCRIPTION: Specifies the correct path (`azure.mgmt.apimanagement.models`) for importing model classes. Importing models from internal submodules like `azure.mgmt.apimanagement.models.my_class` is no longer supported as of v0.2.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nazure.mgmt.apimanagement.models\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous LogsIngestionClient in Python\nDESCRIPTION: This example shows how to create an asynchronous LogsIngestionClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.monitor.ingestion.aio import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\nlogs_client = LogsIngestionClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Inference Library (Bash)\nDESCRIPTION: Installs the Azure AI Inference client library for Python using pip. This library is required to interact with Azure AI Inference endpoints for tasks like chat completions and embeddings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-inference\n```\n\n----------------------------------------\n\nTITLE: Updating .docsettings.yml for README Verification\nDESCRIPTION: Example of how to update the .docsettings.yml file to ignore the package in README verification.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/deprecation_process.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nknown_content_issues:\n  ...\n  - ['sdk/mypackage/azure-mypackage/README.md', '#4554']\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Azure Queue\nDESCRIPTION: Sends multiple messages to an Azure Storage Queue using synchronous client. Messages are added sequentially.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nqueue.send_message(\"I'm using queues!\")\nqueue.send_message(\"This is my second message\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing AzureStackHCIClient (Python)\nDESCRIPTION: Demonstrates initializing the `AzureStackHCIClient` using `DefaultAzureCredential` for authentication. It retrieves the subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable. Assumes necessary environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) are set for `DefaultAzureCredential` to function correctly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/azurestackhci/azure-mgmt-azurestackhci/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.azurestackhci import AzureStackHCIClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureStackHCIClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document Intelligence Model in Python\nDESCRIPTION: Demonstrates how to delete a Document Intelligence model by its ID and verify the deletion by attempting to retrieve the deleted model, which should raise a ResourceNotFoundError exception.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Finally, we will delete this model by ID\ndocument_intelligence_admin_client.delete_model(model_id=my_model.model_id)\n\nfrom azure.core.exceptions import ResourceNotFoundError\n\ntry:\n    document_intelligence_admin_client.get_model(model_id=my_model.model_id)\nexcept ResourceNotFoundError:\n    print(f\"Successfully deleted model with ID {my_model.model_id}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure Hybridconnectivity Client - Python\nDESCRIPTION: Shows how to authenticate using Azure Active Directory credentials set in environment variables and instantiate the HybridConnectivityMgmtClient in Python. Dependencies include the azure-identity and azure-mgmt-hybridconnectivity packages. Key parameters are the Azure subscription ID (via environment) and the credentials (DefaultAzureCredential). Input is the correct configuration of environment variables; output is an authenticated Python client to manage Azure Hybridconnectivity resources. The setup requires Python 3.8+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridconnectivity/azure-mgmt-hybridconnectivity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridconnectivity import HybridConnectivityMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HybridConnectivityMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Running Metrics with Attributes Sample\nDESCRIPTION: Commands to run the sample that demonstrates using metrics with attributes. Requires the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/metrics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_attributes.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Cosmos DB Management Client using DefaultAzureCredential\nDESCRIPTION: Python code to authenticate with the Azure Cosmos DB Management Client using DefaultAzureCredential. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-cosmosdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.cosmosdb import CosmosDBManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CosmosDBManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Translation Languages by Scope\nDESCRIPTION: Retrieves and displays supported languages for a specific scope (translation, transliteration, or dictionary) from the Text Translation service. This example filters results by providing the 'translation' scope parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    scope = \"translation\"\n    response = text_translator.get_supported_languages(scope=scope)\n\n    print(\n        f\"Number of supported languages for translate operation: {len(response.translation) if response.translation is not None else 0}\"\n    )\n    print(\n        f\"Number of supported languages for transliterate operation: {len(response.transliteration) if response.transliteration is not None else 0}\"\n    )\n    print(\n        f\"Number of supported languages for dictionary operations: {len(response.dictionary) if response.dictionary is not None else 0}\"\n    )\n\n    if response.translation is not None:\n        print(\"Translation Languages:\")\n        for key, value in response.translation.items():\n            print(f\"{key} -- name: {value.name} ({value.native_name})\")\n\n    if response.transliteration is not None:\n        print(\"Transliteration Languages:\")\n        for key, value in response.transliteration.items():\n            print(f\"{key} -- name: {value.name}, supported script count: {len(value.scripts)}\")\n\n    if response.dictionary is not None:\n        print(\"Dictionary Languages:\")\n        for key, value in response.dictionary.items():\n            print(f\"{key} -- name: {value.name}, supported target languages count: {len(value.translations)}\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: Implementing NoPolling in Service Operations\nDESCRIPTION: Demonstrates how to disable polling for an LRO operation by setting polling=False. This implementation returns the initial response without monitoring the operation status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AnyStr, MutableMapping, Any\nfrom azure.core.polling import LROPoller\nJSON = MutableMapping[str, Any]\n\n\nclass ServiceOperations:\n\n    def begin_analyze(self, data: AnyStr, name: str, **kwargs) -> LROPoller[JSON]:\n        return self._generated_client.begin_analyze(\n            data,\n            name,\n            polling=False,\n            **kwargs\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Client\nDESCRIPTION: Creates a ChatClient instance using an endpoint and the token credential. This client is used to perform operations on chat threads like creation and deletion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential\n\n# Your unique Azure Communication service endpoint\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Management Client Library for Python\nDESCRIPTION: Commands to install the required packages for using the Azure Key Vault Management Client Library. It installs both the azure-mgmt-keyvault package and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-keyvault\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Example Error Output for Method Not Allowed (405) Exception\nDESCRIPTION: Illustrates the typical output printed when an `HttpResponseError` with a status code of 405 (Method Not Allowed) is caught. This can occur if an operation (like `/embeddings`) is attempted on an endpoint that does not support it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n```text\nStatus code: 405 (Method Not Allowed)\nOperation returned an invalid status 'Method Not Allowed'\n```\n```\n\n----------------------------------------\n\nTITLE: Creating TextTranslationClient with Cognitive Services Token\nDESCRIPTION: Creates a TextTranslationClient instance using a custom Cognitive Services token credential. This method requires implementing a token provider according to the Token Authentication documentation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = TextTranslationClient(credential=credential, audience=\"https://api.microsofttranslator.com/\")\n```\n\n----------------------------------------\n\nTITLE: Closing All Handles in Azure Storage File Share SDK\nDESCRIPTION: This code snippet shows how to close all handles using the close_all_handles() method in the Azure Storage File Share SDK for Python. It returns the number of closed handles.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclose_all_handles()\n```\n\n----------------------------------------\n\nTITLE: Using sdk_increment_version CLI for Incrementing Package Version - Text\nDESCRIPTION: This snippet shows the CLI usage for `sdk_increment_version`, which increments the version for a specified package. Required dependencies are azure-sdk-tools and repository context. Required parameters are `--package-name` and `--service`; optionally provide a glob and repo root. Inputs are the package to update and service; the output is an updated version file. Scope is limited to packages within the expected repository structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/README.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nusage: sdk_increment_version [-h] --package-name PACKAGE_NAME --service SERVICE [--repo REPO] [glob_string]\n\nIncrements version for a given package name based on the released version\n\npositional arguments:\n  glob_string           A comma separated list of glob strings that will target the top level directories that contain packages.Examples: All = \"azure-*\",\n                        Single = \"azure-keyvault\", Targeted Multiple = \"azure-keyvault,azure-mgmt-resource\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --package-name PACKAGE_NAME\n                        name of package (accepts both formats: azure-service-package and azure_service_package)\n  --service SERVICE     name of the service for which to set the dev build id (e.g. keyvault)\n  --repo REPO           Where is the start directory that we are building against? If not provided, the current working directory will be used. Please\n                        ensure you are within the azure-sdk-for-python repository.\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Using AnyStr TypeVar for str and bytes Consistency in Python\nDESCRIPTION: Defines AnyStr as a TypeVar limited to str and bytes, enabling use in function signatures to ensure both parameters and return types match as either str or bytes. Useful for writing functions that operate on either type while enforcing consistency. Dependency: typing.TypeVar.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar\n\nAnyStr = TypeVar('AnyStr', bytes, str)\n```\n\n----------------------------------------\n\nTITLE: Defining Clinical Information for Patient Matching\nDESCRIPTION: Python code that creates a list of ClinicalCodedElement objects representing patient clinical information including test results, conditions, and treatments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create clinical info list\nclinical_info_list = [models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0032181\",\n                                                  name=\"Platelet count\",\n                                                  value=\"250000\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0002965\",\n                                                  name=\"Unstable Angina\",\n                                                  value=\"true\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C1522449\",\n                                                  name=\"Radiotherapy\",\n                                                  value=\"false\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0242957\",\n                                                  name=\"GeneOrProtein-Expression\",\n                                                  value=\"Negative;EntityType:GENEORPROTEIN-EXPRESSION\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C1300072\",\n                                                  name=\"cancer stage\",\n                                                  value=\"2\")]\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Throttle and Connection Retry Settings in Azure Cosmos DB Python SDK\nDESCRIPTION: Example demonstrating how to separately configure throttle and connection retry settings. This sets connection retry backoff max to 35s, throttle backoff max to 25s, total throttle retries to 5, and total connection retries to 10.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/docs/TimeoutAndRetriesConfig.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\n\nclient = CosmosClient(URL, credential=KEY,\n                        retry_backoff_max=35,\n                        retry_throttle_backoff_max=25,\n                        retry_throttle_total=5,\n                        retry_total=10)\n```\n\n----------------------------------------\n\nTITLE: Updating and Upserting Entities in azure-data-tables\nDESCRIPTION: Shows how to update and upsert entities using TableClient in azure-data-tables with different update modes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import UpdateMode\n\nmy_entity[\"Value\"] += 5\n\n# Replace an existing entity or insert a new one if it does not exist\ntable_client.upsert_entity(my_entity, update_mode=UpdateMode.REPLACE)\n\nmy_entity[\"StringProperty\"] = \"new_string\"\n\n# Merge an existing entity or insert a new one if it does not exist\ntable_client.upsert_entity(my_entity, mode=UpdateMode.MERGE)\n\n# Update an already existing entity\ntable_client.update_entity(my_entity, update_mode=UpdateMode.REPLACE)\n```\n\n----------------------------------------\n\nTITLE: Azure Kusto Management Client Changes v0.5.0\nDESCRIPTION: Version 0.5.0 release notes showing feature additions and breaking changes including database operations modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0 (2019-11-11)\n\n**Features**\n\n  - Model ClusterUpdate has a new parameter key_vault_properties\n  - Model ClusterUpdate has a new parameter identity\n  - Model Cluster has a new parameter key_vault_properties\n  - Model Cluster has a new parameter identity\n  - Added operation ClustersOperations.detach_follower_databases\n  - Added operation ClustersOperations.list_follower_databases\n  - Added operation group AttachedDatabaseConfigurationsOperations\n\n**Breaking changes**\n\n  - Operation DatabasesOperations.check_name_availability has a new signature\n  - Model Database no longer has parameter soft_delete_period\n  - Model Database no longer has parameter hot_cache_period\n  - Model Database no longer has parameter statistics\n  - Model Database no longer has parameter provisioning_state\n  - Model Database has a new required parameter kind\n```\n\n----------------------------------------\n\nTITLE: Running Azure Maps Render SDK Samples with Bash\nDESCRIPTION: Command-line instructions for setting up and running the Azure Maps Render sample applications. This snippet shows how to set the subscription key environment variable, install the SDK, and execute various sample scripts that demonstrate different capabilities of the Maps Render service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-render --pre\n\npython samples/sample_authentication.py\npython samples/sample_get_copyright_caption.py\npython samples/sample_get_copyright_for_tile.py\npython samples/sample_get_copyright_for_world.py\npython samples/sample_get_copyright_from_bounding_box.py\npython samples/sample_get_map_attribution.py\npython samples/sample_get_map_static_image.py\npython samples/sample_get_map_tile.py\npython samples/sample_get_map_tileset.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Python SDK Clients via Keyword Arguments\nDESCRIPTION: Demonstrates the new method for client configuration. The `config` attribute is removed, and configuration options like `enable_logging` must be passed as keyword arguments directly to the client constructor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry Credentials in ApplicationManifest.xml - XML\nDESCRIPTION: Defines repository credentials in the Service Fabric application's ApplicationManifest.xml file for accessing the container registry. Parameters 'AccountName' and 'Password' should be set to the Azure Container Registry name and the corresponding access key. 'PasswordEncrypted' is set to 'false' for plaintext password entry. Required for Service Fabric to pull private images during deployment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<RepositoryCredentials AccountName=\"<ACR_NAME>\" Password=\"<found in Access keys page of registry in Portal>\" PasswordEncrypted=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Text Blocklist with Azure Content Safety Python SDK\nDESCRIPTION: This code demonstrates how to delete a text blocklist in Azure Content Safety using BlocklistClient and proper credentials. The snippet covers environment setup, client initialization, and the deletion operation with explicit blocklist name. On success, it prints confirmation; errors trigger detailed reporting via HttpResponseError. Use this for cleanup or reset operations in blocklist-based workflows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n\n    try:\n        client.delete_text_blocklist(blocklist_name=blocklist_name)\n        print(f\"\\nDeleted blocklist: {blocklist_name}\")\n    except HttpResponseError as e:\n        print(\"\\nDelete blocklist failed:\")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Listing and Processing Agent Messages in Python\nDESCRIPTION: Retrieves messages from an agent thread and displays them in reverse order, extracting and printing only the text content from each message.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nmessages = project_client.agents.list_messages(thread_id=thread.id)\n\n# The messages are following in the reverse order,\n# we will iterate them and output only text contents.\nfor data_point in reversed(messages.data):\n    last_message_content = data_point.content[-1]\n    if isinstance(last_message_content, MessageTextContent):\n        print(f\"{data_point.role}: {last_message_content.text.value}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DNS Private Zones Client Library and Azure Identity\nDESCRIPTION: Use pip to install the required packages for working with Azure DNS Private Zones and authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-privatedns\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Device Provisioning Library using Pip (Bash)\nDESCRIPTION: This command uses pip, the Python package installer, to install the `azure-iot-deviceprovisioning` library. This installation is a prerequisite for running the provided Python code samples that interact with the Azure IoT Device Provisioning Service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-iot-deviceprovisioning\n```\n\n----------------------------------------\n\nTITLE: PipelineRequest and PipelineResponse Container Classes\nDESCRIPTION: Classes that provide containers for moving HttpRequest and HttpResponse through the pipeline. These objects carry transport-specific context and are universal for all transports, both synchronous and asynchronous.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass PipelineRequest(object):\n\n    def __init__(self, http_request, context):\n        self.http_request = http_request  # The HttpRequest\n        self.context = context # A transport specific data container object\n\n\nclass PipelineResponse(object):\n\n    def __init__(self, http_request, http_response, context):\n        self.http_request = http_request  # The HttpRequest\n        self.http_response = http_response  # The HttpResponse\n        self.history = []  # A list of redirect attempts.\n        self.context = context  # A transport specific data container object\n```\n\n----------------------------------------\n\nTITLE: Identifying Limited Order Discrepancy Inference in Radiology Insights with Python\nDESCRIPTION: This snippet shows how to loop through patient results and detect limited order discrepancy inferences in radiology insights data. It utilizes the RadiologyInsightsInferenceType enum to check the inference type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.LIMITED_ORDER_DISCREPANCY:\n            print(f\"Limited Order Discrepancy Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Sending User Share Invitation\nDESCRIPTION: Sends a share invitation to a user specified by email address with an expiration date.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\nfrom datetime import date\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nsent_share_id = uuid.uuid4()\nsent_share_invitation_id = uuid.uuid4()\n\nconsumerEmail = \"consumer@contoso.com\"\ntoday = date.today()\ninvitation = {\n    \"invitationKind\": \"User\",\n    \"properties\": {\n        \"targetEmail\": consumerEmail,\n        \"notify\": \"true\",\n        \"expirationDate\": date(today.year+1,today.month,today.day).strftime(\"%Y-%m-%d\") + \" 00:00:00\"\n    }\n}\n\ninvitation_request = client.sent_shares.create_invitation(\n    sent_share_id=str(sent_share_id),\n    sent_share_invitation_id=str(sent_share_invitation_id),\n    sent_share_invitation=invitation)\n\ninvitation_response = invitation_request.result()\ncreated_invitation = json.loads(invitation_response)\nprint(created_invitation)\n```\n\n----------------------------------------\n\nTITLE: Accessing Container URL via ContainerClient in azure-storage-blob Python SDK\nDESCRIPTION: The make_container_url method's equivalent in v12 is to use the url property of a ContainerClient object. Instantiate a ContainerClient with appropriate details and access .url for the HTTPS endpoint. Requirements include the azure-storage-blob package and valid authentication. The output is the URL for the specified container in Azure Blob Storage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import ContainerClient\ncontainer_client = ContainerClient(account_url, container_name, credential=credential)\ncontainer_url = container_client.url\n\n```\n\n----------------------------------------\n\nTITLE: Modifying ManifestBody Parameter Schema to Accept Binary Stream\nDESCRIPTION: Uses an AutoRest directive to replace the schema definition for the `ManifestBody` parameter in the Swagger file. The new schema specifies `type: string` and `format: binary`, indicating that the parameter should accept raw binary data (a stream) as input in the generated SDK, suitable for uploading manifest content.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.parameters.ManifestBody\n  transform: >\n    $.schema = {\n        \"type\": \"string\",\n        \"format\": \"binary\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a Call with CallAutomationClient\nDESCRIPTION: Initiates an outbound call to a Communication Services user and sets up a callback URL to receive call events. Returns a call connection ID that can be used for further call operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.communication.callautomation import (\n    CallAutomationClient,\n    CommunicationUserIdentifier\n)\n\n# target endpoint for ACS User\nuser = CommunicationUserIdentifier(\"8:acs:...\")\n\n# callback url to receive callback events\ncallback_url = \"https://<MY-EVENT-HANDLER-URL>/events\"\n\n# send out the invitation, creating call\nresult = client.create_call(\n    target_participant=user,\n    callback_url=callback_url\n)\n\n# this id can be used to do further actions in the call\ncall_connection_id = result.call_connection_id\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Health Care APIs Management packages\nDESCRIPTION: Commands to install the required packages for using the Azure Health Care APIs Management client library and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthcareapis/azure-mgmt-healthcareapis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-healthcareapis\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating a User and Token with Custom Expiration in One Request - Python\nDESCRIPTION: Similar to the previous snippet, this example passes token_expires_in to create_user_and_token to specify a custom validity for the generated token. Both the user object and token information are returned. Ensures tokens can be tailored to specific lifespans, e.g., 1 hour. Requires timedelta and initialized CommunicationIdentityClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntoken_expires_in = timedelta(hours=1)\nuser, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT], token_expires_in=token_expires_in)\nprint(\"User id:\" + user.properties['id'])\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n----------------------------------------\n\nTITLE: Multi-API Package Configuration Example\nDESCRIPTION: Example configuration from readme.python.md showing how to define multi-API package settings and version information for Azure SDK packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/private_package/python_multiapi_configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Multi-Api Package\\n\\nWhen `readme.python.md` has `Python multi-api`, the package is multi-api package.\\n\\n# Configuration\\n\\nWhen you want to release a new version for multi-api package, check the following steps:\\n\\n## 1.target tag\\n\\nMake sure the target tag is defined in `readme.md`.\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics in Python\nDESCRIPTION: Example of querying metrics for an Event Grid subscription using the MetricsQueryClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom datetime import timedelta, datetime\nfrom azure.monitor.query import MetricsQueryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = MetricsQueryClient(credential)\nstart_time = datetime(2021, 5, 25)\nduration = timedelta(days=1)\nmetrics_uri = os.environ['METRICS_RESOURCE_URI']\nresponse = client.query_resource(\n    metrics_uri,\n    metric_names=[\"PublishSuccessCount\"],\n    timespan=(start_time, duration)\n    )\n\nfor metric in response.metrics:\n    print(metric.name)\n    for time_series_element in metric.timeseries:\n        for metric_value in time_series_element.data:\n            print(metric_value.time_stamp)\n```\n\n----------------------------------------\n\nTITLE: Azure Client Configuration Example\nDESCRIPTION: Example showing updated client configuration pattern using kwargs instead of config attribute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trafficmanager/azure-mgmt-trafficmanager/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Creating FaceClient with DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates initializing the `FaceClient` using `DefaultAzureCredential` from the `azure-identity` library for Microsoft Entra ID authentication. It relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) being set and requires a custom subdomain endpoint for the Face resource, as regional endpoints do not support Microsoft Entra ID authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"DefaultAzureCredential will use the values from these environment\nvariables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\"\"\"\nfrom azure.ai.vision.face import FaceClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = DefaultAzureCredential()\n\nface_client = FaceClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip. Installs both the compute management client and Azure identity packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-compute\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Orchestrator Runtime SDK Dependencies\nDESCRIPTION: Commands to install the required Azure SDK packages using pip package manager. Installs both the core Container Orchestrator Runtime management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerorchestratorruntime/azure-mgmt-containerorchestratorruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-containerorchestratorruntime\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Text Analytics Environment Variables in Shell\nDESCRIPTION: Specifies the necessary environment variables (AZURE_TEXT_ANALYTICS_ENDPOINT and AZURE_TEXT_ANALYTICS_KEY) required for accessing live Azure Text Analytics resources during performance testing. These should be set in your shell or environment, with values replaced according to your Azure subscription. Properly setting these ensures the tests have the correct credentials and endpoints for live runs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAZURE_TEXT_ANALYTICS_ENDPOINT=<text analytics service endpoint>\\nAZURE_TEXT_ANALYTICS_KEY=<text analytics API Key>\n```\n\n----------------------------------------\n\nTITLE: Using AvroSerializer to serialize data (Legacy)\nDESCRIPTION: Example showing how to use the legacy AvroSerializer class to serialize dictionary data into Avro format with schema.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith serializer:\n    dict_data_ben = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    payload_ben = serializer.serialize(value=dict_data_ben, schema=SCHEMA_STRING)\n    print(payload_ben)  # prints bytes b'<record format indicator><schema ID><Avro-encoded data>``\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest for Azure Communication Email Python SDK (YAML)\nDESCRIPTION: This YAML block defines the configuration settings for Autorest when generating the Azure Communication Email Python SDK. It specifies the package version, the tag for the API version, the source OpenAPI specification URL, output folder, Python namespace, license header, Python generation options (like enabling XML, clearing output, enabling async code, disabling credential parameters, setting anonymous security), and the specific version of the Autorest Python extension to use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/swagger/SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npackage-version: 1.0.0\ntag: package-2024-07-01-preview\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/e64ad693df24b47d4009eece6663c8d95cf94be6/specification/communication/data-plane/Email/readme.md\noutput-folder: ../azure/communication/email/_generated\nnamespace: azure.communication.email\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nclear-output-folder: true\npython: true\nv3: true\nno-async: false\nadd-credential: false\nsecurity: Anonymous\ntitle: Azure Communication Email Service\nuse-extension:\n  \"@autorest/python\": \"6.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Performance Test (DownloadBinaryDataTest) with Options (CMD)\nDESCRIPTION: Executes a specific performance test, `DownloadBinaryDataTest`, using the `perfstress` tool. This example demonstrates using various command-line options: `--use-entra-id` for Microsoft Entra ID authentication, `--transport httpx` to specify the HTTP transport layer, `--size=20480` to set the data size for the test, and `--parallel=2` to run two instances of the test in parallel.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/corehttp/tests/perf_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/core/corehttp> perfstress DownloadBinaryDataTest --use-entra-id --transport httpx --size=20480 --parallel=2\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Azure SDK Client\nDESCRIPTION: This snippet shows how to enable detailed DEBUG level logging for an Azure SDK client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.example import ExampleClient\n\nclient = ExampleClient(\n    endpoint=\"https://example.org\",\n    credential=DefaultAzureCredential(),\n    logging_enable=True\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating BillingManagementClient with DefaultAzureCredential (Python)\nDESCRIPTION: Demonstrates creating an instance of `BillingManagementClient`. It uses `DefaultAzureCredential` from the `azure-identity` library for authentication, which typically relies on environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET). The Azure Subscription ID is also retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable using `os.getenv`. Requires Python 3.8+ and the `azure-identity` and `azure-mgmt-billing` packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/billing/azure-mgmt-billing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.billing import BillingManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = BillingManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Factory Management Client Library\nDESCRIPTION: Commands to install the required Azure packages for working with Data Factory. It installs the Azure Data Factory management client and the Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-datafactory\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Response via Callback in Azure Python SDK\nDESCRIPTION: Describes the change in accessing the raw HTTP response. The `raw` keyword argument in operations is removed. Advanced users can use the `cls` keyword argument, which accepts a callback function to access the internal HTTP response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ncls\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Logging for a Single SDK Call - Python\nDESCRIPTION: Enables detailed DEBUG-level logging on a single API call for troubleshooting, even if the client is not globally configured for verbose logging. Demonstrates per-request control for advanced diagnostics on demand.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresult = client.types.get_all_type_definitions(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Selfhelp Management Client Library with pip\nDESCRIPTION: Commands to install the required packages for using the Azure Selfhelp Management Client. This installs both the azure-mgmt-selfhelp package and the azure-identity package needed for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/selfhelp/azure-mgmt-selfhelp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-selfhelp\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Package Tag Configuration in YAML\nDESCRIPTION: Specifies the input files to use when the package-2019-06 tag is selected, including paths to the main CDN and web application firewall definition files.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/single_api/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n- Microsoft.Cdn/preview/2019-06-15-preview/cdn.json\n- Microsoft.Cdn/preview/2019-06-15-preview/cdnwebapplicationfirewall.json\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing ContainerInstanceManagementClient in Python\nDESCRIPTION: This Python snippet demonstrates how to authenticate with Azure and create a `ContainerInstanceManagementClient`. It uses `DefaultAzureCredential` from `azure-identity`, which relies on environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET) for authentication details. The Azure Subscription ID is also retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerinstance/azure-mgmt-containerinstance/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerinstance import ContainerInstanceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerInstanceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Area Digital Twins in Python\nDESCRIPTION: This snippet demonstrates how to create digital twins for areas with specific properties like capacity and status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor r in range(4):\n    digital_twin_id = f'area-{r}'\n    print(digital_twin_id)\n    dt_json = {\n        \"$metadata\": {\n            \"$model\": \"dtmi:mymodels:area;1\"\n        },\n        \"capacity\": 3,\n        \"status\": \"open\"\n    }\n    created_twin = service_client.upsert_digital_twin(digital_twin_id, dt_json)\n    print(created_twin)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Identity for Authentication in Python\nDESCRIPTION: Example of importing and using Azure Identity classes for authentication instead of deprecated credential systems.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = MyClient(credential, subscription_id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minute-by-Minute Weather Forecast with Azure Maps Weather API in Python\nDESCRIPTION: This snippet shows how to get a minute-by-minute weather forecast for the next 120 minutes in intervals of 1, 5, and 15 minutes. It initializes a MapsWeatherClient with credentials and handles any potential HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_minute_forecast():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_minute_forecast(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_minute_forecast()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Libraries with pip\nDESCRIPTION: Demonstrates how to install specific Azure SDK libraries using pip. Shows installation of the latest Batch runtime library and Storage management library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install azure-batch          # Install the latest Batch runtime library\n$ pip install azure-mgmt-scheduler # Install the latest Storage management library\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Key Vault Secrets Async Client in Python\nDESCRIPTION: This snippet demonstrates how to import the asynchronous client for Azure Key Vault Secrets operations. The async client is available for Python 3.5.3 and later versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.secrets.aio import SecretClient\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Blob SDK with pip - Bash\nDESCRIPTION: This snippet instructs the user to use pip, the Python package manager, in order to install the 'azure-storage-blob' package, which is required for accessing the Azure Storage Blob client library in Python. Running this command ensures that all dependencies are correctly installed in your Python environment before using the sample scripts. The command is simple and works for all platforms with a functional Python/pip installation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-blob\n```\n\n----------------------------------------\n\nTITLE: Listing Certificate Properties with New Azure Key Vault Certificates SDK\nDESCRIPTION: Shows how to list certificate properties using the new azure-keyvault-certificates SDK. Returns an iterator of CertificateProperties instances.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncertificates = certificate_client.list_properties_of_certificates()\n\nfor certificate in certificates:\n    print(certificate.name)\n    print(certificate.x509_thumbprint)\n```\n\n----------------------------------------\n\nTITLE: Configuring Evaluation Setup\nDESCRIPTION: Sets up evaluators with Azure OpenAI configuration and project details for assessing agent performance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation import ToolCallAccuracyEvaluator , AzureOpenAIModelConfiguration, IntentResolutionEvaluator, TaskAdherenceEvaluator, ViolenceEvaluator\nfrom pprint import pprint\n\nmodel_config = AzureOpenAIModelConfiguration(\n    azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n    api_key=os.environ[\"AZURE_OPENAI_API_KEY\"],\n    api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n)\n# Needed to use content safety evaluators\nazure_ai_project={\n    \"subscription_id\": os.environ[\"AZURE_SUBSCRIPTION_ID\"],\n    \"project_name\": os.environ[\"PROJECT_NAME\"],\n    \"resource_group_name\": os.environ[\"RESOURCE_GROUP_NAME\"],\n}\n\ntool_call_accuracy = ToolCallAccuracyEvaluator(model_config=model_config)\nintent_resolution = IntentResolutionEvaluator(model_config=model_config)\ntask_adherence = TaskAdherenceEvaluator(model_config=model_config)\n```\n\n----------------------------------------\n\nTITLE: Content Safety Evaluation Using Azure AI Evaluation SDK\nDESCRIPTION: Example showing content safety evaluation using the new Azure AI Evaluation SDK, including authentication with DefaultAzureCredential and support for both single queries and chat conversations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.evaluation import ContentSafetyEvaluator\nfrom pprint import pprint\n\nazure_cred = DefaultAzureCredential()\nproject_scope = {\n    \"subscription_id\": \"<your-subscription-id>\",\n    \"resource_group_name\": \"<your-resource-group>\",\n    \"project_name\": \"<your-project-name>\",\n}\ncontent_safety_eval = ContentSafetyEvaluator(azure_cred, project_scope)\ncontent_safety_score = content_safety_eval(\n    query=\"What is the capital of Japan?\",\n    response=\"The capital of Japan is Tokyo.\"\npprint(content_safety_score)\n\n# Using Chat conversation\nconversation = {\n    \"messages\": [\n        {\n            \"content\": \"What is the capital of France?\",\n            \"role\": \"user\",\n        },\n        {\n            \"content\": \"Paris\", \n            \"role\": \"assistant\", \n        }\n    ],\n}\ncontent_safety_score = content_safety_eval(conversation=conversation)\npprint(content_safety_score)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Cost Management Client using DefaultAzureCredential\nDESCRIPTION: Python code to initialize the Azure Cost Management client using the DefaultAzureCredential. This authentication method relies on environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/costmanagement/azure-mgmt-costmanagement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.costmanagement import CostManagementClient\n\nclient = CostManagementClient(credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Dependencies\nDESCRIPTION: Lists required Python packages for Azure SDK development, including local tools package and aiohttp library\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedservices/azure-mgmt-managedservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Running Custom Simulator with Grounding Data Source - Azure SDK - Python\nDESCRIPTION: This Python example shows how to load grounding data from a JSON resource and run a custom simulator using the Azure AI evaluation framework. Dependencies are the azure.ai.evaluation.simulator module, importlib.resources for package data access, the Simulator class, and a valid model_config. The main parameters include package and resource_name for data location, model_config for simulator setup, conversation_turns as input, and callback for handling outputs. The simulator is executed asynchronously and produces evaluation results for each conversation turn.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport importlib.resources as pkg_resources\\npackage = \\\"azure.ai.evaluation.simulator._data_sources\\\"\\nresource_name = \\\"grounding.json\\\"\\ncustom_simulator = Simulator(model_config=model_config)\\nconversation_turns = []\\nwith pkg_resources.path(package, resource_name) as grounding_file:\\n    with open(grounding_file, \\\"r\\\") as file:\\n        data = json.load(file)\\nfor item in data:\\n    conversation_turns.append([item])\\noutputs = asyncio.run(custom_simulator(\\n    target=callback,\\n    conversation_turns=conversation_turns,\\n    max_conversation_turns=1,\\n))\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Comprehensive changelog detailing version 1.0.0 changes including new operations, model updates, and breaking changes, as well as the initial beta release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcomplianceautomation/azure-mgmt-appcomplianceautomation/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-06-23)\n\n### Features Added\n\n  - Added operation ReportOperations.begin_fix\n  - Added operation ReportOperations.begin_sync_cert_record\n  - Added operation ReportOperations.begin_verify\n  - Added operation ReportOperations.get_scoping_questions\n  - Added operation ReportOperations.list\n  - Added operation ReportOperations.nested_resource_check_name_availability\n  - Added operation SnapshotOperations.list\n  - Added operation group EvidenceOperations\n  - Added operation group ProviderActionsOperations\n  - Added operation group ScopingConfigurationOperations\n  - Added operation group WebhookOperations\n  - Model ComplianceReportItem has a new parameter control_family_name\n  - Model ComplianceReportItem has a new parameter control_status\n  - Model ComplianceReportItem has a new parameter resource_origin\n  - Model ComplianceReportItem has a new parameter resource_status\n  - Model ComplianceReportItem has a new parameter resource_status_change_date\n  - Model ComplianceReportItem has a new parameter responsibility_description\n  - Model ComplianceReportItem has a new parameter responsibility_title\n  - Model Control has a new parameter control_name\n  - Model Control has a new parameter responsibilities\n  - Model ControlFamily has a new parameter control_family_name\n  - Model ControlFamily has a new parameter control_family_status\n  - Model OverviewStatus has a new parameter not_applicable_count\n  - Model OverviewStatus has a new parameter pending_count\n  - Model ReportProperties has a new parameter cert_records\n  - Model ReportProperties has a new parameter errors\n  - Model ReportProperties has a new parameter storage_info\n  - Model ResourceMetadata has a new parameter account_id\n  - Model ResourceMetadata has a new parameter resource_origin\n\n### Breaking Changes\n\n  - Client name is changed from `AppComplianceAutomationToolForMicrosoft365` to `AppComplianceAutomationMgmtClient`\n  - Model Category no longer has parameter category_type\n  - Model ComplianceReportItem no longer has parameter compliance_state\n  - Model ComplianceReportItem no longer has parameter control_type\n  - Model ComplianceReportItem no longer has parameter policy_description\n  - Model ComplianceReportItem no longer has parameter policy_display_name\n  - Model ComplianceReportItem no longer has parameter policy_id\n  - Model ComplianceReportItem no longer has parameter resource_group\n  - Model ComplianceReportItem no longer has parameter status_change_date\n  - Model ComplianceReportItem no longer has parameter subscription_id\n  - Model Control no longer has parameter assessments\n  - Model Control no longer has parameter control_short_name\n  - Model Control no longer has parameter control_type\n  - Model ControlFamily no longer has parameter family_name\n  - Model ControlFamily no longer has parameter family_status\n  - Model ControlFamily no longer has parameter family_type\n  - Model ReportProperties no longer has parameter id\n  - Model ReportProperties no longer has parameter report_name\n  - Model ResourceMetadata no longer has parameter resource_name\n  - Model ResourceMetadata no longer has parameter tags\n  - Model SnapshotProperties no longer has parameter id\n  - Operation ReportOperations.begin_create_or_update has a new required parameter properties\n  - Operation ReportOperations.begin_create_or_update no longer has parameter parameters\n  - Operation ReportOperations.begin_update has a new required parameter properties\n  - Operation ReportOperations.begin_update no longer has parameter parameters\n  - Operation SnapshotOperations.begin_download has a new required parameter body\n  - Operation SnapshotOperations.begin_download no longer has parameter parameters\n  - Removed operation group ReportsOperations\n  - Removed operation group SnapshotsOperations\n\n## 1.0.0b1 (2022-11-15)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Using KeyVaultBackupClient for Status Operations in Python\nDESCRIPTION: New methods get_backup_status and get_restore_status added to KeyVaultBackupClient to check pending operation status using job ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nKeyVaultBackupClient.get_backup_status(job_id)\nKeyVaultBackupClient.get_restore_status(job_id)\n```\n\n----------------------------------------\n\nTITLE: Generating File SAS Using Azure Storage File Share SDK\nDESCRIPTION: This code snippet illustrates how to generate a File SAS (Shared Access Signature) using the Azure Storage File Share SDK for Python. It replaces the previous method of generating SAS on client objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ngenerate_file_sas()\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Files for Package 2019-04 in YAML\nDESCRIPTION: Configures which API definition files should be used when generating the SDK with the package-2019-04 tag, in this case only the applicationGateway.json file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'package-2019-04'\ninput-file:\n  - Microsoft.Network/stable/2019-04-01/applicationGateway.json\n```\n\n----------------------------------------\n\nTITLE: Running an Upload Performance Test with Custom Options using perfstress (cmd)\nDESCRIPTION: This command runs the UploadTest perf test using perfstress for Azure Storage Blob, setting 2 parallel executions and specifying a blob size of 10240 bytes. Requires: setup and installation complete, environment variables configured, and test resources available. Key parameters: --parallel sets the number of test runners; --size sets the byte count of the upload. Outputs: performance statistics for the specified upload test case.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-blob/tests> perfstress UploadTest --parallel=2 --size=10240\n```\n\n----------------------------------------\n\nTITLE: Using Type Ignore Comments with Specificity\nDESCRIPTION: Shows best practices for using type ignore comments by specifying error codes when needed, making it easier to identify and fix ignored type issues later.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# mypy ignores only the error code in brackets\nignore_me: int = 5 # type: ignore[misc]\n\n# pyright ignores only the error code in brackets\nignored = result._private # pyright: ignore[reportPrivateUsage]\n\n# all errors ignored by both mypy and pyright\nclass Foo(Any): # type: ignore\n   ...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode using pip\nDESCRIPTION: This snippet specifies a dependency on Azure SDK tools using pip's editable installation mode (-e flag) pointing to a local relative path. This approach allows developers to modify the tools package without reinstalling it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-autosuggest/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Python-Specific Runtime Customization Directives - YAML\nDESCRIPTION: Includes transformation directives to rename operation IDs and adjust parameter type mappings for the Python SDK. It facilitates more Pythonic naming and model consistency, such as renaming legacy operation IDs and removing/deleting certain properties and enums. Streamlines the generated SDK's structure to Python conventions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/:query-knowledgebases\"][\"post\"]\n    transform: >\n        $[\"operationId\"] = \"getAnswers\";\n\n  - from: swagger-document\n    where: $[\"paths\"][\"/:query-text\"][\"post\"]\n    transform: >\n        $[\"operationId\"] = \"getAnswersFromText\";\n\n  - from: swagger-document\n    where: $[\"parameters\"][\"AnswersOptions\"]\n    transform: >\n        $[\"x-ms-client-name\"] = \"Options\";\n\n  - from: swagger-document\n    where: $[\"parameters\"][\"AnswersFromTextOptions\"]\n    transform: >\n        $[\"x-ms-client-name\"] = \"Options\";\n\n  - from: swagger-document\n    where: $[\"definitions\"][\"AnswersFromTextOptions\"]\n    transform: >\n        delete $.properties[\"stringIndexType\"]\n\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n        delete $[\"AnswersOptions\"][\"properties\"][\"rankerType\"][\"x-ms-enum\"];\n        delete $[\"AnswersOptions\"][\"properties\"][\"rankerType\"][\"enum\"];\n        delete $[\"LogicalOperationKind\"][\"x-ms-enum\"];\n        delete $[\"LogicalOperationKind\"][\"enum\"];\n\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n        delete $[\"MetadataFilter\"][\"properties\"][\"metadata\"][\"items\"][\"$ref\"];\n        $[\"MetadataFilter\"][\"properties\"][\"metadata\"][\"items\"][\"type\"] = \"object\";\n        delete $[\"MetadataRecord\"];\n\n```\n\n----------------------------------------\n\nTITLE: Override for DocumentModelAdministrationClientLROPoller (Compose)\nDESCRIPTION: YAML directive to override the default LRO poller with a custom DocumentModelAdministrationClientLROPoller for document model composition operations. Provides both sync and async implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    -   from: swagger-document\n        where: '$.paths[\"/documentModels:compose\"].post'\n        transform: >\n            $[\"x-python-custom-poller-sync\"] = \"...._polling.DocumentModelAdministrationClientLROPoller\";\n            $[\"x-python-custom-poller-async\"] = \".....aio._async_polling.AsyncDocumentModelAdministrationClientLROPoller\";\n```\n\n----------------------------------------\n\nTITLE: Rewriting Paths and Adding Dummy Parameters via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive further modifies operation paths in `x-ms-paths`. It replaces path segments like `/{containerName}/{blob}` and `/{containerName}` with dummy query parameters (`?restype=dummyBlob`, `?restype=dummyContainer`). This avoids potential path collisions after removing those segments, ensuring unique paths for Autorest processing, as the actual container/blob names are handled elsewhere.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{containerName}/{blob}'))\n        {\n            var oldName = property;\n            var newName = property.replace('/{containerName}/{blob}', '?restype=dummyBlob');\n            $[newName] = $[oldName];\n            delete $[oldName];\n        }\n        else if (property.includes('/{containerName}'))\n        {\n            var oldName = property;\n            var newName = property.replace('/{containerName}', '?restype=dummyContainer');\n            $[newName] = $[oldName];\n            delete $[oldName];\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Renaming get_assertion Argument for ClientAssertionCredential (Python)\nDESCRIPTION: In version 1.9.0, the argument `get_assertion` for `ClientAssertionCredential` was renamed to `func`. This argument likely accepts a function or callable that provides the client assertion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nget_assertion\n```\n\nLANGUAGE: Python\nCODE:\n```\nfunc\n```\n\n----------------------------------------\n\nTITLE: Setting Principal ID Variable for Role Assignment\nDESCRIPTION: Shell command to store the principal ID in a variable for use in subsequent role assignment commands.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nprincipalId=<principalId>\n```\n\n----------------------------------------\n\nTITLE: Validating Receiver Batch Size Against Prefetch in Python\nDESCRIPTION: `ServiceBusReceiver.receive()` (now `receive_messages`) now raises a `ValueError` if the `max_batch_size` parameter provided is greater than the `prefetch` value configured on the `ServiceBusClient` or receiver.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n# Raises ValueError if max_batch_size > prefetch:\nServiceBusReceiver.receive_messages(max_batch_size=...)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Secrets Library\nDESCRIPTION: This snippet demonstrates how to install the Azure Key Vault Secrets library and run a sample script to set secrets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-keyvault-secrets library\n$ pip install azure-keyvault-secrets\n$ # azure-identity library for authentication\n$ pip install azure-identity\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_key_secret.py\n```\n\n----------------------------------------\n\nTITLE: Fetching Continuous Receiving Iterator in Python\nDESCRIPTION: Added an explicit method `get_streaming_message_iter()` to the receiver to obtain the continuous message receiving iterator. This allows specifying `max_wait_time` as an override for the streaming operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nget_streaming_message_iter()\n```\n\n----------------------------------------\n\nTITLE: Release 3.1 (2022-08-31) Configuration\nDESCRIPTION: YAML configuration specific to Release 3.1 (2022-08-31) of the Form Recognizer API. Defines the input file, namespace, and output folder locations for this API version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/64484dc8760571a2de7f5cfbc96861e4a0985a54/specification/cognitiveservices/data-plane/FormRecognizer/stable/2022-08-31/FormRecognizer.json\nnamespace: azure.ai.formrecognizer.v2022_08_31\noutput-folder: $(python-sdks-folder)/formrecognizer/azure-ai-formrecognizer/azure/ai/formrecognizer/_generated/v2022_08_31\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Operation in Azure Maps Timezone SDK\nDESCRIPTION: This snippet shows how to enable detailed logging for a single operation in the Azure Maps Timezone SDK. It uses the logging_enable parameter to activate logging just for this specific operation, even when logging isn't enabled for the entire client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nservice_client.get_service_stats(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Fetching Daily Historical Weather Records with Azure Maps Weather API in Python\nDESCRIPTION: This code shows how to retrieve climatology data for past daily record temperatures, precipitation, and snowfall for a given location and date range. It implements error handling to capture and display API error messages when they occur.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nimport datetime\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_daily_historical_records():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_daily_historical_records(\n            coordinates=[40.760139, -73.961968],\n            start_date=datetime.date(2024, 1, 1),\n            end_date=datetime.date(2024, 1, 31)\n        )\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_daily_historical_records()\n```\n\n----------------------------------------\n\nTITLE: Extracting App Insights Request Data\nDESCRIPTION: Processes App Insights logs from blob storage, extracting request counts and timestamps. Filters data by time range and returns a pandas DataFrame.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pandas\nfrom datetime import datetime, timedelta\n\ndef extract_requests_from_app_insights_container(service_client, app_blob_path, container_name, start_time=None, end_time=None):\n    '''AppInsights stores data in a series of folders (Metrics, Requests, etc) within a container.  This function \n    enumerates the blobs within the Requests folder, extracting the JSON-formatted request logs from within it and \n    storing their counts and timestamps to a dataframe for easy consumption.'''\n\n    data = pandas.DataFrame(columns=['count'])    \n    container = service_client.get_container_client(container_name)\n    # For even more efficient filtering, we could include components of the date in the matching prefix, such as Requests/2020-04-\n    blob_list = container.list_blobs(app_blob_path + '/Requests/')\n    for blob in blob_list:\n        body = container.download_blob(blob.name).readall().decode('utf8')\n        for request_string in body.split('\\n'):\n            try:\n                request = json.loads(request_string)\n                # Convert from string to date.  Massage the format slightly to match.\n                event_time = datetime.strptime(request['context']['data']['eventTime'][:-2], r'%Y-%m-%dT%H:%M:%S.%f')\n                if event_time < start_time or event_time > end_time:\n                    continue\n                count = sum(r['count'] for r in request['request'])\n                data.loc[event_time] = count\n            except:\n                continue\n    return data\n\ndata = extract_requests_from_app_insights_container(service_client, app_blob_path, app_insights_container_name, datetime.utcnow() - timedelta(hours=3), datetime.utcnow())\n```\n\n----------------------------------------\n\nTITLE: Settling Messages in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares message settlement in v0.50 and v7. In v0.50, settlement methods (`complete`, `abandon`, `defer`, `dead_letter`) were called directly on the received message object. In v7, these methods are moved to the `ServiceBusReceiver` object, take the message as an argument, and have a `_message` suffix (e.g., `complete_message`). This change centralizes operations on the receiver.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith receiver:\n    received_message.complete()\n    # or\n    # received_message.abandon()\n    # received_message.defer()\n    # received_message.dead_letter()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith receiver:\n    receiver.complete_message(received_message)\n    # or\n    # receiver.abandon_message(received_message)\n    # receiver.defer_message(received_message)\n    # receiver.dead_letter_message(received_message)\n```\n\n----------------------------------------\n\nTITLE: Corrected Client Import Path (v0.2.0+)\nDESCRIPTION: Specifies the correct top-level package path (`azure.mgmt.apimanagement`) for importing the `ApiManagementClient`. Importing directly from the internal `azure.mgmt.apimanagement.api_management_client` submodule is no longer supported as of v0.2.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nazure.mgmt.apimanagement\n```\n\n----------------------------------------\n\nTITLE: Downloading Stream to Writable Stream in Azure Storage File Share SDK\nDESCRIPTION: This code snippet shows how to download a complete stream into a supplied writable stream using the readinto() method of StorageStreamDownloader in the Azure Storage File Share SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nStorageStreamDownloader.readinto(stream)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Authenticating Azure ArizeAIObservabilityEvalMgmtClient - Python\nDESCRIPTION: Demonstrates how to authenticate Azure API requests by configuring environment variables and creating an instance of ArizeAIObservabilityEvalMgmtClient. Dependencies: azure-identity and azure-mgmt-arizeaiobservabilityeval packages. Accepts client and tenant credentials via environment variables and instantiates the client using DefaultAzureCredential and a subscription ID. The authenticated client object can then be used for further management operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/arizeaiobservabilityeval/azure-mgmt-arizeaiobservabilityeval/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.arizeaiobservabilityeval import ArizeAIObservabilityEvalMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ArizeAIObservabilityEvalMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Decoding from EventData with AvroSerializer (Legacy)\nDESCRIPTION: Example showing how to manually extract and construct the bytes payload from EventData before deserializing with the legacy AvroSerializer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_event(partition_context, event):\n    bytes_payload = b\"\".join(b for b in event.body)\n    deserialized_data = avro_serializer.deserialize(value=bytes_payload)\n```\n\n----------------------------------------\n\nTITLE: Creating CertificateCredential with Certificate Bytes in Python\nDESCRIPTION: Shows how to initialize a CertificateCredential using certificate data from bytes instead of a file path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nCertificateCredential(tenant_id, client_id, certificate_bytes=cert_bytes)\n```\n\n----------------------------------------\n\nTITLE: Running a Load Test\nDESCRIPTION: Demonstrates how to execute a load test using LoadTestRunClient and monitor its completion status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.developer.loadtesting import LoadTestRunClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\nTEST_ID = \"some-test-id\"  \nTEST_RUN_ID = \"some-testrun-id\" \nDISPLAY_NAME = \"my-load-test-run\"  \n\nclient = LoadTestRunClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n\ntry:\n    testRunPoller = client.begin_test_run(\n    TEST_RUN_ID,\n        {\n            \"testId\": TEST_ID,\n            \"displayName\": \"My New Load Test Run\",\n        }\n    )\n\n    #waiting for test run status to be completed with timeout = 3600 seconds\n    result = testRunPoller.result(3600)\n    \n    print(result)\nexcept HttpResponseError as e:\n    print(\"Failed with error: {}\".format(e.response.json()))\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Chaos Management Client Dependencies with Bash\nDESCRIPTION: This snippet provides the bash commands needed to install the Azure Chaos Management Client (azure-mgmt-chaos) and its authentication dependency (azure-identity) using pip. Ensure you have Python 3.8+ and pip installed. Running these commands will add the required packages to your Python environment for subsequent usage in client code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/chaos/azure-mgmt-chaos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-chaos\npip install azure-identity\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Synapse Client with DefaultAzureCredential\nDESCRIPTION: Example showing how to authenticate the Azure Synapse Artifacts client using DefaultAzureCredential. Requires environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and SYNAPSE_ARTIFACTS_ENDPOINT to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.synapse.artifacts import ArtifactsClient\n\nendpoint = os.environ[\"SYNAPSE_ARTIFACTS_ENDPOINT\"]\nclient = ArtifactsClient(endpoint=endpoint, credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Running the perfstress Tool to List Available Performance Tests\nDESCRIPTION: Command to navigate to the tests directory and run the perfstress tool to discover available performance tests in the module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/search/azure-search-documents> cd tests\n(env) ~/search/azure-search-documents/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maps Account with Azure CLI\nDESCRIPTION: Command for creating an Azure Maps account using the Azure CLI. Requires replacing placeholders with your resource group name, account name, and desired SKU name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n----------------------------------------\n\nTITLE: Executing a query with azure-monitor-query v1.0.x\nDESCRIPTION: Shows the simplified query execution with the new azure-monitor-query package, which allows direct passing of the Kusto query and requires a timespan parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery = 'AppRequests | take 5'\nclient.query(workspace_id, query, timespan=timedelta(days=1))\n```\n\n----------------------------------------\n\nTITLE: Introducing Service Bus Management Client for Queues in Python\nDESCRIPTION: Added support for managing queue entities (create, update, delete, list, get settings/runtime info) using `azure.servicebus.management.ServiceBusManagementClient` (and its async counterpart `azure.servicebus.management.aio.ServiceBusManagementClient`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.servicebus.management import ServiceBusManagementClient\n# or\nfrom azure.servicebus.management.aio import ServiceBusManagementClient as AsyncServiceBusManagementClient\n```\n\n----------------------------------------\n\nTITLE: Getting Current Air Quality\nDESCRIPTION: Example showing how to get current air quality information for a specific location using coordinates. Returns potential risks and suggested precautions related to air quality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_current_air_quality():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_current_air_quality(coordinates=[25.0338053, 121.5640089])\n        print(json.dumps(result, indent=4))\n\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_current_air_quality()\n```\n\n----------------------------------------\n\nTITLE: Invoking sdk_build for All Storage Packages - Bash\nDESCRIPTION: This bash snippet demonstrates how to invoke the `sdk_build` script to build all packages matching the pattern 'azure-storage*'. It includes the `--devbuild=True` flag to indicate the build is a dev build, which can update requirements as necessary. Dependencies include azure-sdk-tools installed and a working repository checkout. The input glob selects the target set of packages; the output is built packages placed in the default or configured artifact directory. Limitation: The user must be in the correct repository directory or provide `--repo`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# build all package that have form azure-storage*. Set dev version for file + requirements before building.\nsdk_build azure-storage* --devbuild=True\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows how to structure release notes for a software project using Markdown. It includes the version number, release date, and a brief description of changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedcache/azure-mgmt-connectedcache/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2024-11-21)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Expanding Overloads with Variable Arguments for Python Functions\nDESCRIPTION: The snippet expands function overloading to support both typed and variadic signatures (including *args and **kwargs in implementation), showing how to handle optional or different sets of required parameters. Overloads are declared for different argument combinations, while the function body must explicitly process *args and **kwargs to resolve types at runtime. Dependencies include multiple analysis/result classes and Any from typing. Inputs vary; outputs are type-checked according to the overload invoked.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import overload, Union, Any\n\n\n@overload\ndef analyze_text(text: str, analysis_kind: LanguageDetection) -> LanguageDetectionResult:\n    ...\n\n\n@overload\ndef analyze_text(text: str, analysis_kind: EntityRecognition) -> EntityRecognitionResult:\n    ...\n\n\n@overload\ndef analyze_text(text: str, analysis_kind: SentimentAnalysis) -> SentimentResult:\n    ...\n\n\n@overload\ndef analyze_text(text: str) -> str:\n    ...\n\n# actual implementation\ndef analyze_text(*args: Union[str, LanguageDetection, EntityRecognition, SentimentAnalysis], **kwargs: Any) -> Union[str, SentimentResult, EntityRecognitionResult, LanguageDetectionResult]:\n    # logic parsing args / kwargs\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Activity Logger in Python Class\nDESCRIPTION: Example showing how to initialize logging for a ProjectOperations class using ActivityLogger. The code demonstrates proper logger instantiation and configuration when the class is accessed via AIClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/_telemetry/guide_to_logging.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.generative._telemetry import ActivityLogger\n\nactivity_logger = ActivityLogger(__name__)\n\nclass ProjectOperations:\n    \"\"\"ProjectOperations.\n\n    You should not instantiate this class directly. Instead, you should\n    create an MLClient instance that instantiates it for you and\n    attaches it as an attribute.\n    \"\"\"\n\n    def __init__(\n        self, resource_group_name: str, ml_client: MLClient, service_client: ServiceClient062023Preview, **kwargs: Any\n    ):\n        self._ml_client = ml_client\n        self._service_client = service_client\n        self._resource_group_name = resource_group_name\n        activity_logger.update_info(kwargs)  # <--- Need this line in constructor\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK and External Dependencies in Python\nDESCRIPTION: This snippet lists the dependencies required to run a Python project that leverages Azure SDK libraries. It specifies two Azure SDK subpackages (azure-core and azure-identity) by referencing their GitHub source code directly at the 'main' branch, using a PEP 508 direct reference format. Additional dependencies include aiohttp (for asynchronous networking, pinned to version 3.0 or higher), Flask with asynchronous support, and azure-storage-blob. This configuration ensures that the latest internal Azure components are used while managing necessary external libraries. There are no code parameters; each line specifies a reusable library or module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/integration/azure-web-apps/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nazure-core @ git+https://git@github.com/Azure/azure-sdk-for-python.git@main#subdirectory=sdk/core/azure-core\nazure-identity @ git+https://git@github.com/Azure/azure-sdk-for-python.git@main#subdirectory=sdk/identity/azure-identity\naiohttp>=3.0\nflask[async]\nazure-storage-blob\n```\n\n----------------------------------------\n\nTITLE: Using async CertificateClient in azure-keyvault-certificates\nDESCRIPTION: Demonstrates how to create and use an async CertificateClient for asynchronous operations in the new azure-keyvault-certificates library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client is no longer needed\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait certificate_client.close()\n\n# alternatively, use the client as an async context manager\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with certificate_client:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Listing secret properties in azure-keyvault\nDESCRIPTION: Lists the properties of secrets in a vault using the get_secrets method of KeyVaultClient in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsecrets = client.get_secrets(vault_base_url=\"https://my-key-vault.vault.azure.net/\")\n\nfor secret in secrets:\n    print(secret.attributes.content_type)\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Health Insights Cancer Profiling Package\nDESCRIPTION: Command to install the Azure Health Insights Cancer Profiling client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-healthinsights-cancerprofiling\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Performance Test (GetTest) using perfstress (Cmd)\nDESCRIPTION: Executes a specific performance test named `GetTest` using the `perfstress` command-line tool. This command should be run from the `tests` directory within the activated virtual environment. Common options like `--duration`, `--iterations`, `--parallel`, `--warm-up`, `--sync`, and `--no-cleanup` can be added.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-appconfiguration/tests> perfstress GetTest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dictionary Examples for Word Pairs between English and Spanish\nDESCRIPTION: Demonstrates how to use Azure Translator Text API to retrieve example usage of a word pair (English \"fly\" and Spanish \"volar\"). The API returns grammatical structure and context examples for the word pair to show proper usage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from_language = \"en\"\n    to_language = \"es\"\n    input_text_elements = [DictionaryExampleTextItem(text=\"fly\", translation=\"volar\")]\n\n    response = text_translator.lookup_dictionary_examples(\n        body=input_text_elements, from_language=from_language, to_language=to_language\n    )\n    dictionary_entry = response[0] if response else None\n\n    if dictionary_entry:\n        print(f\"For the given input {len(dictionary_entry.examples)} entries were found in the dictionary.\")\n        print(\n            f\"First example: '{dictionary_entry.examples[0].target_prefix}{dictionary_entry.examples[0].target_term}{dictionary_entry.examples[0].target_suffix}'.\"\n        )\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\nraise\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Registry Package\nDESCRIPTION: Command to install the Azure Container Registry client library using pip package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-containerregistry\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Computefleet Management Client Library for Python\nDESCRIPTION: Commands to install the required packages using pip. This installs the azure-mgmt-computefleet package for Computefleet management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computefleet/azure-mgmt-computefleet/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-computefleet\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Cloning the Azure SDK for Python Repository - Shell\nDESCRIPTION: Copies the latest code for the Azure SDK for Python from GitHub, checking out the main branch with a shallow clone for faster download. No authentication required for public access. Parameter: working directory. Output is a local directory with the repository content used for subsequent testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/azure/azure-sdk-for-python --single-branch --branch main --depth 1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Test Mixin Class in Python\nDESCRIPTION: An example of a TableTestCase mixin class that provides shared testing utilities including account URL generation and custom assertion methods. This class can be inherited by test classes to reuse common functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests-advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TableTestCase(object):\n\n    def account_url(self, account, endpoint_type):\n        \"\"\"Return an url of storage account.\n\n        :param str storage_account: Storage account name\n        :param str storage_type: The Storage type part of the URL. Should be \"table\", or \"cosmos\", etc.\n        \"\"\"\n        try:\n            if endpoint_type == \"table\":\n                return account.primary_endpoints.table.rstrip(\"/\")\n            if endpoint_type == \"cosmos\":\n                cosmos_suffix = os.getenv(\"TABLES_COSMOS_ENDPOINT_SUFFIX\", DEFAULT_COSMOS_ENDPOINT_SUFFIX)\n                return f\"https://{account.name}.table.{cosmos_suffix}\"\n        except AttributeError:  # Didn't find \"account.primary_endpoints\"\n            if endpoint_type == \"table\":\n                storage_suffix = os.getenv(\"TABLES_STORAGE_ENDPOINT_SUFFIX\", DEFAULT_STORAGE_ENDPOINT_SUFFIX)\n                return f\"https://{account}.table.{storage_suffix}\"\n            if endpoint_type == \"cosmos\":\n                cosmos_suffix = os.getenv(\"TABLES_COSMOS_ENDPOINT_SUFFIX\", DEFAULT_COSMOS_ENDPOINT_SUFFIX)\n                return f\"https://{account}.table.{cosmos_suffix}\"\n\n    ...\n\n    def _assert_delete_retention_policy_equal(self, policy1, policy2):\n        \"\"\"Assert that two deletion retention policies are equal.\"\"\"\n        if policy1 is None or policy2 is None:\n            assert policy1 == policy2\n            return\n\n        assert policy1.enabled == policy2.enabled\n        assert policy1.days == policy2.days\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Block Item from Azure Content Safety using Python\nDESCRIPTION: This snippet shows how to add a block item to a blocklist and then retrieve it by its ID. It creates a test block item containing filtered text, adds it to the blocklist, and then demonstrates how to fetch the specific item using its ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import TextBlocklistItem, AddOrUpdateTextBlocklistItemsOptions\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    block_item_text_1 = \"k*ll\"\n\n    try:\n        # Add a blockItem\n        add_result = client.add_or_update_blocklist_items(\n            blocklist_name=blocklist_name,\n            options=AddOrUpdateTextBlocklistItemsOptions(blocklist_items=[TextBlocklistItem(text=block_item_text_1)]),\n        )\n        if not add_result or not add_result.blocklist_items or len(add_result.blocklist_items) <= 0:\n            raise RuntimeError(\"BlockItem not created.\")\n        block_item_id = add_result.blocklist_items[0].blocklist_item_id\n\n        # Get this blockItem by blockItemId\n        block_item = client.get_text_blocklist_item(blocklist_name=blocklist_name, blocklist_item_id=block_item_id)\n        print(\"\\nGet blockitem: \")\n        print(\n            f\"BlockItemId: {block_item.blocklist_item_id}, Text: {block_item.text}, Description: {block_item.description}\"\n        )\n    except HttpResponseError as e:\n        print(\"\\nGet block item failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Defining the Base AzureError Exception Class in Python\nDESCRIPTION: This snippet defines the `AzureError` class, which serves as the base exception for all errors within the Azure SDK for Python. It captures the error message, optional inner exception (`error` kwarg), system exception info, and an optional `continuation_token`. It formats a detailed error message including the type and value of the underlying exception.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AzureError(Exception):\n    def __init__(self, message, *args, **kwargs):\n        self.inner_exception = kwargs.get(\"error\")\n        self.exc_type, self.exc_value, self.exc_traceback = sys.exc_info()\n        self.exc_type = self.exc_type.__name__ if self.exc_type else type(self.inner_exception)\n        self.exc_msg = \"{}, {}: {}\".format(message, self.exc_type, self.exc_value)  # type: ignore\n        self.message = str(message)\n        self.continuation_token = kwargs.get(\"continuation_token\")\n        super(AzureError, self).__init__(self.message, *args)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Bus Namespace - Bash using Azure CLI\nDESCRIPTION: Shows how to create a new Azure Service Bus namespace using the Azure CLI. Requires an Azure account and resource group; replace placeholder arguments with your actual resource group, namespace name, and location. The command registers a namespace resource which is necessary before creating queues or topics.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\naz servicebus namespace create --resource-group <resource-group-name> --name <servicebus-namespace-name> --location <servicebus-namespace-location>\n```\n\n----------------------------------------\n\nTITLE: Deleting Keys with Legacy Azure Key Vault SDK\nDESCRIPTION: Demonstrates how to delete a key using the legacy azure-keyvault SDK, which doesn't support polling the deletion operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndeleted_key = client.delete_key(vault_base_url=\"https://my-key-vault.vault.azure.net/\", key_name=\"key-name\")\n\n# this purge would fail if deletion hadn't finished\nclient.purge_deleted_key(vault_base_url=\"https://my-key-vault.vault.azure.net/\", key_name=\"key-name\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Container in Azure Cosmos DB Python SDK\nDESCRIPTION: This snippet shows how to create a container with default settings in an Azure Cosmos DB database, using partition key and handling cases where the container already exists.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient, PartitionKey, exceptions\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\n\ntry:\n    container = database.create_container(id=CONTAINER_NAME, partition_key=PartitionKey(path=\"/productName\"))\nexcept exceptions.CosmosResourceExistsError:\n    container = database.get_container_client(CONTAINER_NAME)\nexcept exceptions.CosmosHttpResponseError:\n    raise\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging\nDESCRIPTION: Example showing how to configure detailed debug logging for the Azure Maps Geolocation SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.maps.geolocation import MapsGeolocationClient\n\n# Create a logger for the 'azure.maps.geolocation' SDK\nlogger = logging.getLogger('azure.maps.geolocation')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for ChangeFeedClient Operations - Python\nDESCRIPTION: This snippet configures detailed DEBUG logging for the Azure Storage Blob ChangeFeed SDK by setting up a logger and attaching a StreamHandler for stdout. Instantiating the client with logging_enable=True ensures logging output for HTTP sessions. It is useful for troubleshooting and development. Requires Python's logging module and the ChangeFeedClient class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\n# Create a logger for the 'azure.storage.blob.changefeed' SDK\nlogger = logging.getLogger('azure.storage')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = ChangeFeedClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Validating Overloaded Argument-based Returns Using mypy in Python\nDESCRIPTION: Demonstrates static type checking of overloaded Python functions with variable argument combinations, using reveal_type within the mypy type checker to confirm correct inference for both overloaded and fallback signatures. mypy reveals the precise result type depending on which overload is triggered by the arguments provided.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nlanguage_result = analyze_text(\"my text\", LanguageDetection())\nreveal_type(language_result)\n\ntext_result = analyze_text(\"my text\")\nreveal_type(text_result)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document Model in Azure Document Intelligence using Python\nDESCRIPTION: This snippet demonstrates how to delete a custom document model by ID and verify the deletion was successful by attempting to retrieve it, which should result in a ResourceNotFoundError exception.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Finally, we will delete this model by ID\ndocument_model_admin_client.delete_document_model(model_id=custom_model.model_id)\n\ntry:\n    document_model_admin_client.get_document_model(model_id=custom_model.model_id)\nexcept ResourceNotFoundError:\n    print(\"Successfully deleted model with id {}\".format(custom_model.model_id))\n```\n\n----------------------------------------\n\nTITLE: Configuring LogsIngestionClient for Non-Public Azure Clouds\nDESCRIPTION: This example demonstrates how to configure the LogsIngestionClient to connect to Azure US Government cloud.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AzureAuthorityHosts, DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\ncredential = DefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_GOVERNMENT)\nlogs_client = LogsIngestionClient(endpoint, credential, credential_scopes=[\"https://monitor.azure.us/.default\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Anomaly Detector Python Package\nDESCRIPTION: Command to install the Azure Anomaly Detector client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-anomalydetector\n```\n\n----------------------------------------\n\nTITLE: Azure Search Service Creation Test with ResourceGroupPreparer in Python\nDESCRIPTION: This example shows how to use ResourceGroupPreparer to create a resource group for testing Azure Search service creation. It demonstrates the usage of preparers to handle prerequisite resources and cleanup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport azure.mgmt.search\nfrom devtools_testutils import AzureMgmtRecordedTestCase, ResourceGroupPreparer, recorded_by_proxy\n\nclass TestMgmtSearch(AzureMgmtRecordedTestCase):\n\n    def setup_method(self, method):\n        self.client = self.create_mgmt_client(\n            azure.mgmt.search.SearchManagementClient\n        )\n\n    @ResourceGroupPreparer()\n    @recorded_by_proxy\n    def test_search_services(self, resource_group, location):\n        account_name = self.get_resource_name(''ptvstestsearch')\n\n        service = self.client.services.begin_create_or_update(\n            resource_group.name,\n            account_name,\n            {\n                'location': location,\n                'replica_count': 1,\n                'partition_count': 1,\n                'hosting_mode': 'Default',\n                'sku': {\n                    'name': 'standard'\n                }\n            }\n        ).result()\n\n        availability = self.client.services.check_name_availability(account_name)\n        assert not availability.is_name_available\n        assert availability.reason == \"AlreadyExists\"\n\n        service = self.client.services.get(\n            resource_group.name,\n            service.name\n        )\n        assert service.name == account_name\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Management Libraries using pip\nDESCRIPTION: This command installs the necessary Python packages for interacting with Azure Storage management APIs (`azure-mgmt-storage`) and handling Azure authentication (`azure-identity`) using the pip package installer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-storage\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Stream Analytics Management and Identity Packages\nDESCRIPTION: This snippet shows how to install the required Azure packages using pip. It installs the Azure Stream Analytics Management Client and Azure Identity packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-streamanalytics\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Base with azure-cognitiveservices-knowledge-qnamaker in Python\nDESCRIPTION: This snippet demonstrates how to create a new knowledge base using the CreateKbDTO in the legacy azure-cognitiveservices-knowledge-qnamaker library. It includes authentication, creating the knowledge base, and waiting for the operation to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom msrest.authentication import CognitiveServicesCredentials\nfrom azure.cognitiveservices.knowledge.qnamaker.models import CreateKbDTO, QnADTO\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credentials=CognitiveServicesCredentials(\"API key\")\n)\n\noperation = client.knowledgebase.create(\n    create_kb_payload=CreateKbDTO(\n        name=\"<knowledgebase-name>\",\n        qna_list=[\n            QnADTO(\n                questions=[\"questions\"],\n                answer=\"answer\"\n            )\n        ]\n        \n    )\n)\nfor i in range(20):\n    if operation.operation_state in [\"NotStarted\", \"Running\"]:\n        print(\"Waiting for operation: {} to complete.\".format(operation.operation_id))\n        time.sleep(5)\n        operation = client.operations.get_details(operation_id=operation.operation_id)\n    else:\n        break\n\nif operation.operation_state != \"Succeeded\":\n    raise Exception(\"Operation {} failed to complete.\".format(operation.operation_id))\n\n# Get knowledge base ID from resourceLocation HTTP header\nknowledge_base_id = operation.resource_location.replace(\"/knowledgebases/\", \"\")\nprint(\"Created KB with ID: {}\".format(knowledge_base_id))\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure Core Version with Azure Storage File\nDESCRIPTION: Example of how to install a specific version of azure-core along with azure-storage-file to maintain compatibility with older versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core==1.0.0b2 azure-storage-file==12.0.0b2\n```\n\n----------------------------------------\n\nTITLE: Autorest configuration for Azure Monitor OpenTelemetry Exporter\nDESCRIPTION: YAML configuration for Autorest that specifies metadata, output settings, and input files for generating the Azure Monitor OpenTelemetry Exporter client code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: AzureMonitorClient\ndescription: OpenTelemetry Exporter for Azure Monitor\ngenerated-metadata: false\nlicense-header: MICROSOFT_MIT_NO_VERSION\nno-namespace-folders: true\ntrace: false\noutput-folder: ../azure/monitor/opentelemetry/exporter/_generated\nsource-code-folder-path: ./azure/monitor/opentelemetry/exporter/_generated\ninput-file: \n    - https://github.com/Azure/azure-rest-api-specs/blob/main/specification/applicationinsights/data-plane/Monitor.Exporters/preview/v2.1/swagger.json\n\npython: true\nv3: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Storage File Share SDK\nDESCRIPTION: Shows how to configure logging for the Azure Storage File Share SDK at both client and operation levels using the standard Python logging library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.storage.fileshare import ShareServiceClient\n\n# Create a logger for the 'azure.storage.fileshare' SDK\nlogger = logging.getLogger('azure.storage.fileshare')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = ShareServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nservice_client.get_service_properties(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Running Azure Maps Timezone SDK Samples using Bash\nDESCRIPTION: This bash script demonstrates how to set up and run the Azure Maps Timezone SDK samples. It sets the subscription key environment variable, installs the required package, and executes multiple sample Python scripts for different timezone operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-timezone --pre\n\npython samples/get_timezone_by_id.py\npython sample/get_timezone_by_coordinates.py\npython samples/get_iana_version.py\npython samples/get_iana_timezone_ids.py\npython samples/get_windows_timezone_ids.py\npython samples/convert_windows_timezone_to_iana.py\n```\n\n----------------------------------------\n\nTITLE: Updating Question Answering Project QnAs with azure-ai-language-questionanswering in Python\nDESCRIPTION: This snippet demonstrates how to update questions and answers directly in a Question Answering project using the begin_update_qnas method in the new azure-ai-language-questionanswering library. It shows authentication and adding a new QnA pair to the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n\nqna_poller = client.begin_update_qnas(\n    project_name=\"<project_name>\",\n    qnas=[{\n        \"op\": \"add\",\n        \"value\": {\n            \"questions\": [\n                \"What is the easiest way to use Azure services in my Python project?\"\n            ],\n            \"answer\": \"Using the Azure SDKs\"\n        }\n    }]\n)\n\nqnas = qna_poller.result()\n\nfor item in qnas:\n    print(f\"qna: {item['id']}\")\n    print(\"\\tquestions:\")\n    for question in item[\"questions\"]:\n        print(f\"\\t\\t{question}\")\n    print(f\"\\tanswer: {item['answer']}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Logging for PurviewSharingClient Sessions - Python\nDESCRIPTION: Shows how to enable verbose DEBUG-level logging using Python's standard logging module, providing insights into HTTP requests and responses. The client is created with logging_enable=True, and output is directed to stdout. A useful troubleshooting pattern for diagnosing SDK operations and connectivity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport sys\\nimport logging\\nfrom azure.identity import DefaultAzureCredential\\nfrom azure.purview.sharing import PurviewSharingClient\\n\\n# Create a logger for the 'azure' SDK\\nlogger = logging.getLogger('azure')\\nlogger.setLevel(logging.DEBUG)\\n\\n# Configure a console output\\nhandler = logging.StreamHandler(stream=sys.stdout)\\nlogger.addHandler(handler)\\n\\nendpoint = \\\"https://<my-account-name>.share.purview.azure.com\\\"\\ncredential = DefaultAzureCredential()\\n\\n# This client will log detailed information about its HTTP sessions, at DEBUG level\\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Personalizer SDK Generation Settings\nDESCRIPTION: YAML configuration specifying package details, licensing, versioning, and other settings for the Azure Personalizer SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: azure.ai.personalizer\npackage-name: azure-ai-personalizer\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\nopenapi-type: data-plane\nversion-tolerant: true\npackage-version: 1.0.0b1\nadd-credential: true\ncredential-default-policy-type: AzureKeyCredentialPolicy\ncredential-key-header-name: Ocp-Apim-Subscription-Key\nblack: true\n```\n\n----------------------------------------\n\nTITLE: Removing VisualStudioCodeCredential from DefaultAzureCredential Chain in Python\nDESCRIPTION: A breaking change introduced where `VisualStudioCodeCredential` was removed from the default token acquisition chain used by `DefaultAzureCredential`. Applications relying on VS Code authentication via the default chain need to explicitly include this credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nremoved `VisualStudioCodeCredential` from `DefaultAzureCredential` token chain\n```\n\n----------------------------------------\n\nTITLE: Defining Subpackage Table of Contents (rst)\nDESCRIPTION: This reStructuredText snippet defines a table of contents (`toctree`) for the subpackages within the `azure.servicebus` package. It includes links to the documentation for `azure.servicebus.aio`, `azure.servicebus.amqp`, and `azure.servicebus.management` with a maximum depth of 4 levels.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/doc/azure.servicebus.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   azure.servicebus.aio\n   azure.servicebus.amqp\n   azure.servicebus.management\n```\n\n----------------------------------------\n\nTITLE: Authentication in Old Version using ServicePrincipalCredentials\nDESCRIPTION: Demonstrates the old method of authentication using ServicePrincipalCredentials from azure.common to create a compute client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/python_mgmt_migration_guide.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport azure.mgmt.compute\nfrom azure.common.credentials import ServicePrincipalCredentials\n\ncredentials = ServicePrincipalCredentials(\n    client_id=client_id,\n    secret=client_secret,\n    tenant=tenant_id\n)\ncompute_client = azure.mgmt.compute.ComputeManagementClient(credentials=credentials, subscription_id=self.subscription_id)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Azure Maps Search Operation\nDESCRIPTION: This snippet shows how to enable detailed logging for a single operation with the Azure Maps Search client even when logging is not enabled for the entire client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nservice_client.get_service_stats(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dev Test Labs Management Client Library for Python\nDESCRIPTION: Commands to install the Azure Dev Test Labs Management Client Library and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-devtestlabs\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Azure SDK Python Development Dependencies\nDESCRIPTION: Lists required dependencies for Azure SDK Python development including local package references and external libraries. Contains references to azure-sdk-tools, azure-identity, azure-core packages and async support libraries aiohttp and aiounittest.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\naiohttp>=3.0\naiounittest>=1.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Generation for Purview Workflow (YAML)\nDESCRIPTION: This YAML snippet defines configuration parameters for generating the Python SDK for Azure Purview Workflow. It specifies the input OpenAPI spec URL (`input-file`), the output folder (`output-folder`), Python namespace (`namespace`), package name (`package-name`), license header (`license-header`), client title (`title`), package version (`package-version`), package mode (`package-mode`), pretty print name (`package-pprint-name`), security mechanism (`security`: AADToken), required security scopes (`security-scopes`), and enables Python code generation (`python: true`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n - https://github.com/Azure/azure-rest-api-specs/blob/main/specification/purview/data-plane/Azure.Analytics.Purview.Workflow/preview/2023-10-01-preview/purviewWorkflow.json\noutput-folder: ../\nnamespace: azure.purview.workflow\npackage-name: azure-purview-workflow\nlicense-header: MICROSOFT_MIT_NO_VERSION\ntitle: PurviewWorkflowClient\npackage-version: 1.0.0b2\npackage-mode: dataplane\npackage-pprint-name: Azure Purview Workflow Service\nsecurity: AADToken\nsecurity-scopes: https://purview.azure.net/.default\npython: true\n```\n\n----------------------------------------\n\nTITLE: Listing Certificate Properties with Legacy Azure Key Vault SDK\nDESCRIPTION: Demonstrates how to list certificate properties from an Azure Key Vault using the legacy azure-keyvault SDK. Returns an iterator of CertificateItem instances containing certificate metadata.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncertificates = client.get_certificates(vault_base_url=\"https://my-key-vault.vault.azure.net/\")\n\nfor certificate in certificates:\n    print(certificate.attributes.created)\n    print(certificate.x509_thumbprint)\n```\n\n----------------------------------------\n\nTITLE: Running Mypy Type Checking with Tox\nDESCRIPTION: Command to run Mypy type checking on a package using Tox. This verifies that type annotations are correct throughout the codebase.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e mypy -c <path to tox.ini> --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Tropical Storms using Azure Maps Weather API in Python\nDESCRIPTION: This snippet demonstrates how to use the Azure Maps Weather SDK to get a list of active tropical storms. It initializes the MapsWeatherClient, makes an API call, and handles potential errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef get_tropical_storm_active():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.weather import MapsWeatherClient\n\n    maps_weather_client = MapsWeatherClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = maps_weather_client.get_tropical_storm_active()\n        print(json.dumps(result, indent=4))\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    get_tropical_storm_active()\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Elasticsan Client\nDESCRIPTION: Example code showing how to authenticate the ElasticSanMgmtClient using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elasticsan/azure-mgmt-elasticsan/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.elasticsan import ElasticSanMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ElasticSanMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity for AAD Authentication\nDESCRIPTION: Command to install the azure-identity library which is required for samples that use Azure Active Directory for authentication with Event Hubs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Transliterating Text from Chinese Characters to Latin Script using Azure Translator API\nDESCRIPTION: Demonstrates how to use the Azure Translator Text API to transliterate Chinese characters (Simplified) to Latin script. The code handles error responses through try-except blocks and extracts the transliteration result from the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    language = \"zh-Hans\"\n    from_script = \"Hans\"\n    to_script = \"Latn\"\n    input_text_elements = [\"这是个测试。\"]\n\n    response = text_translator.transliterate(\n        body=input_text_elements,\n        language=language,\n        from_script=from_script,\n        to_script=to_script,\n    )\n    transliteration = response[0] if response else None\n\n    if transliteration:\n        print(\n            f\"Input text was transliterated to '{transliteration.script}' script. Transliterated text: '{transliteration.text}'.\"\n        )\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: Setting up Authenticated LogsQueryClient with DefaultAzureCredential\nDESCRIPTION: Creates an asynchronous LogsQueryClient using DefaultAzureCredential for authentication to query data from Log Analytics.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.monitor.query.aio import LogsQueryClient\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\n```\n\n----------------------------------------\n\nTITLE: Enumerating Devices with DeviceUpdateClient in Python\nDESCRIPTION: Retrieves a list of all devices registered with the Device Update instance using the `list_devices` method of the `device_management` attribute from an initialized `DeviceUpdateClient`. The code then iterates through the result and prints the `deviceId` for each registered device.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetDevice/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.device_management.list_devices()\nfor item in response:\n    print(f\"  {item['deviceId']}\")\n```\n\n----------------------------------------\n\nTITLE: Azure Communication Chat SDK Sample Environment Setup and Execution\nDESCRIPTION: This bash script shows how to set up environment variables and install required packages to run the sample code for Azure Communication Chat client library. It includes commands to execute both synchronous and asynchronous sample code files.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_COMMUNICATION_SERVICE_ENDPOINT=\"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nset COMMUNICATION_SAMPLES_CONNECTION_STRING=\"<connection string of your Communication service>\"\n\npip install azure-communication-identity\n\npython samples\\chat_client_sample.py\npython samples\\chat_client_sample_async.py\npython samples\\chat_thread_client_sample.py\npython samples\\chat_thread_client_sample_async.py\n```\n\n----------------------------------------\n\nTITLE: Using AsyncPipeline with TrioRequestsTransport in Azure SDK for Python\nDESCRIPTION: This code snippet demonstrates how to create and use an async pipeline with TrioRequestsTransport for sending HTTP requests asynchronously in the Azure SDK for Python. Dependencies include azure.core.pipeline.transport.TrioRequestsTransport and an initialized set of pipeline policies. The async context manager ensures automatic resource management, and the run method executes the pipeline request, returning the async response. Intended for scenarios requiring custom or trio-based asynchronous transport.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.core.pipeline.transport import TrioRequestsTransport\n\nasync with AsyncPipeline(TrioRequestsTransport(), policies=policies) as pipeline:\n    return await pipeline.run(request)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Live Pipeline in Python\nDESCRIPTION: Example demonstrating how to create a live pipeline instance from an existing pipeline topology with specific parameter definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurl_param = ParameterDefinition(name=\"rtspUrl\", value=pipeline_url)\npass_param = ParameterDefinition(name=\"rtspPassword\", value=\"secret_password\")\nlive_pipeline_properties = LivePipelineProperties(description=\"Sample pipeline description\", topology_name=pipeline_topology_name, parameters=[url_param])\n\nlive_pipeline = LivePipeline(name=live_pipeline_name, properties=live_pipeline_properties)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local package references using the -e flag, version-constrained dependencies, and general package names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../azure-mgmt-network\n../../identity/azure-identity\nazure-mgmt-resource<=21.1.0\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Customizing Metrics Output with Views in Azure Monitor Python SDK\nDESCRIPTION: This example shows how to customize the metrics that are output by the SDK using Views. It demonstrates creating a view to change the name of a counter instrument and exporting the customized metrics to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import Counter, MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\nfrom opentelemetry.sdk.metrics.view import View\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\n\nexporter = AzureMonitorMetricExporter.from_connection_string(\n    os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n# Create a view matching the counter instrument `my.counter`\n# and configure the new name `my.counter.total` for the result metrics stream\nchange_metric_name_view = View(\n    instrument_type=Counter,\n    instrument_name=\"my.counter\",\n    name=\"my.counter.total\",\n)\n\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\nprovider = MeterProvider(\n    metric_readers=[\n        reader,\n    ],\n    views=[\n        change_metric_name_view,\n    ],\n)\nmetrics.set_meter_provider(provider)\n\nmeter = metrics.get_meter_provider().get_meter(\"view-name-change\")\nmy_counter = meter.create_counter(\"my.counter\")\nmy_counter.add(100)\n```\n\n----------------------------------------\n\nTITLE: Updated Fields Structure in Prebuilt-Receipt Model JSON\nDESCRIPTION: This JSON snippet demonstrates the new structure of fields in the prebuilt-receipt model, where each currency-related field now returns its own currency information, eliminating the need for a separate Currency field.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/MIGRATION_GUIDE.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"fields\": {\n    \"Total\": {\n        \"type\": \"currency\",\n        \"valueCurrency\": {\n            \"amount\": 123.45,\n            \"currencySymbol\": \"$\",\n            \"currencyCode\": \"USD\"\n        },\n    ...\n    },\n    \"Tax\": { \"type\": \"currency\", \"valueCurrency\": ... },\n    ...\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and activate it for different shell environments (Linux, PowerShell, and Windows CMD).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/dev_setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env # Might be \"python3\" or \"py -3.8\" depending on your Python installation\nsource env/bin/activate      # Linux shell (Bash, ZSH, etc.) only\n./env/scripts/activate       # PowerShell only\n./env/scripts/activate.bat   # Windows CMD only\n```\n\n----------------------------------------\n\nTITLE: Creating Intermediate X.509 Certificate Enrollment Group in Python\nDESCRIPTION: Creates or updates an enrollment group using X.509 certificate attestation with an intermediate signing certificate. It reads the certificate content from a PEM file and sets it as both the primary and secondary signing certificate in the attestation details. The client is initialized using a connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Load certificate contents\ncertificate = open(\"certificate.pem\", \"rt\", encoding=\"utf-8\")\ncert_contents = certificate.read()\n\n# Create x509 enrollment group with an intermediate cert\nclient.enrollment_groups.create_or_update(\n    id=\"<enrollment_group_id>\",\n    enrollment_group={\n        \"enrollmentGroupId\": \"<enrollment_group_id>\",\n        \"attestation\": {\n            \"type\": \"x509\",\n            \"x509\": {\n                \"signingCertificates\": {\n                    \"primary\": {\"certificate\": f\"{cert_contents}\"},\n                    \"secondary\": {\"certificate\": f\"{cert_contents}\"},\n                }\n            },\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Renaming Enum ManifestOrderBy to ArtifactManifestOrder via Swagger Directive\nDESCRIPTION: Uses an AutoRest directive to modify the `x-ms-enum` name property within the `ManifestOrderBy` definition in the Swagger file. This transformation ensures the corresponding enum in the generated Python SDK is named `ArtifactManifestOrder` instead of `ManifestOrderBy`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions.ManifestOrderBy\n  transform: >\n    $['x-ms-enum'][\"name\"] = \"ArtifactManifestOrder\"\n```\n\n----------------------------------------\n\nTITLE: Uninstrumenting Azure AI Inference API\nDESCRIPTION: Disables trace collection for Azure AI Inference API by uninstrumenting the API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nAIInferenceInstrumentor().uninstrument()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Anomaly Detector SDK Settings\nDESCRIPTION: YAML configuration that specifies the input API specs, output folder, package namespace, version, and security settings for the Azure Anomaly Detector SDK. Includes both univariate and multivariate anomaly detection specifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: \n - https://github.com/Azure/azure-rest-api-specs/blob/main/specification/cognitiveservices/data-plane/AnomalyDetector/stable/v1.1/UnivariateAnomalyDetector.json\n - https://github.com/Azure/azure-rest-api-specs/blob/main/specification/cognitiveservices/data-plane/AnomalyDetector/stable/v1.1/MultivariateAnomalyDetector.json\noutput-folder: ../\nnamespace: azure.ai.anomalydetector\npackage-name: azure-ai-anomalydetector\nlicense-header: MICROSOFT_MIT_NO_VERSION\ntitle: AnomalyDetectorClient\npackage-version: 3.0.0b6\npackage-mode: dataplane\npackage-pprint-name: Cognitive Services Anomaly Detector\nsecurity: AzureKey\nsecurity-header-name: Ocp-Apim-Subscription-Key\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Toctree for Subpackages\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `toctree` directive to create a table of contents linking to documentation for subpackages. The `:maxdepth: 6` option controls the depth of the table of contents hierarchy. It specifically lists the `azure.ai.language.conversations.authoring.aio` subpackage to be included in the documentation structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/doc/azure.ai.language.conversations.authoring.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 6\n\n   azure.ai.language.conversations.authoring.aio\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters in Python Azure SDK Docstrings\nDESCRIPTION: Examples of one-line and two-line parameter documentation formats for basic types and custom models in Azure SDK docstrings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n:param <type> <param_name>: <Description of the parameter>\n```\n\nLANGUAGE: python\nCODE:\n```\n:param <param_name>: <Description of the parameter>\n:type <param_name>: <param_type>\n```\n\n----------------------------------------\n\nTITLE: Generating Python SDK with Autorest (PowerShell)\nDESCRIPTION: This command sequence navigates to the folder containing the Swagger/OpenAPI definition (`cd <swagger-folder>`) and then executes Autorest (`autorest`) with flags `--v3` (use version 3) and `--python` to generate Python code based on the configuration found in the directory (typically `readme.md`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ps\nCODE:\n```\ncd <swagger-folder>\nautorest --v3 --python\n```\n\n----------------------------------------\n\nTITLE: Version Update Changes - Azure Key Vault Certificates 4.0.0b5\nDESCRIPTION: Documents changes in version 4.0.0b5 including method renames, parameter updates, and return type changes for certificate operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- Removed redundant method `get_pending_certificate_signing_request()`\n- Renamed sync/async methods for certificate operations\n- Changed parameter requirements and return types\n- Updated poller return types for delete and recover operations\n```\n\n----------------------------------------\n\nTITLE: Migrating MySQL Flexible Server Imports in Python\nDESCRIPTION: Illustrates the required import statement change when migrating from the deprecated `azure.mgmt.rdbms.mysql_flexibleservers` module to the recommended `azure.mgmt.mysqlflexibleservers` package. This change is necessary due to the module's deprecation within the `azure-mgmt-rdbms` library as announced in version 10.2.0b18.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/rdbms/azure-mgmt-rdbms/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.rdbms.mysql_flexibleservers import *\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.mysqlflexibleservers import *\n```\n\n----------------------------------------\n\nTITLE: Creating Role Assignment for Cosmos DB Access\nDESCRIPTION: Azure CLI command to create a role assignment that links the principal ID with the custom role definition. This grants the specified permissions to the user identified by the principal ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naz cosmosdb sql role assignment create --account-name $accountName --resource-group $resourceGroupName  --role-definition-name \"ExpandedRBACActions\" --scope \"/\" --principal-id $principalId\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure SDK Repo and Navigating to Identity Tests\nDESCRIPTION: Clones the main branch of the `azure-sdk-for-python` repository from GitHub with a depth of 1 for efficiency, and then changes the current directory to the location of the managed identity live tests within the cloned repository structure. This prepares the environment for installing dependencies and running tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/azure_arc.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/Azure/azure-sdk-for-python --single-branch --branch main --depth 1\ncd azure-sdk-for-python/sdk/identity/azure-identity/tests/managed-identity-live\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Monitor Ingestion Tests\nDESCRIPTION: Required environment variables that need to be set to connect to live Azure Monitor resources for performance testing. These include the data collection rule ID, endpoint, and stream name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/tests/perf_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_MONITOR_DCR_ID=<The ID of the data collection rule>\nAZURE_MONITOR_DCE=<The data collection endpoint to upload logs to>\nAZURE_MONITOR_STREAM_NAME=<The data collection stream name>\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies for Azure SDK Python\nDESCRIPTION: This requirements file specifies necessary development dependencies for an Azure SDK Python project. It references local tool modules, identity components, communication services, service bus, azure-core, and aiohttp as a third-party dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n-e ../azure-communication-identity\n-e ../azure-communication-phonenumbers\n-e ../../servicebus/azure-servicebus\n../../core/azure-core\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Example Conflicted assets.json Structure\nDESCRIPTION: Shows the typical structure of a conflicted assets.json file during a git merge conflict between two branches, highlighting the conflict markers and differing tag values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/scripts/resolve-asset-conflict/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"AssetsRepo\": \"Azure/azure-sdk-assets-integration\",\n  \"AssetsRepoPrefixPath\": \"python\",\n  \"TagPrefix\": \"python/storage/azure-storage-blob\",\n<<<<<<< HEAD\n  \"Tag\": \"integration/example/storage_feature_addition2\"\n=======\n  \"Tag\": \"integration/example/storage_feature_addition1\"\n>>>>>>> test-storage-tag-combination\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Purview Sharing Client\nDESCRIPTION: Example showing how to authenticate the PurviewSharingClient using DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewSharingClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Diagnostic Logging Filter\nDESCRIPTION: Demonstrates how to create and apply a custom logging filter to control which Cosmos DB diagnostic logs are captured based on criteria like status codes and duration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom azure.cosmos import CosmosClient\nlogger = logging.getLogger('azure.cosmos')\nlogger.setLevel(logging.INFO)\nfile_handler = logging.FileHandler('diagnostics.output')\nlogger.addHandler(file_handler)\n# Create a filter to filter out logs\nclass CustomFilter(logging.Filter):\n  def filter(self, record):\n      ret = (hasattr(record, 'status_code') and record.status_code > 400\n         and not (record.status_code in [404, 409, 412] and getattr(record, 'sub_status_code', None) in [0, None])\n         and hasattr(record, 'duration') and record.duration > 1000)\n      return ret\n# Add the filter to the logger\nlogger.addFilter(CustomFilter())\nclient = CosmosClient(endpoint, key,logger=logger, enable_diagnostics_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Data Aggregation and Visualization\nDESCRIPTION: Groups data into 2-minute buckets and creates a visualization plot. Uses pandas Grouper for time-based aggregation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngrouped_data = data.groupby(pandas.Grouper(freq='2Min')).agg({'count'})\ngrouped_data.plot(legend=False)\n```\n\n----------------------------------------\n\nTITLE: Receiving and Peeking Messages - Service Bus v7 - Python\nDESCRIPTION: Presents the v7 equivalents for receiving and peeking Service Bus messages via receive_messages and peek_messages methods on the receiver. Inputs for receiving include max_message_count and max_wait_time, and for peeking, max_message_count and (optionally) sequence_number. Names and semantics have been updated to reflect the new SDK conventions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith receiver:\n    received_messages = receiver.receive_messages(max_message_count=10, max_wait_time=10)\n    peeked_messages = receiver.peek_messages(max_message_count=1, sequence_number=None)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Schema Registry Avro Encoder with pip\nDESCRIPTION: Installs the Azure Schema Registry Avro Encoder client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-schemaregistry-avroencoder\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Fabric Management and Identity Libraries with pip (Bash)\nDESCRIPTION: Installs the necessary Python packages `azure-mgmt-fabric` for Fabric management and `azure-identity` for handling Azure Active Directory authentication using the pip package manager. These installations are required before using the client library in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/fabric/azure-mgmt-fabric/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-fabric\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Basic AutoRest Configuration for Text Analytics Python SDK\nDESCRIPTION: Defines core configuration settings for SDK generation including package name, credential handling, and Python-specific options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlicense-header: MICROSOFT_MIT_NO_VERSION\nadd-credential: true\npayload-flattening-threshold: 2\npackage-name: azure-ai-textanalytics\nclear-output-folder: true\ncredential-scopes: https://cognitiveservices.azure.com/.default\nno-namespace-folders: true\npython: true\nmultiapi: true\npython3-only: true\n```\n\n----------------------------------------\n\nTITLE: Generating Azure AgriFood Farming FarmBeats SDK\nDESCRIPTION: Commands to navigate to the swagger folder and run Autorest to generate the SDK. This assumes the current directory is set correctly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Authentication with Subscription Key\nDESCRIPTION: Example showing how to authenticate with Azure Maps using a subscription key credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.geolocation import MapsGeolocationClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\ngeolocation_client = MapsGeolocationClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Text Analytics Package\nDESCRIPTION: Command to install the Azure Text Analytics client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-textanalytics\n```\n\n----------------------------------------\n\nTITLE: ARIMA Model Training and Forecasting\nDESCRIPTION: Implements automated ARIMA modeling using pmdarima, including train-test split and visualization of forecasting results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pmdarima import auto_arima\nfrom pmdarima.model_selection import train_test_split\nfrom matplotlib import pyplot\nimport numpy\n\n# Training a model is _VERY EASY_, although it should be noted that one can tune these functions if a different train/test split, or arima parameters, is desired.\ntrain, test = train_test_split(grouped_data)\nmodel = auto_arima(train, suppress_warnings=True)\n\n# Let's visualize our results to get a sense for how well our prediction is working.\nforecast = model.predict(test.shape[0])\nx = numpy.arange(grouped_data.shape[0])\npyplot.plot(x[:len(train)], train, c='blue')\npyplot.plot(x[len(train):], forecast, c='green')\n# pyplot.plot(x[len(train):], test, c='orange') # If it's desired to compare vs. actual results, uncomment this.\npyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Azure User's Principal ID\nDESCRIPTION: Azure CLI command to get the Object ID (principal ID) of the currently signed-in user. This ID is needed for role assignment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naz ad signed-in-user show --query id -o tsv\n```\n\n----------------------------------------\n\nTITLE: Querying a Project with get_answers (New QnA SDK) in Python\nDESCRIPTION: Shows how to query a Question Answering project using the `get_answers` method of the modern `QuestionAnsweringClient`. Requires the user's question, the target project name, and the deployment name. Results are then filtered based on a confidence score threshold (e.g., > 0.9).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nclient = QuestionAnsweringClient(endpoint=endpoint, credential=credential)\n\nresponse = client.get_answers(\n    question=\"How long should my Surface battery last?\",\n    project_name=\"<my-qna-project-name>\",\n    deployment_name=\"<my-qna-deployment-name>\"\n)\nbest_answers = [a for a in response.answers if a.confidence_score > 0.9]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Package-2019-04 for Python SDK Generation\nDESCRIPTION: Tag-specific settings for generating 2019-04 version of the API with namespace and output folder configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.python.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: azure.mgmt.servicetoreplace.v2019_04_01\noutput-folder: $(python-sdks-folder)/servicetoreplace/azure-mgmt-servicetoreplace/azure/mgmt/servicetoreplace/v2019_04_01\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Elasticsan SDK Dependencies\nDESCRIPTION: Commands to install the required Azure Elasticsan management package and Azure identity package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elasticsan/azure-mgmt-elasticsan/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-elasticsan\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Function Using Mapping Type Hint\nDESCRIPTION: Example showing usage of Mapping type hint for dictionary parameters, allowing flexibility in input types that implement the mapping protocol.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Mapping\n\ndef create_table(entity: Mapping[str, str]) -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Throttle Retry Policy in Azure Cosmos DB Python SDK\nDESCRIPTION: Example demonstrating how to configure the resource throttle retry policy for handling 429 error codes. Sets the total number of throttle retries to 5, uses a fixed interval of 3 seconds between retries, and sets the maximum throttle retry backoff wait time to 15 seconds.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/docs/TimeoutAndRetriesConfig.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\n\nclient = CosmosClient(URL, credential=KEY, retry_throttle_total=5, retry_fixed_interval=3.0, retry_throttle_backoff_max=15)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication JobRouter SDK via pip (Bash)\nDESCRIPTION: Installs the Azure Communication JobRouter client library for Python using the pip package manager. This command should be run in a terminal or command prompt where pip is configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-jobrouter\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Network Fabric SDK Dependencies\nDESCRIPTION: Commands to install the required Azure SDK packages using pip. Installs both the managed network fabric management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managednetworkfabric/azure-mgmt-managednetworkfabric/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-managednetworkfabric\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Management Groups Package\nDESCRIPTION: Commands to install the required Azure packages using pip. Installs both the management groups SDK and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managementgroups/azure-mgmt-managementgroups/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-managementgroups\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Polling Agent Run Status in Python\nDESCRIPTION: Polls an agent run until its status changes from queued or in_progress, waiting 1 second between checks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n# Poll the run as long as run status is queued or in progress\nwhile run.status in [\"queued\", \"in_progress\", \"requires_action\"]:\n    # Wait for a second\n    time.sleep(1)\n    run = project_client.agents.get_run(thread_id=thread.id, run_id=run.id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Management Groups Client\nDESCRIPTION: Example showing how to authenticate with the Azure Management Groups API using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managementgroups/azure-mgmt-managementgroups/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.managementgroups import ManagementGroupsAPI\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ManagementGroupsAPI(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Including Query Statistics in Python\nDESCRIPTION: Demonstrates how to retrieve and access query execution statistics such as CPU and memory consumption.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nquery = \"AzureActivity | top 10 by TimeGenerated\"\nresult = client.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    include_statistics=True\n    )\n\nexecution_time = result.statistics.get(\"query\", {}).get(\"executionTime\")\nprint(f\"Query execution time: {execution_time}\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Device Update Management Client in Python\nDESCRIPTION: Python code snippet demonstrating how to authenticate with the Azure Device Update Management Client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-mgmt-deviceupdate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.deviceupdate import DeviceUpdateMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DeviceUpdateMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Including Visualization Data in Python\nDESCRIPTION: Shows how to retrieve visualization data for logs queries using the render operator.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery = (\n    \"StormEvents\"\n    \"| summarize event_count = count() by State\"\n    \"| where event_count > 10\"\n    \"| project State, event_count\"\n    \"| render columnchart\"\n)\nresult = client.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    include_visualization=True\n    )\n\nprint(f\"Visualization result: {result.visualization}\")\n```\n\n----------------------------------------\n\nTITLE: Using Azure SDK Client as Context Manager in Python (v0.50.0+)\nDESCRIPTION: Starting from version 0.50.0 and emphasized with default HTTP connection pooling in 0.60.0, it is recommended to use the Azure SDK client object as a context manager (using a `with` statement). This ensures the underlying HTTP session is properly closed. Alternatively, explicitly call the `client.close()` method when done with the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Recommended: Use as context manager\nwith AuthorizationManagementClient(credential, subscription_id) as client:\n    # Use the client\n    pass # Session automatically closed\n\n# Alternative: Explicitly close\nclient = AuthorizationManagementClient(credential, subscription_id)\ntry:\n    # Use the client\n    pass\nfinally:\n    client.close() # Ensure session is closed\n```\n\n----------------------------------------\n\nTITLE: Removing x-ms-parameterized-host from Swagger Document\nDESCRIPTION: YAML directive to remove the x-ms-parameterized-host property from the swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $\n  transform: >\n    $(\"x-ms-parameterized-host\") = undefined;\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Confidential Ledger using DefaultAzureCredential\nDESCRIPTION: Python code demonstrating how to authenticate with Azure Confidential Ledger using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-mgmt-confidentialledger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.confidentialledger import ConfidentialLedger\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ConfidentialLedger(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Container Creation in Azure Cosmos DB\nDESCRIPTION: Example of handling resource conflict errors when creating a container with a duplicate ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    database.create_container(id=CONTAINER_NAME, partition_key=PartitionKey(path=\"/productName\"))\nexcept exceptions.CosmosResourceExistsError:\n    print(\"\"\"Error creating container\nHTTP status code 409: The ID (name) provided for the container is already in use.\nThe container name must be unique within the database.\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a Generic Class in Python\nDESCRIPTION: This snippet demonstrates how to instantiate a generic class (LROPoller) with a specific type parameter (e.g., Dict[str, str]), then retrieve a result and inspect inferred types using reveal_type statements. Dependencies include typing.Dict and the azure.core.polling LROPoller class. Inputs: constructor arguments and a type parameter; outputs: type-checked instance and result.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\nfrom azure.core.polling import LROPoller\n\npoller = LROPoller[Dict[str, str]](client, initial_response, deserialization_callback, polling_method)\nreveal_type(poller)\n\nresult = poller.result()\nreveal_type(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Sphere Management and Identity Packages - Bash\nDESCRIPTION: Installs the 'azure-mgmt-sphere' and 'azure-identity' packages using pip, prerequisites for using the Azure Sphere Management Client Library. These commands should be run in a terminal or command prompt where Python 3.8+ is available. The installed packages allow you to authenticate and manage Azure Sphere resources from Python applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sphere/azure-mgmt-sphere/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-sphere\\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dashboard Management Client Library in Python\nDESCRIPTION: Command line instructions for installing the Azure Dashboard Management client library and the Azure Identity package using pip. These packages are required to work with Azure Dashboards programmatically.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dashboard/azure-mgmt-dashboard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-dashboard\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Imports Using TYPE_CHECKING in Python\nDESCRIPTION: Demonstrates resolving circular imports by wrapping type-only imports under a TYPE_CHECKING guard. Imports Baz only during static analysis, using a forward reference in function foo. Requires typing.TYPE_CHECKING and assumes interdependent module structure. Ensures runtime import safety while preserving static type checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TYPE_CHECKING\\n\\nif TYPE_CHECKING:\\n    from b import Baz\\n\\n\\ndef foo(b: \\\"Baz\\\") -> None:\\n    b.hello()\\n\\n\\ndef bar() -> None:\\n    print(\\\"bar\\\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Synapse Dependencies with pip\nDESCRIPTION: Commands to install the required Azure Synapse management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-mgmt-synapse/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-synapse\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Auto-documenting azure.servicebus.aio Module using Sphinx automodule\nDESCRIPTION: This reStructuredText snippet employs the Sphinx `automodule` directive to automatically generate API documentation directly from the `azure.servicebus.aio` Python module's source code and docstrings. The options `:members:`, `:undoc-members:`, and `:inherited-members:` ensure comprehensive coverage by including documentation for all module members, even those lacking explicit docstrings, as well as members inherited from base classes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/doc/azure.servicebus.aio.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.servicebus.aio\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Alternative Append Entry with Wait Operation\nDESCRIPTION: Shows an alternative method to append an entry to the ledger while waiting for commit in a single operation using begin_create_ledger_entry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Hello world again!\"}\n)\nnew_post_result = post_poller.result()\nprint(\n    'The new ledger entry has been committed successfully at transaction id '\n    f'{new_post_result[\"transactionId\"]}'\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Words in Sentences Function - Python\nDESCRIPTION: Encodes a function definition \\\"longest_word_in_sentences\\\" that processes an array of strings and finds the longest word in each input sentence. The schema enforces the structure (list of strings) for the sentences parameter, making it suitable for text analysis tasks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"longest_word_in_sentences\",\n  \"description\": \"Finds the longest word in each sentence.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"sentences\": {\n        \"type\": \"array\",\n        \"items\": {\"type\": \"string\"},\n        \"description\": \"A list of sentences.\"\n      }\n    },\n    \"required\": [\"sentences\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KeyVaultSettingsClient in Python\nDESCRIPTION: Demonstrates how to create a KeyVaultSettingsClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.administration import KeyVaultSettingsClient\n\nMANAGED_HSM_URL = os.environ[\"MANAGED_HSM_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyVaultSettingsClient(vault_url=MANAGED_HSM_URL, credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Portal Services Copilot Dependencies\nDESCRIPTION: Commands to install the required Azure SDK packages using pip. Installs both the Portal Services Copilot management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portalservices/azure-mgmt-portalservicescopilot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-portalservicescopilot\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Type Parameters for Collection Types\nDESCRIPTION: Shows how to properly specify type parameters for collection types like dictionaries to provide more detailed type information rather than relying on Any.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# No:\ndef get_entity(entity_id) -> dict:  # seen by type checker as dict[Any, Any]\n    ...\n\n# Yes:\ndef get_entity(entity_id: str) -> dict[str, str]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Synchronous RequestsTransport in Python\nDESCRIPTION: This snippet shows the basic initialization of the synchronous HTTP transport `RequestsTransport` provided by Azure Core, which uses the `requests` library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.pipeline.transport import RequestsTransport\nsynchronous_transport = RequestsTransport()\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Database Watcher Management Client and Identity packages with pip\nDESCRIPTION: Commands to install the necessary Azure SDK packages for working with the Database Watcher Management service. Installs both the management client library and the identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databasewatcher/azure-mgmt-databasewatcher/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-databasewatcher\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Updated LRO Poller Class (v1.0.0b1+)\nDESCRIPTION: Indicates the change in the Long-Running Operation (LRO) poller class from `msrest.polling.LROPoller` to `azure.core.polling.LROPoller` in version 1.0.0b1. Operations returning this poller are now prefixed with `begin_`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nazure.core.polling.LROPoller\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Assigned Managed Identity - Shell\nDESCRIPTION: Creates a user-assigned managed identity within a specified resource group using Azure CLI. Managed identities allow applications running on Azure to authenticate with Azure services securely. The command requires an existing resource group and assigns a friendly name to the identity. Outputs identity details including the principal ID and client ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\naz identity create -g $RESOURCE_GROUP -n AdminUser\n```\n\n----------------------------------------\n\nTITLE: Pushing Combined Tags in Bash\nDESCRIPTION: This snippet shows how to push the combined tags after successful completion of the merge process using the test-proxy command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntest-proxy push sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Data Box Management Client using DefaultAzureCredential\nDESCRIPTION: Example code that demonstrates how to authenticate with the Azure Data Box Management Client using DefaultAzureCredential. The code retrieves the subscription ID from environment variables and initializes the client with appropriate credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databox/azure-mgmt-databox/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.databox import DataBoxManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataBoxManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Scheduled Message Cancellation in Python\nDESCRIPTION: Added functionality to cancel previously scheduled messages. Use `ServiceBusSender.cancel_scheduled_messages(sequence_numbers)` providing the sequence numbers of the messages to cancel.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusSender.cancel_scheduled_messages(sequence_numbers)\n```\n\n----------------------------------------\n\nTITLE: Getting Face Resource API Keys using Azure CLI (Bash)\nDESCRIPTION: Uses the Azure CLI (`az`) command to list the API keys associated with a specific Azure Cognitive Services account (Face resource). Requires the resource name and resource group name as parameters. These keys can be used for `AzureKeyCredential` authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Get the API keys for the Face resource\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n----------------------------------------\n\nTITLE: Creating TextTranslationClient with Microsoft Entra ID Authentication\nDESCRIPTION: Creates a TextTranslationClient instance using Microsoft Entra ID (formerly Azure AD) with DefaultAzureCredential. This authentication method requires region and resource_id for the Translator resource instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncredential = DefaultAzureCredential()\nclient = TextTranslationClient(credential=credential, region=region, resource_id=resource_id)\n```\n\n----------------------------------------\n\nTITLE: Example Output Format for Text Embeddings\nDESCRIPTION: Provides an example of the expected output structure when retrieving text embeddings. It shows the index, the length of the embedding vector (which depends on the model), and truncated values of the embedding vector itself.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n```text\ndata[0]: length=1024, [0.0013399124, -0.01576233, ..., 0.007843018, 0.000238657]\ndata[1]: length=1024, [0.036590576, -0.0059547424, ..., 0.011405945, 0.004863739]\ndata[2]: length=1024, [0.04196167, 0.029083252, ..., -0.0027484894, 0.0073127747]\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Content Safety Endpoint\nDESCRIPTION: Azure CLI command to get the endpoint for an Azure AI Content Safety service resource\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Creating Test Profiles in Python for Azure Load Testing\nDESCRIPTION: Use the create_or_update_test_profile method in LoadTestAdministrationClient to work with Test Profiles in Azure Load Testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.create_or_update_test_profile(...)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Defendereasm Management SDK using DefaultAzureCredential\nDESCRIPTION: This code demonstrates how to authenticate with the Azure Defendereasm Management SDK using DefaultAzureCredential and environment variables for authentication parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/defendereasm/azure-mgmt-defendereasm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.defendereasm import EasmMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EasmMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet defines two local dependencies using the '-e' flag. The first points to Azure SDK tools, while the second references an Azure resource management package. These are likely used for development and testing of the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confluent/azure-mgmt-confluent/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Creating Pipeline Topology in Python\nDESCRIPTION: Example showing how to create a pipeline topology by defining parameters, RTSP source, and video sink configurations for video analysis.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#Parameters\nuser_name_param = ParameterDeclaration(name=\"rtspUserName\",type=\"String\",default=\"testusername\")\npassword_param = ParameterDeclaration(name=\"rtspPassword\",type=\"SecretString\",default=\"testpassword\")\nurl_param = ParameterDeclaration(name=\"rtspUrl\",type=\"String\",default=\"rtsp://www.sample.com\")\n\n#Source and Sink\nsource = RtspSource(name=\"rtspSource\", endpoint=UnsecuredEndpoint(url=\"${rtspUrl}\",credentials=UsernamePasswordCredentials(username=\"${rtspUserName}\",password=\"${rtspPassword}\")))\nnode = NodeInput(node_name=\"rtspSource\")\nsink = VideoSink(name=\"videoSink\", inputs=[node], video_name=\"video\", local_media_cache_path=\"/var/lib/videoanalyzer/tmp/\", local_media_cache_maximum_size_mi_b=\"1024\");\n    \npipeline_topology_properties = PipelineTopologyProperties()\npipeline_topology_properties.parameters = [user_name_param, password_param, url_param]\npipeline_topology_properties.sources = [source]\npipeline_topology_properties.sinks = [sink]\npipeline_topology = PipelineTopology(name=pipeline_topology_name,properties=pipeline_topology_properties)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Logic Apps SDK for Python\nDESCRIPTION: Code snippet showing how to install the Azure Logic Apps SDK for Python using pip. This is inferred from the context of the changelog.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/logic/azure-mgmt-logic/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-logic\n```\n\n----------------------------------------\n\nTITLE: Generating SDK Code with Autorest - PowerShell\nDESCRIPTION: Changes the current directory to the directory containing the OpenAPI/Swagger specification, then runs Autorest to generate SDK code. The commands assume that the swagger-folder placeholder is replaced with the actual folder name and that Autorest is already installed. Outputs generated code artifacts in-place.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd <swagger-folder>\nautorest\n\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Azure Batch Management Project\nDESCRIPTION: This requirements file specifies the necessary Python packages for the project using pip syntax. It includes editable installations (`-e`) for local Azure SDK tools, Batch management, and Core libraries, indicating development setup. It pins `azure-identity` to version 1.17.0 (commenting out a potential local editable version) and sets version constraints for `azure-mgmt-resource`, `azure-mgmt-storage`, and `aiohttp`. This configuration ensures a specific environment setup for development or testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/batch/azure-batch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../azure-mgmt-batch\n-e ../../core/azure-core\n# -e ../../identity/azure-identity\nazure-identity==1.17.0\nazure-mgmt-resource<=21.1.0\nazure-mgmt-storage<=20.0.0\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Blob Storage Checkpoint Store Library\nDESCRIPTION: This snippet demonstrates how to install the Azure Event Hubs Blob Storage Checkpoint Store library and run a sample script for checkpoint storage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-eventhub-checkpointstoreblob library\n$ pip install azure-eventhub-checkpointstoreblob\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_blob_checkpoint.py\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure SDK for Python Repository - Shell\nDESCRIPTION: Clones the Azure SDK for Python GitHub repository and navigates to the Service Fabric managed identity test subfolder. Requires Git to be installed and network access to GitHub. The commands will create a shallow clone of the repository and change the working directory, which is a prerequisite for running subsequent test setup steps.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/Azure/azure-sdk-for-python --single-branch --branch main --depth 1\\ncd azure-sdk-for-python/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -DeleteAfterHours in PowerShell\nDESCRIPTION: Defines the optional 'DeleteAfterHours' parameter, an Int32 specifying the number of hours from the current time after which the created resource group should be tagged for deletion. The tag 'DeleteAfter' holds a timestamp (e.g., \"2020-03-04T09:07:04.3083910Z\"). This aids automated cleanup in CI environments. It's not required, is named, defaults to 120, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 120\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Listing Python Development Dependencies for Azure SDK\nDESCRIPTION: A requirements file listing the development dependencies needed for Azure SDK for Python development. It includes testing tools like pytest, web frameworks (Django, FastAPI, Flask), a PostgreSQL database adapter, and HTTP client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\npytest\ndjango\nfastapi-slim\nflask\npsycopg2-binary\nrequests\nurllib3\n```\n\n----------------------------------------\n\nTITLE: Running Azure AppConfig Sample\nDESCRIPTION: Steps to run the Azure App Configuration sample. Installs the Azure App Configuration library and Azure Core Tracing for OpenTelemetry, then runs the sample that adds a config setting to an Azure App Configuration store.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-appconfiguration library\n$ pip install azure-appconfiguration\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_app_config.py\n```\n\n----------------------------------------\n\nTITLE: Renaming AuthenticationTypeEnum to DatasourceAuthenticationType\nDESCRIPTION: Directive to rename AuthenticationTypeEnum to DatasourceAuthenticationType for more specific and contextual naming in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataFeedDetail\"][\"properties\"][\"authenticationType\"][\"x-ms-enum\"][\"name\"] = \"DatasourceAuthenticationType\";\n```\n\n----------------------------------------\n\nTITLE: Updating AutoStop Criteria in Python for Azure Load Testing\nDESCRIPTION: Use the 'auto_stop_criteria' property on the 'Test' model to add autostop criteria for Azure Load Testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest.auto_stop_criteria = {...}\n```\n\n----------------------------------------\n\nTITLE: Security Definitions Transformation\nDESCRIPTION: YAML directive to transform security definitions by setting the 'in' property of SharedKey to 'header'\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.securityDefinitions\n  transform: |\n    $[\"SharedKey\"][\"in\"] = \"header\";\n```\n\n----------------------------------------\n\nTITLE: Listing Share Resources with PurviewSharingClient - Python\nDESCRIPTION: Fetches a list of share resources filtered by store kind (AdlsGen2Account) and sorted by creation date. The for loop prints each resource from the response iterator, allowing visibility into all resources where sharing occurs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport os\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\nlist_request = client.share_resources.list(\\n    filter=\\\"properties/storeKind eq 'AdlsGen2Account'\\\",\\n    order_by=\\\"properties/createdAt desc\\\")\\n\\nfor list_response in list_request:\\n    print(list_response)\n```\n\n----------------------------------------\n\nTITLE: Installing Editable Dependency (azure-sdk-tools) via pip\nDESCRIPTION: This line specifies an editable installation requirement, typically for a Python package manager like pip, often found in a requirements file. The '-e' flag indicates that the package located at the relative path '../../../tools/azure-sdk-tools' should be installed in \"editable\" mode, linking the installation directly to the source directory. This method is primarily used during development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridnetwork/azure-mgmt-hybridnetwork/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Active Directory Environment Variables\nDESCRIPTION: Configuration of environment variables required for Azure Active Directory authentication using DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Document Errors in Text Analytics Results\nDESCRIPTION: Demonstrates how to filter out error responses from text analysis results using list comprehension and the is_error attribute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = text_analytics_client.analyze_sentiment(documents)\nsuccessful_responses = [doc for doc in response if not doc.is_error]\n```\n\n----------------------------------------\n\nTITLE: Migrating Checkpoint Data from v1 to v5\nDESCRIPTION: This script demonstrates how to migrate checkpoint data from the legacy v1 format to the new v5 format. It reads legacy checkpoints from blob storage and writes them in the new format compatible with v5 BlobCheckpointStore.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nfrom azure.storage.blob import BlobServiceClient, ContainerClient\n\nEVENT_HUB_HOSTNAME = os.environ[\"EVENT_HUB_HOSTNAME\"]  # <your-eventhub-namespace>.servicebus.windows.net\nEVENT_HUB_NAME = os.environ[\"EVENT_HUB_NAME\"]\nEVENT_HUB_CONSUMER_GROUP = \"$Default\"  # Name of Event Hub consumer group\n\nSTORAGE_CONNECTION_STR = os.environ[\"AZURE_STORAGE_CONN_STR\"]\nBLOB_CONTAINER_NAME = \"your-blob-container-name\"  # Blob container to upload updated checkpoint information to.\nLEGACY_BLOB_CONTAINER_NAME = \"your-legacy-blob-container-name\" # Please make sure the legacy blob container resource exists.\n\n\ndef readLegacyCheckpoints(\n    storage_connection_str, legacy_blob_container_name, consumer_group\n):\n    container_client = ContainerClient.from_connection_string(\n        storage_connection_str, legacy_blob_container_name\n    )\n    legacy_checkpoints = []\n\n    # Read and process legacy checkpoints in blobs in container.\n    for blob in container_client.list_blobs():\n        blob_client = container_client.get_blob_client(blob)\n        stream = blob_client.download_blob()\n        for chunk in stream.chunks():\n            legacy_checkpoints.append(json.loads(chunk.decode(\"UTF-8\")))\n    return legacy_checkpoints\n\n\nif __name__ == \"__main__\":\n    legacy_checkpoints = readLegacyCheckpoints(\n        STORAGE_CONNECTION_STR, LEGACY_BLOB_CONTAINER_NAME, EVENT_HUB_CONSUMER_GROUP\n    )\n\n    # The checkpoint blobs require a specific naming scheme to be valid for use with the\n    # V5 CheckpointStore.\n    prefix = \"{}/{}/{}/checkpoint/\".format(\n        EVENT_HUB_FULLY_QUALIFIED_NAMESPACE.lower(),\n        EVENT_HUB_NAME.lower(),\n        EVENT_HUB_CONSUMER_GROUP.lower(),\n    )\n\n    # Create the storage client to write the migrated checkpoints.  This example\n    # assumes that the connection string grants the appropriate permissions to create a\n    # container in the storage account.\n    blob_service_client = BlobServiceClient.from_connection_string(\n        STORAGE_CONNECTION_STR\n    )\n    container_client = blob_service_client.get_container_client(BLOB_CONTAINER_NAME)\n    try:\n        # Create container if it doesn't already exist.\n        container_client.create_container()\n    except:\n        pass\n\n    # Translate each legacy checkpoint, storing offset and sequence data into correct\n    # blob to align with V5 BlobCheckpointStore.\n    for checkpoint in legacy_checkpoints:\n        metadata = {\n            \"offset\": str(checkpoint[\"offset\"]),\n            \"sequencenumber\": str(checkpoint[\"sequence_number\"]),\n        }\n        name = \"{}{}\".format(prefix, checkpoint[\"partition_id\"])\n        container_client.upload_blob(name, data=\"\", metadata=metadata)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mypy Type Inference for Overloaded Functions in Python\nDESCRIPTION: This snippet illustrates how invoking an overloaded function with different argument types results in mypy inferring the precise return type, as shown by reveal_type outputs. It depends on analyzing the result of analyze_text and employs reveal_type to demonstrate type checking. The expected input is a valid text and analysis kind; the output is mypy's inferred return type for each call.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nresult = analyze_text(\"my text\", LanguageDetection())\nreveal_type(result)\n```\n\n----------------------------------------\n\nTITLE: Using Standardized Exception Type in Azure Python SDK\nDESCRIPTION: Details the simplification of the exception hierarchy. Most SDK exceptions now inherit from `azure.core.exceptions.HttpResponseError`. The specific `CloudError` exception class has been removed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nazure.core.exceptions.HttpResponseError\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Form Recognizer Library\nDESCRIPTION: This snippet demonstrates how to install the Azure Form Recognizer library and run a sample script to analyze documents.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-ai-formrecognizer library\n$ pip install azure-ai-formrecognizer\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_form_recognizer.py\n```\n\n----------------------------------------\n\nTITLE: Constructing a Patient Record for Cancer Profiling\nDESCRIPTION: Python code showing how to create a PatientRecord object with a patient ID for use with the Cancer Profiling API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npatient1 = models.PatientRecord(id=\"patient_id\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Health Insights API Keys Using PowerShell\nDESCRIPTION: PowerShell command using Azure CLI to list the API keys for a Health Insights service resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging Per Call for send_to_all - Python\nDESCRIPTION: Shows how to activate detailed logging for a single method call even if the client wasn't initialized with logging enabled. Passes 'logging_enable=True' to the send_to_all method. Useful for on-demand diagnostics without globally enabling verbose logging. Requires a previously created WebPubSubServiceClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = service.send_to_all(..., logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Desktop Virtualization Management SDK in Python\nDESCRIPTION: Commands to install the Azure Desktop Virtualization Management client library and Azure Identity packages using pip, which are required to authenticate and interact with the Azure Virtual Desktop service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/desktopvirtualization/azure-mgmt-desktopvirtualization/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-desktopvirtualization\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Using ParamSpec and TypeVar to Preserve Callable Signatures in Python\nDESCRIPTION: Demonstrates forwarding function signatures using ParamSpec to preserve and propagate the parameters and return types of wrapped callables (e.g., decorators). Requires typing.TypeVar, typing.Callable, and typing.ParamSpec. The input is a function, and the decorator returns a function of identical signature; this technique ensures decorated functions retain precise type hints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar, Callable, ParamSpec\\n\\n\\nT = TypeVar(\\\"T\\\")\\nP = ParamSpec(\\\"P\\\")\\n\\ndef validate_table(func: Callable[P, T]) -> Callable[P, T]:\\n    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\\n        # validate table\\n        return func(*args, **kwargs)\\n    return inner\\n\\n\\n@validate_table\\ndef create_table(table_name: str, **kwargs: Any) -> None:\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests for Azure AI Projects\nDESCRIPTION: This command runs tests in a specific folder (connections) for the Azure AI Projects client library using pytest.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\\connections\n```\n\n----------------------------------------\n\nTITLE: Decommissioning and deleting Azure Digital Twins models\nDESCRIPTION: Demonstrates how to decommission and delete a model in Azure Digital Twins using the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Decommission a model\nservice_client.decommission_model(model_id)\n\n# Delete a model\nservice_client.delete_model(model_id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Digital Twin Component via Azure SDK - Python\nDESCRIPTION: Retrieves a specific component of a digital twin by name, printing its details. Requires an existing service_client, digital_twin_id, and component_name. Returns the component's properties as a dictionary and prints them to the console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nget_component = service_client.get_component(digital_twin_id, component_name)\nprint('Get Component:')\nprint(get_component)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Paloaltonetworksngfw Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate with the Azure Paloaltonetworksngfw Management Client using DefaultAzureCredential. It requires proper configuration of Azure environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/paloaltonetworks/azure-mgmt-paloaltonetworksngfw/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.paloaltonetworksngfw import PaloAltoNetworksNgfwMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PaloAltoNetworksNgfwMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Management Client and Authentication Packages\nDESCRIPTION: Commands to install the Azure Resource Management client library and Azure Identity for authentication purposes using pip. These packages are required to interact with Azure resources programmatically.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-resource/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-resource\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Automation and Identity Libraries (Bash)\nDESCRIPTION: Installs the required Azure SDK packages for Automation management (`azure-mgmt-automation`) and authentication (`azure-identity`) using the pip package manager. Requires Python 3.8+ and pip to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/automation/azure-mgmt-automation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-automation\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using DefaultAzureCredential\nDESCRIPTION: Python code snippet for authenticating with Azure using DefaultAzureCredential from the azure-identity package, which automatically tries different authentication methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.identity import DefaultAzureCredential\n\ncredentials = DefaultAzureCredential()\n```\n\n----------------------------------------\n\nTITLE: Creating TextTranslationClient with Custom Endpoint using Entra ID\nDESCRIPTION: Creates a TextTranslationClient instance for a custom endpoint using Microsoft Entra ID authentication. Only requires the DefaultAzureCredential and endpoint without region or resource_id.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncredential = DefaultAzureCredential()\nclient = TextTranslationClient(credential=credential, endpoint=endpoint)\n```\n\n----------------------------------------\n\nTITLE: Creating QueueService Client with OAuth Credentials (Python 2.X)\nDESCRIPTION: Illustrates how to create a QueueService client using OAuth credentials in version 2.X of the Azure Storage Queue SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.common import (\n    TokenCredential,\n)\nimport adal\n\ncontext = adal.AuthenticationContext(\n    str.format(\"{}/{}\", \"<active_directory_auth_endpoint>\", \"<active_directory_tenant_id>\"),\n    api_version=None, validate_authority=True)\n\ntoken = context.acquire_token_with_client_credentials(\n    \"https://storage.azure.com\",\n    \"<active_directory_application_id>\",\n    \"<active_directory_application_secret>\")[\"accessToken\"]\ntoken_credential = TokenCredential(token)\n\nservice = QueueService(\"<storage_account_name>\", token_credential=token_credential)\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Azure AI Inference API\nDESCRIPTION: Enables instrumentation for Azure AI Inference API to collect traces using the AIInferenceInstrumentor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference.tracing import AIInferenceInstrumentor\n\n# Instrument AI Inference API\nAIInferenceInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Dependencies Configuration\nDESCRIPTION: Specifies required package versions and local development dependencies for Azure SDK Python projects. Includes external packages aiohttp and python-dateutil, plus local references to azure-core, azure-identity, and azure-sdk-tools packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp==3.8.3\npython-dateutil==2.8.2\n-e ../../core/azure-core\n-e ../../identity/azure-identity\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Support Management and Identity Packages\nDESCRIPTION: This snippet shows how to install the required Azure packages using pip. It installs the azure-mgmt-support package for Support Management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/support/azure-mgmt-support/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-support\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Package in Development Mode\nDESCRIPTION: Command to install the current package in editable mode, allowing changes to be reflected immediately without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Debugging Type Checking with reveal_type and reveal_locals\nDESCRIPTION: Demonstrates the usage of reveal_type and reveal_locals debugging functions for investigating type inference in Python code. Shows type checker output for different variable types and function signatures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\na = [1]  #  `int` type is inferred\nreveal_type(a)\n\nc = [1, 'a']  # `int` and `str` are not \"duck type\" compatible, so type is narrowed to `object`\nreveal_type(c)\n\n\ndef hello_world(message: str) -> None:\n    print(f'Hello world! {message}')\n    reveal_locals()\n\n\nreveal_type(hello_world)\n```\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:2: note: Revealed type is \"builtins.list[builtins.int*]\"\nmain.py:5: note: Revealed type is \"builtins.list[builtins.object*]\"\nmain.py:9: note: Revealed local types are:\nmain.py:9: note:     message: builtins.str\nmain.py:11: note: Revealed type is \"def (message: builtins.str)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Defender EASM Package with pip\nDESCRIPTION: This command installs the Azure Defender EASM package using pip, the Python package installer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-defender-easm\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessTokenInfo and SupportsTokenInfo Protocol\nDESCRIPTION: Defines the AccessTokenInfo class for token information and SupportsTokenInfo protocol for OAuth token management. AccessTokenInfo contains token string, expiration time, and additional properties while SupportsTokenInfo defines the interface for token providers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass AccessTokenInfo:\n    \"\"\"Information about an OAuth access token.\n\n    This class is an alternative to `AccessToken` which provides additional\n    information about the token.\n    \"\"\"\n\n    token: str\n    \"\"\"The token string.\"\"\"\n    expires_on: int\n    \"\"\"The token's expiration time in Unix time.\"\"\"\n    token_type: str\n    \"\"\"The type of access token.\"\"\"\n    refresh_on: Optional[int]\n    \"\"\"Specifies the time, in Unix time, when the cached token should be proactively\n       refreshed. Optional.\"\"\"\n\n\nclass SupportsTokenInfo(Protocol, ContextManager[\"SupportsTokenInfo\"]):\n    \"\"\"Protocol for classes able to provide OAuth access tokens with additional properties.\"\"\"\n\n    def get_token_info(self, *scopes: str, options: Optional[TokenRequestOptions] = None) -> AccessTokenInfo:\n        \"\"\"Request an access token for `scopes`.\n\n        :param str scopes: The type of access needed.\n        :keyword options: A dictionary of options for the token request. Unknown options will be ignored.\n        :paramtype options: TokenRequestOptions\n\n        :rtype: AccessTokenInfo\n        :return: An AccessTokenInfo instance containing information about the token.\n        \"\"\"\n\n    def close(self) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Administration and Azure Identity Packages\nDESCRIPTION: Installs the required packages azure-keyvault-administration and azure-identity using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-administration azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library using Bash\nDESCRIPTION: Provides the `pip` command to install the `azure-identity` package. This library is necessary for authenticating the Schema Registry client using Azure Active Directory credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Purview Workflow Client with Username/Password\nDESCRIPTION: Example showing how to authenticate the Purview Workflow client using UsernamePasswordCredential. Requires environment variables for client ID, tenant ID, username and password.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.workflow import PurviewWorkflowClient\nfrom azure.identity import UsernamePasswordCredential\nusername = os.getenv(\"USERNAME\")\npassword = os.getenv(\"PASSWORD\")\nclient_id = os.getenv(\"AZURE_CLIENT_ID\")\ntenant_id = os.getenv(\"AZURE_TENANT_ID\")\ncredential = UsernamePasswordCredential(client_id=client_id, username=username, password=password, tenant_id=tenant_id)\nclient = PurviewWorkflowClient(endpoint='<endpoint>', credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Using Literal Types for Value Restrictions\nDESCRIPTION: Demonstrates using typing.Literal to restrict values to specific literals and create type-safe discriminated unions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n# from typing import Literal  Python >=3.8\nfrom typing_extensions import Literal\n\ndoc_type = Literal[\"prebuilt-receipt\"]\nallowed_content_types = Literal[\"application/json\", \"text/plain\", \"image/png\", \"image/jpeg\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages for Testing - Shell\nDESCRIPTION: Installs required Python packages specified in 'dev_requirements.txt' and the local SDK package into the active virtual environment. Dependencies: pip, dev_requirements.txt file, active virtual environment. Ensures all dependencies for testing are available.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npip install -r dev_requirements.txt .\n```\n\n----------------------------------------\n\nTITLE: Registering Sanitizers with the Test Proxy\nDESCRIPTION: Two examples showing how to register sanitizers with the test proxy. The first example demonstrates a simple string replacement sanitizer, while the second shows a more complex regex-based sanitizer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom devtools_testutils import add_general_string_sanitizer, test_proxy\n\n# autouse=True will trigger this fixture on each pytest run, even if it's not explicitly used by a test method\n@pytest.fixture(scope=\"session\", autouse=True)\ndef add_sanitizers(test_proxy):\n    # The default value for the environment variable should be the value you use in playback\n    vault_name = os.getenv(\"AZURE_KEYVAULT_NAME\", \"fake-vault\")\n    add_general_string_sanitizer(target=vault_name, value=\"fake-vault\")\n```\n\n----------------------------------------\n\nTITLE: Creating a User and Token in a Single Request - Python\nDESCRIPTION: Uses create_user_and_token to atomically create a user and issue a token in one request, reducing network overhead. Returns both the user and tokenresponse objects and prints their details. Requires valid CommunicationIdentityClient and appropriate scope selection. Useful for streamlining onboarding or session initiation flows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT])\nprint(\"User id:\" + user.properties['id'])\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n----------------------------------------\n\nTITLE: Adding Method to Get Topic Sender in Python\nDESCRIPTION: Introduced the `get_topic_sender` method in `ServiceBusClient` to obtain a `ServiceBusSender` instance specifically configured for sending messages to a designated topic.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusClient.get_topic_sender(topic_name=...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Key Vault Certificate Client\nDESCRIPTION: Demonstrates how to configure detailed DEBUG level logging for Azure Key Vault certificate operations using the standard Python logging library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = CertificateClient(\n    vault_url=\"https://my-key-vault.vault.azure.net/\",\n    credential=credential,\n    logging_enable=True\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Document Intelligence Python SDK\nDESCRIPTION: This command installs the Azure Document Intelligence client library for Python using pip. The --pre flag is used to include pre-release versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-documentintelligence --pre\n```\n\n----------------------------------------\n\nTITLE: Predicting with Trained LightGBM Binary Classification Model\nDESCRIPTION: Command to run prediction using a trained LightGBM model with the predict.conf configuration file. Training must be completed before running this prediction command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/batch_setup/light_gbm_examples/binary_classification/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"../../lightgbm\" config=predict.conf\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities with DateTime Properties in Python\nDESCRIPTION: Shows how to filter entities based on DateTime properties using the Azure Data Tables client library. This example filters on the CustomerSince field.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"CustomerSince eq datetime'2008-07-10T00:00:00Z'\"\ntable_client.query_entities(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Listing All Azure Purview Workflows\nDESCRIPTION: Complete example demonstrating how to authenticate and list all workflows in Azure Purview, including error handling for HTTP responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.workflow import PurviewWorkflowClient\nfrom azure.identity import UsernamePasswordCredential\nusername = os.getenv(\"USERNAME\")\npassword = os.getenv(\"PASSWORD\")\nclient_id = os.getenv(\"AZURE_CLIENT_ID\")\ntenant_id = os.getenv(\"AZURE_TENANT_ID\")\ncredential = UsernamePasswordCredential(client_id=client_id, username=username, password=password, tenant_id=tenant_id)\nclient = PurviewWorkflowClient(endpoint='<endpoint>', credential=credential)\ntry:\n    response = client.workflows.list()\n    for item in response:\n    print(item)\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e.response.json()))\n```\n\n----------------------------------------\n\nTITLE: Receiving and Peeking Messages - Service Bus v0.50 - Python\nDESCRIPTION: Demonstrates how receivers obtained in v0.50 use fetch_next for message retrieval and peek for inspecting messages non-destructively. Receivers should be used within a context manager. fetch_next accepts max_batch_size and timeout, while peek allows setting count and start_from. Inputs/outputs mirror message counts and batch retrieval.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith receiver:\n    received_messages = receiver.fetch_next(max_batch_size=10, timeout=10)\n    peeked_messages = receiver.peek(count=1, start_from=None)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AppComplianceAutomation Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip package manager. Installs both the AppComplianceAutomation management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcomplianceautomation/azure-mgmt-appcomplianceautomation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-appcomplianceautomation\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceUpdateClient in Python\nDESCRIPTION: Instantiates the `DeviceUpdateClient` using Azure credentials obtained via `DefaultAzureCredential` (which reads environment variables like AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET) and service details (endpoint and instance ID) also read from environment variables. This client object is required for all subsequent interactions with the Device Update service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetDevice/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nendpoint = os.environ[\"DEVICEUPDATE_ENDPOINT\"]\ninstance = os.environ[\"DEVICEUPDATE_INSTANCE_ID\"]\nclient = DeviceUpdateClient(credential=DefaultAzureCredential(), endpoint=endpoint, instance_id=instance)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Actions Management Client Library for Python\nDESCRIPTION: This snippet shows how to install the Azure Storage Actions Management Client Library and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storageactions/azure-mgmt-storageactions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-storageactions\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Individual Test Execution\nDESCRIPTION: Example of running a single test class independently using Python imports.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom KeyVaultSecrets import KeyVault\n\nKeyVault().Run()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Log Analytics Management Client and Azure Identity\nDESCRIPTION: Commands to install the required Python packages for using the Azure Log Analytics Management Client Library and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-mgmt-loganalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-loganalytics\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script with Test-Proxy Tool\nDESCRIPTION: Example demonstrating migration script execution using local test-proxy tool installation with InitialPush parameter\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# calling transition script against tool, given local clones of azure-sdk-for-java and azure-sdk-tools\ncd c:/src/azure-sdk-for-java/sdk/attestation\n<path-to-transition-script>/generate-assets-json.ps1 -InitialPush\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Docstrings in Python Azure SDK\nDESCRIPTION: Example of a comprehensive method docstring from azure-ai-formrecognizer, including parameter descriptions, return types, and usage example.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @distributed_trace\n    def begin_training(self, training_files_url, use_training_labels, **kwargs):\n        # type: (str, bool, Any) -> LROPoller[CustomFormModel]\n        \"\"\"Create and train a custom model.\n\n        The request must include a `training_files_url` parameter that is an\n        externally accessible Azure storage blob container URI (preferably a Shared Access Signature URI). Note that\n        a container URI (without SAS) is accepted only when the container is public. \n        See `SAS container details\n        <https://docs.microsoft.com/azure/cognitive-services/form-recognizer/build-training-data-set>`__\n        for more details.\n        Models are trained using documents that are of the following content type - 'application/pdf',\n        'image/jpeg', 'image/png', 'image/tiff', or 'image/bmp'. Other types of content in the container is ignored.\n\n        :param str training_files_url: An Azure Storage blob container's SAS URI. A container URI (without SAS)\n            can be used if the container is public. For more information on setting up a training data set, see:\n            https://docs.microsoft.com/azure/cognitive-services/form-recognizer/build-training-data-set\n        :param bool use_training_labels: Whether to train with labels or not. Corresponding labeled files must\n            exist in the blob container if set to `True`.\n        :keyword str prefix: A case-sensitive prefix string to filter documents in the source path for\n            training. For example, when using a Azure storage blob URI, use the prefix to restrict sub\n            folders for training.\n        :keyword include_subfolders: A flag to indicate if subfolders within the set of prefix folders\n            will also need to be included when searching for content to be preprocessed. Not supported if\n            training with labels.\n        :paramtype include_subfolders: bool\n        :keyword str model_name: An optional, user-defined name to associate with your model.\n        :keyword continuation_token: A continuation token to restart a poller from a saved state.\n        :paramtype continuation_token: str\n        :return: An instance of an LROPoller. Call `result()` on the poller\n            object to return a :class:`~azure.ai.formrecognizer.CustomFormModel`.\n        :rtype: ~azure.core.polling.LROPoller[~azure.ai.formrecognizer.CustomFormModel]\n        :raises ~azure.core.exceptions.HttpResponseError:\n            Note that if the training fails, the exception is raised, but a model with an\n            \"invalid\" status is still created. You can delete this model by calling :func:`~delete_model()`\n\n        .. versionadded:: v2.1\n            The *model_name* keyword argument\n\n        .. admonition:: Example:\n\n            .. literalinclude:: ../samples/sample_train_model_without_labels.py\n                :start-after: [START training]\n                :end-before: [END training]\n                :language: python\n                :dedent: 8\n                :caption: Training a model (without labels) with your custom forms.\n        \"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Form Recognizer Performance Tests\nDESCRIPTION: Environment variables needed to configure access to live Form Recognizer service resources for performance testing. This includes the service endpoint, API key, and SAS URL for the training data container.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFORMRECOGNIZER_TEST_ENDPOINT=<form recognizer service endpoint>\nFORMRECOGNIZER_TEST_API_KEY=<form recognizer API Key>\nFORMRECOGNIZER_TRAINING_DATA_CONTAINER_SAS_URL=<SAS url for container with training data>\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Azure SDK Testing (pip)\nDESCRIPTION: Lists Python package dependencies for the Azure SDK for Python project, managed via pip. It includes asynchronous libraries (`trio`, `aiohttp`), HTTP client (`requests`), testing (`pytest-trio`), specific Azure libraries (`azure-storage-blob`, `azure-data-tables`, `azure-identity`), OpenTelemetry packages, and local editable installs (`-e`) for SDK tools and a core test server. Note the conditional version requirement for `aiohttp` based on the Python implementation (PyPy).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\ntrio\nrequests\n# Aiohttp 3.8.6 triggers https://github.com/aio-libs/aiohttp/issues/4581 on pypy for some reasons\naiohttp<3.8.6 ; platform_python_implementation == \"PyPy\"\naiohttp ; platform_python_implementation != \"PyPy\"\n-e ../../../tools/azure-sdk-tools\n-e tests/testserver_tests/coretestserver\npytest-trio\nazure-storage-blob\nazure-data-tables\nopentelemetry-sdk~=1.26\nopentelemetry-instrumentation-requests>=0.50b0\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Schema Registry with JSON Encoder Extras using Bash\nDESCRIPTION: Shows how to install the `azure-schemaregistry` package along with the optional `jsonencoder` extras using `pip`. These extras are required to use the built-in `jsonschema` validators with the JSON Schema Encoder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-schemaregistry[jsonencoder]\n```\n\n----------------------------------------\n\nTITLE: Getting Purview Access Keys\nDESCRIPTION: Example of retrieving access keys using PurviewAccountClient with DefaultAzureCredential authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.administration.account import PurviewAccountClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewAccountClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\nresponse = client.accounts.get_access_keys()\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Parameters in ARM Template\nDESCRIPTION: This JSON snippet from a test-resources.json file defines parameters for the X509 certificate created in the pre-resource script.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"_comment\": \"Other required parameters would go here... (this is not part of the actual test-resources.json)\",\n    \"ConfidentialLedgerPrincipalPEM\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"The certificate to configure as a certBasedSecurityPrincipal.\"\n      }\n    },\n    \"ConfidentialLedgerPrincipalPEMPK\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"The certificate to configure as a certBasedSecurityPrincipal.\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Resource Health Management Client in Python\nDESCRIPTION: Code to authenticate with the Azure Resource Health Management client using DefaultAzureCredential. It demonstrates how to initialize the client with proper credentials and subscription ID from environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourcehealth/azure-mgmt-resourcehealth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resourcehealth import ResourceHealthMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceHealthMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Removing Metadata Operations from Azure Monitor Query Client\nDESCRIPTION: Directive to remove security definitions from the swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $\n  transform: >\n    delete $.securityDefinitions\n```\n\n----------------------------------------\n\nTITLE: Deploying Update via Device Management Client in Python\nDESCRIPTION: This snippet uses the initialized DeviceUpdateClient instance to initiate the deployment. It calls the `create_or_update_deployment` method, passing the target device group ID, the generated deployment ID, and the deployment object containing update details. The response from the service is captured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeployUpdate/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n``` python\nresponse = client.device_management.create_or_update_deployment(group, deployment_id, deployment)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure FarmBeats Package with pip\nDESCRIPTION: Command to install the Azure FarmBeats client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-agrifood-farming\n```\n\n----------------------------------------\n\nTITLE: Initializing DataMapClient (New)\nDESCRIPTION: Example showing how to initialize the new DataMapClient using DefaultAzureCredential in azure-purview-datamap.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/MigrationGuide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.datamap import DataMapClient\nfrom azure.identity import DefaultAzureCredential\ncredential = DefaultAzureCredential()\nclient = DataMapClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Certificates and Azure Identity packages\nDESCRIPTION: This snippet shows how to install the required packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-certificates azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining the MatchConditions Enum in Python\nDESCRIPTION: Defines a standard Python `Enum` called `MatchConditions` used within the Azure SDKs to specify conditions for operations, such as conditional requests based on ETag matching (e.g., If-Match, If-None-Match). It relies on the standard `enum` module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MatchConditions(Enum):\n    Unconditionally = 1\n    IfNotModified = 2\n    IfModified = 3\n    IfPresent = 4\n    IfMissing = 5\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK Tools in Python\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project, combining local relative paths (for development tools and submodules) with external packages (like OpenTelemetry and requests). It ensures correct versions using pinning (such as opentelemetry-sdk<2.0.0,>=1.12.0), helping to avoid compatibility issues. The file is intended for use with pip, typically as a requirements.txt file, and should be used within a Python virtual environment to synchronize the environment for development or CI runs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../azure-core\nopentelemetry-sdk<2.0.0,>=1.12.0\nopentelemetry-instrumentation-requests>=0.32b0\nrequests\nazure-storage-blob\n../../servicebus/azure-servicebus\n../../eventhub/azure-eventhub\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Functions for Thread Execution - JSON\nDESCRIPTION: This snippet defines a list of structured tool functions (such as get_user_info, convert_temperature, longest_word_in_sentences, send_email, process_records, and others) including their names, descriptions, and parameter schemas. Each tool details the required fields, types, and descriptions to enforce validation and provide self-documenting integration for system agents. Intended for use within thread-based invocation frameworks where strict API contracts and JSON argument payloads are required. Dependencies: None beyond JSON parsing; all fields must match the described schema.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/fetch_current_datetime_and_weather_stream_response.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"get_user_info\",\n        \"description\": \"Retrieves user information based on user ID.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"user_id\": {\n              \"type\": \"integer\",\n              \"description\": \"ID of the user.\"\n            }\n          },\n          \"required\": [\"user_id\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"convert_temperature\",\n        \"description\": \"Converts temperature from Celsius to Fahrenheit.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"celsius\": {\n              \"type\": \"number\",\n              \"description\": \"Temperature in Celsius.\"\n            }\n          },\n          \"required\": [\"celsius\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"longest_word_in_sentences\",\n        \"description\": \"Finds the longest word in each sentence.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"sentences\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"A list of sentences.\"\n            }\n          },\n          \"required\": [\"sentences\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"toggle_flag\",\n        \"description\": \"Toggles a boolean flag.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"flag\": {\n              \"type\": \"boolean\",\n              \"description\": \"The flag to toggle.\"\n            }\n          },\n          \"required\": [\"flag\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"send_email\",\n        \"description\": \"Sends an email with the specified subject and body to the recipient.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"recipient\": {\n              \"type\": \"string\",\n              \"description\": \"Email address of the recipient.\"\n            },\n            \"subject\": {\n              \"type\": \"string\",\n              \"description\": \"Subject of the email.\"\n            },\n            \"body\": {\n              \"type\": \"string\",\n              \"description\": \"Body content of the email.\"\n            }\n          },\n          \"required\": [\"recipient\", \"subject\", \"body\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"process_records\",\n        \"description\": \"Process a list of records, where each record is a dictionary with string keys and integer values.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"records\": {\n              \"type\": \"array\",\n              \"items\": { \"type\": \"object\" },\n              \"description\": \"A list containing dictionaries that map strings to integers.\"\n            }\n          },\n          \"required\": [\"records\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"merge_dicts\",\n        \"description\": \"Merges two dictionaries.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"dict1\": {\n              \"type\": \"object\",\n              \"description\": \"First dictionary.\"\n            },\n            \"dict2\": {\n              \"type\": \"object\",\n              \"description\": \"Second dictionary.\"\n            }\n          },\n          \"required\": [\"dict1\", \"dict2\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"calculate_sum\",\n        \"description\": \"Calculates the sum of two integers.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"a\": {\n              \"type\": \"integer\",\n              \"description\": \"First integer.\"\n            },\n            \"b\": {\n              \"type\": \"integer\",\n              \"description\": \"Second integer.\"\n            }\n          },\n          \"required\": [\"a\", \"b\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"fetch_weather\",\n        \"description\": \"Fetches the weather information for the specified location.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The location to fetch weather for.\"\n            }\n          },\n          \"required\": [\"location\"]\n        },\n        \"strict\": false\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"fetch_current_datetime\",\n        \"description\": \"Get the current time as a JSON string, optionally formatted.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"format\": {\n              \"type\": [\"string\", \"null\"],\n              \"description\": \"The format in which to return the current time. Defaults to None, which uses a standard format.\"\n            }\n          },\n          \"required\": []\n        },\n        \"strict\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Raising Exception for Oversized Messages in Python\nDESCRIPTION: Both `BatchMessage.add()` and `ServiceBusSender.send()` (now `send_messages`) will now raise a `MessageContentTooLarge` exception if an attempt is made to add or send a message that exceeds the service's size limits.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nBatchMessage.add()\nServiceBusSender.send_messages()\n# Raise MessageContentTooLarge on oversized content\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Grid Publisher Client\nDESCRIPTION: Python code showing initialization of EventGridPublisherClient for both Namespace and Basic implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Event Grid Namespace client\nclient = EventGridPublisherClient(endpoint, credential, namespace_topic=YOUR_TOPIC_NAME)\n\n# Event Grid Basic Client\nclient = EventGridPublisherClient(endpoint, credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Call Automation SDK using pip\nDESCRIPTION: Installs the Azure Communication Service Call Automation SDK package for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-callautomation\n```\n\n----------------------------------------\n\nTITLE: Sending Received Messages via ServiceBusSender in Python\nDESCRIPTION: Enabled the ability to send messages that have been previously received using the `ServiceBusSender.send_messages` method. This facilitates message forwarding or reprocessing scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusSender.send_messages\n```\n\n----------------------------------------\n\nTITLE: Analyzing Receipts with DocumentAnalysisClient in Azure SDK for Python 3.2.x\nDESCRIPTION: This code shows how to analyze receipts using the DocumentAnalysisClient in version 3.2.x of the Azure SDK. It uses the prebuilt-receipt model to extract similar receipt information but with the updated API structure and return types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-receipt\", document=f, locale=\"en-US\"\n    )\nreceipts = poller.result()\n\nfor idx, receipt in enumerate(receipts.documents):\n    print(\"--------Analysis of receipt #{}--------\".format(idx + 1))\n    print(\"Receipt type: {}\".format(receipt.doc_type or \"N/A\"))\n    merchant_name = receipt.fields.get(\"MerchantName\")\n    if merchant_name:\n        print(\n            \"Merchant Name: {} has confidence: {}\".format(\n                merchant_name.value, merchant_name.confidence\n            )\n        )\n    transaction_date = receipt.fields.get(\"TransactionDate\")\n    if transaction_date:\n        print(\n            \"Transaction Date: {} has confidence: {}\".format(\n                transaction_date.value, transaction_date.confidence\n            )\n        )\n    if receipt.fields.get(\"Items\"):\n        print(\"Receipt items:\")\n        for idx, item in enumerate(receipt.fields.get(\"Items\").value):\n            print(\"...Item #{}\".format(idx + 1))\n            item_description = item.value.get(\"Description\")\n            if item_description:\n                print(\n                    \"......Item Description: {} has confidence: {}\".format(\n                        item_description.value, item_description.confidence\n                    )\n                )\n            item_quantity = item.value.get(\"Quantity\")\n            if item_quantity:\n                print(\n                    \"......Item Quantity: {} has confidence: {}\".format(\n                        item_quantity.value, item_quantity.confidence\n                    )\n                )\n            item_price = item.value.get(\"Price\")\n            if item_price:\n                print(\n                    \"......Individual Item Price: {} has confidence: {}\".format(\n                        item_price.value, item_price.confidence\n                    )\n                )\n            item_total_price = item.value.get(\"TotalPrice\")\n            if item_total_price:\n                print(\n                    \"......Total Item Price: {} has confidence: {}\".format(\n                        item_total_price.value, item_total_price.confidence\n                    )\n                )\n    subtotal = receipt.fields.get(\"Subtotal\")\n    if subtotal:\n        print(\n            \"Subtotal: {} has confidence: {}\".format(\n                subtotal.value, subtotal.confidence\n            )\n        )\n    tax = receipt.fields.get(\"TotalTax\")\n    if tax:\n        print(\"Total tax: {} has confidence: {}\".format(tax.value, tax.confidence))\n    tip = receipt.fields.get(\"Tip\")\n    if tip:\n        print(\"Tip: {} has confidence: {}\".format(tip.value, tip.confidence))\n    total = receipt.fields.get(\"Total\")\n    if total:\n        print(\"Total: {} has confidence: {}\".format(total.value, total.confidence))\n    print(\"--------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Load Testing Administration Client\nDESCRIPTION: Example showing how to create LoadTestAdministrationClient using DefaultAzureCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.developer.loadtesting import LoadTestAdministrationClient\n\n# for managing authentication and authorization\n# can be installed from pypi, follow: https://pypi.org/project/azure-identity/\n# using DefaultAzureCredentials, read more at: https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python\nfrom azure.identity import DefaultAzureCredential\n\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Dependency for Azure SDK Tools\nDESCRIPTION: This line specifies a local development dependency for the Azure SDK for Python project. It uses the -e flag to indicate an editable install, pointing to the azure-sdk-tools package located in a relative directory three levels up from the current location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-translation-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Trimming Key Prefixes from Configuration Keys - Azure App Configuration Python Provider - Python\nDESCRIPTION: Demonstrates providing 'trim_prefixes' to the provider to remove specified path segments (e.g., '/application/') from key names. Dependencies: 'azure.appconfiguration.provider', 'azure.identity'. Enables simplified key access after trimming (e.g., config['message']).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load\nfrom azure.identity import DefaultAzureCredential\n\ntrim_prefixes={\"/application/\"}\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), trim_prefixes=trim_prefixes)\nprint(config[\"message\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jaeger Tracing\nDESCRIPTION: Steps to run the Jaeger tracing sample. Starts Jaeger all-in-one Docker container, installs the Jaeger exporter, and runs the sample that sends traces to both Jaeger and Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -p 16686:16686 -p 6831:6831/udp jaegertracing/all-in-one\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-exporter-jaeger\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_jaeger.py\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Azure Service Bus Queue via Batch Call (Python)\nDESCRIPTION: This snippet shows how to receive a limited number of messages from an Azure Service Bus queue using the `receive_messages()` method. It initializes the client and receiver, then calls `receive_messages()` specifying `max_message_count` and `max_wait_time`. The method returns a list of messages, unlike the streaming approach. It also contrasts this with `peek_messages()` which doesn't lock messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.servicebus import ServiceBusClient\nfrom azure.identity import DefaultAzureCredential\n\nimport os\nfully_qualified_namespace = os.environ['SERVICEBUS_FULLY_QUALIFIED_NAMESPACE']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\ncredential = DefaultAzureCredential()\nwith ServiceBusClient(fully_qualified_namespace, credential) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        received_message_array = receiver.receive_messages(max_wait_time=10)  # try to receive a single message within 10 seconds\n        if received_message_array:\n            print(str(received_message_array[0]))\n\n    with client.get_queue_receiver(queue_name) as receiver:\n        received_message_array = receiver.receive_messages(max_message_count=5, max_wait_time=10)  # try to receive maximum 5 messages in a batch within 10 seconds\n        for message in received_message_array:\n            print(str(message))\n```\n```\n\n----------------------------------------\n\nTITLE: Python SDK Version Updates - Authentication Changes\nDESCRIPTION: Code changes related to credential system revamp in version 1.0.0b1. Shows migration from azure.common.credentials to azure-identity based authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Old way:\nfrom azure.common.credentials import ServicePrincipalCredentials\nclient = MyClient(credentials, subscription_id)\n\n# New way:\nfrom azure.identity import DefaultAzureCredential\nclient = MyClient(credential=DefaultAzureCredential(), subscription_id=subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Red Hat Openshift Management SDK in Python\nDESCRIPTION: Python code sample showing how to authenticate with the Azure Red Hat Openshift Management SDK using environment variables and DefaultAzureCredential. The client is initialized with user credentials and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redhatopenshift/azure-mgmt-redhatopenshift/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.redhatopenshift import AzureRedHatOpenShiftClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureRedHatOpenShiftClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Renaming Create Session 'maxLeaseTimeMinutes' to 'leaseTimeMinutes' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML targeting the 'maxLeaseTimeMinutes' property within the 'create_session_settings' definition. It renames the client-side representation of this property to 'leaseTimeMinutes' in the generated Python code for session creation settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.create_session_settings.properties.maxLeaseTimeMinutes'\n    transform: >\n        $[\"x-ms-client-name\"] = \"leaseTimeMinutes\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Mixed Reality Authentication SDK with pip\nDESCRIPTION: Installs the Azure Mixed Reality Authentication SDK package using pip. The --pre flag indicates this is a preview/prerelease version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-mixedreality-authentication\n```\n\n----------------------------------------\n\nTITLE: Initializing QueueServiceClient in Python\nDESCRIPTION: Create a QueueServiceClient instance using the storage account's queue service endpoint URL and a credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueServiceClient\n\nservice = QueueServiceClient(account_url=\"https://<my-storage-account-name>.queue.core.windows.net/\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Setting Azure App Configuration Connection String Environment Variable (Bash/Cmd)\nDESCRIPTION: Sets the required environment variable `AZURE_APP_CONFIG_CONNECTION_STRING` to connect to a pre-configured Azure App Configuration service. This variable is necessary for the performance tests to access live resources. Replace `<app config connection string>` with the actual connection string.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_APP_CONFIG_CONNECTION_STRING=<app config connection string>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for T2 Performance Test Runs\nDESCRIPTION: Commands to install the required dependencies for running T2 performance tests, including the dev requirements and the local package in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-datalake> pip install -r dev_requirements.txt\n(env) ~/azure-storage-file-datalake> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Using AzureOperationPoller without Result in Python\nDESCRIPTION: Example of how to use an asynchronous operation that returns an AzureOperationPoller without expecting a result. This pattern shows creating an asynchronous operation and then simply waiting for it to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/exceptions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync_poller = client.network_security_groups.create_or_update(myparameters)\nasync_poller.wait()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Purview Sharing SDK Generation\nDESCRIPTION: Main configuration for generating the Azure Purview Sharing Python SDK client. Specifies the input swagger file, output settings, package details, security configuration, and operation name mappings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/40a953243ea428918de6e63758e853b7a24aa59a/specification/purview/data-plane/Azure.Analytics.Purview.Share/preview/2023-05-30-preview/share.json\noutput-folder: ../\nnamespace: azure.purview.sharing\npackage-name: azure-purview-sharing\nlicense-header: MICROSOFT_MIT_NO_VERSION\ntitle: Purview Sharing Client\npackage-version: 1.0.0b1\npackage-mode: dataplane\npackage-pprint-name: Azure Purview Sharing\nsecurity: AADToken\nsecurity-scopes: https://purview.azure.net/.default\nmodelerfour:\n  lenient-model-deduplication: true\nonly-path-params-positional: true\ndirective: \n  - rename-operation: [ from:\"SentShares_Get\", to:\"SentShares_GetSentShare\", from:\"SentShares_Create\", to:\"SentShares_CreateOrReplaceSentShare\", from:\"SentShares_Delete\", to:\"SentShares_DeleteSentShare\", from:\"SentShares_List\", to:\"SentShares_GetAllSentShares\", from:\"SentShares_GetInvitation\", to:\"SentShares_GetSentShareInvitation\", from:\"SentShares_CreateInvitation\", to:\"SentShares_CreateSentShareInvitation\", from:\"SentShares_DeleteInvitation\", to:\"SentShares_DeleteSentShareInvitation\", from:\"SentShares_ListInvitations\", to:\"SentShares_GetAllSentShareInvitations\", from:\"SentShares_NotifyUserInvitation\", to:\"SentShares_NotifyUserSentShareInvitation\", from:\"ReceivedShares_Get\", to:\"ReceivedShares_GetReceivedShare\", from:\"ReceivedShares_Create\", to:\"ReceivedShares_CreateOrReplaceReceivedShare\", from:\"ReceivedShares_Delete\", to:\"ReceivedShares_DeleteReceivedShare\", from:\"ReceivedShares_ListAttached\", to:\"ReceivedShares_GetAllAttachedReceivedShares\", from:\"ReceivedShares_ListDetached\", to:\"ReceivedShares_GetAllDetachedReceivedShares\", from:\"ShareResources_List\", to:\"ShareResources_GetAllShareResources\", ]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Personalizer Python Package\nDESCRIPTION: Command to install the Azure Personalizer client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-personalizer\n```\n\n----------------------------------------\n\nTITLE: Declaring Azure Namespace Package\nDESCRIPTION: Content for the azure/__init__.py file to declare it as a namespace package using pkgutil.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__path__ = __import__('pkgutil').extend_path(__path__, __name__)\n```\n\n----------------------------------------\n\nTITLE: Using Recorded Variables in Python Test\nDESCRIPTION: Example of how to use recorded variables in a test method. The method accepts **kwargs and returns a dictionary of variables to be recorded.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import AzureRecordedTestCase, recorded_by_proxy\n\nclass TestExample(AzureRecordedTestCase):\n\n    @recorded_by_proxy\n    def test_example(self, **kwargs):\n        # In live mode, variables is an empty dictionary\n        # In playback mode, the value of variables is {\"table_name\": \"random-value\"}\n        variables = kwargs.pop(\"variables\", {})\n \n        # To fetch variable values, use the `setdefault` method to look for a key (\"table_name\")\n        # and set a real value for that key if it's not present (\"random-value\")\n        table_name = variables.setdefault(\"table_name\", \"random-value\")\n\n        # use variables[\"table_name\"] when using the table name throughout the test\n        ...\n\n        # return the variables at the end of the test to record them\n        return variables\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies using pip requirements format\nDESCRIPTION: This snippet lists Python package dependencies in a format compatible with pip install -r. It includes an editable local package (`azure-sdk-tools`), relative path dependencies (`azure-core`, `azure-eventhub`), a version-pinned dependency (`azure-data-tables`), and an unpinned dependency (`aiohttp`). This file is crucial for setting up the correct development or runtime environment for the associated Azure SDK component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-mgmt-eventhub/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\\n../../core/azure-core\\n../azure-eventhub\\nazure-data-tables==12.2.0\\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Listing Repository Names\nDESCRIPTION: Iterate through all repositories in the registry and print their names\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Iterate through all the repositories\n    for repository_name in client.list_repository_names():\n        print(repository_name)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -OutFile in PowerShell\nDESCRIPTION: Defines the optional 'OutFile' switch parameter. When present, it saves the test environment settings (potentially including secrets) into a '.env' file located alongside the test resources template (e.g., 'test-resources.json.env' or 'test-resources.bicep.env'). The file contents are protected using DPAPI (Windows only) and scoped to the service directory. It's not required, is named, defaults to $false, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Front Door Service Client Library for Python\nDESCRIPTION: Install the required packages for using the Azure Front Door Service Client Library. This includes the main library and the authentication package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-frontdoor\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing RecoveryServicesClient with Azure Identity (Python)\nDESCRIPTION: Demonstrates how to authenticate with Azure using environment variables and initialize the RecoveryServicesClient in Python. Dependencies required are 'azure-identity' for token credentials, 'azure-mgmt-recoveryservices' for the client, and 'os' for accessing environment variables. The code retrieves the Azure subscription ID from the 'AZURE_SUBSCRIPTION_ID' environment variable, creates a DefaultAzureCredential object, and constructs a RecoveryServicesClient for accessing Recovery Services resources. Input is handled through environment variables; the output is an authenticated RecoveryServicesClient instance. Ensure that all relevant Azure environment variables are set before running this code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.recoveryservices import RecoveryServicesClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RecoveryServicesClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install the development dependencies listed in dev_requirements.txt, which includes other Azure SDK packages and testing tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Representing Tool Execution Errors as JSON Objects in Python SDK\nDESCRIPTION: This JSON structure represents the error format returned by tool execution methods (`FunctionTool.execute`, `AsyncFunctionTool.execute`, `ToolSet.execute_tool_calls`, `AsyncToolSet.execute_tool_calls`) within the `azure-ai-project` Python SDK (version 1.0.0b9+). Instead of raising exceptions, these methods now return or include this JSON object with an `error` key containing the error message when a failure occurs during tool execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{error: [message]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bus Client with uAMQP Transport\nDESCRIPTION: Example showing how to initialize ServiceBusClient with uAMQP transport enabled using connection string authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus import ServiceBusClient\nconnection_str = '<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>'\nqueue_name = '<< NAME OF THE QUEUE >>'\nclient = ServiceBusClient.from_connection_string(\n    connection_str, uamqp_transport=True\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Date Formats to String via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive modifies the `Start` and `Expiry` properties within the `AccessPolicy` definition in the Swagger document. It changes their format to `str` to handle potential precision issues with Python's native date/time types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.AccessPolicy.properties\n  transform: >\n    $.Start.format = \"str\";\n    $.Expiry.format = \"str\";\n```\n\n----------------------------------------\n\nTITLE: Handling Lock Renewal Failures with AutoLockRenew in Python\nDESCRIPTION: Introduced an `on_lock_renew_failure` parameter to `AutoLockRenew.register`. This parameter accepts a callback function that is invoked when a message lock is lost unintentionally (e.g., due to connection issues, not explicit settling or timeout).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nAutoLockRenew.register(on_lock_renew_failure=callback)\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Keys for Form Recognizer Resource - Bash\nDESCRIPTION: Retrieves the API keys for a Form Recognizer resource using Azure CLI. The command returns a list of access keys used for authenticating client SDK requests. Replace placeholders with the actual resource specifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SchemaRegistry Tests\nDESCRIPTION: Environment variables required to connect to a live SchemaRegistry instance for testing, including the fully qualified namespace and schema group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE=<the connection string of a Schema Registry.>\nSCHEMARYREGISTRY_GROUP=<a schema group in a Schema Registry.>\n```\n\n----------------------------------------\n\nTITLE: Installing Performance Test Dependencies\nDESCRIPTION: Commands for installing required packages and development dependencies in a Python virtual environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventgrid> pip install -r dev_requirements.txt\n(env) ~/azure-eventgrid> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Translating Text to Multiple Languages\nDESCRIPTION: Demonstrates how to translate text into multiple target languages in a single request with error handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    to_language = [\"cs\", \"es\", \"de\"]\n    input_text_elements = [\"This is a test\"]\n\n    response = text_translator.translate(body=input_text_elements, to_language=to_language)\n    translation = response[0] if response else None\n\n    if translation:\n        detected_language = translation.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Running Azure Identity Managed Identity Live Tests with Pytest\nDESCRIPTION: Executes the Python tests using the `pytest` command, targeting specifically the managed identity live tests. The `-sv` flags provide verbose output and show local variables on failures, while `-k managed_identity_live` filters tests by name. Requires Python 3.7+, pytest installed, and environment variables set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/azure_arc.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npytest -sv -k managed_identity_live\n```\n\n----------------------------------------\n\nTITLE: Implementing get_credential function for live tests with DefaultAzureCredential\nDESCRIPTION: Implementation of the get_credential function for mgmt_settings_real.py that returns a DefaultAzureCredential for live test authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_credential(**kwargs):\n    from azure.identity import DefaultAzureCredential\n    return DefaultAzureCredential()\n```\n\n----------------------------------------\n\nTITLE: Querying and Creating DataFrame for Tickets in Python\nDESCRIPTION: This snippet demonstrates querying for tickets and creating a DataFrame with the results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = f\"\"\"\nSELECT * FROM digitaltwins t where IS_OF_MODEL('dtmi:mymodels:ticket;1') and t.state='open'\n\"\"\"\nquery_result = service_client.query_twins(query_expression)\navailable_tickets_df = pd.DataFrame([[i['$dtId'],i['event_title'],i['state']] for i in query_result],\n                                   columns = ['$dtId','event_title','state'])\navailable_tickets_df\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2023-08-01-preview\nDESCRIPTION: Configuration settings for the v2023-08-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, mfe, and workspaceRP along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2023-08-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2023-08-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2023-08-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2023-08-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2023-08-01-preview/mfe.json\n  - Microsoft.MachineLearningServices/preview/2023-08-01-preview/workspaceRP.json\noutput-folder: $(python-sdks-folder)/v2023_08_01_preview\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SAS Token\nDESCRIPTION: Example of creating a MapsRenderClient using AzureSASCredential with a SAS token.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureSASCredential\nfrom azure.maps.render import MapsRenderClient\n\ncredential = AzureSASCredential(os.environ.get(\"AZURE_SAS_TOKEN\"))\n\nrender_client = MapsRenderClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Request/Response Hooks to Credentials (Python)\nDESCRIPTION: Introduced `CustomHookPolicy` allowing credentials to be initialized with `raw_request_hook` and `raw_response_hook` keyword arguments. These arguments accept callback functions to inspect or modify the raw `PipelineRequest` or `PipelineResponse` respectively.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nraw_request_hook\n```\n\nLANGUAGE: Python\nCODE:\n```\nraw_response_hook\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Bricks Management and Identity Libraries using pip (Bash)\nDESCRIPTION: Installs the required Python packages `azure-mgmt-databricks` and `azure-identity` using the pip package manager. These packages are necessary for interacting with Azure Databricks management APIs and handling authentication, respectively. Requires pip to be installed and configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databricks/azure-mgmt-databricks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-databricks\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Keywords\nDESCRIPTION: Commands showing how to run specific tests using keywords to filter test cases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pytest tests -k <keyword>\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pytest <test_file.py> -k <keyword>\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Identity using Azure CLI in Shell\nDESCRIPTION: This shell snippet creates an Azure Managed Identity within an existing resource group by using the Azure CLI. This identity is later used to assign permissions and enable secure resource access. Parameters, RESOURCE_GROUP and MANAGED_IDENTITY_NAME, must reference valid Azure resources. Azure CLI authentication and appropriate role permissions are required. The command produces a new managed identity object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naz identity create -g $RESOURCE_GROUP -n $MANAGED_IDENTITY_NAME\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Blob Package with pip - Bash\nDESCRIPTION: Demonstrates how to install the azure-storage-blob Python package using the pip package manager. The installation step is required before using any of the Azure Storage Blobs Python APIs. No parameters are needed and the command should be run in the terminal as the user who will run subsequent Python scripts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-blob\n```\n\n----------------------------------------\n\nTITLE: Constraining TypeVar with Bound Types in Python\nDESCRIPTION: Shows how to restrict TypeVar usage to specific types or subtypes using the 'bound' keyword argument. This ensures that generic types or functions are limited to a hierarchy or specific base class (in this case, str or subtypes). Requires typing.TypeVar; output TypeVar 'S' is limited to str subtypes, providing additional static type guarantees.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar\\n\\nS = TypeVar(\\\"S\\\", bound=str)  # limited to str or any subtype of str\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Render Python Package\nDESCRIPTION: Command to install the Azure Maps Render client library for Python using pip package manager. Uses the --pre flag to include pre-release versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-render --pre\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Communication Messages SDK using pip (Bash)\nDESCRIPTION: This command uses pip, the Python package installer, to install the `azure-communication-messages` library. This package is necessary to interact with Azure Communication Services for Advanced Messaging from a Python application. Ensure Python 3.8+ and pip are installed and configured in your environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-messages/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-communication-messages\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity via pip - Python\nDESCRIPTION: Installs the latest version of the azure-identity package from the Azure SDK public PyPI feed using pip. This command must be executed in a terminal with Python and pip already installed. The -i flag specifies a custom package index URL for Azure's official package source. Possible limitations include network connectivity and access to the custom index, and the Python interpreter should be version 3.8 or 3.10 as per the test matrix.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/vscode-live/vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install azure-identity -i https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python%40Local/pypi/simple/\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Batch Python SDK via pip\nDESCRIPTION: This command uses pip, the Python package installer, to install the `azure-batch` client library. This library is required to interact with the Azure Batch Service from Python applications as described in the setup instructions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/batch/azure-batch/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-batch\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Compute Management Client\nDESCRIPTION: Example showing how to authenticate with Azure using DefaultAzureCredential and create a ComputeManagementClient instance. Requires environment variables for Azure credentials and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.compute import ComputeManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ComputeManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Modifying Exception Import Paths in Python\nDESCRIPTION: Exception classes should now be imported directly from the `azure.servicebus.exceptions` module instead of the top-level `azure.servicebus` module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\n# Old:\n# from azure.servicebus import ServiceBusError\n\n# New:\nfrom azure.servicebus.exceptions import ServiceBusError\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages Asynchronously from Azure Queue\nDESCRIPTION: Asynchronously retrieves and processes messages from an Azure Storage Queue using async iteration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue.aio import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages()\n\nasync for message in response:\n    print(message.content)\n    await queue.delete_message(message)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Keys Python SDK\nDESCRIPTION: Example of installing the Azure Key Vault Keys Python SDK using pip. The specific version numbers mentioned in the release notes can be used to install particular versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install azure-keyvault-keys==4.11.0b1\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Commerce Client using DefaultAzureCredential\nDESCRIPTION: Python code snippet that demonstrates how to authenticate with the Azure Commerce service using DefaultAzureCredential. This requires environment variables for client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/commerce/azure-mgmt-commerce/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.commerce import UsageManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = UsageManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Required Environment Variables for Azure AI Inference Tests (Bash)\nDESCRIPTION: Commands to set required environment variables for running Azure AI Inference tests. These variables are not used but must be defined with any value.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset AI_TENANT_ID=not-used\nset AI_CLIENT_ID=not-used\nset AI_CLIENT_SECRET=not-used\n```\n\n----------------------------------------\n\nTITLE: Stopping a Rendering Session in Azure Remote Rendering with Python\nDESCRIPTION: This snippet shows how to stop a running rendering session to avoid incurring unnecessary costs. It uses the stop_rendering_session method with the session ID to terminate the session.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    client.stop_rendering_session(session_id)\n    print(\"session with id:\", session_id, \"stopped\")\n```\n\n----------------------------------------\n\nTITLE: Anomaly Detection Helper Functions in Python\nDESCRIPTION: Defines functions to identify anomalies using Tukey's fences method, calculating outlier ranges and updating the DataFrame with anomaly indicators.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef outlier_range(data_column):\n    sorted(data_column)\n    Q1, Q3 = np.percentile(data_column , [10,90])\n    IQR = Q3 - Q1\n    lower_bound = Q1 - (1.5 * IQR)\n    upper_bound = Q3 + (1.5 * IQR)\n    return lower_bound, upper_bound\n\ndef outlier_update_data_frame(df):\n    lower_bound, upper_bound = outlier_range(df['Residual'])\n\n    df.loc[((df['Residual'] < lower_bound) | (df['Residual'] > upper_bound)) & (df['Residual'] < 0) , 'Anomalies'] = -1\n    df.loc[((df['Residual'] < lower_bound) | (df['Residual'] > upper_bound)) & (df['Residual'] >= 0) , 'Anomalies'] = 1\n    df.loc[(df['Residual'] >= lower_bound) & (df['Residual'] <= upper_bound), 'Anomalies'] = 0\n\n    return df[df['Anomalies'] != 0]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Template Client Library using pip\nDESCRIPTION: This snippet shows how to install the Azure Template client library for Python using pip. It's a prerequisite step for running the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/template/azure-template/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install azure-template\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Durabletask Management Client in Python\nDESCRIPTION: Python code snippet demonstrating how to authenticate with the Azure Durabletask Management Client using DefaultAzureCredential. It requires setting up environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/durabletask/azure-mgmt-durabletask/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.durabletask import DurableTaskMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DurableTaskMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with AzureKeyCredential in Communication Email SDK\nDESCRIPTION: Creates an EmailClient instance using an AzureKeyCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.email import EmailClient\nfrom azure.core.credentials import AzureKeyCredential\n\ncredential = AzureKeyCredential(\"<api_key>\")\nendpoint = \"https://<resource-name>.communication.azure.com/\"\nclient = EmailClient(endpoint, credential);\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Network SDK and Dependencies - Bash\nDESCRIPTION: This snippet demonstrates how to install the core Azure Hybrid Network Management SDK and its dependency for authentication using pip. Users must have Python 3.7 or higher and access to pip. The commands install 'azure-mgmt-hybridnetwork' for hybrid network management operations and 'azure-identity' for credential management. No parameters are required, but installation depends on Python and network connectivity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridnetwork/azure-mgmt-hybridnetwork/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hybridnetwork\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Removing SipConfigurationUpdate Definition using Autorest Directive\nDESCRIPTION: This `autorest` directive removes the `SipConfigurationUpdate` definition from the Swagger document. Similar to other directives in this file, it aims to simplify the generated SDK by eliminating dedicated update types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.SipConfigurationUpdate\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Informatica Data Management SDK and Identity Library using pip in Bash\nDESCRIPTION: Shows how to install the necessary Python packages (`azure-mgmt-informaticadatamanagement` and `azure-identity`) using the `pip` package manager in a Bash shell. These packages are required for interacting with Azure Informatica Data Management and handling authentication, respectively.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/informaticadatamanagement/azure-mgmt-informaticadatamanagement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-informaticadatamanagement\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running Sample Code for Azure Communication Services SDK\nDESCRIPTION: Command to execute sample Python scripts in the samples directory of an Azure Communication Services SDK package. Replace <name-of-the-sample-file> with the actual sample filename.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython <name-of-the-sample-file>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Subscription Key\nDESCRIPTION: Example of creating a MapsRenderClient using AzureKeyCredential with a subscription key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.render import MapsRenderClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nrender_client = MapsRenderClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving certificate versions with azure-keyvault\nDESCRIPTION: Retrieves certificate versions and then gets each certificate using the get_certificate_versions and get_certificate methods of KeyVaultClient in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault import CertificateId\n\ncertificate_items = client.get_certificate_versions(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    certificate_name=\"cert-name\"\n)\n\nfor certificate_item in certificate_items:\n    certificate_id = CertificateId(certificate_item.id)\n    certificate_version = certificate_id.version\n\n    certificate = client.get_certificate(\n        vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n        certificate_name=\"cert-name\",\n        certificate_version=certificate_version\n    )\n```\n\n----------------------------------------\n\nTITLE: Indicating Multi-Tenant Authentication Error in Python\nDESCRIPTION: The `ClientAuthenticationError` exception is thrown by credential types supporting multi-tenant authentication when a requested tenant ID does not match the credential's tenant ID and is not included in the `additionally_allowed_tenants` list. This enforces explicit configuration for multi-tenant access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nClientAuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Kubernetes Configuration Client\nDESCRIPTION: Example showing how to authenticate with the Azure Kubernetes Configuration client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kubernetesconfiguration/azure-mgmt-kubernetesconfiguration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.kubernetesconfiguration import SourceControlConfigurationClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SourceControlConfigurationClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Setting BlobSasPermissions in Python Azure Blob Storage SDK\nDESCRIPTION: Shows the correct way to set BlobSasPermissions, noting that the 'tag' permission now defaults to False like other permissions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npermissions = BlobSasPermissions(read=True, write=True, tag=True)\n```\n\n----------------------------------------\n\nTITLE: Using KeyClient to Get Key Attestation in Python\nDESCRIPTION: Example of using the new get_key_attestation method added in version 4.11.0b1 to retrieve a key along with its attestation blob from a managed HSM.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.keys import KeyClient\n\nkey_client = KeyClient(vault_url, credential)\nkey = key_client.get_key_attestation(\"key-name\")\nprint(key.properties.attestation)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage File Share SDK with async support\nDESCRIPTION: Command to install the Azure Storage File Share SDK with optional async dependencies using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-file-share[aio]\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.2.0 in Markdown\nDESCRIPTION: Documents the changes in version 1.2.0, including new properties added to the VirtualNetworkLink model and a new enum ResolutionPolicy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.2.0 (2024-09-23)\n\n### Features Added\n\n  - Model `VirtualNetworkLink` added property `resolution_policy`\n  - Added enum `ResolutionPolicy`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SQL Management Dependencies with pip - Bash\nDESCRIPTION: This snippet illustrates the bash commands required to install the Azure SQL Management Client and Azure Identity packages using pip. It is required to set up the necessary Python dependencies before using the SDK for authenticating and managing Azure SQL resources. Ensure Python 3.8+ is installed prior to running these commands. No inputs are required; outputs are the installed packages in your Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-sql\\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Content Safety Evaluation Using Promptflow Eval SDK\nDESCRIPTION: Example demonstrating content safety evaluation using Promptflow Eval SDK, including both single evaluation and chat conversation evaluation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom promptflow.evals.evaluators.content_safety import ContentSafetyEvaluator, ContentSafetyChatEvaluator\nfrom pprint import pprint\n\nproject_scope = {\n    \"subscription_id\": \"\",\n    \"resource_group_name\": \"\",\n    \"project_name\": \"\",\n}\n\ncontent_safety_eval = ContentSafetyEvaluator(project_scope)\ncontent_safety_score = content_safety_eval(\n    question=\"What is the capital of France?\", \n    answer=\"Paris.\"\n)\npprint(content_safety_score)\n\ncontent_safety_chat_eval = ContentSafetyChatEvaluator(project_scope)\nconversation = [\n        {\n            \"role\": \"user\", \n            \"content\": \"What is the capital of France?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"The capital of France is Paris.\",\n        },\n    ]\ncontent_safety_chat_score = content_safety_chat_eval(conversation=conversation)\npprint(content_safety_chat_score)\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Path for Development\nDESCRIPTION: This line indicates that the Azure SDK tools should be installed from a local directory path for development purposes. It uses the -e flag to specify an editable install, allowing changes in the source directory to be immediately reflected in the installed package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Handling Partially Successful Log Query Responses in Azure Monitor\nDESCRIPTION: Code example showing how to handle partially successful Kusto query executions by accessing both the partial data and partial error information from the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.query_workspace(\"{workspaceId}\", \"{kusto-query-string}\", timespan=\"{timespan}\")\n\ndata = response.partial_data\nerror = response.partial_error\n```\n\n----------------------------------------\n\nTITLE: Making API Calls Pageable in Azure SDK for Python\nDESCRIPTION: These directives modify several API endpoints to make them pageable, including root cause retrieval, series querying, and metric data querying. This enables handling large result sets more efficiently.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: '$.paths[\"/enrichment/anomalyDetection/configurations/{configurationId}/incidents/{incidentId}/rootCause\"].get'\n    transform: >\n      $[\"x-ms-pageable\"] = {\"nextLinkName\": null};\n\n  - from: swagger-document\n    where: '$.paths[\"/enrichment/anomalyDetection/configurations/{configurationId}/series/query\"].post'\n    transform: >\n      $[\"x-ms-pageable\"] = {\"nextLinkName\": null};\n\n  - from: swagger-document\n    where: '$.paths[\"/metrics/{metricId}/data/query\"].post'\n    transform: >\n      $[\"x-ms-pageable\"] = {\"nextLinkName\": null};\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Kubernetes SDK and Dependencies with pip - Bash\nDESCRIPTION: This snippet demonstrates how to install the \"azure-mgmt-hybridkubernetes\" and \"azure-identity\" Python packages using the pip package manager. These packages are required to manage Azure Hybrid Kubernetes clusters and perform authentication. Ensure you have Python 3.8 or higher before running these commands. The output will be a successful installation of the SDK and its authentication dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridkubernetes/azure-mgmt-hybridkubernetes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hybridkubernetes\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Setting Default Client Configuration\nDESCRIPTION: Example of creating ChatCompletionsClient with default settings for temperature and max_tokens.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\n\n# For Serverless API or Managed Compute endpoints\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n    temperature=0.5,\n    max_tokens=1000\n)\n```\n\n----------------------------------------\n\nTITLE: Identifying Follow-up Communication Inference in Radiology Insights using Python\nDESCRIPTION: This code snippet shows how to loop through patient results and detect follow-up communication inferences in radiology insights data. It uses the RadiologyInsightsInferenceType enum for inference type checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n    for ri_inference in patient_result.inferences:\n        if ri_inference.kind == models.RadiologyInsightsInferenceType.FOLLOWUP_COMMUNICATION:\n            print(f\"Follow-up Communication Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Networking SDK and Identity Package using Bash\nDESCRIPTION: Installs the `azure-mgmt-servicenetworking` package for managing Azure Service Networking resources and the `azure-identity` package for handling Azure Active Directory authentication using the pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicenetworking/azure-mgmt-servicenetworking/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-servicenetworking\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Image Builder and Identity packages with pip\nDESCRIPTION: Command-line instructions for installing the required Azure packages using pip. This installs the Azure Image Builder management package and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-imagebuilder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-imagebuilder\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Cosmosdbforpostgresql Management SDK in Python\nDESCRIPTION: Example code demonstrating how to authenticate with the Azure Cosmosdbforpostgresql Management Client using DefaultAzureCredential. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmosdbforpostgresql/azure-mgmt-cosmosdbforpostgresql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.cosmosdbforpostgresql import CosmosdbForPostgresqlMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CosmosdbForPostgresqlMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK Project (Python requirements.txt format)\nDESCRIPTION: This snippet demonstrates the format for specifying dependencies in a requirements file for a Python project using pip. It references editable packages via relative paths using the '-e' flag for both tools and SDKs (such as 'azure-sdk-tools' and 'azure-identity'), as well as direct package paths and an external dependency, 'aiohttp'. The expected input is a plain text file read by pip, and the expected output is installed packages in the project environment. This structure allows for local development while including necessary third-party libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\n../azure-mgmt-communication\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Request with POST and JSON\nDESCRIPTION: Shows how to create an HttpRequest object with POST method, JSON body, and query parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.rest import HttpRequest\n\n# this URL is relative to the endpoint we passed our client\nrequest = HttpRequest(\n    method=\"POST\",\n    url=\"/helloWorld\",\n    json={\"document\": \"Hello world!\"},\n    params={\"language\": \"en\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Python Function Without Type Hints\nDESCRIPTION: Example of an untyped Python function that adds two parameters without type hints. When type checking is enabled, this is implicitly treated as using Any types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef add_things(x, y):\n    return x + y\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exclusions in setup.py\nDESCRIPTION: Example of how to exclude the 'azure' package from the packages list in setup.py.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npackages=find_packages(exclude=[\n    'tests',\n    # Exclude packages that will be covered by PEP420 or nspkg\n    'azure',\n]),\n```\n\n----------------------------------------\n\nTITLE: Installing Async Transport for Azure Monitor Query in Python\nDESCRIPTION: Command to install aiohttp, an async transport required for using asynchronous clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Hub Management Client Library for Python\nDESCRIPTION: Installs the required packages for using the Azure IoT Hub Management Client Library. This includes the main library and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-iothub\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception AzureError in Python\nDESCRIPTION: The AzureError class is the base exception for all errors within the Azure SDK for Python, encapsulating error messaging, context, and optional continuation tokens. It depends on the Python standard library (Exception class and sys.exc_info()), and takes message (str), optional *args, and keyword arguments (such as error or continuation_token). This class initializes with extended trace and error information for rich error handling throughout SDK client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass AzureError(Exception):\n    def __init__(self, message, *args, **kwargs):\n        self.inner_exception = kwargs.get(\"error\")\n        self.exc_type, self.exc_value, self.exc_traceback = sys.exc_info()\n        self.exc_type = self.exc_type.__name__ if self.exc_type else type(self.inner_exception)\n        self.exc_msg = \"{}, {}: {}\".format(message, self.exc_type, self.exc_value)  # type: ignore\n        self.message = str(message)\n        self.continuation_token = kwargs.get(\"continuation_token\")\n        super(AzureError, self).__init__(self.message, *args)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Connection String\nDESCRIPTION: Environment variable configuration for Azure Blob Storage when using checkpointing functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_STORAGE_CONNECTION_STRING=<the connection string of an Azure Storage account>\n```\n\n----------------------------------------\n\nTITLE: Renaming FillMissingPointType to DatasourceMissingDataPointFillType\nDESCRIPTION: Directive to rename FillMissingPointType enum to DatasourceMissingDataPointFillType for more descriptive and domain-specific naming.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataFeedDetail\"][\"properties\"][\"fillMissingPointType\"][\"x-ms-enum\"][\"name\"] = \"DatasourceMissingDataPointFillType\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Commerce SDK with pip in Bash\nDESCRIPTION: Commands to install the Azure Commerce SDK and Azure Identity packages using pip. Both packages are required for working with Azure Commerce services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/commerce/azure-mgmt-commerce/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-commerce\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 9.0.0 in Markdown\nDESCRIPTION: Provides detailed information about the changes in version 9.0.0 of the Azure SDK for Python, including new operations, features added to various models, and breaking changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/consumption/azure-mgmt-consumption/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 9.0.0 (2022-01-06)\n\n**Features**\n\n  - Added operation EventsOperations.list_by_billing_account\n  - Added operation EventsOperations.list_by_billing_profile\n  - Added operation LotsOperations.list_by_billing_account\n  - Added operation LotsOperations.list_by_billing_profile\n  - Model Balance has a new parameter etag\n  - Model Budget has a new parameter forecast_spend\n  - Model ChargeSummary has a new parameter e_tag\n  - Model CreditBalanceSummary has a new parameter estimated_balance_in_billing_currency\n  - Model CreditSummary has a new parameter billing_currency\n  - Model CreditSummary has a new parameter credit_currency\n  - Model CreditSummary has a new parameter e_tag\n  - Model CreditSummary has a new parameter etag\n  - Model CreditSummary has a new parameter reseller\n  - Model EventSummary has a new parameter adjustments_in_billing_currency\n  - Model EventSummary has a new parameter billing_currency\n  - Model EventSummary has a new parameter billing_profile_display_name\n  - Model EventSummary has a new parameter billing_profile_id\n  - Model EventSummary has a new parameter canceled_credit\n  - Model EventSummary has a new parameter charges_in_billing_currency\n  - Model EventSummary has a new parameter closed_balance_in_billing_currency\n  - Model EventSummary has a new parameter credit_currency\n  - Model EventSummary has a new parameter credit_expired_in_billing_currency\n  - Model EventSummary has a new parameter e_tag\n  - Model EventSummary has a new parameter e_tag_properties_e_tag\n  - Model EventSummary has a new parameter lot_id\n  - Model EventSummary has a new parameter lot_source\n  - Model EventSummary has a new parameter new_credit_in_billing_currency\n  - Model EventSummary has a new parameter reseller\n  - Model LegacyChargeSummary has a new parameter e_tag\n  - Model LegacyReservationRecommendation has a new parameter etag\n  - Model LegacyReservationRecommendation has a new parameter resource_type\n  - Model LegacyReservationTransaction has a new parameter billing_month\n  - Model LegacyReservationTransaction has a new parameter monetary_commitment\n  - Model LegacyReservationTransaction has a new parameter overage\n  - Model LegacyUsageDetail has a new parameter benefit_id\n  - Model LegacyUsageDetail has a new parameter benefit_name\n  - Model LegacyUsageDetail has a new parameter etag\n  - Model LegacyUsageDetail has a new parameter pay_g_price\n  - Model LegacyUsageDetail has a new parameter pricing_model\n  - Model LotSummary has a new parameter billing_currency\n  - Model LotSummary has a new parameter closed_balance_in_billing_currency\n  - Model LotSummary has a new parameter credit_currency\n  - Model LotSummary has a new parameter e_tag\n  - Model LotSummary has a new parameter e_tag_properties_e_tag\n  - Model LotSummary has a new parameter original_amount_in_billing_currency\n  - Model LotSummary has a new parameter purchased_date\n  - Model LotSummary has a new parameter reseller\n  - Model LotSummary has a new parameter status\n  - Model ManagementGroupAggregatedCostResult has a new parameter etag\n  - Model Marketplace has a new parameter additional_info\n  - Model Marketplace has a new parameter etag\n  - Model ModernChargeSummary has a new parameter e_tag\n  - Model ModernReservationRecommendation has a new parameter etag\n  - Model ModernReservationRecommendation has a new parameter location_properties_location\n  - Model ModernReservationRecommendation has a new parameter sku_name\n  - Model ModernUsageDetail has a new parameter benefit_id\n  - Model ModernUsageDetail has a new parameter benefit_name\n  - Model ModernUsageDetail has a new parameter cost_allocation_rule_name\n  - Model ModernUsageDetail has a new parameter effective_price\n  - Model ModernUsageDetail has a new parameter etag\n  - Model ModernUsageDetail has a new parameter pay_g_price\n  - Model ModernUsageDetail has a new parameter pricing_model\n  - Model ModernUsageDetail has a new parameter provider\n  - Model Notification has a new parameter locale\n  - Model Operation has a new parameter id\n  - Model OperationDisplay has a new parameter description\n  - Model PriceSheetResult has a new parameter download\n  - Model PriceSheetResult has a new parameter etag\n  - Model ReservationDetail has a new parameter etag\n  - Model ReservationRecommendation has a new parameter etag\n  - Model ReservationRecommendationDetailsModel has a new parameter etag\n  - Model ReservationRecommendationsListResult has a new parameter previous_link\n  - Model ReservationSummary has a new parameter etag\n  - Model ReservationTransaction has a new parameter billing_month\n  - Model ReservationTransaction has a new parameter monetary_commitment\n  - Model ReservationTransaction has a new parameter overage\n  - Model Resource has a new parameter etag\n  - Model Tag has a new parameter value\n  - Model TagsResult has a new parameter next_link\n  - Model TagsResult has a new parameter previous_link\n  - Model UsageDetail has a new parameter etag\n\n**Breaking changes**\n\n  - Model ChargeSummary no longer has parameter tags\n  - Model EventSummary no longer has parameter tags\n  - Model LegacyChargeSummary no longer has parameter tags\n  - Model LotSummary no longer has parameter tags\n  - Model ModernChargeSummary no longer has parameter tags\n  - Operation ReservationRecommendationDetailsOperations.get has a new signature\n  - Parameter scope of model LegacyReservationRecommendation is now required\n  - Parameter scope of model LegacyReservationRecommendation is now required\n  - Removed operation EventsOperations.list\n  - Removed operation LotsOperations.list\n  - Removed operation group ForecastsOperations\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK Python Project\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes local package references using relative paths and an external library. The dependencies are specified in a format typically used in a requirements.txt file for Python projects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Dependencies List\nDESCRIPTION: Lists required Python package dependencies including relative paths to internal Azure SDK components and external package aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trustedsigning/azure-mgmt-trustedsigning/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK in Python\nDESCRIPTION: This snippet enumerates the required dependencies for the Azure SDK in Python. It includes internal tools, core libraries, and specific Azure modules needed for development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgezones/azure-mgmt-edgezones/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../resources/azure-mgmt-resource\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Labels with Filters in Python\nDESCRIPTION: This snippet shows different ways to list labels associated with configuration settings in Azure App Configuration using the `list_labels` method. It demonstrates listing all labels, filtering by an exact label name, and filtering using a wildcard pattern (`*`) in the name parameter. Requires an initialized `client` object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint(\"List all labels in resource\")\nconfig_settings = client.list_labels()\nfor config_setting in config_settings:\n    print(config_setting)\n\nprint(\"List labels by exact match\")\nconfig_settings = client.list_labels(name=\"my label1\")\nfor config_setting in config_settings:\n    print(config_setting)\n\nprint(\"List labels by wildcard\")\nconfig_settings = client.list_labels(name=\"my label*\")\nfor config_setting in config_settings:\n    print(config_setting)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Device Classes with DeviceUpdateClient in Python\nDESCRIPTION: Retrieves a list of all device classes associated with the devices registered in the Device Update instance. It uses the `list_device_classes` method of the `device_management` attribute from an initialized `DeviceUpdateClient`. The code then iterates through the response and prints the `deviceClassId` for each class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetDevice/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.device_management.list_device_classes()\nfor item in response:\n    print(f\"  {item['deviceClassId']}\")\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Router Job with Worker Selectors (Python)\nDESCRIPTION: Defines and submits a `RouterJob` to a specific queue (`queue-1`) and channel (`my-channel`). It includes worker selectors (`requested_worker_selectors`) to specify criteria (e.g., skill level) that workers must meet to handle this job. The `upsert_job` method of the `JobRouterClient` is used to create or update the job. Requires an initialized `JobRouterClient` and an existing queue.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.communication.jobrouter.models import (\n    RouterJob,\n    RouterWorkerSelector,\n    LabelOperator\n)\n\nrouter_job: RouterJob = RouterJob(\n    channel_id = \"my-channel\",\n    queue_id = \"queue-1\",\n    channel_reference = \"12345\",\n    priority = 1,\n    requested_worker_selectors = [\n        RouterWorkerSelector(key = \"Some-Skill\", label_operator = LabelOperator.EQUAL, value = 10)\n    ]\n)\n\njob: RouterJob = router_client.upsert_job(\n    \"jobId-1\",\n    router_job\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Proxy Fixture in Python\nDESCRIPTION: Creates a session-level pytest fixture to start the test proxy and patch sleep functions for streamlined testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n# autouse=True will trigger this fixture on each pytest run, even if it's not explicitly used by a test method\n# test_proxy auto-starts the test proxy\n# patch_sleep and patch_async_sleep streamline tests by disabling wait times during LRO polling\n@pytest.fixture(scope=\"session\", autouse=True)\ndef start_proxy(test_proxy, patch_sleep, patch_async_sleep):\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Pipeline with TrioRequestsTransport in Python\nDESCRIPTION: This example demonstrates initializing and using an asynchronous pipeline (`AsyncPipeline`) configured with `TrioRequestsTransport` for handling HTTP requests using the Trio async framework. It shows running a request through the pipeline within an `async with` context. Requires the `trio` library and assumes `policies` and `request` objects are defined.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.pipeline.transport import TrioRequestsTransport\nasync with AsyncPipeline(TrioRequestsTransport(), policies=policies) as pipeline:\n    return await pipeline.run(request)\n```\n\n----------------------------------------\n\nTITLE: Running Mypy Type Checking for azure-core Package\nDESCRIPTION: Command to run mypy type checking on the azure-core package using Tox. This demonstrates how to invoke a specific Tox environment for a particular package in the monorepo.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e mypy -c ./eng/tox/tox.ini --root sdk/core/azure-core\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor OpenTelemetry Exporter with pip\nDESCRIPTION: Command to install the Azure Monitor OpenTelemetry Exporter package using pip package manager with the pre-release flag.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-monitor-opentelemetry-exporter --pre\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only Policy via Indexing with Azure Attestation Client in Python\nDESCRIPTION: Illustrates an alternative method to get only the policy string after calling `get_policy` (as of v1.0.0). It accesses the first element (index 0) of the returned tuple, which contains the policy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npolicy = attest_client.get_policy(AttestationType.SGX_ENCLAVE)[0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable Installation Path for Azure SDK Tools\nDESCRIPTION: Specifies an editable installation path for Azure SDK tools used in Python SDK development. The path is relative to the current directory, pointing to the tools in the Azure SDK repository structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/customproviders/azure-mgmt-customproviders/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document with Query Fields in Python\nDESCRIPTION: This example shows how to use the DocumentIntelligenceClient to analyze a document with query fields. It uses the prebuilt-layout model and specifies additional fields to be extracted using the query_fields parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/MIGRATION_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.documentintelligence import DocumentIntelligenceClient\nfrom azure.ai.documentintelligence.models import AnalyzeDocumentRequest, DocumentAnalysisFeature\n\nendpoint = os.environ[\"DOCUMENTINTELLIGENCE_ENDPOINT\"]\nkey = os.environ[\"DOCUMENTINTELLIGENCE_API_KEY\"]\nurl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/documentintelligence/azure-ai-documentintelligence/samples/sample_forms/forms/Invoice_1.pdf\"\n\nclient = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\npoller = client.begin_analyze_document(\n    \"prebuilt-layout\",\n    AnalyzeDocumentRequest(url_source=url),\n    features=[DocumentAnalysisFeature.QUERY_FIELDS],\n    query_fields=[\"NumberOfGuests\", \"StoreNumber\"],\n)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Broker Plugin using pip (Bash)\nDESCRIPTION: Installs the `azure-identity-broker` package using the pip package manager. This package provides supplemental credentials for brokered authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity-broker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity-broker\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure IoTFirmwareDefense Client Using Python\nDESCRIPTION: Demonstrates how to authenticate with the IoTFirmwareDefense Management Client using environment variables and the DefaultAzureCredential from Azure Identity. Requires the environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and optionally AZURE_SUBSCRIPTION_ID to be set beforehand. Outputs an authenticated IoTFirmwareDefenseMgmtClient instance for managing Azure IoT firmware defense resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iotfirmwaredefense/azure-mgmt-iotfirmwaredefense/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.iotfirmwaredefense import IoTFirmwareDefenseMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = IoTFirmwareDefenseMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Importing Protocol from typing_extensions\nDESCRIPTION: Example of importing Protocol type from typing_extensions package for backward compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Protocol\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Queue Client Library for Python\nDESCRIPTION: This snippet shows how to install the Azure Storage Queue client library for Python using pip. This is a prerequisite for running the code samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-queue\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities with Boolean Properties in Python\nDESCRIPTION: Demonstrates how to filter entities based on boolean properties using the Azure Data Tables client library. This example filters on the IsActive field.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"IsActive eq true\"\ntable_client.query_entities(query_filter)\n```\n\n----------------------------------------\n\nTITLE: Example Client Initialization with New Configuration\nDESCRIPTION: Shows how to initialize a client with the new credential system and configuration pattern introduced in 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Party in FarmBeats\nDESCRIPTION: Example demonstrating how to create a party entity within FarmBeats using the client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\n\nparty = client.parties.create_or_update(\n    party_id=party_id,\n    party={\n        \"name\": party_name,\n        \"description\": party_description\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Batch Management SDK and Identity in Bash\nDESCRIPTION: Installs the necessary Python packages 'azure-mgmt-batch' and 'azure-identity' via pip. These packages provide client libraries and authentication support needed to interact with Azure Batch services. Run these commands in a terminal before using the client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/batch/azure-mgmt-batch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-batch\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Analyzing Multi-API Swagger Specifications\nDESCRIPTION: Python script to analyze available Swagger specifications for a service and suggest appropriate tags and batch declarations for multi-API readme files. This helps in preparing the correct configuration for generating multi-version SDK packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger_conf.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython ./scripts/multi_api_readme_help.py /azure-rest-api-specs/specification/service/resource-manager/\n```\n\n----------------------------------------\n\nTITLE: Class-Level Type Hints for Model Variables in Python\nDESCRIPTION: Demonstrates how to provide type annotations for public instance variables on a model class using PEP526 class-level type hints, creating self-documenting models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Tree:\n    \"\"\"Represents a tree.\n\n    :param str location: The location for the tree.\n    :param int num_branches: The number of branches on the tree\n    :param str kind: The kind of tree.\n\n    Note: :ivar: docstrings are redundant since these vars/types are captured below\n    \"\"\"\n\n    location: str\n    \"\"\"A description of the location of the tree.\"\"\"\n    num_branches: int\n    \"\"\"Number of branches on tree.\"\"\"\n    kind: str = \"oak\"\n    \"\"\"The kind of tree.\"\"\"\n\n    def __init__(self, *, location: str, num_branches: int, kind: Optional[str] = None) -> None:\n        if kind:\n            self.kind = kind\n        self.location = location\n        self.num_branches = num_branches\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage Service Methods HTML Table\nDESCRIPTION: HTML table structure showing the mapping between legacy Azure Storage Blob service methods and their modern counterparts. The table includes method names and their corresponding service classes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td width=\"242\" valign=\"top\">\n        <p align=\"right\">\n            commit_block_list\n        </p>\n    </td>\n    <td width=\"111\" valign=\"top\">\n        <p align=\"right\">\n            BlobClient\n        </p>\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Authentication with SAS Token\nDESCRIPTION: Example showing how to authenticate with Azure Maps using a SAS token credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureSASCredential\nfrom azure.maps.geolocation import MapsGeolocationClient\n\ncredential = AzureSASCredential(os.environ.get(\"AZURE_SAS_TOKEN\"))\n\ngeolocation_client = MapsGeolocationClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Development Dependencies\nDESCRIPTION: Lists required dependencies for Azure SDK Python development including local path references to tools and core packages, as well as the aiohttp library for async HTTP support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Synapse Access Control Package\nDESCRIPTION: Shows how to install the Azure Synapse Access Control package using pip. This is the first step for using the Azure Synapse Access Control client in Python applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_data/match_trial_clinical_note.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-synapse-accesscontrol\n```\n\n----------------------------------------\n\nTITLE: Setting PYTEST_LOG_LEVEL Environment Variable for Test Logging\nDESCRIPTION: Demonstrates how to set the PYTEST_LOG_LEVEL environment variable to enable test logging in CI pipelines or locally with tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nPYTEST_LOG_LEVEL=INFO\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultAzureCredential Authentication Flowchart in Mermaid\nDESCRIPTION: This Mermaid code defines a flowchart visualizing the sequence of credential types attempted by `DefaultAzureCredential` in the Azure SDK for Python. It groups credentials by deployment context (Deployed, Developer, Interactive), defines the flow order, applies distinct styles to each group using `classDef`, and adds clickable links to the API reference documentation for each credential type using the `click` directive. An `init` block configures the base theme.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/images/mermaidjs/DefaultAzureCredentialAuthFlow.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%% STEPS TO GENERATE IMAGE\\n%% =======================\\n%% 1. Install mermaid CLI v10.9.1 (see https://github.com/mermaid-js/mermaid-cli/blob/master/README.md):\\n%%    npm i -g @mermaid-js/mermaid-cli@10.9.1\\n%% 2. Run command: mmdc -i DefaultAzureCredentialAuthFlow.md -o DefaultAzureCredentialAuthFlow.svg\\n\\n%%{\\n  init: {\\n    'theme': 'base',\\n    'themeVariables': {\\n      'tertiaryBorderColor': '#fff',\\n      'tertiaryColor': '#fff'\\n    }\\n  }\\n}%%\\n\\nflowchart LR;\\n    subgraph CREDENTIAL TYPES;\\n        direction LR;\\n        Deployed(Deployed service):::deployed ~~~ Developer(Developer):::developer ~~~ Interactive(Interactive):::interactive;\\n    end;\\n\\n    subgraph CREDENTIALS;\\n        direction LR;\\n        A(Environment):::deployed --> B(Workload Identity):::deployed --> C(Managed Identity):::deployed --> D(Azure CLI):::developer --> E(Azure PowerShell):::developer --> F(Azure Developer CLI):::developer --> G(Interactive browser):::interactive;\\n    end;\\n\\n    %% Define styles for credential type boxes\\n    classDef deployed fill:#95C37E, stroke:#71AD4C;\\n    classDef developer fill:#F5AF6F, stroke:#EB7C39;\\n    classDef interactive fill:#A5A5A5, stroke:#828282;\\n\\n    %% Add API ref links to credential type boxes\\n    click A \"https://aka.ms/azsdk/python/identity/environmentcredential\" _blank;\\n    click B \"https://aka.ms/azsdk/python/identity/workloadidentitycredential\" _blank;\\n    click C \"https://aka.ms/azsdk/python/identity/managedidentitycredential\" _blank;\\n    click D \"https://aka.ms/azsdk/python/identity/azclicredential\" _blank;\\n    click E \"https://aka.ms/azsdk/python/identity/powershellcredential\" _blank;\\n    click F \"https://aka.ms/azsdk/python/identity/azuredeveloperclicredential\" _blank;\\n    click G \"https://aka.ms/azsdk/python/identity/interactivebrowsercredential\" _blank;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Bot Service SDK and Dependencies in Bash\nDESCRIPTION: Installs the Azure Bot Service SDK package and its Azure Identity dependency using pip in a bash shell. These commands must be run in an environment with Python 3.7 or greater and pip available. The packages azure-mgmt-botservice and azure-identity are prerequisites for developing and using the SDK. The output of this operation is the installation of the necessary Python packages for using Azure Bot Service APIs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/botservice/azure-mgmt-botservice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-botservice\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Feature Additions in Azure Network Management Client 25.4.0\nDESCRIPTION: This code snippet lists the new features added in version 25.4.0 of the Azure Network Management Client, including new operations and model changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 25.4.0 (2024-05-27)\n\n### Features Added\n\n  - Added operation NetworkVirtualAppliancesOperations.begin_restart\n  - Added operation group FirewallPolicyDeploymentsOperations\n  - Added operation group FirewallPolicyDraftsOperations\n  - Added operation group FirewallPolicyRuleCollectionGroupDraftsOperations\n  - Model ApplicationGatewayHeaderConfiguration has a new parameter header_value_matcher\n  - Model ApplicationGatewaySku has a new parameter family\n  - Model ConnectionMonitorEndpoint has a new parameter location_details\n  - Model ConnectionMonitorEndpoint has a new parameter subscription_id\n  - Model ExpressRouteCircuit has a new parameter enable_direct_port_rate_limit\n  - Model InboundSecurityRule has a new parameter rule_type\n  - Model InboundSecurityRules has a new parameter applies_on\n  - Model InboundSecurityRules has a new parameter destination_port_ranges\n  - Model InboundSecurityRules has a new parameter name\n  - Model NetworkInterfaceIPConfiguration has a new parameter private_ip_address_prefix_length\n  - Model NetworkVirtualAppliance has a new parameter network_profile\n  - Model PacketCapture has a new parameter capture_settings\n  - Model PacketCapture has a new parameter continuous_capture\n  - Model PacketCaptureParameters has a new parameter capture_settings\n  - Model PacketCaptureParameters has a new parameter continuous_capture\n  - Model PacketCaptureResult has a new parameter capture_settings\n  - Model PacketCaptureResult has a new parameter continuous_capture\n  - Model PacketCaptureResultProperties has a new parameter capture_settings\n  - Model PacketCaptureResultProperties has a new parameter continuous_capture\n  - Model PacketCaptureStorageLocation has a new parameter local_path\n  - Model PolicySettings has a new parameter js_challenge_cookie_expiration_in_mins\n  - Model Subnet has a new parameter sharing_scope\n  - Model VirtualApplianceNicProperties has a new parameter nic_type\n  - Model VirtualNetworkPeering has a new parameter enable_only_i_pv6_peering\n  - Model VirtualNetworkPeering has a new parameter local_address_space\n  - Model VirtualNetworkPeering has a new parameter local_subnet_names\n  - Model VirtualNetworkPeering has a new parameter local_virtual_network_address_space\n  - Model VirtualNetworkPeering has a new parameter peer_complete_vnets\n  - Model VirtualNetworkPeering has a new parameter remote_subnet_names\n  - Model VpnSiteLinkConnection has a new parameter dpd_timeout_seconds\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Key Vault Testing\nDESCRIPTION: Sets the required environment variables for authenticating and accessing the Azure Key Vault test resources. These variables include tenant ID, client ID, client secret, and the Key Vault URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TENANT_ID=<tenant ID of testing service principal>\nAZURE_CLIENT_ID=<client ID of testing service principal>\nAZURE_CLIENT_SECRET=<client secret of testing service principal>\nAZURE_KEYVAULT_URL=<URL of the testing key vault>\n```\n\n----------------------------------------\n\nTITLE: Creating Cosmos DB Role Definition Using JSON File\nDESCRIPTION: Azure CLI command to create a role definition in Cosmos DB using the previously defined JSON file. This establishes the custom role with specific permissions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naz cosmosdb sql role definition create --account-name $accountName --resource-group $resourceGroupName --body expandedActions.json\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Remote Rendering Client Library with pip\nDESCRIPTION: Command to install the Azure Remote Rendering client library for Python using pip package manager. The --pre flag indicates that pre-release versions are acceptable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-mixedreality-remoterendering\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Phone Numbers SDK via pip (Bash)\nDESCRIPTION: This snippet demonstrates how to install the Azure Communication Phone Numbers client library for Python using pip. Prerequisite: Python 3.7 or later must be installed. This is required to access SDK functions for managing phone numbers and SIP routing within Azure Communication Services. The command downloads and installs the package from PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-phonenumbers\n```\n\n----------------------------------------\n\nTITLE: Creating keys with azure-keyvault\nDESCRIPTION: Demonstrates how to create RSA and elliptic curve keys using the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# create an RSA key\nkey_bundle = client.create_key(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    key_name=\"key-name\",\n    kty=\"RSA\"\n)\nkey = key_bundle.key\n\n# create an elliptic curve key\nkey_bundle = client.create_key(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    key_name=\"key-name\",\n    kty=\"EC\"\n)\nkey = key_bundle.key\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Management Client Library and Azure Identity\nDESCRIPTION: Installs the required packages for using the Azure Network Management Client Library with Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-network\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Sync Client Library and Identity Package with pip (bash)\nDESCRIPTION: This snippet demonstrates how to install the 'azure-mgmt-storagesync' and 'azure-identity' packages using pip, which are required dependencies for managing and authenticating Azure Storage Sync resources in Python. Run these commands in a shell environment before using the Python SDK. Prerequisites include Python 3.7+ and an appropriate Azure subscription. No input parameters are needed; the expected outcome is that the packages are installed in the current Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagesync/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-storagesync\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Client Library using Bash\nDESCRIPTION: Installs the `azure-servicebus` Python package using the pip package manager. This library is the primary requirement for interacting with Azure Service Bus using Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-servicebus\n```\n\n----------------------------------------\n\nTITLE: Initializing QueueServiceClient with Shared Key in Python\nDESCRIPTION: Create a QueueServiceClient instance using a storage account shared key (access key).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueServiceClient\nservice = QueueServiceClient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=\"<account_access_key>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Schema Registry Avro Encoder with pip\nDESCRIPTION: Command to install the necessary Azure libraries for Schema Registry Avro Encoder and Azure Identity authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-schemaregistry-avroencoder azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Subscription Key Credential\nDESCRIPTION: Example showing how to authenticate with the Azure Maps Weather client using a subscription key. Creates a client instance using AzureKeyCredential with an environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.weather import MapsWeatherClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nmaps_weather_client = MapsWeatherClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Ingestion Client Library with pip\nDESCRIPTION: This command installs the Azure Monitor Ingestion client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-monitor-ingestion\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Settings in Azure Cosmos DB Python SDK\nDESCRIPTION: Example showing how to configure client timeout (10s), connection timeout (3s), and read timeout (60s) when initializing a CosmosClient. These settings control how long the client waits for various operations to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/docs/TimeoutAndRetriesConfig.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\n\nclient = CosmosClient(URL, credential=KEY, timeout=10, connection_timeout=3, read_timeout=60)\n```\n\n----------------------------------------\n\nTITLE: Converting Windows Timezone to IANA with Azure Maps Timezone SDK in Python\nDESCRIPTION: This snippet shows how to convert a Windows Time Zone ID to its corresponding IANA ID using the Azure Maps Timezone SDK. It creates a MapsTimeZoneClient with an Azure Key Credential, specifies a Windows timezone ID, and handles potential HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\n\nsubscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\", \"your subscription key\")\n\ndef convert_windows_timezone_to_iana():\n    from azure.core.credentials import AzureKeyCredential\n    from azure.maps.timezone import MapsTimeZoneClient\n\n    timezone_client = MapsTimeZoneClient(credential=AzureKeyCredential(subscription_key))\n    try:\n        result = timezone_client.convert_windows_timezone_to_iana(windows_timezone_id=\"Pacific Standard Time\")\n        print(result)\n    except HttpResponseError as exception:\n        if exception.error is not None:\n            print(f\"Error Code: {exception.error.code}\")\n            print(f\"Message: {exception.error.message}\")\n\nif __name__ == '__main__':\n    convert_windows_timezone_to_iana()\n```\n\n----------------------------------------\n\nTITLE: Executing Specific Performance Test\nDESCRIPTION: Example command for running a specific performance test (ListArtifactsTest) with custom parallel execution and duration parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-containerregistry/tests> perfstress ListArtifactsTest --parallel=50 --duration=15\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Security DevOps Management SDK using DefaultAzureCredential\nDESCRIPTION: Code sample demonstrating how to authenticate with the Azure Security DevOps Management SDK using DefaultAzureCredential. The sample retrieves the subscription ID from environment variables and initializes the client with the appropriate credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/securitydevops/azure-mgmt-securitydevops/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.securitydevops import MicrosoftSecurityDevOps\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftSecurityDevOps(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Hybrid Kubernetes Client - Python\nDESCRIPTION: This Python code snippet initializes the Azure Hybrid Kubernetes management client by first importing required modules and then reading the \"AZURE_SUBSCRIPTION_ID\" environment variable. It uses DefaultAzureCredential from azure-identity for authentication and creates a ConnectedKubernetesClient from azure-mgmt-hybridkubernetes. Dependencies: azure-identity, azure-mgmt-hybridkubernetes, and correctly set environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, AZURE_SUBSCRIPTION_ID). The key input is the authenticated credential and subscription id. The expected behavior is a configured client ready for further SDK operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridkubernetes/azure-mgmt-hybridkubernetes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridkubernetes import ConnectedKubernetesClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ConnectedKubernetesClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Timezone Package with pip\nDESCRIPTION: Command to install the Azure Maps Timezone client library for Python using pip. The --pre flag indicates this is a pre-release version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-timezone --pre\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ProvisionerApplicationOid in PowerShell\nDESCRIPTION: Defines the optional 'ProvisionerApplicationOid' parameter. The description needs to be filled in ({{ Fill ProvisionerApplicationOid Description }}). It's a string, applicable to the 'Provisioner' parameter set, not required, named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Qumulo Management SDK and Identity Library - Bash\nDESCRIPTION: Installs the Microsoft Azure Qumulo Management Client Library and the Azure Identity credentials helper using pip. This step is required before using any Python code that references the SDK. Both packages are needed for authentication and management operations in subsequent code samples. These commands are to be run in a Unix shell with Python 3.8+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/qumulo/azure-mgmt-qumulo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-mgmt-qumulo\\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running the Form Recognizer Performance Test Tool\nDESCRIPTION: Commands to navigate to the perfstress tests directory and list available performance tests using the perfstress command line tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-formrecognizer> cd tests/perfstress_tests/\n(env) ~/azure-ai-formrecognizer/tests/perfstress_tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: JSON and File-Based Authentication using azure-common in Python\nDESCRIPTION: This example illustrates the legacy approach to authenticating Azure SDK clients by loading credentials either from a JSON dictionary or a credentials file using azure-common functions. The code uses get_client_from_json_dict and get_client_from_auth_file to instantiate a KeyVaultManagementClient. Prerequisites include azure-common and azure-mgmt-keyvault, plus access to the credential file or dictionary in the required format. Returns an authenticated KeyVaultManagementClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.client_factory import get_client_from_json_dict, get_client_from_auth_file\\nfrom azure.mgmt.keyvault import KeyVaultManagementClient\\n# Provide credentials in JSON:\\njson_dict = {\\n    \"clientId\": \"...\",\\n    \"clientSecret\": \"...\",\\n    \"subscriptionId\": \"...\",\\n    \"tenantId\": \"...\",\\n    \"activeDirectoryEndpointUrl\": \"https://login.microsoftonline.com\",\\n    \"resourceManagerEndpointUrl\": \"https://management.azure.com\"\\n}\\nclient = get_client_from_json_dict(KeyVaultManagementClient, json_dict)\\n# Or, provide credentials from a JSON file:\\nclient = get_client_from_auth_file(KeyVaultManagementClient, \"credentials.json\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Python Dependencies\nDESCRIPTION: Lists required dependencies for Azure SDK Python development including local package references to azure-sdk-tools, azure-core, azure-identity as well as external dependencies msrestazure and aiohttp version 3.0 or higher.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\nmsrestazure\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Neonpostgres Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the Azure Neonpostgres Management Client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set correctly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/neonpostgres/azure-mgmt-neonpostgres/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.neonpostgres import NeonPostgresMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NeonPostgresMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Quota Management and Identity Libraries using pip (Bash)\nDESCRIPTION: This snippet shows the necessary pip commands to install the Azure Quota Management client library (`azure-mgmt-quota`) and the Azure Identity library (`azure-identity`). These packages are prerequisites for interacting with the Azure Quota API and authenticating requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/quota/azure-mgmt-quota/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-quota\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Orbital Management Client Library for Python\nDESCRIPTION: This snippet shows how to install the Azure Orbital Management Client Library and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/orbital/azure-mgmt-orbital/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-orbital\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Agent Resources in Python\nDESCRIPTION: Performs cleanup by deleting vector store, uploaded files, and agent resources after completing operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n# Delete the file when done\nproject_client.agents.delete_vector_store(vector_store.id)\nprint(\"Deleted vector store\")\n\nproject_client.agents.delete_file(file_id=file.id)\nprint(\"Deleted file\")\n\n# Delete the agent when done\nproject_client.agents.delete_agent(agent.id)\nprint(\"Deleted agent\")\n```\n\n----------------------------------------\n\nTITLE: Running Span Event Sample\nDESCRIPTION: Steps to run the span event sample application. Requires setting the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable before execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_span_event.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Weightsandbiases Management Client using DefaultAzureCredential\nDESCRIPTION: Example code that demonstrates how to authenticate with the Azure Weightsandbiases Management Client using DefaultAzureCredential. Requires environment variables for authentication and subscription ID to be set up.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/weightsandbiases/azure-mgmt-weightsandbiases/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.weightsandbiases import WeightsAndBiasesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WeightsAndBiasesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Renaming DataSourceType to DatasourceType\nDESCRIPTION: Directive to rename DataSourceType enum to DatasourceType for consistent naming across the SDK in both paths and definitions sections.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"]\n    transform: >\n      $[\"/dataFeeds\"][\"get\"][\"parameters\"][1][\"x-ms-enum\"][\"name\"] = \"DatasourceType\";\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataFeedDetail\"][\"properties\"][\"dataSourceType\"][\"x-ms-enum\"][\"name\"] = \"DatasourceType\";\n      $[\"DataFeedDetailPatch\"][\"properties\"][\"dataSourceType\"][\"x-ms-enum\"][\"name\"] = \"DatasourceType\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Springappdiscovery Management and Identity Packages in Bash\nDESCRIPTION: This snippet provides the pip commands required to install both the Azure Springappdiscovery Management Client Library and the Azure Identity library for Python. These packages are prerequisites for building authenticated Azure management clients in Python. Run the commands in a terminal to add the libraries to your Python environment before writing or executing any SDK-related Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/springappdiscovery/azure-mgmt-springappdiscovery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-springappdiscovery\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Web PubSub Service Client - Bash\nDESCRIPTION: Demonstrates the pip-based installation of the azure-messaging-webpubsubservice Python package. Requires Python 3.6 or later and network access to PyPi repositories. Intended for command-line usage prior to utilizing the SDK in Python applications. No input or output beyond installation feedback. Must be run in the terminal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-messaging-webpubsubservice\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure SDK\nDESCRIPTION: This configuration snippet lists Python package dependencies required for an Azure SDK project. It specifies an editable installation (`-e`) for local development tools (`azure-sdk-tools`) located relatively. It also includes core Azure libraries (`azure-core`, `azure-mgmt-core`), the Azure identity library (`azure-identity`), and the `aiohttp` library for asynchronous HTTP requests. These dependencies are typically installed using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/arizeaiobservabilityeval/azure-mgmt-arizeaiobservabilityeval/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Neonpostgres Management Client Library in Python\nDESCRIPTION: This snippet shows how to install the Azure Neonpostgres Management Client Library and Azure Identity package using pip. These packages are required for authenticating and interacting with Azure Neonpostgres services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/neonpostgres/azure-mgmt-neonpostgres/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-neonpostgres\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Enabling Continuous Access Evaluation for Key Vault in Python\nDESCRIPTION: Shows how to enable Continuous Access Evaluation (CAE) for Key Vault by passing enable_cae=True to all get_token requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Enable Continuous Access Evaluation\ntoken = credential.get_token(\"https://vault.azure.net/.default\", enable_cae=True)\n```\n\n----------------------------------------\n\nTITLE: Generating SDK Code using Autorest\nDESCRIPTION: Commands to navigate to the swagger folder and run autorest with the SWAGGER.md configuration file to generate the client library code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/swagger/SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Mobile Network Management SDK and Identity Packages with pip\nDESCRIPTION: Installs the required packages for working with Azure Mobile Network Management. This includes the core management package and the identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mobilenetwork/azure-mgmt-mobilenetwork/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-mobilenetwork\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Generation for Azure Monitor Query Client\nDESCRIPTION: Settings for generating query-related code. It specifies the input file, output folder, and client details for the query component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n  - https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/operationalinsights/data-plane/Microsoft.OperationalInsights/stable/2022-10-27/OperationalInsights.json\noutput-folder: ../azure/monitor/query/_generated\ntitle: MonitorQueryClient\ndescription: Azure Monitor Query Python Client\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Confidential Ledger Dependencies with pip\nDESCRIPTION: Commands to install the required Azure packages for Confidential Ledger management using pip package manager. Installs both the confidential ledger management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-mgmt-confidentialledger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-confidentialledger\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing All Configuration Snapshots in Python\nDESCRIPTION: This snippet demonstrates how to list all available configuration snapshots in Azure App Configuration. It calls the `list_snapshots` method on the client and iterates through the resulting list of snapshots, printing each one. Requires an initialized `client`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfor snapshot in client.list_snapshots():\n    print(snapshot)\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with API Key Authentication\nDESCRIPTION: Creates a Document Translation client instance using AzureKeyCredential authentication method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\n\ndocument_translation_client = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n```\n\n----------------------------------------\n\nTITLE: Installing the Health Insights Clinical Matching Package with pip\nDESCRIPTION: Command to install the azure-healthinsights-clinicalmatching package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-healthinsights-clinicalmatching\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Management Packages - Bash\nDESCRIPTION: Demonstrates the installation of required Azure SDK packages for managing Application Insights resources in Python. The commands use pip to install both the management client and the authentication library. These must be executed in a terminal or command prompt with internet access, and Python 3.8+ is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/applicationinsights/azure-mgmt-applicationinsights/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-applicationinsights\\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Performing a Full Key Restore in Azure Key Vault (Python)\nDESCRIPTION: Demonstrates how to restore an entire collection of keys from a backup using KeyVaultBackupClient with a specified backup folder URL and managed identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# `backup_result` is the KeyVaultBackupResult returned by `begin_backup`\nclient.begin_restore(backup_result.folder_url, use_managed_identity=True).wait()\nprint(\"Vault restored successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token\nDESCRIPTION: Python code for generating a Shared Access Signature (SAS) token using azure-mgmt-maps package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maps import AzureMapsManagementClient\n\ndef main():\n    client = AzureMapsManagementClient(\n        credential=DefaultAzureCredential(),\n        subscription_id=\"your-subscription-id\",\n    )\n\n    response = client.accounts.list_sas(\n        resource_group_name=\"myResourceGroup\",\n        account_name=\"myMapsAccount\",\n        maps_account_sas_parameters={\n            \"expiry\": \"2017-05-24T11:42:03.1567373Z\",\n            \"maxRatePerSecond\": 500,\n            \"principalId\": \"your-principal-id\",\n            \"regions\": [\"eastus\"],\n            \"signingKey\": \"primaryKey\",\n            \"start\": \"2017-05-24T10:42:03.1567373Z\",\n        },\n    )\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Example SchemaRegistry Performance Test Command\nDESCRIPTION: Example command for running the GetSchemaByIdTest performance test with specific parameters including parallel execution, duration, schema size, and number of schemas.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-schemaregistry/tests> perfstress GetSchemaByIdTest --parallel=2 --duration=100 --schema-size=500 --num-schemas=100\n```\n\n----------------------------------------\n\nTITLE: Constructing a Patient Record for Clinical Trial Matching\nDESCRIPTION: Python code for creating a PatientRecord object with demographic information and clinical data needed for trial matching.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Construct Patient\npatient_info = models.PatientInfo(sex=models.PatientInfoSex.MALE, birth_date=datetime.date(1965, 12, 26),\n                                  clinical_info=clinical_info_list)\npatient1 = models.PatientRecord(id=\"patient_id\", info=patient_info)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Synapse Access Control Client\nDESCRIPTION: Demonstrates how to create an Azure Synapse Access Control client using different authentication methods including AzureKeyCredential and DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_data/match_trial_clinical_note.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.synapse.accesscontrol import AccessControlClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.credentials import AzureKeyCredential\n\n# Create the Access Control client\nendpoint = \"https://<my-workspace-name>.dev.azuresynapse.net\"\n\n# Using key authentication\ncredential = AzureKeyCredential(\"<key>\")\naccess_control_client = AccessControlClient(endpoint, credential)\n\n# Using Azure Active Directory authentication\ntokenCredential = DefaultAzureCredential()\naccess_control_client = AccessControlClient(endpoint, tokenCredential)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Agent Tools Property for Function-Type Tools - Python\nDESCRIPTION: Filters the 'agent.tools' property to display only those tools of type 'function', printing their definitions as indented JSON. Useful for confirming which function tools are active on a particular agent. Assumes 'agent.tools' contains tool objects with a type attribute; printing uses json.dumps for formatted output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/FunctionTool.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[print(json.dumps(tool.as_dict(), indent=4)) for tool in agent.tools if tool.type == \"function\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Network Access for a Vault in Python\nDESCRIPTION: Example of setting the public_network_access property on a vault, which was added in version 9.2.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.keyvault import KeyVaultManagementClient\nfrom azure.mgmt.keyvault.models import VaultCreateOrUpdateParameters, VaultProperties\n\n# Create client\nkv_client = KeyVaultManagementClient(credential, subscription_id)\n\n# Configure vault properties\nvault_properties = VaultProperties(\n    tenant_id=\"tenant-id\",\n    sku=Sku(name=\"standard\", family=\"A\"),\n    public_network_access=\"Enabled\"  # or \"Disabled\"\n)\n\n# Create or update vault\nkv_client.vaults.begin_create_or_update(\n    resource_group_name=\"my-resource-group\",\n    vault_name=\"my-key-vault\",\n    parameters=VaultCreateOrUpdateParameters(location=\"eastus\", properties=vault_properties)\n)\n```\n\n----------------------------------------\n\nTITLE: Deserializing with AvroSerializer (Legacy)\nDESCRIPTION: Example showing how to deserialize Avro-encoded data using the legacy AvroSerializer class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith serializer:\n    decoded_value = serializer.deserialize(value=encoded_payload)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Python SDK with pip\nDESCRIPTION: Command to install the Azure Event Hubs client library for Python using pip package manager. This is required to run any of the provided samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventhub\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Storage Actions Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the Storage Actions Management Client using DefaultAzureCredential and environment variables for Azure credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storageactions/azure-mgmt-storageactions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storageactions import StorageActionsMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageActionsMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Azure Identity SDK - Shell\nDESCRIPTION: Changes the shell working directory to the Azure Identity SDK subfolder within the cloned Azure SDK for Python repository. Ensures subsequent commands (e.g., installing dependencies or running tests) operate in the correct context. Dependency: repository must have been cloned as described in the previous step.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd azure-sdk-for-python/sdk/identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Applying Autorest Directive to Make Specific Properties Optional in YAML\nDESCRIPTION: This YAML snippet applies the previously declared 'make-property-optional' Autorest directive to various models and properties. It targets specific properties within models like `NotificationHook`, `EmailNotificationHook`, `AzureLogAnalyticsDataFeedSource`, `SuppressCondition`, `SmartDetectionCondition`, `HardThresholdCondition`, and `ChangeThresholdCondition`, removing them from the 'required' list to make them optional parameters in the generated SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-model: NotificationHook\n    make-property-optional: hookName\n  - where-model: EmailNotificationHook\n    make-property-optional: hookParameter\n  - where-model: WebNotificationHook\n    make-property-optional: hookParameter\n  - where-model: WebhookHookParameter\n    make-property-optional: endpoint\n  - where-model: EmailHookParameter\n    make-property-optional: toList\n  - where-model: AzureLogAnalyticsDataFeedSource\n    make-property-optional: tenantId\n  - where-model: AzureLogAnalyticsDataFeedSource\n    make-property-optional: clientId\n  - where-model: AzureLogAnalyticsDataFeedSource\n    make-property-optional: clientSecret\n  - where-model: SuppressCondition\n    make-property-optional: minNumber\n  - where-model: SuppressCondition\n    make-property-optional: minRatio\n  - where-model: SmartDetectionCondition\n    make-property-optional: anomalyDetectorDirection\n  - where-model: SmartDetectionCondition\n    make-property-optional: sensitivity\n  - where-model: SmartDetectionCondition\n    make-property-optional: suppressCondition\n  - where-model: HardThresholdCondition\n    make-property-optional: anomalyDetectorDirection\n  - where-model: HardThresholdCondition\n    make-property-optional: suppressCondition\n  - where-model: ChangeThresholdCondition\n    make-property-optional: anomalyDetectorDirection\n  - where-model: ChangeThresholdCondition\n    make-property-optional: changePercentage\n  - where-model: ChangeThresholdCondition\n    make-property-optional: shiftPoint\n  - where-model: ChangeThresholdCondition\n    make-property-optional: suppressCondition\n  - where-model: ChangeThresholdCondition\n    make-property-optional: withinRange\n```\n\n----------------------------------------\n\nTITLE: Executing All Tests using pytest (cmd)\nDESCRIPTION: Runs all discovered tests within the current directory and subdirectories using the `pytest` command in the Windows Command Prompt (`cmd`). Assumes `pytest` is installed and accessible in the system's PATH, and the necessary environment setup (like environment variables and Azure login) has been completed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements for Azure SDK\nDESCRIPTION: This snippet lists all the required Python packages with their specific versions for the Azure SDK for Python project. It includes packages for CI tools, testing, Azure SDK tools dependencies, and local development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/ci_tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# requirements leveraged by ci tools\n# setuptools 75.3.2 is the last version of setuptools that supports python 3.8.\n# it can be bumped further only when py3.8 is completely eliminated from CI\nsetuptools==75.3.2\nvirtualenv==20.29.3\nwheel==0.45.1\npackaging==24.2\ntox==4.24.2\npathlib2==2.3.7.post1\ndoc-warden==0.7.2\nbeautifulsoup4==4.13.3\npkginfo==1.12.1.2\npip==24.0\ntyping-extensions==4.12.2\npyproject-api==1.8.0\ncibuildwheel==2.16.5\nimportlib-metadata==8.5.0\n\n# requirements leveraged for testing\npytest==8.3.5\npytest-cov==5.0.0\ncoverage==7.6.1\n\n# locking packages defined as deps from azure-sdk-tools\nJinja2==3.1.6\njson-delta==2.0.2\nreadme_renderer==43.0\npython-dotenv==1.0.1\npyyaml==6.0.2\nurllib3==2.2.3\nsix==1.17.0\n\n# local dev packages\n./tools/azure-sdk-tools[build]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Tables Client Library with pip\nDESCRIPTION: Shows how to install the Azure Data Tables client library for Python using pip. This is a prerequisite step for using the library in your projects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-data-tables\n```\n\n----------------------------------------\n\nTITLE: Empty Update in Azure Network Management Client 25.2.0\nDESCRIPTION: This code snippet indicates that version 25.2.0 of the Azure Network Management Client was released with no specific changes noted.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 25.2.0 (2023-12-18)\n\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for Azure SDK for Python development. It includes references to internal tools, the Azure Core package, and the Azure Identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/template/azure-template/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Black Code Formatter in pyproject.toml\nDESCRIPTION: YAML configuration to opt-in to Black code formatting validation in the pyproject.toml file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n[tool.azure-sdk-build]\n...other checks enabled/disabled\nblack = true\n...other checks enabled/disabled\n```\n\n----------------------------------------\n\nTITLE: Raw Autorest Command for ARM Management Swagger\nDESCRIPTION: Basic Autorest command for generating Python code from an ARM management Swagger specification. This includes essential parameters for ARM compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generation.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nautorest --version=latest --python --azure-arm=true --payload-flattening-threshold=2 --input-file=myswagger.json\n```\n\n----------------------------------------\n\nTITLE: Building Import Content Payload for Azure Device Update in Python\nDESCRIPTION: This code constructs the content payload for the import_update API call by gathering payload and manifest file paths and URLs from environment variables, and using helper functions to compute artifact metadata. Dependencies include the proper environment variables and the preceding utility functions for file hash and size. The content object is structured as required by DeviceUpdateClient, with filenames, URLs, sizes, and hashes, ready for use in an import operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ImportUpdate/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npayload_file = os.environ[\"DEVICEUPDATE_PAYLOAD_FILE\"]\npayload_url = os.environ[\"DEVICEUPDATE_PAYLOAD_URL\"]\nmanifest_file = os.environ[\"DEVICEUPDATE_MANIFEST_FILE\"]\nmanifest_url = os.environ[\"DEVICEUPDATE_MANIFEST_URL\"]\n\ncontent = [{\n    \"importManifest\": {\n        \"url\": manifest_url,\n        \"sizeInBytes\": get_file_size(manifest_file),\n        \"hashes\": {\n            \"sha256\": get_file_hash(manifest_file)\n        }\n    },\n    \"files\": [{\n        \"fileName\": os.path.basename(payload_file),\n        \"url\": payload_url\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Querying Digital Twins in Python\nDESCRIPTION: This snippet shows how to query digital twins using a query expression. It selects all twins of a specific model type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nquery_expression = \"SELECT * FROM digitaltwins t where IS_OF_MODEL('dtmi:billmanh:patron;1')\"\nquery_result = service_client.query_twins(query_expression)\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Default Batch Sanitizers in Test Proxy for Python\nDESCRIPTION: This snippet removes a specific sanitizer (e.g., body key sanitizer with ID 'AZSDK3493') from the test proxy's default set by calling remove_batch_sanitizers in a pytest fixture. This may be necessary if default sanitizers prevent correct test playback. Dependencies are pytest and devtools_testutils; use with caution to avoid leaking secrets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import remove_batch_sanitizers, test_proxy\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef add_sanitizers(test_proxy):\n    ...\n    #  Remove the following body key sanitizer: AZSDK3493: $..name\n    remove_batch_sanitizers([\"AZSDK3493\"])\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp for Async Samples (Bash)\nDESCRIPTION: Installs the `aiohttp` package using pip. This package is a prerequisite for running the asynchronous client samples provided in the `async_samples` subfolder, enabling asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Listing key properties with azure-keyvault-keys\nDESCRIPTION: Shows how to list properties of keys in a vault using the new azure-keyvault-keys library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nkeys = key_client.list_properties_of_keys()\n\nfor key in keys:\n    print(key.name)\n    print(key.created_on)\n```\n\n----------------------------------------\n\nTITLE: Building Blob Client with Shared Key Credential in Azure Storage SDK\nDESCRIPTION: Demonstrates how to instantiate a blob service client using Shared Key authentication in both version 2.X (using BlockBlobService) and version 12 (using BlobServiceClient) of the Azure Storage SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlockBlobService\nservice = BlockBlobService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\n\nservice = BlobServiceClient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential={'account_name': \"<storage-account-name>\", 'account_key': \"<account-access-key>\"})\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.0.0\nDESCRIPTION: Release notes documenting feature additions and breaking changes in version 1.0.0, including new operation groups and model updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2024-10-11)\n\n### Features Added\n\n  - Enum `Origin` added member `CUSTOMER_ON_DEMAND`\n  - Model `ServerForUpdate` added property `administrator_login`\n  - Model `BackupsOperations` added method `begin_create`\n  - Model `BackupsOperations` added method `begin_delete`\n  - Added operation group `LongRunningBackupOperations`\n  - Added operation group `LongRunningBackupsOperations`\n  - Added operation group `MaintenancesOperations`\n  - Added operation group `LogFilesOperations`\n  - Added operation group `MigrationsOperations`\n  - Added operation group `PrivateEndpointConnectionOperations`\n  - Added operation group `VirtualEndpointsOperations`\n  - Added operation group `ServerThreatProtectionSettingsOperations`\n  - Added operation group `AdvancedThreatProtectionSettingsOperations`\n  - Added operation group `LocationBasedCapabilitySetOperations`\n  - Added operation group `OperationProgressOperations`\n  - Added operation group `OperationResultsOperations`\n  - Model `DataEncryption` has a new parameter `geo_backup_encryption_key_status`\n  - Model `DataEncryption` has a new parameter `geo_backup_key_uri`\n  - Model `DataEncryption` has a new parameter `geo_backup_user_assigned_identity_id`\n  - Model `DataEncryption` has a new parameter `primary_encryption_key_status`\n  - Model `Storage` has a new parameter `auto_grow`\n  - Model `Storage` has a new parameter `iops`\n  - Model `Storage` has a new parameter `iops_tier`\n  - Model `Storage` has a new parameter `throughput`\n  - Model `Storage` has a new parameter `type`\n  - Model `Server` has a new parameter `private_endpoint_connections`\n  - Model `Server` has a new parameter `replica`\n  - Model `ServerForUpdate` has a new parameter `replica`\n\n### Breaking Changes\n\n  - Deleted or renamed client operation group `PostgreSQLManagementClient.quota_usages`\n  - Deleted or renamed model `NameProperty`\n  - Deleted or renamed model `QuotaUsage`\n  - Deleted or renamed model `QuotaUsagesOperations`\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Operation in Azure Monitor Ingestion\nDESCRIPTION: This snippet shows how to enable detailed logging for a single operation in the Azure Monitor Ingestion client library, even when it's not enabled for the entire client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.upload(rule_id, stream_name, logs, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Attestation Library via pip (Powershell)\nDESCRIPTION: This command uses pip, the Python package installer, within a Powershell environment to install the `azure-security-attestation` library. This library is required to interact with the Azure Attestation service using Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\npip install azure-security-attestation\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Credentials Parameter in Azure Python SDK\nDESCRIPTION: Highlights the breaking change in client authentication. The `credentials` parameter is renamed to `credential`. Legacy credential types from `azure.common.credentials` or `msrestazure.azure_active_directory` are no longer supported; use classes from the `azure-identity` package instead.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ncredential\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Migration Discovery SAP Management SDK in Python\nDESCRIPTION: Commands for installing the Azure Migration Discovery SAP Management package and the Azure Identity package, which is required for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/migrationdiscovery/azure-mgmt-migrationdiscoverysap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-migrationdiscoverysap\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Renaming Idle Timeout Parameter in Receivers (Python)\nDESCRIPTION: Renamed the `idle_timeout` parameter in `get_<queue/subscription>_receiver()` methods to `max_wait_time` for better consistency with naming conventions used elsewhere in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nget_queue_receiver(idle_timeout=...) -> get_queue_receiver(max_wait_time=...)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dynatrace Management Client Library in Python\nDESCRIPTION: This snippet shows how to install the Azure Dynatrace Management Client Library and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dynatrace/azure-mgmt-dynatrace/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-dynatrace\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Adding Test Proxy to PATH in PowerShell (Mac/Linux)\nDESCRIPTION: Command to add the test proxy executable to the PATH environment variable in a PowerShell session on Mac or Linux.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/recording_migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PATH += ':<path-to-repo>/azure-sdk-for-python/.proxy'\n```\n\n----------------------------------------\n\nTITLE: Initializing Class Constructors with Type-Annotated __init__ in Python\nDESCRIPTION: Shows a class KeyCredential with its __init__ method explicitly returning None to indicate type-checked constructor, following Python and mypy conventions. No additional dependencies required. Intended for Python classes where constructor parameters don't require typing, enhancing static checking clarity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass KeyCredential:\\n\\n    def __init__(self) -> None:\\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Registry with Admin Enabled using Azure CLI in Shell\nDESCRIPTION: This snippet uses the Azure CLI to create a new Azure Container Registry (ACR) within a resource group. Required parameters include valid and unique ACR_NAME and RESOURCE_GROUP. Admin is enabled, and the basic pricing tier is specified. Azure CLI authentication, permissions, and unique global ACR name are required. The result is a new ACR instance available for image storage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\naz acr create -g $RESOURCE_GROUP -n $ACR_NAME --admin-enabled --sku basic\n```\n\n----------------------------------------\n\nTITLE: Managing Network Public IP Addresses\nDESCRIPTION: Examples of creating, getting, updating, and deleting public IP addresses using the NetworkManagementClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/mgmt_quickstart.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGROUP_NAME = \"testgroup\"\nPUBLIC_IP_ADDRESS = \"public_ip_address_name\"\n\n# Create Resource Group\nresource_client.resource_groups.create_or_update(\n    GROUP_NAME,\n    {\"location\": \"eastus\"}\n)\n\n# Create Public IP Address\npublic_ip_address = network_client.public_ip_addresses.begin_create_or_update(\n    GROUP_NAME,\n    PUBLIC_IP_ADDRESS,\n    {\n      \"location\": \"eastus\"\n    }\n).result()\nprint(\"Create Public IP Address:\\n{}\".format(public_ip_address))\n```\n\nLANGUAGE: python\nCODE:\n```\npublic_ip_address = network_client.public_ip_addresses.get(\n  GROUP_NAME,\n  PUBLIC_IP_ADDRESS\n)\nprint(\"Get Public IP Address:\\n{}\".format(public_ip_address))\n```\n\nLANGUAGE: python\nCODE:\n```\npublic_ip_address = network_client.public_ip_addresses.update_tags(\n  GROUP_NAME,\n  PUBLIC_IP_ADDRESS,\n  {\n    \"tags\": {\n      \"tag1\": \"value1\",\n      \"tag2\": \"value2\"\n    }\n  }\n)\nprint(\"Updated Public IP Address \\n{}\".format(public_ip_address))\n```\n\nLANGUAGE: python\nCODE:\n```\npublic_ip_address = network_client.public_ip_addresses.begin_delete(\n  GROUP_NAME,\n  PUBLIC_IP_ADDRESS\n).result()\nprint(\"Delete Public IP Address.\\n\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Key Vault Administration Performance Tests\nDESCRIPTION: Installs the required dependencies for running performance tests, including dev_requirements and the local package in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-administration> pip install -r dev_requirements.txt\n(env) ~/azure-keyvault-administration> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Service Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip package manager. Installs the container service management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-containerservice\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage Enforcement in pyproject.toml\nDESCRIPTION: TOML configuration for setting up absolute code coverage requirements for a package. This allows ensuring that a package maintains a specific code coverage percentage during testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.azure-sdk-build]\nabsolute_cov = true\nabsolute_cov_percent = 75.00\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest Settings for Authoring API (Conditional)\nDESCRIPTION: This YAML block defines Autorest settings applied only when the `release_authoring_1_1` tag is specified. It sets the input OpenAPI specification file URL for authoring operations, the output folder specific to the authoring client, and the title for the generated client class (`ConversationAuthoringClient`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'release_authoring_1_1'\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/53240ebc58b3c4e99de723194032064db1d97e63/specification/cognitiveservices/data-plane/Language/stable/2023-04-01/analyzeconversations-authoring.json\noutput-folder: ../azure/ai/language/conversations/authoring\ntitle: ConversationAuthoringClient\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Monitor Ingestion Constants - Python\nDESCRIPTION: Defines all necessary constants for Azure AD authentication and configuration of Azure Monitor Data Collection Rule (DCR) and Endpoint in Python. These constants, such as tenant ID, client ID, client secret, stream name, rule ID, and data collection endpoint, must be provided before authentication and data ingestion can take place. All values should be replaced with configuration from your Azure environment, and the values serve as required parameters for the ingestion client setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nAZURE_TENANT_ID = \"<Tenant ID>\"; # ID of the tenant where the data collection endpoint resides\\nAZURE_CLIENT_ID = \"<Application ID>\"; # Application ID to which you granted permissions to your data collection rule\\nAZURE_CLIENT_SECRET = \"<Client secret>\"; # Secret created for the application\\n\\nLOGS_DCR_STREAM_NAME = \"<Custom stream name>\" # Name of the custom stream from the data collection rule (e.g. \"Custom-DetectedAnomalies_CL\")\\nLOGS_DCR_RULE_ID = \"<Data collection rule immutableId>\" # immutableId of your data collection rule (Can be found in the JSON View of the data collection rule overview page)\\nDATA_COLLECTION_ENDPOINT =  \"<Logs ingestion URL of your endpoint>\" # URL that looks like this: https://xxxx.ingest.monitor.azure.com\n```\n\n----------------------------------------\n\nTITLE: Correcting Model Class Import Path in azure-mgmt-containerregistry (Python)\nDESCRIPTION: Details the v3.0.0rc2 breaking change where model classes (e.g., `MyClass`) could no longer be imported directly from their specific file within the `models` sub-module (e.g., `azure.mgmt.containerregistry.v20xx_yy_zz.models.my_class`). The correct pattern is to import model classes from the `models` sub-module itself (e.g., `from azure.mgmt.containerregistry.v20xx_yy_zz.models import MyClass`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect model import path after v3.0.0rc2\n# import azure.mgmt.containerregistry.v20xx_yy_zz.models.my_class\n```\n\nLANGUAGE: python\nCODE:\n```\n# Correct model import path starting from v3.0.0rc2\nfrom azure.mgmt.containerregistry.v20xx_yy_zz.models import MyClass\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Virtual Environment in Bash\nDESCRIPTION: This snippet shows how to create a new Conda virtual environment named 'agent-evals' specifically with Python version 3.11 and then activate it. This isolates the project dependencies. Requires Conda to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n agent-evals python=3.11\nconda activate agent-evals\n```\n\n----------------------------------------\n\nTITLE: Configuring Breaking Changes Ignore List in Python\nDESCRIPTION: Example configuration showing how to ignore specific breaking changes in different Azure packages by defining tuples that specify the type and location of approved breaking changes or false positives.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/breaking_changes_checker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nIGNORE_BREAKING_CHANGES = {\n    \"azure-ai-formrecognizer\": [\n        (\"RemovedOrRenamedClientMethod\", \"azure.ai.formrecognizer.aio\", \"FormTrainingClient\", \"begin_training\"),\n        (\"RemovedOrRenamedClass\", \"azure.ai.formrecognizer\", \"FormElement\"),\n    ],\n    \"azure-storage-queue\": [\n        (\"RemovedOrRenamedModule\", \"azure.storage.queue.aio\"),\n        (\"RemovedOrRenamedModuleLevelFunction\", \"azure.storage.queue\", \"generate_queue_sas\")\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Lake Store Management Package\nDESCRIPTION: Commands for installing the Azure Data Lake Store Management client library and Azure Identity packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-store/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-datalake-store\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Property Flattening in Azure Authorization SDK Models (v0.40.0)\nDESCRIPTION: Version 0.40.0 introduced a breaking change where model properties previously nested under a `properties` attribute were flattened. Access to these properties should be done directly on the model object itself, removing the need for the intermediate `properties` attribute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n# Old access pattern:\n# email = model_instance.properties.email_address\n\n# New access pattern (from v0.40.0):\n# email = model_instance.email_address\n```\n\n----------------------------------------\n\nTITLE: Installing Azure MSI Management Client Package with pip\nDESCRIPTION: Installation commands for the Azure MSI Management Client and Azure Identity packages using pip. These are the core prerequisites needed to use the MSI management functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-msi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-msi\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Retry Settings in Azure Cosmos DB Python SDK\nDESCRIPTION: Example showing how to configure connection retry settings including total retries (7), connection error retries (5), socket read retries (4), retry backoff factor (2), and maximum retry backoff time (20s). The retry backoff factor determines how retry wait times increase exponentially.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/docs/TimeoutAndRetriesConfig.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\n\nclient = CosmosClient(URL, credential=KEY, retry_total = 7, retry_connect=5, retry_read=4, retry_backoff_factor=2, retry_backoff_max=20)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Box Management Dependencies with pip\nDESCRIPTION: Commands to install the required packages for using the Azure Data Box Management Client Library. Installs both the azure-mgmt-databox package and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databox/azure-mgmt-databox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-databox\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Configuration Store using Azure CLI (Powershell)\nDESCRIPTION: This Azure CLI command creates a new Azure App Configuration store instance. It requires the Azure CLI to be installed and configured. Specify a unique name for the store, the resource group it belongs to, and the desired Azure location (eastus in this example). This is a prerequisite for using the App Configuration service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Connection String Environment Variable\nDESCRIPTION: Sets the AZURE_STORAGE_CONNECTION_STRING environment variable required for accessing live storage resources in the performance tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nAZURE_STORAGE_CONNECTION_STRING=<live storage account connection string>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure MySQL Flexible Servers Management Client in Python\nDESCRIPTION: Demonstrates how to authenticate with the Azure MySQL Flexible Servers Management Client using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mysqlflexibleservers/azure-mgmt-mysqlflexibleservers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.mysqlflexibleservers import MySQLManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MySQLManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Renaming IncidentStatus to AnomalyIncidentStatus\nDESCRIPTION: Directive to rename IncidentStatus enum to AnomalyIncidentStatus to better reflect its relationship to anomaly incidents.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"][\"IncidentProperty\"][\"properties\"][\"incidentStatus\"][\"x-ms-enum\"]\n    transform: >\n      $[\"name\"] = \"AnomalyIncidentStatus\";\n```\n\n----------------------------------------\n\nTITLE: Removing client_credential Parameter from OnBehalfOfCredential in Python\nDESCRIPTION: Breaking change in version 1.7.0 where the `client_credential` parameter in the constructor of `OnBehalfOfCredential` was removed. Users should use `client_secret` or `client_certificate` parameters instead to provide the application's own credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclient_credential` in the ctor of `OnBehalfOfCredential`\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Confluent Management Client using DefaultAzureCredential\nDESCRIPTION: This code demonstrates how to authenticate the Confluent Management Client using DefaultAzureCredential. It requires the AZURE_SUBSCRIPTION_ID environment variable to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confluent/azure-mgmt-confluent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.confluent import ConfluentManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ConfluentManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Basic CDN API Configuration in YAML\nDESCRIPTION: Defines the basic configuration settings for the CDN Management API including title, description, type and package version tag.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/single_api/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: CdnManagementClient\ndescription: Cdn Management Client\nopenapi-type: arm\ntag: package-2019-06\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Managed Network Fabric Client\nDESCRIPTION: Example showing how to authenticate and initialize the Managed Network Fabric client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managednetworkfabric/azure-mgmt-managednetworkfabric/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.managednetworkfabric import ManagedNetworkFabricMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ManagedNetworkFabricMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Sending Service Share Invitation\nDESCRIPTION: Sends a share invitation to a service specified by tenant ID and object ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\ntargetActiveDirectoryId = uuid.uuid4()\ntargetObjectId = uuid.uuid4()\n\nsent_share_invitation = {\n    \"invitationKind\": \"Service\",\n    \"properties\": {\n        \"targetActiveDirectoryId\": str(targetActiveDirectoryId),\n        \"targetObjectId\": str(targetObjectId)\n    }\n}\n\ninvitation_response = client.sent_shares.create_invitation(\n    sent_share_id=str(sent_share_id),\n    sent_share_invitation_id=str(sent_share_invitation_id),\n    sent_share_invitation=sent_share_invitation)\n\nprint(invitation_response)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest Commands\nDESCRIPTION: Basic pytest commands to run all tests, specific test files, or individual test cases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_file.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_file.py -k test_name\n```\n\n----------------------------------------\n\nTITLE: Listing Added Features in Markdown\nDESCRIPTION: Demonstrates how to list new features added to models in a Markdown bullet point list.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features Added\n\n  - Model IotDpsPropertiesDescription has a new parameter portal_operations_host_name\n  - Model ProvisioningServiceDescription has a new parameter identity\n  - Model ProvisioningServiceDescription has a new parameter resourcegroup\n  - Model ProvisioningServiceDescription has a new parameter subscriptionid\n  - Model Resource has a new parameter resourcegroup\n  - Model Resource has a new parameter subscriptionid\n```\n\n----------------------------------------\n\nTITLE: Installing Async Transport (aiohttp)\nDESCRIPTION: Installs the aiohttp library as an async transport layer, required for using the async API of the Schema Registry Avro Encoder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Functions for Azure Digital Twins Queries in Python\nDESCRIPTION: Defines two helper functions: query_ADT for running queries and returning results, and query_to_df for converting query results to a pandas DataFrame. Note that these functions may not perform well with large models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/04_Lots_on_Queries.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef query_ADT(query):\n    query_result = service_client.query_twins(query)\n    values = [i for i in query_result]\n    return values\n\ndef query_to_df(query):\n    query_result = query_ADT(query)\n    values = pd.DataFrame(query_result)\n    return values\n\nquery_expression = \"SELECT * FROM digitaltwins\"\nquery_to_df(query_expression)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Data Protection Client using DefaultAzureCredential\nDESCRIPTION: Python code to authenticate with Azure Data Protection services using the DefaultAzureCredential. This snippet shows how to create a client instance after setting up proper environment variables for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dataprotection/azure-mgmt-dataprotection/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dataprotection import DataProtectionClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataProtectionClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Loading Azure App Configuration Provider in Python\nDESCRIPTION: This Python snippet shows how to connect to an Azure App Configuration instance using the DefaultAzureCredential class and retrieve configuration values with the AzureAppConfigurationProvider.load method. Requires the azure-identity and azure-appconfiguration libraries, with proper Python environment setup. The endpoint variable should be replaced by the user\\'s App Configuration store endpoint, and DefaultAzureCredential automatically picks up authentication information from environment variables or managed identity. Outputs the value associated with the \\\"message\\\" key from the loaded configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nendpoint = \"https://<your-store>.azconfig.io\"\ndefault_credential = DefaultAzureCredential()\nconfig = AzureAppConfigurationProvider.load(\n    endpoint=endpoint, credential=default_credential)\nprint(config[\"message\"])\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Manifest from Azure Container Registry using Python\nDESCRIPTION: This snippet demonstrates how to delete an image manifest from Azure Container Registry. It first retrieves the manifest using the 'latest' tag, then deletes it using its digest identifier.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    # Delete the image\n    client.delete_manifest(self.repository_name, get_manifest_result.digest)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Terraform Management Client\nDESCRIPTION: Example showing how to authenticate the Terraform Management client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/terraform/azure-mgmt-terraform/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.terraform import TerraformMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = TerraformMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Renaming AnomalyDetectionConfigurationLogicType to DetectionConditionOperator\nDESCRIPTION: Directive to rename AnomalyDetectionConfigurationLogicType enum to DetectionConditionOperator across multiple definition properties for more intuitive naming.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"WholeMetricConfiguration\"][\"properties\"][\"conditionOperator\"][\"x-ms-enum\"][\"name\"] = \"DetectionConditionOperator\";\n      $[\"DimensionGroupConfiguration\"][\"properties\"][\"conditionOperator\"][\"x-ms-enum\"][\"name\"] = \"DetectionConditionOperator\";\n      $[\"SeriesConfiguration\"][\"properties\"][\"conditionOperator\"][\"x-ms-enum\"][\"name\"] = \"DetectionConditionOperator\";\n      $[\"WholeMetricConfigurationPatch\"][\"properties\"][\"conditionOperator\"][\"x-ms-enum\"][\"name\"] = \"DetectionConditionOperator\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Checks in pyproject.toml\nDESCRIPTION: A TOML configuration example showing how to disable various checks for a legacy package in the Azure SDK. This configuration allows developers to fine-tune which code quality checks apply at the package level.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# from sdk/core/azure-servicemanagement-legacy/pyproject.toml, which is a legacy package\n# as a result, all of these checks are disabled\n[tool.azure-sdk-build]\nmypy = false\ntype_check_samples = false\nverifytypes = false\npyright = false\npylint = false\nblack = false\nsphinx = false\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest with PowerShell\nDESCRIPTION: Command to install AutoRest globally using npm. This is a prerequisite for generating the Azure Maps Weather Python client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Test Pipeline YAML\nDESCRIPTION: Modification to the tests.yml file to set environment variables for live test pipelines. AZURE_SKIP_LIVE_RECORDING and AZURE_TEST_RUN_LIVE are set to True.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - template: ../../eng/pipelines/templates/stages/archetype-sdk-tests.yml\n    parameters:\n      ...\n      EnvVars:\n        ...\n        AZURE_SKIP_LIVE_RECORDING: 'True'\n        AZURE_TEST_RUN_LIVE: 'true'\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Certificates and Azure Identity libraries\nDESCRIPTION: This command installs the required Python libraries for working with Azure Key Vault Certificates and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-certificates azure-identity\n```\n\n----------------------------------------\n\nTITLE: Building Azure Image Analysis Python SDK Wheel Locally\nDESCRIPTION: Commands to build a local wheel file for the Azure Image Analysis Python SDK from source. It first installs the `wheel` package and development requirements, then uses `setup.py` to generate the distributable wheel file. These commands are typically run in a command prompt or terminal within the SDK's source directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install wheel\npip install -r dev_requirements.txt\npython setup.py bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Deleting Certificates with Legacy Azure Key Vault SDK\nDESCRIPTION: Demonstrates certificate deletion using the legacy azure-keyvault SDK. Shows deletion and purge operations without ability to track deletion status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndeleted_certificate = client.delete_certificate(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    certificate_name=\"cert-name\"\n)\n\n# this purge would fail if deletion hadn't finished\nclient.purge_deleted_certificate(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    certificate_name=\"cert-name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure ML Services Dependencies with pip\nDESCRIPTION: Instructions for installing the required Azure ML Services management packages using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-machinelearningservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Azure Migration Discovery SAP Management with DefaultAzureCredential\nDESCRIPTION: Python code to authenticate to the Azure Migration Discovery SAP Management service using the DefaultAzureCredential. This code requires environment variables for AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/migrationdiscovery/azure-mgmt-migrationdiscoverysap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.migrationdiscoverysap import MigrationDiscoverySapMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MigrationDiscoverySapMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing corehttp Transports with pip - Bash\nDESCRIPTION: This code block demonstrates how to install corehttp with specific HTTP transport extras using pip. Dependencies for synchronous (requests, httpx) and asynchronous (aiohttp, httpx) transports are managed using pip extras notation (e.g., corehttp[requests]). Users install only the dependencies needed for their chosen transport. No Python code is required; all operations are performed from the console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/corehttp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install individually.\\npip install corehttp[requests]\\npip install corehttp[aiohttp]\\npip install corehttp[httpx]\\n\\n# Install multiple.\\npip install corehttp[requests,httpx]\n```\n\n----------------------------------------\n\nTITLE: Marking Optional Parameters in Python Functions\nDESCRIPTION: Shows how to correctly annotate parameters that can be None using typing.Optional rather than default values alone, improving type checking accuracy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\n# No:\ndef foo(\n    bar: str = None,\n) -> None:\n    ...\n\n# Yes:\ndef foo(\n    bar: Optional[str] = None,\n) -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving certificates with azure-keyvault-certificates\nDESCRIPTION: Retrieves the latest version of a certificate and a specific version of a certificate using the get_certificate and get_certificate_version methods of CertificateClient in the new azure-keyvault-certificates library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncertificate = certificate_client.get_certificate(certificate_name=\"cert-name\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\nprint(certificate.policy.issuer_name)\n\ncertificate = certificate_client.get_certificate_version(certificate_name=\"cert-name\", version=\"cert-version\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local package references using editable installs (-e) and external library requirements. The dependencies cover Azure SDK tools, core functionality, identity management, and specific Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\nazure-mgmt-loganalytics\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Getting API Keys using PowerShell\nDESCRIPTION: PowerShell command using Azure CLI to list API keys for the Anomaly Detector resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Azure Forecasting in Jupyter Notebook\nDESCRIPTION: Installs required Python libraries within a Jupyter Notebook using pip via the `!` command. It installs the Azure Storage SDK (`azure-storage-blob`), Azure identity library (`azure-identity`), data manipulation libraries (`pandas`, `numpy`, `sklearn`), visualization (`matplotlib`), forecasting (`pmdarima`), and Jupyter components. The specific syntax `!\\\"{sys.executable}\\\" -m pip install ...` is used to ensure compatibility with different Python kernel configurations and paths containing spaces. Requires the `sys` module to be imported first.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/forecasting_in_vs_code_with_blob.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys #To ensure we're using the right version of python, since ! tries to use system, and % doesn't natively handle windows paths with spaces well.\n\n# Azure storage SDK and identity package to authenticate.\n!\"{sys.executable}\" -m pip install azure-storage-blob azure-identity\n# Our data manipulation bread and butter.\n!\"{sys.executable}\" -m pip install pandas numpy sklearn\n# Basic visualization\n!\"{sys.executable}\" -m pip install matplotlib\n# Tooling to perform ARIMA forecasts. This may take a moment.\n!\"{sys.executable}\" -m pip install pmdarima\n# Just in case, ensure we have the python modules we need to run the rest of this notebook.\n!\"{sys.executable}\" -m pip jupyter notebook\n\n#If you hit permission issues when running this command, your kernel may be set to system python.  Install manually or change your kernel.\n```\n\n----------------------------------------\n\nTITLE: Generating Docs for CheckpointStore (aio, Python)\nDESCRIPTION: Sphinx directive to automatically generate documentation for the abstract asynchronous `CheckpointStore` base class in `azure.eventhub.aio`. Includes all members, undocumented members, and inherited members using the specified options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.aio.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.aio.CheckpointStore\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Deleting Role Assignments in Azure Synapse\nDESCRIPTION: Demonstrates how to delete a role assignment using its ID. This example shows removing permissions that were previously granted to a user or service principal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_data/match_trial_clinical_note.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Delete role assignment\naccess_control_client.delete_role_assignment(\"<role-assignment-id>\")\n```\n\n----------------------------------------\n\nTITLE: Version Import Change\nDESCRIPTION: Demonstrates the new way to import version information after the version module deprecation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n__version__\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Germany using ADAL\nDESCRIPTION: This snippet demonstrates how to use ADAL to connect to Azure Germany. It sets the authentication and management endpoints specific to Azure Germany and creates a ResourceManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/multicloud.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport adal\nfrom msrestazure.azure_active_directory import AdalAuthentication\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Service Principal\ntenant = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\nclient_id = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\npassword = 'password\n\n# Azure Germany\nauthentication_endpoint = 'https://login.microsoftonline.de/'\nazure_endpoint = 'https://management.microsoftazure.de/'\n    \ncontext = adal.AuthenticationContext(authentication_endpoint+tenant)\ncredentials = AdalAuthentication(\n    context.acquire_token_with_client_credentials,\n    azure_endpoint,\n    client_id,\n    password\n)\nsubscription_id = '33333333-3333-3333-3333-333333333333'\n\nresource_client = ResourceManagementClient(\n    credentials,\n    subscription_id,\n    base_url=azure_endpoint\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Performance Test Dependencies using pip (CMD)\nDESCRIPTION: Installs the necessary Python packages for running the performance tests within an activated virtual environment (`env`). It first installs development requirements specified in `dev_requirements.txt` (which includes `devtools_testutils`) and then installs the current package (`corehttp`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/corehttp/tests/perf_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/core/corehttp> pip install -r dev_requirements.txt\n(env) ~/core/corehttp> pip install .\n```\n\n----------------------------------------\n\nTITLE: Extracting Complete Order Discrepancy Inference from Results (Python)\nDESCRIPTION: Processes the results of a Radiology Insights analysis job (`radiology_insights_result`). The code loops through patient results and their associated inferences, checking for the 'Complete Order Discrepancy' type and printing a message upon detection. Requires the `azure.healthinsights.radiologyinsights.models` module and expects `radiology_insights_result` to hold the analysis output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor patient_result in radiology_insights_result.patient_results:\n            for ri_inference in patient_result.inferences:\n                if ri_inference.kind == models.RadiologyInsightsInferenceType.COMPLETE_ORDER_DISCREPANCY:\n                    print(f\"Complete Order Discrepancy Inference found\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Conversion 'inputLocation' to 'inputSettings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML targeting the 'inputLocation' property within the 'conversion_settings' definition. It renames the client-side representation of this property to 'inputSettings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion_settings.properties.inputLocation'\n    transform: >\n        $[\"x-ms-client-name\"] = \"inputSettings\";\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Azure SDK Python Package Version 1.0.0b1\nDESCRIPTION: Initial beta release notes from December 2020.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portal/azure-mgmt-portal/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2020-12-17)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Development Dependencies\nDESCRIPTION: This requirements file lists the dependencies needed for Azure SDK for Python development. It includes relative paths to internal packages (tools, core, identity) and a conditional external dependency on aiohttp for Python 3.7+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.7'\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Requirements file specifying local development dependencies including Azure SDK tools, Azure Identity package, Azure Purview namespace package, and aiohttp library version 3.0 or higher.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../nspkg/azure-purview-nspkg\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Listing Python Project Dependencies\nDESCRIPTION: This configuration snippet lists the necessary Python package dependencies for a component within the Azure SDK. It uses relative paths to specify local packages, with the '-e' flag indicating that 'azure-sdk-tools' should be installed in editable mode (linking to the source directory). It also includes standard dependencies like 'azure-core', 'azure-identity', 'azure-mgmt-core', and the external library 'aiohttp'. This format is typically used in 'requirements.txt' files processed by the pip package installer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerorchestratorruntime/azure-mgmt-containerorchestratorruntime/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Downloading Assets Migration Script - PowerShell\nDESCRIPTION: Downloads the generate-assets-json.ps1 script using PowerShell's Invoke-WebRequest command from the azure-sdk-tools repository\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest -OutFile \"generate-assets-json.ps1\" https://raw.githubusercontent.com/Azure/azure-sdk-tools/main/eng/common/testproxy/onboarding/generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Matrix Batch Creation Algorithm in PowerShell\nDESCRIPTION: Pseudocode showing how packages are batched for testing in the pull request pipeline. Packages are first grouped by matrix configuration, then by batch size, with suffixes added for multiple batches.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/scripts/job-matrix/pullrequest-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nbatchSize = configurable # of packages in each test batch, defaults to 10\ndirectPackages = the list of packages with directly changed code in the PR\n\ngroup the direct packages by matrix configuration\n  - each matrix contribution\n    - group by batch size\n      - assign the matrix to the full batch\n      - if multiple batches exist, add suffix\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Resource Group Using Model Instance (Python)\nDESCRIPTION: Illustrates the traditional way to create or update an Azure resource group using the Azure SDK for Python prior to version 2.0.0rc4/0.30.0rc4. This method required importing the specific model class (`ResourceGroup`) and passing an instance of it with the desired properties (like `location`) to the client method (`create_or_update`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.resource.resources.models import ResourceGroup\n\nresource_client.resource_groups.create_or_update(\n    group_name,\n    ResourceGroup(\n        location='westus',\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Development Dependencies\nDESCRIPTION: This requirements file includes references to locally available Azure SDK tools and the Azure Identity package. It uses the -e flag to install the tools in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/defendereasm/azure-mgmt-defendereasm/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Setting a Single SIP Trunk (Python)\nDESCRIPTION: Sets or updates a SIP trunk in the configuration by specifying the FQDN and signaling port in a SipTrunk object, then passing it to set_trunk. The trunk is updated if matched by FQDN, or added if new. Use with care to avoid conflicting configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Set function will either modify existing item or add new item to the collection.\n# The trunk is matched based on it's FQDN.\nnew_trunk = SipTrunk(fqdn=\"sbs3.contoso.com\", sip_signaling_port=5555)\nsip_routing_client.set_trunk(new_trunk)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Subscription Key\nDESCRIPTION: Python code demonstrating authentication using Azure Key Credential with subscription key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.route import MapsRouteClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nroute_client = MapsRouteClient(\n    credential=credential,\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Package Upload to PyPI\nDESCRIPTION: Twine commands to manually upload Python package distribution files to PyPI. Demonstrates uploading both source distribution (.zip) and wheel (.whl) files.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/release.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntwine upload dist\\*.zip\ntwine upload dist\\*.whl\n```\n\n----------------------------------------\n\nTITLE: TypedDict Definition Example\nDESCRIPTION: Example showing how to define a TypedDict to enforce dictionary structure and value types during static type checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import TypedDict\n\n\nclass Employee(TypedDict):\n    name: str\n    title: str\n    id: int\n    current: bool\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Azure CLI command to create a new resource group for the Translator service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name my-resource-group --location westus2\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists local paths to development dependencies required for the Azure SDK for Python project. It includes references to Azure SDK tools and the Azure Identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkanalytics/azure-mgmt-networkanalytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Available Performance Tests using perfstress (CMD)\nDESCRIPTION: Navigates into the `tests` directory and executes the `perfstress` command-line tool without arguments. This command scans the current module for runnable performance tests provided by the `devtools_testutils` package and lists the names of the available tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/corehttp/tests/perf_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/core/corehttp> cd tests\n(env) ~/core/corehttp/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Basic AutoRest Configuration for Machine Learning Services API\nDESCRIPTION: Defines the global settings for the Machine Learning Services API, specifying that this is an ARM (Azure Resource Manager) API type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi-type: arm\n```\n\n----------------------------------------\n\nTITLE: Ridge Regression Pipeline with Feature Engineering in Python\nDESCRIPTION: Creates a machine learning pipeline that implements one-hot encoding for categorical features, feature scaling, and Ridge regression with cross-validation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import RidgeCV\nimport numpy as np\n\n\ncategorical_columns = [\"DataType\"]\n\none_hot_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n\n# Get 25 alpha values between 10^-6 and 10^6\nalphas = np.logspace(-6, 6, 25)\nridge_linear_pipeline = make_pipeline(\n    ColumnTransformer(\n        transformers=[\n            (\"categorical\", one_hot_encoder, categorical_columns),\n        ],\n        remainder=MinMaxScaler(),\n    ),\n    RidgeCV(alphas=alphas),\n)\n\nridge_linear_pipeline.fit(X, Y)\n\nprint(\"Score of Linear Regression:\")\nevaluate(ridge_linear_pipeline, X, Y, cv=ts_cv)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Personalizer Client Library for Python\nDESCRIPTION: This command installs the Azure Personalizer client library for Python using pip. It's a prerequisite for running the sample code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install azure-ai-personalizer\n```\n\n----------------------------------------\n\nTITLE: Example Usage of raw_request_hook in Python\nDESCRIPTION: Demonstrates initializing `ManagedIdentityCredential` with a `raw_request_hook`. The provided lambda function prints the URL of the outgoing HTTP request made by the credential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nManagedIdentityCredential(raw_request_hook=lambda request: print(request.http_request.url))\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication SMS Library\nDESCRIPTION: This snippet shows how to install the Azure Communication SMS library and run a sample script to send SMS messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-communication-sms library\n$ pip install azure-communication-sms\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_comm_sms.py\n```\n\n----------------------------------------\n\nTITLE: Installing Azure API Management Python Dependencies\nDESCRIPTION: Commands to install the required Azure API Management and identity packages using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-apimanagement\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Differentiating Instance vs Class Type Annotations in Python Functions\nDESCRIPTION: Demonstrates distinction between type annotations for class instances (Duck) versus class objects (Type[Duck]). Shows correct usage in make_quack and create_duck functions to ensure mypy static type analysis is accurate and prevents type errors during invocation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Type\\n\\n\\nclass Duck:\\n    def quack(self): ...\\n\\n\\ndef make_quack(d: Duck) -> None:\\n    d.quack()\\n\\n\\ndef create_duck(d: Type[Duck]) -> Duck:\\n    return d()\\n\\n\\nd = Duck()\\nmake_quack(d)  # OK\\ncreate_duck(d)  # mypy complains\\n\\nmake_quack(Duck)  # mypy complains\\ncreate_duck(Duck)  # OK\n```\n\n----------------------------------------\n\nTITLE: Temperature Conversion Function - Python\nDESCRIPTION: Specifies the callable \\\"convert_temperature\\\" to convert a Celsius temperature to Fahrenheit. Requires a numerical \\\"celsius\\\" input parameter; the description documents expected types and outcomes. Standard integer/float handling suffices; external libraries are not necessary.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"convert_temperature\",\n  \"description\": \"Converts temperature from Celsius to Fahrenheit.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"celsius\": {\"type\": \"number\", \"description\": \"Temperature in Celsius.\"}\n    },\n    \"required\": [\"celsius\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Long-Running Operations (LRO) in Azure SDK for Python (v1.0.0b1)\nDESCRIPTION: Version 1.0.0b1 changed how Long-Running Operations (LROs) are handled. Methods initiating LROs are now prefixed with `begin_`. These methods return an `azure.core.polling.LROPoller` object instead of the previous `msrest.polling.LROPoller`. This requires updating calls to LRO-initiating methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Old return type: msrest.polling.LROPoller\n# New return type: azure.core.polling.LROPoller\n\n# Method naming change:\n# Old: client.some_operation(...)\n# New: client.begin_some_operation(...)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Playwrighttesting SDK Dependencies\nDESCRIPTION: Commands to install the required Azure Playwrighttesting management package and Azure identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/playwrighttesting/azure-mgmt-playwrighttesting/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-playwrighttesting\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Script in PowerShell\nDESCRIPTION: Command to run the generate-assets-json.ps1 script for initial migration of test recordings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/recording_migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n..\\..\\..\\eng\\common\\testproxy\\onboarding\\generate-assets-json.ps1 -InitialPush\n```\n\n----------------------------------------\n\nTITLE: Runtime Protocol Checking in Python\nDESCRIPTION: Shows how to use @runtime_checkable decorator to enable runtime structural checks on Protocol types using isinstance() and issubclass().\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n# from typing import runtime_checkable  Python >=3.8\nfrom typing_extensions import runtime_checkable, Protocol\n\n\n@runtime_checkable\nclass SupportsFly(Protocol):\n    def fly(self) -> None: ...\n\n\nassert isinstance(Plane, SupportsFly)  # True\nassert isinstance(Penguin, SupportsFly)  # False\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Voice Services Management SDK\nDESCRIPTION: Commands to install the required packages for using the Azure Voice Services Management SDK. Installs both the Voice Services management package and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/voiceservices/azure-mgmt-voiceservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-voiceservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Certificate Rotation with a Custom Credential in Python\nDESCRIPTION: Defines a custom credential class `RotatableCertificateCredential` that wraps `CertificateCredential` to enable explicit certificate rotation. It provides a `rotate_certificate` method to replace the internal credential instance with a new one based on an updated certificate path. This requires manual invocation when a certificate needs to be rotated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples/client_certificate_credential.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nclass RotatableCertificateCredential(object):\n    def __init__(self, tenant_id, client_id, certificate_path=None, **kwargs):\n        self._tenant_id = tenant_id\n        self._client_id = client_id\n        self._credential = CertificateCredential(tenant_id, client_id, certificate_path, **kwargs)\n    \n    def get_token(self, *scopes, **kwargs):\n        return self._credential.get_token(*scopes, **kwargs)\n\n    def rotate_certificate(certificate_path, **kwargs):\n        self._credential = CertificateCredential(self._tenant_id, self._client_id, certificate_path, **kwargs)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Kernel for Virtual Environment in Bash\nDESCRIPTION: This command installs a Jupyter kernel associated with the current Python environment (expected to be the 'agent-evals' virtual environment). This makes the environment selectable within Jupyter notebooks, allowing users to run the sample notebooks with the correct dependencies. Requires `ipykernel` to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m ipykernel install --user --name agent-evals --display-name \"agent-evals\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Large Instance Management SDK and Azure Identity\nDESCRIPTION: Commands to install the required packages using pip. The azure-mgmt-largeinstance package is for Large Instance management, while azure-identity is used for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/largeinstance/azure-mgmt-largeinstance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-largeinstance\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Inference Package with pip\nDESCRIPTION: Commands to install or upgrade the Azure AI Inference package using pip, including an option for OpenTelemetry support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-inference\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade azure-ai-inference\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-inference[opentelemetry]\n```\n\n----------------------------------------\n\nTITLE: Multiapi Batch Configuration\nDESCRIPTION: Configures batch processing for multiple API versions including 3.0, 3.1, 2022-05-01, and 2023-04-01.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: release_3_0\n  - tag: release_3_1\n  - tag: release_2022_05_01\n  - tag: release_2023_04_01\n  - multiapiscript: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment - Shell/Python\nDESCRIPTION: Initializes a new Python virtual environment in the user's home directory using Python 3.8+ (assuming it is installed in Azure Cloud Shell). This isolates package installations for the test environment. Parameter: target directory (~/venv). Output: local virtual environment directory structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv ~/venv\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Release Notes in Markdown\nDESCRIPTION: Structured release notes documenting version history, new features, breaking changes, and updates across multiple versions of the Azure SDK for Python. Includes details about model parameter changes, new operation groups, and API modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kubernetesconfiguration/azure-mgmt-kubernetesconfiguration/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.1.0 (2023-09-21)\n\n### Features Added\n\n  - Model FluxConfiguration has a new parameter reconciliation_wait_duration\n  - Model FluxConfiguration has a new parameter wait_for_reconciliation\n  - Model KustomizationDefinition has a new parameter post_build\n  - Model KustomizationDefinition has a new parameter wait\n  - Model KustomizationPatchDefinition has a new parameter post_build\n  - Model KustomizationPatchDefinition has a new parameter wait\n\n## 3.0.0 (2023-05-22)\n\n### Features Added\n\n  - Added operation group PrivateEndpointConnectionsOperations\n  - Added operation group PrivateLinkResourcesOperations\n  - Added operation group PrivateLinkScopesOperations\n  - Model Extension has a new parameter current_version\n  - Model Extension has a new parameter is_system_extension\n  - Model Extension has a new parameter plan\n  - Model ExtensionType has a new parameter id\n  - Model ExtensionType has a new parameter name\n  - Model ExtensionType has a new parameter type\n  - Model ExtensionVersionList has a new parameter value\n  - Model FluxConfiguration has a new parameter azure_blob\n  - Model FluxConfigurationPatch has a new parameter azure_blob\n\n### Breaking Changes\n\n  - Model ClusterScopeSettings no longer has parameter id\n  - Model ClusterScopeSettings no longer has parameter name\n  - Model ClusterScopeSettings no longer has parameter type\n  - Model Extension no longer has parameter installed_version\n  - Model ExtensionVersionList no longer has parameter versions\n```\n\n----------------------------------------\n\nTITLE: Running the Custom Properties Sample\nDESCRIPTION: Command to run the sample_properties.py file which demonstrates adding custom properties to logs with the AzureMonitorLogExporter. Requires setting the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable first.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/logs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_properties.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment on Windows and Linux platforms. Windows uses py command while Linux uses python3.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npy -3.7 -m venv env3.7\n```\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env3.7\n```\n\n----------------------------------------\n\nTITLE: Installing Azure FarmBeats Dependencies with pip\nDESCRIPTION: Command to install required Python packages for running FarmBeats samples including the core SDK, authentication library and async HTTP client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-agrifood-farming azure-identity aiohttp python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Azure MySQL Flexible Servers Management SDK and Azure Identity\nDESCRIPTION: Installs the required packages for using the Azure MySQL Flexible Servers Management SDK and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mysqlflexibleservers/azure-mgmt-mysqlflexibleservers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-mysqlflexibleservers\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Azure Kusto Management Client Changes v0.6.0\nDESCRIPTION: Version 0.6.0 release notes detailing new model parameters and operations added to the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.0 (2020-01-31)\n\n**Features**\n\n- Model Cluster has a new parameter state_reason\n- Model ReadWriteDatabase has a new parameter is_followed\n- Model EventHubDataConnection has a new parameter compression\n- Model ClusterUpdate has a new parameter state_reason\n- Added operation ClustersOperations.diagnose_virtual_network\n- Added operation group DatabasePrincipalAssignmentsOperations\n- Added operation group ClusterPrincipalAssignmentsOperations\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Connector Management SDK for Python\nDESCRIPTION: Command to install the required packages for using Azure Resource Connector Management SDK and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourceconnector/azure-mgmt-resourceconnector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-resourceconnector\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Preparing Multiple Tool Calls and Definition for Batch Evaluation - Python\nDESCRIPTION: Defines a query and two tool call entries, both for 'fetch_weather' (one for Seattle and one for London), along with a shared tool definition. This sets up a scenario where the agent uses multiple tool calls within a response, providing the necessary structured inputs for batch evaluation. These Python dictionaries could be passed directly to the evaluator for scoring correctness of multiple actions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = \"How is the weather in Seattle ?\"\ntool_calls = [{\n                    \"type\": \"tool_call\",\n                    \"tool_call_id\": \"call_CUdbkBfvVBla2YP3p24uhElJ\",\n                    \"name\": \"fetch_weather\",\n                    \"arguments\": {\n                        \"location\": \"Seattle\"\n                    }\n            },\n            {\n                    \"type\": \"tool_call\",\n                    \"tool_call_id\": \"call_CUdbkBfvVBla2YP3p24uhElJ\",\n                    \"name\": \"fetch_weather\",\n                    \"arguments\": {\n                        \"location\": \"London\"\n                    }\n            }]\n\ntool_definition = {\n                    \"id\": \"fetch_weather\",\n                    \"name\": \"fetch_weather\",\n                    \"description\": \"Fetches the weather information for the specified location.\",\n                    \"parameters\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"location\": {\n                                \"type\": \"string\",\n                                \"description\": \"The location to fetch weather for.\"\n                            }\n                        }\n                    }\n                }\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity for Authentication\nDESCRIPTION: Installs the Azure Identity client library for Python, which provides TokenCredential implementations needed for authentication with Schema Registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Security Definitions Transform Directive\nDESCRIPTION: YAML directive to transform security definitions in the swagger document, specifically setting the SharedKey location to header\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.securityDefinitions\n  transform: |\n    $[\"SharedKey\"][\"in\"] = \"header\";\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies and Legacy Test Requirements for T1 Azure Blob Perf Testing (cmd)\nDESCRIPTION: This sequence installs dependencies for running legacy (T1) performance tests on Azure Blob Storage. It includes development requirements followed by additional test-specific dependencies via pip. The commands must be executed in a Python 3 virtual environment. The second pip install target references a requirements file specific to legacy tests. Outputs: a Python environment ready to execute T1 perf tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-blob> pip install -r dev_requirements.txt\n(env) ~/azure-storage-blob> pip install tests/perfstress_tests/T1_legacy_tests/t1_test_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating TextTranslationClient with Custom Endpoint using API Key\nDESCRIPTION: Creates a TextTranslationClient instance for a custom endpoint using AzureKeyCredential. This is useful when using features like Virtual Network support where a custom endpoint is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncredential = AzureKeyCredential(apikey)\ntext_translator = TextTranslationClient(credential=credential, endpoint=endpoint)\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Documents version history, breaking changes, and features added across multiple releases. Includes contract changes for AnalyzeText, AnalyzeImage, and Blocklist management functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2023-12-15)\n\n### Features Added\n\n- Support Microsoft Entra ID Authentication\n- Support 8 severity level for AnalyzeText\n\n### Breaking Changes\n\nContract change for AnalyzeText, AnalyzeImage, Blocklist management related methods. The changes are listed below:\n\n#### AnalyzeText\n\n- AnalyzeTextOptions\n  - Renamed breakByBlocklists to haltOnBlocklistHit\n  - Added AnalyzeTextOutputType model for the `output_type` property.\n- AnalyzeTextResult\n  - Renamed TextBlocklistMatchResult to TextBlocklistMatch\n  - Replaced TextAnalyzeSeverityResult by TextCategoriesAnalysis\n\n#### AnalyzeImage\n\n- AnalyzeImageOptions\n  - Added AnalyzeImageOutputType\n- AnalyzeImageResult\n  - Replaced ImageAnalyzeSeverityResult by ImageCategoriesAnalysis\n\n#### Blocklist management\n\n- Added BlocklistClient\n- Renamed AddBlockItemsOptions to AddOrUpdateTextBlocklistItemsOptions\n- Renamed AddBlockItemsResult to AddOrUpdateTextBlocklistItemsResult\n- Renamed RemoveBlockItemsOptions to RemoveTextBlocklistItemsOptions\n- Renamed TextBlockItemInfo to TextBlocklistItem\n\n## 1.0.0b1 (2023-05-22)\n\n- Initial version\n```\n\n----------------------------------------\n\nTITLE: Preventing Method Overriding with Final Decorator in Python\nDESCRIPTION: Uses the @final decorator to prevent a method from being subclassed or overridden, signaling to maintainers and static analysis tools that 'download' on BlobClient should remain unchanged. Depends on typing_extensions.final. This measure is statically enforced where supported by tooling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import final\\n\\nclass BlobClient:\\n    @final\\n    def download(self) -> None:\\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Farm in FarmBeats\nDESCRIPTION: Example showing how to create a farm entity associated with a party in FarmBeats.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\" # Using party from previous example\n\nfarm = client.farms.create_or_update(\n    party_id=party_id,\n    farm_id=\"farm-1\",\n    farm={\n        \"name\": farm_name,\n        \"description\": farm_description\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos DB Python SDK from Source\nDESCRIPTION: Command to install the Azure Cosmos DB SDK from the current directory, which should contain the package source code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/tests/workloads/dev.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Selfhelp Management Client using DefaultAzureCredential\nDESCRIPTION: Example demonstrating how to authenticate with the Azure Selfhelp Management Client using DefaultAzureCredential. This code initializes the client with credentials from environment variables and the Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/selfhelp/azure-mgmt-selfhelp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.selfhelp import SelfHelpMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SelfHelpMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Decoding Data with JsonSchemaEncoder in Python\nDESCRIPTION: This snippet demonstrates how to use the JsonSchemaEncoder to decode content. The decode method automatically retrieves the schema from the Schema Registry Service, validates against the content, and caches the schema locally.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.jsonencoder import JsonSchemaEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ[\"SCHEMAREGISTRY_GROUP\"]\nDRAFT2020_12_SCHEMA_IDENTIFIER = \"https://json-schema.org/draft/2020-12/schema\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nencoder = JsonSchemaEncoder(client=schema_registry_client, validate=DRAFT2020_12_SCHEMA_IDENTIFIER)\n\nwith encoder:\n    # event_data is an EventData object with encoded body\n    decoded_content = encoder.decode(event_data)\n\n    # OR \n\n    # content_dict is a TypedDict with encoded content and JSON content type \n    decoded_content = encoder.decode(content_dict)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages via Pip in Bash\nDESCRIPTION: This command uses pip to install the necessary Python packages. It installs the `azure-ai-evaluation` package directly from the main branch of the Azure SDK for Python GitHub repository, along with `azure-ai-projects`, `ipykernel`, and `azure-identity`. This should be run within the activated virtual environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"git+https://github.com/Azure/azure-sdk-for-python.git@main#egg=azure-ai-evaluation&subdirectory=sdk/evaluation/azure-ai-evaluation\" azure-ai-projects ipykernel azure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Python in Markdown\nDESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Python. It includes version numbers, release dates, and details about changes and new features for each version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 10.0.0b2 (2024-11-04)\n\n### Other Changes\n\n  - Update dependencies\n\n## 10.0.0b1 (2022-10-28)\n\n### Features Added\n\n  - Model Disk has a new parameter storage_account_id\n```\n\n----------------------------------------\n\nTITLE: Installing Azure OpenAI Python SDK\nDESCRIPTION: Command to install the OpenAI client library for Python using pip. This library is maintained by OpenAI and is required to run the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Illustrating Breaking Operation Class Import Pattern in Python\nDESCRIPTION: Details a general breaking change pattern in v0.3.0 affecting operation class imports. Operation classes (e.g., `MyClassOperations`) previously importable via specific paths like `azure.mgmt.security.operations.my_class_operations` must now be imported from the parent `azure.mgmt.security.operations` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security.operations.my_class_operations\n```\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security.operations\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory using DefaultAzureCredential\nDESCRIPTION: Python code to authenticate with Azure Active Directory using the DefaultAzureCredential. This creates a SubscriptionClient instance using the default credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.subscription import SubscriptionClient\n\nclient = SubscriptionClient(credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Phone Numbers Python SDK\nDESCRIPTION: This YAML snippet defines the main configuration settings for AutoRest when generating the Azure Communication Phone Numbers Python SDK. It specifies the tag, the source Swagger definition URL, output folder, Python namespace, license header, flattening threshold, folder structure, output clearing behavior, OpenAPI version, Python generation flag, client title, and model mode (msrest).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/PHONE_NUMBER_SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntag: package-phonenumber-2025-02-11\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/a3d9c16f14fbfa814d6315a4972517cec77c6bfb/specification/communication/data-plane/PhoneNumbers/readme.md\noutput-folder: ../azure/communication/phonenumbers/_generated\nnamespace: azure.communication.phonenumbers\nlicense-header: MICROSOFT_MIT_NO_VERSION\npayload-flattening-threshold: 3\nno-namespace-folders: true\nclear-output-folder: true\nv3: true\npython: true\ntitle: Phone Numbers Client\nmodels-mode: msrest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Specifies required dependencies for Azure SDK Python development including local tools and Azure resource management packages. Uses editable (-e) installs for local development packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Digital Twins Event Route in Python\nDESCRIPTION: This snippet demonstrates how to delete a specific event route from an Azure Digital Twins instance. It calls the `delete_event_route` method on the service client, providing the unique ID (`event_route_id`) of the event route to be removed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n```python Snippet:dt_scenario\nservice_client.delete_event_route(event_route_id)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the TooManyRedirectsError Exception Class in Python\nDESCRIPTION: This snippet defines the `TooManyRedirectsError` class, inheriting from `HttpResponseError`. This exception is raised when the maximum number of allowed HTTP redirect attempts has been exceeded during a request. It stores the history of requests and responses that led to the redirects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TooManyRedirectsError(HttpResponseError):\n    def __init__(self, history, *args, **kwargs):\n        self.history = history\n        message = \"Reached maximum redirect attempts.\"\n        super(TooManyRedirectsError, self).__init__(message, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Azure Maps Geolocation Samples in Python\nDESCRIPTION: This code snippet demonstrates how to set up the Azure Maps Geolocation SDK, install it via pip, and run sample applications. It requires setting an Azure subscription key as an environment variable before running the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-geolocation --pre\n\npython samples/sample_authentication.py\npython sample/sample_get_country_code.py\n```\n\n----------------------------------------\n\nTITLE: Illustrating Breaking Import Change for SecurityCenterConfiguration in Python\nDESCRIPTION: Highlights a breaking change in v0.3.0: the import path for `SecurityCenterConfiguration` has moved. It was previously in `azure.mgmt.security.security_center` and is now located in the main `azure.mgmt.security` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security.security_center\n```\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Debug Logging in Python\nDESCRIPTION: This is an alternative and more concise way to set up debug logging for the Azure SDK. It uses logging.basicConfig() to achieve the same result as the previous snippet.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/debug_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    stream=sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Example Performance Test Command\nDESCRIPTION: Provides an example of running a specific performance test (UploadTest) with custom parameters for parallel execution and data size.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/tests/perfstress_tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share/tests> perfstress UploadTest --parallel=2 --size=10240\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Search Service using Azure CLI\nDESCRIPTION: Azure CLI command to create a new search service with specified name, resource group, pricing tier, and location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Connected Cache SDK Dependencies\nDESCRIPTION: Commands to install the required Azure Connected Cache management package and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedcache/azure-mgmt-connectedcache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-connectedcache\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Container Registry Python Package\nDESCRIPTION: Command to install the Azure Container Registry client library for Python using pip package manager. Uses the pre-release version of the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-containerregistry\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI SDK Dependencies with pip - Bash\nDESCRIPTION: This bash command installs the necessary Azure AI SDK packages for the Python environment, specifically azure-ai-projects, azure-identity, and azure-ai-evaluation. Required before running any Python code samples in this file, it prepares the environment for tool call accuracy evaluation. All dependencies must be installed in the same environment as the example scripts, and a compatible version of Python is assumed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-projects azure-identity azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Synapse Artifacts Dependencies with pip\nDESCRIPTION: This snippet shows how to install the required dependencies for using the Azure Synapse Artifacts client library. It installs both the azure-identity and azure-synapse-artifacts packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/samples/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\npip install azure-synapse-artifacts\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Appcontainers SDK and Identity Dependencies with pip - Bash\nDESCRIPTION: This snippet demonstrates how to install the core Azure Appcontainers management client and the Azure Identity authentication library using pip. It assumes Python 3.8+ is installed. After running these commands, you can use the Azure SDK and authentication in your Python applications. No additional parameters are needed; simply execute each pip command in your terminal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcontainers/azure-mgmt-appcontainers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-appcontainers\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry OTLP Exporter using pip\nDESCRIPTION: Shows the pip command to install the OpenTelemetry OTLP (OpenTelemetry Protocol) exporter. This exporter is needed to send captured telemetry data to compatible backends, such as Azure Monitor, Jaeger, Zipkin, or the Aspire Dashboard.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install opentelemetry-exporter-otlp\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure Locations in Python\nDESCRIPTION: This snippet demonstrates how to list all available Azure locations using the Service Management API. It iterates through the locations and prints their names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlocations = sms.list_locations()\nfor location in locations:\n    print(location.name)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Load Testing SDK Packages\nDESCRIPTION: Commands to install the required Azure Load Testing management package and Azure identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-mgmt-loadtesting/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-loadtesting\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Swagger to SDK Generation Configuration in YAML\nDESCRIPTION: Defines the SDK repositories that should be generated from the Swagger specification, including Python, Java, Go, .NET, JavaScript, Node.js, and Ruby. Includes post-generation scripts for Ruby SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/single_api/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswagger-to-sdk:\n  - repo: azure-sdk-for-python-track2\n  - repo: azure-sdk-for-java\n  - repo: azure-sdk-for-go\n  - repo: azure-sdk-for-net\n  - repo: azure-sdk-for-js\n  - repo: azure-sdk-for-node\n  - repo: azure-sdk-for-ruby\n    after_scripts:\n      - bundle install && rake arm:regen_all_profiles['azure_mgmt_cdn']\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Thread Client\nDESCRIPTION: Creates a new chat thread and gets a ChatThreadClient for thread-specific operations like sending messages and managing participants.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Confidential Ledger Packages\nDESCRIPTION: Commands to install the required azure-confidentialledger and azure-identity packages using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity azure-confidentialledger\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage File Share Client Library with pip\nDESCRIPTION: Command to install the Azure Storage File Share client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-file-share\n```\n\n----------------------------------------\n\nTITLE: Creating keys with azure-keyvault-keys\nDESCRIPTION: Shows how to create different types of keys using the new azure-keyvault-keys library, including RSA and elliptic curve keys.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault.keys import KeyType, KeyCurveName\n\n# create a key with specified type\nkey = key_client.create_key(name=\"key-name\", key_type=KeyType.ec)\nprint(key.name)\nprint(key.key_type)\n\n# create an RSA key\nrsa_key = key_client.create_rsa_key(name=\"rsa-key-name\", size=2048)\n\n# create an elliptic curve key\nec_key = key_client.create_ec_key(name=\"ec-key-name\", curve=KeyCurveName.p_256)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Advisor Management Client with Configuration in Python\nDESCRIPTION: Shows how to initialize the Azure Advisor Management Client with configuration options after version 9.0.0b1, where the 'config' attribute was removed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/advisor/azure-mgmt-advisor/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = AdvisorManagementClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Creating StoredAttestationPolicy in Python (v1.0.0b4+)\nDESCRIPTION: Demonstrates the updated way (as of v1.0.0b4) to initialize the `StoredAttestationPolicy` object. It now uses a positional `policy` parameter, accepting the policy directly as a string, simplifying the constructor call.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nStoredAttestationPolicy(attestation_policy)\n```\n\n----------------------------------------\n\nTITLE: Using Azure Advisor Management Client as Context Manager in Python\nDESCRIPTION: Demonstrates how to use the Azure Advisor Management Client as a context manager for improved performance by keeping the underlying HTTP session open.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/advisor/azure-mgmt-advisor/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith AdvisorManagementClient(credential, subscription_id) as client:\n    # Use the client here\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path\nDESCRIPTION: This line installs the Azure SDK tools package from a relative path. The -e flag indicates an editable install, allowing for development and testing of the tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgegateway/azure-mgmt-edgegateway/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Specifies required dependencies for Azure SDK Python project, including developer tools, core libraries, identity management, and HTTP client. Uses editable mode (-e) for local development packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.8'\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 for Python SDK Generation\nDESCRIPTION: Command to install Autorest v3 globally using npm.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Error Handling\nDESCRIPTION: Complete example demonstrating how to make API requests using the DataMapClient with proper error handling for HTTP responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.purview.datamap import DataMapClient\n>>> from azure.identity import DefaultAzureCredential\n>>> from azure.core.exceptions import HttpResponseError\n\n>>> client = DataMapClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n>>> try:\n        client.type_definition.get()\n    except HttpResponseError as e:\n        print('service responds error: {}'.format(e.response.json()))\n```\n\n----------------------------------------\n\nTITLE: Renaming 'session_status' Enum to 'rendering_session_status' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'session_status' enum definition in the Swagger document. It changes the name of the generated enum to 'rendering_session_status' in the Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.session_status'\n    transform: >\n        $[\"x-ms-enum\"].name = \"rendering_session_status\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Text Analytics Library\nDESCRIPTION: This snippet shows how to install the Azure Text Analytics library and run a sample script to extract key phrases from text.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-ai-textanalytics library\n$ pip install azure-ai-textanalytics\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_text_analytics.py\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes local project references using relative paths and an external package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iotoperations/azure-mgmt-iotoperations/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Example Output Format for Image Embeddings\nDESCRIPTION: Provides an example of the expected output structure when retrieving image embeddings. It shows the index, the length of the embedding vector (model-dependent), and truncated values of the embedding vector.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n```text\ndata[0]: length=1024, [0.0103302, -0.04425049, ..., -0.011543274, -0.0009088516]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation with Tox\nDESCRIPTION: Command to generate Sphinx documentation for a package using Tox. This ensures that contributors and users have clear, accessible information about how to use the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e sphinx -c <path to tox.ini> --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SignalR Management and Identity Libraries (Bash)\nDESCRIPTION: Installs the necessary Azure SDK packages for SignalR management (`azure-mgmt-signalr`) and authentication (`azure-identity`) using the pip package manager. These packages are required to interact with Azure SignalR services programmatically in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/signalr/azure-mgmt-signalr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-signalr\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Editable Installs\nDESCRIPTION: This snippet lists Python package dependencies using a format commonly found in requirements.txt files. It specifies two packages ('azure-sdk-tools' and 'azure-mgmt-resource') to be installed in editable mode ('-e') from relative local paths, suggesting a development environment setup. It also includes 'aiohttp', a standard library for asynchronous HTTP operations, to be installed from a package index like PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appplatform/azure-mgmt-appplatform/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings with ProxyPolicy in Azure Core\nDESCRIPTION: Examples of using ProxyPolicy to configure proxy settings for HTTP requests. Shows how to set up a basic proxy and how to configure a proxy with basic authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.pipeline.policies import ProxyPolicy\n\nproxy_policy = ProxyPolicy()\n\nproxy_policy.proxies = {'http': 'http://10.10.1.10:3148'}\n\n# Use basic auth\nproxy_policy.proxies = {'https': 'http://user:password@10.10.1.10:1180/'}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Text Analytics Client Library for Python\nDESCRIPTION: Use pip to install the Azure Text Analytics client library for Python. This is a prerequisite for running the sample code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-textanalytics\n```\n\n----------------------------------------\n\nTITLE: HTML Table Mapping Azure Storage Blob Operations\nDESCRIPTION: An HTML table showing the mapping between legacy Azure Storage Blob operations and their new SDK equivalents, including the client types that support each operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<td width=\"242\" valign=\"top\">\n    <p align=\"right\">exists</p>\n</td>\n<td width=\"111\" valign=\"top\">\n    <p align=\"right\">Any class</p>\n</td>\n<td width=\"163\" valign=\"top\">\n    <p align=\"right\">exists</p>\n</td>\n<td width=\"107\" valign=\"top\">\n    <p align=\"right\">BlobClient</p>\n</td>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Synapse Dependencies with pip\nDESCRIPTION: Commands to install the required Azure Synapse Artifacts package and Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-synapse-artifacts\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Standard Exception Class (v1.0.0b1+)\nDESCRIPTION: Specifies `azure.core.exceptions.HttpResponseError` as the primary exception type raised by the SDK starting from version 1.0.0b1, replacing the older `CloudError` and simplifying the exception hierarchy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nazure.core.exceptions.HttpResponseError\n```\n\n----------------------------------------\n\nTITLE: Configuring Package-2019-02 for Python SDK Generation\nDESCRIPTION: Tag-specific settings for generating 2019-02 version of the API with namespace and output folder configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.python.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: azure.mgmt.servicetoreplace.v2019_02_01\noutput-folder: $(python-sdks-folder)/servicetoreplace/azure-mgmt-servicetoreplace/azure/mgmt/servicetoreplace/v2019_02_01\n```\n\n----------------------------------------\n\nTITLE: EventPerfTest Class Implementation\nDESCRIPTION: Implementation of EventPerfTest class for event-based performance testing, including methods for handling events and errors in both sync and async contexts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass EventPerfTest:\n    def event_raised_sync(self) -> None:\n        # This method should not be overwritten, instead it should be called in your sync callback implementation\n        # to register a single successful event.\n\n    def error_raised_sync(self, error):\n        # This method should not be overwritten, instead it should be called in your sync callback implementation\n        # to register a failure in the event handler. This will result in the test being shutdown.\n\n    async def event_raised_async(self):\n        # This method should not be overwritten, instead it should be called in your async callback implementation\n        # to register a single successful event.\n\n    async def error_raised_async(self, error):\n        # This method should not be overwritten, instead it should be called in your async callback implementation\n        # to register a failure in the event handler. This will result in the test being shutdown.\n\n    def start_events_sync(self) -> None:\n        # Must be implemented - starts the synchronous process for receiving events.\n        # This can be blocking for the duration of the test as it will be run during setup() in a thread.\n\n    def stop_events_sync(self) -> None:\n        # Stop the synchronous process for receiving events. Must be implemented. Will be called during cleanup.\n\n    async def start_events_async(self) -> None:\n        # Must be implemented - starts the asynchronous process for receiving events.\n        # This can be blocking for the duration of the test as it will be scheduled in the eventloop during setup().\n\n    async def stop_events_async(self) -> None:\n        # Stop the asynchronous process for receiving events. Must be implemented. Will be called during cleanup.\n```\n\n----------------------------------------\n\nTITLE: Receiving Batched Messages with Azure Messaging SDK in Python\nDESCRIPTION: Defines a batched performance test for receiving messages using mock receiver objects from Azure messaging SDKs, covering both sync and async methods. Relies on 'devtools_testutils' for batch testing and Azure's messaging client stubs. Provides methods to receive messages, counts returned items, and adds CLI arguments for tuning batch size; outputs number of messages received and accepts configurable min/max batch sizes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.perfstress_tests import BatchPerfTest\n\nfrom azure.messaging.foo import MockReceiver\nfrom azure.messaging.foo.aio import MockReceiver as AsyncMockReceiver\n\nclass MessageReceiveTest(BatchPerfTest):\n    def __init__(self, arguments):\n        super().__init__(arguments)\n\n        # Setup service clients\n        self.receiver_client = MockReceiver()\n        self.async_receiver_client = AsyncMockReceiver()\n\n    def run_batch_sync(self) -> int:\n        messages = self.receiver_client.receive(\n            max_messages=self.args.max_message_count,\n            min_messages=self.args.min_message_count\n        )\n        return len(messages)\n\n    async def run_batch_async(self) -> int:\n        messages = await self.async_receiver_client.receive(\n            max_messages=self.args.max_message_count,\n            min_messages=self.args.min_message_count\n        )\n        return len(messages)\n\n    @staticmethod\n    def add_arguments(parser):\n        super(MessageReceiveTest, MessageReceiveTest).add_arguments(parser)\n        parser.add_argument('--max-message-count', nargs='?', type=int, default=10)\n        parser.add_argument('--min-message-count', nargs='?', type=int, default=0)\n\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies\nDESCRIPTION: Commands to install azure-identity for AAD authentication and aiohttp for async operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating a Case-Insensitive Enum using CaseInsensitiveEnumMeta in Python\nDESCRIPTION: This example demonstrates how to define a custom string-based enum (`MyCustomEnum`) that supports case-insensitive member access. It achieves this by inheriting from `str` and `Enum`, and specifying `azure.core.CaseInsensitiveEnumMeta` as its metaclass. This allows accessing enum members like `MyCustomEnum('foo')` or `MyCustomEnum('FOO')` interchangeably.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom azure.core import CaseInsensitiveEnumMeta\n\nclass MyCustomEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    FOO = 'foo'\n    BAR = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Subscription Management SDK and Azure Identity\nDESCRIPTION: Commands to install the required packages using pip. This installs the azure-mgmt-subscription package for subscription management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-subscription\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Tables Client Library for Python\nDESCRIPTION: Use pip to install the Azure Tables client library for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-data-tables\n```\n\n----------------------------------------\n\nTITLE: Multiapi Batch Execution Configuration\nDESCRIPTION: YAML configuration for multi-API batch execution that processes different API versions and generates a multiapi script. Includes tags for different API releases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: release_2_0\n  - tag: release_2_1\n  - tag: release_2022_08_31\n  - tag: release_2023_07_31\n  - multiapiscript: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Service Fabric Applications using Azure CLI\nDESCRIPTION: Commands to deploy Service Fabric applications using Azure Resource Manager templates. These commands create deployments for both system and user applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\naz deployment group create -g $RESOURCE_GROUP -f arm-templates\\sfmitestsystem.template.json -p arm-templates\\sfmitestsystem.parameters.json\naz deployment group create -g $RESOURCE_GROUP -f arm-templates\\sfmitestuser.template.json -p arm-templates\\sfmitestuser.parameters.json\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release 1.0.0b1 in Markdown\nDESCRIPTION: This snippet documents the initial release of the Azure SDK for Python, version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mysqlflexibleservers/azure-mgmt-mysqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2024-08-27)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Running the Trace Correlation Sample\nDESCRIPTION: Command to run the sample_correlate.py file which demonstrates trace correlation with the AzureMonitorLogExporter. Requires setting the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable first.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/logs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_correlate.py\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -EnvironmentVariables in PowerShell\nDESCRIPTION: Defines the optional 'EnvironmentVariables' parameter, a Hashtable containing key-value pairs that will be set as environment variables in the shell executing the script. It's not required, is named, defaults to an empty hashtable (@{}), and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: @{}\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Weather Python Client Library\nDESCRIPTION: Command to install the Azure Maps Weather client library for Python using pip. This is a prerequisite step before running any of the sample code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-weather --pre\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Changelog entries documenting the deprecation notice in version 1.0.0b2 and initial release in version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/app/azure-mgmt-app/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2022-05-11)\n\n- Deprecate the package\n\n## 1.0.0b1 (2022-03-22)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library for Python\nDESCRIPTION: If authenticating with Azure Active Directory, install the azure-identity library using pip. This is required for token-based authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Using ContentSafetyEvaluator with Image Input in Python\nDESCRIPTION: This example demonstrates how to use the ContentSafetyEvaluator with image input. It shows the structure of the conversation object, including system message, user message with text and image URL, and assistant response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nevaluator = ContentSafetyEvaluator(credential=azure_cred, azure_ai_project=project_scope)\nconversation = {\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"You are an AI assistant that understands images.\"}\n            ],\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"Can you describe this image?\"},\n                {\n                    \"type\": \"image_url\",\n                    \"image_url\": {\n                        \"url\": \"https://cdn.britannica.com/68/178268-050-5B4E7FB6/Tom-Cruise-2013.jpg\"\n                    },\n                },\n            ],\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"The image shows a man with short brown hair smiling, wearing a dark-colored shirt.\",\n                }\n            ],\n        },\n    ]\n}\nprint(\"Calling Content Safety Evaluator for multi-modal\")\nscore = evaluator(conversation=conversation)\n```\n\n----------------------------------------\n\nTITLE: Using sdk_set_dev_version CLI for Dev Version Management - Text\nDESCRIPTION: This snippet provides the CLI usage for the `sdk_set_dev_version` tool, which increments the dev version of a given package based on released versions. It requires specifying the build ID and can accept package glob patterns and optional service or repo path. Dependencies: azure-sdk-tools package and repository context. Key parameters: `--build-id`, `glob_string`, `--service`, and `--repo`. The script updates version metadata; output is version bumping for targeted packages. Limitation: expects to be run from within the repository or with the `--repo` parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nusage: sdk_set_dev_version [-h] [--service SERVICE] -b BUILD_ID [--repo REPO] [glob_string]\n\nIncrements version for a given package name based on the released version\n\npositional arguments:\n  glob_string           A comma separated list of glob strings that will target the top level directories that contain packages.Examples: All = \"azure-*\",\n                        Single = \"azure-keyvault\", Targeted Multiple = \"azure-keyvault,azure-mgmt-resource\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --service SERVICE     name of the service for which to set the dev build id (e.g. keyvault)\n  -b BUILD_ID, --build-id BUILD_ID\n                        id of the build (generally of the form YYYYMMDD.r) dot characters(.) will be removed\n  --repo REPO           Where is the start directory that we are building against? If not provided, the current working directory will be used. Please\n                        ensure you are within the azure-sdk-for-python repository.\n\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for Azure Maps Weather\nDESCRIPTION: YAML configuration for AutoRest that specifies input files, output location, package naming, and other generation options. Includes a directive to transform security definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/b9765efcc5ea795d69aeb8826f78101b3a35c615/specification/maps/data-plane/Weather/stable/1.1/weather.json\noutput-folder: ../azure/maps/weather\nnamespace: azure.maps.weather\npackage-name: azure-maps-weather\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\ncredential-scopes: https://atlas.microsoft.com/.default\nclear-output-folder: true\npython: true\nno-async: false\nadd-credential: false\ntitle: MapsWeatherClient\ndisable-async-iterators: true\npython-sdks-folder: $(python-sdks-folder)\n\ndirective:\n- from: swagger-document\n  where: $.securityDefinitions\n  transform: |\n    $[\"SharedKey\"][\"in\"] = \"header\";\n```\n\n----------------------------------------\n\nTITLE: Generating Tags for Multi-API Swagger Readme\nDESCRIPTION: Command for generating tags for multi-API Swagger readme files, which is useful when working with services that have multiple API versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython ./scripts/multi_api_readme_help.py /azure-rest-api-specs/specification/service/resource-manager/\n```\n\n----------------------------------------\n\nTITLE: Initializing StandbyPoolMgmtClient with DefaultAzureCredential (Python)\nDESCRIPTION: This Python code demonstrates how to initialize the `StandbyPoolMgmtClient`. It imports `DefaultAzureCredential` for authentication and `StandbyPoolMgmtClient`. It retrieves the Azure subscription ID from the `AZURE_SUBSCRIPTION_ID` environment variable and then creates an instance of the client, passing the credential and subscription ID. Assumes environment variables `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET` are set for authentication via `DefaultAzureCredential`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/standbypool/azure-mgmt-standbypool/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.standbypool import StandbyPoolMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StandbyPoolMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 2.1.0 in Markdown\nDESCRIPTION: This snippet documents the changes in version 2.1.0 of the Azure SDK for Python, noting a regular update for NGINX management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0 (2023-03-14)\n\n### Other Changes\n\n  - Regular update\n```\n\n----------------------------------------\n\nTITLE: Setting Key Vault Reference in Azure App Configuration using Azure CLI (Powershell)\nDESCRIPTION: This Azure CLI command creates a key in the specified App Configuration store that references a secret stored in Azure Key Vault. It requires the store name (`--name`), the key name for the reference (`--key`), and the secret identifier (URI) of the Key Vault secret (`--secret-identifier`). An existing Key Vault and secret are prerequisites.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Powershell\nCODE:\n```\naz appconfig kv set-keyvault --name <config-store-name> --key secret --secret-identifier <key-vault-reference>\n```\n\n----------------------------------------\n\nTITLE: Updating Digital Twin Properties in Python\nDESCRIPTION: Shows how to update properties of a digital twin, specifically changing the state of a ticket from 'open' to 'sold'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/02_Purchasing_Tickets.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncustomer_selection = available_tickets_df.loc[0]['$dtId']\n\npatch = [\n    {\n        \"op\": \"replace\",\n        \"path\": \"\",\n        \"value\": \"sold\"\n    }\n]\nservice_client.update_component(customer_selection,\"state\", patch)\n```\n\n----------------------------------------\n\nTITLE: Applying Authoring API Specific Autorest Directives (Conditional)\nDESCRIPTION: This YAML block serves as a placeholder or starting point for Autorest directives that should only be applied when the `release_authoring_1_1` tag is specified during generation. Currently, no specific directives are listed under this condition, but it indicates the structure for adding authoring-client-specific customizations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'release_authoring_1_1'\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Device Provisioning SDK with pip\nDESCRIPTION: Installs the `azure-iot-deviceprovisioning` package using the pip package manager. This command downloads and installs the necessary library files to interact with the Azure IoT Device Provisioning Service from a Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-iot-deviceprovisioning\n```\n\n----------------------------------------\n\nTITLE: Disabling Multi-Tenant Authentication via Environment Variable\nDESCRIPTION: Introduced the environment variable `AZURE_IDENTITY_DISABLE_MULTITENANTAUTH`. Setting this variable to `True` disables the multi-tenant authentication feature across applicable credentials in the Azure Identity SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_IDENTITY_DISABLE_MULTITENANTAUTH\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Managed Services Client\nDESCRIPTION: Python code showing how to authenticate with Azure Managed Services using DefaultAzureCredential and environment variables for client configuration\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedservices/azure-mgmt-managedservices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.managedservices import ManagedServicesClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ManagedServicesClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Running Upload Logs Performance Test for Azure Monitor\nDESCRIPTION: Example command that runs the UploadLogsTest with 1000 logs. This test measures the performance of uploading a batch of logs to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/tests/perf_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-ingestion> perfstress UploadLogsTest --num-logs=1000\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Security Insight Management SDK using DefaultAzureCredential\nDESCRIPTION: Python code sample demonstrating how to authenticate with the Security Insights service using DefaultAzureCredential. Requires environment variables for authentication to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/securityinsight/azure-mgmt-securityinsight/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.securityinsight import SecurityInsights\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SecurityInsights(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Package for Entra ID Authentication\nDESCRIPTION: Command to install the azure-identity package required for Entra ID authentication methods like DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install azure.identity\n```\n\n----------------------------------------\n\nTITLE: Expanding MonitorManagementClient Functionality in Azure SDK for Python\nDESCRIPTION: This snippet lists the new operation groups added to the MonitorManagementClient, enhancing its capabilities for managing various aspects of Azure monitoring.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nClient `MonitorManagementClient` added operation group `action_groups`\nClient `MonitorManagementClient` added operation group `activity_log_alerts`\nClient `MonitorManagementClient` added operation group `activity_logs`\nClient `MonitorManagementClient` added operation group `tenant_activity_logs`\nClient `MonitorManagementClient` added operation group `alert_rule_incidents`\nClient `MonitorManagementClient` added operation group `autoscale_settings`\nClient `MonitorManagementClient` added operation group `predictive_metric`\nClient `MonitorManagementClient` added operation group `baselines`\nClient `MonitorManagementClient` added operation group `diagnostic_settings`\nClient `MonitorManagementClient` added operation group `diagnostic_settings_category`\nClient `MonitorManagementClient` added operation group `event_categories`\nClient `MonitorManagementClient` added operation group `guest_diagnostics_settings`\nClient `MonitorManagementClient` added operation group `guest_diagnostics_settings_association`\nClient `MonitorManagementClient` added operation group `log_profiles`\nClient `MonitorManagementClient` added operation group `metric_alerts`\nClient `MonitorManagementClient` added operation group `metric_alerts_status`\nClient `MonitorManagementClient` added operation group `metric_definitions`\nClient `MonitorManagementClient` added operation group `metric_namespaces`\nClient `MonitorManagementClient` added operation group `metrics`\nClient `MonitorManagementClient` added operation group `operations`\nClient `MonitorManagementClient` added operation group `scheduled_query_rules`\nClient `MonitorManagementClient` added operation group `service_diagnostic_settings`\nClient `MonitorManagementClient` added operation group `vm_insights`\nClient `MonitorManagementClient` added operation group `private_link_scopes`\nClient `MonitorManagementClient` added operation group `private_link_scope_operation_status`\nClient `MonitorManagementClient` added operation group `private_link_resources`\nClient `MonitorManagementClient` added operation group `private_endpoint_connections`\nClient `MonitorManagementClient` added operation group `private_link_scoped_resources`\nClient `MonitorManagementClient` added operation group `subscription_diagnostic_settings`\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Generation for Azure Monitor Query Client\nDESCRIPTION: Settings for generating metrics-related code. It specifies multiple input files, output folder, and client details for the metrics component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n    - https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/monitor/resource-manager/Microsoft.Insights/stable/2024-02-01/metricDefinitions_API.json\n    - https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/monitor/resource-manager/Microsoft.Insights/stable/2024-02-01/metrics_API.json\n    - https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/monitor/resource-manager/Microsoft.Insights/stable/2024-02-01/metricNamespaces_API.json\noutput-folder: ../azure/monitor/query/_generated/metrics\ntitle: MonitorMetricsClient\ndescription: Azure Monitor Metrics Python Client\n```\n\n----------------------------------------\n\nTITLE: Importing Docker Images to Azure Container Registry\nDESCRIPTION: Azure CLI commands to login to container registry, import a Node.js image, and enable anonymous pull access for testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz acr login -n <registry-name>\naz acr import --name <registry-name> --source docker.io/library/node:latest --image node:latest\naz acr update --name <registry-name> --anonymous-pull-enabled\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Text Blocklist with Azure Content Safety BlocklistClient (Python)\nDESCRIPTION: This snippet retrieves details about a specific text blocklist using BlocklistClient from Azure Content Safety. Prerequisites are azure-ai-contentsafety, azure-core, and access credentials. The code sends a get_text_blocklist request with a provided blocklist name and prints its name and description if found. It includes comprehensive error handling via HttpResponseError and is crucial for auditing or verifying blocklist configurations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n\n    try:\n        blocklist = client.get_text_blocklist(blocklist_name=blocklist_name)\n        if blocklist:\n            print(\"\\nGet blocklist: \")\n            print(f\"Name: {blocklist.blocklist_name}, Description: {blocklist.description}\")\n    except HttpResponseError as e:\n        print(\"\\nGet text blocklist failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Version Update Changes - Azure Key Vault Certificates 4.0.0b6\nDESCRIPTION: Lists breaking changes in version 4.0.0b6 including renamed methods, parameters and properties for certificate operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- Updated `msrest` requirement to >=0.6.0\n- Renamed `get_policy` to `get_certificate_policy`\n- Renamed `update_policy` to `update_certificate_policy`\n- Renamed `create_contacts` to `set_contacts`\n- Renamed parameter `admin_details` to `admin_contacts`\n- Renamed all `name` parameters to include object name reference\n- Renamed `AdministratorDetails` to `AdministratorContact`\n- Various property renames in `CertificatePolicy` and other classes\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp for Async Support - Bash\nDESCRIPTION: Installs the aiohttp package using pip to enable asynchronous client support with azure-ai-projects. Required only if using asynchronous features. Should be run in a terminal. No parameters; downloads the latest aiohttp version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Secrets and Azure Identity libraries in Python\nDESCRIPTION: This command installs the necessary Python libraries for working with Azure Key Vault Secrets and Azure Identity authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-secrets azure-identity\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Search Documents Package in Python\nDESCRIPTION: This code snippet demonstrates how to import the azure-search-documents package, which is the actual client library for Azure Search in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-search-nspkg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure-search-documents import *\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Health Insights Radiology Insights Package (Bash)\nDESCRIPTION: Installs the necessary Python package for interacting with the Azure Health Insights Radiology Insights service using pip. This command requires Python and pip to be available in the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-healthinsights-radiologyinsights\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Administration and Azure Identity Libraries\nDESCRIPTION: This command installs the required libraries for running the Azure Key Vault Administration samples using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-administration azure-identity\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Container/Blob Parameters via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive iterates through paths defined in `x-ms-paths`. It filters the `parameters` list for each operation, removing references to the global `ContainerName` and `BlobName` parameters, as they are likely derived from the URL path and not needed as explicit method arguments in the generated SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $) {\n        if (property.includes('/{containerName}/{blob}')) {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\") && false == param['$ref'].endsWith(\"#/parameters/Blob\"))});\n        }\n        else if (property.includes('/{containerName}')) {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Weather Information Function - Python\nDESCRIPTION: Documents the \\\"fetch_weather\\\" function intended to accept a location string and fetch relevant weather data. The expected output and constraints depend on the implementation and external services utilized.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"fetch_weather\",\n  \"description\": \"Fetches the weather information for the specified location.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\"type\": \"string\", \"description\": \"The location to fetch weather for.\"}\n    },\n    \"required\": [\"location\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Initialization of ResourceManagementClient (Python)\nDESCRIPTION: Demonstrates the previous method for initializing the `ResourceManagementClient` in Azure SDK for Python versions prior to 2.0.0rc4/0.30.0rc4. This approach used a separate `ResourceManagementClientConfiguration` class to pass credentials and subscription ID. This method is now deprecated as per the changelog.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresource_client = ResourceManagementClient(\n    ResourceManagementClientConfiguration(\n        credentials,\n        subscription_id\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing azure-ai-inference Package using Bash\nDESCRIPTION: Installs the `azure-ai-inference` Python package using pip. This package is required to interact with Azure AI Inference endpoints, specifically for getting an authenticated `ChatCompletionsClient`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-inference\n```\n\n----------------------------------------\n\nTITLE: Analyzing Text Using Blocklists with Azure Content Safety Python SDK\nDESCRIPTION: This Python snippet demonstrates how to analyze text using Azure Content Safety's blocklist feature. Dependencies include azure-ai-contentsafety and azure-core, and environment variables for CONTENT_SAFETY_KEY and CONTENT_SAFETY_ENDPOINT are required. The sample constructs a ContentSafetyClient, invokes analyze_text with blocklist names and options, and prints any matches found, including details on blocklist name and matched text. Error handling is implemented via Azure's HttpResponseError, and the snippet assumes blocklists are already set up and modifications have propagated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import AnalyzeTextOptions\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    input_text = \"I h*te you and I want to k*ll you.\"\n\n    try:\n        # After you edit your blocklist, it usually takes effect in 5 minutes, please wait some time before analyzing with blocklist after editing.\n        analysis_result = client.analyze_text(\n            AnalyzeTextOptions(text=input_text, blocklist_names=[blocklist_name], halt_on_blocklist_hit=False)\n        )\n        if analysis_result and analysis_result.blocklists_match:\n            print(\"\\nBlocklist match results: \")\n            for match_result in analysis_result.blocklists_match:\n                print(\n                    f\"BlocklistName: {match_result.blocklist_name}, BlockItemId: {match_result.blocklist_item_id}, \"\n                    f\"BlockItemText: {match_result.blocklist_item_text}\"\n                )\n    except HttpResponseError as e:\n        print(\"\\nAnalyze text failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Durabletask Management Client Library in Python\nDESCRIPTION: Commands to install the required packages for using the Azure Durabletask Management Client Library. This includes the main library and the azure-identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/durabletask/azure-mgmt-durabletask/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-durabletask\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK Python Project\nDESCRIPTION: This requirements file lists two dependencies: a local tooling package from the repository and a pinned version of the azure-mgmt-resource package limited to version 21.1.0 or earlier.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databricks/azure-mgmt-databricks/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-mgmt-resource<=21.1.0\n```\n\n----------------------------------------\n\nTITLE: Migrating PostgreSQL Flexible Server Imports in Python\nDESCRIPTION: Illustrates the required import statement change when migrating from the deprecated `azure.mgmt.rdbms.postgresql_flexibleservers` module to the recommended `azure.mgmt.postgresqlflexibleservers` package. This change is necessary due to the module's deprecation within the `azure-mgmt-rdbms` library as announced in version 10.2.0b18.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/rdbms/azure-mgmt-rdbms/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.rdbms.postgresql_flexibleservers import *\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.postgresqlflexibleservers import *\n```\n\n----------------------------------------\n\nTITLE: Runtime SDK Generation Settings for Azure QnA - YAML with Condition\nDESCRIPTION: Sets generation settings specific to the 'runtime' tag, targeting the stable 2021-10-01 API for runtime operations. Includes input OpenAPI file, output folder, model mode, and a custom client title. Must be invoked with the runtime tag for these settings to apply, and supports msrest modeling. Outputs generated code to the runtime directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nyaml $(tag) == 'release_runtime_1_1'\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/59ad2b7dd63e952822aa51e11a26a0af5724f996/specification/cognitiveservices/data-plane/Language/stable/2021-10-01/questionanswering.json\noutput-folder: ../azure/ai/language/questionanswering\nmodels-mode: msrest\ntitle: QuestionAnsweringClient\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.1.0 in Markdown\nDESCRIPTION: This snippet documents the changes in version 1.1.0 of the Azure SDK for Python, noting a new parameter added to the NginxConfigurationProperties model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0 (2022-09-20)\n\n### Features Added\n\n  - Model NginxConfigurationProperties has a new parameter protected_files\n```\n\n----------------------------------------\n\nTITLE: Renaming 'session_size' Enum to 'rendering_session_size' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'session_size' enum definition in the Swagger document. It changes the name of the generated enum to 'rendering_session_size' in the Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.session_size'\n    transform: >\n        $[\"x-ms-enum\"].name = \"rendering_session_size\";\n```\n\n----------------------------------------\n\nTITLE: HttpResponse Abstract Base Class for Azure Core\nDESCRIPTION: The HttpResponse abstract base class API that must be implemented for transport-specific derivatives. It defines a consistent interface for HTTP responses regardless of the underlying transport mechanism.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass HttpResponse:\n\n    @property\n    def request(self) -> HttpRequest:\n        \"\"\"The request that resulted in this response.\"\"\"\n\n    @property\n    def status_code(self) -> int:\n        \"\"\"The status code of this response.\"\"\"\n\n    @property\n    def headers(self) -> MutableMapping[str, str]:\n        \"\"\"The response headers. Must be case-insensitive.\"\"\"\n\n    @property\n    def reason(self) -> str:\n        \"\"\"The reason phrase for this response.\"\"\"\n\n    @property\n    def content_type(self) -> Optional[str]:\n        \"\"\"The content type of the response.\"\"\"\n\n    @property\n    def is_closed(self) -> bool:\n        \"\"\"Whether the network connection has been closed yet.\"\"\"\n\n    @property\n    def is_stream_consumed(self) -> bool:\n        \"\"\"Whether the stream has been consumed.\"\"\"\n\n    @property\n    def encoding(self) -> Optional[str]:\n        \"\"\"Returns the response encoding.\"\"\"\n\n    @encoding.setter\n    def encoding(self, value: Optional[str]) -> None:\n        \"\"\"Sets the response encoding.\"\"\"\n\n    @property\n    def url(self) -> str:\n        \"\"\"The URL that resulted in this response.\"\"\"\n\n    @property\n    def content(self) -> bytes:\n        \"\"\"Return the response's content in bytes.\"\"\"\n\n    def text(self, encoding: Optional[str] = None) -> str:\n        \"\"\"Returns the response body as a string.\"\"\"\n\n    def json(self) -> Any:\n        \"\"\"Returns the whole body as a json object.\"\"\"\n\n    def raise_for_status(self) -> None:\n        \"\"\"Raises an HttpResponseError if the response has an error status code.\"\"\"\n\n    def read(self) -> bytes:\n        \"\"\"Read the response's bytes.\"\"\"\n\n    def iter_raw(self, **kwargs: Any) -> Iterator[bytes]:\n        \"\"\"Iterates over the response's bytes. Will not decompress in the process.\"\"\"\n\n    def iter_bytes(self, **kwargs: Any) -> Iterator[bytes]:\n        \"\"\"Iterates over the response's bytes. Will decompress in the process.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Chat and Identity Libraries\nDESCRIPTION: This snippet shows how to install the required libraries for Azure Communication Chat and Identity services using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-communication-chat library\n$ pip install azure-communication-chat\n$ # azure-communication-identity library for authentication\n$ pip install azure-communication-identity\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_comm_chat.py\n```\n\n----------------------------------------\n\nTITLE: Creating Senders and Receivers - Service Bus v0.50 - Python\nDESCRIPTION: Illustrates the creation of queue, topic, and subscription clients as well as their sender and receiver instances in v0.50. Dependencies include a connection string and pre-existing queue/topic/subscription entities. Key classes are ServiceBusClient, get_queue, get_topic, get_subscription, and get_deadletter_receiver. Inputs are entity names; outputs are client objects; message settlement must be handled separately.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = ServiceBusClient.from_connection_string(connstr)\n\n# for queues\nqueue_client = client.get_queue(queue_name)\nqueue_sender = queue_client.get_sender()\nqueue_receiver = queue_client.get_receiver()\nqueue_dead_letter_receiver = queue_client.get_deadletter_receiver()\n\n# for topics\ntopic_client = client.get_topic(topic_name)\ntopic_sender = topic_client.get_sender()\n\n# for subscription\nsubscription_client = client.get_subscription(topic_name, subscription_name)\nsubscription_receiver = subscription_client.get_receiver()\nsubscription_dead_letter_receiver = subscription_client.get_deadletter_receiver()\n```\n\n----------------------------------------\n\nTITLE: Sample Hello World Output\nDESCRIPTION: Example console output from running the hello world sample showing the created/updated party details including ID, name, description and timestamps.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCreating party, or updating if party already exists... Done\nHere are the details of the party:\nID: contoso-party\nName: Contoso\nDescription: Contoso is hard working.\nCreated timestamp: 2021-06-21 10:21:11+00:00\nLast modified timestamp: 2021-06-22 21:01:35+00:00\n```\n\n----------------------------------------\n\nTITLE: Deleting Keys with New Azure Key Vault SDK\nDESCRIPTION: Shows the improved key deletion process using azure-keyvault-keys SDK, which supports operation polling and waiting for deletion completion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndeleted_key_poller = key_client.begin_delete_key(name=\"key-name\")\ndeleted_key = deleted_key_poller.result()\n\ndeleted_key_poller.wait()\nkey_client.purge_deleted_key(name=\"key-name\")\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Search Performance Tests\nDESCRIPTION: Required environment variables that need to be set to access live Azure Search resources for performance testing, including API key, service endpoint, and index name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_SEARCH_API_KEY=<search api key>\nAZURE_SEARCH_SERVICE_ENDPOINT=<end point url>\nAZURE_SEARCH_INDEX_NAME=<index name>\n```\n\n----------------------------------------\n\nTITLE: Generating an Azure SDK Package from REST API Specs\nDESCRIPTION: Commands for generating an SDK package from REST API specifications, including options for multi-API clients and multi-client packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools.generate_sdk -v -m restapi_path/readme.md\n```\n\nLANGUAGE: shell\nCODE:\n```\npython ./scripts/multiapi_init_gen.py azure-mgmt-myservice\n```\n\nLANGUAGE: shell\nCODE:\n```\npython ./scripts/multiapi_init_gen.py azure-mgmt-myservice#subclientname\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Datalake Library (Python)\nDESCRIPTION: Installs the pre-release version of the Azure Storage DataLake client library for Python using pip. This command is necessary to run the provided Python sample scripts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-file-datalake --pre\n```\n\n----------------------------------------\n\nTITLE: Modifying DimensionGroupIdentity for MetricSeriesGroupDetectionCondition\nDESCRIPTION: This directive changes the schema of the MetricSeriesGroupDetectionCondition model, specifically modifying the 'group' property to include a 'dimension' object with a 'seriesGroupKey'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $(\"definitions\")[\"MetricSeriesGroupDetectionCondition\"]\n    transform: >\n        $.properties[\"group\"] = {\"required\": [\"dimension\"], \"type\": \"object\", \"properties\": { \"dimension\": { \"x-ms-client-name\": \"seriesGroupKey\", \"description\": \"dimension specified for series group\", \"type\": \"object\", \"additionalProperties\": { \"type\": \"string\" }}}};\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Search SDK - Bash\nDESCRIPTION: This pip command installs the Azure Maps Search SDK for Python, making the 'azure-maps-search' package available for import. It requires Python 3.8+ and pip to be installed. Running this will add the Azure Maps Search SDK and its dependencies to your environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-search\n```\n\n----------------------------------------\n\nTITLE: Retrieving Health Insights Endpoint Using Azure CLI\nDESCRIPTION: Azure CLI command to retrieve the endpoint for a Health Insights service resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Calculating File Size and SHA-256 Hash in Python\nDESCRIPTION: This snippet defines two helper functions: one for retrieving the size of a file and another for calculating the SHA-256 hash of a file, encoded in base64 format. Dependencies include the Python os, base64, and hashlib modules. Inputs are file paths, and outputs are the integer file size and string hash respectively. These helpers are essential for constructing Azure import requests that require artifact metadata.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ImportUpdate/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_file_size(file_path):\n    return os.path.getsize(file_path)\n\ndef get_file_hash(file_path):\n    with open(file_path, \"rb\") as f:\n        bytes = f.read()  # read entire file as bytes\n        return base64.b64encode(hashlib.sha256(bytes).digest()).decode(\"utf-8\")\n```\n\n----------------------------------------\n\nTITLE: Feature Additions and Breaking Changes in Azure Network Management Client 27.0.0\nDESCRIPTION: This code snippet outlines the new features added and breaking changes in version 27.0.0 of the Azure Network Management Client, including new operations and model changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 27.0.0 (2024-09-22)\n\n### Features Added\n\n  - Added operation SecurityUserConfigurationsOperations.begin_delete\n  - Added operation VpnLinkConnectionsOperations.begin_set_or_init_default_shared_key\n  - Added operation VpnLinkConnectionsOperations.get_all_shared_keys\n  - Added operation VpnLinkConnectionsOperations.get_default_shared_key\n  - Added operation VpnLinkConnectionsOperations.list_default_shared_key\n  - Added operation group NetworkManagerRoutingConfigurationsOperations\n  - Added operation group RoutingRuleCollectionsOperations\n  - Added operation group RoutingRulesOperations\n  - Added operation group SecurityUserRuleCollectionsOperations\n  - Added operation group SecurityUserRulesOperations\n  - Model ApplicationGatewayFirewallRule has a new parameter sensitivity\n  - Model AzureFirewall has a new parameter autoscale_configuration\n  - Model ConfigurationGroup has a new parameter member_type\n  - Model ConnectionSharedKeyResult has a new parameter id\n  - Model ConnectionSharedKeyResult has a new parameter name\n  - Model ConnectionSharedKeyResult has a new parameter properties\n  - Model ConnectionSharedKeyResult has a new parameter type\n  - Model FlowLog has a new parameter enabled_filtering_criteria\n  - Model FlowLogInformation has a new parameter enabled_filtering_criteria\n  - Model ManagedRuleOverride has a new parameter sensitivity\n  - Model ManagedRulesDefinition has a new parameter exceptions\n  - Model NetworkGroup has a new parameter member_type\n  - Model PrivateLinkService has a new parameter destination_ip_address\n  - Model VirtualNetwork has a new parameter private_endpoint_v_net_policies\n  - Model VirtualNetworkGateway has a new parameter resiliency_model\n  - Model WebApplicationFirewallPolicy has a new parameter application_gateway_for_containers\n\n### Breaking Changes\n\n  - Model ConnectionSharedKeyResult no longer has parameter value\n```\n\n----------------------------------------\n\nTITLE: Generating Azure SDK Conda Package Locally\nDESCRIPTION: Command to build a conda package using the sdk_build_conda tool. It requires a JSON configuration blob and optionally accepts additional conda channels.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/conda-builds.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# you will probably need to escape the json quotes\nsdk_build_conda -c \"<json config blob>\" --channel \"additional/channel/if/you/want/one\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Sent Share Invitations with PurviewSharingClient - Python\nDESCRIPTION: Deletes a specific sent share invitation using the PurviewSharingClient from the Azure SDK for Python. Requires environment variable ENDPOINT and proper authentication via DefaultAzureCredential. Inputs are UUIDs for sent_share_id and sent_share_invitation_id; the method begins the deletion and waits for completion, then prints the response. The snippet demonstrates asynchronous operation handling. Dependencies: azure.purview.sharing, azure.identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os, uuid, json\\n\\nfrom azure.purview.sharing import PurviewSharingClient\\nfrom azure.identity import DefaultAzureCredential\\n\\nendpoint = os.environ[\\\"ENDPOINT\\\"]\\ncredential = DefaultAzureCredential()\\n\\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\\n\\nsent_share_id = uuid.uuid4()\\nsent_share_invitation_id = uuid.uuid4()\\n\\ndelete_invitation_request = client.sent_shares.begin_delete_invitation(\\n    sent_share_id=str(sent_share_id),\\n    sent_share_invitation_id=str(sent_share_invitation_id))\\ndelete_invitation_response = delete_invitation_request.result()\\nprint(delete_invitation_response)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Core and Storage Queue with Specific Versions\nDESCRIPTION: Example of how to install specific versions of azure-core and azure-storage-queue using pip. This is necessary if you want to use an older version of the queue library that depends on an older version of azure-core.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core==1.0.0b1 azure-storage-queue==12.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-level Logging with Decorators in Azure ML SDK\nDESCRIPTION: Demonstrates how to apply the distributed_trace and monitor_with_activity decorators to a method to enable distributed tracing and activity monitoring. This example shows the implementation for the get_keys method in the workspace module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/azure/ai/ml/_telemetry/guide_to_logging.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @monitor_with_activity(ops_logger, \"Workspace.Get_Keys\", ActivityType.PUBLICAPI)\n    @distributed_trace\n    def get_keys(self, name: Optional[str] = None) -> Optional[WorkspaceKeys]:\n        \"\"\"Get WorkspaceKeys by workspace name.\n\n        :param name: Name of the workspace.\n        :type name: str\n        :return: Keys of workspace dependent resources.\n        :rtype: ~azure.ai.ml.entities.WorkspaceKeys\n\n        .. admonition:: Example:\n\n            .. literalinclude:: ../samples/ml_samples_workspace.py\n                :start-after: [START workspace_get_keys]\n                :end-before: [END workspace_get_keys]\n                :language: python\n                :dedent: 8\n                :caption: Get the workspace keys for the workspace with the given name.\n        \"\"\"\n        workspace_name = self._check_workspace_name(name)\n        obj = self._operation.list_keys(self._resource_group_name, workspace_name)\n        return WorkspaceKeys._from_rest_object(obj)\n```\n\n----------------------------------------\n\nTITLE: mypy Type Error for Mixing str and bytes with AnyStr in Command Line\nDESCRIPTION: Demonstrates mypy's error when attempting to call a function with AnyStr-typed parameters using mismatched types (str and bytes), with clear feedback on type variable misuse. No Python-specific dependencies required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_42\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:6: error: Value of type variable \"AnyStr\" of \"concat\" cannot be \"Sequence[object]\"\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests\nDESCRIPTION: Commands to navigate to the tests directory and list available performance tests using the perfstress tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-data-tables> cd tests\n(env) ~/azure-data-tables/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Provisioner Service Principal Example for New-TestResources.ps1\nDESCRIPTION: An example showing how to use a provisioner service principal to deploy resources. This approach is useful when the executing context differs from the desired Azure context for resource creation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 `\n    -BaseName 'azsdk' `\n    -ServiceDirectory 'keyvault' `\n    -SubscriptionId 'REPLACE_WITH_SUBSCRIPTION_ID' `\n    -ResourceGroupName 'REPLACE_WITH_NAME_FOR_RESOURCE_GROUP' `\n    -Location 'eastus' `\n    -ProvisionerApplicationId 'REPLACE_WITH_PROVISIONER_APPLICATION_ID' `\n    -ProvisionerApplicationSecret 'REPLACE_WITH_PROVISIONER_APPLICATION_ID' `\n    -TestApplicationId 'REPLACE_WITH_TEST_APPLICATION_ID' `\n    -TestApplicationOid 'REPLACE_WITH_TEST_APPLICATION_OBJECT_ID' `\n    -TestApplicationSecret 'REPLACE_WITH_TEST_APPLICATION_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos DB Management packages with pip\nDESCRIPTION: Commands to install the required Azure packages. This installs the Azure Cosmos DB management client library and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-cosmosdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-cosmosdb\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Security Insight Management SDK for Python\nDESCRIPTION: Command-line instructions for installing the required packages using pip. Installs the azure-mgmt-securityinsight package for Security Insight Management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/securityinsight/azure-mgmt-securityinsight/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-securityinsight\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Generation\nDESCRIPTION: YAML configuration for batch execution of both client generations. Enables nested generation without parent module overwriting the child components.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: identity-service\n  - tag: confidential-ledger\n```\n\n----------------------------------------\n\nTITLE: Installing uAMQP Transport with pip\nDESCRIPTION: Command to install the uAMQP package as an optional transport layer for Azure Service Bus.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install uamqp\n```\n\n----------------------------------------\n\nTITLE: Listing Block Items in Azure Content Safety using Python\nDESCRIPTION: This snippet demonstrates how to list all items in a text blocklist using Azure AI Content Safety. It creates a BlocklistClient with Azure credentials, fetches all items from a named blocklist, and handles any HTTP response errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n\n    try:\n        block_items = client.list_text_blocklist_items(blocklist_name=blocklist_name)\n        if block_items:\n            print(\"\\nList block items: \")\n            for block_item in block_items:\n                print(\n                    f\"BlockItemId: {block_item.blocklist_item_id}, Text: {block_item.text}, \"\n                    f\"Description: {block_item.description}\"\n                )\n    except HttpResponseError as e:\n        print(\"\\nList block items failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Running Instrument Usage Sample\nDESCRIPTION: Commands to run the sample that demonstrates different types of instruments in the Opentelemetry metrics API. Requires the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/metrics/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_instruments.py\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -NewTestResourcesRemainingArguments in PowerShell\nDESCRIPTION: Defines the optional 'NewTestResourcesRemainingArguments' parameter of type Object. It captures any arguments passed to the script that are not explicitly declared, preventing parameter errors and enabling backward compatibility if new parameters are added in updated versions used by older hotfix branches. It's not required, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nType: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Dependencies for Python\nDESCRIPTION: This snippet lists the relative paths to required dependencies for the Azure SDK for Python project. It includes references to Azure SDK tools and the Azure Identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/largeinstance/azure-mgmt-largeinstance/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure NetApp Files Management Client Library in Python\nDESCRIPTION: This snippet shows how to install the Azure NetApp Files Management Client Library and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-netapp\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Release History Entry in Markdown\nDESCRIPTION: Markdown header structure documenting version 1.0.0b1 which is currently unreleased.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (Unreleased)\n```\n\n----------------------------------------\n\nTITLE: Running Pylint for Static Analysis\nDESCRIPTION: Command to run Pylint static analysis tool for lint checking a specific Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e pylint -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom LROPoller with Cancellation in Python\nDESCRIPTION: This snippet defines `CustomLROPoller`, inheriting from `azure.core.polling.LROPoller`, to add custom functionality to an Azure LRO. It includes a `cancel` method that uses the underlying custom polling method's client and a stored `file_id` (assumed to be managed by the polling method) to cancel the operation. It also overrides the class method `from_continuation_token` to ensure the custom poller type is correctly instantiated when resuming from a token.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar\nfrom azure.core.polling import LROPoller, PollingMethod\nPollingReturnType_co = TypeVar(\"PollingReturnType_co\", covariant=True)\n\n\nclass CustomLROPoller(LROPoller[PollingReturnType_co]):\n\n    def cancel(self, **kwargs) -> None:\n        \"\"\"Cancel the upload\"\"\"\n        return self.polling_method().client.cancel_upload_file(self.polling_method().file_id, **kwargs)\n\n    @classmethod\n    def from_continuation_token(\n        cls, polling_method: PollingMethod[PollingReturnType_co], continuation_token: str, **kwargs\n    ) -> \"CustomLROPoller[PollingReturnType_co]\":\n        (\n            client,\n            initial_response,\n            deserialization_callback,\n        ) = polling_method.from_continuation_token(continuation_token, **kwargs)\n        return cls(client, initial_response, deserialization_callback, polling_method)\n```\n\n----------------------------------------\n\nTITLE: Release 2.1 Configuration\nDESCRIPTION: YAML configuration specific to Release 2.1 of the Form Recognizer API. Defines the input file, namespace, and output folder locations for this API version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/cognitiveservices/data-plane/FormRecognizer/stable/v2.1/FormRecognizer.json\nnamespace: azure.ai.formrecognizer.v2_1\noutput-folder: $(python-sdks-folder)/formrecognizer/azure-ai-formrecognizer/azure/ai/formrecognizer/_generated/v2_1\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Migrationassessment Management SDK\nDESCRIPTION: Commands to install the Azure Migration Assessment Management package and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/migrate/azure-mgmt-migrationassessment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-migrationassessment\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Resource Type Definition in Azure CLI Core\nDESCRIPTION: Definition of the MGMT_RESOURCE_RESOURCES constant from the shared profiles module, which maps to the Azure management package and client name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/find_sdk/find_sdk_in_cli_command.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# src/azure-cli-core/azure/cli/core/profiles/_shared.py\nMGMT_RESOURCE_RESOURCES = ('azure.mgmt.resource.resources', 'ResourceManagementClient')\n```\n\n----------------------------------------\n\nTITLE: New Client Classes for Azure Key Vault Operations in Python\nDESCRIPTION: Introduction of KeyVaultAccessControlClient for role-based access control and KeyVaultBackupClient for backup and restore operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nKeyVaultAccessControlClient  # For role-based access control operations\nKeyVaultBackupClient       # For vault backup and restore operations\n```\n\n----------------------------------------\n\nTITLE: MSAL Package Version History Documentation\nDESCRIPTION: Markdown documentation showing the release history of MSAL Python packages with their respective version numbers and release dates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/msal.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Microsoft Authentication Library (MSAL) for Python (conda)\\n\\n## 2025.03.01\\n\\n### Packages included\\n\\n- msal-1.31.1\\n\\n## 2024.12.01\\n\\n### Packages included\\n\\n- msal-1.31.1\\n\\n## 2024.09.01\\n\\n### Packages included\\n\\n- msal-1.30.0\\n\\n## 2024.06.01\\n\\n### Packages included\\n\\n- msal-1.28.0\\n\\n## 2024.03.01\\n\\n### Packages included\\n\\n- msal-1.26.0\\n\\n## 2023.12.01\\n\\n### Packages included\\n\\n- msal-1.25.0\\n\\n## 2023.09.01\\n\\n### Packages included\\n\\n- msal-1.23.0\\n\\n## 2023.06.01\\n\\n### Packages included\\n\\n- msal-1.22.0\\n\\n## 2023.03.01\\n\\n### Packages included\\n\\n- msal-1.21.0\\n\\n## 2022.12.01\\n\\n### Packages included\\n\\n- msal-1.20.0\\n\\n## 2022.09.01\\n\\n### Packages included\\n\\n- msal-1.18.0\\n\\n## 2022.06.01\\n\\n### Packages included\\n\\n- msal-1.17.0\\n\\n## 2022.03.01\\n\\n### Packages included\\n\\n- msal-1.17.0\\n\\n## 2021.12.01\\n\\n### Packages included\\n\\n- msal-1.16.0\\n\\n## 2021.09.01\\n\\n### Packages included\\n\\n- msal-1.13.0\\n\\n## 2021.06.01\\n\\n### Packages included\\n\\n- msal-1.12.0\n```\n\n----------------------------------------\n\nTITLE: Running perfstress Performance Tests for Azure Text Analytics in Shell\nDESCRIPTION: Demonstrates commands to navigate to the perfstress_tests directory and execute the 'perfstress' test runner. The first command changes the current working directory to where the performance tests are located; the second invokes perfstress to list or run available tests. The user must have devtools_testutils installed, and only one test can be run at a time. Output will enumerate available tests or begin execution, depending on arguments passed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-textanalytics> cd tests/perfstress_tests/\\n(env) ~/azure-ai-textanalytics/tests/perfstress_tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Getting Map Attribution\nDESCRIPTION: Example of requesting map copyright attribution information for a section of a tileset.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.render import MapsRenderClient\nfrom azure.maps.render import TilesetID\n\nmaps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_render_client.get_map_attribution(\n    tileset_id=TilesetID.MICROSOFT_BASE,\n    zoom=6,\n    bounds=[42.982261, 24.980233, 56.526017, 1.355233],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest for Azure Attestation Python SDK (YAML)\nDESCRIPTION: Defines the configuration settings for Autorest when generating the Python client library for Azure Attestation. Specifies the input Swagger definition URL, output folder, target namespace, license, API version tag, package version, credential scopes, and other Python-specific generation options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ntitle: AzureAttestationRestClient\nrequire: \n  - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/attestation/data-plane/readme.md\noutput-folder: ../azure/security/attestation/_generated\nnamespace: azure.security.attestation._generated\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\ntag: package-2020-10-01\npackage-version: 1.0.0b2\nenable-xml: false\nclear-output-folder: true\npython: true\nv3: true\nadd-credentials: true\nazure-arm: false\npayload-flattening-threshold: 2\npackage-name: azure-security-attestation\ncredential-scopes: 'https://attest.azure.net/.default'\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Geolocation via Azure CLI\nDESCRIPTION: Command to create an Azure Maps account using Azure CLI with configurable resource group, account name and SKU parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n----------------------------------------\n\nTITLE: Running Python Sample Files\nDESCRIPTION: Example command showing how to execute a sample Python file from the terminal after navigating to the samples directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_fuzzy_route.py\n```\n\n----------------------------------------\n\nTITLE: Building Blob Client with OAuth Credentials in Azure Storage SDK\nDESCRIPTION: Demonstrates how to authenticate with Azure Blob Storage using OAuth credentials in both version 2.X (using ADAL) and version 12 (using azure-identity package with ClientSecretCredential) of the Azure Storage SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.common import (\n    TokenCredential,\n)\nimport adal\n\ncontext = adal.AuthenticationContext(\n    str.format(\"{}/{}\", \"<active_directory_auth_endpoint>\", \"<active_directory_tenant_id>\"),\n    api_version=None, validate_authority=True)\n\ntoken = context.acquire_token_with_client_credentials(\n    \"https://storage.azure.com\",\n    \"<active_directory_application_id>\",\n    \"<active_directory_application_secret>\")[\"accessToken\"]\ntoken_credential = TokenCredential(token)\n\nservice = BlockBlobService(\"<storage_account_name>\", token_credential=token_credential)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import ClientSecretCredential\ntoken_credential = ClientSecretCredential(\n    \"<active_directory_tenant_id>\",\n    \"<active_directory_application_id>\",\n    \"<active_directory_application_secret>\"\n)\n\n# Instantiate a BlobServiceClient using a token credential\nfrom azure.storage.blob import BlobServiceClient\nblob_service_client = BlobServiceClient(\"https://<my-storage-account-name>.blob.core.windows.net\", credential=token_credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Billing and Identity Libraries using Pip (Bash)\nDESCRIPTION: Installs the `azure-mgmt-billing` and `azure-identity` Python packages using the pip package manager. These packages are prerequisites for interacting with Azure Billing APIs and authenticating requests respectively.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/billing/azure-mgmt-billing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install azure-mgmt-billing\npip install azure-identity\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Container Registry with Azure CLI\nDESCRIPTION: Azure CLI command to create a new Container Registry instance with basic SKU\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\naz acr create --name MyContainerRegistry --resource-group MyResourceGroup --location westus --sku Basic\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for AmqpMessageProperties Class using Sphinx reStructuredText\nDESCRIPTION: This directive employs Sphinx's `autoclass` to create documentation for the `azure.eventhub.amqp.AmqpMessageProperties` class. It ensures documentation includes all members, undocumented members, and inherited members. Requires Sphinx and the `azure-eventhub` package installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.amqp.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.amqp.AmqpMessageProperties\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Dependencies\nDESCRIPTION: This requirements file lists the dependencies needed for Azure SDK development. It includes references to local tools, the identity package, and the aiohttp library for asynchronous HTTP operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hardwaresecuritymodules/azure-mgmt-hardwaresecuritymodules/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Enumerating Update Versions for a Name/Provider using DeviceUpdateClient in Python\nDESCRIPTION: This snippet illustrates how to list all available versions for a specific update, identified by its name and provider. It retrieves the provider and update name from environment variables (`DEVICEUPDATE_UPDATE_PROVIDER`, `DEVICEUPDATE_UPDATE_NAME`) and calls the `list_versions` method on the `DeviceUpdateClient`, passing both names. The code then iterates through and prints each version string found.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ListUpdates/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n``` python\nupdate_name = os.environ[\"DEVICEUPDATE_UPDATE_NAME\"]\nresponse = client.device_update.list_versions(update_provider, update_name)\nfor item in response:\n    print(f\"  {item}\")\n```\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Package List Documentation\nDESCRIPTION: List of Azure Management SDK packages and their versions, organized by release date. Includes packages for managing various Azure services like compute, storage, databases, networking and more.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apicenter-1.0.0\n[...truncated for brevity...]\n- azure-mgmt-webpubsub-1.1.0\n- azure-mgmt-workloads-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes local package references using relative paths and external library names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-core-tracing-opentelemetry\naiohttp\nazure-ai-inference\nopenai\nopentelemetry-sdk\nopentelemetry-exporter-otlp-proto-grpc\nazure-ai-ml\nprompty\n```\n\n----------------------------------------\n\nTITLE: Retrieving keys with azure-keyvault\nDESCRIPTION: Demonstrates how to retrieve key versions and specific keys using the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault import KeyId\n\nkey_items = client.get_key_versions(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    key_name=\"key-name\"\n)\n\nfor key_item in key_items:\n    key_id = KeyId(key_item.kid)\n    key_version = key_id.version\n\n    key_bundle = client.get_key(\n        vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n        key_name=\"key-name\",\n        key_version=key_version\n    )\n    key = key_bundle.key\n```\n\n----------------------------------------\n\nTITLE: Editable Install of Azure SDK Tools (Python)\nDESCRIPTION: Specifies an editable installation (`-e`) of the `azure-sdk-tools` package located at a relative path (`../../../tools/azure-sdk-tools`). This allows developers to make changes to the tools package and have them reflected immediately without reinstalling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Performance Tests\nDESCRIPTION: Commands for setting up a virtual environment and installing the required dependencies to run performance tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-schemaregistry> pip install -r dev_requirements.txt\n(env) ~/azure-schemaregistry> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Removing 'signed' Property from TagAttributesBase Definition\nDESCRIPTION: Applies an AutoRest directive to the `TagAttributesBase` definition in the Swagger document. It removes the `signed` property because there is no identified customer scenario requiring its use in the generated SDK client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions.TagAttributesBase\n    transform: >\n      delete $.properties.signed\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Bare Metal Infrastructure and Identity Libraries using pip (Bash)\nDESCRIPTION: This command uses pip, the Python package installer, to install the `azure-mgmt-baremetalinfrastructure` library for managing Azure Bare Metal resources and the `azure-identity` library for handling Azure Active Directory authentication. Both packages are prerequisites for using the Azure Bare Metal Infrastructure Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/baremetalinfrastructure/azure-mgmt-baremetalinfrastructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-baremetalinfrastructure\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Setting Azure SDK Tracing Implementation Programmatically in Python\nDESCRIPTION: This Python snippet shows how to programmatically instruct Azure SDKs to use the OpenTelemetry tracing implementation. It imports the `settings` object from `azure.core.settings` and sets the `tracing_implementation` attribute to the string `\"opentelemetry\"`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.settings import settings\nsettings.tracing_implementation = \"opentelemetry\"\n```\n\n----------------------------------------\n\nTITLE: Running Pylint Code Analysis with Tox\nDESCRIPTION: Command to run Pylint code analysis on a package using Tox. This helps enforce coding standards and catch potential issues early.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e pylint -c <path to tox.ini> --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Using azure.core.serialization.NULL Sentinel in Python\nDESCRIPTION: This snippet demonstrates how to import and use the `NULL` sentinel value from `azure.core.serialization`. It shows that `NULL` evaluates to `False` in a boolean context and how to assign it to an attribute (e.g., `attr` of a hypothetical `Foo` object) to indicate the absence of data, which will be serialized as `null`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.serialization import NULL\n\nassert bool(NULL) is False\n\nfoo = Foo(\n    attr=NULL\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory for Devopsinfrastructure Management\nDESCRIPTION: This Python code demonstrates how to authenticate with Azure Active Directory using DefaultAzureCredential and create a DevOpsInfrastructureMgmtClient instance. It requires environment variables for Azure credentials and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devopsinfrastructure/azure-mgmt-devopsinfrastructure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devopsinfrastructure import DevOpsInfrastructureMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevOpsInfrastructureMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure QuestionAnswering Client Library via pip (Bash)\nDESCRIPTION: This snippet demonstrates how to install the Azure Language QuestionAnswering client library for Python using pip. It is required before running any of the Python samples, and must be executed in a shell environment where pip is available. The installation provides the necessary dependencies for all subsequent Python code samples that interact with the Azure Language Service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-language-questionanswering\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Devhub Management Library with pip\nDESCRIPTION: Commands to install the required Python packages for using the Azure Devhub Management Client Library. This installs both the main package and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devhub/azure-mgmt-devhub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-devhub\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Setting Host Template with Autorest Directive (YAML)\nDESCRIPTION: Uses an Autorest directive to modify the input Swagger definition during code generation. This directive targets the 'x-ms-parameterized-host' section and sets the 'hostTemplate' property to use the 'endpoint' parameter defined previously.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndirective:\n  where: \"$.x-ms-parameterized-host\"\n  transform: >\n    $.hostTemplate = \"endpoint\"\n```\n```\n\n----------------------------------------\n\nTITLE: Removing 'configMediaType' Property from ManifestAttributesBase Definition\nDESCRIPTION: Uses an AutoRest directive to delete the `configMediaType` property from the `ManifestAttributesBase` definition within the Swagger file. This removal is justified by the lack of an SDK client use case for this specific property.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions.ManifestAttributesBase\n    transform: >\n      delete $.properties.configMediaType\n```\n\n----------------------------------------\n\nTITLE: Updating DataFactoryManagementClient Import Path in Python\nDESCRIPTION: Illustrates the breaking change in importing `DataFactoryManagementClient`. Previously imported from `azure.mgmt.datafactory.datafactory_management_client`, it should now be imported directly from `azure.mgmt.datafactory`. This change is due to a new code generator.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old import path (no longer works)\nazure.mgmt.datafactory.datafactory_management_client\n```\n\nLANGUAGE: python\nCODE:\n```\n# New import path (works)\nazure.mgmt.datafactory\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Thread with Basic Configuration\nDESCRIPTION: Creates a simple chat thread with just a topic and retrieves the thread client to perform operations on it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Without idempotency_token and thread_participants\ntopic = \"test topic\"\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Kubernetes Configuration Management SDK\nDESCRIPTION: Commands to install the required Azure SDK packages using pip. Installs both the Kubernetes configuration management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kubernetesconfiguration/azure-mgmt-kubernetesconfiguration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-kubernetesconfiguration\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account with Azure CLI (Bash)\nDESCRIPTION: Demonstrates creating an Azure resource group and a hierarchical namespace (HNS) enabled Azure Storage account (StorageV2) using the Azure CLI. It requires installing the 'storage-preview' Azure CLI extension. The resulting storage account is suitable for use with Azure Data Lake Storage Gen2.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Install the extension 'Storage-Preview'\naz extension add --name storage-preview\n\n# Create the storage account\naz storage account create --name my-storage-account-name --resource-group my-resource-group --sku Standard_LRS --kind StorageV2 --hierarchical-namespace true\n```\n\n----------------------------------------\n\nTITLE: Illustrating Breaking Model Import Pattern in Python\nDESCRIPTION: Explains a general breaking change pattern in v0.3.0 affecting model imports. Models (e.g., `MyClass`) previously importable via specific paths like `azure.mgmt.security.models.my_class` must now be imported from the parent `azure.mgmt.security.models` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security.models.my_class\n```\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security.models\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes the aiohttp package (version 3.0 or higher) and local references to other Azure SDK components.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.0\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library via pip (Bash)\nDESCRIPTION: Installs the `azure-identity` Python package using pip. This library is required for Microsoft Entra ID (formerly Azure Active Directory) authentication with Azure SDK clients, such as when using `DefaultAzureCredential`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Azure SDK Development\nDESCRIPTION: This snippet lists the dependencies required for Azure SDK for Python development. It references local development tools, resource management packages, and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies\nDESCRIPTION: Commands for installing the required packages to enable OpenTelemetry support in Azure Cosmos DB SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core-tracing-opentelemetry\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Phone Numbers Library\nDESCRIPTION: This snippet demonstrates how to install the Azure Communication Phone Numbers library and run a sample script to list purchased numbers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-communication-phonenumbers library\n$ pip install azure-communication-phonenumbers\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_comm_phone.py\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script with Docker\nDESCRIPTION: Example showing migration script execution using Docker container with required Git token environment variable\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# calling transition script against docker, given local clones of azure-sdk-for-java and azure-sdk-tools\n$env:GIT_TOKEN=\"my git token\"\ncd c:/src/azure-sdk-for-java/sdk/attestation\n<path-to-transition-script>/generate-assets-json.ps1 -TestProxyExe \"docker\" -InitialPush\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Identity Live Tests\nDESCRIPTION: Lists the environment variables that need to be set before running the tests, specifying the target Key Vault URL and configuring live test execution behavior. `AZURE_IDENTITY_TEST_VAULT_URL` needs the specific Key Vault URL. `AZURE_TEST_RUN_LIVE=true` enables live tests, and `AZURE_SKIP_LIVE_RECORDING=true` skips recording network interactions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/azure_arc.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_IDENTITY_TEST_VAULT_URL=<URL of your key vault>\nAZURE_TEST_RUN_LIVE=true\nAZURE_SKIP_LIVE_RECORDING=true\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local path references to Azure SDK tools, Azure Core, and Azure Identity, as well as a version requirement for aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maps Resource using Azure CLI - Bash\nDESCRIPTION: This command uses Azure CLI to provision an Azure Maps account in a specific resource group and associates it with a pricing SKU. It requires the Azure CLI to be installed and authenticated. Key parameters include resource group name, account name, and SKU. The command outputs details of the newly created Azure Maps resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n----------------------------------------\n\nTITLE: Handling Continuation Tokens and Overloads for LROs in Python\nDESCRIPTION: This code defines a `ServiceOperations` class with an overloaded `begin_upload` method for handling Azure LROs. It supports both starting a new upload (requires `data`) and resuming an existing one using a `continuation_token`. When a token is provided, `LROPoller.from_continuation_token` is used; otherwise, a new operation is initiated via `_generated_client.create_upload`. It utilizes a custom polling method (`CustomPollingMethod`) and returns an `LROPoller` instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AnyStr, MutableMapping, Any, overload\nfrom azure.core.polling import LROPoller\nJSON = MutableMapping[str, Any]\n\n\nclass ServiceOperations:\n    @overload\n    def begin_upload(self, data: AnyStr, **kwargs: Any) -> LROPoller[JSON]:\n        ...\n\n\n    @overload\n    def begin_upload(self, *, continuation_token: str, **kwargs: Any) -> LROPoller[JSON]:\n        ...\n\n    def begin_upload(self, *args, **kwargs) -> LROPoller[JSON]:\n        continuation_token = kwargs.pop(\"continuation_token\", None)\n        polling_method = CustomPollingMethod(**kwargs)\n        if continuation_token is not None:\n            return LROPoller.from_continuation_token(\n                continuation_token=continuation_token,\n                polling_method=polling_method,\n                deserialization_callback=lambda x: x,\n                client=self\n            )\n\n        data = kwargs.pop(\"data\", None)\n        if data is None:\n            try:\n                data = args[0]\n            except IndexError:\n                raise TypeError(\"begin_upload() missing 1 required positional argument: 'data'\")\n\n        pipeline_response = self._generated_client.create_upload(data, cls=lambda response, x, y: response, **kwargs)\n\n        return LROPoller(\n            client=self,\n            initial_response=pipeline_response,\n            deserialization_callback=lambda x: x,\n            polling_method=polling_method,\n        )\n```\n\n----------------------------------------\n\nTITLE: Importing Available HTTP Policies in Azure Core\nDESCRIPTION: List of available HTTP policies that can be imported from azure.core.pipeline.policies. These include retry and redirect policies for both synchronous and asynchronous implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.pipeline.policies import (\n    RetryPolicy,\n    AsyncRetryPolicy,\n    RedirectPolicy,\n    AsyncRedirectPolicy\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Text Translation Package\nDESCRIPTION: Command to install the Azure Text Translation client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-translation-text\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests for Azure Communication Services SDK\nDESCRIPTION: Command to execute tests using pytest in the tests directory of an Azure Communication Services SDK package. This runs all available tests in the current directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest .\n```\n\n----------------------------------------\n\nTITLE: Disabling Sanitization for Specific Fields\nDESCRIPTION: Python code example showing how to opt out of specific sanitizers in the test proxy. This is typically done in a conftest.py file using a session-scoped fixture to remove sanitizers that might interfere with request matching.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import remove_batch_sanitizers, test_proxy\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef add_sanitizers(test_proxy):\n    ...\n    #  Remove the following body key sanitizer: AZSDK3493: $..name\n    remove_batch_sanitizers([\"AZSDK3493\"])\n```\n\n----------------------------------------\n\nTITLE: Running perfstress Command for Azure Key Vault Performance Tests\nDESCRIPTION: Demonstrates how to use the perfstress command-line tool to list available performance tests and run a specific test (GetSecretTest in this example).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-secrets> cd tests/perfstress_tests/\n(env) ~/azure-keyvault-secrets/tests> perfstress\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-secrets/tests> perfstress GetSecretTest\n```\n\n----------------------------------------\n\nTITLE: Using async SecretClient in azure-keyvault-secrets\nDESCRIPTION: Demonstrates how to use the async SecretClient with async context manager and close method in azure-keyvault-secrets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client is no longer needed\nclient = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\n\n# alternatively, use the client as an async context manager\nclient = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Python Dependencies in requirements.txt Format\nDESCRIPTION: These lines define project dependencies using relative paths, suitable for inclusion in a `requirements.txt` file or similar dependency specification. The first line uses the `-e` flag to install `azure-sdk-tools` in editable mode, linking directly to the source code. The second line specifies a standard dependency on `azure-core`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opencensus/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../azure-core\n```\n\n----------------------------------------\n\nTITLE: Installing Performance Test Dependencies\nDESCRIPTION: Commands for installing required packages and the Event Hubs library in a Python virtual environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventhub> pip install -r dev_requirements.txt\n(env) ~/azure-eventhub> pip install .\n```\n\n----------------------------------------\n\nTITLE: Running Metrics Views Configuration Sample\nDESCRIPTION: Commands to run the sample that demonstrates configuring metrics with views. Requires the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/metrics/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_views.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LightGBM Python Examples\nDESCRIPTION: Command to install required Python packages for running the LightGBM examples. The dependencies include scikit-learn for machine learning algorithms, pandas for data manipulation, matplotlib for plotting, and scipy for mathematical functions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/batch_setup/light_gbm_examples/python-guide/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install scikit-learn pandas matplotlib scipy -U\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmosdbforpostgresql Management SDK in Python\nDESCRIPTION: Commands to install the Azure Cosmosdbforpostgresql Management Client package and Azure Identity for authentication using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmosdbforpostgresql/azure-mgmt-cosmosdbforpostgresql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-cosmosdbforpostgresql\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Resource Group - Shell\nDESCRIPTION: Creates a new Azure resource group in the specified location using Azure CLI. The resource group serves as a logical container for all Azure resources deployed during the test setup. Ensure the '$RESOURCE_GROUP' and '$LOCATION' environment variables are set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\naz group create -n $RESOURCE_GROUP -l $LOCATION\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Networkcloud Management Client Library for Python\nDESCRIPTION: This snippet shows how to install the Azure Networkcloud Management Client Library and Azure Identity using pip. These packages are required for authenticating and using the Networkcloud Management Client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-networkcloud\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Renaming Severity to AnomalySeverity in Enum Properties\nDESCRIPTION: Directive to rename Severity enums to AnomalySeverity across multiple definition properties for better naming consistency in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"SeverityCondition\"][\"properties\"][\"minAlertSeverity\"][\"x-ms-enum\"][\"name\"] = \"AnomalySeverity\";\n      $[\"SeverityCondition\"][\"properties\"][\"maxAlertSeverity\"][\"x-ms-enum\"][\"name\"] = \"AnomalySeverity\";\n      $[\"AnomalyProperty\"][\"properties\"][\"anomalySeverity\"][\"x-ms-enum\"][\"name\"] = \"AnomalySeverity\";\n      $[\"IncidentProperty\"][\"properties\"][\"maxSeverity\"][\"x-ms-enum\"][\"name\"] = \"AnomalySeverity\";\n      $[\"SeverityFilterCondition\"][\"properties\"][\"min\"][\"x-ms-enum\"][\"name\"] = \"AnomalySeverity\";\n      $[\"SeverityFilterCondition\"][\"properties\"][\"max\"][\"x-ms-enum\"][\"name\"] = \"AnomalySeverity\";\n```\n\n----------------------------------------\n\nTITLE: Getting API Key Using Azure CLI\nDESCRIPTION: PowerShell command to retrieve the API key for the Translator service using Azure CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n----------------------------------------\n\nTITLE: Writing Asynchronous Unit Tests with Pytest for Table Service in Python\nDESCRIPTION: This async unit test demonstrates validating invalid table names asynchronously using the azure.data.tables.aio TableServiceClient and pytest's asyncio marker. The test provides fake credentials, attempts a prohibited table creation, and expects a ValueError on failure. Requires pytest (with asyncio support) and azure.data.tables.aio.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom azure.data.tables.aio import TableServiceClient\n\nclass TestTablesUnitTest(object):\n\n    @pytest.mark.asyncio\n    async def test_invalid_table_name(self):\n        account_name = 'fake_account_name'\n        account_key = 'fake_account_key1234567890'\n        tsc = TableServiceClient(\n            account_url='https://{}.table.core.windows.net/'.format(account_name),\n            credential=account_key\n        )\n\n        invalid_table_name = \"bad_table_name\" # table name cannot have an '_' character\n\n        with pytest.raises(ValueError):\n            await tsc.create_table(invalid_table_name)\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest with PowerShell\nDESCRIPTION: Command to install Autorest globally using npm, which is required for SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Tenant Authentication with azure-identity\nDESCRIPTION: Added support for multi-tenant authentication when using azure-identity 1.8.0 or newer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, but functionality is available when using azure-identity >= 1.8.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview Sharing Package\nDESCRIPTION: Command to install the latest beta version of Azure Purview Sharing library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-purview-sharing\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.1.0\nDESCRIPTION: Release notes documenting new identity types and user assigned identity properties added in version 1.1.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0 (2025-03-24)\n\n### Features Added\n\n  - Enum `IdentityType` added member `SYSTEM_ASSIGNED`\n  - Enum `IdentityType` added member `SYSTEM_ASSIGNED_USER_ASSIGNED`\n  - Model `UserAssignedIdentity` added property `principal_id`\n```\n\n----------------------------------------\n\nTITLE: Configuring General Autorest Settings for Python SDK\nDESCRIPTION: This YAML block defines general settings for the Autorest Python generator. It specifies the target namespace, package name, license header, output folder handling, Python-specific flags, OpenAPI type, version tolerance, package version, credential requirements (including scopes), code formatting with Black, and modeler settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: azure.ai.language.conversations\npackage-name: azure-ai-language-conversations\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\nopenapi-type: data-plane\nversion-tolerant: true\npackage-version: 1.1.0\nadd-credential: true\ncredential-scopes: https://cognitiveservices.azure.com/.default\nblack: true\nmodelerfour:\n  lenient-model-deduplication: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy TokenCredential Protocol\nDESCRIPTION: Defines the legacy TokenCredential protocol with AccessToken named tuple and get_token method. This implementation is maintained for backwards compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nAccessToken = NamedTuple(\"AccessToken\", [(\"token\", str), (\"expires_on\", int)])\n\nclass TokenCredential(Protocol):\n    \"\"\"Protocol for classes able to provide OAuth tokens.\"\"\"\n\n    def get_token(\n        self,\n        *scopes: str,\n        claims: Optional[str] = None,\n        tenant_id: Optional[str] = None,\n        enable_cae: bool = False,\n        **kwargs: Any,\n    ) -> AccessToken:\n        \"\"\"Request an access token for `scopes`.\n\n        :param str scopes: The type(s) of access needed.\n\n        :keyword str claims: Additional claims required in the token, such as those returned in a resource\n            provider's claims challenge following an authorization failure.\n        :keyword str tenant_id: Optional tenant to include in the token request.\n        :keyword bool enable_cae: Indicates whether to enable Continuous Access Evaluation (CAE) for the requested\n            token. Defaults to False.\n\n        :rtype: AccessToken\n        :return: An AccessToken instance containing the token string and its expiration time in Unix time.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Generation\nDESCRIPTION: Commands to navigate to swagger folder and run Autorest generation\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Comparing Core Classes in Azure Storage Queue SDK v2.x and v12.x\nDESCRIPTION: This table compares the core classes between version 2.x and 12.x of the Azure Storage Queue SDK. It shows how the QueueService class has been split into separate clients for account-level and queue-level operations, and introduces the new asynchronous clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| <= 2.X Classes (Clients)  | V12 Clients | NEW Asynchronous clients |\n|---:|---:|---:|\n| QueueService (account-level operations) | QueueServiceClient | aio.QueueServiceClient |\n| QueueService (queue-level operations) | QueueClient   | aio.QueueClient |\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies using pip Requirements Format\nDESCRIPTION: This snippet specifies project dependencies using the pip requirements file format. The `-e` flag denotes editable installs, linking directly to local source directories for development purposes. It includes dependencies on local Azure SDK tools and management resources, the Azure identity library, and the external `aiohttp` library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-mgmt-eventgrid/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Modifying Management Client Creation Methods in Python\nDESCRIPTION: Changed the parameters for entity creation methods (`create_queue`, `create_topic`, `create_subscription`, `create_rule`) in `ServiceBusManagementClient`. Removed the entity-specific parameter (e.g., `queue`) and added a required `name` parameter along with keyword arguments for entity properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# Old:\nServiceBusManagementClient.create_queue(queue=my_queue_description)\n\n# New:\nServiceBusManagementClient.create_queue(name='queue_name', **queue_properties_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Emitting Metrics with Instrumentations\nDESCRIPTION: Steps to run the metrics sample that collects metrics from instrumented libraries. Installs both Flask and requests instrumentation packages, then runs the application that will emit metrics to Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-instrumentation-flask\n$ pip install opentelemetry-instrumentation-requests\n$ # from this directory\n$ python sample_metrics.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Account Connection String using Azure CLI\nDESCRIPTION: Azure CLI command to get the connection string for a storage account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n----------------------------------------\n\nTITLE: Renaming ViewMode to DataFeedAccessMode\nDESCRIPTION: Directive to rename ViewMode enum to DataFeedAccessMode for more descriptive type naming in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataFeedDetail\"][\"properties\"][\"viewMode\"][\"x-ms-enum\"][\"name\"] = \"DataFeedAccessMode\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK Development in Python\nDESCRIPTION: This requirements file lists the necessary dependencies for Azure SDK Python development. It includes local references to Azure SDK tools and identity packages, as well as the aiohttp library (version 3.0 or higher) for asynchronous HTTP functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Personalizer Python SDK\nDESCRIPTION: This snippet demonstrates the new namespace for importing the Azure Personalizer client library. It shows the change from the old namespace to the new one.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.personalizer import PersonalizerClient  # New namespace\n# Old namespace: from azure.cognitiveservices.personalizer import PersonalizerClient\n```\n\n----------------------------------------\n\nTITLE: Preparing Response with Embedded Tool Calls and Definitions - Python\nDESCRIPTION: Defines a complex response variable representing a sequence of chat agent messages with nested tool call and tool result structures, covering scenarios where tool calls are embedded in conversation history. Also specifies multiple tool definitions used in the response. This configuration prepares the inputs for evaluator tests that extract tool calls from freeform agent messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = \"Can you send me an email with weather information for Seattle?\"\nresponse = [\n        {\n            \"createdAt\": \"2025-03-26T17:27:35Z\",\n            \"run_id\": \"run_zblZyGCNyx6aOYTadmaqM4QN\",\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"tool_call\",\n                    \"tool_call_id\": \"call_CUdbkBfvVBla2YP3p24uhElJ\",\n                    \"name\": \"fetch_weather\",\n                    \"arguments\": {\n                        \"location\": \"Seattle\"\n                    }\n                }\n            ]\n        },\n        {\n            \"createdAt\": \"2025-03-26T17:27:37Z\",\n            \"run_id\": \"run_zblZyGCNyx6aOYTadmaqM4QN\",\n            \"tool_call_id\": \"call_CUdbkBfvVBla2YP3p24uhElJ\",\n            \"role\": \"tool\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_result\": {\n                        \"weather\": \"Rainy, 14\\u00b0C\"\n                    }\n                }\n            ]\n        },\n        {\n            \"createdAt\": \"2025-03-26T17:27:38Z\",\n            \"run_id\": \"run_zblZyGCNyx6aOYTadmaqM4QN\",\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"tool_call\",\n                    \"tool_call_id\": \"call_iq9RuPxqzykebvACgX8pqRW2\",\n                    \"name\": \"send_email\",\n                    \"arguments\": {\n                        \"recipient\": \"your_email@example.com\",\n                        \"subject\": \"Weather Information for Seattle\",\n                        \"body\": \"The current weather in Seattle is rainy with a temperature of 14\\u00b0C.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"createdAt\": \"2025-03-26T17:27:41Z\",\n            \"run_id\": \"run_zblZyGCNyx6aOYTadmaqM4QN\",\n            \"tool_call_id\": \"call_iq9RuPxqzykebvACgX8pqRW2\",\n            \"role\": \"tool\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_result\": {\n                        \"message\": \"Email successfully sent to your_email@example.com.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"createdAt\": \"2025-03-26T17:27:42Z\",\n            \"run_id\": \"run_zblZyGCNyx6aOYTadmaqM4QN\",\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I have successfully sent you an email with the weather information for Seattle. The current weather is rainy with a temperature of 14\\u00b0C.\"\n                }\n            ]\n        }\n    ]\n\ntool_definitions = [\n    {\n\t\t\"name\": \"fetch_weather\",\n\t\t\"description\": \"Fetches the weather information for the specified location.\",\n\t\t\"parameters\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"The location to fetch weather for.\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n    {\n\t\t\"name\": \"send_email\",\n\t\t\"description\": \"Sends an email with the specified subject and body to the recipient.\",\n\t\t\"parameters\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"recipient\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Email address of the recipient.\"\n\t\t\t\t},\n\t\t\t\t\"subject\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Subject of the email.\"\n\t\t\t\t},\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Body content of the email.\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required packages and dependencies for the Azure SDK for Python. It includes relative paths to internal packages, Azure core components, identity modules, and external dependencies like aiohttp and websocket_client with their minimum required versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../nspkg/azure-messaging-nspkg\naiohttp>=3.0\ntyping_extensions>=3.7.2\nwebsocket_client>=1.4.2\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Environment Variables in Bash\nDESCRIPTION: Bash script for setting up required environment variables for Azure authentication and service connections.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_CLIENT_ID=\"\"\nexport AZURE_CLIENT_SECRET=\"\"\nexport AZURE_TENANT_ID=\"\"\nexport EVENT_HUBS_CONNECTION_STRING=\"\"\nexport AZURE_PROJECT_URL=\"\"\nexport STORAGE_CONNECTION_STRING=\"\"\nexport COSMOS_ENDPOINT=\"\"\nexport COSMOS_KEY=\"\"\n```\n\n----------------------------------------\n\nTITLE: Example of Using Remove-TestResources.ps1 in Azure DevOps Pipeline in PowerShell\nDESCRIPTION: This example shows how to use Remove-TestResources.ps1 in an Azure DevOps pipeline context, using environment variables and pipeline variables for authentication and resource group identification.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 `\n    -ResourceGroupName \"${env:AZURE_RESOURCEGROUP_NAME}\" `\n    -TenantId '$(TenantId)' `\n    -ProvisionerApplicationId '$(AppId)' `\n    -ProvisionerApplicationSecret '$(AppSecret)' `\n    -Force `\n    -Verbose `\n```\n\n----------------------------------------\n\nTITLE: Authenticating FarmBeats Client\nDESCRIPTION: Example showing how to authenticate the FarmBeats client using DefaultAzureCredential from azure-identity library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.agrifood.farming import FarmBeatsClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Lists required Python package dependencies for Azure SDK development. Includes local development tools and the Azure Identity package for authentication. Uses editable (-e) installs for local development packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-catalog/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Deleting a secret in azure-keyvault\nDESCRIPTION: Deletes all versions of a secret using the delete_secret method of KeyVaultClient in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndeleted_secret = client.delete_secret(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    secret_name=\"secret-name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Various Tox Commands\nDESCRIPTION: Commands for running different tox environments to perform tasks like generating documentation, running linters, and building packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e sphinx -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e pylint -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e mypy -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e pyright -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e verifytypes -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e whl -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e sdist -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e samples -c ../../../eng/tox/tox.ini --root .\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> tox run -e apistub -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements for Azure Search Performance Tests\nDESCRIPTION: Commands for setting up the virtual environment with required dependencies for performance testing, including installing dev requirements and the package in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/search/azure-search-documents> pip install -r dev_requirements.txt\n(env) ~/search/azure-search-documents> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Overriding Security Definitions in Swagger for ACR SDK\nDESCRIPTION: Applies an AutoRest directive to the root of the Swagger document, explicitly setting the `security` property. This defines the security schemes used by the SDK, specifying OAuth2 (`registry_oauth2`) and basic registry authentication (`registry_auth`) as requirements.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $\n  transform: >\n    $.security = [\n      {\n        \"registry_oauth2\": []\n      },\n      {\n        \"registry_auth\": []\n      }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos DB Python SDK\nDESCRIPTION: Command to install the Azure Cosmos DB Python SDK using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-cosmos\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Logging for Tracing in Python\nDESCRIPTION: This snippet shows how to enable console logging for tracing in the Azure AI Projects SDK. It directs the tracing logs to the standard output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nproject_client.telemetry.enable(destination=sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode using pip\nDESCRIPTION: This command installs the Azure SDK tools package in editable mode (-e flag), pointing to a relative path. This allows developers to modify the tools code and have those changes immediately available without reinstalling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/reservations/azure-mgmt-reservations/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure AI Generative Project\nDESCRIPTION: This snippet lists the required Python packages for the Azure AI Generative project. It includes Azure SDK tools, core Azure components, identity management, machine learning libraries, and testing frameworks. The '-e' flag indicates editable installs for some packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n-e ../../ml/azure-ai-ml\n-e ../azure-ai-resources\n-e ../azure-ai-generative[faiss,hugging_face,index,qa_generation,simulator,evaluate,promptflow]\npytest\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Policy Insights SDK Dependencies\nDESCRIPTION: Commands to install the required Azure Policy Insights management package and Azure identity package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/policyinsights/azure-mgmt-policyinsights/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-policyinsights\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies in Python for Azure SDK Development\nDESCRIPTION: Commands to install development and shared requirements for the Azure SDK packages. These commands ensure all necessary dependencies are installed for development and testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r .\\dev_requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r .\\shared_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Logic Apps SDK in Python\nDESCRIPTION: Code snippet demonstrating how to import the Azure Logic Apps SDK in a Python script. This is inferred from the context of the changelog.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/logic/azure-mgmt-logic/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.logic import LogicManagementClient\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Management Library\nDESCRIPTION: The recommended alternative package to use instead of the deprecated Azure Monitor library. Users should install the azure-mgmt-monitor package from PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nazure-mgmt-monitor\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies and Azure SDK in Shell\nDESCRIPTION: Shows pip commands to install development requirements and the Azure AI Text Analytics package in editable mode for local development. These commands assume the user is in an activated Python virtual environment and should be run inside the project root directory. Installing with '-e' enables code modifications to be immediately available in the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-textanalytics> pip install -r dev_requirements.txt\\n(env) ~/azure-ai-textanalytics> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Confluent Management Client Library using pip\nDESCRIPTION: This snippet shows how to install the Azure Confluent Management Client Library and Azure Identity using pip. These are the required packages for using the Confluent Management Client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confluent/azure-mgmt-confluent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-confluent\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maintenance Management Dependencies\nDESCRIPTION: Installing required Azure packages using pip package manager - the maintenance management client and Azure identity packages\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maintenance/azure-mgmt-maintenance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-maintenance\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode\nDESCRIPTION: This pip requirements line installs the Azure SDK tools in development mode from a relative path reference. The '-e' flag enables editable mode, allowing changes to the tools to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dashboard/azure-mgmt-dashboard/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest using npm\nDESCRIPTION: Command to install AutoRest globally using npm package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/swagger/SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Package\nDESCRIPTION: Requirements file entry that specifies installing the Azure SDK tools package from a local relative path using pip's editable mode (-e flag).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/alertsmanagement/azure-mgmt-alertsmanagement/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Listing Azure AI Vision Packages for Python (Conda) - Version 2024.12.01\nDESCRIPTION: This snippet lists the packages included in the 2024.12.01 version of the Azure AI Vision client library for Python, specifically for conda environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-ai-vision.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2024.12.01\n\n### Packages included\n\n- azure-ai-vision-imageanalysis-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Network Analytics Management Client in Python\nDESCRIPTION: Python code to authenticate the Network Analytics Management client using DefaultAzureCredential and environment variables for Azure credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkanalytics/azure-mgmt-networkanalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.networkanalytics import NetworkAnalyticsMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetworkAnalyticsMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Method to Get Subscription Receiver in Python\nDESCRIPTION: Introduced the `get_subscription_receiver` method in `ServiceBusClient` to get a `ServiceBusReceiver` instance configured to receive messages from a specific subscription under a given topic.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusClient.get_subscription_receiver(topic_name=..., subscription_name=...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Client with Kwargs in Python\nDESCRIPTION: Demonstration of passing configuration options as keyword arguments when initializing an Azure client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclient = MyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Health Insights Clinical Matching Package with pip\nDESCRIPTION: Command to install the Azure Health Insights Clinical Matching client library using pip package manager. This is a prerequisite step before running any of the sample code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-healthinsights-clinicalmatching\n```\n\n----------------------------------------\n\nTITLE: mypy Output for Generic Class Instantiation in Command Line\nDESCRIPTION: Shows type revelations by mypy on the command line when using a generic class with a type parameter, confirming the class and result types are Dict[str, str]. No Python-specific dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_38\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:93: note: Revealed type is \"azure.core.polling._poller.LROPoller[builtins.dict[builtins.str, builtins.str]]\"\nmain.py:96: note: Revealed type is \"builtins.dict[builtins.str, builtins.str]\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Models in Python\nDESCRIPTION: Introduction of new models in version 2.1.0b1, including AnalyticsOutputSettings, SecretArchiveSettings, and VulnerabilityScanningSettings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nAdded model `AnalyticsOutputSettings`\nAdded model `SecretArchiveSettings`\nAdded model `VulnerabilityScanningSettings`\n```\n\n----------------------------------------\n\nTITLE: Running Python Snippet Updater for Azure SDK\nDESCRIPTION: This command demonstrates how to run the python_snippet_updater.py tool. The tool scans for snippets in the samples folder and automatically updates the corresponding snippets in the README files.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/code_snippets.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npython <azure-sdk-for-python>/tools/azure-sdk-tools/ci_tools/snippet_update/python_snippet_updater.py <path_to_the_service>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Print Statement Output\nDESCRIPTION: Command to run tests while displaying print statements by using the -s flag with pytest.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pytest <test_file.py> -s\n```\n\n----------------------------------------\n\nTITLE: Renaming 'create_session_settings' to 'create_rendering_session_settings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'create_session_settings' definition in the Swagger document. It renames the client-side representation of this definition to 'create_rendering_session_settings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.create_session_settings'\n    transform: >\n        $[\"x-ms-client-name\"] = \"create_rendering_session_settings\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure HDInsight Containers SDK Packages with pip\nDESCRIPTION: Installs the Azure HDInsight Containers management package and Azure Identity package for authentication using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsightcontainers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hdinsightcontainers\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Track2 Python SDK Generation for Azure Machine Learning Services\nDESCRIPTION: YAML configuration for generating track2 version of the Azure Machine Learning Services Python SDK. Sets up package naming, namespace, license header, and generation options specific to track2.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.python.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nnamespace: azure.mgmt.machinelearningservices\npackage-name: azure-mgmt-machinelearningservices\npackage-version: $(package-version)\nclear-output-folder: true\nno-namespace-folders: true\n```\n\n----------------------------------------\n\nTITLE: Registering a General String Sanitizer in Python Pytest Conftest\nDESCRIPTION: This snippet demonstrates how to register a custom general string sanitizer in the pytest conftest file using the devtools_testutils library. It auto-replaces all instances of a specific target string (e.g., 'my-key-vault') with a fake value ('fake-vault') in test proxy recordings. Requires pytest and devtools_testutils, and expects the test proxy fixture.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import add_general_string_sanitizer, test_proxy\n\n# autouse=True will trigger this fixture on each pytest run, even if it's not explicitly used by a test method\n@pytest.fixture(scope=\"session\", autouse=True)\ndef add_sanitizers(test_proxy):\n    add_general_string_sanitizer(target=\"my-key-vault\", value=\"fake-vault\")\n```\n\n----------------------------------------\n\nTITLE: Receiving Message Batches without Prefetch Configuration in Python\nDESCRIPTION: Updated `receive_messages()` (formerly `receive()`) to support receiving a batch of messages (`max_batch_size` > 1) without requiring the `prefetch` parameter to be set during `ServiceBusReceiver` initialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nreceiver.receive_messages(max_batch_size=10) # Works even if prefetch was not set\n```\n\n----------------------------------------\n\nTITLE: Running Download Performance Test with Test Proxy Endpoint using perfstress (cmd)\nDESCRIPTION: This command runs the DownloadTest perf test against the Azure SDK Test Proxy using the -x flag to specify an HTTPS proxy endpoint. The test proxy must be running prior to execution. Prerequisites: setup completed per earlier instructions, proxy endpoint operational, and environment variables configured for blob access. Key parameter: -x supplies the proxy server URL. Outputs: downloads-of-blob perf testing routed via test proxy with results reported in console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/tests/perfstress_tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-blob/tests> perfstress DownloadTest -x \"https://localhost:5001\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Maintenance Management Client\nDESCRIPTION: Initializes the Azure Maintenance Management client using DefaultAzureCredential for authentication. Requires environment variables for Azure client ID, tenant ID, client secret and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maintenance/azure-mgmt-maintenance/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.maintenance import MaintenanceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MaintenanceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Feature Release Changelog Entry - Version 34.1.0\nDESCRIPTION: Release notes documenting new operations and model parameters added for availability sets, virtual machine images, and scale sets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 34.1.0 (2025-03-24)\n\n### Features Added\n\n  - Added operation AvailabilitySetsOperations.begin_convert_to_virtual_machine_scale_set\n  - Added operation AvailabilitySetsOperations.cancel_migration_to_virtual_machine_scale_set\n  - Added operation AvailabilitySetsOperations.start_migration_to_virtual_machine_scale_set\n  - Added operation AvailabilitySetsOperations.validate_migration_to_virtual_machine_scale_set\n  - Added operation VirtualMachineImagesOperations.list_with_properties\n  - Added operation VirtualMachinesOperations.begin_migrate_to_vm_scale_set\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables and Running Samples\nDESCRIPTION: Sets environment variables for Mixed Reality account credentials and runs sample scripts. This demonstrates the setup required to run the provided code samples for both synchronous and asynchronous clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nset MIXEDREALITY_ACCOUNT_DOMAIN=\"<the Mixed Reality account domain>\"\nset MIXEDREALITY_ACCOUNT_ID=\"<the Mixed Reality account identifier>\"\nset MIXEDREALITY_ACCOUNT_KEY=\"<the Mixed Reality account primary or secondary key>\"\n\npip install azure-mixedreality-authentication\n\npython samples\\client_sample.py\npython samples\\client_sample_async.py\n```\n\n----------------------------------------\n\nTITLE: Defining Python Requirements for Azure SDK Development\nDESCRIPTION: Specifies two key dependencies for Azure SDK for Python development: a local path reference to the Azure SDK tools and the azure-core package. The editable install (-e) option is used for the tools directory to allow for development changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-entitysearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-core\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Azure Monitor Performance Tests\nDESCRIPTION: Commands to install the required dependencies for running performance tests. This includes installing the development requirements and the package in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/tests/perf_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-ingestion> pip install -r dev_requirements.txt\n(env) ~/azure-monitor-ingestion> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Deploying a Service Fabric Cluster with ARM Template - Shell\nDESCRIPTION: Submits an Azure Resource Manager template deployment to provision a managed identity-enabled Service Fabric cluster and supporting resources. The deployment command targets a resource group and uses specific template and parameter files. Required parameters must be populated in the cluster.parameters.json file prior to deployment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\naz deployment group create -g $RESOURCE_GROUP -f arm-templates\\cluster.template.json -p arm-templates\\cluster.parameters.json\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Service Bus Performance Tests\nDESCRIPTION: Defines the required environment variables needed to connect the performance tests to the target Azure Service Bus namespace. These include the connection string, and the names of the queue, topic, and subscription to be used during testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/tests/perf_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAZURE_SERVICEBUS_CONNECTION_STRING=<the connection string of a Service Bus Namespace>\nAZURE_SERVICEBUS_QUEUE_NAME=<the name of a Service Bus queue>\nAZURE_SERVICEBUS_TOPIC_NAME=<the name of a Service Bus topic>\nAZURE_SERVICEBUS_SUBSCRIPTION_NAME=<the name of a Service Bus subscription for the given topic>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Trusted Signing Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip. Installs both the trusted signing management client and Azure identity packages for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trustedsigning/azure-mgmt-trustedsigning/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-trustedsigning\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Python 3.9 Environment\nDESCRIPTION: Commands to build Docker images for both system and user applications, targeting Python 3.9 using build arguments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_21\n\nLANGUAGE: Bash\nCODE:\n```\ndocker build --no-cache --build-arg PYTHON_VERSION=3.9 -t $ACR_NAME.azurecr.io/sfmitestsystem ..\ndocker build --no-cache --build-arg PYTHON_VERSION=3.9 -t $ACR_NAME.azurecr.io/sfmitestuser ..\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure EventHubs Checkpoint Store Blob Package using pip\nDESCRIPTION: This command installs the `azure-eventhub-checkpointstoreblob` Python package using the pip package manager. This package is required to use Azure Blob Storage as the checkpoint store for Azure Event Hubs consumers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install azure-eventhub-checkpointstoreblob\n```\n\n----------------------------------------\n\nTITLE: Adding DataSourceParameter to DataFeed Model\nDESCRIPTION: Directive to add a new dataSourceParameter property of type object to the DataFeed definition in the swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"][\"DataFeed\"]\n    transform: >\n        $.properties[\"dataSourceParameter\"] = {\"type\": \"object\"};\n```\n\n----------------------------------------\n\nTITLE: Listing and Running Azure Perf Tests Using perfstress CLI - CMD\nDESCRIPTION: These commands demonstrate how to navigate to the test directory and use the perfstress tool to discover and run available performance tests defined in the current module. The perfstress executable scans the tests directory for perf test classes and methods and allows the user to invoke them. Requires devtools_testutils installed and the virtual environment activated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/tests/perf_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-core> cd tests\\n(env) ~/azure-core/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Setting Up Requests Instrumentation\nDESCRIPTION: Steps to run the requests instrumentation sample. Installs the required requests instrumentation package, then runs the sample application that makes HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-instrumentation-requests\n$ # from this directory\n$ python sample_requests.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure DNS SDK Version in Python\nDESCRIPTION: Shows how to access the SDK version using __version__ instead of importing a version module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.dns import __version__ as dns_version\n\nprint(f\"Azure DNS SDK version: {dns_version}\")\n```\n\n----------------------------------------\n\nTITLE: Renamed Azure Exception Classes in Python\nDESCRIPTION: Lists Azure exception classes that were renamed and moved from the 'azure' package to 'azure.common' in version 1.0.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nWindowsAzureError                -> AzureException and AzureHttpError\nWindowsAzureConflictError        -> AzureConflictHttpError\nWindowsAzureMissingResourceError -> AzureMissingResourceHttpError\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Quantum Management and Identity Libraries using pip (Bash)\nDESCRIPTION: This command uses pip, the Python package installer, to install the `azure-mgmt-quantum` library for managing Azure Quantum resources and the `azure-identity` library for handling Azure Active Directory authentication. Both packages are prerequisites for interacting with Azure Quantum services via the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/quantum/azure-mgmt-quantum/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-quantum\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Python in Markdown\nDESCRIPTION: This markdown document outlines the release history for the Azure SDK for Python. It includes version numbers, release dates, new features, and breaking changes for each release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storageactions/azure-mgmt-storageactions/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2025-04-20)\n\n### Features Added\n\n  - Enum `ProvisioningState` added member `ACCEPTED`\n\n### Breaking Changes\n\n  - Parameter `identity` of model `StorageTask` is now required\n  - Parameter `properties` of model `StorageTask` is now required\n\n## 1.0.0b1 (2024-03-21)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Renaming Update Session 'maxLeaseTimeMinutes' to 'leaseTimeMinutes' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML targeting the 'maxLeaseTimeMinutes' property within the 'update_session_settings' definition. It renames the client-side representation of this property to 'leaseTimeMinutes' in the generated Python code for session update settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.update_session_settings.properties.maxLeaseTimeMinutes'\n    transform: >\n        $[\"x-ms-client-name\"] = \"leaseTimeMinutes\";\n```\n\n----------------------------------------\n\nTITLE: Adding Message Scheduling Functionality in Python\nDESCRIPTION: Implemented message scheduling capabilities. Use `ServiceBusSender.schedule(messages, schedule_time_utc)` to schedule one or more messages for later delivery.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nServiceBusSender.schedule(messages, schedule_time_utc)\n```\n\n----------------------------------------\n\nTITLE: Running Autorest for Python SDK Generation\nDESCRIPTION: Basic PowerShell commands to run Autorest for generating Python SDK from a swagger specification.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/media/azure-media-analytics-edge/swagger/autorest.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest --v3 --python\n```\n\n----------------------------------------\n\nTITLE: Receiving Events from Azure Event Hubs in SDK v1\nDESCRIPTION: Example of how to receive events from Azure Event Hubs using the v1 SDK approach with EventHubClient, add_receiver, and explicit run/stop lifecycle methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = EventHubClient(address)\nreceiver = client.add_receiver(consumer_group, partition)\nclient.run()\nbatch = receiver.receive()\nclient.stop()\n```\n\n----------------------------------------\n\nTITLE: Granting HIMDS Permissions on Linux for Azure Arc\nDESCRIPTION: Executes `sudo usermod` and `sudo setfacl` commands to add the specified user to the `himds` group and grant necessary read/execute permissions on the Azure Connected Machine agent token directory. This is required for applications running as that user to interact with the local identity endpoints provided by Azure Arc after its installation on a Linux VM.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/azure_arc.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo usermod -a -G himds <user>\nsudo setfacl -m \"g:himds:r-x\" /var/opt/azcmagent/tokens/\nsudo setfacl -m \"g::r-x\" /var/opt/azcmagent/tokens/\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum and Model for Vulnerability Scanning in Python\nDESCRIPTION: Introduction of a new enum for vulnerability scanning container settings and a new model for vulnerability scanning settings patch in version 2.1.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nAdded enum `VulnerabilityScanningSettingsContainerScan`\nAdded model `VulnerabilityScanningSettingsPatch`\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Monitor Query Client in Python\nDESCRIPTION: Main configuration block for AutoRest to generate the Azure Monitor Query Python Client. It specifies package details, versioning, and code generation options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: MonitorQueryClient\ndescription: Azure Monitor Query Python Client\ngenerated-metadata: false\nlicense-header: MICROSOFT_MIT_NO_VERSION\npackage-name: azure-monitor-query\nno-namespace-folders: true\npython: true\nversion-tolerant: true\npython3-only: true\nblack: true\nclear-output-folder: true\nmodelerfour:\n  lenient-model-deduplication: true\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sent Share\nDESCRIPTION: Deletes a sent share to stop sharing data with all consumers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nsent_share_id = uuid.uuid4()\n\ndelete_request = client.sent_shares.begin_delete(sent_share_id=str(sent_share_id))\ndelete_response = delete_request.result()\nprint(delete_response)\n```\n\n----------------------------------------\n\nTITLE: Removing Subscription Scoped Operations from Azure Monitor Query Client\nDESCRIPTION: Directive to remove specific subscription-scoped operations from the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - remove-operation: MetricDefinitions_ListAtSubscriptionScope\n  - remove-operation: Metrics_ListAtSubscriptionScope\n  - remove-operation: Metrics_ListAtSubscriptionScopePost\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Azure SDK for Python\nDESCRIPTION: This pip requirements file specifies local package dependencies using editable mode (-e flag). It includes the Azure SDK tools, storage management, and resource management modules from relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/media/azure-mgmt-media/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../storage/azure-mgmt-storage\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Installing Checkpoint Store Libraries for Event Hubs\nDESCRIPTION: Commands to install the checkpoint store libraries required for receiving samples that persist checkpoints to Azure Blob Storage. Includes both synchronous and asynchronous versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventhub-checkpointstoreblob  # sync version\npip install azure-eventhub-checkpointstoreblob-aio  # async version\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Specifies required dependencies for an Azure SDK Python project including local development tools, core SDK components, identity packages and external libraries like aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Authenticating Runtime Client with AzureKeyCredential (New QnA SDK) in Python\nDESCRIPTION: Shows how to authenticate the `QuestionAnsweringClient` from the modern `azure-ai-language-questionanswering` library using `AzureKeyCredential` from `azure.core.credentials`. Requires the Azure Cognitive Services endpoint URL and the corresponding API key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nclient = QuestionAnsweringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 8.0.0 in Markdown\nDESCRIPTION: Outlines the changes in version 8.0.0 of the Azure SDK for Python, focusing on new features added to specific models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/consumption/azure-mgmt-consumption/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 8.0.0 (2020-12-22)\n\n**Features**\n\n  - Model ReservationRecommendationDetailsCalculatedSavingsProperties has a new parameter reserved_unit_count\n  - Model ReservationRecommendationDetailsModel has a new parameter location\n  - Model ReservationRecommendationDetailsModel has a new parameter sku\n```\n\n----------------------------------------\n\nTITLE: Basic Autorest Command for Python SDK Generation\nDESCRIPTION: Standard command for generating Python code from a Swagger specification using Autorest v4.x. This command updates an existing package, disables async code generation, and supports multi-API if available.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generation.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nautorest readme.md --python --use=\"@microsoft.azure/autorest.python@~4.0.71\" --python-mode=update --python-sdks-folder=<root of sdk clone>/sdks/ --no-async --multiapi\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2022-05-01\nDESCRIPTION: Configuration settings for the v2022-05-01 stable API version, specifying input files for mfe, machineLearningServices, and workspaceFeatures along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2022-05-01'\ninput-file:\n  - Microsoft.MachineLearningServices/stable/2022-05-01/mfe.json\n  - Microsoft.MachineLearningServices/stable/2022-05-01/machineLearningServices.json\n  - Microsoft.MachineLearningServices/stable/2022-05-01/workspaceFeatures.json\noutput-folder: $(python-sdks-folder)/v2022_05_01\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables in PowerShell\nDESCRIPTION: PowerShell commands to set, change, or remove the AZURE_TEST_RUN_LIVE environment variable, which controls whether tests run against live Azure services or recordings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$env:AZURE_TEST_RUN_LIVE='true'\n$env:AZURE_TEST_RUN_LIVE='false'\nRemove-Item Env:\\AZURE_TEST_RUN_LIVE\n```\n\n----------------------------------------\n\nTITLE: Sending to Sessions in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares sending messages to sessionful entities in v0.50 and v7. In v0.50, the session ID was specified using the `session` parameter in `QueueClient.send` or `Sender.get_sender`. In v7, the session ID is set as the `session_id` property on the `ServiceBusMessage` object itself before sending.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Send\nqueue_client.send(message, session='foo')\n\nsender = queue_client.get_sender(session='foo')\nwith sender:\n    sender.send(message)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Send\nwith sender:\n    sender.send_messages(ServiceBusMessage('body', session_id='foo'))\n```\n\n----------------------------------------\n\nTITLE: Generating SDK with SwaggerToSdk CLI\nDESCRIPTION: Commands to generate SDK code from Swagger specifications using different configurations and options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/mgmt_release.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using default configuration (this can be a Github raw link)\ngenerate_sdk -v -m ..\\azure-rest-api-specs\\specification\\compute\\resource-manager\\readme.md\n\n# Forcing Track1 generation\ngenerate_sdk -v -c eng\\swagger_to_sdk_config_v4.json -m ..\\azure-rest-api-specs\\specification\\cognitiveservices\\data-plane\\Face\\readme.md\n\n# For more details about the available options\ngenerate_sdk --help\n```\n\n----------------------------------------\n\nTITLE: Conditional Aiohttp Dependency for PyPy (Python)\nDESCRIPTION: Requires the `aiohttp` package version >=3.0 and <3.8.6 specifically when the Python implementation is PyPy. This constraint is added to avoid a known issue (aiohttp issue #4581) affecting later versions of aiohttp on PyPy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/dev_requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Aiohttp 3.8.6 triggers https://github.com/aio-libs/aiohttp/issues/4581 on pypy for some reasons\naiohttp>=3.0, <3.8.6; platform_python_implementation == \"PyPy\"\n```\n\n----------------------------------------\n\nTITLE: Creating Line Digital Twins in Python\nDESCRIPTION: This snippet shows how to create digital twins for lines, which are used to connect different areas.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor r in range(4):\n    digital_twin_id = f'line-{r}'\n    print(digital_twin_id)\n    dt_json = {\n        \"$metadata\": {\n            \"$model\": \"dtmi:mymodels:line;1\"\n        }\n    }\n    created_twin = service_client.upsert_digital_twin(digital_twin_id, dt_json)\n    print(created_twin)\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Dependency for azure-mgmt-resource (Python Requirements)\nDESCRIPTION: This line specifies an editable dependency on the `azure-mgmt-resource` package located at `../../resources/azure-mgmt-resource`. The `-e` flag installs the package in editable mode, linking to the source code for development purposes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcontainers/azure-mgmt-appcontainers/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Running Basic Trace Sample\nDESCRIPTION: Steps to run the basic trace sample application. Requires setting the APPLICATIONINSIGHTS_CONNECTION_STRING environment variable before execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ # from this directory\n$ python sample_trace.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Key Vault Testing\nDESCRIPTION: Sets up the required environment variables for authenticating and accessing the Azure Key Vault test resources. These variables include tenant ID, client ID, client secret, and the Key Vault URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TENANT_ID=<tenant ID of testing service principal>\nAZURE_CLIENT_ID=<client ID of testing service principal>\nAZURE_CLIENT_SECRET=<client secret of testing service principal>\nAZURE_KEYVAULT_URL=<URL of the testing key vault>\n```\n\n----------------------------------------\n\nTITLE: Renaming NextLink Parameter Client Name to nextLink\nDESCRIPTION: Applies an AutoRest directive to the `NextLink` parameter definition in the Swagger specification. This transformation changes the client-side name used for this parameter to `nextLink` via the `x-ms-client-name` extension, affecting how pagination links are handled in the generated SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.parameters.NextLink\n  transform: >\n    $[\"x-ms-client-name\"] = \"nextLink\"\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP Exporter for OpenTelemetry in Bash\nDESCRIPTION: This command installs the OTLP exporter for OpenTelemetry, which is used to connect to Aspire Dashboard or other OpenTelemetry compatible backends.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Initial Preview Release - Azure Key Vault Certificates 4.0.0b3\nDESCRIPTION: Documents the initial preview release features including package scoping, authentication changes, and new features like distributed tracing and async support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n- Initial preview release\n- Package scoped by functionality\n- Client instances scoped to vaults\n- Authentication using azure-identity\n- OpenCensus distributed tracing support\n- Async API support on Python 3.5.3+\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with pip Requirements\nDESCRIPTION: This snippet defines a set of Python package dependencies using pip requirement syntax, referencing both local relative paths and standard PyPI packages. Prerequisites include the use of pip or a compatible tool to install packages from this requirements file. Entries like '-e' indicate editable installs, which are useful in development settings, while version constraints ensure compatibility; for example, 'azure-identity~=1.17.0' requires a compatible version close to 1.17.0. Inputs are interpreted by pip, and outputs are installed packages available in the current environment. This approach is limited to Python environments and may assume access to specific local directories.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\nazure-identity~=1.17.0\n../azure-eventhub\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview Scanning Package\nDESCRIPTION: Command to install the Azure Purview Scanning client library using pip package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-purview-scanning\n```\n\n----------------------------------------\n\nTITLE: Configuring Track2 Python SDK Creation Mode for Azure Machine Learning Services\nDESCRIPTION: YAML configuration for creating a new track2 version of the Azure Machine Learning Services Python SDK. Specifies the output folder structure both within and outside the python namespace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.python.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npython:\n  output-folder: $(python-sdks-folder)/machinelearning/azure-mgmt-machinelearningservices\noutput-folder: $(python-sdks-folder)/machinelearning/azure-mgmt-machinelearningservices\n```\n\n----------------------------------------\n\nTITLE: Running AutoRest Code Generation using PowerShell\nDESCRIPTION: Navigates into the directory containing the Swagger definition (`<swagger-folder>`) and executes the AutoRest tool using the configuration specified in `AUTOREST.md`. This command initiates the generation of the Azure Remote Rendering Python client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_1\n\nLANGUAGE: ps\nCODE:\n```\ncd <swagger-folder>\nautorest AUTOREST.md\n```\n\n----------------------------------------\n\nTITLE: Using Inline Annotation Style for Type Hints in Python\nDESCRIPTION: Demonstrates the correct approach for adding type annotations to function signatures using inline annotation style rather than comment style type hints, which is preferred for the Azure SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# No:\ndef create_table(table_name):\n    # type: (str) -> Table\n    ...\n\n# Yes:\ndef create_table(table_name: str) -> Table:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deleting LargePersonGroup using FaceAdministrationClient - Azure Face SDK - Python\nDESCRIPTION: This snippet demonstrates how to safely remove a LargePersonGroup from the Azure Face service using FaceAdministrationClient. It uses the group's ID defined previously and outputs confirmation after deletion. Use this operation for cleanup if the group is no longer required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith FaceAdministrationClient(endpoint=endpoint, credential=AzureKeyCredential(key)) as face_admin_client:\\n    print(f\"Delete the large person group: {large_person_group_id}\")\\n    face_admin_client.large_person_group.delete(large_person_group_id)\n```\n\n----------------------------------------\n\nTITLE: Deleting Chat Message\nDESCRIPTION: Demonstrates how to delete a specific message using its message_id.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nchat_thread_client.delete_message(message_id=send_message_result_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DNS Resolver Management Client Library with pip\nDESCRIPTION: This snippet shows how to install the Azure DNS Resolver Management Client Library and Azure Identity package using pip. These packages are required for managing DNS resolvers in Azure using Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-dnsresolver\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Downloading Streams with Azure Storage Blob SDK in Python\nDESCRIPTION: Implements a performance test for downloading blobs in Azure Storage using both synchronous and asynchronous approaches. Dependencies include 'devtools_testutils' for utilities like random byte generation and stream management, as well as custom base classes. The class sets up clients, uploads reusable test blobs, and provides methods for resetting and downloading blob data into a writable stream; key parameters include blob size and maximum concurrency, with output being the downloaded blob stream.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.perfstress_tests import get_random_bytes, WriteStream\n\nfrom ._test_base import _StorageStreamTestBase\n\n\nclass DownloadTest(_StorageStreamTestBase):\n    def __init__(self, arguments):\n        super().__init__(arguments)\n\n        # Setup service clients\n        blob_name = \"downloadtest\"\n        self.blob_client = self.service_client.get_blob_client(self.container_name, blob_name)\n        self.async_blob_client = self.async_serive_client.get_blob_client(self.container_name, blob_name)\n\n        self.download_stream = WriteStream()\n\n    async def global_setup(self):\n        await super().global_setup()\n\n        # Setup the test by uploading data that can be reused by all test instances.\n        data = get_random_bytes(self.args.size)\n        await self.async_blob_client.upload_blob(data)\n\n    def run_sync(self):\n        # The stream needs to be reset at the start of each run.\n        # This sets the position index back to 0 with minimal overhead.\n        self.download_stream.reset()\n\n        # Test the API\n        stream = self.blob_client.download_blob(max_concurrency=self.args.max_concurrency)\n        stream.readinto(self.download_stream)\n\n    async def run_async(self):\n        # The stream needs to be reset at the start of each run.\n        # This sets the position index back to 0 with minimal overhead.\n        self.download_stream.reset()\n\n        # Test the API\n        stream = await self.async_blob_client.download_blob(max_concurrency=self.args.max_concurrency)\n        await stream.readinto(self.download_stream)\n\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport Configuration\nDESCRIPTION: Configuration example showing how to set up AMQP over WebSocket transport type for Event Hubs client to use web sockets instead of direct AMQP.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntransport_type = TransportType.AmqpOverWebsocket\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Connection String for Live Testing\nDESCRIPTION: Sets the environment variable for the Azure Storage connection string, which is required for the tests to access live resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_STORAGE_CONNECTION_STRING=<live storage account connection string>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Function Tracing\nDESCRIPTION: Demonstrates how to trace custom functions using OpenTelemetry decorator and add custom attributes to the span. Includes example of tracing function parameters and setting span attributes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.trace import get_tracer\n\ntracer = get_tracer(__name__)\n\n\n# The tracer.start_as_current_span decorator will trace the function call and enable adding additional attributes\n# to the span in the function implementation. Note that this will trace the function parameters and their values.\n@tracer.start_as_current_span(\"get_temperature\")  # type: ignore\ndef get_temperature(city: str) -> str:\n\n    # Adding attributes to the current span\n    span = trace.get_current_span()\n    span.set_attribute(\"requested_city\", city)\n\n    if city == \"Seattle\":\n        return \"75\"\n    elif city == \"New York City\":\n        return \"80\"\n    else:\n        return \"Unavailable\"\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Sample Command\nDESCRIPTION: Command to execute the basic hello world sample that demonstrates party creation and authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_hello_world.py\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Device Update for IoT Hub Python Client Library with pip\nDESCRIPTION: Command to install the Azure Device Update for IoT Hub client library for Python using pip package manager. This is the first step to start using the library in your Python projects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-iot-deviceupdate\n```\n\n----------------------------------------\n\nTITLE: Async Azure Management Operations\nDESCRIPTION: Examples of using async/await pattern with Azure management clients for asynchronous operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/mgmt_quickstart.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.mgmt.network.aio import NetworkManagementClient\nfrom azure.mgmt.resource.resources.aio import ResourceManagementClient\n\nSUBSCRIPTION_ID = os.environ.get(\"SUBSCRIPTION_ID\", None)\ncredential = DefaultAzureCredential()\nresource_client = ResourceManagementClient(\n    credential=credential,\n    subscription_id=SUBSCRIPTION_ID\n)\nnetwork_client = NetworkManagementClient(\n    credential=credential,\n    subscription_id=SUBSCRIPTION_ID\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nGROUP_NAME = \"testgroup\"\nPUBLIC_IP_ADDRESS = \"public_ip_address_name\"\n\n# Create Resource Group\nawait resource_client.resource_groups.create_or_update(\n    GROUP_NAME,\n    {\"location\": \"eastus\"}\n)\n\n# Create Public IP Address\nasync_poller = await network_client.public_ip_addresses.begin_create_or_update(\n    GROUP_NAME,\n    PUBLIC_IP_ADDRESS,\n    {\n    \"location\": \"eastus\"\n    }\n)\npublic_ip_address = await async_poller.result()\nprint(\"Create Public IP Address:\\n{}\".format(public_ip_address))\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Dev Test Labs Client with DefaultAzureCredential in Python\nDESCRIPTION: Python code snippet demonstrating how to authenticate the Azure Dev Test Labs Client using DefaultAzureCredential and environment variables for Azure credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devtestlabs import DevTestLabsClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevTestLabsClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Breaking Import Change for SecurityCenter in Python\nDESCRIPTION: Highlights a breaking change in v0.3.0: the `SecurityCenter` class can no longer be imported from the sub-module `azure.mgmt.security.security_center`. Users should import it directly from the main `azure.mgmt.security` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security.security_center\n```\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.security\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Service URL using Azure CLI\nDESCRIPTION: Use Azure CLI to get the queue service URL for a storage account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get the queue service URL for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.queue\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Services Dependencies\nDESCRIPTION: Commands to install the required Azure Managed Services SDK packages using pip package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedservices/azure-mgmt-managedservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-managedservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local development tools, the Azure Core library, Azure Identity library, and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Running Latest Dependency Test\nDESCRIPTION: Command to run the latest dependency test, which verifies compatibility with the latest released versions of required Azure SDK packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e latestdependency -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Using Pytest Fixtures in a Test Class\nDESCRIPTION: Example showing how to use a pytest fixture in a test class by applying the usefixtures marker to the class definition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests-advanced.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.usefixtures(\"setup_teardown_fixture\")\nclass TestService(AzureRecordedTestCase):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Autorest Configuration Settings for Mixed Reality STS Client\nDESCRIPTION: YAML configuration for autorest that specifies the input swagger file, output location, namespace settings, and other generation options for the Mixed Reality STS client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/swagger/SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: MixedRealityStsRestClient\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/aa19725fe79aea2a9dc580f3c66f77f89cc34563/specification/mixedreality/data-plane/Microsoft.MixedReality/preview/2019-02-28-preview/mr-sts.json\noutput-folder: ../azure/mixedreality/authentication/_generated\nnamespace: azure.mixedreality.authentication._generated\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: false\nclear-output-folder: true\npython: true\nv3: true\nadd-credentials: false\n```\n\n----------------------------------------\n\nTITLE: Installing Azure HDInsight Management Client Library for Python\nDESCRIPTION: Installs the required packages for using Azure HDInsight Management in Python applications. Requires pip package manager and includes both the HDInsight management library and Azure identity packages for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsight/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hdinsight\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running Dev Build Tests - Tox\nDESCRIPTION: Command to run tox tests in devtest environment for testing a package against latest dev build versions of dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\\> tox run -e devtest -c <path to tox.ini> --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Using sdk_set_version CLI for Setting Package Version - Text\nDESCRIPTION: This code block provides the CLI help output for `sdk_set_version`, used to set the version (and optionally the release date or changelog) for a package in the azure-sdk-for-python. Dependencies include the azure-sdk-tools and the repository source. Key parameters: `--package-name`, `--new-version`, `--service`, and optional `--release-date`, `--replace-latest-entry-title`, and `--repo`. Inputs are package selection and desired new version; output is writing the new version information to the package. Limitation: Should be run inside the correct repository or provide `--repo`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/README.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nusage: sdk_set_version [-h] --package-name PACKAGE_NAME --new-version NEW_VERSION --service SERVICE [--release-date RELEASE_DATE]\n                       [--replace-latest-entry-title REPLACE_LATEST_ENTRY_TITLE] [--repo REPO]\n                       [glob_string]\n\nIncrements version for a given package name based on the released version\n\npositional arguments:\n  glob_string           A comma separated list of glob strings that will target the top level directories that contain packages.Examples: All = \"azure-*\",\n                        Single = \"azure-keyvault\", Targeted Multiple = \"azure-keyvault,azure-mgmt-resource\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --package-name PACKAGE_NAME\n                        name of package (accepts both formats: azure-service-package and azure_service_package)\n  --new-version NEW_VERSION\n                        new package version\n  --service SERVICE     name of the service for which to set the dev build id (e.g. keyvault)\n  --release-date RELEASE_DATE\n                        date in the format \"yyyy-MM-dd\"\n  --replace-latest-entry-title REPLACE_LATEST_ENTRY_TITLE\n                        indicate if to replace the latest changelog entry\n  --repo REPO           Where is the start directory that we are building against? If not provided, the current working directory will be used. Please\n                        ensure you are within the azure-sdk-for-python repository.\n\n```\n\n----------------------------------------\n\nTITLE: Listing Available Performance Tests\nDESCRIPTION: Command to list all available performance tests using the perfstress tool provided by devtools_testutils.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-datalake> cd tests\n(env) ~/azure-storage-file-datalake/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies in Requirements File\nDESCRIPTION: This configuration snippet lists project dependencies intended for use with Python's package installer, pip. It specifies two editable installs using the '-e' flag, pointing to local packages ('azure-sdk-tools', 'azure-mgmt-resource') located in relative parent directories. This allows changes in those packages to be immediately reflected in the current environment. It also lists 'aiohttp' as a standard runtime dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicelinker/azure-mgmt-servicelinker/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Starting Envoy Proxy for Azure Cosmos DB Testing\nDESCRIPTION: Commands to prepare and start the Envoy proxy with a configuration file for Azure Cosmos DB testing, including creating a logs directory and running Envoy with debug logging.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/tests/workloads/dev.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd envoy\nmkdir logs\nenvoy -c <envoy_file>.yaml --log-level debug --log-path logs/debug.txt\n```\n\n----------------------------------------\n\nTITLE: Exporting Key Vault URI to Environment Variable - Shell\nDESCRIPTION: Sets the AZURE_IDENTITY_TEST_VAULT_URL environment variable to the URI of the provisioned Key Vault by parsing the output of the Azure CLI. It ensures subsequent tools and scripts can reference the vault. Dependencies: Azure CLI, 'tr' command. Parameters: RESOURCE_GROUP, KEY_VAULT_NAME (used in CLI query). The environment variable is exported for the current shell session.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport AZURE_IDENTITY_TEST_VAULT_URL=$(az keyvault show -g $RESOURCE_GROUP -n $KEY_VAULT_NAME --query properties.vaultUri | tr -d '\"')\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Trust Policy for Azure Container Registry\nDESCRIPTION: Command to configure content trust policy for an Azure Container Registry, which enables image signing and verification.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file_2.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz acr config content-trust update -n MyRegistry --status enabled\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services Data Replication SDK for Python\nDESCRIPTION: Commands to install the required Python packages for the Azure Recovery Services Data Replication Management Client Library and Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservicesdatareplication/azure-mgmt-recoveryservicesdatareplication/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-recoveryservicesdatareplication\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements for Performance Testing\nDESCRIPTION: Commands to create a virtual environment and install required dependencies for running performance tests, including the dev_requirements.txt and the package itself in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-metricsadvisor> pip install -r dev_requirements.txt\n(env) ~/azure-ai-metricsadvisor> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Extensions Package with pip - Bash\nDESCRIPTION: Shows how to install the Azure Storage Extensions library using the pip package manager in a bash shell. This step requires Internet connectivity and an environment with pip and Python 3.8 or later. The library includes C-Extension modules, so 'pip' will select a platform-specific wheel or build from source as needed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-extensions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-extensions\n```\n\n----------------------------------------\n\nTITLE: Representing OpenAI Assistant Run State with Tool Call Request in JSON\nDESCRIPTION: This JSON object captures the state of an OpenAI Assistant run (`run_01`) with a status of `requires_action`. It details the required `send_email` tool call, including its arguments (recipient, subject, body), and lists all function tools available to the assistant (`asst_01`) with their respective parameter definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/fetch_current_datetime_and_weather_stream_response.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"id\":\"run_01\",\"object\":\"thread.run\",\"created_at\":1735945041,\"agent_id\":\"asst_01\",\"thread_id\":\"thread_01\",\"status\":\"requires_action\",\"started_at\":1735945048,\"expires_at\":1735945641,\"cancelled_at\":null,\"failed_at\":null,\"completed_at\":null,\"required_action\":{\"type\":\"submit_tool_outputs\",\"submit_tool_outputs\":{\"tool_calls\":[{\"id\":\"call_03\",\"type\":\"function\",\"function\":{\"name\":\"send_email\",\"arguments\":\"{\\n  \\\"recipient\\\": \\\"user@example.com\\\",\\n  \\\"subject\\\": \\\"Current New York Weather and DateTime Information\\\",\\n  \\\"body\\\": \\\"Hello,\\\\n\\\\nHere are the details you requested:\\\\n\\\\n- Date and Time: 2025-01-03 14:57:24\\\\n- Weather in New York: Sunny, 25�C\\\\n\\\\nBest regards.\\\"\\n}\"}}]}},\"last_error\":null,\"model\":\"gpt-4-1106-preview\",\"instructions\":\"You are a helpful assistant\",\"tools\":[{\"type\":\"function\",\"function\":{\"name\":\"get_user_info\",\"description\":\"Retrieves user information based on user ID.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"user_id\":{\"type\":\"integer\",\"description\":\"ID of the user.\"}},\"required\":[\"user_id\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"convert_temperature\",\"description\":\"Converts temperature from Celsius to Fahrenheit.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"celsius\":{\"type\":\"number\",\"description\":\"Temperature in Celsius.\"}},\"required\":[\"celsius\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"longest_word_in_sentences\",\"description\":\"Finds the longest word in each sentence.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"sentences\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"A list of sentences.\"}},\"required\":[\"sentences\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"toggle_flag\",\"description\":\"Toggles a boolean flag.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"flag\":{\"type\":\"boolean\",\"description\":\"The flag to toggle.\"}},\"required\":[\"flag\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"send_email\",\"description\":\"Sends an email with the specified subject and body to the recipient.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"recipient\":{\"type\":\"string\",\"description\":\"Email address of the recipient.\"},\"subject\":{\"type\":\"string\",\"description\":\"Subject of the email.\"},\"body\":{\"type\":\"string\",\"description\":\"Body content of the email.\"}},\"required\":[\"recipient\",\"subject\",\"body\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"process_records\",\"description\":\"Process a list of records, where each record is a dictionary with string keys and integer values.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"records\":{\"type\":\"array\",\"items\":{\"type\":\"object\"},\"description\":\"A list containing dictionaries that map strings to integers.\"}},\"required\":[\"records\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"merge_dicts\",\"description\":\"Merges two dictionaries.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"dict1\":{\"type\":\"object\",\"description\":\"First dictionary.\"},\"dict2\":{\"type\":\"object\",\"description\":\"Second dictionary.\"}},\"required\":[\"dict1\",\"dict2\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"calculate_sum\",\"description\":\"Calculates the sum of two integers.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"a\":{\"type\":\"integer\",\"description\":\"First integer.\"},\"b\":{\"type\":\"integer\",\"description\":\"Second integer.\"}},\"required\":[\"a\",\"b\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"fetch_weather\",\"description\":\"Fetches the weather information for the specified location.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\",\"description\":\"The location to fetch weather for.\"}},\"required\":[\"location\"]},\"strict\":false}},{\"type\":\"function\",\"function\":{\"name\":\"fetch_current_datetime\",\"description\":\"Get the current time as a JSON string, optionally formatted.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"format\":{\"type\":[\"string\",\"null\"],\"description\":\"The format in which to return the current time. Defaults to None, which uses a standard format.\"}},\"required\":[]},\"strict\":false}}],\"tool_resources\":{\"code_interpreter\":{\"file_ids\":[]}},\"metadata\":{},\"temperature\":1.0,\"top_p\":1.0,\"max_completion_tokens\":null,\"max_prompt_tokens\":null,\"truncation_strategy\":{\"type\":\"auto\",\"last_messages\":null},\"incomplete_details\":null,\"usage\":null,\"response_format\":\"auto\",\"tool_choice\":\"auto\",\"parallel_tool_calls\":true}\n```\n\nLANGUAGE: text\nCODE:\n```\nevent: done\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Package Root in PowerShell\nDESCRIPTION: Command to change the working directory to the root of the package being migrated in PowerShell.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/recording_migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ncd <path-to-repo>\\azure-sdk-for-python\\sdk\\keyvault\\azure-keyvault-keys\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Certificates Library\nDESCRIPTION: This snippet shows how to install the Azure Key Vault Certificates library and run a sample script to create certificates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-keyvault-certificates library\n$ pip install azure-keyvault-certificates\n$ # azure-identity library for authentication\n$ pip install azure-identity\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_key_cert.py\n```\n\n----------------------------------------\n\nTITLE: Regenerating REST Client Command for Azure ML SDK\nDESCRIPTION: Command example for regenerating the REST client using the configuration defined in this file. It specifies to use the v2022-01-01-preview API version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython ./scripts/regenerate_restclient.py -a v2022-01-01-preview\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Library for Sending Messages\nDESCRIPTION: This snippet demonstrates how to install the Azure Service Bus library and run a sample script to send messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-servicebus library\n$ pip install azure-servicebus\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_servicebus_send.py\n```\n\n----------------------------------------\n\nTITLE: Importing Sequence Type Based on Python Version\nDESCRIPTION: Conditional import of Sequence type from typing or collections.abc based on Python version, implementing PEP585 compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nif sys.version_info < (3, 9):\n    from typing import Sequence\nelse:\n    from collections.abc import Sequence\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Operations in Azure SDK for Python\nDESCRIPTION: Example showing how to use the new async support in Azure SDK for Python, which is accessed through the aio namespace of the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous client\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nsync_client = WebSiteManagementClient(credential, subscription_id)\n\n# Asynchronous client\nfrom azure.mgmt.web.aio import WebSiteManagementClient\nfrom azure.identity.aio import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nasync_client = WebSiteManagementClient(credential, subscription_id)\n\nasync def example():\n    result = await async_client.web_apps.begin_create_or_update(...)\n    return await result.result()\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Monitor OpenTelemetry Exporter client code with Autorest\nDESCRIPTION: Commands to remove existing generated code and regenerate it using Autorest from the specified swagger definition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrmdir ./azure/monitor/opentelemetry/exporter/_generated\nautorest ./swagger/README.md --python --v3\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Proxy Settings with RequestsTransport in Python\nDESCRIPTION: Example of enabling environment proxy settings when creating a RequestsTransport instance. When use_env_settings is set to True, the transport will use HTTP_PROXY and HTTPS_PROXY environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsynchronous_transport = RequestsTransport(use_env_settings=True)\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog\nDESCRIPTION: Command to generate changelog by comparing two code reports and producing markdown-formatted output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/mgmt_release.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools.change_log sdk/trafficmanager/azure-mgmt-trafficmanager/code_reports/0.51.0/report.json sdk/trafficmanager/azure-mgmt-trafficmanager/code_reports/latest/report.json\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maps Account via Azure CLI\nDESCRIPTION: Azure CLI command to create a new Azure Maps account with specified resource group, account name and SKU.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local project references using relative paths and an external package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/neonpostgres/azure-mgmt-neonpostgres/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Starting the Test Proxy with Pytest Fixture\nDESCRIPTION: Code snippet demonstrating how to create a session-level fixture in a conftest.py file to automatically start and stop the test proxy when running tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom devtools_testutils import test_proxy\n\n# autouse=True will trigger this fixture on each pytest run, even if it's not explicitly used by a test method\n@pytest.fixture(scope=\"session\", autouse=True)\ndef start_proxy(test_proxy):\n    return\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies in requirements.txt format\nDESCRIPTION: This snippet lists the Python package dependencies required for the `azure-core` component, located relative to the project root. It includes `aiohttp` version 3.0 or higher, `typing_extensions` version 3.7.2 or higher, and an editable installation (`-e`) of the local package `azure-sdk-tools`. This format is typically used by `pip install -r <filename>`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity-broker/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n../../core/azure-core\naiohttp>=3.0\ntyping_extensions>=3.7.2\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Creating Role Assignments with Optional Name Parameter in Python\nDESCRIPTION: Updated create_role_assignment method in KeyVaultAccessControlClient where role_assignment_name is now an optional keyword-only argument. The client automatically generates a name if not provided.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nKeyVaultAccessControlClient.create_role_assignment(role_assignment_name=None)\n```\n\n----------------------------------------\n\nTITLE: Multi-client Batch Configuration\nDESCRIPTION: Batch configuration for generating multiple API versions including account and metadata policies\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: package-account\n  - tag: package-metadatapolicies\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Azure SDK Development\nDESCRIPTION: This snippet lists all required dependencies for Azure SDK for Python development. It includes local packages installed in editable mode via relative paths and specific version pinning for certain Azure management packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsight/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../keyvault/azure-keyvault-keys\n-e ../../keyvault/azure-mgmt-keyvault\n-e ../../resources/azure-mgmt-resource\n-e ../../storage/azure-mgmt-storage\nazure-mgmt-loganalytics==2.0.0\n-e ../../resources/azure-mgmt-msi/\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path in Python\nDESCRIPTION: Installation requirement specifying a local path to Azure SDK tools package using pip's editable install mode (-e flag). The path points to the tools directory three levels up from current location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningcompute/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Referencing Azure SDK Tools Path\nDESCRIPTION: Dependency reference line that points to the Azure SDK tools directory using a relative path. The -e flag indicates an editable install for development purposes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-messaging-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Account Package Configuration\nDESCRIPTION: Specific configuration settings for generating the Purview Account client package including input file, output location, and authentication settings\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/purview/data-plane/Azure.Analytics.Purview.Account/preview/2019-11-01-preview/account.json\noutput-folder: ../azure/purview/administration/account\nnamespace: azure.purview.administration.account\nclear-output-folder: true\ntitle: PurviewAccountClient\nadd-credential: true\ncredential-scopes: https://purview.azure.net/.default\n```\n\n----------------------------------------\n\nTITLE: Adding ClientAssertionCredential Support (Python, Beta)\nDESCRIPTION: Feature added in 1.9.0b1 introducing the `ClientAssertionCredential`. This credential type supports authentication using a client assertion, typically a JWT signed by the client application.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nClientAssertionCredential\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2022-12-01-preview\nDESCRIPTION: Configuration settings for the v2022-12-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, and mfe along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2022-12-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2022-12-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2022-12-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2022-12-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2022-12-01-preview/mfe.json\noutput-folder: $(python-sdks-folder)/v2022_12_01_preview\n```\n\n----------------------------------------\n\nTITLE: Navigating to Swagger Directory and Running Autorest (PowerShell)\nDESCRIPTION: Demonstrates how to change into the folder containing OpenAPI/Swagger definitions and execute Autorest against a specified Swagger configuration file. Prerequisite: Swagger directory must be present and contain 'SWAGGER.md'. Key parameter: the Swagger Markdown file to use. Outputs generated client SDK files in the configured output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Sending Request and Handling Response\nDESCRIPTION: This snippet shows how to send a request using the client's send_request method and handle the response, including error checking and JSON deserialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.send_request(request)\ntry:\n    response.raise_for_status()  # raises an error if your response is not good\n    json_response = response.json()  # get your response as a json object\n    # Now play with your JSON response!\n\nexcept HttpResponseError as e:\n    print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Azure Resource Group with Subscription ID in PowerShell\nDESCRIPTION: This example demonstrates updating a specific resource group by name, along with specifying a subscription ID. It sets the resource group to be deleted after the default 48 hours.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-23_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 -ResourceGroupName rg-userkeyvault -Subscription fa9c6912-f641-4226-806c-5139584b89ca\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements file lists local and external dependencies needed for Azure SDK Python development. It references local packages using -e flag for editable installations, and includes the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Setting Application Insights Connection String Environment Variable\nDESCRIPTION: Sets the environment variable for the Application Insights connection string, which is required for the tests to access live resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nAPPLICATIONINSIGHTS_CONNECTION_STRING=<connection string for app insights>\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Granularity Error in Azure Monitor Metrics Query\nDESCRIPTION: This snippet demonstrates the error message received when an invalid time granularity is specified in the metrics query request. It lists the supported granularity options for metrics queries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{\"code\":\"BadRequest\",\"message\":\"Invalid time grain duration: PT10M, supported ones are: 00:01:00,00:05:00,00:15:00,00:30:00,01:00:00,06:00:00,12:00:00,1.00:00:00\"}\n```\n\n----------------------------------------\n\nTITLE: Renaming Enum TagOrderBy to ArtifactTagOrder via Swagger Directive\nDESCRIPTION: Uses an AutoRest directive to modify the `x-ms-enum` name property within the `TagOrderBy` definition in the Swagger file. This transformation ensures the corresponding enum in the generated Python SDK is named `ArtifactTagOrder` instead of `TagOrderBy`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions.TagOrderBy\n  transform: >\n    $['x-ms-enum'][\"name\"] = \"ArtifactTagOrder\"\n```\n\n----------------------------------------\n\nTITLE: Removing resource_id Argument, Recommending identity_config (Python)\nDESCRIPTION: In version 1.9.0, the `resource_id` argument was removed. Users needing to specify identity configurations (likely for managed identity) should use the `identity_config` argument instead.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nresource_id\n```\n\nLANGUAGE: Python\nCODE:\n```\nidentity_config\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes both local package references and Azure-specific packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-mgmt-loadtesting/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-msi\n../../identity/azure-identity\n../../keyvault/azure-mgmt-keyvault\n../../keyvault/azure-keyvault-keys\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Document Translation Package\nDESCRIPTION: Command to install the Azure Document Translation client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-ai-translation-document\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2023-02-01-preview\nDESCRIPTION: Configuration settings for the v2023-02-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, and mfe along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2023-02-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2023-02-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2023-02-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2023-02-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2023-02-01-preview/mfe.json\noutput-folder: $(python-sdks-folder)/v2023_02_01_preview\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path\nDESCRIPTION: A pip requirements file entry that installs Azure SDK tools package from a local relative path. The -e flag indicates an editable install.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/timeseriesinsights/azure-mgmt-timeseriesinsights/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Authenticating Runtime Client with CognitiveServicesCredentials (Legacy QnA Maker SDK) in Python\nDESCRIPTION: Demonstrates authenticating the `QnAMakerClient` from the legacy `azure-cognitiveservices-knowledge-qnamaker` library using `CognitiveServicesCredentials` from `msrest.authentication`. Requires the Azure Cognitive Services endpoint URL and the corresponding API key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom msrest.authentication import CognitiveServicesCredentials\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credentials=CognitiveServicesCredentials(\"API key\")\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Authorization and Identity Libraries (Bash)\nDESCRIPTION: Installs the required Python packages `azure-mgmt-authorization` and `azure-identity` using the pip package manager. These packages are necessary prerequisites for managing Azure authorization resources and authenticating Azure SDK clients, respectively.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-authorization\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Using Generic TypeVar for Generic Function Implementation in Python\nDESCRIPTION: This snippet shows a generic function where the input sequence can contain any type (via TypeVar T), and the output mirrors that type. It relies on typing.Sequence and TypeVar, plus an implementation of random_pick. Inputs: typed sequence, output: single element of the input's type. Limitations: result's actual type depends strictly on the input sequence type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Sequence, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef pick(p: Sequence[T]) -> T:\n    return random_pick(p)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local development tools, core Azure components, and external libraries like aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Python SDK Generation for Azure Management Service\nDESCRIPTION: Basic configuration for generating Python SDK with Azure ARM, license header settings, package naming and versioning.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.python.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\npackage-name: azure-mgmt-servicetoreplace\npackage-version: 1.0.0b1\nno-namespace-folders: true\n```\n\n----------------------------------------\n\nTITLE: Removing InvalidHandlerState Exception in Python\nDESCRIPTION: Removed the `InvalidHandlerState` exception class as part of the exception handling refinements.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\n# Removed Exception Class:\nInvalidHandlerState\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Test Resources with Additional Parameters\nDESCRIPTION: This PowerShell command creates Azure Key Vault test resources with an additional parameter to enable HSM.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 keyvault -AdditionalParameters @{enableHsm = $true}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Identity for Authentication in Python\nDESCRIPTION: Shows how to import and use Azure Identity classes for authentication in the Azure DNS SDK for Python. This replaces the previous credential system using azure.common.credentials or msrestazure.azure_active_directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = MyClient(credential, subscription_id)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Renaming Core Service Bus Methods in Python\nDESCRIPTION: Renamed core operation methods for consistency across Azure SDKs: `receive()` is now `receive_messages()`, `peek()` is `peek_messages()`, `schedule()` is `schedule_messages()`, and `send()` is `send_messages()`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nreceive() -> receive_messages()\npeek() -> peek_messages()\nschedule() -> schedule_messages()\nsend() -> send_messages()\n```\n\n----------------------------------------\n\nTITLE: Correcting Versioned Client Import Path in azure-mgmt-containerregistry (Python)\nDESCRIPTION: Explains the v3.0.0rc2 breaking change for importing the version-specific `ContainerRegistryManagementClient`. Similar to the main client, importing from the specific client module file (`azure.mgmt.containerregistry.v20xx_yy_zz.containerregistry_management_client`) is no longer supported. The correct approach is to import from the versioned package namespace (`azure.mgmt.containerregistry.v20xx_yy_zz`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect versioned import path after v3.0.0rc2\n# from azure.mgmt.containerregistry.v20xx_yy_zz.containerregistry_management_client import ContainerRegistryManagementClient\n```\n\nLANGUAGE: python\nCODE:\n```\n# Correct versioned import path starting from v3.0.0rc2\nfrom azure.mgmt.containerregistry.v20xx_yy_zz import ContainerRegistryManagementClient\n```\n\n----------------------------------------\n\nTITLE: Updating Model Class Import Path in Python\nDESCRIPTION: Demonstrates the corrected import pattern for model classes (e.g., `MyClass`). Importing directly from a specific model file like `azure.mgmt.datafactory.models.my_class` is no longer supported; models should be imported from the `azure.mgmt.datafactory.models` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old import pattern (no longer works)\nazure.mgmt.datafactory.models.my_class\n```\n\nLANGUAGE: python\nCODE:\n```\n# New import pattern (works)\nazure.mgmt.datafactory.models\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Marketplace Ordering SDK with pip\nDESCRIPTION: Commands to install the Azure Marketplace Ordering SDK and Azure Identity packages using pip. These packages are required to interact with the Azure Marketplace service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/marketplaceordering/azure-mgmt-marketplaceordering/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-marketplaceordering\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Initializing FormRecognizer and FormTraining Clients (Azure SDK, Python 3.x)\nDESCRIPTION: This snippet demonstrates how to instantiate FormRecognizerClient and FormTrainingClient for versions 3.1.x and below of the azure-ai-formrecognizer Python SDK using AzureKeyCredential and credentials from environment variables. It requires the azure-core and azure-ai-formrecognizer Python packages. The clients support API key authentication and are configured for endpoints provided by the user. Inputs: endpoint and key from environment variables; Outputs: instantiated client objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import FormRecognizerClient, FormTrainingClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\nform_recognizer_client = FormRecognizerClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\n\nform_training_client = FormTrainingClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements\nDESCRIPTION: This snippet lists Python package dependencies, likely for installation via pip. It includes an editable local path dependency for 'azure-sdk-tools', dependencies on other Azure SDK components ('azure-core', 'azure-identity'), and external libraries like 'aiohttp' for asynchronous HTTP requests, 'aiounittest' and 'pytest-tornasync' for testing, and 'retry' for implementing retry logic. Version specifiers are used for some packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-messages/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp>=3.0\naiounittest>=1.4\npytest-tornasync==0.6.0.post2\nretry>=0.9.2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Text Analytics Package Reference in Markdown\nDESCRIPTION: A Markdown link indicating the replacement package azure-ai-textanalytics that should be installed instead of the deprecated package. The link directs users to the PyPI page for the recommended package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-textanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[azure-ai-textanalytics](https://pypi.org/project/azure-ai-textanalytics/)\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Resource Group with ResourceGroup Parameters in PowerShell\nDESCRIPTION: This snippet demonstrates an alternative syntax for the Update-TestResources.ps1 cmdlet, using the ResourceGroup parameter set. It allows specifying a ResourceGroupName instead of a ServiceDirectory and BaseName.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 [-ResourceGroupName <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Specifying Twine Package Version for Azure SDK Python Project\nDESCRIPTION: This snippet defines the required version of the 'twine' package for the Azure SDK for Python project. Twine is a utility for publishing Python packages on PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/release_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntwine==5.1.1\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Managed Applications SDK Dependencies\nDESCRIPTION: Commands to install the required Azure SDK packages using pip. Installs both the managed applications management client and Azure identity packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedapplications/azure-mgmt-managedapplications/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-managedapplications\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest with PowerShell\nDESCRIPTION: Command to install the autorest tool globally using npm. This is a prerequisite for generating the SDK code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/swagger/SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Evaluate API Usage with Promptflow Eval SDK\nDESCRIPTION: Demonstrates how to use the evaluate API with Promptflow Eval SDK to process data from a JSONL file using content safety evaluation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom promptflow.evals.evaluators.content_safety import ContentSafetyEvaluator, ContentSafetyChatEvaluator\nfrom pprint import pprint\nimport pathlib\n\nproject_scope = {\n    \"subscription_id\": \"\",\n    \"resource_group_name\": \"\",\n    \"project_name\": \"\",\n}\n\ncontent_safety_eval = ContentSafetyEvaluator(project_scope)\n\n# Using Evaluate API\n\nfile_path = pathlib.Path(\"data.jsonl\")\nresult = evaluate(\n    data=file_path,\n    azure_ai_project=project_scope,\n    evaluators={\"content_safety\": content_safety_eval},\n)\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2021-10-01-dataplanepreview\nDESCRIPTION: Configuration settings for the mfe-dataplane-preview-10-01 API version, specifying input file for mfe and the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2021-10-01-dataplanepreview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2021-10-01-dataplanepreview/mfe.json\noutput-folder: $(python-sdks-folder)/v2021_10_01_dataplanepreview\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Dependencies\nDESCRIPTION: Lists required Python package dependencies and local SDK components including core modules, monitoring tools, and external packages like aiohttp and OpenTelemetry\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../core/azure-core-tracing-opentelemetry\n../../monitor/azure-monitor-opentelemetry\naiohttp\nopentelemetry-sdk\ntypes-pyyaml\npyyaml\n```\n\n----------------------------------------\n\nTITLE: Listing Event Routes for Digital Twins via Azure SDK - Python\nDESCRIPTION: Lists all event routes associated with the digital twins instance by calling list_event_routes. Requires previously initialized service_client. All returned event routes are printed in sequence to the console. No input other than service_client is necessary.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nevent_routes = service_client.list_event_routes()\nfor event_route in event_routes:\n    print(event_route)\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog\nDESCRIPTION: Detailed changelog tracking version history including features added, breaking changes, and other modifications across multiple releases of the Azure SDK Python Playwright Testing Management Client\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/playwrighttesting/azure-mgmt-playwrighttesting/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-12-18)\n\n### Features Added\n\n  - Client `PlaywrightTestingMgmtClient` added method `send_request`\n  - Client `PlaywrightTestingMgmtClient` added operation group `account_quotas`\n  - Model `AccountProperties` added property `local_auth`\n  - Model `AccountUpdateProperties` added property `local_auth`\n  - Enum `FreeTrialState` added member `NOT_ELIGIBLE`\n  - Enum `FreeTrialState` added member `NOT_REGISTERED`\n  - Enum `ProvisioningState` added member `CREATING`\n  - Enum `QuotaNames` added member `REPORTING`\n  - Model `QuotaProperties` added property `offering_type`\n  - Added model `AccountFreeTrialProperties`\n  - Added model `AccountQuota`\n  - Added model `AccountQuotaProperties`\n  - Added enum `CheckNameAvailabilityReason`\n  - Added model `CheckNameAvailabilityRequest`\n  - Added model `CheckNameAvailabilityResponse`\n  - Added enum `OfferingType`\n  - Operation group `AccountsOperations` added method `check_name_availability`\n  - Added operation group `AccountQuotasOperations`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Management SDK with pip\nDESCRIPTION: Install the Azure Maps Management client library and Azure Identity library using pip. These packages are required to authenticate and interact with Azure Maps services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-mgmt-maps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-maps\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes references to local packages within the Azure SDK ecosystem and external packages like aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devopsinfrastructure/azure-mgmt-devopsinfrastructure/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../resources/azure-mgmt-resource\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Azure Event Grid SDK Changelog Entry\nDESCRIPTION: Version 10.4.0 changelog showing new features and model updates for the EventGridManagementClient including new operation groups and model properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-mgmt-eventgrid/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 10.4.0 (2025-03-24)\n\n### Features Added\n\n  - Client `EventGridManagementClient` added operation group `ca_certificates`\n  - Client `EventGridManagementClient` added operation group `client_groups`\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies and Editable SDK for T2 Azure Blob Perf Testing (cmd)\nDESCRIPTION: This command sequence sets up a Python environment for Azure Blob Storage T2 performance testing. It installs development requirements and the SDK in editable mode using pip. Prerequisites: a Python 3 virtual environment (preferably >=3.7) must already be activated. The commands target the azure-storage-blob directory and depend on there being a dev_requirements.txt file and the Python SDK source code. Outputs: updated Python environment with all needed libraries and tools for T2 tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-blob> pip install -r dev_requirements.txt\n(env) ~/azure-storage-blob> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Renaming Operation Parameters in YAML\nDESCRIPTION: This snippet renames the 'body' parameter for specific operations in the Conversational Analysis Authoring module to improve clarity and consistency in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  - where-operation: ConversationalAnalysisAuthoring_DeployProject\n    transform: >\n        $.parameters[2][\"x-ms-client-name\"] = \"deployment\";\n  - where-operation: ConversationalAnalysisAuthoring_Import\n    transform: >\n        $.parameters[2][\"x-ms-client-name\"] = \"project\";\n  - where-operation: ConversationalAnalysisAuthoring_SwapDeployments\n    transform: >\n        $.parameters[1][\"x-ms-client-name\"] = \"deployments\";\n  - where-operation: ConversationalAnalysisAuthoring_Train\n    transform: >\n        $.parameters[1][\"x-ms-client-name\"] = \"configuration\";\n  - where-operation: ConversationalAnalysisAuthoring_CreateProject\n    transform: >\n        $.parameters[1][\"x-ms-client-name\"] = \"project\";\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Azure Attestation Management with Pip\nDESCRIPTION: Shell commands using `pip` to install the necessary Python packages: `azure-identity` for handling Azure authentication and `azure-mgmt-attestation` for interacting with the Azure Attestation Management API. These packages are prerequisites for using the client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-mgmt-attestation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install azure-identity\npip install azure-mgmt-attestation\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Package for Performance Tests\nDESCRIPTION: Commands to install the required dependencies and the package itself in editable mode within a virtual environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-opentelemetry-exporter> pip install -r dev_requirements.txt\n(env) ~/azure-monitor-opentelemetry-exporter> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Logging In and Selecting Azure Subscription - Shell\nDESCRIPTION: Authenticates to Azure and sets the target subscription for subsequent resource deployments using the Azure CLI. The 'az login' command launches browser authentication or device code flow, while 'az account set' switches the context to the specified subscription. This is necessary before resource provisioning to ensure resources are created in the intended subscription.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\naz login\\naz account set -n $SUBSCRIPTION_NAME\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP 401 Unauthorized Error in ACR Python SDK\nDESCRIPTION: This JSON snippet shows the error response format returned by Azure Container Registry when an operation requiring authentication is attempted without providing credentials. This typically occurs when trying non-read operations anonymously.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"code\": \"UNAUTHORIZED\",\n      \"message\": \"authentication required, visit https://aka.ms/acr/authorization for\\nmore information.\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Completely Resetting Test Proxy Environment\nDESCRIPTION: PowerShell commands to remove both the .assets folder and local test proxy tool. This performs a complete reset of the test proxy environment when simpler solutions fail to resolve issues.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-Item -Recurse -Force .\\.assets\\\nRemove-Item -Recurse -Force .\\.proxy\\\n```\n\n----------------------------------------\n\nTITLE: Decoding with AvroEncoder (New)\nDESCRIPTION: Example showing how to decode Avro-encoded data using the new AvroEncoder class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith encoder:\n    decoded_content = encoder.decode(content=encoded_content)\n```\n\n----------------------------------------\n\nTITLE: Configuring Track1 Python SDK Generation for Azure Machine Learning Services\nDESCRIPTION: YAML configuration for generating track1 version of the Azure Machine Learning Services Python SDK. Sets up package naming, namespace, license header, and other generation options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.python.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npython-mode: create\npython:\n  azure-arm: true\n  license-header: MICROSOFT_MIT_NO_VERSION\n  payload-flattening-threshold: 2\n  namespace: azure.mgmt.machinelearningservices\n  package-name: azure-mgmt-machinelearningservices\n  package-version: $(package-version)\n  clear-output-folder: true\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure SDK for Python Repository\nDESCRIPTION: Commands to clone the Azure SDK for Python repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/dev_setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Azure/azure-sdk-for-python.git\ncd azure-sdk-for-python\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for a Single Operation in Azure Monitor Query SDK\nDESCRIPTION: Code snippet showing how to enable detailed logging for a single operation in the Azure Monitor Query client library, even when not enabled for the entire client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.query_workspace(logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Service Fabric Applications - Shell\nDESCRIPTION: Builds Docker images for two Service Fabric applications from the local project context and tags them for the target Azure Container Registry. The '--no-cache' option forces a clean build without using cached layers. Docker must be running and the registry accessible.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build --no-cache -t $ACR_NAME.azurecr.io/sfmitestsystem ..\\ndocker build --no-cache -t $ACR_NAME.azurecr.io/sfmitestuser ..\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Perf Test with Perfstress (Python SDK, Bash)\nDESCRIPTION: Executes a specific performance test named BearerTokenPolicyTest using the perfstress tool. The environment is expected to be set up beforehand, including installation of devtools_testutils and activation of a Python 3 virtual environment. Outputs the performance testing results for the chosen test, utilizing all default perfstress parameters unless otherwise specified.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(env) ~/azure-identity/tests> perfstress BearerTokenPolicyTest\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Class Subclassing a Generic Base in Python\nDESCRIPTION: Demonstrates subclassing a standard Python generic (Iterator) with a user-defined ItemPaged class holding an explicit type variable, obviating the need for additional subclassing of Generic. Helps ensure that the iterator will yield the type specified by ReturnType. Dependencies: typing.Iterator and TypeVar.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterator, TypeVar\n\nReturnType = TypeVar(\"ReturnType\")\n\n\nclass ItemPaged(Iterator[ReturnType]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Subpackages using Sphinx toctree\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `toctree` directive to create a hierarchical table of contents specifically for the subpackages of `azure.servicebus.aio`. The `:maxdepth: 4` option controls the nesting level displayed in the table of contents, and it explicitly lists the `azure.servicebus.aio.management` subpackage to be included in the documentation structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/doc/azure.servicebus.aio.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   azure.servicebus.aio.management\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flask Instrumentation\nDESCRIPTION: Steps to run the Flask instrumentation sample. Installs the required Flask instrumentation package, then runs the Flask application. Access the sample app at http://localhost:8080/.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-instrumentation-flask\n$ # from this directory\n$ python sample_flask.py\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Azure Network Management Client 28.0.0\nDESCRIPTION: This code snippet describes the breaking changes in version 28.0.0 of the Azure Network Management Client, focusing on API version targeting.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 28.0.0 (2024-11-01)\n\n### Breaking Changes\n\n- This package now only targets the latest Api-Version available on Azure and removes APIs of other Api-Version. After this change, the package can have much smaller size. If your application requires a specific and non-latest Api-Version, it's recommended to pin this package to the previous released version; If your application always only use latest Api-Version, please ignore this change.\n```\n\n----------------------------------------\n\nTITLE: Adding URI Regex Sanitizer in Python Azure SDK Tests\nDESCRIPTION: Example showing how to add a custom URI regex sanitizer to align recorded requests with expected requests. The sanitizer replaces a specific ID pattern in URLs with a sanitized value.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import add_uri_regex_sanitizer\n\n\nadd_uri_regex_sanitizer(regex=\"(?<=https://.+/foo/bar/)(?<id>[^/?\\.]+)\", group_for_replace=\"id\", value=\"Sanitized\")\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for azure.servicebus Module (rst)\nDESCRIPTION: This reStructuredText directive uses Sphinx's `automodule` to automatically generate documentation for the `azure.servicebus` Python module. It includes members, undocumented members, inherited members, but excludes a specific list of common built-in methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/doc/azure.servicebus.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.servicebus\n   :members:\n   :undoc-members:\n   :inherited-members:\n   :exclude-members: to_bytes, from_bytes, as_integer_ratio, bit_count, bit_length, conjugate, imag, numerator, real, capitalize, casefold, center, count, encode, endswith, startswith, expandtabs, find, format, format_map, index, isalpha, isalnum, isascii, isdecimal, isdigit, isidentifier, islower, isnumeric, isprintable, isspace, istitle, isupper, join, ljust, lower, lstrip, maketrans, partition, removeprefix, removesuffix, replace, rfind, rindex, rjust, rpartition, rsplit, rstrip, split, splitlines, strip, swapcase, title, translate, upper, zfill, denominator\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Azure AI Projects in Python\nDESCRIPTION: This command installs the necessary development dependencies for the Azure AI Projects client library using pip and a requirements file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Variable Type Annotations in Python\nDESCRIPTION: Shows how to annotate variables with type hints using basic data types like integers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlength: int = 42\nwidth: int = 8\narea: int = length * width\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Package Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements file specifies local package dependencies using the -e flag to install packages in development mode. It includes tools from the Azure SDK Tools directory, the Azure Resource Management package, and the aiohttp library which is commonly used for async HTTP requests in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dataprotection/azure-mgmt-dataprotection/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet outlines the release history for the Azure SDK for Python, including version numbers, release dates, and notable changes. It covers the progression from beta (1.0.0b1) to the first general availability (GA) release (1.0.0).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iotoperations/azure-mgmt-iotoperations/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-12-16)\n\n### Other Changes\n\n  - First GA\n\n## 1.0.0b1 (2024-10-21)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Structure for Python SDK Package\nDESCRIPTION: Configures the output folder structure for the generated SDK files, disabling namespace folders and setting the specific output path. This determines where the generated code will be placed in the Azure SDK directory structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/single_api/readme.python.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nno-namespace-folders: true\noutput-folder: $(python-sdks-folder)/servicetoreplace/azure-mgmt-servicetoreplace/azure/mgmt/servicetoreplace\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Insights Management Client - Python\nDESCRIPTION: Shows how to authenticate to Azure using environment variables and initialize the ApplicationInsightsManagementClient in Python. Dependencies include the azure-identity and azure-mgmt-applicationinsights packages. The code retrieves the subscription ID from the environment and uses the DefaultAzureCredential for authentication. Inputs: environment variables for Azure authentication and subscription. Output: a configured management client instance. This snippet assumes all prerequisites have been fulfilled.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/applicationinsights/azure-mgmt-applicationinsights/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\\nfrom azure.mgmt.applicationinsights import ApplicationInsightsManagementClient\\nimport os\\n\\nsub_id = os.getenv(\\\"AZURE_SUBSCRIPTION_ID\\\")\\nclient = ApplicationInsightsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Building PyPI Code Report\nDESCRIPTION: Command to generate a code report from the latest package version on PyPI for changelog comparison.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/mgmt_release.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools.code_report --last-pypi azure-mgmt-trafficmanager\n```\n\n----------------------------------------\n\nTITLE: Simulator Instantiation Modification - Azure SDK - Python\nDESCRIPTION: This pair of Python code samples demonstrates the migration from instantiating a Simulator with an azure_ai_project dictionary and explicit credentials, to a new model_config-based approach for improved compatibility and authentication. The new approach requires an 'azure_endpoint' and 'azure_deployment' in the model_config, and enables support for Entra ID authentication. Users must construct the model_config explicitly; providing an api_key is optional as DefaultAzureCredential will be automatically used if not supplied.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nazure_ai_project = {\\n    \\\"subscription_id\\\": os.environ.get(\\\"AZURE_SUBSCRIPTION_ID\\\"),\\n    \\\"resource_group_name\\\": os.environ.get(\\\"RESOURCE_GROUP\\\"),\\n    \\\"project_name\\\": os.environ.get(\\\"PROJECT_NAME\\\"),\\n}\\nsim = Simulator(azure_ai_project=azure_ai_project, credentails=DefaultAzureCredentials())\n```\n\nLANGUAGE: python\nCODE:\n```\nmodel_config = {\\n    \\\"azure_endpoint\\\": os.environ.get(\\\"AZURE_OPENAI_ENDPOINT\\\"),\\n    \\\"azure_deployment\\\": os.environ.get(\\\"AZURE_DEPLOYMENT\\\"),\\n}\\nsim = Simulator(model_config=model_config)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity for Authentication\nDESCRIPTION: Command to install the Azure Identity library which is required for Azure Active Directory authentication with Schema Registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -SuppressVsoCommands in PowerShell\nDESCRIPTION: Defines the optional 'SuppressVsoCommands' switch parameter. It controls whether secrets are printed using Azure Pipelines logging commands (which redact them) when the -CI parameter is used. Setting this to $true (its default state if not in Azure Pipelines, i.e., $env:SYSTEM_TEAMPROJECTID is null) prevents printing secrets, useful in environments that don't support VSO/Azure Pipelines redaction. It's not required, is named, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: ($null -eq $env:SYSTEM_TEAMPROJECTID)\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Autorest Configuration in YAML\nDESCRIPTION: YAML configuration that defines how Autorest should generate the Python SDK, including input/output paths, package naming, and custom directives to modify the generated code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/maps/data-plane/Timezone/preview/1.0/timezone.json\noutput-folder: ../azure/maps/timezone/_generated\nnamespace: azure.maps.timezone\npackage-name: azure-maps-timezone\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\ncredential-scopes: https://atlas.microsoft.com/.default\nclear-output-folder: true\npython: true\nno-async: false\nadd-credential: false\ntitle: TimezoneClient\ndisable-async-iterators: true\npython-sdks-folder: $(python-sdks-folder)\n\ndirective:\n- from: swagger-document\n  where: $.securityDefinitions\n  transform: |\n    $[\"SharedKey\"][\"in\"] = \"header\";\n\n- from: swagger-document\n  where: $.parameters.TimezoneTransitionsYears\n  transform: |\n    $[\"x-ms-client-name\"] = \"dst_lating_years\"\n\n- from: swagger-document\n  where: $.parameters.TimezoneTransitionsFrom\n  transform: |\n    $[\"x-ms-client-name\"] = \"dst_from\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the format for documenting release history in a Markdown file. It includes version numbers, release dates, and details about features added in each release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-mgmt-loadtesting/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2023-02-01)\n\n### Features Added\n\n  - Support `azure.core.serialization.NULL` in model serialization\n\n## 1.0.0b1 (2023-01-04)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Initializing ExampleClient and Sending Request\nDESCRIPTION: This snippet demonstrates how to initialize an ExampleClient, create a request using a request builder, send the request, and handle the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.identity import DefaultAzureCredential\n>>> from azure.example import ExampleClient\n>>> from azure.example.rest import build_example_request\n>>> client = ExampleClient(endpoint='https://www.example.org/', credential=DefaultAzureCredential())\n>>> request = build_example_request()\n>>> request\n<HttpRequest [GET], url: 'https://www.example.org'>\n>>> response = client.send_request(request)\n>>> response\n<HttpResponse: 200 OK, Content-Type: text/plain>\n>>> response.raise_for_status()\n>>> response.text\n'Happy to see you!'\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of the SDK\nDESCRIPTION: To install a specific version of the SDK, you can use pip with the version number. This example shows how to install version 10.3.1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-keyvault==10.3.1\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes local project references using relative paths and an external package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedcache/azure-mgmt-connectedcache/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Initializing LROPoller for Azure Long-Running Operation in Python\nDESCRIPTION: This snippet demonstrates the standard way to initiate a long-running operation (LRO) using the Azure SDK for Python. It shows making the initial API call (`_generated_client.create_upload`) and wrapping the response in an `LROPoller` instance, which manages the subsequent polling logic. A simple lambda function is used for `deserialization_callback` to return the raw result, and a custom `polling_method` is assumed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n        # the initial call. We pass in `cls` to receive the pipeline_response.\n        pipeline_response = self._generated_client.create_upload(data, cls=lambda response, x, y: response, **kwargs)\n\n        return LROPoller(\n            client=self,\n            initial_response=pipeline_response,\n            deserialization_callback=lambda x: x,  # returning the result as-is, but could be a callable to transform the final result\n            polling_method=polling_method,\n        )\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with OData in azure-data-tables\nDESCRIPTION: Shows how to query entities using OData filters in azure-data-tables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nquery_filter = \"PartitionKey eq 'pk001' or RowKey eq 'rk001' or Value gt '5'\"\n\nfor entity in table_client.query_entities(query_filter):\n    print(entity)\n\n# Query parameters can be provided as a dictionary with each key matching up to\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements file lists the necessary dependencies for the Azure SDK for Python project. It includes references to local development tools, core Azure components, identity packages, and external libraries like aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Installing Schema Registry with JSON Encoder Support\nDESCRIPTION: Command to install the Azure Schema Registry client library with JSON Schema Encoder extras for built-in jsonschema validation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-schemaregistry[jsonencoder] azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools and Resources via pip\nDESCRIPTION: This snippet shows the pip requirements for installing Azure SDK tools and Azure Resource Management components from local development paths. It uses the -e flag to install in editable mode from relative directories.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mobilenetwork/azure-mgmt-mobilenetwork/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Using Optional with Any Type in Python\nDESCRIPTION: Demonstrates the importance of using Optional[Any] for parameters that can be Any or None, as it allows type checkers to catch potential runtime errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Any\n\n# No:\ndef foo(\n    bar: Any = None,\n) -> None:\n    bar.append(1)  # error caught at runtime: AttributeError: 'NoneType' object has no attribute 'append'\n\n# Yes:\ndef foo(\n    bar: Optional[Any] = None,\n) -> None:\n    bar.append(1)  # error caught at type checking time: Item \"None\" of \"Optional[Any]\" has no attribute \"append\"\n```\n\n----------------------------------------\n\nTITLE: CryptographyClient Initialization Example\nDESCRIPTION: Demonstrates the updated CryptographyClient constructor that no longer requires key version specification\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Key version no longer required but still recommended\ncrypto_client = CryptographyClient(key_id, credential)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Core with Tracing Dependencies using Pip\nDESCRIPTION: Provides the shell command to install the `azure-core` Python package using pip, including the optional 'tracing' extra. This ensures that the `opentelemetry-api` dependency, required for the native OpenTelemetry tracing features introduced in version 1.33.0, is also installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install azure-core[tracing]\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration Settings in YAML\nDESCRIPTION: YAML configuration for AutoRest specifying the tag, swagger source, output folder, namespace, package name, and other generation options for the Azure Communication Call Automation Service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/swagger/SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntag: package-2024-09-01-preview\nrequire: https://github.com/Azure/azure-rest-api-specs/blob/c4617cc66337beda60a1781f8d511dd5089bc649/specification/communication/data-plane/CallAutomation/readme.md\noutput-folder: ../azure/communication/callautomation/_generated\nmodels-mode: msrest\nnamespace: azure.communication.callautomation\npackage-name: azure-communication-callautomation\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nclear-output-folder: true\nno-namespace-folders: true\npython: true\nv3: true\nno-async: false\nadd-credential: false\ntitle: Azure Communication Call Automation Service\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Connected VMWare Management Client\nDESCRIPTION: Python code to authenticate with Azure using DefaultAzureCredential and initialize the Connected VMWare Management client. Requires environment variables for Azure credentials to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedvmware/azure-mgmt-connectedvmware/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.connectedvmware import ConnectedVMwareMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ConnectedVMwareMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Handling Stopped Event in Python\nDESCRIPTION: Registers a callback for the stopped event which is triggered when the client is disconnected and stops trying to reconnect.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.subscribe(CallbackType.STOPPED, lambda : print(\"Client has stopped\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving keys with azure-keyvault-keys\nDESCRIPTION: Shows how to retrieve the latest version of a key using the new azure-keyvault-keys library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nkey = key_client.get_key(name=\"key-name\")\n\nprint(key.name)\nprint(key.key_type)\n\n# get the version of the key\nkey_version = key.properties.version\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Hardware Security Modules Client\nDESCRIPTION: Python code example showing how to authenticate with the Hardware Security Modules Management Client using DefaultAzureCredential and environment variables for client credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hardwaresecuritymodules/azure-mgmt-hardwaresecuritymodules/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hardwaresecuritymodules import HardwareSecurityModulesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HardwareSecurityModulesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing ADLS Python SDK via Pip - Python\nDESCRIPTION: This snippet installs or upgrades the azure-storage-file-datalake package using pip for programmatic access to Azure Data Lake Storage Gen2. It requires internet connectivity and appropriate permissions in the notebook environment. To execute, sys must be imported and the cell should be run. No inputs or outputs are expected except for installation status printed by pip. Execution environment should be Jupyter or similar that supports cell magics.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\\n\\n!{sys.executable} -m pip install --upgrade azure-storage-file-datalake\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This configuration lists Python packages required for a project, likely within a `requirements.txt` or similar file format used by `pip`. It includes editable installs (`-e`) for local packages (tools, identity, core) and standard dependencies like `aiohttp`, `azure-iot-device`, and various `pytest` plugins for testing, plus `responses` for mocking HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\naiohttp\nazure-iot-device\npytest\npytest-cov\npytest-mock\nresponses\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Operations Management SDK and Azure Identity\nDESCRIPTION: Commands to install the required packages using pip. This installs the Azure IoT Operations Management SDK and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iotoperations/azure-mgmt-iotoperations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-iotoperations\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Test Resources with PowerShell\nDESCRIPTION: This PowerShell command connects to an Azure account and creates test resources for Azure Key Vault using the New-TestResources.ps1 script.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount -Subscription 'YOUR SUBSCRIPTION ID'\neng\\common\\TestResources\\New-TestResources.ps1 keyvault\n```\n\n----------------------------------------\n\nTITLE: Downloading Assets Migration Script - Bash\nDESCRIPTION: Downloads the generate-assets-json.ps1 script using wget command from the azure-sdk-tools repository\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/Azure/azure-sdk-tools/main/eng/common/testproxy/onboarding/generate-assets-json.ps1 -o generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Psycopg2 Database Instrumentation\nDESCRIPTION: Steps to run the Psycopg2 PostgreSQL instrumentation sample. Requires a configured database with a test table. Installs the required Psycopg2 instrumentation package before running the sample.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-instrumentation-psycopg2\n$ # from this directory\n$ python sample_psycopg2.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Container Registry Tests\nDESCRIPTION: Environment variables required for authenticating and accessing test resources in Azure Container Registry performance tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TENANT_ID=<tenant ID of testing service principal>\nAZURE_CLIENT_ID=<client ID of testing service principal>\nAZURE_CLIENT_SECRET=<client secret of testing service principal>\nCONTAINERREGISTRY_ANONREGISTRY_ENDPOINT=<account URL of testing container registry>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Identity in Python\nDESCRIPTION: Example of using Azure Identity for authentication in Python, as mentioned in the breaking changes section of version 9.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/logic/azure-mgmt-logic/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.logic import LogicManagementClient\n\ncredential = DefaultAzureCredential()\nclient = LogicManagementClient(credential, subscription_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest CLI\nDESCRIPTION: Command to install Autorest v3 globally via npm package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Client with New Credential System in Python\nDESCRIPTION: Demonstrates how to initialize an Azure client using the new credential system from azure-identity. The config attribute is replaced with kwargs for configuration options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/labservices/azure-mgmt-labservices/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Specified Python Version in Shell\nDESCRIPTION: This shell snippet builds a Docker image using 'docker build' with no cache and a specified Python version. The image is tagged with repository, image name, and version. It assumes the existence of a Dockerfile in './managed-identity-live' and that all required build arguments are set. Docker must be installed and ACR login performed. The built image will later be pushed to ACR.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker build --no-cache --build-arg PYTHON_VERSION=$PYTHON_VERSION -t $REPOSITORY/$IMAGE_NAME:$PYTHON_VERSION ./managed-identity-live\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements for Azure AI Form Recognizer\nDESCRIPTION: Commands to navigate to the Form Recognizer directory, install development requirements, Tox, and perform an editable install of the library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/dev_setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nazure-sdk-for-python> cd sdk/formrecognizer/azure-ai-formrecognizer\nazure-sdk-for-python/sdk/formrecognizer/azure-ai-formrecognizer> pip install -r dev_requirements.txt\nazure-sdk-for-python/sdk/formrecognizer/azure-ai-formrecognizer> pip install \"tox<5\"\nazure-sdk-for-python/sdk/formrecognizer/azure-ai-formrecognizer> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Release 3.0 Configuration\nDESCRIPTION: Specific configuration for Text Analytics API version 3.0 including input file and output settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/0de25e2a040e1257b3a90faea868ad93c3435e48/specification/cognitiveservices/data-plane/TextAnalytics/stable/v3.0/TextAnalytics.json\nnamespace: azure.ai.textanalytics.v3_0\noutput-folder: $(python-sdks-folder)/textanalytics/azure-ai-textanalytics/azure/ai/textanalytics/_generated/v3_0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Fabric Managed Clusters SDK and Identity Library - Bash\nDESCRIPTION: This snippet demonstrates how to install the 'azure-mgmt-servicefabricmanagedclusters' package and its dependency 'azure-identity' using pip. Running these commands ensures that the necessary SDK and authentication libraries are available in your Python environment. Both libraries require Python 3.8 or newer and internet connectivity to fetch the packages from PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicefabricmanagedclusters/azure-mgmt-servicefabricmanagedclusters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-servicefabricmanagedclusters\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running AutoRest Generation with PowerShell\nDESCRIPTION: Commands for running AutoRest to generate the Python client. The first set is a generic generation command, while the second is specific to this project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for a Python Module\nDESCRIPTION: This snippet uses the Sphinx `automodule` directive to automatically generate documentation from the specified Python module (`azure.ai.language.conversations.authoring.aio`). The options `:members:`, `:undoc-members:`, and `:inherited-members:` instruct Sphinx to include documentation for all members, members without docstrings, and members inherited from base classes, respectively.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/doc/azure.ai.language.conversations.authoring.aio.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.ai.language.conversations.authoring.aio\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Python Azure SDK Development Dependencies\nDESCRIPTION: Requirements file listing local development dependencies including Azure SDK tools, resource management package, and aiohttp for async HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest Automation in YAML\nDESCRIPTION: YAML configuration to enable autorest automation for automatically creating PRs with updated generated code when autorest makes changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n    template: ../../eng/pipelines/templates/stages/archetype-sdk-client.yml\n    parameters:\n        ...\n        VerifyAutorest: true\n        ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies via Requirements File\nDESCRIPTION: This configuration lists Python package dependencies. The '-e' flag installs packages in editable mode from the specified relative paths ('../../../tools/azure-sdk-tools' and '../../resources/azure-mgmt-resource'). This mode links the installation to the source directory, often used during development. It also specifies a standard dependency on the 'aiohttp' library, commonly used for asynchronous HTTP client/server operations. This file format is typically used with package managers like 'pip' (e.g., `pip install -r <filename>`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicefabricmanagedclusters/azure-mgmt-servicefabricmanagedclusters/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Importing DevTestLabs Client\nDESCRIPTION: Updated import path for DevTestLabs client, showing the correct way to import after the breaking changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.devtestlabs import DevTestLabsClient\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest Setup\nDESCRIPTION: Command to install Autorest v3 globally using npm package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Vision Face Package via pip (Bash)\nDESCRIPTION: Installs the `azure-ai-vision-face` Python package using the pip package manager. Requires Python 3.8 or later and pip to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-ai-vision-face\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Performance Testing\nDESCRIPTION: Commands to install the required dependencies and development requirements for running performance tests, including installing the package in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-translation-document> pip install -r dev_requirements.txt\n(env) ~/azure-ai-translation-document> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Azure SDK\nDESCRIPTION: Lists the required dependencies for the Azure SDK for Python development environment. Includes references to local editable packages (-e flag) within the repository structure and external dependencies like aiohttp and configargparse.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../mixedreality/azure-mixedreality-authentication\naiohttp>=3.0\n-e ../../identity/azure-identity\nconfigargparse\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Version via Attribute in Azure Python SDK\nDESCRIPTION: Shows the updated way to access the SDK package version. Importing a separate `version` module is no longer possible; use the `__version__` attribute directly on the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n__version__\n```\n\n----------------------------------------\n\nTITLE: Continuing Cherry-Pick After Conflict Resolution in Bash\nDESCRIPTION: This snippet demonstrates how to continue the cherry-pick operation after resolving conflicts in the merge process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nC:/repo/azure-sdk-for-python/.assets/eDscgL1p9G/python [???]|>git cherry-pick --continue\n[detached HEAD 236e234] add the same file names as what was present in tag integration/example/storage_feature_addition2. In this case, the files themselves are just different enough from integration/example/storage_feature_addition2 that we should intentionally cause a conflict\n Date: Fri Dec 1 16:57:52 2023 -0800\n 1 file changed, 2 insertions(+), 2 deletions(-)\n```\n\n----------------------------------------\n\nTITLE: Inserting and Deleting Entities in azure-data-tables\nDESCRIPTION: Shows how to insert and delete entities using TableClient in azure-data-tables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport os\nimport uuid\nfrom azure.data.tables import TableServiceClient\nfrom azure.core.credentials import AzureNamedKeyCredential\n\nentity = {\n    \"PartitionKey\": \"pk0001\",\n    \"RowKey\": \"rk0001\",\n    \"StringProperty\": \"stringystring\",\n    \"BooleanProperty\": False,\n    \"IntegerProperty\": 31,\n    \"FloatProperty\": 3.14159,\n    \"BinaryProperty\": b\"binary\",\n    \"GuidProperty\": uuid.uuid4(),\n    \"DatetimeProperty\": datetime.datetime.now(),\n}\n\nendpoint = \"https://{}.table.cosmos.azure.com\".format(account_name)\ntable_name = \"myTable\"\ncredential = AzureNamedKeyCredential(\n    key=os.environ[\"tables_primary_cosmos_account_key\"],\n    name=os.environ[\"tables_cosmos_account_name\"]\n)\n\ntable_client = TableClient(endpoint, table_name, credential)\nresp = table_client.create_entity(entity)\n\n# To delete an entity, you can provide either an entire entity or a partition key and a row key\ntable_client.delete_entity(entity)\n# OR\npk = \"pk_to_delete\"\nrk = \"rk_to_delete\"\ntable_client.delete_entity(pk, rk)\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2020-09-01-dataplanepreview\nDESCRIPTION: Configuration settings for the mfe-dataplane-preview API version, specifying input file for mfe and the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2020-09-01-dataplanepreview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2020-09-01-dataplanepreview/mfe.json\noutput-folder: $(python-sdks-folder)/v2020_09_01_dataplanepreview\n```\n\n----------------------------------------\n\nTITLE: Declaring Project Dependencies with requirements.txt - Python\nDESCRIPTION: This snippet defines the dependencies for a Python project using a requirements.txt format. It includes direct references to a local tools directory (as an editable package), specifies external packages like 'requests', 'azure-mgmt-resource', and 'aiohttp', all of which are essential for Azure SDK development. To use these dependencies, run pip install -r requirements.txt in an environment with pip. The '-e' flag requires local access to the specified relative directory; all packages must be pip-installable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicesbackup/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nrequests\nazure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating Event Grid Namespace Topic using Azure CLI\nDESCRIPTION: Azure CLI command to create a topic within an Event Grid Namespace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz eventgrid namespace create topic --location <location> --resource-group <resource-group-name> --name <resource-name>\n```\n\n----------------------------------------\n\nTITLE: Removing Response Schema for Delete Repository Operation\nDESCRIPTION: Applies an AutoRest directive targeting the `delete` operation under the `/acr/v1/{name}` path in the Swagger definition. It removes the schema associated with the `202` (Accepted) response, preventing the generated SDK method for deleting a repository from expecting or returning a response body.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/acr/v1/{name}\"]\n    transform: >\n      delete $.delete[\"responses\"][\"202\"].schema\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest Tool Globally using PowerShell\nDESCRIPTION: This PowerShell command installs the `autorest` tool globally using the Node Package Manager (`npm`). This is a prerequisite step before generating SDKs with `autorest`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: ps\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Blob ChangeFeed SDK with pip - Bash\nDESCRIPTION: This snippet demonstrates how to install the Azure Storage Blob ChangeFeed client library for Python using pip. The --pre flag enables installation of pre-release versions, which may be required for preview features. Ensure python and pip are installed before running this command. The command outputs installation progress and results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-blob-changefeed --pre\n```\n\n----------------------------------------\n\nTITLE: Renaming 'error' Definition to 'remote_rendering_error' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'error' definition in the Swagger document. It renames the client-side representation of this definition to 'remote_rendering_error' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.error'\n    transform: >\n        $[\"x-ms-client-name\"] = \"remote_rendering_error\";\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Stack using custom cloud definition\nDESCRIPTION: This snippet shows how to connect to a custom cloud environment like Azure Stack. It uses the get_cloud_from_metadata_endpoint function to retrieve cloud information and creates a ResourceManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/multicloud.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom msrestazure.azure_cloud import get_cloud_from_metadata_endpoint\nfrom msrestazure.azure_active_directory import UserPassCredentials\nfrom azure.mgmt.resource import ResourceManagementClient\n\nmystack_cloud = get_cloud_from_metadata_endpoint(\"https://myazurestack-arm-endpoint.com\")\ncredentials = UserPassCredentials(\n    login,\n    password,\n    cloud_environment=mystack_cloud\n)\nclient = ResourceManagementClient(\n    credentials,\n    subscription_id,\n    base_url=mystack_cloud.endpoints.resource_manager\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency\nDESCRIPTION: Development dependency configuration specifying a local path to Azure SDK tools using pip's editable install mode (-e flag). Points to a relative path '../../../tools/azure-sdk-tools' for local development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/powerbiembedded/azure-mgmt-powerbiembedded/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Implementing get_azure_core_credential function for live tests\nDESCRIPTION: Implementation of the get_azure_core_credential function for mgmt_settings_real.py that returns a ClientSecretCredential for live test authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_azure_core_credential(**kwargs):\n    from azure.identity import ClientSecretCredential\n    import os\n    return ClientSecretCredential(\n        client_id = os.environ['AZURE_CLIENT_ID'],\n        client_secret = os.environ['AZURE_CLIENT_SECRET'],\n        tenant_id = os.environ['AZURE_TENANT_ID']\n    )\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for Azure Cosmos DB Python SDK\nDESCRIPTION: This RST (reStructuredText) code defines the documentation structure for the Azure Cosmos DB Python SDK. It includes automodule directives for documenting the main package, its asynchronous subpackage, and the exceptions module with member visibility settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/azure.cosmos.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nazure.cosmos package\n====================\n\n.. automodule:: azure.cosmos\n   :members:\n   :undoc-members:\n   :inherited-members:\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   azure.cosmos.aio\n\nSubmodules\n----------\n\nazure.cosmos.exceptions module\n------------------------------\n\n.. automodule:: azure.cosmos.exceptions\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running Azure AI Inference Tests with Pytest (Bash)\nDESCRIPTION: Command to run all Azure AI Inference tests using pytest. This executes the entire test suite for the Azure AI Inference client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Using Test Mixin Class in Functional Tests\nDESCRIPTION: Example showing how to use the TableTestCase mixin in a functional test class. The test class inherits from both AzureRecordedTestCase and the TableTestCase mixin to access shared utilities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests-advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TestTable(AzureRecordedTestCase, TableTestCase):\n    @tables_decorator\n    @recorded_by_proxy\n    def test_create_properties(self, tables_storage_account_name, tables_primary_storage_account_key):\n        # # Arrange\n        account_url = self.account_url(tables_storage_account_name, \"table\")\n        ts = TableServiceClient(credential=tables_primary_storage_account_key, endpoint=account_url)\n        table_name = self._get_table_reference()\n        # Act\n        created = ts.create_table(table_name)\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Route Python Package\nDESCRIPTION: Command to install the Azure Maps Route client library using pip package manager. Uses the --pre flag to allow pre-release versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-route --pre\n```\n\n----------------------------------------\n\nTITLE: Declaring Editable Dependency on azure-sdk-tools (Configuration)\nDESCRIPTION: Specifies an editable dependency on the `azure-sdk-tools` package located at the relative path `../../../tools/azure-sdk-tools`. The `-e` flag (editable) installs the package directly from the specified source path, allowing changes in the source to be immediately reflected in the environment without reinstallation. This is commonly used in development environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/astro/azure-mgmt-astro/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Using Long-Running Operations in Azure DNS SDK for Python\nDESCRIPTION: Illustrates the updated approach for handling long-running operations, which now return an azure.core.polling.LROPoller and use the 'begin_' prefix.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npoller = client.begin_create_or_update(resource_group_name, zone_name, zone_params)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Viewing WebPubSub Client Stress Test Arguments in Python\nDESCRIPTION: Command to display available arguments and options for the stress tests using the help flag.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/stress/how-to-run.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-messaging-webpubsubclient/stress> python stress_base_async.py --help\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Azure SDK Python Development\nDESCRIPTION: This requirements file specifies the necessary dependencies for working with Azure SDK for Python. It includes the aiohttp library (version 3.8.5 or higher) and three local packages referenced using editable installs (-e flag) from relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.8.5\n-e ../../core/azure-core\n-e ../../identity/azure-identity\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Running an Image Analysis Sample Script with Python\nDESCRIPTION: This bash command shows how to execute any of the provided sample Python files from the command line. By substituting the specific sample filename, you can run analysis tasks on images according to what the script implements.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_analyze_all_image_file.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Azure SDK Project\nDESCRIPTION: This configuration file lists the Python package dependencies required for the project. It includes editable installs (`-e`) for local development packages (`azure-sdk-tools`, `azure-mgmt-resource`). It specifies a dependency on `aiohttp` version 3.0 or greater, but only if the Python version is 3.5 or higher. It also pins the `azure-mgmt-network` package to the exact version 19.0.0. This format is typically used in `requirements.txt` or similar files managed by `pip`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp>=3.0; python_version >= '3.5'\nazure-mgmt-network==19.0.0\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Persisting AuthenticationRecord after User Authentication with Azure Identity (Python)\nDESCRIPTION: This snippet shows how to authenticate a user via InteractiveBrowserCredential with persistent token caching, then serialize and prepare the AuthenticationRecord for storage. This allows reliable identification and silent reauthentication in future sessions. Dependencies: azure-identity Python package. Inputs: credential configuration; outputs: a serialized AuthenticationRecord (record_json) to be stored locally.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncredential = InteractiveBrowserCredential(cache_persistence_options=TokenCachePersistenceOptions())\nrecord = credential.authenticate()\nrecord_json = record.serialize()\n# Store the record_json to the local file system\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Form Recognizer Python SDK\nDESCRIPTION: Command to install the Azure Form Recognizer client library for Python using pip. The --pre flag indicates installation of a pre-release version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-formrecognizer --pre\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Specifies required Python package dependencies using pip editable mode (-e) and direct package references for Azure SDK development. Includes Azure SDK tools, Azure Identity, and Azure Resource Management packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcomplianceautomation/azure-mgmt-appcomplianceautomation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Running Azure Change Log Generator Script\nDESCRIPTION: Command to execute the main Python script that generates the change log by comparing package versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/check_change_log/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Tables in azure-data-tables\nDESCRIPTION: Shows how to create and delete tables using TableServiceClient and TableClient in azure-data-tables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient, TableClient\n\n# You can create a table from the TableServiceClient or TableClient\nservice_client = TableServiceClient.from_connection_string(conn_str)\ntable_client = service_client.create_table(\"tableName\")\nservice_client.delete_table(\"tableName\")\n\n# The create_table_if_not_exists is an alternative to create_table and is\n# only available on the TableServiceClient\nservice_client = TableServiceClient.from_connection_string(conn_str)\nservice_client.create_table_if_not_exists(\"tableName\")\nservice_client.delete_table(\"tableName\")\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp Package for Asynchronous Operations\nDESCRIPTION: Command to install the aiohttp package required for asynchronous client operations in the Azure Image Analysis SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Microsoft Entra ID\nDESCRIPTION: Python code demonstrating authentication using Microsoft Entra ID credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.maps.route import MapsRouteClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nroute_client = MapsRouteClient(\n    client_id=\"<Azure Maps Client ID>\",\n    credential=credential\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes references to internal Azure packages, development tools, and external libraries with version specifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../core/azure-core\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../nspkg/azure-keyvault-nspkg\naiohttp>=3.0\nparameterized>=0.7.3\npython-dateutil>=2.8.0\npyopenssl\n```\n\n----------------------------------------\n\nTITLE: Type Hinting Variadic Arguments in Python\nDESCRIPTION: Demonstrates how to add type hints to variadic arguments (*args and **kwargs) to indicate the expected types of these arguments to the type checker.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\n# args seen as tuple[str] by type checker\n# kwargs seen as dict[str, Any] by type checker\ndef begin_operation(*args: str, **kwargs: Any) -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Removing Response Schema from deleteBlob Operation\nDESCRIPTION: Uses an AutoRest directive targeting the `delete` operation on the `/v2/{name}/blobs/{digest}` path in Swagger. It removes the schema associated with the `202` (Accepted) response, preventing the generated SDK method for deleting a blob from returning a stream, as the stream content is not needed and would require explicit cleanup by the caller.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.paths[\"/v2/{name}/blobs/{digest}\"][\"delete\"]\n    transform: >\n      delete $.responses[\"202\"].schema;\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload with Model Extras for Chat Completions\nDESCRIPTION: Illustrates the structure of the JSON request body sent to the Azure AI service when the `model_extras` parameter is used in the `complete` method. It shows how the extra key-value pairs are added at the root level alongside the standard `messages` array.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"messages\":\n    [\n        {\"role\":\"system\",\"content\":\"You are a helpful assistant.\"},\n        {\"role\":\"user\",\"content\":\"How many feet are in a mile?\"}\n    ],\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sample assets.json File Structure\nDESCRIPTION: Example of the assets.json file structure created after migration, containing repository and tag information for the migrated test recordings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/recording_migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AssetsRepo\": \"Azure/azure-sdk-assets\",\n  \"AssetsRepoPrefixPath\": \"python\",\n  \"TagPrefix\": \"python/{service}/{package}\",\n  \"Tag\": \"python/{service}/{package}_<10-character-commit-SHA>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Request Using Request Builder\nDESCRIPTION: This snippet shows how to create an HTTP request using a request builder function from the rest module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.example.rest import build_analyze_text_request\n\nrequest = build_analyze_text_request(\n    json={\"document\": \"Hello world!\"},\n    language=\"en\",\n)\n```\n\n----------------------------------------\n\nTITLE: Azure Management SDK Package List in Markdown\nDESCRIPTION: Complete listing of Azure management packages for Python with version numbers, including services like compute, storage, networking, and many specialized Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apicenter-1.0.0\n[...truncated for brevity...]\n- azure-mgmt-workloads-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Exporting Managed Identity ARM URI using Azure CLI in Shell\nDESCRIPTION: This shell snippet saves the Azure Resource Manager (ARM) URI of the created Managed Identity for later use by extracting its id property using Azure CLI's query function. The command requires the managed identity to already exist and assigns its ARM URI to the environment variable MANAGED_IDENTITY_ID. Dependencies include Azure CLI and an existing managed identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport MANAGED_IDENTITY_ID=$(az identity show -g $RESOURCE_GROUP -n $MANAGED_IDENTITY_NAME --query id -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path\nDESCRIPTION: pip installation reference pointing to a local relative path containing Azure SDK tools package\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-search-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Resolving Git Conflicts in Bash\nDESCRIPTION: This snippet shows the process of resolving Git conflicts that may occur during the merge process. It includes checking the status, resolving conflicts, and continuing the cherry-pick operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nC:/repo/azure-sdk-for-python/.assets/eDscgL1p9G/python |>git status\nHEAD detached from python/storage/azure-storage-blob_12c8154ae2\nYou are currently cherry-picking commit 1fd0865.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nYou are in a sparse checkout with 100% of tracked files present.\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n        both added:      sdk/storage/azure-storage-blob/tests/recordings/test_append_blob_async.pyTestStorageAppendBlobAsynctest_append_blob_from_text_new.json\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package Dependencies for Azure ServiceBus Stress Tests - CMD\nDESCRIPTION: These shell commands install the Azure ServiceBus Python package locally and all development dependencies required for running stress tests. Use the first command to perform a local pip installation of the core package, and the second to install additional requirements outlined in 'dev_requirements.txt'. Ensure you execute these commands from the proper virtual environment and directory. No parameters are required; both commands act on the current directory context.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/stress/scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-servicebus> pip install .\n(env) ~/azure-servicebus/stress/scripts> pip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Autorest Configuration Settings\nDESCRIPTION: Core configuration settings for Azure Metrics Advisor SDK generation, specifying input file, output folder, namespace, package name, and other essential parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/cognitiveservices/data-plane/MetricsAdvisor/stable/v1.0/MetricsAdvisor.json\noutput-folder: ../azure/ai/metricsadvisor/\nnamespace: azure.ai.metricsadvisor\npackage-name: azure-ai-metricsadvisor\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\ntitle: MetricsAdvisorClient\nhead-as-boolean: true\npackage-version: 1.1.0\nadd-credential: true\ncredential-scopes: https://cognitiveservices.azure.com/.default\nwant-operation-metadata: false\nkeep-version-file: true\nversion-tolerant: true\nblack: true\nmodels-mode: msrest\nmodelerfour:\n    flatten-models: true\n```\n\n----------------------------------------\n\nTITLE: CI Pipeline Example for New-TestResources.ps1\nDESCRIPTION: An example demonstrating how to use the script in an Azure DevOps CI pipeline with variables. This enables log redaction and automatic cleanup of resources after a specified period.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 `\n    -ServiceDirectory '$(ServiceDirectory)' `\n    -TenantId '$(TenantId)' `\n    -ProvisionerApplicationId '$(ProvisionerId)' `\n    -ProvisionerApplicationSecret '$(ProvisionerSecret)' `\n    -TestApplicationId '$(TestAppId)' `\n    -TestApplicationSecret '$(TestAppSecret)' `\n    -DeleteAfterHours 24 `\n    -CI `\n    -Force `\n    -Verbose\n```\n\n----------------------------------------\n\nTITLE: KeyReleasePolicy Code Example\nDESCRIPTION: Shows the breaking change in KeyReleasePolicy constructor where 'data' argument was renamed to 'encoded_policy' and an 'immutable' property was added\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Before\npolicy = KeyReleasePolicy(data=policy_data)\n\n# After\npolicy = KeyReleasePolicy(encoded_policy=policy_data, immutable=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Query Client Library with pip\nDESCRIPTION: Command to install the Azure Monitor Query client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-monitor-query\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Monitor Query Performance Tests\nDESCRIPTION: Sets the required environment variables for accessing live resources in the performance tests. These include the Log Analytics workspace ID and the URI of the resource for which metrics are being queried.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLOG_WORKSPACE_ID=<workspace id of the log workspace>\nMETRICS_RESOURCE_URI=<uri of the resource for which the metrics are being queried>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies with Editable Install\nDESCRIPTION: This configuration snippet lists required Python packages. It specifies an editable installation ('-e') of a local package located at '../../../tools/azure-sdk-tools' and includes the 'aiohttp' library as a dependency. This format is typically used in requirements files (e.g., requirements.txt) processed by pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/billing/azure-mgmt-billing/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Azure SDK Development\nDESCRIPTION: This configuration snippet lists Python package dependencies required for developing or running an Azure SDK-related component. It includes core Azure libraries (`azure-core`, `azure-appconfiguration`, `azure-identity`, `azure-keyvault-secrets`), asynchronous HTTP client (`aiohttp`), DNS toolkit (`dnspython`), and SDK tools (`azure-sdk-tools`). Several dependencies are specified using editable installs (`-e`), suggesting a local development setup where these packages are installed directly from source directories, likely within the `/azure/azure-sdk-for-python` monorepo.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../core/azure-core\n-e ../azure-appconfiguration\n-e ../../identity/azure-identity\n-e ../../keyvault/azure-keyvault-secrets\naiohttp>=3.0\n-e ../../../tools/azure-sdk-tools\ndnspython\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Azure Sphere Management Client - Python\nDESCRIPTION: Shows how to authenticate using environment variables and instantiate the AzureSphereMgmtClient in Python. Dependencies include 'azure-identity' and 'azure-mgmt-sphere', both of which must be installed via pip. The code expects the environment variables 'AZURE_CLIENT_ID', 'AZURE_TENANT_ID', 'AZURE_CLIENT_SECRET', and 'AZURE_SUBSCRIPTION_ID' to be set; it uses DefaultAzureCredential for Azure Active Directory token authentication and retrieves the subscription ID from the environment. The resulting client is ready to make authenticated requests to Azure Sphere Management endpoints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sphere/azure-mgmt-sphere/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\\nfrom azure.mgmt.sphere import AzureSphereMgmtClient\\nimport os\\n\\nsub_id = os.getenv(\\\"AZURE_SUBSCRIPTION_ID\\\")\\nclient = AzureSphereMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Hub Provisioning Services Client Library with pip\nDESCRIPTION: This snippet shows how to install the Azure IoT Hub Provisioning Services Client Library and Azure Identity using pip. These are the required packages for working with the Azure IoT Hub Provisioning Services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-iothubprovisioningservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Interactive Browser Client ID in DefaultAzureCredential (Python)\nDESCRIPTION: Feature added in 1.7.0b4 allowing `DefaultAzureCredential` to accept the `interactive_browser_client_id` keyword argument. This permits specifying a custom client ID to be used for the interactive browser authentication flow.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ninteractive_browser_client_id\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for T2 Performance Tests\nDESCRIPTION: Installs the necessary dependencies for running T2 SDK performance tests, including dev requirements and the local package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share> pip install -r dev_requirements.txt\n(env) ~/azure-storage-file-share> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Specifying py2docfx Dependency for Azure SDK for Python\nDESCRIPTION: This snippet specifies a dependency on py2docfx version 0.1.12. py2docfx is a tool used to convert Python docstrings to DocFX YAML format, which is likely used in the documentation process for the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/scripts/docs/py2docfx_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npy2docfx==0.1.12\n```\n\n----------------------------------------\n\nTITLE: Exporting Knowledge Base with azure-cognitiveservices-knowledge-qnamaker in Python\nDESCRIPTION: This snippet shows how to download a knowledge base using the download method in the legacy azure-cognitiveservices-knowledge-qnamaker library. It includes authentication and downloading the knowledge base data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom msrest.authentication import CognitiveServicesCredentials\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credentials=CognitiveServicesCredentials(\"API key\")\n)\n\ndata = client.knowledgebase.download(\n    kb_id=\"<knowledgebase-id>\",\n    environment=\"Test\",\n)\nprint(data.qna_documents)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Core OpenTelemetry Tracing Plugin using pip\nDESCRIPTION: This command installs the `azure-core-tracing-opentelemetry` package using pip. This package provides the necessary plugin to enable OpenTelemetry-based distributed tracing for Azure SDKs that are compatible with `azure-core` tracing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core-tracing-opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0 Changes in Markdown\nDESCRIPTION: Details features added and breaking changes for version 1.0.0, including updates to various models and parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2022-09-15)\n\n### Features Added\n\n  - Model DnsForwardingRulesetPatch has a new parameter dns_resolver_outbound_endpoints\n\n### Breaking Changes\n\n  - Parameter dns_resolver_outbound_endpoints of model DnsForwardingRuleset is now required\n  - Parameter domain_name of model ForwardingRule is now required\n  - Parameter id of model SubResource is now required\n  - Parameter ip_address of model TargetDnsServer is now required\n  - Parameter ip_configurations of model InboundEndpoint is now required\n  - Parameter subnet of model IpConfiguration is now required\n  - Parameter subnet of model OutboundEndpoint is now required\n  - Parameter target_dns_servers of model ForwardingRule is now required\n  - Parameter virtual_network of model DnsResolver is now required\n  - Parameter virtual_network of model VirtualNetworkLink is now required\n```\n\n----------------------------------------\n\nTITLE: Renewing Message Locks in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares message lock renewal in v0.50 and v7. In v0.50, the `renew_lock` method was called on the `Message` object itself. In v7, similar to settlement methods, lock renewal is performed using the `renew_message_lock` method on the `ServiceBusReceiver`, passing the message as an argument.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith receiver:\n    received_message.renew_lock()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith receiver:\n    receiver.renew_message_lock(received_message)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Monitor Query Parameters - Python\nDESCRIPTION: Sets up configuration variables for querying Azure Monitor Logs including query parameters, time ranges, and output settings. Handles service limits for row counts and data sizes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nQUERY = \"AppRequests\"\n\nEND_TIME = datetime.now().astimezone()\n\nDAYS_BACK = 90\n\nMAX_ROWS_PER_QUERY_SERVICE_LIMIT = int(5e5)  # 500K\nMAX_ROWS_PER_QUERY = int(MAX_ROWS_PER_QUERY_SERVICE_LIMIT * 0.9)\n\nMAX_BYTES_PER_QUERY_SERVICE_LIMIT = 100 * 1024 * 1024\nMAX_BYTES_PER_QUERY = int(MAX_BYTES_PER_QUERY_SERVICE_LIMIT * 0.6)\n\nMAX_CONCURRENT_QUERIES = 5\n\nOUTPUT_DIRECTORY = \"./query_results\"\nOUTPUT_FILE_PREFIX = \"query_results\"\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Postprocessing using PowerShell\nDESCRIPTION: This command runs an Autorest postprocessing script specifically for Python. It fixes linting issues and applies other necessary adjustments after the initial code generation. Requires specifying the output folder path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ps\nCODE:\n```\n`autorest --postprocess --output-folder=<path-to-root-of-package> --perform-load=false --python`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Oracle Database Management SDK Dependencies\nDESCRIPTION: Instructions for installing required Azure packages via pip, including the Oracle database management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/oracledatabase/azure-mgmt-oracledatabase/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-oracledatabase\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal for Authentication via Azure CLI\nDESCRIPTION: This Bash snippet uses the Azure CLI to create a new Azure Active Directory service principal, which can be used for AAD-based authentication. Output includes the appId, displayName, password, and tenant, which are needed for setting environment variables. The operation requires Azure CLI with sufficient permissions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name http://my-application --skip-assignment\n```\n\n----------------------------------------\n\nTITLE: Simulator Output Schema Transition (to_eval_qa_json_lines to to_eval_qr_json_lines) - JSON\nDESCRIPTION: This pair of JSON code snippets illustrates the schema change for output lines in Simulator and AdversarialSimulator. Previously, the output used 'question' and 'answer' fields; in the updated format, the keys are now 'query' and 'response'. Consumers of the SDK should adjust their output processing logic accordingly. This schema is strictly for structuring evaluation data, with one object per input/output turn.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\\"question\\\": <user_message>, \\\"answer\\\": <assistant_message>}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\\"query\\\": <user_message>, \\\"response\\\": assistant_message}\n```\n\n----------------------------------------\n\nTITLE: Migrating Evaluator Configuration Input in evaluate API - Python\nDESCRIPTION: These code snippets show the change in how evaluator configuration parameters are provided to the evaluate API in the Azure SDK for Python. Previously, field mapping was direct inside evaluator_config; it is now explicitly nested under column_mapping. The dependency is the evaluate function with corresponding evaluators configured. Users must update their evaluator_config structures for compatibility, ensuring correct key nesting for all input field mappings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nevaluate(\\n    ...,\\n    evaluator_config={\\n        \\\"hate_unfairness\\\": {\\n            \\\"query\\\": \\\"${data.question}\\\",\\n            \\\"response\\\": \\\"${data.answer}\\\",\\n        }\\n    },\\n    ...\\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nevaluate(\\n    ...,\\n    evaluator_config={\\n        \\\"hate_unfairness\\\": {\\n            \\\"column_mapping\\\": {\\n                \\\"query\\\": \\\"${data.question}\\\",\\n                \\\"response\\\": \\\"${data.answer}\\\",\\n             }\\n        }\\n    },\\n    ...\\n)\n```\n\n----------------------------------------\n\nTITLE: Release Version 1.0.0 Changelog Updates\nDESCRIPTION: Documents changes in version 1.0.0 including new properties added to OperationErrorDetails, ResourceOperationDetails, and Schedule models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computeschedule/azure-mgmt-computeschedule/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2025-01-20)\n\n### Features Added\n\n  - Model `OperationErrorDetails` added property `timestamp`\n  - Model `OperationErrorDetails` added property `azure_operation_name`\n  - Model `ResourceOperationDetails` added property `timezone`\n  - Model `Schedule` added property `deadline`\n  - Model `Schedule` added property `timezone`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Identity SDK using pip - Bash\nDESCRIPTION: This snippet shows how to install the Azure Communication Identity client library for Python using the pip package manager. The command fetches the latest version of the library from the Python Package Index (PyPI). Requires Python 3.8 or later and access to pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-identity\n```\n\n----------------------------------------\n\nTITLE: Getting Face Resource Endpoint using Azure CLI (Bash)\nDESCRIPTION: Uses the Azure CLI (`az`) command to fetch the endpoint URL property for a specific Azure Cognitive Services account (Face resource). Requires the resource name and resource group name as parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the endpoint for the Face resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies with requirements.txt\nDESCRIPTION: This snippet is a requirements.txt file listing dependencies for the Azure SDK for Python project. It specifies core and management Azure SDK packages, both as local editable installations and from PyPI, and includes version-pinned third-party libraries required for cloud event handling and asynchronous HTTP. The file enables pip to resolve and install all necessary packages for development and testing, and it requires the Python environment to meet specified version constraints, particularly for 'cloudevents'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\nazure-mgmt-resource==22.0.0\n-e ../azure-mgmt-eventgrid\nazure-storage-queue\ncloudevents<=2.0.0; python_version >= \"3.7\"\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Azure SDK for Python Web Apps Management Client Changes\nDESCRIPTION: This markdown snippet details the changes in versions 0.42.0 and 0.41.0 of the Azure SDK for Python Web Apps Management Client. It includes new features, breaking changes, and updates to various models and operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.42.0 (2019-05-24)\n\n**Features**\n\n  - Model SitePatchResource has a new parameter identity\n  - Model ManagedServiceIdentity has a new parameter\n    user_assigned_identities\n  - Model CloningInfo has a new parameter source_web_app_location\n  - Added operation\n    AppServiceEnvironmentsOperations.get_inbound_network_dependencies_endpoints\n  - Added operation\n    AppServiceEnvironmentsOperations.get_outbound_network_dependencies_endpoints\n  - Added operation DeletedWebAppsOperations.list_by_location\n  - Added operation\n    DeletedWebAppsOperations.get_deleted_web_app_by_location\n\n**Breaking changes**\n\n  - Model ManagedServiceIdentity has a new parameter\n    user_assigned_identities (renamed from identity_ids)\n\n## 0.41.0 (2019-02-13)\n\n**Features**\n\n  - Model DeletedAppRestoreRequest has a new parameter\n    use_dr_secondary\n  - Model StackMinorVersion has a new parameter\n    is_remote_debugging_enabled\n  - Model IpSecurityRestriction has a new parameter subnet_traffic_tag\n  - Model IpSecurityRestriction has a new parameter vnet_traffic_tag\n  - Model IpSecurityRestriction has a new parameter\n    vnet_subnet_resource_id\n  - Model DeletedSite has a new parameter geo_region_name\n  - Model SnapshotRestoreRequest has a new parameter use_dr_secondary\n  - Model SiteAuthSettings has a new parameter\n    client_secret_certificate_thumbprint\n  - Model SiteConfig has a new parameter\n    scm_ip_security_restrictions_use_main\n  - Model SiteConfig has a new parameter scm_ip_security_restrictions\n  - Model CorsSettings has a new parameter support_credentials\n  - Model SiteConfigResource has a new parameter\n    scm_ip_security_restrictions_use_main\n  - Model SiteConfigResource has a new parameter\n    scm_ip_security_restrictions\n  - Model StackMajorVersion has a new parameter application_insights\n  - Model AppServicePlanPatchResource has a new parameter\n    maximum_elastic_worker_count\n  - Model AppServicePlan has a new parameter\n    maximum_elastic_worker_count\n  - Model SitePatchResource has a new parameter geo_distributions\n  - Model SitePatchResource has a new parameter\n    in_progress_operation_id\n  - Model SitePatchResource has a new parameter\n    client_cert_exclusion_paths\n  - Model SitePatchResource has a new parameter redundancy_mode\n  - Model Site has a new parameter geo_distributions\n  - Model Site has a new parameter in_progress_operation_id\n  - Model Site has a new parameter client_cert_exclusion_paths\n  - Model Site has a new parameter redundancy_mode\n  - Model VnetInfo has a new parameter is_swift\n  - Added operation WebAppsOperations.get_network_traces_slot_v2\n  - Added operation\n    WebAppsOperations.list_snapshots_from_dr_secondary_slot\n  - Added operation WebAppsOperations.get_network_traces_slot\n  - Added operation\n    WebAppsOperations.start_web_site_network_trace_operation_slot\n  - Added operation WebAppsOperations.get_network_trace_operation_v2\n  - Added operation\n    WebAppsOperations.start_web_site_network_trace_operation\n  - Added operation WebAppsOperations.get_network_traces_v2\n  - Added operation WebAppsOperations.stop_network_trace_slot\n  - Added operation\n    WebAppsOperations.get_network_trace_operation_slot_v2\n  - Added operation\n    WebAppsOperations.list_snapshots_from_dr_secondary\n  - Added operation\n    WebAppsOperations.get_network_trace_operation_slot\n  - Added operation WebAppsOperations.stop_network_trace\n  - Added operation WebAppsOperations.start_network_trace_slot\n  - Added operation WebAppsOperations.get_network_trace_operation\n  - Added operation WebAppsOperations.start_network_trace\n  - Added operation WebAppsOperations.get_network_traces\n  - Added operation\n    RecommendationsOperations.list_recommended_rules_for_hosting_environment\n  - Added operation\n    RecommendationsOperations.list_history_for_hosting_environment\n  - Added operation\n    RecommendationsOperations.disable_all_for_hosting_environment\n  - Added operation\n    RecommendationsOperations.disable_recommendation_for_hosting_environment\n  - Added operation\n    RecommendationsOperations.reset_all_filters_for_hosting_environment\n  - Added operation\n    RecommendationsOperations.get_rule_details_by_hosting_environment\n\n**Breaking changes**\n\n  - Model AppServicePlanPatchResource no longer has parameter\n    admin_site_name\n  - Model AppServicePlan no longer has parameter admin_site_name\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern for Client Creation in Python\nDESCRIPTION: This snippet shows the recommended pattern for client creation in Azure SDK. It creates a single client instance that is reused across multiple operations, which is more efficient for resource management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# RECOMMENDED PATTERN - create client once and reuse it\nimport uuid\nfrom azure.storage.blob import BlobServiceClient\n\n# Create the client at module level to be reused across functions\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=foo;AccountKey=foo;EndpointSuffix=core.windows.net\"\nblob_service = BlobServiceClient.from_connection_string(connection_string)\ncontainer = blob_service.get_container_client(\"mycontainer\")\n\ndef upload_data(data):\n    name = str(uuid.uuid4())\n    blob = container.get_blob_client(name)\n    blob.upload_blob(data)\n    return name\n```\n\n----------------------------------------\n\nTITLE: Using EventProcessorHost in Azure Event Hubs SDK v1\nDESCRIPTION: Example of how to set up and use EventProcessorHost in the v1 SDK for load-balanced event processing across multiple instances with Azure Storage-based checkpointing and leasing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport asyncio\nimport os\nfrom azure.eventprocessorhost import (\n    AbstractEventProcessor,\n    AzureStorageCheckpointLeaseManager,\n    EventHubConfig,\n    EventProcessorHost,\n    EPHOptions)\nlogger = logging.getLogger(\"azure.eventhub\")\nclass EventProcessor(AbstractEventProcessor):\n    def __init__(self, params=None):\n        super().__init__(params)\n        self._msg_counter = 0\n    async def open_async(self, context):\n        logger.info(\"Connection established {}\".format(context.partition_id))\n    async def close_async(self, context, reason):\n        logger.info(\"Connection closed (reason {}, id {})\".format(\n            reason,\n            context.partition_id))\n    async def process_events_async(self, context, messages):\n        self._msg_counter += len(messages)\n        logger.info(\"Partition id {}, Events processed {}\".format(context.partition_id, self._msg_counter))\n        await context.checkpoint_async()\n    async def process_error_async(self, context, error):\n        logger.error(\"Event Processor Error {!r}\".format(error))\n# Storage Account Credentials\nSTORAGE_ACCOUNT_NAME = os.environ.get('AZURE_STORAGE_ACCOUNT')\nSTORAGE_KEY = os.environ.get('AZURE_STORAGE_ACCESS_KEY')\nLEASE_CONTAINER_NAME = \"leases\"\nNAMESPACE = os.environ.get('EVENT_HUB_NAMESPACE')\nEVENTHUB = os.environ.get('EVENT_HUB_NAME')\nUSER = os.environ.get('EVENT_HUB_SAS_POLICY')\nKEY = os.environ.get('EVENT_HUB_SAS_KEY')\n# Eventhub config and storage manager\neh_config = EventHubConfig(NAMESPACE, EVENTHUB, USER, KEY, consumer_group=\"$Default\")\neh_options = EPHOptions()\neh_options.debug_trace = False\nstorage_manager = AzureStorageCheckpointLeaseManager(\n    STORAGE_ACCOUNT_NAME, STORAGE_KEY, LEASE_CONTAINER_NAME)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -TestApplicationSecret in PowerShell\nDESCRIPTION: Defines the optional 'TestApplicationSecret' parameter, a string representing the service principal secret (password) for the test runner application. This secret is used for authentication against deployed resources and is passed to the ARM template. It's not required, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for Azure SDK\nDESCRIPTION: A requirements.txt file specifying the necessary Python package dependencies including Azure SDK tools, Azure Identity library, and aiohttp for async HTTP operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining AutoRest Generation Metadata and Output Settings with YAML\nDESCRIPTION: Specifies general metadata and output folder options for AutoRest generation. Sets the SDK title, required external Swagger document, output path, namespace, and Python package name. Disables namespace folding, enables Python support, and sets credential and security policies. Key dependencies include an external YAML spec for Rooms, and the block customizes both SDK structure and packaging constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: Azure Communication Rooms Service\nrequire:\n    - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/1175ddba07ff5e3040bb3b15fe7fe59453f1ef7a/specification/communication/data-plane/Rooms/readme.md\noutput-folder: ../azure/communication/rooms/_generated\nnamespace: azure.communication.rooms\npackage-name: azure-communication-rooms\nno-namespace-folders: true\npython: true\nadd-credential: false\nv3: true\nno-async: false\nsecurity: Anonymous\n```\n\n----------------------------------------\n\nTITLE: Recording Released Version 1.0.0 of Azure SDK for Python (Markdown)\nDESCRIPTION: This snippet documents the release of version 1.0.0 of the Azure SDK for Python, including the release date. It serves as a historical record in the changelog.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-nspkg/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2020-01-09)\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure Queue Storage SDK environment in PowerShell\nDESCRIPTION: Clone the autorest.python repository, checkout the azure-core branch, and install dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd C:\\work\ngit clone --recursive https://github.com/Azure/autorest.python.git\ncd autorest.python\ngit checkout azure-core\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adjusting Interval Parameter in Azure Monitor Query Client\nDESCRIPTION: Directive to modify the interval parameter by removing the default value and adding the 'duration' format.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters[IntervalParameter]\n  transform: >\n    delete $.default;\n    $.format = \"duration\";\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document Layout with DocumentAnalysisClient in Azure SDK for Python 3.2.x (Incomplete)\nDESCRIPTION: This is the beginning of a code snippet showing how to analyze document layout using the DocumentAnalysisClient in 3.2.x. It demonstrates opening a document file and initiating analysis, but the snippet is incomplete in the provided text.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Query Library\nDESCRIPTION: Commands to install the Azure Monitor Query library and optional dependencies required for running the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-monitor-query\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity pandas\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Defender EASM Client Generation in YAML\nDESCRIPTION: YAML configuration for generating the Azure Defender EASM Data Plane Client. It specifies the input Swagger file, output folder, namespace, package name, version, and other essential settings for the SDK generation process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/riskiq/data-plane/Microsoft.Easm/preview/2022-09-01-preview/easm.json\noutput-folder: \"../\"\nnamespace: azure.defender.easm\npackage-name: azure-defender-easm\nlicense-header: MICROSOFT_MIT_NO_VERSION\ntitle: EasmClient\npackage-version: 1.0.0b1\npackage-mode: dataplane\npackage-pprint-name: EASM Data Plane Client\nsecurity: AADToken\nsecurity-scopes: https://easm.defender.microsoft.com/.default\n```\n\n----------------------------------------\n\nTITLE: Operation Renaming Directives for Azure Metrics Advisor\nDESCRIPTION: Directives to rename API operations with more consistent and intuitive naming conventions, improving the SDK's usability and clarity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - rename-operation:\n      from: createMetricFeedback\n      to: addFeedback\n  - rename-operation:\n      from: getMetricFeedback\n      to: getFeedback\n  - rename-operation:\n      from: listMetricFeedbacks\n      to: listFeedback\n  - rename-operation:\n      from: getRootCauseOfIncidentByAnomalyDetectionConfiguration\n      to: listIncidentRootCauses\n  - rename-operation:\n      from: getSeriesByAnomalyDetectionConfiguration\n      to: listMetricEnrichedSeriesData\n  - rename-operation:\n      from: getAlertsByAnomalyAlertingConfiguration\n      to: listAlerts\n  - rename-operation:\n      from: getDimensionOfAnomaliesByAnomalyDetectionConfiguration\n      to: listAnomalyDimensionValues\n  - rename-operation:\n      from: getMetricDimension\n      to: listMetricDimensionValues\n  - rename-operation:\n      from: getMetricData\n      to: listMetricSeriesData\n  - rename-operation:\n      from: getMetricSeries\n      to: listMetricSeriesDefinitions\n  - rename-operation:\n      from: getEnrichmentStatusByMetric\n      to: listMetricEnrichmentStatus\n  - rename-operation:\n      from: createAnomalyAlertingConfiguration\n      to: createAlertConfiguration\n  - rename-operation:\n      from: createAnomalyDetectionConfiguration\n      to: createDetectionConfiguration\n  - rename-operation:\n      from: getDataFeedById\n      to: getDataFeed\n  - rename-operation:\n      from: getAnomalyAlertingConfiguration\n      to: getAlertConfiguration\n  - rename-operation:\n      from: getAnomalyDetectionConfiguration\n      to: getDetectionConfiguration\n  - rename-operation:\n      from: getIngestionProgress\n      to: getDataFeedIngestionProgress\n  - rename-operation:\n      from: resetDataFeedIngestionStatus\n      to: refreshDataFeedIngestion\n  - rename-operation:\n      from: deleteAnomalyAlertingConfiguration\n      to: deleteAlertConfiguration\n  - rename-operation:\n      from: deleteAnomalyDetectionConfiguration\n      to: deleteDetectionConfiguration\n  - rename-operation:\n      from: updateAnomalyAlertingConfiguration\n      to: updateAlertConfiguration\n  - rename-operation:\n      from: getAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration\n      to: listAlertConfigurations\n  - rename-operation:\n      from: getAnomalyDetectionConfigurationsByMetric\n      to: listDetectionConfigurations\n  - rename-operation:\n      from: getDataFeedIngestionStatus\n      to: listDataFeedIngestionStatus\n  - rename-operation:\n      from: getCredential\n      to: getDatasourceCredential\n  - rename-operation:\n      from: createCredential\n      to: createDatasourceCredential\n  - rename-operation:\n      from: listCredentials\n      to: listDatasourceCredentials\n  - rename-operation:\n      from: updateCredential\n      to: updateDatasourceCredential\n  - rename-operation:\n      from: deleteCredential\n      to: deleteDatasourceCredential\n  - rename-operation:\n      from: updateAnomalyDetectionConfiguration\n      to: updateDetectionConfiguration\n  - rename-operation:\n      from: getAnomaliesFromAlertByAnomalyAlertingConfiguration\n      to: listAnomaliesForAlert\n  - rename-operation:\n      from: getIncidentsFromAlertByAnomalyAlertingConfiguration\n      to: listIncidentsForAlert\n```\n\n----------------------------------------\n\nTITLE: PerfStressTest Class Implementation\nDESCRIPTION: Implementation of PerfStressTest class for single-operation performance testing, requiring sync and async run implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PerfStressTest:\n    def run_sync(self) -> None:\n        # Must be implemented. This will be the perf test to be run synchronously.\n\n    async def run_async(self) -> None:\n        # Must be implemented. This will be the perf test to be run asynchronously.\n        # If writing a test for an SDK without async support (e.g. a T1 legacy SDK), implement this method and raise an exception.\n```\n\n----------------------------------------\n\nTITLE: Running Python Sample for Azure Document Intelligence\nDESCRIPTION: This command demonstrates how to run a Python sample script for Azure Document Intelligence. The specific example given is for analyzing receipts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_analyze_receipts.py\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -Confirm in PowerShell\nDESCRIPTION: Defines the common PowerShell 'Confirm' switch parameter. When present, it prompts the user for confirmation before executing the cmdlet's actions. It's not required, is named, has no default value, doesn't accept pipeline input or wildcards, and has an alias 'cf'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Enumerating Update Names for a Provider using DeviceUpdateClient in Python\nDESCRIPTION: This snippet demonstrates retrieving update names for a specific provider. It reads the provider name from the `DEVICEUPDATE_UPDATE_PROVIDER` environment variable and uses the `list_names` method of the `DeviceUpdateClient`, passing the provider name as an argument. The resulting list of update names is iterated and printed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ListUpdates/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n``` python\nupdate_provider = os.environ[\"DEVICEUPDATE_UPDATE_PROVIDER\"]\nresponse = client.device_update.list_names(update_provider)\nfor item in response:\n    print(f\"  {item}\")\n```\n```\n\n----------------------------------------\n\nTITLE: Running Output Old Packages Script with Default Settings\nDESCRIPTION: Shows how to execute the script using default settings, which reports packages without releases in the past 2 years and omits already Inactive packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/old_packages/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython output_old_packages.py\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Checkpoint Store Package\nDESCRIPTION: Command to install the Azure Event Hubs client library with checkpoint store functionality using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventhub-checkpointstoreblob\n```\n\n----------------------------------------\n\nTITLE: Specifying an Editable Local Package Dependency\nDESCRIPTION: This configuration line, typically found in a Python requirements file (e.g., `requirements.txt`) or used with `pip install`, instructs the package installer to install the package located at the relative path `../../../tools/azure-sdk-tools` in editable mode (`-e`). Editable installs link the installation to the source directory, allowing changes in the source code to be immediately available without reinstalling the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/botservice/azure-mgmt-botservice/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Up Django Instrumentation\nDESCRIPTION: Steps to run the Django instrumentation sample. Installs the required Django instrumentation package, then runs the Django development server. Access the sample app at http://localhost:8000/.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-instrumentation-django\n$ # from the django directory\n$ python manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Renaming 'conversion_settings' to 'asset_conversion_settings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'conversion_settings' definition in the Swagger document. It renames the client-side representation of this definition to 'asset_conversion_settings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion_settings'\n    transform: >\n        $[\"x-ms-client-name\"] = \"asset_conversion_settings\";\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP 403 Network Access Denied Error in ACR Python SDK\nDESCRIPTION: This JSON snippet shows the error format when access to the Azure Container Registry is denied due to network configuration, such as firewall rules blocking the client's IP address or disabled public network access for the registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/TROUBLESHOOTING.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"code\": \"DENIED\",\n      \"message\": \"client with IP '<your IP address>' is not allowed access. Refer https://aka.m\\ns/acr/firewall to grant access.\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This requirements file specifies both local path dependencies and external packages needed for the Azure SDK for Python. It includes the azure-sdk-tools from a relative path, the azure-core package, and the aiohttp external package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Generating SDK with PowerShell\nDESCRIPTION: Commands to navigate to the swagger folder and run AutoRest with the configuration file to generate the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/swagger/SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md --version-tolerant=false\n```\n\n----------------------------------------\n\nTITLE: Installing Performance Test Dependencies\nDESCRIPTION: Commands for installing required development dependencies and the package in editable mode within a Python virtual environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-containerregistry> pip install -r dev_requirements.txt\n(env) ~/azure-containerregistry> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Requirements with Editable Installation\nDESCRIPTION: This snippet specifies dependencies for a Python project, including an editable install of the local azure-sdk-tools (located relatively) and the aiohttp HTTP client library. The '-e ../../../tools/azure-sdk-tools' line allows for development mode installation such that any changes in the local tools directory are immediately reflected. These entries are typically placed in a requirements.txt or similar file used by pip, with the expectation that the user runs 'pip install -r requirements.txt'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/quota/azure-mgmt-quota/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests for Azure Key Vault Keys\nDESCRIPTION: This command demonstrates how to use the perfstress tool to list available performance tests for the Azure Key Vault Keys SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-keys> cd tests/perfstress_tests/\n(env) ~/azure-keyvault-keys/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Querying a Knowledge Base with QueryDTO (Legacy QnA Maker SDK) in Python\nDESCRIPTION: Demonstrates querying a knowledge base using the `generate_answer` method of the legacy `QnAMakerClient`. It requires constructing a `QueryDTO` object with the user's question and providing the specific knowledge base ID (`kb_id`). Results are then filtered based on a score threshold (e.g., > 0.9).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cognitiveservices.knowledge.qnamaker.models import QueryDTO\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(endpoint, credentials)\n\ngenerate_answer_payload = QueryDTO(\n    question=\"How long should my Surface battery last?\",\n)\n\nresponse = client.knowledgebase.generate_answer(\n    kb_id=\"<my-knowledge-base-id>\",\n    generate_answer_payload=generate_answer_payload,\n)\nbest_answers = [a for a in response.answers if a.score > 0.9]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Kusto Management Client and Azure Identity packages\nDESCRIPTION: This snippet shows how to install the required packages using pip. It installs the azure-mgmt-kusto package for Kusto management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-kusto\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes local package references using relative paths and external package dependencies. Some packages are referenced as editable installs (-e flag) pointing to local directories.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp>=3.0; python_version >= '3.5'\n-e ../../storage/azure-mgmt-storage\n-e ../../eventhub/azure-mgmt-eventhub\nazure-mgmt-loganalytics\n-e ../../appservice/azure-mgmt-web\nazure-mgmt-compute\n-e ../../network/azure-mgmt-network\n-e ../../applicationinsights/azure-mgmt-applicationinsights\n-e ../../logic/azure-mgmt-logic\n\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Visual Studio Code\nDESCRIPTION: Command to open the current package directory in Visual Studio Code from the command line.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> code .\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in azure-cosmosdb-table\nDESCRIPTION: Demonstrates how to list tables using azure-cosmosdb-table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmosdb.table import TableService\nclient = TableService(...)\n\n# In the azure-cosmosdb-table library, there is no query table method\ntables = list(service.list_tables())\nfor table in tables:\n    print(table.name)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Health Insights Endpoint using Azure CLI\nDESCRIPTION: Azure CLI command to retrieve the endpoint for a Health Insights service resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Event Hub Clients in azure-eventhub v5 (Python)\nDESCRIPTION: Illustrates client initialization in `azure-eventhub` v5, highlighting changes from v1. It shows authentication using connection strings for `EventHubProducerClient`, `EventHubConsumerClient`, and the new `BlobCheckpointStore`. It also introduces authentication via Azure Active Directory using `azure-identity` (`EnvironmentCredential`). Address-based authentication from v1 is noted as no longer supported.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Address is no longer used for authentication.\n\n# Authenticate with connection string\nproducer_client = EventHubProducerClient.from_connection_string(conn_str)\nconsumer_client = EventHubConsumerClient.from_connection_string(conn_str)\ncheckpoint_store = BlobCheckpointStore.from_connection_string(storage_conn_str, container_name)\nconsumer_client_with_checkpoint_store = EventHubConsumerClient.from_connection_string(conn_str, consumer_group='$Default', checkpoint_store=checkpoint_store)\n\n# Authenticate with Active Directory\nfrom azure.identity import EnvironmentCredential\nproducer_client = EventHubProducerClient(fully_qualified_namespace, eventhub_name, credential=EnvironmentCredential())\nconsumer_client = EventHubConsumerClient(fully_qualified_namespace, eventhub_name, consumer_group='$Default', credential=EnvironmentCredential())\ncheckpoint_store = BlobCheckpointStore(blob_account_url, container_name, credential=EnvironmentCredential())\nconsumer_client_with_checkpoint_store = EventHubConsumerClient(fully_qualified_namespace, eventhub_name, consumer_group='$Default', credential=EnvironmentCredential(), checkpoint_store=checkpoint_store)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK Packages for Python (2023.09.01 Release)\nDESCRIPTION: This snippet shows a markdown-formatted list of Azure SDK packages for Python, including their names and versions. It represents the 2023.09.01 release of the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 2023.09.01\n\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apimanagement-4.0.0\n- azure-mgmt-appconfiguration-3.0.0\n- azure-mgmt-appcontainers-3.0.0\n- azure-mgmt-applicationinsights-4.0.0\n- azure-mgmt-appplatform-8.0.0\n- azure-mgmt-attestation-1.0.0\n- azure-mgmt-authorization-4.0.0\n- azure-mgmt-automanage-1.0.0\n- azure-mgmt-automation-1.0.0\n- azure-mgmt-avs-8.0.0\n- azure-mgmt-azurearcdata-1.0.0\n- azure-mgmt-azurestack-1.0.0\n- azure-mgmt-azurestackhci-7.0.0\n- azure-mgmt-baremetalinfrastructure-1.0.0\n- azure-mgmt-batch-17.1.0\n- azure-mgmt-billing-6.0.0\n- azure-mgmt-botservice-2.0.0\n- azure-mgmt-changeanalysis-1.0.0\n- azure-mgmt-cdn-12.0.0\n- azure-mgmt-cognitiveservices-13.5.0\n- azure-mgmt-commerce-6.0.0\n- azure-mgmt-communication-2.0.0\n- azure-mgmt-compute-30.1.0\n- azure-mgmt-confidentialledger-1.0.0\n- azure-mgmt-confluent-1.0.0\n- azure-mgmt-containerinstance-10.1.0\n- azure-mgmt-containerservice-26.0.0\n- azure-mgmt-cosmosdb-9.2.0\n- azure-mgmt-costmanagement-4.0.1\n- azure-mgmt-customproviders-1.0.0\n- azure-mgmt-dashboard-1.0.0\n- azure-mgmt-databox-2.0.0\n- azure-mgmt-databoxedge-1.0.0\n- azure-mgmt-databricks-2.0.0\n- azure-mgmt-datafactory-3.1.0\n- azure-mgmt-datamigration-10.0.0\n- azure-mgmt-dataprotection-1.2.0\n- azure-mgmt-datashare-1.0.0\n- azure-mgmt-deploymentmanager-1.0.0\n- azure-mgmt-desktopvirtualization-1.0.0\n- azure-mgmt-devcenter-1.0.0\n- azure-mgmt-deviceupdate-1.0.0\n- azure-mgmt-devtestlabs-9.0.0\n- azure-mgmt-digitaltwins-6.4.0\n- azure-mgmt-dns-8.0.1\n- azure-mgmt-dnsresolver-1.0.0\n- azure-mgmt-dynatrace-2.0.0\n- azure-mgmt-edgeorder-1.0.0\n- azure-mgmt-elastic-1.0.0\n- azure-mgmt-eventhub-11.0.0\n- azure-mgmt-extendedlocation-1.1.0\n- azure-mgmt-fluidrelay-1.0.0\n- azure-mgmt-frontdoor-1.1.0\n- azure-mgmt-graphservices-1.0.0\n- azure-mgmt-hanaonazure-1.0.0\n- azure-mgmt-hdinsight-9.0.0\n- azure-mgmt-healthcareapis-1.1.0\n- azure-mgmt-hybridcompute-8.0.0\n- azure-mgmt-hybridkubernetes-1.1.0\n- azure-mgmt-hybridnetwork-1.0.0\n- azure-mgmt-imagebuilder-1.2.0\n- azure-mgmt-iothub-2.4.0\n- azure-mgmt-keyvault-10.2.3\n- azure-mgmt-kubernetesconfiguration-3.0.0\n- azure-mgmt-kusto-3.2.0\n- azure-mgmt-labservices-2.0.0\n- azure-mgmt-loadtesting-1.0.0\n- azure-mgmt-loganalytics-12.0.0\n- azure-mgmt-logic-10.0.0\n- azure-mgmt-logz-1.0.0\n- azure-mgmt-machinelearningservices-1.0.0\n- azure-mgmt-maintenance-2.1.0\n- azure-mgmt-managednetworkfabric-1.0.0\n- azure-mgmt-managedservices-6.0.0\n- azure-mgmt-managementgroups-1.0.0\n- azure-mgmt-managementpartner-1.0.0\n- azure-mgmt-maps-2.0.0\n- azure-mgmt-marketplaceordering-1.1.0\n- azure-mgmt-media-10.2.0\n- azure-mgmt-mixedreality-1.0.0\n- azure-mgmt-mobilenetwork-3.0.0\n- azure-mgmt-monitor-6.0.2\n- azure-mgmt-msi-7.0.0\n- azure-mgmt-netapp-10.1.0\n- azure-mgmt-network-25.0.0\n- azure-mgmt-networkcloud-1.0.0\n- azure-mgmt-newrelicobservability-1.0.0\n- azure-mgmt-nginx-2.1.0\n- azure-mgmt-notificationhubs-8.0.0\n- azure-mgmt-operationsmanagement-1.0.0\n- azure-mgmt-orbital-2.0.0\n- azure-mgmt-paloaltonetworksngfw-1.0.0\n- azure-mgmt-peering-1.0.0\n- azure-mgmt-policyinsights-1.0.0\n- azure-mgmt-portal-1.0.0\n- azure-mgmt-powerbidedicated-1.0.0\n- azure-mgmt-privatedns-1.1.0\n- azure-mgmt-purview-1.0.0\n- azure-mgmt-qumulo-1.0.0\n- azure-mgmt-rdbms-10.1.0\n- azure-mgmt-recoveryservices-2.4.0\n- azure-mgmt-recoveryservicesbackup-6.0.0\n- azure-mgmt-redhatopenshift-1.3.0\n- azure-mgmt-redis-14.2.0\n- azure-mgmt-redisenterprise-2.0.0\n- azure-mgmt-relay-1.1.0\n- azure-mgmt-reservations-2.3.0\n- azure-mgmt-resource-23.0.1\n- azure-mgmt-resourceconnector-1.0.0\n- azure-mgmt-resourcemover-1.0.0\n- azure-mgmt-search-9.0.0\n- azure-mgmt-security-5.0.0\n- azure-mgmt-securityinsight-1.0.0\n- azure-mgmt-selfhelp-1.0.0\n- azure-mgmt-serialconsole-1.0.0\n- azure-mgmt-servicebus-8.2.0\n- azure-mgmt-servicefabric-2.0.0\n- azure-mgmt-servicelinker-1.1.0\n- azure-mgmt-signalr-1.2.0\n- azure-mgmt-sql-3.0.1\n- azure-mgmt-storage-21.1.0\n- azure-mgmt-storagecache-1.5.0\n- azure-mgmt-storagemover-1.0.0\n- azure-mgmt-storagepool-1.0.0\n- azure-mgmt-storagesync-1.0.0\n- azure-mgmt-streamanalytics-1.0.0\n- azure-mgmt-subscription-3.1.1\n- azure-mgmt-support-6.0.0\n- azure-mgmt-synapse-2.0.0\n- azure-mgmt-trafficmanager-1.0.0\n- azure-mgmt-timeseriesinsights-1.0.0\n- azure-mgmt-voiceservices-1.0.0\n- azure-mgmt-web-7.1.0\n- azure-mgmt-webpubsub-1.1.0\n- azure-mgmt-workloads-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Classes With Method Calls and Imports to Illustrate Circular Import Problem in Python\nDESCRIPTION: Shows two modules where 'a.py' imports Baz from b, and 'b.py' imports bar from a. The cross-import causes a circular import at runtime, used as a teaching example for the necessity of TYPE_CHECKING. Useful for diagnosing and preventing ImportError in interdependent Python modules.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom b import Baz\\n\\n\\ndef create_foo(b: Baz) -> None:\\n    b.hello()\\n\\n\\ndef bar() -> None:\\n    print(\\\"bar\\\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom a import bar\\n\\n\\nclass Baz:\\n    def hello(self) -> None:\\n        bar()\n```\n\n----------------------------------------\n\nTITLE: Removing Get Access Token Operation from Swagger\nDESCRIPTION: Uses an AutoRest directive to remove the `get` operation definition from the `/oauth2/token` path within the Swagger file. This prevents the generation of an SDK method for retrieving an access token using username/password, as this authentication method is discouraged by the service team.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/oauth2/token\"]\n    transform: >\n      delete $.get\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Environment Variables for Performance Tests (Shell)\nDESCRIPTION: Sets required environment variables to connect to Azure Storage resources for running performance tests. These variables include connection string, account name, account key, container name, blob endpoint, table name, and table endpoint. These values are necessary for the tests to interact with live Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/corehttp/tests/perf_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nAZURE_STORAGE_CONN_STR=<the connection string to the Storage account>\nAZURE_STORAGE_ACCOUNT_NAME=<the Storage account name>\nAZURE_STORAGE_ACCOUNT_KEY=<the Storage account key>\n\nAZURE_STORAGE_CONTAINER_NAME=<the container name>\nAZURE_STORAGE_BLOBS_ENDPOINT=<The Storage Blobs endpoint in the format 'https://{storageAccountName}.blob.core.windows.net'>\n\nAZURE_STORAGE_TABLE_NAME=<The name to use for the Storage Table>\nAZURE_STORAGE_TABLES_ENDPOINT=<The Storage Tables endpoint in the format 'https://{storageAccountName}.table.core.windows.net'>\n```\n\n----------------------------------------\n\nTITLE: Model Serialization using Joblib in Python\nDESCRIPTION: Saves the trained gradient boosting model to a pickle file for later use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport joblib\n\n# Save the model as a pickle file\nfilename = './myModel.pkl'\njoblib.dump(gradient_boosting_pipeline, filename)\n```\n\n----------------------------------------\n\nTITLE: Modifying If-None-Match Header Configuration\nDESCRIPTION: AutoRest directive to remove the enum restriction from the If-None-Match header, allowing for more flexible header values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $..[?(@.name=='If-None-Match')]\n    transform: delete $.enum;\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Content Safety Package\nDESCRIPTION: Command to install the Azure AI Content Safety Python package using pip\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-contentsafety\n```\n\n----------------------------------------\n\nTITLE: Creating OKP Keys with KeyClient in Python\nDESCRIPTION: Example of using the new create_okp_key method added in version 4.8.0b2 to create an octet key pair (OKP) on Managed HSM.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.keys import KeyClient, KeyType\n\nkey_client = KeyClient(vault_url, credential)\nkey = key_client.create_okp_key(\"key-name\", key_type=KeyType.okp_hsm)\n```\n\n----------------------------------------\n\nTITLE: Creating a Container Registry in Azure CLI\nDESCRIPTION: Command to create a new Azure Container Registry with specified name, resource group, SKU, and location parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file_2.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz acr create -n MyRegistry -g MyResourceGroup --sku Standard -l westus\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SCVMM Management Client Library in Python\nDESCRIPTION: Commands to install the Azure SCVMM Management Client Library and Azure Identity packages using pip. These packages are required to interact with Azure SCVMM resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/scvmm/azure-mgmt-scvmm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-scvmm\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools via pip from local path\nDESCRIPTION: This command installs the Azure SDK tools package from a relative path. It uses the -e flag for an editable install, allowing for development and testing of the tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Power BI Embedded SDK Dependencies\nDESCRIPTION: Commands to install the required Azure Power BI Embedded management package and Azure identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/powerbiembedded/azure-mgmt-powerbiembedded/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-powerbiembedded\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure Core Version with Azure Storage File (Alternative)\nDESCRIPTION: Another example of installing a specific version of azure-core with azure-storage-file for compatibility with older versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core==1.0.0b1 azure-storage-file==12.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Setting a secret in azure-keyvault\nDESCRIPTION: Sets a secret using the set_secret method of KeyVaultClient in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsecret_bundle = client.set_secret(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    secret_name=\"secret-name\",\n    value=\"secret-value\"\n)\nsecret_value = secret_bundle.value\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Structured changelog detailing version updates, new features, breaking changes and improvements across multiple releases of the Azure Python SDK\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/powerbidedicated/azure-mgmt-powerbidedicated/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (2022-10-28)\n\n### Features Added\n\n  - Model CapacitySku has a new parameter capacity\n  - Model DedicatedCapacity has a new parameter friendly_name\n  - Model DedicatedCapacity has a new parameter tenant_id\n  - Model DedicatedCapacityMutableProperties has a new parameter friendly_name\n  - Model DedicatedCapacityMutableProperties has a new parameter tenant_id\n  - Model DedicatedCapacityProperties has a new parameter friendly_name\n  - Model DedicatedCapacityProperties has a new parameter tenant_id\n  - Model DedicatedCapacityUpdateParameters has a new parameter friendly_name\n  - Model DedicatedCapacityUpdateParameters has a new parameter tenant_id\n  - Model Operation has a new parameter origin\n  - Model Operation has a new parameter properties\n  - Model OperationDisplay has a new parameter description\n  - Model SkuDetailsForExistingResource has a new parameter resource_type\n\n## 1.0.0 (2021-03-26)\n\n**Features**\n\n  - Model DedicatedCapacityProperties has a new parameter mode\n  - Model DedicatedCapacityMutableProperties has a new parameter mode\n  - Model DedicatedCapacityUpdateParameters has a new parameter mode\n  - Model DedicatedCapacity has a new parameter system_data\n  - Model DedicatedCapacity has a new parameter mode\n  - Model Resource has a new parameter system_data\n  - Added operation group AutoScaleVCoresOperations\n\n**Breaking changes**\n\n  - Model Resource no longer has parameter sku\n  - Model ErrorResponse has a new signature\n\n## 1.0.0b1 (2020-12-02)\n\nThis is beta preview version.\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n\n## 0.1.0 (2020-01-19)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools Dependency from Local Path\nDESCRIPTION: Pip requirement specification using the -e flag to install azure-sdk-tools package in editable mode from a relative path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-mgmt-synapse/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cosmos DB Library\nDESCRIPTION: This snippet demonstrates how to install the Azure Cosmos DB library and run a sample script to create a database and container.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-cosmos library\n$ pip install azure-cosmos\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_cosmos.py\n```\n\n----------------------------------------\n\nTITLE: Declaring Autorest Directive for Renaming Properties in YAML\nDESCRIPTION: This YAML snippet declares a reusable Autorest directive named 'rename-property'. It uses JavaScript transformations to modify Swagger or OpenAPI documents. If a property specified by 'from' exists, it adds or updates the 'x-ms-client-name' extension with the value specified by 'to', effectively renaming the property in the generated client SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndeclare-directive:\n    rename-property: >-\n        [{\n        from: 'swagger-document',\n        transform: `if ($.properties[${JSON.stringify($.from)}]) { $.properties[${JSON.stringify($.from)}][\\\"x-ms-client-name\\\"] = ${JSON.stringify($.to)}; }`\n        },\n        {\n        from: 'openapi-document',\n        transform: `if ($.properties[${JSON.stringify($.from)}]) { $.properties[${JSON.stringify($.from)}][\\\"x-ms-client-name\\\"] = ${JSON.stringify($.to)}; }`\n        }]\n```\n\n----------------------------------------\n\nTITLE: Handling Insufficient Access Error in Azure Monitor Metrics Query\nDESCRIPTION: This snippet shows the error message received when credentials lack sufficient permissions to query the workspace. It's a 403 Forbidden error indicating insufficient access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{\"error\":{\"message\":\"The provided credentials have insufficient access to perform the requested operation\",\"code\":\"InsufficientAccessError\",\"correlationId\":\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Installing azure-sdk-tools Package in Editable Mode (Pip)\nDESCRIPTION: This configuration line instructs `pip` (Python package installer) to install the package located at the relative path `../../../tools/azure-sdk-tools` in editable mode (`-e`). Editable mode links the installed package directly to the source code directory, meaning changes in the source code are immediately available without needing reinstallation. This is commonly used in development workflows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/automanage/azure-mgmt-automanage/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools with pip Requirements Format\nDESCRIPTION: This snippet uses pip's editable install format to reference the Azure SDK tools package from a relative path. The -e flag enables editable mode, allowing changes to the original code to be reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-visualsearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Example Performance Test Command\nDESCRIPTION: Sample command demonstrating how to run a specific performance test (ListEntitiesTest) with parallel execution and custom parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-data-tables/tests> perfstress ListEntitiesTest --parallel=2 --count=1250 --full-edm\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group using Azure CLI in Shell\nDESCRIPTION: This shell snippet uses the Azure CLI ('az') to create a new Azure Resource Group, identified by the environment variable RESOURCE_GROUP, in the specified Azure region (westus2). The command is a prerequisite step for organizing and managing all subsequent Azure resources involved in the integration test workflow. Required dependency is the Azure CLI configured with proper login credentials. The input parameters are expected to be valid and unique. The result is the creation of a new resource group or an error if the group name is not unique.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naz group create -n $RESOURCE_GROUP --location westus2\n```\n\n----------------------------------------\n\nTITLE: Generating Docs for EventHubSharedKeyCredential (aio, Python)\nDESCRIPTION: Sphinx directive to automatically generate documentation for the asynchronous `EventHubSharedKeyCredential` class in `azure.eventhub.aio`. Includes all members, undocumented members, and inherited members using the specified options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.aio.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.aio.EventHubSharedKeyCredential\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment in Windows/Linux\nDESCRIPTION: Commands to create and activate a Python virtual environment across different operating systems including Windows CMD, PowerShell, and Linux shells.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nC:\\Users> python -m venv env\nC:\\Users> env\\scripts\\activate       # PowerShell only\nC:\\Users> source env\\bin\\activate    # Linux shell (Bash, ZSH, etc.) only\nC:\\Users> env\\scripts\\activate.bat   # Windows CMD only\n(env) C:\\Users>\n```\n\n----------------------------------------\n\nTITLE: Documenting Raised Exceptions in Python Azure SDK Docstrings\nDESCRIPTION: Example of documenting possible exceptions raised by a method in Azure SDK docstrings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n:raises <error1>, <error2>, or <error3>: <description>\n```\n\n----------------------------------------\n\nTITLE: Release 2.0 Configuration\nDESCRIPTION: YAML configuration specific to Release 2.0 of the Form Recognizer API. Defines the input file, namespace, and output folder locations for this API version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/cognitiveservices/data-plane/FormRecognizer/stable/v2.0/FormRecognizer.json\nnamespace: azure.ai.formrecognizer.v2_0\noutput-folder: $(python-sdks-folder)/formrecognizer/azure-ai-formrecognizer/azure/ai/formrecognizer/_generated/v2_0\n```\n\n----------------------------------------\n\nTITLE: Renaming RoomModel to CommunicationRoom in SDK Output Using YAML Directive\nDESCRIPTION: Sets a YAML transformation directive that renames 'RoomModel' to 'CommunicationRoom' in the SDK by rewriting the 'x-ms-client-name'. It finds the RoomModel definition in Swagger and replaces the target property, influencing the resulting Python SDK class naming. This is necessary for aligning API client types with domain naming conventions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions.RoomModel\n  transform: >\n    $[\"x-ms-client-name\"] = \"CommunicationRoom\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging\nDESCRIPTION: Example demonstrating how to set up detailed debug logging for the Azure Purview Scanning client\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.purview.scanning import PurviewScanningClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-account-name>.scan.purview.azure.com\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = PurviewScanningClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\n----------------------------------------\n\nTITLE: Async Operation in Old Version for Creating Virtual Machine\nDESCRIPTION: Demonstrates the old method of performing an asynchronous operation to create a virtual machine, where the result needs to be explicitly retrieved.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/python_mgmt_migration_guide.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = self.compute_client.virtual_machines.create_or_update(\n    group_name,\n    vm_name,\n    parameters\n)\nresult = result.result()\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog - Markdown\nDESCRIPTION: Structured changelog documenting different beta releases (1.0.0b1 through 1.0.0b4) of the Azure SDK for Python, including features, breaking changes, bug fixes, and other modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b4 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0b3 (2024-12-12)\n\n### Features Added\n\n- Integrated support for SAS-based authentication\n\n## 1.0.0b2 (2024-11-11)\n\n### Other Changes\n\n- Remove python 3.6 support\n- Fix API version error\n- Fix Sphinx errors\n- Fix mypy typing errors for mypy version 1.6.1\n\n## 1.0.0b1 (2022-10-11)\n\n### Features Added\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Analyzing General Documents with Azure Form Recognizer 3.2.x (Python)\nDESCRIPTION: This snippet shows how to analyze general documents using the prebuilt-document model in Azure Form Recognizer 3.2.x. It extracts key-value pairs, detects handwritten content, and processes pages, lines, words, selection marks, and tables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-document\", document=f\n    )\nresult = poller.result()\n\nfor style in result.styles:\n    if style.is_handwritten:\n        print(\"Document contains handwritten content: \")\n        print(\",\".join([result.content[span.offset:span.offset + span.length] for span in style.spans]))\n\nprint(\"----Key-value pairs found in document----\")\nfor kv_pair in result.key_value_pairs:\n    if kv_pair.key:\n        print(\n                \"Key '{}' found within '{}' bounding regions\".format(\n                    kv_pair.key.content,\n                    kv_pair.key.bounding_regions,\n                )\n            )\n    if kv_pair.value:\n        print(\n                \"Value '{}' found within '{}' bounding regions\\n\".format(\n                    kv_pair.value.content,\n                    kv_pair.value.bounding_regions,\n                )\n            )\n\nfor page in result.pages:\n    print(\"----Analyzing document from page #{}----\".format(page.page_number))\n    print(\n        \"Page has width: {} and height: {}, measured with unit: {}\".format(\n            page.width, page.height, page.unit\n        )\n    )\n\n    for line_idx, line in enumerate(page.lines):\n        words = line.get_words()\n        print(\n            \"...Line # {} has {} words and text '{}' within bounding polygon '{}'\".format(\n                line_idx,\n                len(words),\n                line.content,\n                line.polygon,\n            )\n        )\n\n        for word in words:\n            print(\n                \"......Word '{}' has a confidence of {}\".format(\n                    word.content, word.confidence\n                )\n            )\n\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' within bounding polygon '{}' and has a confidence of {}\".format(\n                selection_mark.state,\n                selection_mark.polygon,\n                selection_mark.confidence,\n            )\n        )\n\nfor table_idx, table in enumerate(result.tables):\n    print(\n        \"Table # {} has {} rows and {} columns\".format(\n            table_idx, table.row_count, table.column_count\n        )\n    )\n    for region in table.bounding_regions:\n        print(\n            \"Table # {} location on page: {} is {}\".format(\n                table_idx,\n                region.page_number,\n                region.polygon,\n            )\n        )\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.content,\n            )\n        )\n        for region in cell.bounding_regions:\n            print(\n                \"...content on page {} is within bounding polygon '{}'\\n\".format(\n                    region.page_number,\n                    region.polygon,\n                )\n            )\nprint(\"----------------------------------------\")\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Azure DNS SDK for Python\nDESCRIPTION: Demonstrates exception handling with the simplified exception tree, where most exceptions are now azure.core.exceptions.HttpResponseError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    result = client.some_operation()\nexcept HttpResponseError as e:\n    print(f\"Operation failed: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Feature Addition in Azure Network Management Client 25.3.0\nDESCRIPTION: This code snippet shows a single feature addition in version 25.3.0 of the Azure Network Management Client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 25.3.0 (2024-02-22)\n\n### Features Added\n\n  - Model BastionHost has a new parameter zones\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Chat SDK with pip\nDESCRIPTION: Command to install the Azure Communication Chat SDK for Python using pip. The --pre flag indicates this may be a pre-release version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-communication-chat\n```\n\n----------------------------------------\n\nTITLE: Running Autorest with README in PowerShell\nDESCRIPTION: Command to generate the SDK by pointing Autorest to this README file and specifying the output location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nautorest swagger/README.md --python-sdks-folder=<location-of-your-sdk-dir>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies in requirements format\nDESCRIPTION: This configuration snippet lists Python package dependencies, likely for use with pip in a requirements file. It includes an editable install (`-e`) for local development tools located via a relative path. It also references other local Azure SDK core packages (azure-core, azure-identity, azure-mgmt-core) via relative paths and specifies the external `aiohttp` library as a requirement.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/weightsandbiases/azure-mgmt-weightsandbiases/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Renaming `elevate_access.post` Method in Azure Authorization SDK (v0.60.0)\nDESCRIPTION: Version 0.60.0 introduced a breaking change by renaming an API operation method. The method `elevate_access.post` was changed to `global_administrator.elevate_access`. Code calling the old method name needs to be updated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Old method name:\n# client.elevate_access.post(...)\n\n# New method name (from v0.60.0):\n# client.global_administrator.elevate_access(...)\n```\n\n----------------------------------------\n\nTITLE: Using Test Mixin Class in Unit Tests\nDESCRIPTION: Example demonstrating how to use the TableTestCase mixin in a unit test class to access shared test utilities like account_url generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests-advanced.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TestTablesUnit(TableTestCase):\n    ...\n    def test_valid_url(self):\n        account = \"fake_tables_account\"\n        credential = \"fake_tables_account_key_0123456789\"\n\n        url = self.account_url(account, \"tables\")\n        client = TableClient(account_url=url, credential=credential)\n\n        assert client is not None\n        assert client.account_url == f\"https://{account}.tables.core.windows.net/\"\n```\n\n----------------------------------------\n\nTITLE: Running Sphinx for Documentation Building and Docstring Checking\nDESCRIPTION: Command to run Sphinx documentation builder with strict docstring checking for a specific Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e sphinx -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK for Python Project\nDESCRIPTION: This requirements file specifies all the dependencies needed for the Azure SDK for Python project. It includes references to local packages, testing frameworks, Azure management modules, and platform-specific dependencies with version constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\nmarshmallow>=3.5,<4.0.0\nmarshmallow-jsonschema==0.10.0\nmock\npytest-cov\npytest-forked\npytest-xdist\npytest-timeout\npytest-mock\npytest\npydash\nazure-mgmt-msi\npywin32==306 ; sys_platform == 'win32'\ndocker;platform.python_implementation!=\"PyPy\"\nnumpy;platform.python_implementation!=\"PyPy\"\nscikit-image;platform.python_implementation!=\"PyPy\"\nmldesigner\nazure-mgmt-resourcegraph<9.0.0,>=2.0.0\nazure-mgmt-resource<23.0.0,>=3.0.0\npytest-reportlog\npython-dotenv\nazureml-dataprep-rslex>=2.22.0; python_version < \"3.13\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies in requirements.txt Format\nDESCRIPTION: This snippet lists Python package dependencies required for an Azure SDK component. It uses relative paths for local packages ('azure-sdk-tools', 'azure-core', 'azure-identity', 'azure-mgmt-core'), with one specified as editable ('-e'), and includes the external 'aiohttp' library. This format is typically used in requirements files for installation via pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/fabric/azure-mgmt-fabric/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Current Test Structure Using AzureTestCase\nDESCRIPTION: Example showing the current structure of test classes that inherit from AzureTestCase, with optional use of decorators for test methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import AzureTestCase\n\nclass TestExample(AzureTestCase):\n\n    def test_example(self):\n        ...\n\n    @ExamplePreparer()\n    def test_example_with_preparer(self, example_variable, **kwargs):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Generation Settings for Azure QnA - YAML\nDESCRIPTION: Defines the main project-level generation settings for the Python SDK, including namespace, package name, licensing, folder layout, language versioning, and credential configuration. It also sets Python-specific options like 'black' formatting and version tolerance. These settings establish foundational code generation parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nnamespace: azure.ai.language.questionanswering\npackage-name: azure-ai-language-questionanswering\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\nversion-tolerant: true\npackage-version: 1.1.1\nadd-credential: true\ncredential-default-policy-type: AzureKeyCredentialPolicy\ncredential-key-header-name: Ocp-Apim-Subscription-Key\nblack: true\n\n```\n\n----------------------------------------\n\nTITLE: Change Response Types - YAML Directives\nDESCRIPTION: Updates response schema references to '#/definitions/Anything' for updateDataFeed, getDatasourceCredential and updateDatasourceCredential operations\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-operation: updateDataFeed\n    transform: >\n      $[\"responses\"][\"200\"][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: getDatasourceCredential\n    transform: >\n      $[\"responses\"][\"200\"][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: updateDatasourceCredential\n    transform: >\n      $[\"responses\"][\"200\"][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Language Service Endpoint\nDESCRIPTION: Azure CLI command to retrieve the endpoint for a Language service resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration Settings\nDESCRIPTION: YAML configuration for Azure Communication SMS SDK generation, specifying package version, output settings, and generation parameters\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/swagger/SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntag: package-sms-2021-03-07\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/896d05e37dbb00712726620b8d679cc3c3be09fb/specification/communication/data-plane/Sms/readme.md\noutput-folder: ../azure/communication/sms/_generated\nnamespace: azure.communication.sms\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nclear-output-folder: true\npython: true\nv3: true\nno-async: false\nadd-credential: false\ntitle: Azure Communication SMS Service\n```\n\n----------------------------------------\n\nTITLE: Implementing TooManyRedirectsError Exception in Azure SDK for Python\nDESCRIPTION: The TooManyRedirectsError class extends HttpResponseError to signal when an HTTP client has hit its configured maximum number of redirects. It expects a history argument detailing the sequence of redirects encountered, along with additional positional and keyword arguments for the exception. The message is fixed, and the class is used internally to manage error flows in redirect scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass TooManyRedirectsError(HttpResponseError):\n    def __init__(self, history, *args, **kwargs):\n        self.history = history\n        message = \"Reached maximum redirect attempts.\"\n        super(TooManyRedirectsError, self).__init__(message, *args, **kwargs)\n\n```\n\n----------------------------------------\n\nTITLE: Adversarial Simulator with Azure AI Evaluation SDK\nDESCRIPTION: Example of using the Adversarial Simulator in Azure AI Evaluation SDK, showing the updated import paths and output format changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation.simulator import AdversarialScenario, AdversarialSimulator\nfrom pprint import pprint\n\nazure_cred = DefaultAzureCredential()\nproject_scope = {\n    \"subscription_id\": \"<your-subscription-id>\",\n    \"resource_group_name\": \"<your-resource-group>\",\n    \"project_name\": \"<your-project-name>\",\n}\n\nsimulator = AdversarialSimulator(azure_ai_project=project_scope, credential=azure_cred)\n\noutputs = await simulator(\n    scenario=AdversarialScenario.ADVERSARIAL_QA, \n    max_conversation_turns=1, \n    max_simulation_results=1, \n    target=callback\n)\n\npprint(outputs.to_eval_qr_json_lines())\n```\n\n----------------------------------------\n\nTITLE: Using Null Sentinel Value with azure-core in Python\nDESCRIPTION: Demonstrates how to import and utilize the NULL sentinel object from the azure.core.serialization module in Python. This object is intended to represent attributes with no data, ensuring they are serialized as null values. The dependencies are the azure-core package and a hypothetical Foo class; the NULL object must be falsy (bool(NULL) is False). The foo object's attr is set to NULL, which guarantees correct serialization behavior for attributes meant to be explicitly null.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.serialization import NULL\n\nassert bool(NULL) is False\n\nfoo = Foo(\n    attr=NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Removing QueueName from parameter lists in Swagger document using YAML directive\nDESCRIPTION: YAML directive to remove QueueName and MessageId from parameter lists in specific paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{queueName}/messages/{messageid}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/QueueName\") && false == param['$ref'].endsWith(\"#/parameters/MessageId\"))});\n        }\n        else if (property.includes('/{queueName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/QueueName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Integrating CustomLROPoller into Service Operations in Python\nDESCRIPTION: This snippet shows how to integrate the previously defined `CustomLROPoller` into the `ServiceOperations` class. The `begin_upload` method is updated to instantiate and return `CustomLROPoller` instead of the standard `LROPoller`, both for new operations and when resuming from a `continuation_token`. This makes the custom `cancel` method (defined in `CustomLROPoller`) available to the user on the returned poller object. It depends on `CustomPollingMethod` and `CustomLROPoller` being defined elsewhere.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AnyStr, MutableMapping, Any\nJSON = MutableMapping[str, Any]\n\n\nclass ServiceOperations:\n\n    def begin_upload(self, data: AnyStr, **kwargs) -> CustomLROPoller[JSON]:\n        continuation_token = kwargs.pop(\"continuation_token\", None)\n        polling_method = CustomPollingMethod(**kwargs)\n        if continuation_token is not None:\n            return CustomLROPoller.from_continuation_token(\n                continuation_token=continuation_token,\n                deserialization_callback=lambda x: x,\n                polling_method=polling_method,\n                client=self\n            )\n        response = self._generated_client.create_upload(data, **kwargs)\n        return CustomLROPoller[JSON](\n            client=self,\n            initial_response=response,\n            deserialization_callback=lambda x: x,\n            polling_method=polling_method,\n        )\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script for Private Package Generation\nDESCRIPTION: This command runs the auto_private_package.py script, which helps generate private packages quickly. The script should be placed in the same folder as the azure-sdk-for-python directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/auto_release/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython auto_private_package.py\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Resource Group with Azure CLI - Shell\nDESCRIPTION: This snippet uses the Azure CLI to create a new Azure resource group with the specified name and region (westus2). The resource group must have a unique name within the Azure subscription. Dependencies: Azure CLI must be installed and authenticated. Parameters: RESOURCE_GROUP (the group name). Outputs a JSON description of the created group to standard output. Used as part of environment provisioning for testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\naz group create -n $RESOURCE_GROUP --location westus2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Package requirements file specifying local development dependencies and external packages needed for the Azure SDK Python project. Includes references to local tool packages and core Azure libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../storage/azure-mgmt-storage\nazure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Package Requirement Specification\nDESCRIPTION: Simple package requirement line indicating python-dotenv as a dependency\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/scripts/pyamqp/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Renaming AnomalyAlertingConfigurationLogicType to MetricAnomalyAlertConfigurationsOperator\nDESCRIPTION: Directive to rename AnomalyAlertingConfigurationLogicType enum to MetricAnomalyAlertConfigurationsOperator for better clarity in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"AnomalyAlertingConfiguration\"][\"properties\"][\"crossMetricsOperator\"][\"x-ms-enum\"][\"name\"] = \"MetricAnomalyAlertConfigurationsOperator\";\n```\n\n----------------------------------------\n\nTITLE: Defining Azure SDK Python Dependencies\nDESCRIPTION: Lists required Python package dependencies including local development tools, azure-core package, and msrestazure client library. Uses -e flag to install packages in editable/development mode from local paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-common/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../azure-core\nmsrestazure\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Performance Test\nDESCRIPTION: Example command to run the UploadTest performance test with specific parameters, including parallel execution and data size.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-datalake/tests> perfstress UploadTest --parallel=2 --size=10240\n```\n\n----------------------------------------\n\nTITLE: Complete Autorest Command for ARM Swagger without Readme\nDESCRIPTION: Comprehensive Autorest command for generating an Azure SDK package directly from an ARM Swagger JSON file without using a readme. Includes all necessary package metadata.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generation.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nautorest --version=latest --python --azure-arm=true --payload-flattening-threshold=2 --license-header=MICROSOFT_MIT_NO_VERSION --namespace=azure.mgmt.storage --package-name=azure-mgmt-storage --package-version=0.1.0 --input-file=specifications/storage/resource-manager/Microsoft.Storage/2016-12-01/storage.json\n```\n\n----------------------------------------\n\nTITLE: Authenticating ServiceBusClient with Connection String - Azure Service Bus - Python\nDESCRIPTION: Demonstrates authenticating the ServiceBusClient in both v0.50 and v7 SDKs using a connection string. This approach allows easy initialization without explicit credential management. The only required parameter is the Azure Service Bus connection string. The output is a ServiceBusClient instance; limitations include lack of AAD authentication support in v0.50.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with connection string in V0.50 and V7\nservicebus_client = ServiceBusClient.from_connection_string(conn_str)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Keys and Azure Identity packages\nDESCRIPTION: This snippet shows how to install the required packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-keyvault-keys azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Package Dependencies\nDESCRIPTION: Defines required Python package dependencies for Azure SDK development. Includes local package references to azure-sdk-tools, azure-core, and azure-identity, as well as a conditional dependency on aiohttp for Python 3.8+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.8'\n```\n\n----------------------------------------\n\nTITLE: Running Bandit for Security Analysis\nDESCRIPTION: Command to run Bandit static security analysis tool for a specific Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e bandit -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Execution Tags for Azure Monitor Query Client\nDESCRIPTION: Specifies tags for batch execution of different components: query, metrics, and metrics batch.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: release_query\n  - tag: release_metrics\n  - tag: release_metrics_batch\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in Azure Functions v1.x (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to disable logging in Azure Functions v1.x by setting the default log level to 'None'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/README.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logger\": {\n    \"categoryFilter\": {\n      \"defaultLevel\": \"None\",\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Maps Account with Azure CLI - Bash\nDESCRIPTION: Demonstrates using the Azure CLI to create an Azure Maps account resource with specified resource group, account name, and pricing tier. The command must be run with the proper Azure subscription context, and parameters such as <resource-group-name>, <account-name>, and <sku-name> should be set by the user. Outputs the result of the Maps account creation; requires Azure CLI to be installed and configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n----------------------------------------\n\nTITLE: Azure Video Analyzer SDK Release History Markdown\nDESCRIPTION: Markdown formatted version history showing the evolution of the Azure Video Analyzer SDK from initial release through deprecation notice. Documents major changes, feature additions, and deprecation timeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b4 (2022-04-29)\n### Other Changes\nDeprecated. We're retiring the Azure Video Analyzer preview service, you're advised to transition your applications off of Video Analyzer by 01 December 2022. This SDK is not longer maintained. \n\n## 1.0.0b3 (2021-11-09)\n\n- Added device discovery and device detail request for ONVIF enabled devices.\n- Added Remote Device Adapter configuration for ingesting video in a private network\n- Added retention policy to VideoSink\n\n## 1.0.0b2 (2021-05-19)\n\n- Updated the title and description of the package.\n\n## 1.0.0b1 (2021-05-19)\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Pyright Configuration Example\nDESCRIPTION: Sample pyright JSON configuration to exclude specific directories from type checking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exclude\": [\"**/_dont_type_check_me/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Query Results in Python\nDESCRIPTION: This snippet demonstrates how to store query results in a list to prevent data loss from multiple queries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvalues = []\nfor i in query_result:\n    values.append(i)\n```\n\n----------------------------------------\n\nTITLE: Setup Python Environment for SchemaRegistry Performance Tests\nDESCRIPTION: Commands to set up a Python virtual environment with the necessary dependencies for running SchemaRegistry performance tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-schemaregistry> pip install -r dev_requirements.txt\n(env) ~/azure-schemaregistry> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Field Changes in Prebuilt-Receipt Model JSON\nDESCRIPTION: This JSON snippet illustrates the changes in field representation for currency-related fields in the prebuilt-receipt model. It shows how the Total field now includes detailed currency information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/MIGRATION_GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Total\": {\n    \"type\": \"currency\",\n    \"valueCurrency\": {\n        \"amount\": 123.45,\n        \"currencySymbol\": \"$\",\n        \"currencyCode\": \"USD\"\n    },\n    ...\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Azure Test Resources\nDESCRIPTION: This PowerShell command removes the Azure Key Vault test resources using the Remove-TestResources.ps1 script with the Force parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 keyvault -Force\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Opentelemetry Distro with pip\nDESCRIPTION: Command to install the Azure Monitor Opentelemetry Distro package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-monitor-opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Renaming ObjectReplicationMetadata to OrMetadata via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive targets the `BlobItemInternal` definition. It renames the `ObjectReplicationMetadata` property to `OrMetadata`, deletes the original property, and uses the `x-ms-client-name` extension on the new property to retain `ObjectReplicationMetadata` as the name exposed in the generated client code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.BlobItemInternal\n  transform: |\n    $.properties.OrMetadata = $.properties.ObjectReplicationMetadata;\n    $.properties.OrMetadata[\"x-ms-client-name\"] = \"ObjectReplicationMetadata\";\n    delete $.properties.ObjectReplicationMetadata;\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Project Client\nDESCRIPTION: Sets up the AI Project client with authentication and configures tools for the agent to use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os, json\nimport pandas as pd\nfrom azure.ai.projects import AIProjectClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.projects.models import FunctionTool, ToolSet\nfrom user_functions import user_functions\n\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\nAGENT_NAME = \"Seattle Tourist Assistant PrP\"\n\n# Adding Tools to be used by Agent \nfunctions = FunctionTool(user_functions)\n\ntoolset = ToolSet()\ntoolset.add(functions)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.1.0b2\nDESCRIPTION: Release notes documenting server update model changes in beta version 1.1.0b2.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b2 (2024-12-16)\n\n### Features Added\n\n  - Model `ServerForUpdate` added property `cluster`\n```\n\n----------------------------------------\n\nTITLE: Adjusting Client and Configuration Imports in Azure Authorization SDK (v0.60.0)\nDESCRIPTION: Due to a new code generator used in version 0.60.0, import paths for the main client class (`AuthorizationManagementClient`) and its configuration were changed. These should now be imported directly from the versioned namespace (e.g., `azure.mgmt.authorization.v20xx_yy_zz`) rather than from a submodule named after the client class.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Old import path (no longer works for client class):\n# from azure.mgmt.authorization.v20xx_yy_zz.authorization_management_client import AuthorizationManagementClient\n\n# New import path (works for client and config):\n# from azure.mgmt.authorization.v20xx_yy_zz import AuthorizationManagementClient\n# from azure.mgmt.authorization.v20xx_yy_zz import AuthorizationManagementClientConfiguration\n```\n\n----------------------------------------\n\nTITLE: Running Pyright Static Analysis for Python Package\nDESCRIPTION: Command to run Pyright static analysis tool for type checking a specific Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e pyright -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Text Blocklist with Azure Content Safety Python SDK\nDESCRIPTION: This snippet adds items to an existing Azure Content Safety text blocklist using BlocklistClient and supporting models. It assumes credentials are available and uses AddOrUpdateTextBlocklistItemsOptions to supply new or updated blocklist items. The snippet reports item IDs, text, and descriptions, and handles exceptions robustly through HttpResponseError. This code can be used for batch or individual additions to keep blocklists current and effective.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.ai.contentsafety.models import AddOrUpdateTextBlocklistItemsOptions, TextBlocklistItem\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    block_item_text_1 = \"k*ll\"\n    block_item_text_2 = \"h*te\"\n\n    block_items = [TextBlocklistItem(text=block_item_text_1), TextBlocklistItem(text=block_item_text_2)]\n    try:\n        result = client.add_or_update_blocklist_items(\n            blocklist_name=blocklist_name, options=AddOrUpdateTextBlocklistItemsOptions(blocklist_items=block_items)\n        )\n        for block_item in result.blocklist_items:\n            print(\n                f\"BlockItemId: {block_item.blocklist_item_id}, Text: {block_item.text}, Description: {block_item.description}\"\n            )\n    except HttpResponseError as e:\n        print(\"\\nAdd block items failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest Globally Using PowerShell\nDESCRIPTION: Installs AutoRest, a code generation tool, globally via npm using PowerShell. Required for generating client SDKs from Swagger/OpenAPI specifications. The command installs the latest version and is a prerequisite for all subsequent SDK generation steps. No parameters other than the global npm install flag are needed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes a local development tool and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elastic/azure-mgmt-elastic/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Anything Object to Definitions\nDESCRIPTION: Directive to add an empty 'Anything' object to the swagger definitions, used as a placeholder for flexible or dynamic properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"Anything\"] = {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Tool Dependency for Azure SDK for Python\nDESCRIPTION: This line specifies a local development tool as a dependency for the Azure SDK for Python project. It uses the '-e' flag to indicate an editable install from a local directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-spark/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements list specifies the necessary dependencies for developing with the Azure SDK for Python. It includes relative paths to local tools and core packages, as well as external dependencies like aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining Case-Insensitive Enums with Azure Core in Python\nDESCRIPTION: This snippet demonstrates how to create a custom enumeration class `MyCustomEnum` in Python that supports case-insensitive member access. It achieves this by inheriting from `str` and `Enum`, and specifying `azure.core.CaseInsensitiveEnumMeta` as the metaclass. This pattern is useful for defining enums where the case of the input string should not affect member retrieval.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom azure.core import CaseInsensitiveEnumMeta\n\nclass MyCustomEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    FOO = 'foo'\n    BAR = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Configuration Store via Azure CLI - Powershell\nDESCRIPTION: This snippet demonstrates how to create a new Azure App Configuration store using the Azure CLI within a Powershell session. It requires an active Azure subscription and login (az login), and the user must replace <config-store-name> and <resource-group-name> with actual resource names. Upon execution, a new configuration store will be provisioned in the East US region. The command outputs deployment progress, and errors if resource names are invalid or permissions are lacking.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2023-04-01-preview\nDESCRIPTION: Configuration settings for the v2023-04-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, and mfe along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2023-04-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2023-04-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2023-04-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2023-04-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2023-04-01-preview/mfe.json\noutput-folder: $(python-sdks-folder)/v2023_04_01_preview\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SchemaRegistry Performance Tests\nDESCRIPTION: Configuration of the required environment variables for connecting to a pre-configured SchemaRegistry instance for performance testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE=<the connection string of a Schema Registry.>\nSCHEMARREGISTRY_GROUP=<a schema group in a Schema Registry.>\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Entry for Azure SDK Python v1.0.0b1\nDESCRIPTION: Documents the initial beta release version 1.0.0b1 released on September 20, 2023.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedapplications/azure-mgmt-managedapplications/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2023-09-20)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Recommended Credential Package (v1.0.0b1+)\nDESCRIPTION: Specifies the `azure-identity` package as the replacement for older credential systems (`azure.common.credentials`, `msrestazure.azure_active_directory`) starting from version 1.0.0b1. This package should be used for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Corrected Operations Import Path (v0.2.0+)\nDESCRIPTION: Specifies the correct path (`azure.mgmt.apimanagement.operations`) for importing operation classes. Importing operation classes from internal submodules like `azure.mgmt.apimanagement.operations.my_class_operations` is no longer supported as of v0.2.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nazure.mgmt.apimanagement.operations\n```\n\n----------------------------------------\n\nTITLE: Authenticating the Azure Automation Client (Python)\nDESCRIPTION: Demonstrates initializing the `AutomationClient` using `DefaultAzureCredential` from the `azure.identity` library. Authentication relies on pre-configured environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) and the Azure Subscription ID retrieved from the `AZURE_SUBSCRIPTION_ID` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/automation/azure-mgmt-automation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.automation import AutomationClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AutomationClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Release 3.2 (2023-07-31) Configuration\nDESCRIPTION: YAML configuration specific to Release 3.2 (2023-07-31) of the Form Recognizer API. Defines the input file, namespace, and output folder locations for this API version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/83eb6fffa205037f1c9675ff0c098656db6fc6dd/specification/cognitiveservices/data-plane/FormRecognizer/stable/2023-07-31/FormRecognizer.json\nnamespace: azure.ai.formrecognizer.v2023_07_31\noutput-folder: $(python-sdks-folder)/formrecognizer/azure-ai-formrecognizer/azure/ai/formrecognizer/_generated/v2023_07_31\n```\n\n----------------------------------------\n\nTITLE: Applying Autorest Directive for EmailAttachment contentInBase64 (YAML)\nDESCRIPTION: This Autorest directive modifies the Swagger definition before code generation. It targets the `contentInBase64` property within the `EmailAttachment` definition, explicitly setting its `type` to `string` and removing any `format` attribute (like `byte`). This ensures the property is generated as a standard string type in the Python SDK, rather than potentially being interpreted as raw bytes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/swagger/SWAGGER.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions.EmailAttachment.properties.contentInBase64\n    transform: >\n      $[\"type\"] = \"string\";\n      if ($[\"format\"]) {\n        delete $[\"format\"];\n      }\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Computefleet Management Client in Python\nDESCRIPTION: Python code snippet demonstrating how to authenticate and create a ComputeFleetMgmtClient instance using DefaultAzureCredential. It requires proper configuration of Azure environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computefleet/azure-mgmt-computefleet/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.computefleet import ComputeFleetMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ComputeFleetMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to install the necessary Python packages for using Task Adherence Evaluator\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/task_adherence.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-projects azure-identity azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Installing Public Azure Image Analysis Python SDK via pip\nDESCRIPTION: Installs the latest publicly available version of the `azure-ai-vision-imageanalysis` Python package using pip. This command is typically run in a bash-like environment (like Git Bash or WSL on Windows) or a standard command prompt if pip is in the PATH.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-vision-imageanalysis\n```\n\n----------------------------------------\n\nTITLE: Setting Key Vault URI as Environment Variable for sfmitestsystem - XML\nDESCRIPTION: Injects the Azure Key Vault URI into the service's environment using ServiceManifest.xml, allowing the application to access the correct key vault at runtime. '<KEY_VAULT_URL>' must be replaced with the Vault URI of the deployed resource. This is required for the app to request secrets or tokens from the vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<EnvironmentVariable Name=\"AZURE_IDENTITY_TEST_VAULT_URL\" Value=\"<KEY_VAULT_URL>\"/>\n```\n\n----------------------------------------\n\nTITLE: Documenting Release Version in Markdown\nDESCRIPTION: This snippet shows how to document a release version in a markdown file. It includes the version number and release date.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.0.0b1 (2025-02-08)\n```\n\n----------------------------------------\n\nTITLE: Adding resource_id Support for User-Assigned Managed Identity (Python, Beta)\nDESCRIPTION: Feature added in 1.9.0b1 enabling the use of the `resource_id` argument to specify a user-assigned managed identity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nresource_id` support for user-assigned managed identity\n```\n\n----------------------------------------\n\nTITLE: Running pytest for Azure SDK Components\nDESCRIPTION: Commands for running tests using pytest, including options for testing all packages, a specific package, or a specific test within a package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\nLANGUAGE: shell\nCODE:\n```\npytest -s sdk/service/azure-mgmt-service\n```\n\nLANGUAGE: shell\nCODE:\n```\npytest -s sdk/service/azure-mgmt-service -k TestFeatureOne\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Web PubSub Service Python SDK\nDESCRIPTION: Installs the Azure Web PubSub service client library for Python using pip. This is a prerequisite step before running any of the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/samples/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-messaging-webpubsubservice\n```\n\n----------------------------------------\n\nTITLE: Basic Azure Form Recognizer SDK Configuration\nDESCRIPTION: Basic YAML configuration for the Azure Form Recognizer SDK, specifying license headers, credentials, namespaces, package names, and other fundamental settings for the SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlicense-header: MICROSOFT_MIT_NO_VERSION\nadd-credential: true\nnamespace: azure.ai.formrecognizer\npackage-name: azure-ai-formrecognizer\ncredential-scopes: https://cognitiveservices.azure.com/.default\nclear-output-folder: true\nno-namespace-folders: true\npython: true\nmultiapi: true\nversion-tolerant: false\npython3-only: true\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Azure WebPubSub SDK\nDESCRIPTION: A requirements file specifying the dependencies needed for developing or running the Azure WebPubSub SDK for Python. It includes local tool references, core Azure components, and utility packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\nazure-messaging-webpubsubservice==1.1.0b1\npsutil\naiohttp>=3.9.3\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Structured markdown changelog documenting three releases (0.3.0, 0.2.0, and 0.1.0) including Python version support changes and internal updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-monitoring/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.3.0 (Unreleased)\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 0.2.0 (2021-03-09)\n\n- Internal bugfixes (re-generated with latest generator)\n- Stop Python 3.5 support\n\n## 0.1.0 (2020-12-08)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Renaming 'outputAssetUri' to 'assetUri' for Conversion Output via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML modifying the generated Python code. It targets the 'outputAssetUri' property within the 'output' property of the 'conversion' definition in the Swagger document and renames its client-side representation to 'assetUri'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion.properties.output.properties.outputAssetUri'\n    transform: >\n        $[\"x-ms-client-name\"] = \"assetUri\";\n```\n\n----------------------------------------\n\nTITLE: Running MyPy Static Analysis for Python Package\nDESCRIPTION: Command to run MyPy static analysis tool for type checking a specific Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e mypy -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet lists project dependencies for a Python Azure SDK component. It includes an editable install (`-e`) for local development tools (`azure-sdk-tools`), relative paths for other local packages (`azure-core`, `azure-eventhub`), and a version-constrained dependency (`~=1.17.0`) for the external `azure-identity` library, ensuring compatibility with version 1.17.x.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../azure-eventhub\nazure-identity~=1.17.0\n```\n\n----------------------------------------\n\nTITLE: Referencing Azure SDK Tools Package for Development\nDESCRIPTION: Specifies the local path to the Azure SDK tools package as an editable dependency. This approach allows developers to use the latest development version of the tools directly from the repository instead of installing from PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-knowledge-qnamaker/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Retrieving secret versions in azure-keyvault\nDESCRIPTION: Retrieves secret versions and their values using get_secret_versions and get_secret methods in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault import SecretId\n\nsecret_items = client.get_secret_versions(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    secret_name=\"secret-name\"\n)\n\nfor secret_item in secret_items:\n    secret_id = SecretId(secret_item.id)\n    secret_version = secret_id.version\n\n    secret_bundle = client.get_secret(\n        vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n        secret_name=\"secret-name\",\n        secret_version=secret_version\n    )\n    secret_value = secret_bundle.value\n```\n\n----------------------------------------\n\nTITLE: Renaming Enum to ParticipantRole in SDK Output Using YAML Directive\nDESCRIPTION: Defines a YAML directive to rename the 'Role' definition to 'ParticipantRole' in the generated Python SDK, affecting client-side enum exposure. Assumes the presence of an 'x-ms-enum' key in the input Swagger, transforming its name property. Requires that the Swagger document contains a Role definition and enumerates valid participants roles.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions.Role\n  transform: >\n    $[\"x-ms-enum\"].name = \"ParticipantRole\";\n```\n\n----------------------------------------\n\nTITLE: Renaming CommunicationError to ChatError with YAML Directive\nDESCRIPTION: YAML directive that transforms the CommunicationError definition in the Swagger document to have a client-facing name of ChatError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/swagger/SWAGGER.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: '$.definitions.CommunicationError'\n  transform: >\n    $[\"x-ms-client-name\"] = \"ChatError\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Devspaces Management Client Library and Azure Identity\nDESCRIPTION: This snippet shows how to install the required packages using pip. It installs the azure-mgmt-devspaces package for Devspaces management and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/aks/azure-mgmt-devspaces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-devspaces\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs for Integration\nDESCRIPTION: Command to install the Azure Event Hubs library version 5.9.0 or higher, required for integrating Schema Registry with EventHub using EventData objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-eventhub>=5.9.0\n```\n\n----------------------------------------\n\nTITLE: Existing Service Principal Example for New-TestResources.ps1\nDESCRIPTION: An example demonstrating how to use an existing service principal for testing. This grants ownership rights to the specified TestApplicationId for the resource group and its resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount -Subscription 'REPLACE_WITH_SUBSCRIPTION_ID'\nNew-TestResources.ps1 `\n    -BaseName 'azsdk' `\n    -ServiceDirectory 'keyvault' `\n    -SubscriptionId 'REPLACE_WITH_SUBSCRIPTION_ID' `\n    -ResourceGroupName 'REPLACE_WITH_NAME_FOR_RESOURCE_GROUP' `\n    -Location 'eastus' `\n    -TestApplicationId 'REPLACE_WITH_TEST_APPLICATION_ID' `\n    -TestApplicationSecret 'REPLACE_WITH_TEST_APPLICATION_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure Core Version with Azure Key Vault Secrets\nDESCRIPTION: Example of how to install a specific version of azure-core along with azure-keyvault-secrets to revert to an older version combination.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core==1.0.0b1 azure-keyvault-secrets==4.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Package\nDESCRIPTION: Specifies a pip requirement to install the azure-sdk-tools package from a local relative path in editable mode. This allows for development and testing of the tools package alongside the main SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managementpartner/azure-mgmt-managementpartner/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories in Azure Container Registry\nDESCRIPTION: Command to list all repositories in an Azure Container Registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file_2.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz acr repository list -n MyRegistry -o table\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure SDK for Python Repository with Git in Shell\nDESCRIPTION: This shell snippet uses git to clone a specific branch (main) of the Azure SDK for Python repository at shallow depth. Required dependencies are git and network access. It downloads only the latest commit to minimize download size and prepares for building test images. Output is a local directory with test code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Azure/azure-sdk-for-python/ --branch main --single-branch --depth 1\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation of necessary Python packages for using Response Completeness Evaluator.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/response_completeness.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-projects azure-identity azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Using sdk_build CLI for Azure SDK Python Package Builds - Text\nDESCRIPTION: This snippet provides the full command-line help output for the `sdk_build` script, the primary entrypoint for building packages in the azure-sdk-for-python repository. Dependencies include having the azure-sdk-tools installed and available in the CLI. Key parameters include the package glob string, service directory, artifact output directory, and options for dev builds or additional artifact creation. Inputs are directories or patterns of packages to build, and output is the constructed Python distributions placed in a specified or default artifact directory. Users must invoke this command from within the repository or specify the `--repo` argument. Limitations include handling only packages recognized in the repository structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: sdk_build [-h] [-d DISTRIBUTION_DIRECTORY] [--service SERVICE] [--pkgfilter PACKAGE_FILTER_STRING] [--devbuild IS_DEV_BUILD]\n                 [--produce_apiview_artifact] [--repo REPO] [--build_id BUILD_ID]\n                 [glob_string]\n\nThis is the primary entrypoint for the \"build\" action. This command is used to build any package within the azure-sdk-for-python repository.\n\npositional arguments:\n  glob_string           A comma separated list of glob strings that will target the top level directories that contain packages. Examples: All == \"azure-*\",\n                        Single = \"azure-keyvault\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DISTRIBUTION_DIRECTORY, --distribution-directory DISTRIBUTION_DIRECTORY\n                        The path to the distribution directory. Should be passed $(Build.ArtifactStagingDirectory) from the devops yaml definition.If that\n                        is not provided, will default to env variable SDK_ARTIFACT_DIRECTORY -> <calculated_repo_root>/.artifacts.\n  --service SERVICE     Name of service directory (under sdk/) to build.Example: --service applicationinsights\n  --pkgfilter PACKAGE_FILTER_STRING\n                        An additional string used to filter the set of artifacts by a simple CONTAINS clause. This filters packages AFTER the set is built\n                        with compatibility and omission lists accounted.\n  --devbuild IS_DEV_BUILD\n                        Set build type to dev build so package requirements will be updated if required package is not available on PyPI\n  --produce_apiview_artifact\n                        Should an additional build artifact that contains the targeted package + its direct dependencies be produced?\n  --repo REPO           Where is the start directory that we are building against? If not provided, the current working directory will be used. Please\n                        ensure you are within the azure-sdk-for-python repository.\n  --build_id BUILD_ID   The current build id. It not provided, will default through environment variables in the following order: GITHUB_RUN_ID ->\n                        BUILD_BUILDID -> SDK_BUILD_ID -> default value.\n\n```\n\n----------------------------------------\n\nTITLE: Initializing and Testing Azure Search Management Client with Custom Endpoint in Python\nDESCRIPTION: This Python snippet demonstrates setting up and testing the Azure Search Management Client for a non-standard Azure endpoint (e.g., Dogfood). It defines a test class `TestMgmtSearch` using `devtools_testutils`. The `setup_method` initializes the `SearchManagementClient` with a custom `base_url`. The `test_search_services` method, using decorators for resource setup and test recording configured with the custom endpoint, creates an Azure Search service via `begin_create_or_update` and verifies its existence using `check_name_availability`. Dependencies include `azure.mgmt.search` and `devtools_testutils`. Key inputs are the resource group, location, and desired search service name and configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport azure.mgmt.search\nfrom devtools_testutils import AzureMgmtRecordedTestCase, ResourceGroupPreparer, recorded_by_proxy\n\n_CUSTOM_ENDPOINT = \"https://api-dogfood.resources.windows-int.net/\"\n\nclass TestMgmtSearch(AzureMgmtRecordedTestCase):\n\n    def setup_method(self, method):\n        self.client = self.create_mgmt_client(\n            azure.mgmt.search.SearchManagementClient,\n            base_url=_CUSTOM_ENDPOINT\n        )\n\n    @ResourceGroupPreparer(client_kwargs={'base_url':_CUSTOM_ENDPOINT})\n    @recorded_by_proxy\n    def test_search_services(self, resource_group, location):\n        account_name = self.get_resource_name('ptvstestsearch')\n\n        service = self.client.services.begin_create_or_update(\n            resource_group.name,\n            account_name,\n            {\n                'location': location,\n                'replica_count': 1,\n                'partition_count': 1,\n                'hosting_mode': 'Default',\n                'sku': {\n                    'name': 'standard'\n                }\n            }\n        ).result()\n\n        availability = self.client.services.check_name_availability(account_name)\n        assert not availability.is_name_available\n        assert availability.reason == \"AlreadyExists\"\n        assert service.name == account_name\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes a local development tool and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Importing DevTestLabs Models\nDESCRIPTION: Example of the correct way to import models after the restructuring of import paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.devtestlabs.models import MyClass\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Client Name\nDESCRIPTION: Additional directive to transform the 'orderby' parameter's client name to 'order_by' in the generated code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: '$.parameters[\"orderby\"]'\n  transform: >\n    $[\"x-ms-client-name\"] = \"order_by\";\n```\n\n----------------------------------------\n\nTITLE: Defining Properties of a Configuration Setting in Python\nDESCRIPTION: This Python code block enumerates all properties available on a ConfigurationSetting object. These can be used for instantiating or updating settings when interacting with the client API. The listing provides key, label, content type, value, tags, read-only status, ETag, and last-modified timestamp fields.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nkey : str\nlabel : str\ncontent_type : str\nvalue : str\nlast_modified : str\nread_only : bool\ntags : dict\netag : str\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure App Configuration Store Connection String via Azure CLI - Powershell\nDESCRIPTION: This PowerShell snippet shows how to use Azure CLI to list credentials for a specific App Configuration Store. 'az appconfig credential list' requires Azure CLI v2.0 or later, and users must be authenticated and have access to the subscription. Replace '<config-store-name>' with your actual App Configuration Store name. Output includes the connection string necessary for programmatic access.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\naz appconfig credential list --name <config-store-name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Tools for Azure SDK Python Project\nDESCRIPTION: This line installs development tools from a local directory, likely containing custom scripts or utilities for Azure SDK development. The -e flag indicates an editable install, allowing changes to the source to be immediately reflected.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-API Script Output for Azure SDK\nDESCRIPTION: Settings for the multi-API script defining output folder location and perform-load configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.python.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noutput-folder: $(python-sdks-folder)/servicetoreplace/azure-mgmt-servicetoreplace/azure/mgmt/servicetoreplace/\nperform-load: false\n```\n\n----------------------------------------\n\nTITLE: Chatting with Context using QueryDTO (Legacy QnA Maker SDK) in Python\nDESCRIPTION: Demonstrates performing a contextual query (chat) using the legacy `QnAMakerClient` by providing follow-up context. It involves setting the `context` property of the `QueryDTO` object, specifically the `previous_qna_id` field, to maintain conversation flow. The `kb_id` is also required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.cognitiveservices.knowledge.qnamaker.models import QueryDTO, QueryDTOContext\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(endpoint, credentials)\n\ngenerate_answer_payload = QueryDTO(\n    question=\"How long should my Surface battery last?\",\n    context=QueryDTOContext(previous_qna_id=1)\n)\n\nresponse = client.knowledgebase.generate_answer(\n    kb_id=\"<my-knowledge-base-id>\",\n    generate_answer_payload=generate_answer_payload,\n)\nbest_answers = [a for a in response.answers if a.score > 0.9]\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Deprecation Disclaimer to README.md\nDESCRIPTION: Examples of markdown snippets to add deprecation disclaimers to the README.md file, including variations for different scenarios such as with or without replacement packages and migration guides.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/deprecation_process.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**NOTE**: This package has been deprecated and will no longer be maintained after <EOLDate>. This package will only receive security fixes until <EOLDate>. To receive updates on new features and non-security bug fixes, upgrade to the replacement package, [azure-mynewpackage](https://pypi.org/project/azure-mynewpackage/). Refer to the migration guide (https://aka.ms/azsdk/python/migrate/my-new-package) for guidance on upgrading.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n**NOTE**: This package has been deprecated and will no longer be maintained after <EOLDate>. This package will only receive security fixes until <EOLDate>. To receive updates on new features and non-security bug fixes, upgrade to the replacement package, [azure-mynewpackage](https://pypi.org/project/azure-mynewpackage/).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n**NOTE**: This package has been deprecated and will no longer be maintained after <EOLDate>. This package will only receive security fixes until <EOLDate>.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n**NOTE**: This package has been deprecated and will no longer be maintained after <EOLDate>. This package will only receive security fixes until <EOLDate>. Refer to the samples in the [My New Service repo](https://github.com/microsoft/my-new-service/tree/main) instead.\n\nFor additional support, open a new issue in the [Issues](https://github.com/microsoft/my-new-service/issues) section of the My New Service repo.\n```\n\n----------------------------------------\n\nTITLE: Installing Local Development Dependencies for Azure SDK for Python\nDESCRIPTION: Lists local package dependencies required for Azure SDK for Python development. The file uses the '-e' flag which installs packages in development/editable mode, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/scvmm/azure-mgmt-scvmm/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Getting Type Definitions - Legacy vs New API\nDESCRIPTION: Comparison showing how to get type definitions using both the legacy Catalog API and new DataMap API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/MigrationGuide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# azure-purview-catalog\nresponse = client.types.get_all_type_definitions()\n\n# azure-purview-datamap\nresponse = client.type_definition.get()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Defendereasm Management SDK with pip\nDESCRIPTION: Commands to install the Azure Defendereasm Management SDK and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/defendereasm/azure-mgmt-defendereasm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-defendereasm\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Environment Variables for Storage and Table Resources - Bash\nDESCRIPTION: These bash examples show environment variable placeholders that must be set to give the test runners access to required Azure Storage and Table resources. Each variable corresponds to connection details or endpoints for Azure services. Actual secrets and endpoints must be filled in by the user before running tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/tests/perf_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_STORAGE_CONN_STR=<the connection string to the Storage account>\\nAZURE_STORAGE_ACCOUNT_NAME=<the Storage account name>\\nAZURE_STORAGE_ACCOUNT_KEY=<the Storage account key>\\n\\nAZURE_STORAGE_CONTAINER_NAME=<the container name>\\nAZURE_STORAGE_BLOBS_ENDPOINT=<The Storage Blobs endpoint in the format 'https://{storageAccountName}.blob.core.windows.net'>\\n\\nAZURE_STORAGE_TABLE_NAME=<The name to use for the Storage Table>\\nAZURE_STORAGE_TABLES_ENDPOINT=<The Storage Tables endpoint in the format 'https://{storageAccountName}.table.core.windows.net'>\n```\n\n----------------------------------------\n\nTITLE: Applying Python-Specific Autorest Customization Directives\nDESCRIPTION: This YAML block uses Autorest directives targeted specifically at Python code generation. It sets the default value for `StringIndexType` to `UnicodeCodePoint` and updates its description, aligning string offset interpretation with standard Python string handling. Commented-out sections suggest potential future changes related to `StringIndexType` for specific types or parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n# Always default to UnicodeCodePoint string indices.\n- from: swagger-document\n  where: $.definitions.StringIndexType\n  transform: |\n    $[\"description\"] = \"Specifies the method used to interpret string offsets. Set to \\\"UnicodeCodePoint\\\" for Python strings.\";\n    $[\"x-ms-client-default\"] = \"UnicodeCodePoint\";\n\n# Only Utf16CodeUnit is supported for these types right now. Once UnicodeCodePoint is supported we can default to that.\n# - from: swagger-document\n#   where: $.definitions.ConversationalAnalysisAuthoringStringIndexType\n#   transform: |\n#     $[\"description\"] = \"Specifies the method used to interpret string offsets. Set to \\\"UnicodeCodePoint\\\" for Python strings.\";\n#     $[\"x-ms-client-default\"] = \"UnicodeCodePoint\";\n\n# - from: swagger-document\n#   where: $.parameters.ConversationalAnalysisAuthoringStringIndexTypeQueryParameter\n#   transform: |\n#     $[\"description\"] = \"Specifies the method used to interpret string offsets. Set to \\\"UnicodeCodePoint\\\" for Python strings.\";\n#     $[\"x-ms-client-default\"] = \"UnicodeCodePoint\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Monitor Query Performance Tests\nDESCRIPTION: Commands to install the required dependencies for running the performance tests. This includes installing the dev requirements and the package itself in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-query> pip install -r dev_requirements.txt\n(env) ~/azure-monitor-query> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 for Azure SDK Generation - PowerShell\nDESCRIPTION: Installs the Autorest code generation tool globally using npm. This is required in order to generate code and client libraries from OpenAPI/Swagger definitions for Azure SDKs. The command must be run before any code generation steps and requires Node.js and npm to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install -g autorest\n\n```\n\n----------------------------------------\n\nTITLE: Method Signature Changes in Azure Authorization SDK (v0.40.0)\nDESCRIPTION: Version 0.40.0 included breaking changes to the signatures of some methods. The example given is `create_by_id`. Developers migrating to this version need to review the updated method signatures and adjust their calls accordingly, potentially involving changes in required parameters or parameter order.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# Example of a method with changed signature:\n# client.role_assignments.create_by_id(...)\n\n# Check documentation for the specific changes in parameters for v0.40.0\n```\n\n----------------------------------------\n\nTITLE: Suppressing Verbose uAMQP Logging\nDESCRIPTION: Configuration to suppress unnecessary logging from uAMQP by setting higher log levels for specific loggers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\n# The logging levels below may need to be changed based on the logging that you want to suppress.\nuamqp_logger = logging.getLogger('uamqp')\nuamqp_logger.setLevel(logging.ERROR)\n\n# or even further fine-grained control, suppressing the warnings in uamqp.connection module\nuamqp_connection_logger = logging.getLogger('uamqp.connection')\nuamqp_connection_logger.setLevel(logging.ERROR)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Opentelemetry Exporter\nDESCRIPTION: Command to install the Azure Monitor Opentelemetry Exporter package using pip. The --pre flag indicates that pre-release versions will be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/metrics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install azure-monitor-opentelemetry-exporter --pre\n```\n\n----------------------------------------\n\nTITLE: Making Properties Required in Azure Monitor Query Client\nDESCRIPTION: Directive to make 'name' and 'type' properties required in the column definition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.column\n  transform: >\n    $.required = [\"name\", \"type\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Key Vault Administration Tests\nDESCRIPTION: Sets up the necessary environment variables for accessing live test resources, including tenant ID, client ID, client secret, and the URL of the testing key vault.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TENANT_ID=<tenant ID of testing service principal>\nAZURE_CLIENT_ID=<client ID of testing service principal>\nAZURE_CLIENT_SECRET=<client secret of testing service principal>\nAZURE_MANAGEDHSM_URL=<URL of the testing key vault>\n```\n\n----------------------------------------\n\nTITLE: Running Source Distribution Installation and Tests\nDESCRIPTION: Command to run tests on a source distribution installation of a Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e sdist -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Instance with Managed Identity and Environment Variables in Shell\nDESCRIPTION: This script creates an Azure Container Instance group with the managed identity assigned and necessary environment variables, using an image from the specified registry. It dynamically injects Key Vault and registry credentials by querying with the Azure CLI. Required dependencies include pre-created ACR, managed identity, container image, and valid environment settings. The command runs the test workload as a managed container.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\naz container create -g $RESOURCE_GROUP -n $CONTAINER_NAME \\\n --assign-identity $MANAGED_IDENTITY_ID \\\n --restart-policy OnFailure \\\n --registry-username $(az acr credential show -n $ACR_NAME --query username -o tsv) \\\n --registry-password $(az acr credential show -n $ACR_NAME --query passwords[0].value -o tsv) \\\n --image $REPOSITORY/$IMAGE_NAME:$PYTHON_VERSION \\\n -e AZURE_IDENTITY_TEST_VAULT_URL=$(az keyvault show -g $RESOURCE_GROUP -n $KEY_VAULT_NAME --query properties.vaultUri -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Mover Management Client Library in Python\nDESCRIPTION: This snippet shows how to install the Azure Storage Mover Management Client Library and Azure Identity packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storagemover/azure-mgmt-storagemover/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-storagemover\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Allowed Tenants for DefaultAzureCredential in Python\nDESCRIPTION: This snippet demonstrates how to configure the `DefaultAzureCredential` in Python to allow token acquisition only from a specific list of tenants. This is necessary due to a breaking change in `azure-identity` 1.11.0. The `additionally_allowed_tenants` parameter is initialized with a list containing the IDs of the tenants from which tokens should be acquired.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/BREAKING_CHANGES.md#2025-04-23_snippet_0\n\nLANGUAGE: py\nCODE:\n```\ncredential = DefaultAzureCredential(additionally_allowed_tenants = [\"<tenant_id_1>\", \"<tenant_id_2>\"])\n```\n\n----------------------------------------\n\nTITLE: Documenting Azure SDK Release History in Markdown\nDESCRIPTION: Markdown formatted release history documenting version changes, feature additions, and breaking changes for the Azure SDK Python package. Covers versions from initial release 1.0.0b1 through 1.1.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-mgmt-purview/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (2022-11-07)\n\n### Features Added\n\n  - Model AccountUpdateParameters has a new parameter identity\n  - Model Identity has a new parameter user_assigned_identities\n\n## 1.0.0 (2021-08-13)\n\n**Features**\n\n  - Model Account has a new parameter managed_resource_group_name\n  - Model Account has a new parameter system_data\n  - Model TrackedResource has a new parameter system_data\n  - Model PrivateLinkResource has a new parameter properties\n  - Added operation AccountsOperations.add_root_collection_admin\n  - Added operation PrivateEndpointConnectionsOperations.begin_create_or_update\n\n**Breaking changes**\n\n  - Model PrivateLinkResource no longer has parameter required_zone_names\n  - Model PrivateLinkResource no longer has parameter group_id\n  - Model PrivateLinkResource no longer has parameter required_members\n  - Model AccountUpdateParameters has a new signature\n  - Removed operation PrivateEndpointConnectionsOperations.create_or_update\n\n## 1.0.0b1 (2021-02-01)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hubs Library\nDESCRIPTION: This snippet shows how to install the Azure Event Hubs library and run a sample script to send event data.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-eventhub library\n$ pip install azure-eventhub\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_event_hub.py\n```\n\n----------------------------------------\n\nTITLE: Applying EncryptionAlgorithm Enum Workaround via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive provides a workaround for a potential issue in the Modeler component. It targets the `EncryptionAlgorithm` parameter, removes any existing enum definition, and explicitly sets the allowed enum values to `None` and `AES256`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.EncryptionAlgorithm.enum;\n    $.EncryptionAlgorithm.enum = [\n      \"None\",\n      \"AES256\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Building Azure AI Projects Python Package\nDESCRIPTION: These commands install the wheel package and build a distribution wheel for the Azure AI Projects client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install wheel\npython setup.py bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Azure Digital Twins Core Package Versions\nDESCRIPTION: Package version listing showing the azure-digitaltwins-core package versions included in each quarterly conda release from June 2021 to March 2025. The package version progressed from 1.1.0 to 1.2.0 over this period.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-digitaltwins-core.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- azure-digitaltwins-core-1.2.0\n- azure-digitaltwins-core-1.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest for Azure Communication SIP Routing Python SDK Generation\nDESCRIPTION: This YAML configuration block specifies the core settings for `autorest` when generating the Python SDK for Azure Communication SIP Routing. It defines the source OpenAPI spec (`require`, `tag`), output parameters (`output-folder`, `namespace`), language (`python`), and various generation options (`license-header`, `models-mode`, `title`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/communication/data-plane/SipRouting/readme.md\ntag: package-2023-03\noutput-folder: ../azure/communication/phonenumbers/siprouting/_generated\nnamespace: azure.communication.phonenumbers.siprouting\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\npython: true\nv3: true\ntitle: SIP Routing Service\nmodel-namespace: false\nmodels-mode: msrest\n```\n\n----------------------------------------\n\nTITLE: Storage Stream Test Base Class - Python\nDESCRIPTION: Base class implementation for storage streaming performance tests, providing common functionality for blob operations and stream handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.perfstress_tests import PerfStressTest\n\nfrom azure.storage.blob import BlobServiceClient as SyncBlobServiceClient\nfrom azure.storage.blob.aio import BlobServiceClient as AsyncBlobServiceClient\n\nclass _StorageStreamTestBase(PerfStressTest):\n\n    def __init__(self, arguments):\n        super().__init__(arguments)\n\n        # Any common attributes\n        self.container_name = 'stream-perf-tests'\n\n        # Auth configuration\n        connection_string = self.get_from_env(\"AZURE_STORAGE_CONNECTION_STRING\")\n\n        # Create clients\n        self.service_client = SyncBlobServiceClient.from_connection_string(conn_str=connection_string)\n        self.async_service_client = AsyncBlobServiceClient.from_connection_string(conn_str=connection_string)\n\n    async def global_setup(self):\n        await super().global_setup()\n\n        # Any common setup used by all the streaming tests\n        await self.async_service_client.create_container(self.container_name)\n\n     async def global_cleanup(self):\n        # Any common cleanup used by all the streaming tests\n        await self.async_service_client.delete_container(self.container_name)\n        await super().global_cleanup()\n\n    async def close(self):\n        await self.async_service_client.close()\n        await super().close()\n\n    @staticmethod\n    def add_arguments(parser):\n        super(ListContainersTest, ListContainersTest).add_arguments(parser)\n\n        # Add any common arguments for the streaming test cases\n        parser.add_argument('--max-concurrency', nargs='?', type=int, help='Number of concurrent threads to upload/download the data. Defaults to 1.', default=1)\n        parser.add_argument('--size', nargs='?', type=int, help='Size in bytes for the amount of data to be streamed. Defaults to 1024 bytes', default=1024)\n```\n\n----------------------------------------\n\nTITLE: Specifying an Editable Pip Dependency\nDESCRIPTION: This configuration line instructs `pip` (Python's package installer) to install the package located at the relative path `../../../tools/azure-sdk-tools` in \"editable\" mode (`-e`). This is typically used during development within a requirements file so changes made in the source directory (`azure-sdk-tools`) are immediately reflected in the environment without needing reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicefabric/azure-mgmt-servicefabric/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Code Generation Settings for Azure Maps Search SDK (YAML)\nDESCRIPTION: Defines code generation configuration for Autorest, specifying the API tag, Swagger source, output directory, Python packaging settings, and other build options. Dependencies: requires Autorest, valid raw Swagger readme URL, and Python packaging tools. Key parameters include 'output-folder', 'namespace', 'package-name', and credential scope. Outputs a Python package for the Azure Maps Search client, following the specified structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ntag: package-2023-06\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/maps/data-plane/Search/readme.md\noutput-folder: ../azure/maps/search/_generated\nnamespace: azure.maps.search\npackage-name: azure-maps-search\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\ncredential-scopes: https://atlas.microsoft.com/.default\nclear-output-folder: true\npython: true\nno-async: false\nadd-credential: false\ntitle: MapsSearchClient\ndisable-async-iterators: true\npython-sdks-folder: $(python-sdks-folder)\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Installation in Python\nDESCRIPTION: Python interactive session commands to verify the package is properly installed and check its version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import azure.my_package\n>>> print(azure.my_package.__version__)\n0.0.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable and Standard Dependencies in Python Projects\nDESCRIPTION: This requirements file uses pip-compatible syntax to declare project dependencies for a Python environment. It lists both external packages (such as \\\"aiohttp\\\") and locally editable modules by specifying relative paths and the \\\"-e\\\" (editable) flag, allowing live updates to local code without reinstalling. No code execution occurs here; the file is meant to be referenced by pip or similar tools, and all listed paths must be valid and accessible for the correct setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools Package from Local Path using pip\nDESCRIPTION: This code snippet shows a pip editable install directive (-e flag) that references the Azure SDK tools package from a relative path. This is commonly used in development environments to install the tools needed for Azure SDK development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-formrecognizer/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Removing regional_authority Argument in Python Credentials\nDESCRIPTION: Breaking change in version 1.7.0 where the `regional_authority` argument was removed from `CertificateCredential` and `ClientSecretCredential`. Configuration for regional authorities must be done through other means if still supported.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nregional_authority\n```\n\n----------------------------------------\n\nTITLE: Fetching Azure Container Instance Logs using Azure CLI in Shell\nDESCRIPTION: This snippet retrieves logs from a running Azure Container Instance using the Azure CLI and outputs them for inspection. The command requires valid resource group and container name values. It is primarily used to verify test results or troubleshoot failures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\naz container logs -g $RESOURCE_GROUP -n $CONTAINER_NAME\n```\n\n----------------------------------------\n\nTITLE: Example of Using Remove-TestResources.ps1 with Current Account in PowerShell\nDESCRIPTION: This example demonstrates using Remove-TestResources.ps1 to delete resources created for Key Vault testing using the currently logged-in account and forcing deletion without confirmation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 keyvault -Force\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for All or Specific Packages\nDESCRIPTION: Commands for setting up the development environment either for all packages or for a specific Azure management package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython ./scripts/dev_setup.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport PACKAGE=azure-mgmt-servicename\npython ./scripts/dev_setup.py -p $PACKAGE\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure SDK Version in Python\nDESCRIPTION: Shows how to access the version of an Azure SDK package using the __version__ attribute instead of importing a version module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.sql import __version__ as version\nprint(version)\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3\nDESCRIPTION: Command to install Autorest v3 globally using npm\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Renaming RollUpMethod to DataFeedAutoRollupMethod\nDESCRIPTION: Directive to rename RollUpMethod enum to DataFeedAutoRollupMethod for more specific and descriptive type naming in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataFeedDetail\"][\"properties\"][\"rollUpMethod\"][\"x-ms-enum\"][\"name\"] = \"DataFeedAutoRollupMethod\";\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest CLI Tool\nDESCRIPTION: Command to install Autorest v3 globally using npm package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Azure Key Vault URL Format Example\nDESCRIPTION: This snippet shows the URL format for accessing Azure Key Vault vaults in the public global cloud. National cloud support is not available in this release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nhttps://{vault-name}.vault.azure.net\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History with Markdown - Markdown\nDESCRIPTION: This snippet presents a markdown-formatted release history for an SDK, organizing versions by release date and enumerating new features per version. Dependencies include the markdown syntax and conventions for changelogs. Inputs are manually listed features, dates, and version numbers, while the output is a well-formatted, human-readable change log document. It assumes readers are familiar with markdown and does not enforce structure or validation: accuracy relies on maintainers.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/informaticadatamanagement/azure-mgmt-informaticadatamanagement/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-07-15)\n\n### Features Added\n\n  - Added model InformaticaOrganizationResourceListResult\n  - Added model InformaticaServerlessRuntimeResourceListResult\n  - Added model OperationListResult\n\n## 1.0.0b1 (2024-05-29)\n\n- Initial version\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Proxy for Live Runs (cmd)\nDESCRIPTION: Configures the Azure SDK test proxy environment variables using the `set` command in Windows Command Prompt (`cmd`) to run tests directly against the live Azure service without using or creating recordings. `AZURE_TEST_RUN_LIVE=true` enables live runs, and `AZURE_SKIP_LIVE_RECORDING=true` prevents interaction with test recordings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset AZURE_TEST_RUN_LIVE=true\nset AZURE_SKIP_LIVE_RECORDING=true\n```\n\n----------------------------------------\n\nTITLE: Running pytest with Debug Output\nDESCRIPTION: Command to run pytest with debug output flags for more detailed logging during test execution. The -s flag outputs print statements and more logging, while --log-cli-level=DEBUG exposes debug-level logs normally hidden by default.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\npytest .\\tests\\test_client.py -s --log-cli-level=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Client Libraries in Python\nDESCRIPTION: Instructions for installing Azure client libraries using the azure bundle package. This snippet demonstrates how to reference the PyPI package for Azure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-nspkg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n`azure <https://pypi.python.org/pypi/azure>`__\n```\n\n----------------------------------------\n\nTITLE: Declaring Autorest Directive for Making Properties Optional in YAML\nDESCRIPTION: This YAML snippet declares a reusable Autorest directive named 'make-property-optional'. It uses JavaScript transformations to modify the 'required' array in Swagger or OpenAPI documents. For a given model, it filters out the specified property name from the 'required' list, effectively making that property optional in the generated client SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndeclare-directive:\n    make-property-optional: >-\n        [{\n        from: 'swagger-document',\n        transform: `$.required = $.required.filter(item => item !== ${JSON.stringify($)})`\n        },\n        {\n        from: 'openapi-document',\n        transform: `$.required = $.required.filter(item => item !== ${JSON.stringify($)})`\n        }]\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK in Python\nDESCRIPTION: A requirements file listing the dependencies needed for the Azure SDK for Python. It includes references to local packages (azure-sdk-tools and azure-core) and the external aiohttp library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK in Markdown\nDESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Python, detailing new features and changes in versions 1.0.0b2 and 1.0.0b1. It includes information about new operations added to EnergyServicesOperations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/oep/azure-mgmt-oep/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2022-11-15)\n\n### Features Added\n\n  - Added operation EnergyServicesOperations.begin_add_partition\n  - Added operation EnergyServicesOperations.begin_remove_partition\n  - Added operation EnergyServicesOperations.list_partitions\n\n## 1.0.0b1 (2022-02-15)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Renaming Session 'maxLeaseTimeMinutes' to 'leaseTimeMinutes' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'maxLeaseTimeMinutes' property within the 'session_properties' definition in the Swagger document. It renames the client-side representation of this property to 'leaseTimeMinutes' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.session_properties.properties.maxLeaseTimeMinutes'\n    transform: >\n        $[\"x-ms-client-name\"] = \"leaseTimeMinutes\";\n```\n\n----------------------------------------\n\nTITLE: Disabling Pylint Checker with Inline Comment\nDESCRIPTION: Demonstrates how to disable a specific Pylint checker for a single line of code using an inline comment. This is useful for ignoring specific warnings in certain scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/pylint_checking.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# pylint:disable=protected-access\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies\nDESCRIPTION: This configuration snippet lists required Python packages for an Azure SDK project, typically used in a requirements file (e.g., `requirements.txt`). It includes relative paths to local packages, some marked for editable installation (`-e`), such as `azure-identity` and `azure-sdk-tools`. It also specifies minimum versions for external libraries: `aiohttp` (>=3.0), `parameterized` (>=0.7.3), and `python-dateutil` (>=2.8.0). This format is commonly processed by `pip install -r <filename>` to set up the necessary environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../core/azure-core\n-e ../../identity/azure-identity\n-e ../../../tools/azure-sdk-tools\n../../nspkg/azure-keyvault-nspkg\naiohttp>=3.0\nparameterized>=0.7.3\npython-dateutil>=2.8.0\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK Python Development\nDESCRIPTION: A requirements file that specifies dependencies needed for Azure SDK for Python development, including internal tools, resource management, identity authentication, and HTTP client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/marketplaceordering/azure-mgmt-marketplaceordering/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Python Authoring Client Customization Directives - YAML\nDESCRIPTION: Defines directives that alter and streamline the generated authoring client by renaming operation IDs, removing operation groups, and cleaning up status/job operations. Helps simplify the generated Python API surface and remove legacy or unnecessary endpoints. Enhances SDK usability and maintainability.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects\"][\"get\"]\n    transform: >\n        $[\"operationId\"] = \"listProjects\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}\"][\"get\"]\n    transform: >\n        $[\"operationId\"] = \"getProjectDetails\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}\"][\"patch\"]\n    transform: >\n        $[\"operationId\"] = \"createProject\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}\"][\"delete\"]\n    transform: >\n        $[\"operationId\"] = \"deleteProject\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/:export\"][\"post\"]\n    transform: >\n        $[\"operationId\"] = \"export\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/:import\"][\"post\"]\n    transform: >\n        $[\"operationId\"] = \"importAssets\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/deployments/{deploymentName}\"][\"put\"]\n    transform: >\n        $[\"operationId\"] = \"deployProject\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/deployments\"][\"get\"]\n    transform: >\n        $[\"operationId\"] = \"listDeployments\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/synonyms\"][\"get\"]\n    transform: >\n        $[\"operationId\"] = \"listSynonyms\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/synonyms\"][\"put\"]\n    transform: >\n        $[\"operationId\"] = \"updateSynonyms\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/sources\"][\"get\"]\n    transform: >\n        $[\"operationId\"] = \"listSources\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/sources\"][\"patch\"]\n    transform: >\n        $[\"operationId\"] = \"updateSources\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/qnas\"][\"get\"]\n    transform: >\n        $[\"operationId\"] = \"listQnas\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/qnas\"][\"patch\"]\n    transform: >\n        $[\"operationId\"] = \"updateQnas\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/feedback\"][\"post\"]\n    transform: >\n        $[\"operationId\"] = \"addFeedback\";\n\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest with PowerShell\nDESCRIPTION: Command to install AutoRest globally using npm, which is a prerequisite for generating the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/swagger/SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Python Dependencies\nDESCRIPTION: Lists required dependencies for developing with Azure SDK for Python. Includes local package references using -e flag for editable installs and a version-constrained external dependency for aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Removing AzureApplicationCredential Class in Python (Stable)\nDESCRIPTION: Breaking change in stable version 1.7.0 where the `AzureApplicationCredential` class was removed. Note: This credential type was later reintroduced in beta version 1.7.0b2.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nAzureApplicationCredential\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path with Pip\nDESCRIPTION: Installs Azure SDK development tools from a relative path using pip's editable install mode. The -e flag enables development/editable mode installation from the specified path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-guestconfig/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies using pip requirements format\nDESCRIPTION: This snippet defines project dependencies using the pip requirements file format. It includes editable installs (`-e`) for local packages (azure-sdk-tools, azure-core, coretestserver), direct package names (js, httpx), a version-conditional dependency (pyodide for Python >= 3.8), and a version-constrained dependency (urllib3 >= 2.0.0). These dependencies are essential for setting up the Python environment for the associated Azure SDK project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-experimental/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../azure-core\n-e ../azure-core/tests/testserver_tests/coretestserver\njs\npyodide==0.19.0a1; python_version >= '3.8'\nhttpx==0.23.3\nurllib3>=2.0.0\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Variable Type Annotations in Python\nDESCRIPTION: Shows when to use variable type annotations, focusing on cases where the type adds value beyond what Python can infer or when the type checker requires it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# No:\ntable_name: str = \"mytable\"  # I can tell it's a string, not necessary\ncreate_table(table_name)\n\n# Yes:\ntable_map: dict[str, Table] = {}  # clarifies what the dictionary expects\ntable_map[table_name] = create_table(table_name)\n```\n\n----------------------------------------\n\nTITLE: Running Python Samples from Command Line\nDESCRIPTION: Example command for running a sample Python script from the terminal after setting up required environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_geocode.py\n```\n\n----------------------------------------\n\nTITLE: Local Azure SDK Tools Path Configuration\nDESCRIPTION: Specifies a relative path to the local Azure SDK tools package using pip's editable install mode (-e flag). This allows local development and testing of the SDK tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Initializing Intent Resolution Evaluator\nDESCRIPTION: Sets up the Azure OpenAI model configuration and initializes the Intent Resolution Evaluator with required credentials and endpoints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/intent_resolution.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.evaluation import AzureOpenAIModelConfiguration\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.evaluation import IntentResolutionEvaluator\nfrom pprint import pprint\n\nmodel_config = AzureOpenAIModelConfiguration(\n    azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n    api_key=os.environ[\"AZURE_OPENAI_API_KEY\"],\n    api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n)\n\nintent_resolution_evaluator = IntentResolutionEvaluator(model_config)\n```\n\n----------------------------------------\n\nTITLE: Release Notes Format in Markdown\nDESCRIPTION: Structured version history entries documenting changes including features added, breaking changes, and other modifications across multiple SDK versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maintenance/azure-mgmt-maintenance/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.2.0b2 (2024-05-20)\n\n### Features Added\n\n  - Added operation group ScheduledEventOperations\n\n## 2.2.0b1 (2023-10-22)\n\n### Features Added\n\n  - Added operation ApplyUpdatesOperations.create_or_update_or_cancel\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Name in ServiceManifest.xml for sfmitestsystem - XML\nDESCRIPTION: Specifies the Docker image to be used by the 'sfmitestsystem' Service Fabric application in the ServiceManifest.xml file. Replace '{ACR_NAME}' with the Azure Container Registry name. This parameter tells Service Fabric which image to deploy for the service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<ImageName>{ACR_NAME}.azurecr.io/sfmitestsystem</ImageName>\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Dependency in Python Requirements File\nDESCRIPTION: References a local development dependency from the Azure SDK tools directory using an editable install (-e flag). The relative path points to tools that are likely used for SDK development, testing, or build processes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/regionmove/azure-mgmt-regionmove/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Key Credential in Python\nDESCRIPTION: This code snippet shows how to authenticate with an API key using the AzureKeyCredential class from azure.core.credentials in the Azure Personalizer Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\n\ncredential = AzureKeyCredential(\"<api_key>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Library for Receiving Messages\nDESCRIPTION: This snippet shows how to install the Azure Service Bus library and run a sample script to receive messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-servicebus library\n$ pip install azure-servicebus\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_servicebus_receive.py\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Dependency\nDESCRIPTION: Pip requirements file entry that installs the azure-sdk-tools package in editable mode from a relative local path. The -e flag allows for development mode installation where changes to the source are immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maintenance/azure-mgmt-maintenance/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Setting EventGrid Environment Variables\nDESCRIPTION: Environment variables required for connecting to a pre-configured EventGrid topic, including access key and hostname.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEG_ACCESS_KEY=<access key of your eventgrid account>\nEG_TOPIC_HOSTNAME=<hostname of the eventgrid topic>\n```\n\n----------------------------------------\n\nTITLE: Utilizing Type Annotations Support in Azure Python SDK\nDESCRIPTION: Introduces SDK support for type annotations using Python's standard `typing` module. This enables static analysis and improved code quality checks with tools like mypy.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ntyping\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Mongocluster Management SDK packages with pip\nDESCRIPTION: Commands to install the required packages for working with Azure Mongocluster Management. This installs both the core SDK package and the Azure Identity package needed for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mongocluster/azure-mgmt-mongocluster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-mongocluster\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK Project\nDESCRIPTION: This code snippet lists the required Python packages and their versions for the Azure SDK for Python project. It includes PyGithub for GitHub integration, requests for HTTP operations, azure-devops for Azure DevOps functionality, msrest for REST client operations, packaging for version handling, urllib3 for URL operations, and PyYAML for YAML processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/release_helper/requirement.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub==1.55\nrequests==2.28.0\nazure-devops==6.0.0b4\nmsrest>=0.6.21\npackaging==23.1\nurllib3==1.26.15\nPyYAML\n```\n\n----------------------------------------\n\nTITLE: Renaming Operation Parameters\nDESCRIPTION: Directive to rename parameters for specific operations including getDetectionConfiguration, listIncidentRootCauses, addFeedback, and alert-related operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-operation: getDetectionConfiguration\n    transform: >\n        $.parameters[0][\"x-ms-client-name\"] = \"detectionConfigurationId\";\n  - where-operation: listIncidentRootCauses\n    transform: >\n        $.parameters[0][\"x-ms-client-name\"] = \"detectionConfigurationId\";\n  - where-operation: addFeedback\n    transform: >\n        $.parameters[0][\"x-ms-client-name\"] = \"feedback\";\n  - where-operation: listAnomaliesForAlert\n    transform: >\n        $.parameters[0][\"x-ms-client-name\"] = \"alertConfigurationId\";\n  - where-operation: listIncidentsForAlert\n    transform: >\n        $.parameters[0][\"x-ms-client-name\"] = \"alertConfigurationId\";\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Azure Container Registry in Shell\nDESCRIPTION: This snippet uploads a previously built Docker image to the specified Azure Container Registry. It assumes successful ACR login and that the image tag matches the build. Required dependencies include Docker and valid ACR credentials. On success, the image becomes available for deployment in Azure resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker push $REPOSITORY/$IMAGE_NAME:$PYTHON_VERSION\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Tables Connection String\nDESCRIPTION: Environment variable configuration required for connecting to live Azure Tables resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TABLES_CONNECTION_STRING=<live tables account connection string>\n```\n\n----------------------------------------\n\nTITLE: SDK Generation Output and Linting Postprocessing - PowerShell\nDESCRIPTION: Provides an example command for running Autorest with post-processing and specific output folder options, targeting Python SDK output. It runs Autorest's post-processing to fix linting and style issues. Placeholders like <path-to-root-of-package> should be replaced with real paths. Requires autorest and related plugins.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nautorest --postprocess --output-folder=<path-to-root-of-package> --perform-load=false --python\n\n```\n\n----------------------------------------\n\nTITLE: Running Specific Performance Test for Azure Key Vault Administration\nDESCRIPTION: Shows an example of running a specific performance test (GetRoleDefinitionTest) using the perfstress command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-administration/tests> perfstress GetRoleDefinitionTest\n```\n\n----------------------------------------\n\nTITLE: Annotated Sports Data with IOB Tags\nDESCRIPTION: Sports results data with named entity recognition tags using Inside-Outside-Beginning (IOB) format. Each token is paired with its entity tag, where B- indicates beginning of entity, I- indicates inside of entity, and O indicates outside any entity.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/pipeline_jobs/serverless_compute/job_tier/automl_in_pipeline/training-mltable-folder/train.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMichael B-PER\\nChang I-PER\\n( O\\nU.S. B-LOC\\n) O\\nbeat O\\nSergi B-PER\\nBruguera I-PER\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for Model Dataplane\nDESCRIPTION: Configuration settings for the model-dataplane tag, specifying the input swagger file and output folder for Python SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'model-dataplane'\ninput-file:\n  - Microsoft.MachineLearningServices/stable/model-dataplane/swagger.json\noutput-folder: $(python-sdks-folder)/model_dataplane\n```\n\n----------------------------------------\n\nTITLE: Running Azure Test Resource Management Scripts with Communication Services Parameters\nDESCRIPTION: PowerShell command format for running the New-TestResources.ps1 or Remove-TestResources.ps1 scripts with specific test resource directories for Communication Services SDK testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n-TestResourceDirectories\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode\nDESCRIPTION: Configures pip to install the Azure SDK tools package from a relative path in editable mode (-e flag). This allows developers to modify the tools code and have those changes immediately available without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthbot/azure-mgmt-healthbot/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Logging Thread Run Events Using JSON Structures - JSON\nDESCRIPTION: Logs the life cycle and status changes of a thread run and its steps in a structured JSON format, commonly produced by Python-based AI agents or automation tools. These logs rely on specific key-value pairs such as 'id', 'object', 'created_at', and nested objects for detailed tracking. Inputs are system- or agent-generated events, and the outputs are machine-readable event records. Requires no external dependencies beyond standard JSON parsing, and it is constrained in use to event-driven frameworks that emit such logs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/main_stream_response.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"run_01\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1735945041,\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"status\": \"in_progress\",\n  \"started_at\": 1735945041,\n  \"expires_at\": 1735945641,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": null,\n  \"required_action\": null,\n  \"last_error\": null,\n  \"model\": \"gpt-4-1106-preview\",\n  \"instructions\": \"You are a helpful assistant\",\n  \"tools\": [\n    {\"type\":\"function\",\"function\": {\"name\": \"get_user_info\", \"description\": \"Retrieves user information based on user ID.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"user_id\": {\"type\": \"integer\", \"description\": \"ID of the user.\"}}, \"required\": [\"user_id\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"convert_temperature\", \"description\": \"Converts temperature from Celsius to Fahrenheit.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"celsius\": {\"type\": \"number\", \"description\": \"Temperature in Celsius.\"}}, \"required\": [\"celsius\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"longest_word_in_sentences\", \"description\": \"Finds the longest word in each sentence.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"sentences\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}, \"description\": \"A list of sentences.\"}}, \"required\": [\"sentences\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"toggle_flag\", \"description\": \"Toggles a boolean flag.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"flag\": {\"type\": \"boolean\", \"description\": \"The flag to toggle.\"}}, \"required\": [\"flag\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"send_email\", \"description\": \"Sends an email with the specified subject and body to the recipient.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"recipient\": {\"type\": \"string\", \"description\": \"Email address of the recipient.\"}, \"subject\": {\"type\": \"string\", \"description\": \"Subject of the email.\"}, \"body\": {\"type\": \"string\", \"description\": \"Body content of the email.\"}}, \"required\": [\"recipient\", \"subject\", \"body\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"process_records\", \"description\": \"Process a list of records, where each record is a dictionary with string keys and integer values.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"records\": {\"type\": \"array\", \"items\": {\"type\": \"object\"}, \"description\": \"A list containing dictionaries that map strings to integers.\"}}, \"required\": [\"records\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"merge_dicts\", \"description\": \"Merges two dictionaries.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"dict1\": {\"type\": \"object\", \"description\": \"First dictionary.\"}, \"dict2\": {\"type\": \"object\", \"description\": \"Second dictionary.\"}}, \"required\": [\"dict1\", \"dict2\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"calculate_sum\", \"description\": \"Calculates the sum of two integers.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"a\": {\"type\": \"integer\", \"description\": \"First integer.\"}, \"b\": {\"type\": \"integer\", \"description\": \"Second integer.\"}}, \"required\": [\"a\", \"b\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"fetch_weather\", \"description\": \"Fetches the weather information for the specified location.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location to fetch weather for.\"}}, \"required\": [\"location\"]}, \"strict\": false}},\n    {\"type\":\"function\",\"function\": {\"name\": \"fetch_current_datetime\", \"description\": \"Get the current time as a JSON string, optionally formatted.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"format\": {\"type\": [\"string\", \"null\"], \"description\": \"The format in which to return the current time. Defaults to None, which uses a standard format.\"}}, \"required\": []}, \"strict\": false}}\n  ],\n  \"tool_resources\": {\"code_interpreter\": {\"file_ids\": []}},\n  \"metadata\": {},\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_completion_tokens\": null,\n  \"max_prompt_tokens\": null,\n  \"truncation_strategy\": {\"type\": \"auto\", \"last_messages\": null},\n  \"incomplete_details\": null,\n  \"usage\": null,\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1735945043,\n  \"run_id\": \"run_01\",\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"type\": \"tool_calls\",\n  \"status\": \"in_progress\",\n  \"cancelled_at\": null,\n  \"completed_at\": null,\n  \"expires_at\": 1735945641,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": []},\n  \"usage\": null\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1735945043,\n  \"run_id\": \"run_01\",\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"type\": \"tool_calls\",\n  \"status\": \"in_progress\",\n  \"cancelled_at\": null,\n  \"completed_at\": null,\n  \"expires_at\": 1735945641,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": []},\n  \"usage\": null\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 0, \"id\": \"call_01\", \"type\": \"function\", \"function\": {\"name\": \"fetch_current_datetime\", \"arguments\": \"\", \"output\": null}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 0, \"type\": \"function\", \"function\": {\"arguments\": \"{}\"}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 1, \"id\": \"call_02\", \"type\": \"function\", \"function\": {\"name\": \"fetch_weather\", \"arguments\": \"\", \"output\": null}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 1, \"type\": \"function\", \"function\": {\"arguments\": \"{\\\"location\"}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 1, \"type\": \"function\", \"function\": {\"arguments\": \"\"}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 1, \"type\": \"function\", \"function\": {\"arguments\": \": \\\"N\"}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 1, \"type\": \"function\", \"function\": {\"arguments\": \"ew Y\"}}]} }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_01\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\"step_details\": {\"type\": \"tool_calls\", \"tool_calls\": [{\"index\": 1, \"type\": \"function\", \"function\": {\"arguments\": \"ork\\\"}\"}}]} }\n}\n```\n\n----------------------------------------\n\nTITLE: Required File Path Example\nDESCRIPTION: Example file path showing required __init__.py location\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/docs/DevTips.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nazure/media\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Version history document showing initial release, bug fixes related to endorsements type changes, and unreleased version placeholder sections\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b3 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0b2 (2025-04-08)\n\n### Bugs Fixed\n- Updated type of endorsements from str to list[str] in SuggestResultValue and SuggestResultValue models.\n\n## 1.0.0b1 (2024-03-05)\n\n- Initial version for Purview DataMap\n```\n\n----------------------------------------\n\nTITLE: Executing a Stress Test Script for ServiceBus Queues - CMD\nDESCRIPTION: This command runs a specified ServiceBus stress test file (such as 'stress_test_queues.py') using Python from the 'stress/scripts' directory. The active virtual environment should contain all required dependencies beforehand. No additional arguments are passed; ensure the Python file exists and is correctly named. The test output will appear in the console.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/stress/scripts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-servicebus/stress/scripts> python stress_test_queues.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Azure SDK Dependencies for Python\nDESCRIPTION: Specifies required local development dependencies for the Azure SDK Python project using pip's editable install mode. References local paths to azure-sdk-tools, azure-mgmt-resource, and azure-identity packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/advisor/azure-mgmt-advisor/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure ArizeAIObservabilityEval SDK and Identity Library - Bash\nDESCRIPTION: Installs the Azure ArizeAIObservabilityEval SDK and its required authentication library, azure-identity, using pip. Both packages are necessary for managing and authenticating requests to Azure services through Python scripts. Run these commands in your terminal where your Python environment is set up.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/arizeaiobservabilityeval/azure-mgmt-arizeaiobservabilityeval/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-arizeaiobservabilityeval\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a local directory as a dependency, likely containing development tools for the Azure SDK for Python. The -e flag indicates an editable install, allowing changes in the source directory to be immediately reflected in the installed package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-mgmt-datalake-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Evaluation Client Library using pip\nDESCRIPTION: This bash command installs the Azure AI Evaluation Client Library for Python using pip. It's part of the setup instructions for running the samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Removing x-ms-pageable Extension via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive targets GET operations within `x-ms-paths` in the input Swagger document. It removes the `x-ms-pageable` extension if present, as it was causing issues with the Autorest Python generator at the time.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]..get\n  transform: >\n    if ($[\"x-ms-pageable\"]) { delete $[\"x-ms-pageable\"]; }\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Render Package\nDESCRIPTION: Command to install the Azure Maps Render SDK using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-render\n```\n\n----------------------------------------\n\nTITLE: Installing Local Python Package in Editable Mode (`pip -e`)\nDESCRIPTION: This line, typically found in a requirements file (e.g., requirements.txt) or used directly with pip, installs the Python package located at the relative path '../../../tools/azure-sdk-tools' in editable mode. The '-e' flag ensures that changes made to the source code in that directory are immediately reflected in the installed package without needing reinstallation. This is common during development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storageimportexport/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining the Base AzureError Exception in Python\nDESCRIPTION: This snippet defines the `AzureError` class, the base exception for all errors within Azure SDK client libraries. It captures an optional inner exception, traceback information, a message, and an optional continuation token. It relies on the `sys` module to get exception info.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AzureError(Exception):\n    def __init__(self, message, *args, **kwargs):\n        self.inner_exception = kwargs.get(\"error\")\n        self.exc_type, self.exc_value, self.exc_traceback = sys.exc_info()\n        self.exc_type = self.exc_type.__name__ if self.exc_type else type(self.inner_exception)\n        self.exc_msg = \"{}, {}: {}\".format(message, self.exc_type, self.exc_value)  # type: ignore\n        self.message = str(message)\n        self.continuation_token = kwargs.get(\"continuation_token\")\n        super(AzureError, self).__init__(self.message, *args)\n```\n\n----------------------------------------\n\nTITLE: Registering a Model in Azure ML Workspace using Python\nDESCRIPTION: This code shows how to register a model file (e.g., a `.pkl` file) directly into the Azure Machine Learning service workspace using the `Model.register()` method from the `azureml.core` library. This makes the model available for deployment. It requires an active workspace object (`ws`), the file path to the model, and a unique name for registration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/tests/unittests/data/unsupported_file_type.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azureml.core import Model\n\nmodel_path = '.\\/outputs\\/my_model.pkl'\nmodel = Model.register(workspace=ws, model_path=model_path, model_name='my_model')\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Editable Installs in Requirements File - Python\nDESCRIPTION: This snippet lists required packages and modules for setting up the test environment in an Azure Python SDK project. Dependencies are referenced using relative paths and editable install options (\"-e\"), enabling local development and linkage to adjacent modules. The file is used by Python virtual environment tools (like pip or tox) to resolve and install the specified dependencies, which include test servers, identity libraries, core management packages, and build tools. Inputs are file paths and module specifiers; outputs are the installation of these packages into a local Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/dev_requirement_samples/relative_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntests/testserver_tests/coretestserver\n-e tests/testserver_tests/coretestserver\n-e ../../identity/azure-identity\n../../identity/azure-identity\n\n../azure-mgmt-core\n-e ../azure-mgmt-core\n../../../tools/azure-sdk-tools[build]\n-e ../../../tools/azure-sdk-tools[build]\n-e .\n.\n```\n\n----------------------------------------\n\nTITLE: Listing Azure ML Package Versions for Python (Conda)\nDESCRIPTION: A Markdown-formatted list of Azure ML Package versions for Python, specifically for Conda environments. Each entry includes the release date and the corresponding azure-ai-ml package version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-ai-ml.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Azure ML Package client library for Python (conda)\n\n## 2025.03.01\n\n### Packages included\n\n- azure-ai-ml-1.25.0\n\n## 2024.12.01\n\n### Packages included\n\n- azure-ai-ml-1.22.2\n\n## 2024.09.01\n\n### Packages included\n\n- azure-ai-ml-1.19.0\n\n## 2024.06.01\n\n### Packages included\n\n- azure-ai-ml-1.16.1\n\n## 2024.03.01\n\n### Packages included\n\n- azure-ai-ml-1.13.0\n\n## 2023.12.01\n\n### Packages included\n\n- azure-ai-ml-1.12.0\n\n## 2023.09.01\n\n### Packages included\n\n- azure-ai-ml-1.9.0\n\n## 2023.06.01\n\n### Packages included\n\n- azure-ai-ml-1.7.2\n\n## 2023.03.01\n\n### Packages included\n\n- azure-ai-ml-1.4.0\n\n## 2022.12.01\n\n### Packages included\n\n- azure-ai-ml-1.1.2\n```\n\n----------------------------------------\n\nTITLE: New Test Structure Using AzureRecordedTestCase\nDESCRIPTION: Example showing the new structure of test classes using the test proxy by inheriting from AzureRecordedTestCase and applying the recorded_by_proxy decorator to test methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils import AzureRecordedTestCase, recorded_by_proxy\n\nclass TestExample(AzureRecordedTestCase):\n\n    @recorded_by_proxy\n    def test_example(self):\n        ...\n\n    @ExamplePreparer()\n    @recorded_by_proxy\n    def test_example_with_preparer(self, **kwargs):\n        example_variable = kwargs.pop(\"example_variable\")\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Pylint Manually for Azure SDK Python\nDESCRIPTION: Shows how to install Pylint and custom checkers, set the pylintrc path, and run Pylint manually for the Azure SDK Python project. This approach allows for more control over the Pylint execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/pylint_checking.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pylint\npip install azure-pylint-guidelines-checker --index-url=\"https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\"\n\n.../azure-sdk-for-python>SET PYLINTRC=\"./pylintrc\"\n.../azure-sdk-for-python>pylint ./sdk/eventgrid/azure-eventgrid\n```\n\n----------------------------------------\n\nTITLE: Remove Models - YAML Directives\nDESCRIPTION: Removes multiple model definitions including various DataFeed types, parameter patches, and query options\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - remove-model: HookInfoPatch\n  - remove-model: EmailHookInfoPatch\n  - remove-model: WebhookHookInfoPatch\n  - remove-model: AzureApplicationInsightsDataFeed\n  - remove-model: AzureApplicationInsightsDataFeedPatch\n  - remove-model: AzureBlobDataFeed\n  - remove-model: AzureBlobDataFeedPatch\n  - remove-model: AzureCosmosDBDataFeed\n  - remove-model: AzureCosmosDBDataFeedPatch\n  - remove-model: AzureDataExplorerDataFeed\n  - remove-model: AzureDataExplorerDataFeedPatch\n  - remove-model: AzureTableDataFeed\n  - remove-model: AzureTableDataFeedPatch\n  - remove-model: AzureEventHubsDataFeed\n  - remove-model: AzureEventHubsDataFeedPatch\n  - remove-model: InfluxDBDataFeed\n  - remove-model: InfluxDBDataFeedPatch\n  - remove-model: MySqlDataFeed\n  - remove-model: MySqlDataFeedPatch\n  - remove-model: PostgreSqlDataFeed\n  - remove-model: PostgreSqlDataFeedPatch\n  - remove-model: SQLServerDataFeed\n  - remove-model: SQLServerDataFeedPatch\n  - remove-model: AzureDataLakeStorageGen2DataFeed\n  - remove-model: AzureDataLakeStorageGen2DataFeedPatch\n  - remove-model: AzureLogAnalyticsDataFeed\n  - remove-model: AzureLogAnalyticsDataFeedPatch\n  - remove-model: MongoDBDataFeed\n  - remove-model: MongoDBDataFeedPatch\n  - remove-model: AzureApplicationInsightsParameterPatch\n  - remove-model: AzureBlobParameterPatch\n  - remove-model: AzureCosmosDBParameterPatch\n  - remove-model: AzureTableParameterPatch\n  - remove-model: AzureEventHubsParameterPatch\n  - remove-model: InfluxDBParameterPatch\n  - remove-model: SQLSourceParameterPatch\n  - remove-model: AzureDataLakeStorageGen2ParameterPatch\n  - remove-model: AzureLogAnalyticsParameterPatch\n  - remove-model: MongoDBParameterPatch\n  - remove-model: SuppressConditionPatch\n  - remove-model: SmartDetectionConditionPatch\n  - remove-model: HardThresholdConditionPatch\n  - remove-model: ChangeThresholdConditionPatch\n  - remove-model: AnomalyDetectionConfigurationPatch\n  - remove-model: WholeMetricConfigurationPatch\n  - remove-model: AlertingResultQuery\n  - remove-model: MetricDataQueryOptions\n  - remove-model: MetricDimensionQueryOptions\n  - remove-model: MetricSeriesQueryOptions\n  - remove-model: ServicePrincipalCredentialPatch\n  - remove-model: ServicePrincipalInKVCredentialPatch\n  - remove-model: ServicePrincipalInKVParamPatch\n  - remove-model: ServicePrincipalParamPatch\n  - remove-model: WebhookHookInfoPatch\n  - remove-model: WebhookHookParameterPatch\n  - remove-model: AnomalyAlertingConfigurationPatch\n  - remove-model: DataSourceCredentialPatch\n  - remove-model: AzureSQLConnectionStringCredentialPatch\n  - remove-model: AzureSQLConnectionStringParamPatch\n  - remove-model: DataFeedDetailPatch\n  - remove-model: DataLakeGen2SharedKeyCredentialPatch\n  - remove-model: DataLakeGen2SharedKeyParamPatch\n  - remove-model: EmailHookParameterPatch\n  - remove-model: UsageStats\n  - remove-model: AnomalyDimensionQuery\n  - remove-model: DetectionAnomalyResultQuery\n  - remove-model: DetectionIncidentResultQuery\n  - remove-model: DetectionSeriesQuery\n  - remove-model: EnrichmentStatusQueryOption\n  - remove-model: ErrorCode\n  - remove-model: MetricFeedbackFilter\n  - remove-model: IngestionProgressResetOptions\n  - remove-model: IngestionStatusQueryOptions\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Dependencies - requirements/plaintext\nDESCRIPTION: This code snippet defines dependencies for an Azure SDK for Python project, including local editable references to tools and core libraries, as well as external packages like aiohttp for asynchronous HTTP support. It ensures all necessary modules are installed for development and execution. No direct inputs or outputs—used as a requirements file with pip, typically named requirements.txt or similar.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\n-e ../azure-storage-blob\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -Force in PowerShell\nDESCRIPTION: Defines the optional 'Force' switch parameter. When present, it bypasses any confirmation prompts and proceeds directly with resource creation. It's not required, is named, defaults to $false, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Monitor Data Collection Python Client\nDESCRIPTION: YAML configuration for AutoRest to generate the Azure Monitor Data Collection Python Client. Specifies package details, input files, output folders, and various generation options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: LogsIngestionClient\ndescription: Azure Monitor Data Collection Python Client\ngenerated-metadata: false\npackage-name: azure-monitor-ingestion\nlicense-header: MICROSOFT_MIT_NO_VERSION\nno-namespace-folders: true\noutput-folder: ../azure/monitor/ingestion\nsource-code-folder-path: ./azure/monitor/ingestion\nadd-credential: true\ncredential-scopes: https://monitor.azure.com//.default\ninput-file:\n    - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/monitor/data-plane/ingestion/stable/2023-01-01/DataCollectionRules.json\npython: true\nversion-tolerant: true\npython3-only: true\nblack: true\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Keys and Azure Identity libraries\nDESCRIPTION: This command installs the necessary Python libraries for working with Azure Key Vault Keys and authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install azure-keyvault-keys azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running AutoRest for Azure Phone Numbers Python SDK Generation\nDESCRIPTION: This PowerShell snippet shows the commands to navigate to the directory containing the Swagger definition and then execute the AutoRest tool using that definition (`PHONE_NUMBER_SWAGGER.md`) to generate the Python SDK code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/PHONE_NUMBER_SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest ./PHONE_NUMBER_SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Type Checking Error Ignore Examples\nDESCRIPTION: Examples showing different ways to ignore type checking errors in code with appropriate comments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nignore_me: int = 5  # type: ignore  https://www.github.com/Azure/azure-sdk-for-python/issues/my-issue\nignore_me: int = 5  # type: ignore[misc]\nignore_me: int = 5  # pyright: ignore[reportPrivateUsage]\n```\n\n----------------------------------------\n\nTITLE: Removing allow_multitenant_authentication Parameter in Python\nDESCRIPTION: Breaking change in version 1.7.0 where the `allow_multitenant_authentication` argument was removed from credentials. Multi-tenant authentication became the default behavior, controllable via the `AZURE_IDENTITY_DISABLE_MULTITENANTAUTH` environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nallow_multitenant_authentication\n```\n\n----------------------------------------\n\nTITLE: Version Calculation Examples\nDESCRIPTION: Examples showing version number patterns for preview and stable releases. Preview versions contain 'b' (e.g., 1.0.0b1), and version increments depend on whether changes are breaking, feature additions, or bugfixes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/package_version/package_version_rule.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Preview to Preview: x.x.xbx+1\n2. Stable to Preview:\n   * Breaking change: x+1.x.xb1\n   * New feature: x.x+1.xb1\n   * Bugfix: x.x.x+1b1\n3. Stable to Stable:\n   * Breaking change: x+1.x.x\n   * New feature: x.x+1.x\n   * Bugfix: x.x.x+1\n4. First Stable: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency on Local Azure Identity Package in Python Requirements\nDESCRIPTION: Specifies a dependency on the `azure-identity` package located at the relative path `../../identity/azure-identity`. This points to a local version of the library, likely for development or testing purposes against a specific local build or version of the identity component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sphere/azure-mgmt-sphere/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Release History Entry for Version 1.0.0b2\nDESCRIPTION: Release from September 29, 2021 documenting feature additions and breaking changes including convenience operations and REST layer removal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b2 (2021-09-29)\n\n**Features**\n\n  - Add convenience operations to client\n\n**Breaking changes**\n\n  - Remove rest layer and request builders(detailed description is in `README.md`)\n  - The HttpRequest parameter to send_request has changed from `http_request` to `request`\n  - Ordering of endpoint and credential params have changed\n```\n\n----------------------------------------\n\nTITLE: Modifying Date Formats in Swagger Document for Python Compatibility\nDESCRIPTION: YAML directives to change date formats to strings for better precision handling in Python, affecting various properties and headers in the swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.AccessPolicy.properties\n  transform: >\n    $.Start.format = \"str\";\n    $.Expiry.format = \"str\";\n- from: swagger-document\n  where: $(\"x-ms-paths\")..responses..headers[\"x-ms-file-last-write-time\"]\n  transform: >\n    $.format = \"str\";\n- from: swagger-document\n  where: $(\"x-ms-paths\")..responses..headers[\"x-ms-file-change-time\"]\n  transform: >\n    $.format = \"str\";\n- from: swagger-document\n  where: $(\"x-ms-paths\")..responses..headers[\"x-ms-file-creation-time\"]\n  transform: >\n    $.format = \"str\";\n- from: swagger-document\n  where: $.parameters.FileChangeTime\n  transform: >\n    $.format = \"str\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Tools via pip\nDESCRIPTION: Requirements file entry that installs Azure SDK development tools package from a relative local path using pip's editable mode (-e flag). The tools are located three directories up in the tools/azure-sdk-tools folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-agrifood-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Service Bus Message Types in Python\nDESCRIPTION: Introduced new properties `content_type`, `correlation_id`, `label`, `message_id`, `reply_to`, `reply_to_session_id`, and `to` to the `Message`, `PeekMessage`, and `ReceivedMessage` classes for enhanced message metadata handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nMessage.content_type, Message.correlation_id, Message.label, Message.message_id, Message.reply_to, Message.reply_to_session_id, Message.to\nPeekMessage.content_type, PeekMessage.correlation_id, PeekMessage.label, PeekMessage.message_id, PeekMessage.reply_to, PeekMessage.reply_to_session_id, PeekMessage.to\nReceivedMessage.content_type, ReceivedMessage.correlation_id, ReceivedMessage.label, ReceivedMessage.message_id, ReceivedMessage.reply_to, ReceivedMessage.reply_to_session_id, ReceivedMessage.to\n```\n\n----------------------------------------\n\nTITLE: Applying General Autorest Customization Directives (Part 1)\nDESCRIPTION: This YAML block uses Autorest directives to apply general customizations. It adds links to the official REST API documentation into the descriptions of generated operations based on their operation ID and API version. It also modifies the `AnalyzeConversationResultsKind` enum and related definitions to set specific `x-ms-discriminator-value` properties, likely to ensure correct polymorphic deserialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: analyzeconversations-authoring.json\n  where: $.paths.*.*\n  transform: |\n    var operationId = $.operationId.replace(/_/g, \"/\").replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n    var apiVersion = $doc.info.version + \"/\";\n    $.description = $.description + \"\\n\\nSee https://learn.microsoft.com/rest/api/language/\" + apiVersion + operationId + \" for more information.\";\n\n- where-operation: AnalyzeConversation_SubmitJob\n  transform: |\n    var apiVersion = $doc.info.version + \"/\";\n    $.description = $.description + \"\\n\\nSee https://learn.microsoft.com/rest/api/language/\" + apiVersion + \"analyze-conversation/submit-job for more information.\";\n- where-operation: ConversationAnalysis_AnalyzeConversation\n  transform: |\n    var apiVersion = $doc.info.version + \"/\";\n    $.description = $.description + \"\\n\\nSee https://learn.microsoft.com/rest/api/language/\" + apiVersion + \"conversation-analysis-runtime/analyze-conversation for more information.\";\n\n# Work around https://github.com/Azure/azure-sdk-for-net/issues/29141\n- from: swagger-document\n  where: $.definitions.AnalyzeConversationResultsKind\n  transform: >\n    $[\"enum\"] = [\n      \"conversationalPIIResults\",\n      \"conversationalSummarizationResults\",\n      \"conversationalSentimentResults\"\n    ];\n- from: swagger-document\n  where: $.definitions.AnalyzeConversationConversationPIIResult\n  transform: >\n    $[\"x-ms-discriminator-value\"] = \"conversationalPIIResults\";\n- from: swagger-document\n  where: $.definitions.AnalyzeConversationSummarizationResult\n  transform: >\n    $[\"x-ms-discriminator-value\"] = \"conversationalSummarizationResults\";\n- from: swagger-document\n  where: $.definitions.AnalyzeConversationSentimentResult\n  transform: >\n    $[\"x-ms-discriminator-value\"] = \"conversationalSentimentResults\";\n```\n\n----------------------------------------\n\nTITLE: Running AutoRest Generation for Azure Service Bus SDK (PowerShell)\nDESCRIPTION: This PowerShell script navigates to the specified working directory, resets any existing AutoRest configuration or cache, and then initiates the AutoRest code generation process based on the configuration defined in `swagger/README.md`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ps\nCODE:\n```\ncd C:\\Work\\ServiceBus\\\nautorest --reset\nautorest swagger/README.md\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Lists required dependencies for Azure SDK Python development, including local package references using -e flag for editable installs and version-specific requirements for aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.8'\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Azure SDK for Python project. It includes libraries for HTTP requests (requests, urllib3), XML parsing (lxml), testing (pytest, pytest-cov), and GitHub integration (PyGithub), among others.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/release_sdk_status/requirement.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncertifi==2021.5.30\nchardet==4.0.0\nidna==2.10\nlxml==4.6.5\nrequests==2.25.1\nurllib3==1.26.6\npytest==6.2.5\npytest-cov==3.0.0\nPyGithub==1.55\npackaging==23.1\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dev Build Version - Python PIP\nDESCRIPTION: Command to install a specific development build version of an Azure SDK package, demonstrated using azure-appconfiguration package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-appconfiguration==1.0.0b6.dev20191205001 --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest Globally via npm (PowerShell)\nDESCRIPTION: Installs the Autorest code generation utility globally using npm. Requires Node.js and npm to be installed on the system beforehand. Use this step to prepare your environment for API client code generation. Expects network access for package installation. Outputs no value but updates your global npm packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Dependencies in Python\nDESCRIPTION: Installs the azure-sdk-tools and azure-mgmt-resource packages from their local directories in development mode using pip's -e flag. This allows developers to work with these packages without having to reinstall them after making changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-documentdb/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: List of required package dependencies for Azure SDK development, including local tool references and core packages installed in editable mode (-e flag), plus the aiohttp async HTTP client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Override for DocumentModelAdministrationClientLROPoller (Build)\nDESCRIPTION: YAML directive to override the default LRO poller with a custom DocumentModelAdministrationClientLROPoller for document model building operations. Provides both sync and async implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    -   from: swagger-document\n        where: '$.paths[\"/documentModels:build\"].post'\n        transform: >\n            $[\"x-python-custom-poller-sync\"] = \"...._polling.DocumentModelAdministrationClientLROPoller\";\n            $[\"x-python-custom-poller-async\"] = \".....aio._async_polling.AsyncDocumentModelAdministrationClientLROPoller\";\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Government using ADAL\nDESCRIPTION: This snippet shows how to use ADAL to connect to Azure Government. It configures the authentication and management endpoints specific to Azure Government and creates a ResourceManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/multicloud.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport adal\nfrom msrestazure.azure_active_directory import AdalAuthentication\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Service Principal\ntenant = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\nclient_id = 'ABCDEFGH-1234-1234-1234-ABCDEFGHIJKL'\npassword = 'password\n\n# Government\nauthentication_endpoint = 'https://login.microsoftonline.us/'\nazure_endpoint = 'https://management.usgovcloudapi.net/'\n    \ncontext = adal.AuthenticationContext(authentication_endpoint+tenant)\ncredentials = AdalAuthentication(\n    context.acquire_token_with_client_credentials,\n    azure_endpoint,\n    client_id,\n    password\n)\nsubscription_id = '33333333-3333-3333-3333-333333333333'\n\nresource_client = ResourceManagementClient(\n    credentials,\n    subscription_id,\n    base_url=azure_endpoint\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Python Integration Tests with Autorest\nDESCRIPTION: Autorest command to generate Python integration tests using the Azure REST API specifications. It specifies the output folder and the readme file to use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generating-integration-test.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nautorest --cli --use-extension=\"{'@autorest/cli':'latest'}\" --python-integration-test --output-folder=/_/azure-sdk-for-python /_/azure-rest-api-specs/specification/attestation/resource-manager/readme.md\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path using pip\nDESCRIPTION: Specifies a pip editable install (-e flag) for Azure SDK Tools package from a relative path. This allows installing the package in development mode where changes to the source code are immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-language-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Running Black Code Formatter Locally\nDESCRIPTION: Command to run Black code formatter for a specific Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e black -c ../../../eng/tox/tox.ini --root . -- .\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Documents the initial 1.0.0 release of the package from July 2, 2020. Written in markdown format with standard changelog structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-synapse-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2020-07-02)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Setting Session ID on Messages\nDESCRIPTION: Shows the new approach for setting session information directly on messages rather than at the sender level, allowing for heterogeneous session batches.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nmessage = ServiceBusMessage(\"content\")\nmessage.session_id = \"session1\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Jinja2 Package Dependency\nDESCRIPTION: Defines a dependency on the Jinja2 templating engine version 3.1.2. This package is required as a project dependency and must be installed via pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/quickstart_tooling_dpg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njinja2==3.1.2\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Between Package Versions\nDESCRIPTION: Series of commands to generate a changelog by comparing the differences between package versions, useful for documenting changes in new releases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools.code_report --last-pypi $PACKAGE --output=$HOME/old.json\npython -m packaging_tools.code_report $PACKAGE --output=$HOME/new.json\npython -m packaging_tools.change_log $HOME/old.json $HOME/new.json\n```\n\n----------------------------------------\n\nTITLE: Azure Pipeline Template for Test Resource Deployment\nDESCRIPTION: This YAML snippet shows how to include templates for deploying and removing test resources in an Azure pipeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- template: /eng/common/TestResources/deploy-test-resources.yml\n  parameters:\n    ServiceDirectory: '${{ parameters.ServiceDirectory }}'\n\n# Run tests\n\n- template: /eng/common/TestResources/remove-test-resources.yml\n```\n\n----------------------------------------\n\nTITLE: Authenticating Authoring Client with AzureKeyCredential (New QnA SDK) in Python\nDESCRIPTION: Shows how to authenticate the `AuthoringClient` from the modern `azure-ai-language-questionanswering.authoring` library using `AzureKeyCredential`. This client is used for managing Question Answering projects (knowledge bases). Requires the Azure Cognitive Services endpoint URL and the corresponding API key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pooling with Azure SDK in Python\nDESCRIPTION: This snippet demonstrates how to configure connection pooling parameters for Azure SDK clients. It shows how to adjust settings like maximum connections and connection keep-alive to optimize network performance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.blob import BlobServiceClient\nfrom azure.core.pipeline.transport import RequestsTransport\n\n# Create a custom transport with specific connection parameters\ntransport = RequestsTransport(\n    connection_pool_size=8,        # Number of connections to keep in the pool\n    connection_keep_alive=True,   # Whether to reuse connections for multiple requests\n    connection_timeout=300        # Timeout for establishing a new connection\n)\n\n# Use the custom transport when creating the client\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=foo;AccountKey=foo;EndpointSuffix=core.windows.net\"\nblob_service = BlobServiceClient.from_connection_string(\n    connection_string, \n    transport=transport\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Dependencies in Editable Mode\nDESCRIPTION: This snippet demonstrates how to install local Azure SDK packages in development (editable) mode using pip's -e flag. It references the tools package and identity package from relative paths for local development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devhub/azure-mgmt-devhub/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Running Azure Monitor Query Performance Tests\nDESCRIPTION: Commands to navigate to the tests directory and run the performance stress tests using the 'perfstress' command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-query> cd tests\n(env) ~/azure-monitor-query/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Pinecone Vector DB Dependencies\nDESCRIPTION: Commands to install the required Azure Pinecone Vector DB management package and Azure identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/pineconevectordb/azure-mgmt-pineconevectordb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-pineconevectordb\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Azure SDK Python 1.0.0b1\nDESCRIPTION: Release notes documenting the initial version 1.0.0b1 release dated April 23, 2025.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portalservices/azure-mgmt-portalservicescopilot/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2025-04-23)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP 403 Permission Denied Error in ACR Python SDK\nDESCRIPTION: This JSON snippet exemplifies the error response received when the authenticated user or service principal lacks the necessary permissions to perform the requested action on the Azure Container Registry. Verifying assigned roles and permissions is required to resolve this.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"code\": \"DENIED\",\n      \"message\": \"retrieving permissions failed\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Identity SDK for Authentication\nDESCRIPTION: Command to install the Azure Communication Identity SDK which is used for generating user access tokens.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-identity\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for Dataset Dataplane\nDESCRIPTION: Configuration settings for the dataset-dataplane tag, specifying the input swagger file and output folder for Python SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'dataset-dataplane'\ninput-file:\n  - Microsoft.MachineLearningServices/stable/dataset-dataplane/swagger.json\noutput-folder: $(python-sdks-folder)/dataset_dataplane\n```\n\n----------------------------------------\n\nTITLE: Renaming 'conversion_output_settings' to 'asset_conversion_output_settings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'conversion_output_settings' definition in the Swagger document. It renames the client-side representation of this definition to 'asset_conversion_output_settings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion_output_settings'\n    transform: >\n        $[\"x-ms-client-name\"] = \"asset_conversion_output_settings\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Principal ID for User-Assigned Managed Identity\nDESCRIPTION: Command to show the principal ID of the user-assigned managed identity named AdminUser.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\naz identity show -g $RESOURCE_GROUP -n AdminUser\n```\n\n----------------------------------------\n\nTITLE: Running perfstress Command for Azure Key Vault Certificate Tests\nDESCRIPTION: Demonstrates how to use the perfstress command-line tool to list available performance tests for the Azure Key Vault Certificates package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-certificates> cd tests/perfstress_tests/\n(env) ~/azure-keyvault-certificates/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Settings for ACR Python SDK Generation\nDESCRIPTION: Specifies the basic AutoRest configuration for generating the Azure Container Registry Python SDK. It defines the title, input OpenAPI specification URL, output folder, disables namespace folders, targets Python, enables clearing the output folder, and adds credential handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Container Registry\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/c8d9a26a2857828e095903efa72512cf3a76c15d/specification/containerregistry/data-plane/Azure.ContainerRegistry/stable/2021-07-01/containerregistry.json\noutput-folder: \"../azure/containerregistry/_generated\"\nno-namespace-folders: true\npython: true\nclear-output-folder: true\nadd-credentials: true\n```\n\n----------------------------------------\n\nTITLE: C# SDK Configuration\nDESCRIPTION: C# specific configuration settings for SDK generation. Includes namespace, output folder and ARM settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncsharp:\n  azure-arm: true\n  license-header: MICROSOFT_MIT_NO_VERSION\n  namespace: Microsoft.Azure.Management.MachineLearningServices\n  output-folder: $(csharp-sdks-folder)/src/Generated\n  clear-output-folder: true\n```\n\n----------------------------------------\n\nTITLE: Renaming DataSourceCredentialType to DatasourceCredentialType\nDESCRIPTION: Directive to rename DataSourceCredentialType enum to DatasourceCredentialType for consistent naming conventions in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataSourceCredential\"][\"properties\"][\"dataSourceCredentialType\"][\"x-ms-enum\"][\"name\"] = \"DatasourceCredentialType\";\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Generation\nDESCRIPTION: Commands to navigate to the swagger folder and execute Autorest to generate the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-catalog/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Invoking sdk_build for Core Service Packages with Custom Output - Bash\nDESCRIPTION: This bash snippet shows building all packages under the 'core' service by using a glob and the `--service` flag. The `-d` option specifies a custom target directory for artifacts. Dependencies include the CLI, the azure-sdk-tools installed, and correct repository context. Inputs are the glob string and service name; outputs are package builds in the given directory. Users must ensure proper paths to avoid build path issues.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# build everything under sdk/core, dump into target directory\nsdk_build azure* --service=core -d \"<artifact_folder>\"\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local development tools, Azure management resources, and the aiohttp library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgeorder/azure-mgmt-edgeorder/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Base Configuration Settings\nDESCRIPTION: Core Autorest configuration settings including package name, version and license details for Azure Purview SDK\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlicense-header: MICROSOFT_MIT_NO_VERSION\npackage-name: azure-purview-administration\nno-namespace-folders: true\npackage-version: 1.0.0b1\nversion-tolerant: true\n```\n\n----------------------------------------\n\nTITLE: Returning None from Python Class Constructors\nDESCRIPTION: Shows how to properly annotate a constructor's return type as None, ensuring constructor methods are properly type-checked.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# No:\nclass KeyCredential:\n\n    def __init__(self):\n        ...  # I do not get type checked\n\n# Yes:\nclass KeyCredential:\n\n    def __init__(self) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure SDK Promptflow\nDESCRIPTION: A list of required Python package dependencies for Azure SDK Promptflow implementation. The dependencies include promptflow[azure] for Azure integration, promptflow-tools for workflow tools, python-dotenv for environment variable management, langchain for AI chaining, and jinja2 for templating.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/flows/basic/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npromptflow[azure]\npromptflow-tools\npython-dotenv\nlangchain\njinja2\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This markdown document outlines the release history for the Azure SDK for Python, including version numbers, dates, features added, breaking changes, and other relevant updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgeorder/azure-mgmt-edgeorder/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0 (2024-10-30)\n\n### Breaking Changes\n\n  - This package now only targets the latest Api-Version available on Azure and removes APIs of other Api-Version. After this change, the package can have much smaller size. If your application requires a specific and non-latest Api-Version, it's recommended to pin this package to the previous released version; If your application always only use latest Api-Version, please ignore this change.\n\n## 2.0.0b1 (2023-02-13)\n\n### Features Added\n\n  - Added operation group AddressesOperations\n  - Added operation group Operations\n  - Added operation group OrderItemsOperations\n  - Added operation group OrdersOperations\n  - Added operation group ProductsAndConfigurationsOperations\n  - Model BasicInformation has a new parameter fulfilled_by\n  - Model CommonProperties has a new parameter fulfilled_by\n  - Model Configuration has a new parameter child_configuration_types\n  - Model Configuration has a new parameter fulfilled_by\n  - Model Configuration has a new parameter grouped_child_configurations\n  - Model ConfigurationProperties has a new parameter child_configuration_types\n  - Model ConfigurationProperties has a new parameter fulfilled_by\n  - Model ConfigurationProperties has a new parameter grouped_child_configurations\n  - Model ConfigurationsRequest has a new parameter configuration_filter\n  - Model OrderItemDetails has a new parameter order_item_mode\n  - Model OrderResource has a new parameter order_mode\n  - Model Product has a new parameter fulfilled_by\n  - Model ProductDetails has a new parameter child_configuration_device_details\n  - Model ProductDetails has a new parameter identification_type\n  - Model ProductDetails has a new parameter opt_in_additional_configurations\n  - Model ProductDetails has a new parameter parent_device_details\n  - Model ProductFamiliesMetadataDetails has a new parameter fulfilled_by\n  - Model ProductFamily has a new parameter fulfilled_by\n  - Model ProductFamilyProperties has a new parameter fulfilled_by\n  - Model ProductLine has a new parameter fulfilled_by\n  - Model ProductLineProperties has a new parameter fulfilled_by\n  - Model ProductProperties has a new parameter fulfilled_by\n\n### Breaking Changes\n\n  - Model ConfigurationsRequest no longer has parameter configuration_filters\n  - Model OrderItemDetails no longer has parameter management_rp_details\n  - Model ProductDetails no longer has parameter count\n  - Model ProductDetails no longer has parameter device_details\n\n## 1.0.0 (2021-12-23)\n\n**Features**\n\n  - Model OrderItemDetails has a new parameter management_rp_details_list\n  - Model ReturnOrderItemDetails has a new parameter shipping_box_required\n  - Model ReturnOrderItemDetails has a new parameter service_tag\n  - Model AddressResource has a new parameter address_validation_status\n  - Model DeviceDetails has a new parameter management_resource_tenant_id\n  - Model ProductFamily has a new parameter resource_provider_details\n  - Model ProductFamilyProperties has a new parameter resource_provider_details\n  - Model ProductFamiliesMetadataDetails has a new parameter resource_provider_details\n  - Model ProductDetails has a new parameter product_double_encryption_status\n  - Model AddressProperties has a new parameter address_validation_status\n\n**Breaking changes**\n\n  - Operation EdgeOrderManagementClientOperationsMixin.list_order_items_at_subscription_level has a new signature\n\n## 1.0.0b1 (2021-07-27)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Removing 'date-time' Format from expiresOn Property - YAML\nDESCRIPTION: An AutoRest transformation directive to remove the 'format': 'date-time' field from the 'expiresOn' property under 'CommunicationIdentityAccessToken' in the Swagger definitions. This directive is required to prevent a breaking change in the generated client's API by preserving an expected property type. The directive must be included prior to code generation and is essential when newer AutoRest versions alter property serialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/swagger/SWAGGER.md#2025-04-23_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      delete $[\"CommunicationIdentityAccessToken\"][\"properties\"][\"expiresOn\"][\"format\"];\n```\n\n----------------------------------------\n\nTITLE: Using Forward References in Type Annotations\nDESCRIPTION: Shows how to use string-based forward references when a type annotation needs to reference a class that hasn't been fully defined yet.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Triangle:\n\n    @classmethod\n    def from_shape(cls) -> \"Triangle\":  # type checkers understand this as the actual type\n        ...\n```\n\n----------------------------------------\n\nTITLE: Authentication Code Change Example - Azure Python SDK 6.0.0b1\nDESCRIPTION: Example showing the breaking change in authentication code pattern where azure.common.credentials is replaced with azure-identity classes. Credentials parameter is renamed to credential and configuration is passed as kwargs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/azurestackhci/azure-mgmt-azurestackhci/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Old way:\n# client = MyClient(credentials, subscription_id, config)\n\n# New way:\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Running Azure Cosmos DB Setup and Scale Workloads\nDESCRIPTION: Commands to run the initial setup script for creating database resources and the scale testing workloads with a specified number of clients per workload.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/tests/workloads/dev.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 initial-setup.py\n./run_workloads.sh <number of clients per workload>\n```\n\n----------------------------------------\n\nTITLE: Configuring Python-Specific Settings for AutoRest Using YAML\nDESCRIPTION: Defines Python-specific settings for AutoRest code generation via a YAML snippet activated with the '$(python)' selector. It enables Azure ARM SDK mode, sets licensing, payload flattening, and clears the output folder by default. Key parameters: azure-arm (enables ARM template structure), license-header (specifies MIT license handling), payload-flattening-threshold (defines the level at which nested data structures are flattened), clear-output-folder (removes existing output before generation).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npython:\n  azure-arm: true\n  license-header: MICROSOFT_MIT_NO_VERSION\n  payload-flattening-threshold: 2\n  clear-output-folder: true\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Maps Account with Azure CLI\nDESCRIPTION: Command to create an Azure Maps account using Azure CLI with configurable resource group, account name and SKU tier.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Defines the Python package dependencies for the project. It uses the '-e' flag for editable installations of local packages ('azure-sdk-tools', 'azure-mgmt-resource') and lists standard dependencies ('azure-identity', 'aiohttp'). This format is typically used in requirements files (e.g., requirements.txt) for tools like pip to manage project dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-mgmt-servicebus/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Running Pylint with Tox for Azure SDK Python Package\nDESCRIPTION: Demonstrates how to run Pylint using Tox for a specific Azure SDK Python package. This command executes Pylint checks according to the project's configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/pylint_checking.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.../azure-sdk-for-python/sdk/eventgrid/azure-eventgrid>tox run -e pylint -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Script Usage with PowerShell\nDESCRIPTION: Demonstrates the complete workflow for resolving merge conflicts using the script, including checking out branches, merging, and pushing resolved assets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/scripts/resolve-asset-conflict/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# including context to get into a merge conflict\ncd \"path/to/language/repo/root\"\ngit checkout base-branch\ngit merge target-branch\n# auto resolve / merge conflicting tag values\n./eng/common/testproxy/scripts/resolve-asset-conflict/resolve-asset-conflict.ps1 sdk/storage/azure-storage-blob/assets.json\n# user pushes\ntest-proxy push -a sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview Administration Package\nDESCRIPTION: Install the Azure Purview Administration client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-purview-administration\n```\n\n----------------------------------------\n\nTITLE: Renaming 'creationTime' to 'createdOn' for Conversion via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that modifies the generated Python code. It targets the 'creationTime' property within the 'conversion' definition in the Swagger document and renames its client-side representation to 'createdOn' using the 'x-ms-client-name' extension.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion.properties.creationTime'\n    transform: >\n        $[\"x-ms-client-name\"] = \"createdOn\";\n```\n\n----------------------------------------\n\nTITLE: Running a Python Sample File\nDESCRIPTION: Example command to run a Python sample file for the Health Insights Cancer Profiling client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sample_infer_cancer_profiling.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure SDK Health Report Script (Python)\nDESCRIPTION: Installs the required dependencies for the health status report script using pip. This command should be run before executing the main script.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/repo_health_status_report/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Python Requirements for Azure SDK Project - requirements\nDESCRIPTION: This snippet specifies the required and optional Python package dependencies for an Azure SDK Python project. It uses environment markers to handle Python version-specific requirements, points to local, editable packages, and includes test or development dependencies. Required dependencies include 'trio', 'aiohttp', 'typing_extensions', and several packages are installed in 'editable' mode via relative paths, indicating a monorepo or locally developed dependency. This setup expects pip for package management and compatibility with Python 3.5 or newer.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-mgmt-core/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\ntrio; python_version >= '3.5'\naiohttp>=3.0; python_version >= '3.5'\ntyping_extensions>=3.7.2\n-e ../azure-core\nmock;python_version<=\"2.7\"\nhttpretty\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2022-10-01-preview\nDESCRIPTION: Configuration settings for the v2022-10-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, and mfe along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2022-10-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2022-10-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2022-10-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2022-10-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2022-10-01-preview/mfe.json\noutput-folder: $(python-sdks-folder)/v2022_10_01_preview\n```\n\n----------------------------------------\n\nTITLE: Setting BlobTagFilter Parameter Location via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive targets the `BlobTagFilter` parameter definition in the Swagger document. It adds the `x-ms-parameter-location` extension with the value `method`, indicating how this parameter should be handled during code generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.BlobTagFilter\n  transform: >\n    $[\"x-ms-parameter-location\"] = \"method\";\n```\n\n----------------------------------------\n\nTITLE: Python SDK Configuration Updates\nDESCRIPTION: Example showing the new configuration approach where config attribute is replaced with kwargs in client initialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Old way:\nclient = MyClient(credentials)\nclient.config.enable_logging = True\n\n# New way:\nclient = MyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Preview Packages of Azure SDK Libraries\nDESCRIPTION: Shows how to install preview versions of Azure SDK libraries using pip with the --pre flag. Uses the Compute Management library as an example.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --pre azure-mgmt-compute # will install only the latest Compute Management library\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tool Dependencies for Python\nDESCRIPTION: This snippet lists two dependencies for the Azure SDK for Python project. It includes a relative path to Azure SDK tools and the azure-identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storagemover/azure-mgmt-storagemover/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Structured changelog showing version history from 1.0.0b1 through 1.1.1, including deprecation notice, breaking changes, and version release information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/logz/azure-mgmt-logz/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.1 (2025-02-10)\n\n### Other Changes\n\n- This package has been deprecated and will no longer be maintained after 02-10-2025. This package will only receive security fixes until 02-10-2025.\n\n## 1.1.0b1 (2022-11-08)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 1.0.0 (2021-09-06)\n\n - GA release\n\n## 1.0.0b1 (2021-06-02)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Release History - Markdown Documentation\nDESCRIPTION: Markdown formatted changelog detailing version updates, including GA release 1.0.0, beta releases with new features added to AutonomousDatabasesOperations and breaking changes to model properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/oracledatabase/azure-mgmt-oracledatabase/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-07-04)\n\n### Other Changes\n\n  - First GA\n\n## 1.0.0b2 (2024-06-21)\n\n### Features Added\n\n  - Added operation AutonomousDatabasesOperations.begin_restore\n  - Added operation AutonomousDatabasesOperations.begin_shrink\n  - Added operation group SystemVersionsOperations\n  - Model AutonomousDatabaseBackupProperties has a new parameter autonomous_database_ocid\n  - Model AutonomousDatabaseBackupProperties has a new parameter backup_type\n  - Model AutonomousDatabaseBackupProperties has a new parameter database_size_in_tbs\n  - Model AutonomousDatabaseBackupProperties has a new parameter size_in_tbs\n  - Model AutonomousDatabaseBackupProperties has a new parameter time_started\n  - Model AutonomousDatabaseBaseProperties has a new parameter long_term_backup_schedule\n  - Model AutonomousDatabaseBaseProperties has a new parameter next_long_term_backup_time_stamp\n  - Model AutonomousDatabaseCloneProperties has a new parameter long_term_backup_schedule\n  - Model AutonomousDatabaseCloneProperties has a new parameter next_long_term_backup_time_stamp\n  - Model AutonomousDatabaseProperties has a new parameter long_term_backup_schedule\n  - Model AutonomousDatabaseProperties has a new parameter next_long_term_backup_time_stamp\n  - Model AutonomousDatabaseUpdateProperties has a new parameter long_term_backup_schedule\n\n### Breaking Changes\n\n  - Model AutonomousDatabaseBackupProperties no longer has parameter autonomous_database_id\n  - Model AutonomousDatabaseBackupProperties no longer has parameter database_size_in_t_bs\n  - Model AutonomousDatabaseBackupProperties no longer has parameter size_in_t_bs\n  - Model AutonomousDatabaseBackupProperties no longer has parameter type\n\n## 1.0.0b1 (2024-05-27)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Role Definition in JSON for Cosmos DB Permissions\nDESCRIPTION: JSON definition for a custom role named 'ExpandedRBACActions' with specific permissions for Cosmos DB operations. This role grants access to read metadata and perform operations on containers and items within SQL databases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/setup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"RoleName\": \"ExpandedRBACActions\",\n    \"Type\": \"CustomRole\",\n    \"AssignableScopes\": [\"/\"],\n    \"Permissions\": [{\n        \"DataActions\": [\n            \"Microsoft.DocumentDB/databaseAccounts/readMetadata\",\n            \"Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/*\",\n            \"Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*\"\n        ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Azure SDK Tools Package in Development Mode\nDESCRIPTION: This command instructs pip to install the Azure SDK tools package in development mode (-e flag) from a relative path. This allows developers to work with the tools while making changes to them.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthcareapis/azure-mgmt-healthcareapis/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Handling DNS Lookup Failure Exceptions in Azure SDK Tests\nDESCRIPTION: Example demonstrating how to handle different exceptions that may occur during DNS lookup failures when using test proxy vs direct service requests. Shows how to catch multiple exception types and validate error messages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises((ServiceRequestError, HttpResponseError)) as exc_info:\n    # This request will raise a ServiceRequestError when sent directly\n    # When using the test proxy, we get an HttpResponseError instead\n    ...  # Request that triggers DNS lookup failure\n\n# Make sure the HttpResponseError is raised for the same reason: DNS lookup failure\nif exc_info.type is HttpResponseError:\n    response_content = json.loads(exc_info.value.response.content)\n    assert \"Name does not resolve\" in response_content[\"Message\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Azure Core and Azure Storage Queue\nDESCRIPTION: Command to install specific versions of azure-core and azure-storage-queue to ensure compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npip install azure-core==1.0.0b2 azure-storage-queue==12.0.0b2\n```\n\n----------------------------------------\n\nTITLE: Flattening Model Properties in Azure SDK Python\nDESCRIPTION: Directive to flatten nested properties across multiple models including EmailNotificationHook, WebNotificationHook, MetricSeriesGroupDetectionCondition, and others. This helps simplify the model structure by flattening nested objects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-model: EmailNotificationHook\n    flatten-property: hookParameter\n  - where-model: WebNotificationHook\n    flatten-property: hookParameter\n  - where-model: MetricSeriesGroupDetectionCondition\n    flatten-property: group\n  - where-model: MetricSingleSeriesDetectionCondition\n    flatten-property: series\n  - where-model: MetricFeedback\n    flatten-property: dimensionFilter\n  - where-model: AnomalyFeedback\n    flatten-property: value\n  - where-model: ChangePointFeedback\n    flatten-property: value\n  - where-model: CommentFeedback\n    flatten-property: value\n  - where-model: PeriodFeedback\n    flatten-property: value\n  - where-model: DatasourceSqlConnectionString\n    flatten-property: parameters\n  - where-model: DatasourceDataLakeGen2SharedKey\n    flatten-property: parameters\n  - where-model: DatasourceServicePrincipal\n    flatten-property: parameters\n  - where-model: DatasourceServicePrincipalInKeyVault\n    flatten-property: parameters\n  - where-model: DataPointAnomaly\n    flatten-property: property\n  - where-model: AnomalyIncident\n    flatten-property: rootNode\n  - where-model: AnomalyIncident\n    flatten-property: property\n  - where-model: MetricEnrichedSeriesData\n    flatten-property: series\n  - where-model: MetricSeriesData\n    flatten-property: id\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local package references using relative paths and an external library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../../sdk/identity/azure-identity\n-e ../../network/azure-mgmt-network\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Interpreting Type Information for Variadic Arguments in mypy Command Output\nDESCRIPTION: Provides example output from mypy's type checker, illustrating how *args is inferred as tuple[str] and **kwargs as dict[str, Any]. Useful for understanding internal behavior of type checkers, but is only output, not code to execute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:4: note: Revealed local types are:\\nmain.py:4: note:     args: builtins.tuple[builtins.str]\\nmain.py:4: note:     kwargs: builtins.dict[builtins.str, Any]]\\\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Updated Docker Images to Azure Container Registry\nDESCRIPTION: Commands to push the newly built Docker images targeting Python 3.9 to the Azure Container Registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\ndocker push $ACR_NAME.azurecr.io/sfmitestsystem\ndocker push $ACR_NAME.azurecr.io/sfmitestuser\n```\n\n----------------------------------------\n\nTITLE: Modifying QueueMessage parameter in Swagger document using YAML directive\nDESCRIPTION: YAML directive to make QueueMessage parameter optional.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.QueueMessage\n  transform: >\n    $.required = false;\n```\n\n----------------------------------------\n\nTITLE: Installing Local `azure-sdk-tools` Editable (Pip Requirements)\nDESCRIPTION: Specifies an editable installation (`-e`) of the local package `azure-sdk-tools` located at `../../../tools/azure-sdk-tools`. This is used during development to link the installed package directly to the source code, requiring `pip` for installation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/qumulo/azure-mgmt-qumulo/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Pip Requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path\nDESCRIPTION: This line instructs pip to install the Azure SDK tools from a relative directory path. The '-e' flag indicates an editable install, which is useful for development purposes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/operationsmanagement/azure-mgmt-operationsmanagement/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Running Next Pylint with Tox for Azure SDK Python Package\nDESCRIPTION: Shows how to run the 'next-pylint' environment using Tox, which uses the latest versions of Pylint and custom checkers. This is useful for preparing for upcoming Pylint updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/pylint_checking.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e next-pylint -c ../../../eng/tox/tox.ini --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Model and Operation Imports in Azure Authorization SDK (v0.60.0)\nDESCRIPTION: Version 0.60.0, using a new code generator, changed how models and operation classes should be imported. Instead of importing a specific model class (e.g., `MyClass`) directly from its file (`my_class.py`), import it from the parent `models` module. Similarly, import operation classes (e.g., `MyClassOperations`) from the parent `operations` module, not directly from their specific file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# Old model import (no longer recommended/may break):\n# from azure.mgmt.authorization.v20xx_yy_zz.models.my_class import MyClass\n\n# New model import:\n# from azure.mgmt.authorization.v20xx_yy_zz.models import MyClass\n\n# --- \n\n# Old operation import (no longer recommended/may break):\n# from azure.mgmt.authorization.v20xx_yy_zz.operations.my_class_operations import MyClassOperations\n\n# New operation import:\n# from azure.mgmt.authorization.v20xx_yy_zz.operations import MyClassOperations\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Devcenter Management Client Library with pip\nDESCRIPTION: Commands to install the Azure Devcenter Management Client Library and Azure Identity packages using pip. These packages are required to authenticate and interact with Azure Devcenter services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-mgmt-devcenter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-devcenter\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Data Visualization in Azure SDK\nDESCRIPTION: A requirements.txt or constraints file listing the specific versions of Python packages required for data visualization and analysis in the Azure SDK. Includes core data science libraries like matplotlib, numpy, pandas, scipy, and seaborn, along with their dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/deployments/batch/environment_files/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncycler==0.10.0            # via matplotlib\nkiwisolver==1.2.0         # via matplotlib\nmatplotlib==3.2.1\nnumpy==1.19.5\npandas==1.0.4\npyparsing==2.4.7          # via matplotlib\npython-dateutil==2.8.1    # via matplotlib, pandas\npytz==2020.1              # via pandas\nscipy==1.5.1              # via seaborn\nseaborn==0.10.1\n```\n\n----------------------------------------\n\nTITLE: Referencing AzureML Classes in Docstrings\nDESCRIPTION: Example showing how to properly reference AzureML v2 classes in docstrings to create navigable links in the rendered documentation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/documentation_guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n:param sampling_algorithm: Sampling algorithm for sweep job.\n:type sampling_algorithm: ~azure.ai.ml.sweep.SamplingAlgorithm\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Package Dependencies for Python\nDESCRIPTION: This snippet lists the minimum required versions for various Azure SDK packages in Python. It includes core libraries, identity management, databases, messaging, security, and storage services. The specified versions ensure compatibility and access to necessary features.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/requirements-release.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nazure-core>=0.0.0b1\nazure-identity>=0.0.0b1\nazure-cosmos>=4.0.0b5\nazure-eventhub>=0.0.0b1,!=5.8.0a1\nazure-keyvault-certificates>=0.0.0b1\nazure-keyvault-keys>=0.0.0b1\nazure-keyvault-secrets>=0.0.0b1\nazure-storage-blob>=0.0.0b1\n# Required for template release to trigger smoke tests\nazure-template>=0.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Initializing Subscription Client with Credentials in Python\nDESCRIPTION: Demonstrates how to initialize the Subscription client with credentials after the 1.0.0b1 update. The credential system now uses azure-identity classes instead of azure.common.credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.subscription import SubscriptionClient\n\ncredential = DefaultAzureCredential()\nclient = SubscriptionClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Running Python Sample for Azure Synapse Artifacts\nDESCRIPTION: This snippet demonstrates how to run a Python sample file for Azure Synapse Artifacts. It assumes the user has navigated to the appropriate directory and set up the required environment variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/samples/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython simple_sample.py\n```\n\n----------------------------------------\n\nTITLE: Version Changelog Formatting in Markdown\nDESCRIPTION: A structured changelog entry showing version changes, feature additions, breaking changes and bug fixes for the Azure SDK for Python NetApp module\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.0.2b1 (2023-02-16)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 9.0.1 (2022-10-26)\n\n### Bugs Fixed\n\n  - Added missing parameter `api_version` for operation AccountsOperations.begin_renew_credentials\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -TestApplicationOid in PowerShell\nDESCRIPTION: Defines the optional 'TestApplicationOid' parameter, a string representing the Service Principal Object ID of the AAD Test Application. This ID is used to assign permissions for accessing tested features on live resources and is passed to the ARM template. If not provided, the script attempts to query it from AAD, requiring 'Application.Read.All' permission for the provisioner SP. It's not required, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency on aiohttp Library (Python Requirements)\nDESCRIPTION: This line declares a requirement for the `aiohttp` Python library. When processed by `pip`, this package will be downloaded and installed from a package index. It's likely used for asynchronous HTTP operations within the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcontainers/azure-mgmt-appcontainers/dev_requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Renaming Trunk Model to SipTrunkInternal using Autorest Directive\nDESCRIPTION: This `autorest` directive targets the `Trunk` definition in the Swagger document and applies the `x-ms-client-name` extension with the value `SipTrunkInternal`. This instructs `autorest` to use `SipTrunkInternal` as the model name in the generated client code, possibly to avoid naming conflicts or clarify its internal usage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: \"$.definitions.Trunk\"\n  transform: >\n    $[\"x-ms-client-name\"] = \"SipTrunkInternal\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test File Structure in Python\nDESCRIPTION: Demonstrates the basic structure of a test file for the Azure SDK, including imports, environment variable loading, and test class setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\nfrom devtools_testutils import AzureRecordedTestCase, EnvironmentVariableLoader, recorded_by_proxy\n\nfrom azure.schemaregistry import SchemaRegistryClient\n\nSchemaRegistryPreparer = functools.partial(\n    EnvironmentVariableLoader,\n    'schemaregistry',\n    schemaregistry_endpoint=\"https://fake_resource.servicebus.windows.net\",\n    schemaregistry_group=\"fakegroup\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Key Vault Certificate Performance Tests\nDESCRIPTION: Installs the required dependencies for running performance tests, including the devtools_testutils package and the local azure-keyvault-certificates package in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-certificates> pip install -r dev_requirements.txt\n(env) ~/azure-keyvault-certificates> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Restructuring 'conversion_output' as 'AssetConversionOutput' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that refactors the Swagger definition before code generation. It creates a new definition named 'AssetConversionOutput' based on the existing 'conversion.properties.output' structure and updates the original 'output' property to reference this new definition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions\n    transform: >\n      $[\"AssetConversionOutput\"] = $.conversion.properties.output;\n      $.conversion.properties[\"output\"] = {\"$ref\": \"#/definitions/AssetConversionOutput\"};\n```\n\n----------------------------------------\n\nTITLE: Using LROPoller for Long-Running Operations in Azure SDK for Python\nDESCRIPTION: Example of using the azure.core.polling.LROPoller for long-running operations, which replaces the previous msrest.polling.LROPoller.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npoller = client.begin_long_running_operation(...)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Listing Available Performance Tests using perfstress (Cmd)\nDESCRIPTION: Navigates to the `tests` directory and runs the `perfstress` command without arguments. This scans the current module for runnable performance tests provided by `devtools_testutils` and lists the available tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-appconfiguration> cd tests\n(env) ~/azure-appconfiguration/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Requirements file that specifies development dependencies including Azure SDK tools, resource management, identity components and aiohttp library\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservice/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Code Generation Settings in YAML\nDESCRIPTION: Defines the core settings for AutoRest generation in YAML format. It specifies the input Swagger file URL, output folder, Python namespace, license header, and other flags (like `enable-xml`, `clear-output-folder`, `python`, `v3`, `no-async`) to control the generation process for the RemoteRenderingRestClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: RemoteRenderingRestClient\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/2a65b0a2bbd9113b91c889f187d8778c2725c0b9/specification/mixedreality/data-plane/Microsoft.MixedReality/stable/2021-01-01/mr-arr.json\noutput-folder: ../azure/mixedreality/remoterendering/_generated\nnamespace: azure.mixedreality.remoterendering._generated\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: false\nclear-output-folder: true\nvanilla: true\npython: true\nv3: true\nno-async: false\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Mover SDK Packages with pip\nDESCRIPTION: Installs the Azure Resource Mover management package and Azure Identity package for authentication. These packages enable interaction with the Resource Mover service API.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourcemover/azure-mgmt-resourcemover/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-resourcemover\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Remove ErrorCode - YAML Directives\nDESCRIPTION: Updates default response schema reference to '#/definitions/Anything' for all paths in the swagger document\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][*]\n    transform: >\n      for (var op of Object.values($)) {\n          op[\"responses\"][\"default\"][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n      }\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest Globally using PowerShell\nDESCRIPTION: This command installs the Autorest v3 tool globally using the Node Package Manager (npm). Autorest is required to generate the Azure SDK code from the OpenAPI specifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ps\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Entities - Azure CosmosDB Table - Python\nDESCRIPTION: This snippet illustrates how to perform batch insert operations using the 'TableService' from the legacy 'azure-cosmosdb-table' package in Python. A batch context is opened for a specified table, and multiple entities are inserted in a loop by updating the entity's 'RowKey'. Required dependencies include the 'azure-cosmosdb-table' package and a valid client object. The snippet expects the table name and an existing entity dictionary to be available. The batch is committed when the context manager exits.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmosdb.table import TableService\\nclient = TableService(...)\\n\\ntable_name = \\\"tableName\\\"\\nwith client.batch(table_name) as batch:\\n    for i in range(0, 5):\\n        entity[\\\"RowKey\\\"] = \\\"context_{}\\\".format(i)\\n        batch.insert_entity(entity)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Using Intermediate Variable with Azure Attestation Client in Python\nDESCRIPTION: Demonstrates retrieving the policy string by first assigning the entire tuple returned by `get_policy` (as of v1.0.0) to a variable (`response`) and then accessing the policy from the first element (index 0) of that variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\npolicy = response[0]\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Python\nDESCRIPTION: This markdown document outlines the release history for the Azure SDK for Python, including version 1.0.0 and 1.0.0b1. It details features added, breaking changes, and other modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computefleet/azure-mgmt-computefleet/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-10-22)\n\n### Features Added\n\n  - Model `ComputeProfile` added property `additional_virtual_machine_capabilities`\n  - Model `FleetProperties` added property `vm_attributes`\n  - Model `FleetProperties` added property `additional_locations_profile`\n  - Enum `DiskControllerTypes` added member `NV_ME`\n  - Enum `SecurityTypes` added member `CONFIDENTIAL_VM`\n  - Enum `WindowsVMGuestPatchMode` added member `AUTOMATIC_BY_OS`\n  - Added model `AdditionalCapabilities`\n  - Added model `AdditionalLocationsProfile`\n  - Added model `LocationProfile`\n  - Added model `VMAttributeMinMaxDouble`\n  - Added model `VMAttributeMinMaxInteger`\n  - Added model `VMAttributes`\n  - Added enum `AcceleratorManufacturer`\n  - Added enum `AcceleratorType`\n  - Added enum `ArchitectureType`\n  - Added enum `CpuManufacturer`\n  - Added enum `LocalStorageDiskType`\n  - Added enum `VMAttributeSupport`\n  - Added enum `VMCategory`\n\n### Breaking Changes\n\n  - Model `LinuxConfiguration` renamed its instance variable `provision_v_m_agent` into `provision_vm_agent`\n  - Model `LinuxConfiguration` renamed its instance variable `enable_v_m_agent_platform_updates` into `enable_vm_agent_platform_updates`\n  - Model `SpotPriorityProfile` renamed its instance variable `max_price_per_v_m` into `max_price_per_vm`\n  - Model `VMSizeProperties` renamed its instance variable `v_c_p_us_available` into `v_cpus_available`\n  - Model `VMSizeProperties` renamed its instance variable `v_c_p_us_per_core` into `v_cpus_per_core`\n  - Model `VirtualMachineScaleSetDataDisk` renamed its instance variable `disk_size_g_b` into `disk_size_gb`\n  - Model `VirtualMachineScaleSetDataDisk` renamed its instance variable `disk_i_o_p_s_read_write` into `disk_iops_read_write`\n  - Model `VirtualMachineScaleSetIPConfigurationProperties` renamed its instance variable `public_i_p_address_configuration` into `public_ip_address_configuration`\n  - Model `VirtualMachineScaleSetIPConfigurationProperties` renamed its instance variable `private_i_p_address_version` into `private_ip_address_version`\n  - Model `VirtualMachineScaleSetNetworkConfigurationProperties` renamed its instance variable `enable_i_p_forwarding` into `enable_ip_forwarding`\n  - Model `VirtualMachineScaleSetOSDisk` renamed its instance variable `disk_size_g_b` into `disk_size_gb`\n  - Model `VirtualMachineScaleSetPublicIPAddressConfigurationProperties` renamed its instance variable `public_i_p_prefix` into `public_ip_prefix`\n  - Model `VirtualMachineScaleSetPublicIPAddressConfigurationProperties` renamed its instance variable `public_i_p_address_version` into `public_ip_address_version`\n  - Model `WindowsConfiguration` renamed its instance variable `provision_v_m_agent` into `provision_vm_agent`\n  - Model `WindowsConfiguration` renamed its instance variable `win_r_m` into `win_rm`\n  - Model `WindowsConfiguration` renamed its instance variable `enable_v_m_agent_platform_updates` into `enable_vm_agent_platform_updates`\n  - Deleted or renamed enum value `DiskControllerTypes.N_V_ME`\n  - Deleted or renamed enum value `NetworkApiVersion.ENUM_2020_11_01`\n  - Deleted or renamed enum value `SecurityEncryptionTypes.DISK_WITH_V_M_GUEST_STATE`\n  - Deleted or renamed enum value `SecurityEncryptionTypes.NON_PERSISTED_T_P_M`\n  - Deleted or renamed enum value `SecurityEncryptionTypes.V_M_GUEST_STATE_ONLY`\n  - Deleted or renamed enum value `SecurityTypes.CONFIDENTIAL_V_M`\n  - Deleted or renamed enum value `StorageAccountTypes.PREMIUM_L_R_S`\n  - Deleted or renamed enum value `StorageAccountTypes.PREMIUM_V2_L_R_S`\n  - Deleted or renamed enum value `StorageAccountTypes.PREMIUM_Z_R_S`\n  - Deleted or renamed enum value `StorageAccountTypes.STANDARD_L_R_S`\n  - Deleted or renamed enum value `StorageAccountTypes.STANDARD_S_S_D_L_R_S`\n  - Deleted or renamed enum value `StorageAccountTypes.STANDARD_S_S_D_Z_R_S`\n  - Deleted or renamed enum value `StorageAccountTypes.ULTRA_S_S_D_L_R_S`\n  - Deleted or renamed enum value `WindowsVMGuestPatchMode.AUTOMATIC_BY_O_S`\n\n## 1.0.0b1 (2024-07-22)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Development Dependencies with Relative Paths\nDESCRIPTION: Configuration that references local development packages using relative paths. The file includes a reference to development tools and the Azure Identity package, which are essential dependencies for SDK development and testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/voiceservices/azure-mgmt-voiceservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Accessing SDK Version in Python\nDESCRIPTION: Shows how to access the SDK version number in code after updating to version 1.0.0b1. The __version__ attribute is used instead of importing a version module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.subscription import __version__ as version\n\nprint(version)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Autorest v3 to v4 Import Path Changes (Single API)\nDESCRIPTION: Demonstrates the breaking changes in Python import paths for clients, configurations, models, and operations when migrating from Autorest v3 to v4 for single API packages. Previously importable internal modules are now restricted, requiring imports from the top-level package or primary submodules like 'models' and 'operations'. This example uses `azure.mgmt.hanaonazure` as a placeholder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/changelog_generics.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Client import: OLD (no longer works)\n# from azure.mgmt.hanaonazure.hana_management_client import HanaManagementClient\n\n# Client import: NEW (works)\nfrom azure.mgmt.hanaonazure import HanaManagementClient\n\n# Configuration import: OLD (no longer works)\n# from azure.mgmt.hanaonazure.hana_management_client import HanaManagementClientConfiguration\n\n# Configuration import: NEW (works)\nfrom azure.mgmt.hanaonazure import HanaManagementClientConfiguration\n\n# Model import: OLD (no longer works)\n# from azure.mgmt.hanaonazure.models.my_class import MyClass\n\n# Model import: NEW (works)\nfrom azure.mgmt.hanaonazure.models import MyClass\n\n# Operation import: OLD (no longer works)\n# from azure.mgmt.hanaonazure.operations.my_class_operations import MyClassOperations\n\n# Operation import: NEW (works)\nfrom azure.mgmt.hanaonazure.operations import MyClassOperations\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Weather SDK with pip\nDESCRIPTION: Command for installing the Azure Maps Weather SDK Python package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-weather\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Dependencies for Python\nDESCRIPTION: This dependency list references local Azure SDK tools and resource management packages using relative path references, as well as the aiohttp library which is commonly used for asynchronous HTTP operations in Python applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourcehealth/azure-mgmt-resourcehealth/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure Developer CLI Account and Token Access\nDESCRIPTION: These commands verify the current Azure Developer CLI account configuration and its ability to obtain access tokens. The first command lists the current configuration, while the second retrieves an access token for the Azure Resource Manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nazd config list\n```\n\nLANGUAGE: bash\nCODE:\n```\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Azure SDK Development\nDESCRIPTION: Requirements file that specifies three key dependencies: Azure SDK development tools, Azure Resource Management package, and aiohttp for async HTTP functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-avs/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Dependencies Configuration\nDESCRIPTION: Lists required dependencies including local Azure SDK tools, Azure Core library, Azure Identity package, and the aiohttp async HTTP client library. Uses relative paths for local packages and pip editable mode (-e) for development tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Complete Autorest Command for ARM Swagger with Readme\nDESCRIPTION: Comprehensive Autorest command for generating an Azure SDK package from an ARM Swagger with a readme file. Includes package metadata, licensing, and versioning.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generation.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nautorest --version=latest specifications/storage/resource-manager/readme.md --python --azure-arm=true --payload-flattening-threshold=2 --license-header=MICROSOFT_MIT_NO_VERSION --namespace=azure.mgmt.storage --package-name=azure-mgmt-storage --package-version=0.1.0 \n```\n\n----------------------------------------\n\nTITLE: Authenticating with ServicePrincipalCredentials in azure-keyvault\nDESCRIPTION: Creates a KeyVaultClient using ServicePrincipalCredentials from azure.common in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.credentials import ServicePrincipalCredentials\nfrom azure.keyvault import KeyVaultClient\n\ncredentials = ServicePrincipalCredentials(\n    client_id=\"client id\",\n    secret=\"client secret\",\n    tenant=\"tenant id\"\n)\n\nclient = KeyVaultClient(credentials)\n```\n\n----------------------------------------\n\nTITLE: Executing Python Multi-API Configuration Helper Script\nDESCRIPTION: Command to run the Python script that assists with multi-API configuration for Azure SDK. The script should be placed in the same directory as the azure-rest-api-specs folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/multiapi-configuration-helper/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython python-multiapi-configuration-helper.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory in Python\nDESCRIPTION: Code to authenticate with the Azure Remote Rendering service using Azure Active Directory credentials via the DefaultAzureCredential provider from the Azure Identity library. This is the recommended approach for production applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\ndefault_credential = DefaultAzureCredential()\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=default_credential\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK Project\nDESCRIPTION: Lists required Python packages with their version specifications for the Azure SDK for Python project. The dependencies include MLflow (unversioned), LightGBM 3.3.2, Matplotlib 3.3.4, Pandas 1.1.5, and typing-extensions 4.0.1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/model/lightgbm_mlflow_model/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmlflow\nlightgbm==3.3.2\nmatplotlib==3.3.4\npandas==1.1.5\ntyping-extensions==4.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Package with pip\nDESCRIPTION: Pip requirements file entry that installs the Azure SDK tools package from a local relative path using editable mode (-e flag).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-data-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Listing App Configuration Store Credentials via Azure CLI in PowerShell\nDESCRIPTION: This PowerShell snippet lists connection strings and other credentials for an Azure App Configuration store using Azure CLI. Replace the placeholder with the name of your config store. The command outputs credential objects, allowing secure client authentication. Azure CLI should be pre-installed and authenticated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\naz appconfig credential list --name <config-store-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest for Azure Device Update Python SDK Generation\nDESCRIPTION: YAML configuration for Autorest to generate the Python SDK for Azure Device Update. It specifies the input file, output folder, namespace, package name, and various other settings including version tolerance and credential scopes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/d7c9be23749467be1aea18f02ba2f4948a39db6a/specification/deviceupdate/data-plane/Microsoft.DeviceUpdate/stable/2022-10-01/deviceupdate.json\noutput-folder: ../azure/iot/deviceupdate\nnamespace: azure.iot.deviceupdate\npackage-name: azure-iot-deviceupdate\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\ntitle: DeviceUpdateClient\nversion-tolerant: true\npackage-version: 1.0.0\nadd-credential: true\ncredential-scopes: https://api.adu.microsoft.com/.default\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 via npm (PowerShell)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the Autorest v3 code generation tool globally (`-g`) on the system. Autorest is required to generate SDK code from OpenAPI specifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ps\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Executing Specific Azure Monitor Query Performance Tests\nDESCRIPTION: Examples of running specific performance tests for logs queries, batch logs queries, and metrics queries using the 'perfstress' command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-query/tests> perfstress LogsPerfTest\n(env) ~/azure-monitor-query/tests> perfstress LogsBatchPerfTest\n(env) ~/azure-monitor-query/tests> perfstress MetricsPerfTest\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Datadog Management SDK for Python\nDESCRIPTION: Commands to install the Azure Datadog Management package and Azure Identity package using pip. The Azure Identity package is required for authentication with Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datadog/azure-mgmt-datadog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-datadog\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Azure SDK Python Dependencies\nDESCRIPTION: Specifies required Python package dependencies including local development tools, core SDK components, identity management libraries and external packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/terraform/azure-mgmt-terraform/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Deprecated Credential Modules (Pre-v1.0.0b1)\nDESCRIPTION: Mentions the credential modules (`azure.common.credentials`, `msrestazure.azure_active_directory`) used prior to version 1.0.0b1. These are no longer supported and should be replaced by classes from the `azure-identity` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nazure.common.credentials\n```\n\nLANGUAGE: Python\nCODE:\n```\nmsrestazure.azure_active_directory\n```\n\n----------------------------------------\n\nTITLE: Importing SqlManagementClient in Python\nDESCRIPTION: Shows the updated import statement for SqlManagementClient after breaking changes in version 0.13.0. The client can no longer be imported from the previous location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.sqlmanagement import SqlManagementClient\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Tools Dependency for Azure SDK Python Project\nDESCRIPTION: This line specifies a local development tools package as a dependency for the Azure SDK for Python project. It uses the '-e' flag to indicate an editable install from a local directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/support/azure-mgmt-support/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Directory\nDESCRIPTION: A pip requirements file entry that installs Azure SDK development tools from a relative local directory path using editable mode (-e flag).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/orbital/azure-mgmt-orbital/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Local Requirements for Azure SDK in Python\nDESCRIPTION: This requirements file lists the dependencies for a Python project working with Azure SDK components. The '-e' flags denote editable installations for local directories, enabling live development and testing without reinstalling the packages. Dependencies include local Azure tools, the Azure management resource package, and the 'requests' HTTP library; no version pins are specified, so the latest available versions are used unless overridden elsewhere.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\nrequests\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.0.1 Release in Markdown\nDESCRIPTION: Notes a fix for duplicated description in annotation for version 1.0.1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.1 (2022-03-29)\n\n**Fixes**\n\n- Fix duplicated description in annotation\n```\n\n----------------------------------------\n\nTITLE: Simplifying SipRouting_Update Parameter Schema using Autorest Directive\nDESCRIPTION: This `autorest` directive modifies the input Swagger document. It targets the update parameter within the `SipRouting_Update` operation (identified by its description) and transforms its schema to use the simpler `SipConfiguration` definition instead of a dedicated update type, aiming to simplify the user interface of the generated SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.paths.*[?(@.operationId == \"SipRouting_Update\")].parameters..[?(@.description == \"Sip configuration update object.\")]\n  transform: >\n    $.schema = {\"$ref\": \"#/definitions/SipConfiguration\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools for Python Development\nDESCRIPTION: Specifies an editable install of Azure SDK development tools from a relative path. This allows developers to use the latest version of the tools during SDK development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dynatrace/azure-mgmt-dynatrace/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Renaming Granularity to DataFeedGranularityType\nDESCRIPTION: Directive to rename Granularity enum to DataFeedGranularityType for more specific and contextual naming in both paths and definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/dataFeeds\"][\"get\"][\"parameters\"][2][\"x-ms-enum\"]\n    transform: >\n      $[\"name\"] = \"DataFeedGranularityType\";\n  - from: swagger-document\n    where: $[\"definitions\"][\"DataFeedDetail\"][\"properties\"][\"granularityName\"][\"x-ms-enum\"]\n    transform: >\n      $[\"name\"] = \"DataFeedGranularityType\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Azure SDK Tools Package Path for Development\nDESCRIPTION: This snippet shows how to reference the Azure SDK tools package from a relative path for development purposes using pip's editable mode (-e flag).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-store/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTelemetry Collector\nDESCRIPTION: Steps to run the OpenTelemetry Collector sample. Uses Docker to start the collector with the provided configuration, installs the OTLP exporter, and runs the sample that sends traces to both Zipkin and Azure Monitor.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ docker-compose up\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-exporter-otlp\n```\n\nLANGUAGE: sh\nCODE:\n```\n# from collector directory\n$ python sample_collector.py\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Directory using pip\nDESCRIPTION: This snippet defines a pip installation directive that installs Azure SDK tools from a local relative path '../../../tools/azure-sdk-tools'. The -e flag ensures an editable install, which means changes to the source directory will be reflected in the installed package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mgmt-mixedreality/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Dependency for Azure SDK Tools in Python\nDESCRIPTION: This line specifies a local development dependency path for Azure SDK tools. It uses the '-e' flag to indicate an editable install, pointing to a relative path where the tools are located.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK Python Project\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK Python project. It includes local development tools, the Azure Identity package, and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mysqlflexibleservers/azure-mgmt-mysqlflexibleservers/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Using Bounded TypeVars with typing.SupportsFloat in Python\nDESCRIPTION: Demonstrates constraining a TypeVar with an upper bound (SupportsFloat), ensuring accepted types for a generic function must implement __float__. This function only accepts sequences of float-compatible types and returns the same type as the inputs. Dependencies: typing.Sequence, TypeVar, SupportsFloat, and random_pick.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Sequence, TypeVar, SupportsFloat\n\nT = TypeVar(\"T\", bound=SupportsFloat)\n\n\ndef pick(p: Sequence[T]) -> T:\n    return random_pick(p)\n```\n\n----------------------------------------\n\nTITLE: Modifying SignedIdentifier definition in Swagger document using YAML directive\nDESCRIPTION: YAML directive to make only Id required in the SignedIdentifier definition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.SignedIdentifier\n  transform: >\n    $.required = [ \"Id\" ];\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path in Python\nDESCRIPTION: This command installs Azure SDK tools from a relative local path using pip's editable mode. The tools are located three directories up from the current location in the 'tools/azure-sdk-tools' folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-iot-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Personalizer SDK with Autorest\nDESCRIPTION: Commands to navigate to the swagger folder and run Autorest to generate the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Renaming Range Parameter Client Name to RangeHeader\nDESCRIPTION: Uses an AutoRest directive to change the `x-ms-client-name` property for the `Range` parameter definition within the Swagger specification. The client-side parameter name in the generated SDK will be `RangeHeader` instead of `Range`, potentially for clarity or to avoid conflicts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.parameters.Range\n  transform: >\n    $[\"x-ms-client-name\"] = \"RangeHeader\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0 in Markdown\nDESCRIPTION: This snippet outlines the changes in version 1.0.0 of the Azure SDK for Python, including new parameters added to NGINX deployment models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2022-08-26)\n\n### Features Added\n\n  - Model NginxDeploymentProperties has a new parameter logging\n  - Model NginxDeploymentUpdateProperties has a new parameter logging\n```\n\n----------------------------------------\n\nTITLE: Analyzing Customer Distribution and Satisfaction by Line in Azure Digital Twins\nDESCRIPTION: Processes the query results to create a DataFrame showing customer distribution across lines. Then performs groupby operations to count customers per line and calculate average satisfaction per line.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/04_Lots_on_Queries.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nc_in_line = pd.concat(\n    [pd.DataFrame(customers_in_lines['line'].tolist()),\n    pd.DataFrame(customers_in_lines['customer'].tolist())],\n    axis=1\n)\n\ncols = c_in_line.columns.tolist()\ncols[0] = 'line'\ncols[4] = 'customer'\nc_in_line.columns = cols\nc_in_line\n\n# How many people are in each line:\nc_in_line.groupby('line').count()['customer']\n\n# Which group of people has the highest satisfaction?\nc_in_line.groupby('line').mean()['satisfaction']\n```\n\n----------------------------------------\n\nTITLE: Disabling Public IP for Private Load Tests in Python for Azure Load Testing\nDESCRIPTION: Set the 'public_ip_disabled' property on the Test model to disable injecting public IP for private load tests in Azure Load Testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntest.public_ip_disabled = True\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test Command\nDESCRIPTION: Basic command to initiate performance testing from the tests directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventgrid> cd tests\n(env) ~/azure-eventgrid/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Introducing New Service Bus Exception Classes in Python\nDESCRIPTION: Added specific exception classes for better error handling: `MessageError` (for general message-related issues like sending already sent messages), `MessageContentTooLarge` (subclass of `ValueError` and `MessageError` for oversized messages), and `ServiceBusAuthenticationError` (for authentication failures).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.servicebus.exceptions import MessageError, MessageContentTooLarge, ServiceBusAuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Standbypool and Identity Libraries using pip (Bash)\nDESCRIPTION: This command installs the `azure-mgmt-standbypool` package for managing Azure Standby Pools and the `azure-identity` package for handling authentication, using the Python package installer `pip`. Both packages are required to interact with the Azure Standbypool service via the Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/standbypool/azure-mgmt-standbypool/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-standbypool\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Internalizing AutoLockRenew Timing Attributes in Python\nDESCRIPTION: Made `AutoLockRenew.sleep_time` and `AutoLockRenew.renew_period` internal attributes (`_sleep_time`, `_renew_period`), as direct user interaction is not expected.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nAutoLockRenew.sleep_time -> AutoLockRenew._sleep_time\nAutoLockRenew.renew_period -> AutoLockRenew._renew_period\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Redis Enterprise Management Client Library for Python\nDESCRIPTION: Commands to install the required packages for using the Azure Redis Enterprise Management Client Library via pip. Installs both the core management library and the authentication library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redisenterprise/azure-mgmt-redisenterprise/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-redisenterprise\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Function with Optional Parameter\nDESCRIPTION: Example demonstrating proper usage of Optional type hint with a nullable parameter and default arguments. Shows distinction between optional parameters and Optional type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Any\n\ndef begin_export_project(\n    project_name: str,\n    *,\n    string_index_type: str = \"UnicodeCodePoint\",\n    asset_kind: Optional[str] = None,\n    **kwargs: Any\n) -> LROPoller[JSON]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Key Vault Access Policy for System-Assigned Identity\nDESCRIPTION: Command to set the key vault access policy for the system-assigned managed identity, granting list permissions for secrets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\naz keyvault set-policy -n $KEY_VAULT_NAME --secret-permissions list --object-id $OBJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure of documenting release history for the Azure SDK for Python. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and other modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-mgmt-deviceupdate/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0 (2023-12-18)\n\n### Features Added\n\n  - Model Account has a new parameter encryption\n\n## 1.1.0b1 (2022-12-26)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 1.0.0 (2022-08-26)\n\n### Breaking Changes\n\n  - Client name is changed from `DeviceUpdate` to `DeviceUpdateMgmtClient`\n\n## 1.0.0b4 (2022-05-26)\n\n**Features**\n\n  - Added operation group PrivateEndpointConnectionProxiesOperations\n  - Model Account has a new parameter locations\n  - Model Account has a new parameter private_endpoint_connections\n  - Model Account has a new parameter sku\n  - Model PrivateEndpointConnection has a new parameter group_ids\n\n**Breaking changes**\n\n  - Model IotHubSettings no longer has parameter event_hub_connection_string\n  - Model IotHubSettings no longer has parameter io_t_hub_connection_string\n  - Parameter private_link_service_connection_state of model PrivateEndpointConnection is now required\n\n## 1.0.0b3 (2021-11-04)\n\n**Features**\n\n  - Model AccountUpdate has a new parameter identity\n  - Model Instance has a new parameter diagnostic_storage_properties\n  - Model Instance has a new parameter enable_diagnostics\n  - Model Instance has a new parameter system_data\n  - Model Account has a new parameter identity\n  - Model Account has a new parameter system_data\n  - Model Account has a new parameter public_network_access\n  - Model Resource has a new parameter system_data\n  - Model TrackedResource has a new parameter system_data\n  - Model ErrorResponse has a new parameter error\n  - Added operation InstancesOperations.head\n  - Added operation AccountsOperations.head\n  - Added operation group PrivateLinkResourcesOperations\n  - Added operation group DeviceUpdateOperationsMixin\n  - Added operation group PrivateEndpointConnectionsOperations\n\n**Breaking changes**\n\n  - Model ErrorResponse no longer has parameter additional_info\n  - Model ErrorResponse no longer has parameter message\n  - Model ErrorResponse no longer has parameter details\n  - Model ErrorResponse no longer has parameter code\n  - Model ErrorResponse no longer has parameter target\n\n## 1.0.0b2 (2021-03-24)\n\n**Breaking changes**\n\n  - Removed operation InstancesOperations.list_by_subscription\n  - Model ErrorResponse has a new signature\n  - Model ErrorDefinition has a new signature\n\n## 1.0.0b1 (2021-03-02)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Handling Updated Long-Running Operations (LROs) in Azure Python SDK\nDESCRIPTION: Explains the change in handling Long-Running Operations. LRO methods are now prefixed with `begin_` and return an `azure.core.polling.LROPoller` instance, replacing the previous `msrest.polling.LROPoller`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nazure.core.polling.LROPoller, begin_\n```\n\n----------------------------------------\n\nTITLE: Supporting Additional Types in CorrelationFilter Properties (Python)\nDESCRIPTION: Expanded the supported value types for `CorrelationFilter.properties` to include `int`, `float`, `datetime`, and `timedelta`, allowing for more complex filtering rules based on custom message properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nCorrelationFilter.properties\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Requiring All Arguments for Properties Class Instantiation in Python\nDESCRIPTION: Model classes like `QueueProperties`, `TopicProperties`, `SubscriptionProperties`, and `RuleProperties` now require all arguments to be provided during instantiation. This change aims to prevent issues related to partial updates by ensuring all properties are explicitly set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# Requires all properties to be specified on creation\nQueueProperties(...all_args...)\n```\n\n----------------------------------------\n\nTITLE: Renaming Models in Azure SDK for Python\nDESCRIPTION: This YAML directive renames multiple models in the Azure SDK, updating their names to be more descriptive and consistent. It covers a wide range of models related to metrics, data feeds, and anomaly detection.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - rename-model:\n      from: MetricSeriesItem\n      to: MetricSeriesDefinition\n  - rename-model:\n      from: IngestionStatus\n      to: DataFeedIngestionStatus\n  - rename-model:\n      from: AlertSnoozeCondition\n      to: MetricAnomalyAlertSnoozeCondition\n  # ... (additional rename directives)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Monitor Ingestion Package Versions in Markdown\nDESCRIPTION: This snippet shows the structure used to list Azure Monitor Ingestion package versions for different release dates. It includes the release date as a header and the package name with its version number.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-monitor-ingestion.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2025.03.01\n\n### Packages included\n\n- azure-monitor-ingestion-1.0.4\n\n## 2024.12.01\n\n### Packages included\n\n- azure-monitor-ingestion-1.0.4\n\n## 2024.09.01\n\n### Packages included\n\n- azure-monitor-ingestion-1.0.4\n```\n\n----------------------------------------\n\nTITLE: Removing Incorrect Security Definitions from Swagger\nDESCRIPTION: Applies an AutoRest directive to the root (`$`) of the Swagger document to delete both the `securityDefinitions` and `security` properties. This is done to remove existing security configurations that are considered incorrect or superseded by the custom definitions applied elsewhere.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.\n    transform: >\n      delete $[\"securityDefinitions\"];\n      delete $[\"security\"];\n```\n\n----------------------------------------\n\nTITLE: Monitoring Azure Cosmos DB Scale Testing Workloads\nDESCRIPTION: Commands for monitoring the running Python processes and viewing log files in real-time during scale testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/tests/workloads/dev.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nps -eaf | grep \"python3\"\ntail -f <log_file>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies in Requirements File\nDESCRIPTION: This snippet lists dependencies for a Python project. It includes an editable installation (`-e`) pointing to `azure-sdk-tools`, a relative path to the `azure-identity` package, and the `aiohttp` library. This format is typically used in files like `requirements.txt` for package managers like `pip`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/playwrighttesting/azure-mgmt-playwrighttesting/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\\n../../identity/azure-identity\\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Updating Entities in azure-cosmosdb-table\nDESCRIPTION: Demonstrates how to update entities using azure-cosmosdb-table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmosdb.table import TableService\nclient = TableService(...)\n\nmy_entity[\"Value\"] += 5\nmy_table = \"tableName\"\n\n# This operation replaces an existing entity or inserts a new one if it does not exist\netag = client.insert_or_replace_entity(my_table, my_entity)\n\n# update an existing entity, this replaces the entity entity and can be used to remove properties.\netag = client.update_entity(my_table, my_entity)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for azure-storage-blob Package\nDESCRIPTION: Command to run tests for the azure-storage-blob package using Tox with the default environment. This demonstrates how to execute tests for a specific package without specifying an environment argument.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntox run -c ./eng/tox/tox.ini --root sdk/storage/azure-storage-blob\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Attestation Python Library (Pre-release)\nDESCRIPTION: This command installs the pre-release version of the Azure Attestation client library for Python using pip. The '--pre' flag ensures that a potentially unstable pre-release version is installed. This step is necessary to run the sample code provided in the repository.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre azure-security-attestation\n```\n\n----------------------------------------\n\nTITLE: Generating Python SDK with Autorest Using README Configuration (PowerShell)\nDESCRIPTION: Illustrates running Autorest with a specific README configuration file and specifying the output directory for the generated Python SDKs. Prerequisites include a prepared 'swagger/README.md' and an existing SDK directory. Key parameter: '--python-sdks-folder' defines output location. Outputs the generated client library in the target folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nautorest swagger/README.md --python-sdks-folder=<location-of-your-sdk-dir>\n```\n\n----------------------------------------\n\nTITLE: Using the ManagedHsmsOperations Client in Python\nDESCRIPTION: Example of using the new ManagedHsmsOperations client added in version 7.0.0b3. This snippet demonstrates checking MHSM name availability.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.keyvault import KeyVaultManagementClient\n\n# Create client\nkv_client = KeyVaultManagementClient(credential, subscription_id)\n\n# Check MHSM name availability\nresult = kv_client.managed_hsms.check_mhsm_name_availability(name=\"my-mhsm-name\")\nprint(f\"Is name available? {result.name_available}\")\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Requests with Key Vault Client in Python\nDESCRIPTION: Demonstrates how to use the send_request method on Key Vault clients to send custom requests using the client's existing pipeline.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Send a custom request using the client's pipeline\nresponse = client.send_request(request)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Purview SDK Generation Settings\nDESCRIPTION: Main configuration settings for generating the Azure Purview SDK including input file, output folder, package details, versioning, and authentication settings\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/purview/data-plane/Azure.Analytics.Purview.Scanning/preview/2018-12-01-preview/scanningService.json\noutput-folder: ../azure/purview/scanning\nnamespace: azure.purview.scanning\npackage-name: azure-purview-scanning\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\ntitle: PurviewScanningClient\nversion-tolerant: true\npackage-version: 1.0.0b2\nadd-credential: true\ncredential-scopes: https://purview.azure.net/.default\n```\n\n----------------------------------------\n\nTITLE: Restricting Values Using Literal Types in Python\nDESCRIPTION: Introduces the Literal type from typing_extensions to constrain a variable's value strictly to the listed set of options (here, color names). The dependency is typing_extensions.Literal. This pattern enforces strict value checking during static analysis or IDE support, improving code safety for APIs taking enums or set values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Literal\\n\\nPrimaryColors = Literal[\\\"red\\\", \\\"yellow\\\", \\\"blue\\\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Role Assignments in Azure Synapse\nDESCRIPTION: Demonstrates how to create a new role assignment in an Azure Synapse workspace by specifying role, principal, and scope. This allows granting permissions to users or service principals.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_data/match_trial_clinical_note.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create role assignment\nrole_assignment = access_control_client.create_role_assignment(\n    role_name=\"<role-name>\",\n    principal_id=\"<principal-id>\",\n    scope=\"<scope>\"  # optional\n)\nprint(role_assignment)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK Python project. It includes references to local development tools, core Azure libraries, identity management, machine learning capabilities, testing frameworks, and the OpenAI library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-resources/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n-e ../../ml/azure-ai-ml\npytest\npytest-xdist\nopenai\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Packages from GitHub with pip\nDESCRIPTION: Commands for installing Azure SDK packages directly from GitHub using pip, including options for specifying branches and subdirectories.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install \"git+https://github.com/Azure/azure-sdk-for-python#subdirectory=sdk/service/azure-mgmt-service&egg=azure-mgmt-service\"\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install \"git+https://github.com/Azure/azure-sdk-for-python@mybranch#subdirectory=sdk/service/azure-mgmt-service&egg=azure-mgmt-service\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local package references, specific version requirements for Azure management packages, and general Python package dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp>=3.0; python_version >= '3.5'\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\nazure-mgmt-compute==26.1.0\nazure-mgmt-storage==20.0.0\nazure-mgmt-privatedns==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing Available SansIO Policies in Azure Core\nDESCRIPTION: List of available SansIO policies that can be imported from azure.core.pipeline.policies. These policies handle common HTTP-related tasks like adding headers, logging, and proxy configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.pipeline.policies import (\n    HeadersPolicy,  # Add custom headers to all requests\n    UserAgentPolicy,  # Add a custom user agent header\n    NetworkTraceLoggingPolicy,  # Log request and response contents\n    ContentDecodePolicy,  # Mandatory policy for decoding unstreamed response content\n    HttpLoggingPolicy,  # Handles logging of HTTP requests and responses\n    ProxyPolicy,    # Enable proxy settings\n    CustomHookPolicy,   # Enable the given callback with the response\n    DistributedTracingPolicy    # Create spans for Azure calls\n)\n```\n\n----------------------------------------\n\nTITLE: Mypy Configuration Example\nDESCRIPTION: Sample mypy configuration to ignore type checking errors in specific directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[mypy-azure.ai.textanalytics._dont_type_check_me.*]\nignore_errors = True\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0b2 in Markdown\nDESCRIPTION: This snippet outlines the changes in version 1.0.0b2, including new properties added to existing models, a new model, and a new enum.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mysqlflexibleservers/azure-mgmt-mysqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b2 (2024-09-26)\n\n### Features Added\n\n  - Model `Server` added property `database_port`\n  - Model `Server` added property `maintenance_policy`\n  - Model `ServerForUpdate` added property `maintenance_policy`\n  - Added model `MaintenancePolicy`\n  - Added enum `PatchStrategy`\n```\n\n----------------------------------------\n\nTITLE: Executing Merge Proxy Tags Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to run the merge-proxy-tags.ps1 script to combine proxy tags for Azure SDK testing. It specifies the assets.json file and the tags to be merged.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd \"path/to/language/repo/root\"\n./eng/common/testproxy/scripts/tag-merge/merge-proxy-tags.ps1 sdk/storage/azure-storage-blob/assets.json integration/example/storage_feature_addition2 integration/example/storage_feature_addition1\ntest-proxy push -a sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Defining Editable Python Project Dependencies Using Pip\nDESCRIPTION: This snippet defines a requirement for the Python pip tool to install a package located at a relative local path (`../../../tools/azure-sdk-tools`) in editable mode. Editable mode allows developers to apply local changes in real time without reinstalling the package. This is commonly used in development environments for Python projects managing internal libraries. It does not require external dependencies, but the specified path must be correct and accessible from the running directory. The only parameter is the relative path to the desired editable project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagecache/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK Python\nDESCRIPTION: This snippet defines the local development dependencies for the Azure SDK for Python project. It references local paths to Azure SDK tools and the Azure Identity package, which are required for development work.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/scheduler/azure-mgmt-scheduler/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Renaming Format Parameter in Azure SDK Swagger\nDESCRIPTION: This YAML directive renames the 'ImportExportFormatParameter' in the Swagger documentation. It sets the 'x-ms-client-name' property to 'file_format' for this specific parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"parameters\"][\"ImportExportFormatParameter\"]\n    transform: >\n        $[\"x-ms-client-name\"] = \"file_format\";\n```\n\n----------------------------------------\n\nTITLE: Renaming 'create_conversion_settings' to 'create_asset_conversion_settings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'create_conversion_settings' definition in the Swagger document. It renames the client-side representation of this definition to 'create_asset_conversion_settings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.create_conversion_settings'\n    transform: >\n        $[\"x-ms-client-name\"] = \"create_asset_conversion_settings\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Protection Management Packages with pip\nDESCRIPTION: Commands to install the Azure Data Protection Management client library and Azure Identity packages using pip. These packages are necessary for authenticating and interacting with Azure Data Protection services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dataprotection/azure-mgmt-dataprotection/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-dataprotection\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Development Dependencies in requirements.txt\nDESCRIPTION: This requirements file references local paths to Azure SDK tools and identity components. It includes the azure-sdk-tools from a relative path and the azure-identity package, which are needed for development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservicesdatareplication/azure-mgmt-recoveryservicesdatareplication/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown for Azure SDK for Python\nDESCRIPTION: A markdown changelog that tracks version releases and feature additions for the Azure SDK for Python. It documents two beta releases: version 1.0.0b2 which added a new model type, and the initial release version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-analytics/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2022-12-14)\n\n### Features Added\n\n  - Added model CheckNameAvailabilityParametersType\n\n## 1.0.0b1 (2022-07-27)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Fixing Import for Async AzureApplicationCredential (Python)\nDESCRIPTION: Addressed an import issue related to the asynchronous version of `AzureApplicationCredential`, located at `azure.identity.aio.AzureApplicationCredential`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nazure.identity.aio.AzureApplicationCredential\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable and Direct Dependencies with pip requirements - plaintext\nDESCRIPTION: This snippet lists Python dependencies required for developing the Azure SDK for Python. Lines starting with '-e' indicate editable installations from local source paths, facilitating rapid development and testing. The file also lists direct package requirements, namely 'aiohttp', which is commonly used for asynchronous HTTP requests. No version constraints are provided, implying installation of the latest available versions. To use these dependencies, this requirements file should be referenced with pip (e.g., 'pip install -r requirements.txt').\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridcompute/azure-mgmt-hybridcompute/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Renaming Body Parameters in Azure SDK Swagger\nDESCRIPTION: This YAML directive renames the body parameters for several API endpoints in the Azure SDK Swagger documentation. It targets specific paths and transforms the 'x-ms-client-name' property of the third parameter in each endpoint.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/feedback\"][\"post\"]\n    transform: >\n        $[\"parameters\"][2][\"x-ms-client-name\"] = \"feedback\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/qnas\"][\"patch\"]\n    transform: >\n        $[\"parameters\"][2][\"x-ms-client-name\"] = \"qnas\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/sources\"][\"patch\"]\n    transform: >\n        $[\"parameters\"][2][\"x-ms-client-name\"] = \"sources\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/synonyms\"][\"put\"]\n    transform: >\n        $[\"parameters\"][2][\"x-ms-client-name\"] = \"synonyms\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/:import\"][\"post\"]\n    transform: >\n        $[\"parameters\"][2][\"x-ms-client-name\"] = \"options\";\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}\"][\"patch\"]\n    transform: >\n        $[\"parameters\"][1][\"x-ms-client-name\"] = \"options\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Wheel Dependencies for Python Environment Setup\nDESCRIPTION: This snippet lists two direct wheel (.whl) links for the packages cffi and aiohttp, each with an environment marker restricting their installation to Python 3.12 and above. This approach ensures that the specified package versions, hosted externally, are installed only when the environment matches the provided Python version constraint. Dependencies must be retrievable from the indicated blob storage endpoints, and installation typically occurs within a requirements.txt or similar dependency file during project setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/dev_requirement_samples/remote_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://docsupport.blob.core.windows.net/repackaged/cffi-1.15.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl; python_version >= '3.12'\nhttps://docsupport.blob.core.windows.net/repackaged/aiohttp-4.0.0a2.dev0-cp312-cp312-linux_x86_64.whl; python_version >= '3.12'\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 2.0.0 in Markdown\nDESCRIPTION: This snippet outlines the changes in version 2.0.0 of the Azure SDK for Python, including new operations and breaking changes for NGINX management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0 (2022-10-18)\n\n### Features Added\n\n  - Added operation CertificatesOperations.begin_create_or_update\n  - Added operation DeploymentsOperations.begin_create_or_update\n\n### Breaking Changes\n\n  - Removed operation CertificatesOperations.begin_create\n  - Removed operation DeploymentsOperations.begin_create\n```\n\n----------------------------------------\n\nTITLE: Configuring Python SDK Creation Mode for Azure Machine Learning Services\nDESCRIPTION: YAML configuration for creating a new Azure Machine Learning Services Python SDK. Specifies the output folder structure for new package creation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.python.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npython:\n  output-folder: $(python-sdks-folder)/machinelearning/azure-mgmt-machinelearningservices\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Tool Dependency for Azure SDK Python\nDESCRIPTION: This line specifies a local development dependency for the Azure SDK for Python project. It uses the '-e' flag to install the package in editable mode, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iotcentral/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Running Unfiltered Package Analysis\nDESCRIPTION: Shows how to execute the script without filtering out Inactive packages or those with future verification dates, providing a comprehensive analysis of all packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/old_packages/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython output_old_packages.py -f\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Requirements for Azure SDK Project - Plaintext\nDESCRIPTION: This snippet specifies a requirements-style dependency listing for a Python project, using both editable installs (-e) referencing local paths, and versioned packages from PyPI. The dependencies include Azure-specific SDK tools, core libraries, and third-party packages necessary for Azure Storage management and asynchronous operations. Inputs are package path strings or names, and the output is interpreted by pip to install the correct set of dependencies. There are no direct limitations, but the local paths must exist relative to the requirements file location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\nazure-mgmt-storage==20.1.0\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Setting Log Analytics Workspace ID\nDESCRIPTION: Sets the workspace ID variable needed for querying a specific Log Analytics workspace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLOGS_WORKSPACE_ID = \"<workspace_id>\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Tools in Editable Mode\nDESCRIPTION: This command installs the Azure SDK tools in development/editable mode using pip. The -e flag allows changes to the source code to be immediately reflected without reinstallation. The path points to the tools directory relative to the current file's location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/graphrbac/azure-graphrbac/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Install of Azure SDK Tools in Python\nDESCRIPTION: This line instructs pip to install the Azure SDK tools package in editable mode from a relative path. This allows changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-purview-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Sending Request with ExampleClient\nDESCRIPTION: Demonstrates sending a request using the ExampleClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.example.service import ExampleClient\n\nresponse = client.send_request(request) # makes the network call\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for registry-discovery\nDESCRIPTION: Configuration settings for the registry-discovery tag, specifying the input file for registry-discovery and the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'registry-discovery'\ninput-file:\n    - Microsoft.MachineLearningServices/preview/registry-discovery/registry-discovery.json\noutput-folder: $(python-sdks-folder)/registry_discovery\n```\n\n----------------------------------------\n\nTITLE: Executing a Specific Azure Service Bus Performance Test using perfstress\nDESCRIPTION: Demonstrates an example command to run the `ReceiveQueueMessageBatchTest` using the `perfstress` tool. It specifies parameters like running with 2 parallel instances (`--parallel=2`), a message size of 10240 bytes (`--message-size=10240`), receiving 100 messages (`--num-messages=100`), and using peeklock mode (`--peeklock`). Requires environment variables and dependencies to be set up.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/tests/perf_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-servicebus> perfstress ReceiveQueueMessageBatchTest --parallel=2 --message-size=10240 --num-messages=100 --peeklock\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Dependencies in Python\nDESCRIPTION: This snippet lists the dependencies for the Azure SDK for Python project. It includes a reference to local development tools, the Azure Identity package, and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elasticsan/azure-mgmt-elasticsan/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Preview Azure SDK Packages\nDESCRIPTION: Command for installing preview versions of Azure SDK packages using pip with the --pre flag.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --pre azure-mgmt-compute # will install only the latest Compute Management library\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK Python Project\nDESCRIPTION: This requirements file lists dependencies for an Azure SDK Python project. It includes local references to development tools and resource management packages using editable installs (-e flag), as well as the aiohttp library which is likely used for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redis/azure-mgmt-redis/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK Python Dynatrace Observability\nDESCRIPTION: This markdown document outlines the release history for the Azure SDK for Python's Dynatrace Observability module. It includes details about new features, breaking changes, and other modifications for each version release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dynatrace/azure-mgmt-dynatrace/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0 (2023-08-18)\n\n### Features Added\n\n  - Added operation MonitorsOperations.get_marketplace_saa_s_resource_details\n  - Added operation MonitorsOperations.get_metric_status\n  - Model MetricRules has a new parameter sending_metrics\n\n### Breaking Changes\n\n  - Model MonitorResourceUpdate no longer has parameter dynatrace_environment_properties\n  - Model MonitorResourceUpdate no longer has parameter marketplace_subscription_status\n  - Model MonitorResourceUpdate no longer has parameter monitoring_status\n  - Model MonitorResourceUpdate no longer has parameter plan_data\n  - Model MonitorResourceUpdate no longer has parameter user_info\n  - Parameter region of model LinkableEnvironmentRequest is now required\n  - Parameter tenant_id of model LinkableEnvironmentRequest is now required\n  - Parameter user_principal of model LinkableEnvironmentRequest is now required\n  - Parameter user_principal of model SSODetailsRequest is now required\n  - Removed operation MonitorsOperations.get_account_credentials\n  - Removed operation TagRulesOperations.update\n\n## 1.1.0b1 (2022-12-27)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 1.0.0 (2022-09-16)\n\n### Breaking Changes\n\n  - Client name is changed from `DynatraceObservability` to `DynatraceObservabilityMgmtClient`\n\n## 1.0.0b1 (2022-05-19)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Making user_assertion Keyword-Only in OnBehalfOfCredential (Python)\nDESCRIPTION: Change in version 1.7.0 where the `user_assertion` parameter in the constructor of `OnBehalfOfCredential` was made a keyword-only argument. It must now be specified using the keyword (e.g., `user_assertion=...`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nuser_assertion` in the ctor of `OnBehalfOfCredential`\n```\n\n----------------------------------------\n\nTITLE: Generating SDK with Autorest in PowerShell\nDESCRIPTION: Commands to run Autorest from the swagger folder to generate SDK code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Documenting Unreleased Changes in Azure SDK for Python (Markdown)\nDESCRIPTION: This section outlines the structure for documenting unreleased changes in version 1.1.0b1 of the Azure SDK for Python. It includes placeholders for features added, breaking changes, bugs fixed, and other changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Reservations SDK with pip\nDESCRIPTION: Commands to install the Azure Reservations management SDK and Azure Identity library using pip package manager. These packages are required for authenticating with and managing Azure Reservations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/reservations/azure-mgmt-reservations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-reservations\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Python 3.9 as Version Requirement\nDESCRIPTION: This plaintext snippet specifies Python 3.9 as the required Python version for the project. It may be used in a requirements file or dependency specification for the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/deployments/batch/environment_files/runtime.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-3.9\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure Python SDK Development\nDESCRIPTION: This requirements file defines the dependencies needed for Azure SDK for Python development or testing. It includes references to the Azure SDK tools package from a relative path, the Cognitive Services management package with a version constraint, and the azure-core package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-textanalytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-mgmt-cognitiveservices<12.0.0\nazure-core\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ArmTemplateParameters in PowerShell\nDESCRIPTION: Defines the optional 'ArmTemplateParameters' parameter, a Hashtable containing key-value pairs passed directly as parameters to the ARM template(s) during deployment. It's not required, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Azure SDK\nDESCRIPTION: A requirements file listing the dependencies needed for development with the Azure SDK for Python. It includes references to internal tools, the Azure Identity package, and the aiohttp library for asynchronous HTTP operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceregistry/azure-mgmt-deviceregistry/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release 1.0.0b1 in Markdown\nDESCRIPTION: Notes the initial release of the Azure AgriFood Farming library for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2021-05-25)\n\n- This is the initial release of the Azure AgriFood Farming library.\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown for Azure SDK Python\nDESCRIPTION: This Markdown document outlines the release history for the Azure SDK for Python. It includes multiple versions with categorized changes such as features added, breaking changes, bugs fixed, and other modifications. Each release is documented with its version number and release date (when available).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/template/azure-template/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Release History\n\n[comment]: # (Change log guidance: https://azure.github.io/azure-sdk/policies_releases.html#changelog-guidance)\n\n## 0.0.18b3 (Unreleased)\n\n### Features Added\n\n- Some feature\n\n### Breaking Changes\n\n- Some breaking change\n\n### Bugs Fixed\n\n- Some bug fix\n\n### Other Changes\n\n- Some other change\n\n## 0.0.18b2 (2020-09-04)\n\n### Bugs Fixed\n\n- Testing release tag version\n\n## 0.0.13b1 (2020-08-27)\n\n### Bugs Fixed\n\n- Testing out some alpha and beta versioning\n\n## 0.0.7 (2020-07-02)\n\n### Bugs Fixed\n\n- Test a successful Release\n\n## 0.0.6 (2020-05-20)\n\n### Bugs Fixed\n\n- Test a successful Release\n\n## 0.0.5 (2020-05-20)\n\n### Bugs Fixed\n\n- Test a successful Release\n\n## 0.0.2 (2020-03-24)\n\n### Bugs Fixed\n\n- Test Release Pipeline\n\n## 0.0.1 (2019-10-06)\n\n### Features Added\n\n- Template package\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Properties from Message Types in Python\nDESCRIPTION: Removed several properties from `Message`, `PeekMessage`, and `ReceivedMessage`: `enqueue_sequence_number`, `annotations` (from `Message`), and the instance variable `header`. This simplifies the message object model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Removed from Message, PeekMessage, ReceivedMessage:\nMessage.enqueue_sequence_number\nMessage.annotations\nMessage.header\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK\nDESCRIPTION: Requirements file listing package dependencies needed for Azure SDK Python development. Includes relative path installations for SDK tools and identity packages, along with namespace package and aiohttp networking library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../nspkg/azure-purview-nspkg\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Creating a certificate with azure-keyvault\nDESCRIPTION: Creates a certificate using the create_certificate method of KeyVaultClient in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noperation = client.create_certificate(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    certificate_name=\"cert-name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Requirements for Azure SDK Tools\nDESCRIPTION: Package requirement specification for including azure-sdk-tools in dev_requirements.txt\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -TenantId in PowerShell\nDESCRIPTION: Defines the required 'TenantId' parameter, a string representing the tenant ID used for both the Test Application and Provisioner Application service principals when a provisioner is specified. This value is passed to the ARM template. It's required for the 'Provisioner' parameter set, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Development Tools\nDESCRIPTION: Specifies a relative path to install Azure SDK development tools package from a local directory. Uses pip's editable install mode (-e flag) to link to tools in a sibling directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-mgmt-purview/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Initializing PurviewCatalogClient (Legacy)\nDESCRIPTION: Example showing how to initialize the deprecated PurviewCatalogClient using DefaultAzureCredential.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/MigrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.catalog import PurviewCatalogClient\nfrom azure.identity import DefaultAzureCredential\ncredential = DefaultAzureCredential()\nclient = PurviewCatalogClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Example TypeError for Incorrect Positional Arguments (Python)\nDESCRIPTION: An example `TypeError` message that users might encounter after upgrading to Azure SDK for Python version 2.0.0rc3/0.30.0rc3. This error indicates that too many positional arguments were passed to a model's `__init__` method, likely due to changes in the constructor signature in the RC3 update. The extra argument(s) should be removed from the calling code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTypeError: __init__() takes exactly 1 positional argument (2 given)\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Dependency Path in Plaintext\nDESCRIPTION: This line specifies a dependency on the Azure SDK tools package located in a relative directory. The -e flag indicates that the package should be installed in editable mode, which is useful for development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/oep/azure-mgmt-oep/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -WhatIf in PowerShell\nDESCRIPTION: Defines the common PowerShell 'WhatIf' switch parameter. When present, the cmdlet simulates the intended actions without actually executing them, showing what changes would occur. It's not required, is named, has no default value, doesn't accept pipeline input or wildcards, and has an alias 'wi'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Header\nDESCRIPTION: Markdown header structure defining the release history format with a version number and date\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 5.0.0 (2025-04-21)\n```\n\n----------------------------------------\n\nTITLE: Cloning Required Repositories for Azure SDK Integration Tests\nDESCRIPTION: Git commands to clone the Azure REST API specs and Azure SDK for Python repositories. These are prerequisites for generating integration tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generating-integration-test.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Azure/azure-rest-api-specs.git\ngit clone https://github.com/Azure/azure-sdk-for-python.git\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Example\nDESCRIPTION: Shows how to enable detailed logging for the client using the logging_enable parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.example.service import ExampleClient\n\nclient = ExampleClient(\n    endpoint=\"https://example.org\",\n    credential=DefaultAzureCredential(),\n    logging_enable=True\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Azure SDK Testing and Development\nDESCRIPTION: This code snippet lists the required Python packages and their specific versions for testing, CI, and development of the Azure SDK for Python. It includes testing frameworks like pytest, code coverage tools, security analysis tools, and various utility libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/test_tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# requirements leveraged by ci for testing\npytest==8.3.5\npytest-asyncio==0.24.0\npytest-cov==5.0.0\npytest-custom-exit-code==0.3.0\npytest-xdist==3.2.1\ncoverage==7.6.1\nbandit==1.6.2\npyproject-api==1.8.0\n\n# locking packages defined as deps from azure-sdk-tools\nJinja2==3.1.6\njson-delta==2.0.2\nreadme_renderer==43.0\npython-dotenv==1.0.1\npyyaml==6.0.2\nurllib3==2.2.3\nsix==1.17.0\n```\n\n----------------------------------------\n\nTITLE: Package Installation Instruction for azure-mgmt-monitor in Python\nDESCRIPTION: Reference to the replacement package azure-mgmt-monitor which should be used instead of the deprecated package. The instruction points to the PyPI page for the recommended package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[azure-mgmt-monitor](https://pypi.org/project/azure-mgmt-monitor/)\n```\n\n----------------------------------------\n\nTITLE: Setting PathRenameMode Parameter Location via Autorest Directive (YAML)\nDESCRIPTION: Similar to the BlobTagFilter directive, this Autorest directive targets the `PathRenameMode` parameter definition. It sets the `x-ms-parameter-location` extension to `method`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.PathRenameMode\n  transform: >\n    $[\"x-ms-parameter-location\"] = \"method\";\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Development Path\nDESCRIPTION: Specifies a pip-installable dependency reference to Azure SDK tools package located in a relative path three directories up from the current location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourcemover/azure-mgmt-resourcemover/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Multiapi Script Settings\nDESCRIPTION: Defines output folder structure and default API version settings for the generated SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noutput-folder: $(python-sdks-folder)/textanalytics/azure-ai-textanalytics/azure/ai/textanalytics/_generated/\ndefault-api: v3.1\nclear-output-folder: true\nperform-load: false\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 3.0.0 in Markdown\nDESCRIPTION: This snippet outlines the changes in version 3.0.0 of the Azure SDK for Python, including new features and breaking changes for NGINX management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.0 (2023-11-20)\n\n### Features Added\n\n  - Model NginxConfigurationPackage has a new parameter protected_files\n  - Model NginxDeploymentProperties has a new parameter scaling_properties\n  - Model NginxDeploymentProperties has a new parameter user_profile\n  - Model NginxDeploymentUpdateProperties has a new parameter scaling_properties\n  - Model NginxDeploymentUpdateProperties has a new parameter user_profile\n\n### Breaking Changes\n\n  - Model NginxCertificate no longer has parameter tags\n  - Model NginxConfiguration no longer has parameter tags\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script - Basic Usage\nDESCRIPTION: Example showing how to execute the migration script from within a service directory in the language repository\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# if downloading the file singly, cd to the directory containing generate-assets-json.ps1\ncd \"<target-language-repo>/sdk/<service>\"\n<path-to-transition-script>/generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Proper Use of TYPE_CHECKING for Import Optimization\nDESCRIPTION: Demonstrates when to use TYPE_CHECKING for import statements to avoid circular imports or reduce runtime costs, while ensuring regular type hints are always imported.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TYPE_CHECKING\n\n# No:\nif TYPE_CHECKING:\n    from typing import Union, TypeVar, Any\n\n# Yes:\nif TYPE_CHECKING:\n    from a import b  # avoiding a circular import\n    from expensive import c  # avoiding runtime costs\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes the aiohttp package with version constraints, a local development tool, and an internal Azure Identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.0; python_version >= '3.5'\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Declaring Editable Dependency on Azure Mgmt Resource Package in Python Requirements\nDESCRIPTION: Specifies an editable (`-e`) installation dependency on the `azure-mgmt-resource` package located at the relative path `../../resources/azure-mgmt-resource`. This facilitates direct development and testing of the resource management library, allowing changes in the source directory to be immediately effective in the Python environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sphere/azure-mgmt-sphere/dev_requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Override for DocumentModelAdministrationClientLROPoller (CopyTo)\nDESCRIPTION: YAML directive to override the default LRO poller with a custom DocumentModelAdministrationClientLROPoller for document model copying operations. Provides both sync and async implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    -   from: swagger-document\n        where: '$.paths[\"/documentModels/{modelId}:copyTo\"].post'\n        transform: >\n            $[\"x-python-custom-poller-sync\"] = \"...._polling.DocumentModelAdministrationClientLROPoller\";\n            $[\"x-python-custom-poller-async\"] = \".....aio._async_polling.AsyncDocumentModelAdministrationClientLROPoller\";\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Operations for Multi-Target SDK Generation - YAML\nDESCRIPTION: Specifies batch build targets using unique tags for both 'runtime' and 'authoring' variants of the Azure QnA service. This enables sequential or parallel SDK code generation for different API variants. Aids in automation when generating multiple related SDKs in a single batch process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nbatch:\n  - tag: release_runtime_1_1\n  - tag: release_authoring_1_1\n\n```\n\n----------------------------------------\n\nTITLE: Azure Maps Route SDK Configuration Settings\nDESCRIPTION: YAML configuration for Autorest including input specification, output settings, and generation parameters for the Azure Maps Route Python SDK\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntag: '1.0'\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/2e88f0e0951d1cdbe59db4dafbc48c93a723bfa2/specification/maps/data-plane/Route/preview/1.0/route.json\noutput-folder: ../azure/maps/route/_generated\nnamespace: azure.maps.route\npackage-name: azure-maps-route\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\ncredential-scopes: https://atlas.microsoft.com/.default\nclear-output-folder: true\npython: true\nno-async: false\nadd-credential: false\ntitle: MapsRouteClient\ndisable-async-iterators: true\npython-sdks-folder: $(python-sdks-folder)\npython3-only: true\nversion-tolerant: true\nmodels-mode: msrest\nshow-operations: true\nonly-path-and-body-parameters-positional: true\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Permissions for Azure AI Project\nDESCRIPTION: Shell command to fix insufficient storage permissions by assigning Storage Blob Data Contributor role. Used when encountering MLFlow artifact logging errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naz role assignment create --role \"Storage Blob Data Contributor\" --scope /subscriptions/<mySubscriptionID>/resourceGroups/<myResourceGroupName> --assignee-principal-type User --assignee-object-id \"<user-id>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure ML Python Client Library\nDESCRIPTION: Shell commands for installing the Azure Machine Learning Client Library for Python and its dependency, azure-identity, using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n pip install azure-ai-ml\\n pip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Development Dependencies for Azure SDK\nDESCRIPTION: This requirements file lists the necessary packages for Azure SDK development, including the Azure SDK tools, Azure Identity package, and aiohttp for asynchronous HTTP operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-mgmt-webpubsub/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Running Wheel Installation and Tests\nDESCRIPTION: Command to run tests on a wheel installation of a Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e whl -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Renaming Pod Identity Environment Variable\nDESCRIPTION: Breaking change in 1.7.0b3 where the environment variable `AZURE_POD_IDENTITY_TOKEN_URL` was renamed to `AZURE_POD_IDENTITY_AUTHORITY_HOST`. The new variable expects a host name (e.g., `http://169.254.169.254`) instead of a full URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_POD_IDENTITY_TOKEN_URL\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_POD_IDENTITY_AUTHORITY_HOST\n```\n\n----------------------------------------\n\nTITLE: Defining Azure SDK Python Dependencies\nDESCRIPTION: Specifies required Python package dependencies including local development tools, core Azure components, and external libraries needed for Azure SDK Python development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\naiohttp\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Renaming 'conversion' Definition to 'asset_conversion' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'conversion' definition in the Swagger document. It changes the client-side name of this definition to 'asset_conversion' in the generated Python code using the 'x-ms-client-name' extension.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion'\n    transform: >\n        $[\"x-ms-client-name\"] = \"asset_conversion\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools and AIOHTTP Dependencies\nDESCRIPTION: This snippet lists two dependencies: a local path to Azure SDK tools and the AIOHTTP library. The -e flag indicates that the Azure SDK tools should be installed in editable mode, allowing for development and testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting release history, including sections for unreleased beta versions and stable releases. It uses Markdown headers to organize version information and categories of changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-security-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0 (2020-12-10)\n```\n\n----------------------------------------\n\nTITLE: Running SchemaRegistry Performance Tests\nDESCRIPTION: Command to list available performance tests for SchemaRegistry after installing the required dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-schemaregistry> cd tests\n(env) ~/azure-schemaregistry/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Override for DocumentModelAdministrationClientLROPoller (Build Classifiers)\nDESCRIPTION: YAML directive to override the default LRO poller with a custom DocumentModelAdministrationClientLROPoller for document classifier building operations. Provides both sync and async implementations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    -   from: swagger-document\n        where: '$.paths[\"/documentClassifiers:build\"].post'\n        transform: >\n            $[\"x-python-custom-poller-sync\"] = \"...._polling.DocumentModelAdministrationClientLROPoller\";\n            $[\"x-python-custom-poller-async\"] = \".....aio._async_polling.AsyncDocumentModelAdministrationClientLROPoller\";\n```\n\n----------------------------------------\n\nTITLE: Listing Python Wheel Compatibility Tags\nDESCRIPTION: A comprehensive list of Python wheel compatibility tags following the PEP 425 standard (`{python_tag}-{abi_tag}-{platform_tag}`). These tags define the specific environments (Python version, ABI, Linux platform/architecture) for which Azure SDK for Python wheels are intended, including various 'manylinux' standards (e.g., manylinux1, manylinux2010, manylinux2014, and specific glibc versions) and platform-agnostic 'any' tags.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/sample_interpreter_tags/from_WSL_310.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npy36-none-manylinux1_x86_64\\npy36-none-linux_x86_64\\npy35-none-manylinux_2_35_x86_64\\npy35-none-manylinux_2_34_x86_64\\npy35-none-manylinux_2_33_x86_64\\npy35-none-manylinux_2_32_x86_64\\npy35-none-manylinux_2_31_x86_64\\npy35-none-manylinux_2_30_x86_64\\npy35-none-manylinux_2_29_x86_64\\npy35-none-manylinux_2_28_x86_64\\npy35-none-manylinux_2_27_x86_64\\npy35-none-manylinux_2_26_x86_64\\npy35-none-manylinux_2_25_x86_64\\npy35-none-manylinux_2_24_x86_64\\npy35-none-manylinux_2_23_x86_64\\npy35-none-manylinux_2_22_x86_64\\npy35-none-manylinux_2_21_x86_64\\npy35-none-manylinux_2_20_x86_64\\npy35-none-manylinux_2_19_x86_64\\npy35-none-manylinux_2_18_x86_64\\npy35-none-manylinux_2_17_x86_64\\npy35-none-manylinux2014_x86_64\\npy35-none-manylinux_2_16_x86_64\\npy35-none-manylinux_2_15_x86_64\\npy35-none-manylinux_2_14_x86_64\\npy35-none-manylinux_2_13_x86_64\\npy35-none-manylinux_2_12_x86_64\\npy35-none-manylinux2010_x86_64\\npy35-none-manylinux_2_11_x86_64\\npy35-none-manylinux_2_10_x86_64\\npy35-none-manylinux_2_9_x86_64\\npy35-none-manylinux_2_8_x86_64\\npy35-none-manylinux_2_7_x86_64\\npy35-none-manylinux_2_6_x86_64\\npy35-none-manylinux_2_5_x86_64\\npy35-none-manylinux1_x86_64\\npy35-none-linux_x86_64\\npy34-none-manylinux_2_35_x86_64\\npy34-none-manylinux_2_34_x86_64\\npy34-none-manylinux_2_33_x86_64\\npy34-none-manylinux_2_32_x86_64\\npy34-none-manylinux_2_31_x86_64\\npy34-none-manylinux_2_30_x86_64\\npy34-none-manylinux_2_29_x86_64\\npy34-none-manylinux_2_28_x86_64\\npy34-none-manylinux_2_27_x86_64\\npy34-none-manylinux_2_26_x86_64\\npy34-none-manylinux_2_25_x86_64\\npy34-none-manylinux_2_24_x86_64\\npy34-none-manylinux_2_23_x86_64\\npy34-none-manylinux_2_22_x86_64\\npy34-none-manylinux_2_21_x86_64\\npy34-none-manylinux_2_20_x86_64\\npy34-none-manylinux_2_19_x86_64\\npy34-none-manylinux_2_18_x86_64\\npy34-none-manylinux_2_17_x86_64\\npy34-none-manylinux2014_x86_64\\npy34-none-manylinux_2_16_x86_64\\npy34-none-manylinux_2_15_x86_64\\npy34-none-manylinux_2_14_x86_64\\npy34-none-manylinux_2_13_x86_64\\npy34-none-manylinux_2_12_x86_64\\npy34-none-manylinux2010_x86_64\\npy34-none-manylinux_2_11_x86_64\\npy34-none-manylinux_2_10_x86_64\\npy34-none-manylinux_2_9_x86_64\\npy34-none-manylinux_2_8_x86_64\\npy34-none-manylinux_2_7_x86_64\\npy34-none-manylinux_2_6_x86_64\\npy34-none-manylinux_2_5_x86_64\\npy34-none-manylinux1_x86_64\\npy34-none-linux_x86_64\\npy33-none-manylinux_2_35_x86_64\\npy33-none-manylinux_2_34_x86_64\\npy33-none-manylinux_2_33_x86_64\\npy33-none-manylinux_2_32_x86_64\\npy33-none-manylinux_2_31_x86_64\\npy33-none-manylinux_2_30_x86_64\\npy33-none-manylinux_2_29_x86_64\\npy33-none-manylinux_2_28_x86_64\\npy33-none-manylinux_2_27_x86_64\\npy33-none-manylinux_2_26_x86_64\\npy33-none-manylinux_2_25_x86_64\\npy33-none-manylinux_2_24_x86_64\\npy33-none-manylinux_2_23_x86_64\\npy33-none-manylinux_2_22_x86_64\\npy33-none-manylinux_2_21_x86_64\\npy33-none-manylinux_2_20_x86_64\\npy33-none-manylinux_2_19_x86_64\\npy33-none-manylinux_2_18_x86_64\\npy33-none-manylinux_2_17_x86_64\\npy33-none-manylinux2014_x86_64\\npy33-none-manylinux_2_16_x86_64\\npy33-none-manylinux_2_15_x86_64\\npy33-none-manylinux_2_14_x86_64\\npy33-none-manylinux_2_13_x86_64\\npy33-none-manylinux_2_12_x86_64\\npy33-none-manylinux2010_x86_64\\npy33-none-manylinux_2_11_x86_64\\npy33-none-manylinux_2_10_x86_64\\npy33-none-manylinux_2_9_x86_64\\npy33-none-manylinux_2_8_x86_64\\npy33-none-manylinux_2_7_x86_64\\npy33-none-manylinux_2_6_x86_64\\npy33-none-manylinux_2_5_x86_64\\npy33-none-manylinux1_x86_64\\npy33-none-linux_x86_64\\npy32-none-manylinux_2_35_x86_64\\npy32-none-manylinux_2_34_x86_64\\npy32-none-manylinux_2_33_x86_64\\npy32-none-manylinux_2_32_x86_64\\npy32-none-manylinux_2_31_x86_64\\npy32-none-manylinux_2_30_x86_64\\npy32-none-manylinux_2_29_x86_64\\npy32-none-manylinux_2_28_x86_64\\npy32-none-manylinux_2_27_x86_64\\npy32-none-manylinux_2_26_x86_64\\npy32-none-manylinux_2_25_x86_64\\npy32-none-manylinux_2_24_x86_64\\npy32-none-manylinux_2_23_x86_64\\npy32-none-manylinux_2_22_x86_64\\npy32-none-manylinux_2_21_x86_64\\npy32-none-manylinux_2_20_x86_64\\npy32-none-manylinux_2_19_x86_64\\npy32-none-manylinux_2_18_x86_64\\npy32-none-manylinux_2_17_x86_64\\npy32-none-manylinux2014_x86_64\\npy32-none-manylinux_2_16_x86_64\\npy32-none-manylinux_2_15_x86_64\\npy32-none-manylinux_2_14_x86_64\\npy32-none-manylinux_2_13_x86_64\\npy32-none-manylinux_2_12_x86_64\\npy32-none-manylinux2010_x86_64\\npy32-none-manylinux_2_11_x86_64\\npy32-none-manylinux_2_10_x86_64\\npy32-none-manylinux_2_9_x86_64\\npy32-none-manylinux_2_8_x86_64\\npy32-none-manylinux_2_7_x86_64\\npy32-none-manylinux_2_6_x86_64\\npy32-none-manylinux_2_5_x86_64\\npy32-none-manylinux1_x86_64\\npy32-none-linux_x86_64\\npy31-none-manylinux_2_35_x86_64\\npy31-none-manylinux_2_34_x86_64\\npy31-none-manylinux_2_33_x86_64\\npy31-none-manylinux_2_32_x86_64\\npy31-none-manylinux_2_31_x86_64\\npy31-none-manylinux_2_30_x86_64\\npy31-none-manylinux_2_29_x86_64\\npy31-none-manylinux_2_28_x86_64\\npy31-none-manylinux_2_27_x86_64\\npy31-none-manylinux_2_26_x86_64\\npy31-none-manylinux_2_25_x86_64\\npy31-none-manylinux_2_24_x86_64\\npy31-none-manylinux_2_23_x86_64\\npy31-none-manylinux_2_22_x86_64\\npy31-none-manylinux_2_21_x86_64\\npy31-none-manylinux_2_20_x86_64\\npy31-none-manylinux_2_19_x86_64\\npy31-none-manylinux_2_18_x86_64\\npy31-none-manylinux_2_17_x86_64\\npy31-none-manylinux2014_x86_64\\npy31-none-manylinux_2_16_x86_64\\npy31-none-manylinux_2_15_x86_64\\npy31-none-manylinux_2_14_x86_64\\npy31-none-manylinux_2_13_x86_64\\npy31-none-manylinux_2_12_x86_64\\npy31-none-manylinux2010_x86_64\\npy31-none-manylinux_2_11_x86_64\\npy31-none-manylinux_2_10_x86_64\\npy31-none-manylinux_2_9_x86_64\\npy31-none-manylinux_2_8_x86_64\\npy31-none-manylinux_2_7_x86_64\\npy31-none-manylinux_2_6_x86_64\\npy31-none-manylinux_2_5_x86_64\\npy31-none-manylinux1_x86_64\\npy31-none-linux_x86_64\\npy30-none-manylinux_2_35_x86_64\\npy30-none-manylinux_2_34_x86_64\\npy30-none-manylinux_2_33_x86_64\\npy30-none-manylinux_2_32_x86_64\\npy30-none-manylinux_2_31_x86_64\\npy30-none-manylinux_2_30_x86_64\\npy30-none-manylinux_2_29_x86_64\\npy30-none-manylinux_2_28_x86_64\\npy30-none-manylinux_2_27_x86_64\\npy30-none-manylinux_2_26_x86_64\\npy30-none-manylinux_2_25_x86_64\\npy30-none-manylinux_2_24_x86_64\\npy30-none-manylinux_2_23_x86_64\\npy30-none-manylinux_2_22_x86_64\\npy30-none-manylinux_2_21_x86_64\\npy30-none-manylinux_2_20_x86_64\\npy30-none-manylinux_2_19_x86_64\\npy30-none-manylinux_2_18_x86_64\\npy30-none-manylinux_2_17_x86_64\\npy30-none-manylinux2014_x86_64\\npy30-none-manylinux_2_16_x86_64\\npy30-none-manylinux_2_15_x86_64\\npy30-none-manylinux_2_14_x86_64\\npy30-none-manylinux_2_13_x86_64\\npy30-none-manylinux_2_12_x86_64\\npy30-none-manylinux2010_x86_64\\npy30-none-manylinux_2_11_x86_64\\npy30-none-manylinux_2_10_x86_64\\npy30-none-manylinux_2_9_x86_64\\npy30-none-manylinux_2_8_x86_64\\npy30-none-manylinux_2_7_x86_64\\npy30-none-manylinux_2_6_x86_64\\npy30-none-manylinux_2_5_x86_64\\npy30-none-manylinux1_x86_64\\npy30-none-linux_x86_64\\ncp310-none-any\\npy310-none-any\\npy3-none-any\\npy39-none-any\\npy38-none-any\\npy37-none-any\\npy36-none-any\\npy35-none-any\\npy34-none-any\\npy33-none-any\\npy32-none-any\\npy31-none-any\\npy30-none-any\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Relative Path using pip\nDESCRIPTION: This command installs the Azure SDK tools from a relative path as an editable package. The -e flag allows for changes to the tools to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourceconnector/azure-mgmt-resourceconnector/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Wheel Generation in setup.cfg\nDESCRIPTION: Configuration snippet for setup.cfg that enables universal wheel building. When this flag is set, the wheel is compatible with both Python 2 and Python 3.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/engineering_assumptions.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[bdist_wheel]\nuniversal=1\n```\n\n----------------------------------------\n\nTITLE: Referencing Development Dependency from Git for Python Projects\nDESCRIPTION: This snippet uses the pip VCS URL format to specify an external dependency on the Microsoft Authentication Library for Python from the AzureAD GitHub repository, locked to the 'dev' branch. It is intended to pull the latest development changes rather than a stable release, ensuring up-to-date integration in the Azure SDK for Python project. The dependency is resolved at install time, requiring git to be available in the environment and internet connectivity to clone from GitHub.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/dev_requirement_samples/remote_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngit+https://github.com/AzureAD/microsoft-authentication-library-for-python@dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Dependency for Python SDK\nDESCRIPTION: This line specifies a dependency on Azure SDK development tools located in a relative directory. The '-e' flag indicates an editable install, allowing for development and testing of the tools alongside the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storagepool/azure-mgmt-storagepool/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies\nDESCRIPTION: Commands for setting up the test environment by installing required dependencies and the package itself in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-data-tables> pip install -r dev_requirements.txt\n(env) ~/azure-data-tables> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode (pip)\nDESCRIPTION: Specifies the Azure SDK tools package to be installed in development/editable mode, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/customproviders/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Applying Autorest Directives for Renaming and Removing Properties in YAML\nDESCRIPTION: This YAML snippet applies Autorest directives to specific models within an API definition, primarily using the previously declared 'rename-property' directive. It iterates through various models (e.g., `AnomalyAlertConfiguration`, `DataFeed`, `MetricFeedback`) and renames specific properties (e.g., `anomalyAlertingConfigurationId` to `id`, `metricAlertingConfigurations` to `metricAlertConfigurations`). It also includes a `remove-property` directive to remove the `headers` property from the `WebhookHookParameter` model and the `type` property from `MetricBoundaryCondition`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-model: AnomalyAlertConfiguration\n    rename-property:\n      from: anomalyAlertingConfigurationId\n      to: id\n  - where-model: AnomalyAlertConfiguration\n    rename-property:\n      from: metricAlertingConfigurations\n      to: metricAlertConfigurations\n  - where-model: AnomalyAlertConfiguration\n    rename-property:\n      from: splitAlertByDimensions\n      to: dimensionsToSplitAlert\n  - where-model: MetricAlertConfiguration\n    rename-property:\n      from: anomalyDetectionConfigurationId\n      to: detectionConfigurationId\n  - where-model: MetricAlertConfiguration\n    rename-property:\n      from: snoozeFilter\n      to: alertSnoozeCondition\n  - where-model: FeedbackDimensionFilter\n    rename-property:\n      from: dimension\n      to: dimensionKey\n  - where-model: NotificationHook\n    rename-property:\n      from: hookName\n      to: name\n  - where-model: NotificationHook\n    rename-property:\n      from: hookId\n      to: id\n  - where-model: EmailHookParameter\n    rename-property:\n      from: toList\n      to: emailsToAlert\n  - where-model: WebhookHookParameter\n    remove-property: headers\n  - where-model: DataFeedMetric\n    rename-property:\n      from: metricName\n      to: name\n  - where-model: DataFeedMetric\n    rename-property:\n      from: metricId\n      to: id\n  - where-model: DataFeedMetric\n    rename-property:\n      from: metricDisplayName\n      to: displayName\n  - where-model: DataFeedMetric\n    rename-property:\n      from: metricDescription\n      to: description\n  - where-model: DataFeedDimension\n    rename-property:\n      from: dimensionName\n      to: name\n  - where-model: DataFeedDimension\n    rename-property:\n      from: dimensionDisplayName\n      to: displayName\n  - where-model: DataFeed\n    rename-property:\n      from: dataFeedName\n      to: name\n  - where-model: DataFeed\n    rename-property:\n      from: dataFeedId\n      to: id\n  - where-model: DataFeed\n    rename-property:\n      from: viewMode\n      to: accessMode\n  - where-model: AnomalyDetectionConfiguration\n    rename-property:\n      from: anomalyDetectionConfigurationId\n      to: id\n  - where-model: AnomalyDetectionConfiguration\n    rename-property:\n      from: wholeMetricConfiguration\n      to: wholeSeriesDetectionCondition\n  - where-model: AnomalyDetectionConfiguration\n    rename-property:\n      from: dimensionGroupOverrideConfigurations\n      to: seriesGroupDetectionConditions\n  - where-model: AnomalyDetectionConfiguration\n    rename-property:\n      from: seriesOverrideConfigurations\n      to: seriesDetectionConditions\n  - where-model: MetricSeriesGroupDetectionCondition\n    rename-property:\n      from: seriesOverrideConfigurations\n      to: seriesDetectionConditions\n  - where-model: MetricBoundaryCondition\n    rename-property:\n      from: metricId\n      to: companionMetricId\n  - where-model: MetricFeedback\n    rename-property:\n      from: feedbackId\n      to: id\n  - where-model: AnomalyFeedbackValue\n    rename-property:\n      from: anomalyValue\n      to: value\n  - where-model: ChangePointFeedbackValue\n    rename-property:\n      from: changePointValue\n      to: value\n  - where-model: CommentFeedbackValue\n    rename-property:\n      from: commentValue\n      to: value\n  - where-model: PeriodFeedbackValue\n    rename-property:\n      from: periodValue\n      to: value\n  - where-model: DataSourceCredential\n    rename-property:\n      from: dataSourceCredentialType\n      to: credentialType\n  - where-model: DataSourceCredential\n    rename-property:\n      from: dataSourceCredentialName\n      to: name\n  - where-model: DataSourceCredential\n    rename-property:\n      from: dataSourceCredentialId\n      to: id\n  - where-model: DataSourceCredential\n    rename-property:\n      from: dataSourceCredentialDescription\n      to: description\n  - where-model: AnomalyProperty\n    rename-property:\n      from: anomalySeverity\n      to: severity\n  - where-model: AnomalyProperty\n    rename-property:\n      from: anomalyStatus\n      to: status\n  - where-model: DataPointAnomaly\n    rename-property:\n      from: anomalyDetectionConfigurationId\n      to: detectionConfigurationId\n  - where-model: AnomalyIncident\n    rename-property:\n      from: anomalyDetectionConfigurationId\n      to: detectionConfigurationId\n  - where-model: AnomalyIncident\n    rename-property:\n      from: incidentId\n      to: id\n  - where-model: IncidentProperty\n    rename-property:\n      from: maxSeverity\n      to: severity\n  - where-model: IncidentProperty\n    rename-property:\n      from: incidentStatus\n      to: status\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: timestampList\n      to: timestamps\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: valueList\n      to: values\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: isAnomalyList\n      to: isAnomaly\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: periodList\n      to: periods\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: expectedValueList\n      to: expectedValues\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: lowerBoundaryList\n      to: lowerBounds\n  - where-model: MetricEnrichedSeriesData\n    rename-property:\n      from: upperBoundaryList\n      to: upperBounds\n  - where-model: AnomalyAlert\n    rename-property:\n      from: alertId\n      to: id\n  - where-model: MetricBoundaryCondition\n    remove-property: type\n  - where-model: MetricSeriesData\n    rename-property:\n      from: timestampList\n      to: timestamps\n  - where-model: MetricSeriesData\n    rename-property:\n      from: valueList\n      to: values\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Queue Storage SDK using AutoRest in PowerShell\nDESCRIPTION: Navigate to the swagger folder and run AutoRest to generate the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest --use=C:/work/autorest.python --version=2.0.4280\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor OpenTelemetry Exporter Package\nDESCRIPTION: Command to install the Azure Monitor OpenTelemetry Exporter Python package using pip. The --pre flag indicates installing a pre-release version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install azure-monitor-opentelemetry-exporter --pre\n```\n\n----------------------------------------\n\nTITLE: Using the Wheel Environment in Tox\nDESCRIPTION: Command to use the 'whl' Tox environment which installs the wheel and runs tests using the wheel. This is used for testing across all supported platforms.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e whl -c <path to tox.ini> --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable Requirements for Azure SDK - plaintext\nDESCRIPTION: This snippet specifies dependencies for a Python project using pip's editable mode (the -e flag), referencing two local modules: azure-sdk-tools and azure-mgmt-resource, and an additional aiohttp dependency. Editable installs are suitable for local development, allowing real-time updates to these modules without needing repeated reinstalls. No special parameters are used except for the editable flag, and this configuration is appropriate for development environments rather than production deployment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/extendedlocation/azure-mgmt-extendedlocation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Python\nDESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Python, including version 1.1.0b1, 1.0.0, and 1.0.0b1. It details new features, model changes, and other modifications for each release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storagepool/azure-mgmt-storagepool/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (2022-11-09)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 1.0.0 (2021-09-28)\n\n**Features**\n\n  - Model IscsiTargetCreate has a new parameter managed_by\n  - Model IscsiTargetCreate has a new parameter managed_by_extended\n  - Model IscsiTargetUpdate has a new parameter managed_by\n  - Model IscsiTargetUpdate has a new parameter managed_by_extended\n  - Model DiskPoolUpdate has a new parameter managed_by\n  - Model DiskPoolUpdate has a new parameter managed_by_extended\n  - Model DiskPoolUpdate has a new parameter sku\n  - Model DiskPool has a new parameter managed_by\n  - Model DiskPool has a new parameter managed_by_extended\n  - Model IscsiTarget has a new parameter managed_by\n  - Model IscsiTarget has a new parameter managed_by_extended\n  - Model IscsiTarget has a new parameter sessions\n  - Model DiskPoolCreate has a new parameter managed_by\n  - Model DiskPoolCreate has a new parameter managed_by_extended\n  - Added operation DiskPoolsOperations.begin_upgrade\n  - Added operation group ResourceSkusOperations\n\n## 1.0.0b1 (2021-05-26)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Azure Data Factory Breaking Changes\nDESCRIPTION: Documentation of breaking changes in the Azure SDK for Python affecting PipelinesOperations.create_run and SSISPackageLocation model signatures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Breaking changes:\n# - Operation PipelinesOperations.create_run has a new signature\n# - Model SSISPackageLocation has a new signature\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Purview SDK Generation for Python\nDESCRIPTION: This YAML configuration specifies input files, output settings, and various options for generating the Azure Purview SDK for Python. It includes API specifications for Synapse services, sets the package name, version, and security settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/preview/2023-04-18-preview/linkConnections.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/preview/2022-03-01-preview/runNotebook.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/preview/2021-11-01-preview/kqlScripts.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/preview/2021-07-01-preview/symsSync.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/preview/2021-06-01-preview/sparkConfigurations.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/preview/2021-06-01-preview/entityTypes/SparkConfiguration.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/artifacts.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/bigDataPools.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/dataflows.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/datasets.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/gitintegration.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/integrationRuntimes.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/library.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/linkedServices.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/notebooks.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/pipelines.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/sparkJobDefinitions.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/sqlPools.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/sqlScripts.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/triggers.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/workspace.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/DataFlow.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/Dataset.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/LinkedService.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/Notebook.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/Pipeline.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/SparkJobDefinition.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/SqlScript.json\n  - https://github.com/Azure/azure-rest-api-specs/blob/0da14ec4f475435b9d7d0ba06e49f05a5daac226/specification/synapse/data-plane/Microsoft.Synapse/stable/2020-12-01/entityTypes/Trigger.json\n\npayload-flattening-threshold: 1\noutput-folder: ../\npackage-name: azure-synapse-artifacts\nnamespace: azure.synapse.artifacts\nlicense-header: MICROSOFT_MIT_NO_VERSION\npackage-version: 0.20.0\nversion-tolerant: false\npackage-pprint-name: Synapse Artifacts\nsecurity: AADToken\nsecurity-scopes: https://dev.azuresynapse.net/.default\nmodelerfour:\n  lenient-model-deduplication: true\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.0 Release in Markdown\nDESCRIPTION: Lists new features added in version 1.2.0 of the Azure SDK for Python, including updates to CustomRule and PolicySettings models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.0 (2024-04-15)\n\n### Features Added\n\n  - Model CustomRule has a new parameter group_by\n  - Model PolicySettings has a new parameter javascript_challenge_expiration_in_minutes\n  - Model PolicySettings has a new parameter scrubbing_rules\n  - Model PolicySettings has a new parameter state\n```\n\n----------------------------------------\n\nTITLE: Enforcing Constant Values with Final in Python\nDESCRIPTION: Shows the use of the Final typing extension (typing_extensions.Final) to ensure a variable ('MAX_BLOB_SIZE') cannot be re-assigned elsewhere in code, indicating true constant intent. Only static type checkers enforce this, not Python at runtime. Useful for constants and immutable configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Final\\n\\nMAX_BLOB_SIZE: Final = 4 * 1024 * 1024\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 with npm\nDESCRIPTION: Command to install Autorest v3 globally using npm package manager\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required Python packages for an Azure SDK project. It includes local package references and Azure-specific libraries for identity and resource management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/oracledatabase/azure-mgmt-oracledatabase/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: IpTag Feature Addition - Version 1.7.0\nDESCRIPTION: Adds IpTag functionality to restrict IP address allocation ranges and updates the default API version to 2017-11-01.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n**Features**\n\n- Add iptag. IpTag is way to restrict the range of IPaddresses to be allocated.\n- Default API version is now 2017-11-01\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Text Blocklist with Azure Content Safety Python SDK\nDESCRIPTION: This code shows how to create or update a text blocklist using the Azure Content Safety BlocklistClient in Python. Required dependencies are azure-ai-contentsafety and azure-core. The snippet sets up environment credentials, initializes the client, and calls create_or_update_text_blocklist with a name and description. It prints confirmation and handles HTTP errors elegantly, making it suitable for blocklist setup workflows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    from azure.ai.contentsafety import BlocklistClient\n    from azure.ai.contentsafety.models import TextBlocklist\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create a Blocklist client\n    client = BlocklistClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    blocklist_description = \"Test blocklist management.\"\n\n    try:\n        blocklist = client.create_or_update_text_blocklist(\n            blocklist_name=blocklist_name,\n            options=TextBlocklist(blocklist_name=blocklist_name, description=blocklist_description),\n        )\n        if blocklist:\n            print(\"\\nBlocklist created or updated: \")\n            print(f\"Name: {blocklist.blocklist_name}, Description: {blocklist.description}\")\n    except HttpResponseError as e:\n        print(\"\\nCreate or update text blocklist failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -Location in PowerShell\nDESCRIPTION: Defines the optional 'Location' parameter, a string specifying the Azure region where resources should be created. If omitted, defaults are based on the target cloud environment (e.g., 'westus' for AzureCloud, 'usgovvirginia' for AzureUSGovernment). It's not required, is named, has no default value (effectively cloud-dependent), and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Referencing Azure SDK Tools for Python Development\nDESCRIPTION: This line specifies a dependency on the azure-sdk-tools package located in a relative path. It uses the -e flag to install the package in editable mode, allowing for real-time changes during development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-monitoring/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - Azure SDK Python v2.0.0\nDESCRIPTION: Release notes documenting features added and breaking changes in version 2.0.0, including new operation groups and model parameter changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confluent/azure-mgmt-confluent/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0 (2023-11-20)\n\n### Features Added\n\n  - Added operation group AccessOperations\n  - Added operation group ValidationsOperations\n  - Model ConfluentAgreementResource has a new parameter system_data\n  - Model OfferDetail has a new parameter private_offer_id\n  - Model OfferDetail has a new parameter private_offer_ids\n  - Model OfferDetail has a new parameter term_id\n  - Model OrganizationResource has a new parameter link_organization\n  - Model OrganizationResource has a new parameter system_data\n  - Model UserDetail has a new parameter aad_email\n  - Model UserDetail has a new parameter user_principal_name\n\n### Breaking Changes\n\n  - Parameter email_address of model UserDetail is now required\n  - Parameter id of model OfferDetail is now required\n  - Parameter offer_detail of model OrganizationResource is now required\n  - Parameter plan_id of model OfferDetail is now required\n  - Parameter plan_name of model OfferDetail is now required\n  - Parameter publisher_id of model OfferDetail is now required\n  - Parameter term_unit of model OfferDetail is now required\n  - Parameter user_detail of model OrganizationResource is now required\n```\n\n----------------------------------------\n\nTITLE: Release Version 1.0.0b1 Initial Version\nDESCRIPTION: Documents the initial beta release of version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computeschedule/azure-mgmt-computeschedule/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2024-09-26)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Do and Don't: Constraining TypeVars Using Bound vs Explicit Types in Python\nDESCRIPTION: This snippet compares using TypeVar with a bound argument versus providing explicit types. It highlights using bound=Union[int, str] as preferred, while TypeVar with variadic type constraints can behave unexpectedly. Requires only the typing module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar, Union\n\nS = TypeVar(\"S\", bound=Union[int, str])  # Yes\n\nT = TypeVar(\"T\", int, str)  # No, can have unexpected behavior\n```\n\n----------------------------------------\n\nTITLE: Running a LightGBM Python Example\nDESCRIPTION: Basic command to execute one of the LightGBM Python examples. This shows how to run the simple_example.py file which demonstrates the basic functionality of LightGBM.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/batch_setup/light_gbm_examples/python-guide/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython simple_example.py\n```\n\n----------------------------------------\n\nTITLE: Evaluating Simple Query and Response\nDESCRIPTION: Example showing evaluation of a basic query-response pair with poor task adherence\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/task_adherence.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = task_adherence_evaluator(query=\"What are the best practices for maintaining a healthy rose garden during the summer?\",\n                                  response=\"Make sure to water your roses regularly and trim them occasionally.\",\n                                 )\npprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Event Grid Namespace using Azure CLI\nDESCRIPTION: Azure CLI command to create an Event Grid Namespace resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz eventgrid namespace create --location <location> --resource-group <resource-group-name> --name <resource-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ProvisionerApplicationSecret in PowerShell\nDESCRIPTION: Defines the optional 'ProvisionerApplicationSecret' parameter, a string representing the service principal secret (password) used to provision test resources when a specific provisioner application ID is provided. This value is not passed to the ARM template. It's applicable to the 'Provisioner' set, not required, named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Python Package Dependencies\nDESCRIPTION: This snippet lists local Python package dependencies, typically found in a requirements file (e.g., `requirements.txt` or `dev_requirements.txt`). The `-e` flag indicates that `azure-sdk-tools` should be installed in editable mode, meaning changes in the source directory will reflect in the installed package without reinstalling. Both packages are referenced using relative paths, indicating they are part of the same larger repository structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/azurelargeinstance/azure-mgmt-azurelargeinstance/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Structured Data Representation for Azure SDK Python\nDESCRIPTION: This code snippet represents a structured data format, possibly for use in machine learning models or data analysis within the Azure SDK for Python. Each line contains an index followed by three feature values, separated by spaces.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/dsl_pipeline/spark_job_in_pipeline/kmeans_sample/dataset/sample_kmeans_data.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 1:0.0 2:0.0 3:0.0\n1 1:0.1 2:0.1 3:0.1\n2 1:0.2 2:0.2 3:0.2\n3 1:9.0 2:9.0 3:9.0\n4 1:9.1 2:9.1 3:9.1\n5 1:9.2 2:9.2 3:9.2\n```\n\n----------------------------------------\n\nTITLE: Declaring Editable Local Path Dependencies in Python Requirements\nDESCRIPTION: Specifies dependencies on local packages by referencing their relative paths with the '-e' flag in a requirements file for pip. This approach installs these packages in 'editable' mode, allowing live updates without reinstallation; it is particularly useful during active development of internal libraries. Requires pip (Python package installer), and assumes the relative paths are correct and accessible when pip install is executed from the requirements file. Limitations: Only works if the paths are valid and assumes a development environment setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databox/azure-mgmt-databox/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\nLANGUAGE: python\nCODE:\n```\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog showing version 3.1.0b1 (unreleased) and version 3.0.1 sections with standard categorization for changes including features, breaking changes, bugs fixed and other changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-language-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 3.0.1 (2019-03-01)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Test Resources\nDESCRIPTION: This PowerShell snippet demonstrates how to set environment variables for Azure Key Vault test resources using the setx command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nsetx KEYVAULT_TENANT_ID ${env:KEYVAULT_TENANT_ID}\nsetx KEYVAULT_CLIENT_ID ${env:KEYVAULT_CLIENT_ID}\nsetx KEYVAULT_CLIENT_SECRET ${env:KEYVAULT_CLIENT_SECRET}\nsetx KEYVAULT_SUBSCRIPTION_ID ${env:KEYVAULT_SUBSCRIPTION_ID}\nsetx KEYVAULT_RESOURCE_GROUP ${env:KEYVAULT_RESOURCE_GROUP}\nsetx KEYVAULT_LOCATION ${env:KEYVAULT_LOCATION}\nsetx KEYVAULT_SKU ${env:KEYVAULT_SKU}\nsetx AZURE_KEYVAULT_URL ${env:AZURE_KEYVAULT_URL}\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2024-01-01-preview\nDESCRIPTION: Configuration settings for the v2024-01-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, mfe, and workspaceRP along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2024-01-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2024-01-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2024-01-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2024-01-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2024-01-01-preview/mfe.json\n  - Microsoft.MachineLearningServices/preview/2024-01-01-preview/workspaceRP.json\noutput-folder: $(python-sdks-folder)/v2024_01_01_preview\n```\n\n----------------------------------------\n\nTITLE: Example TypeError for Unexpected Keyword Argument (Python)\nDESCRIPTION: An example `TypeError` message that users might encounter after upgrading to Azure SDK for Python version 2.0.0rc3/0.30.0rc3. This error indicates that an unexpected keyword argument (like 'type') was passed to a model's `__init__` method, likely because that parameter was removed in the RC3 update. The parameter can be safely removed from the calling code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nTypeError: __init__() got an unexpected keyword argument 'type'\n```\n\n----------------------------------------\n\nTITLE: Example Azure SDK Repository Structure\nDESCRIPTION: Shows the typical directory structure of Azure SDK repositories, where service packages are organized by service directories with ci.yml files that control build definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/scripts/job-matrix/pullrequest-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\nsdk/\n  storage\n    Azure.Storage.Blobs\n    Azure.Storage.Queues\n    ...\n  <service>\n    <service-package-1>\n    ..\n    <service-package-N>\n    // the ci.yml is what AZDO build defs are based upon\n    ci.yml\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency on azure-identity via Relative Path (Configuration)\nDESCRIPTION: Declares a dependency on the `azure-identity` package located at the relative path `../../identity/azure-identity`. This instructs the package manager (like pip) to install the package found at this specific local directory path, rather than from a package index like PyPI. This is useful for depending on a local or development version of a package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/astro/azure-mgmt-astro/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for workspace-dataplane\nDESCRIPTION: Configuration settings for the workspace-dataplane tag, specifying the input swagger file and output folder for Python SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'workspace-dataplane'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/workspace-dataplane/swagger.json\noutput-folder: $(python-sdks-folder)/workspace_dataplane\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Requirements file specifying the necessary Python package dependencies for Azure SDK development, including development tools and Azure Identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Health Management Package for Python\nDESCRIPTION: Commands to install the Azure Resource Health Management package and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resourcehealth/azure-mgmt-resourcehealth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-resourcehealth\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: PyPI Configuration File Example\nDESCRIPTION: Example .pypirc configuration file for manual package uploads to PyPI. Contains repository URL, username and password fields for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/release.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[pypi]\nrepository = https://pypi.python.org/pypi\nusername = <yourusername>\npassword = <yourpassword>\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Dependencies in Requirements File Format\nDESCRIPTION: This snippet lists Python package dependencies typically found in a `requirements.txt` file or similar configuration. It uses the '-e' flag to specify editable installations for local packages located at relative paths ('../../../tools/azure-sdk-tools' and '../../resources/azure-mgmt-resource'). This allows developers to work on these packages directly and have changes reflected without reinstalling. It also declares a dependency on the external package 'aiohttp'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for azure.core.pipeline.transport\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `automodule` directive to automatically pull documentation from the specified Python module (`azure.core.pipeline.transport`). The `:members:`, `:undoc-members:`, and `:inherited-members:` options instruct Sphinx to include documentation for all members, even those without docstrings, and members inherited from base classes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/doc/azure.core.pipeline.transport.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.core.pipeline.transport\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Example Performance Test Command\nDESCRIPTION: Example command for running the EncodeContentTest with parallel execution, custom duration, schema size, and multiple values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-schemaregistry-avroencoder/tests> perfstress EncodeContentTest --parallel=2 --duration=10 --schema-size=500 --num-values=2\n```\n\n----------------------------------------\n\nTITLE: Modifying Enum Names and Values in Azure SDK for Python\nDESCRIPTION: These directives change the names of specific enums and their associated values, such as renaming 'anomalyScopeType' to 'metricAnomalyAlertScopeType' and 'NeedRollupEnum' to 'DataFeedRollupType'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $(\"definitions\")[\"MetricAlertConfiguration\"][\"properties\"][\"anomalyScopeType\"]\n    transform: >\n      $[\"x-ms-enum\"][\"name\"] = \"MetricAnomalyAlertScopeType\";\n\ndirective:\n  - from: swagger-document\n    where: $(\"definitions\")\n    transform: >\n      $[\"DataFeed\"][\"properties\"][\"needRollup\"][\"x-ms-enum\"][\"name\"] = \"DataFeedRollupType\";\n```\n\n----------------------------------------\n\nTITLE: Listing Role Assignments in Azure Synapse\nDESCRIPTION: Shows how to retrieve and list role assignments in an Azure Synapse workspace. This example fetches assignments with optional filters for principal ID, role name, and scopes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_data/match_trial_clinical_note.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# List role assignments\nrole_assignments = access_control_client.list_role_assignments(\n    principalId=\"<principal-id>\",  # optional\n    roleName=\"<role-name>\",  # optional\n    scope=\"<scope>\"  # optional\n)\nfor role_assignment in role_assignments:\n    print(role_assignment)\n```\n\n----------------------------------------\n\nTITLE: Making API Version Parameter Required in Swagger\nDESCRIPTION: Modifies the `ApiVersionParameter` definition in the Swagger document using an AutoRest directive. It sets the `required` property to `true`, which results in the generated client and client context constructors requiring an `api_version` parameter upon initialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.parameters.ApiVersionParameter\n    transform: >\n      $.required = true\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Azure SDK Component\nDESCRIPTION: This configuration block, likely from a requirements file (`requirements.txt` or similar), lists Python package dependencies. It uses the `-e` flag to specify editable installs for local packages (`azure-sdk-tools`, `azure-mgmt-resource`), indicating development dependencies. It also lists standard package dependencies (`azure-core`, `azure-identity`, `azure-mgmt-core`, `aiohttp`) required for the project component to function.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-mgmt-healthdataaiservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode\nDESCRIPTION: This command installs the Azure SDK tools package in editable mode from a relative path. It allows for development and testing of the tools package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-managedprivateendpoints/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Accessing SDK Package Version (v1.0.0b1+)\nDESCRIPTION: Shows how to access the installed package version using the standard `__version__` attribute, replacing the previous method of importing a dedicated 'version' module, starting from version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n__version__\n```\n\n----------------------------------------\n\nTITLE: Version Import Change - Python SDK\nDESCRIPTION: Change in version import pattern from version module to __version__ variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-cosmosdb/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__version__\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Geolocation Python Package\nDESCRIPTION: Command to install the Azure Maps Geolocation client library using pip package manager. The --pre flag indicates this is a pre-release version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-geolocation --pre\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest Settings for Azure File Storage SDK\nDESCRIPTION: YAML configuration specifying input file, output folder, namespace, and other settings for generating the Azure File Storage SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/storage/data-plane/Microsoft.FileStorage/stable/2025-05-05/file.json\noutput-folder: ../azure/storage/fileshare/_generated\nnamespace: azure.storage.fileshare\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nvanilla: true\nclear-output-folder: true\npython: true\nversion-tolerant: false\nmodelerfour:\n    seal-single-value-enum-by-default: true\n```\n\n----------------------------------------\n\nTITLE: Running the Performance Test Tool\nDESCRIPTION: Command to list available performance tests by using the perfstress tool in the tests directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-schemaregistry-avroencoder> cd tests\n(env) ~/azure-schemaregistry-avroencoder/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: mypy Output Showing NameError for Forward Reference in Class Method\nDESCRIPTION: Provides sample error output when Python evaluates a type hint referencing an undefined class. Highlights the necessity of forward references for type hints in method return type annotations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_24\n\nLANGUAGE: cmd\nCODE:\n```\n    class TreeHouse:\\n  File \\\"testing_mypy.py\\\", line 12, in TreeHouse\\n    def build(cls) -> TreeHouse:\\nNameError: name 'TreeHouse' is not defined\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies in Requirements File for Azure SDK for Python\nDESCRIPTION: This requirements file specifies the dependencies needed for development work on the Azure SDK for Python. It references local Azure SDK tools via an editable install and includes the aiohttp package for asynchronous HTTP functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-cosmosdb/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Maps Weather Client with PowerShell\nDESCRIPTION: Specific AutoRest command to generate the Azure Maps Weather Python client using the provided swagger file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nautorest swagger/README.md --python-sdks-folder=<location-of-your-sdk-dir>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode using pip\nDESCRIPTION: Specifies an editable package installation for Azure SDK tools from a relative path. This allows changes to the tools directory to be immediately available without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-imagesearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Changelog template showing version history including unreleased changes and the initial 1.0.0 release from March 18, 2020. Organizes changes into categories: Features Added, Breaking Changes, Bugs Fixed, and Other Changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-digitaltwins-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0 (2020-03-18)\n```\n\n----------------------------------------\n\nTITLE: Command Structure of CLI Module\nDESCRIPTION: Shows the typical file structure of an Azure CLI command module folder, including help files, command definitions, custom methods, and parameter information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/find_sdk/find_sdk_in_cli_command.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└─command module folder\n    └─ _help.py    # Store help information\n    └─ command.py    # Store command definition\n    └─ custom.py    # Store Custom method\n    └─ _params.py   # Store parameters information\n    └─....\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.1.0 Release in Markdown\nDESCRIPTION: Details features added in version 1.1.0, including new operations for PoliciesOperations and updates to FrontDoor and FrontDoorProperties models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0 (2023-05-19)\n\n### Features Added\n\n  - Added operation PoliciesOperations.begin_update\n  - Added operation PoliciesOperations.list_by_subscription\n  - Model FrontDoor has a new parameter extended_properties\n  - Model FrontDoorProperties has a new parameter extended_properties\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Release History Markdown\nDESCRIPTION: Markdown formatted changelog tracking version history from 1.0.0b1 to 1.0.0b4, including dates and categorized changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b4 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0b3 (2024-12-12)\n\n### Features Added\n\n- Integrated support for SAS-based authentication\n\n## 1.0.0b2 (2024-11-06)\n\n### Breaking Changes\n\n- Updated `get_route_matrix` to accept a `RouteMatrixQuery` object instead of a dictionary.\n\n### Other Changes\n\n- Fix route API version error\n- Remove python 3.6 support\n- Fix Sphinx errors\n\n## 1.0.0b1 (2022-10-13)\n\n### Features Added\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies with Local Package References\nDESCRIPTION: This requirements file lists development dependencies for Azure SDK for Python. It includes local references to Azure SDK tools and core packages using the -e flag for editable installations, and specifies a version constraint for aiohttp that only applies to Python 3.8 and above.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-weather/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.8'\n```\n\n----------------------------------------\n\nTITLE: Removing Corrupted Assets Directory using PowerShell\nDESCRIPTION: PowerShell command to completely remove the .assets directory from the azure-sdk-for-python repository root. This resolves issues where test proxy fails to fetch recordings from the assets repository due to corrupted git configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-Item -Recurse -Force .\\.assets\\\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure of a release history document for the Azure SDK for Python. It includes version numbers, dates, and categorized changes such as features added and breaking changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storagemover/azure-mgmt-storagemover/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.1.0 (2024-06-17)\n\n### Features Added\n\n  - Model Agent has a new parameter time_zone\n  - Model Agent has a new parameter upload_limit_schedule\n  - Model AgentUpdateParameters has a new parameter upload_limit_schedule\n\n## 2.0.0 (2023-10-23)\n\n### Features Added\n\n  - Model ProxyResource has a new parameter system_data\n  - Model Resource has a new parameter system_data\n  - Model TrackedResource has a new parameter system_data\n\n### Breaking Changes\n\n  - Model AzureStorageBlobContainerEndpointUpdateProperties has a new required parameter endpoint_type\n  - Model EndpointBaseUpdateProperties has a new required parameter endpoint_type\n  - Model NfsMountEndpointUpdateProperties has a new required parameter endpoint_type\n\n## 2.0.0b1 (2023-07-21)\n\n### Features Added\n\n  - Model ProxyResource has a new parameter system_data\n  - Model Resource has a new parameter system_data\n  - Model TrackedResource has a new parameter system_data\n\n### Breaking Changes\n\n  - Model AzureStorageBlobContainerEndpointUpdateProperties has a new required parameter endpoint_type\n  - Model EndpointBaseUpdateProperties has a new required parameter endpoint_type\n  - Model NfsMountEndpointUpdateProperties has a new required parameter endpoint_type\n\n## 1.0.0 (2023-03-07)\n\n### Other changes\n\n  - First GA version\n\n## 1.0.0b1 (2023-02-20)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Package (Pip)\nDESCRIPTION: Specifies an editable installation requirement for the `azure-sdk-tools` package using pip. The `-e` flag ensures that the package located at the relative path `../../../tools/azure-sdk-tools` is installed in a way that allows direct use of the source code, facilitating development. This line is typically found within a `requirements.txt` file or used directly with the `pip install` command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-mgmt-attestation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages and their versions for an Azure SDK project. Includes core dependencies like azure-identity, environment management with python-dotenv, GitHub API clients, testing frameworks like pytest and tox, and build tools like wheel and setuptools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/auto_release/requirement.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nazure-identity\npython-dotenv==0.15.0\nghapi==0.1.19\nPyGithub==1.55\npackaging==24.1\npytest==6.2.5\nfastcore==1.3.25\ntox==4.15.0\nwheel==0.46.1\nsetuptools==78.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Tools in Editable Mode\nDESCRIPTION: This pip requirement specifies an editable installation (-e flag) of the Azure SDK tools located in a relative path. Editable installs allow developers to modify the source code without reinstalling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-customvision/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Adding URL parameter to operations in Swagger document using YAML directive\nDESCRIPTION: YAML directive to add a URL parameter to each operation and modify the paths accordingly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        $[property][\"parameters\"].push({\"$ref\": \"#/parameters/Url\"});\n\n        var oldName = property;\n        // For service operations (where the path is just '/') we need to\n        // remove the '/' at the begining to avoid having an extra '/' in\n        // the final URL.\n        if (property === '/' || property.startsWith('/?'))\n        {\n            var newName = '{url}' + property.substring(1);\n        }\n        else\n        {\n            var newName = '{url}' + property;\n        }\n        $[newName] = $[oldName];\n        delete $[oldName];\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Azure ImpactReporting Management SDK and Dependencies in Bash\nDESCRIPTION: This snippet shows the bash commands to install the Azure ImpactReporting Management SDK (azure-mgmt-impactreporting) and the Azure Identity library (azure-identity) using pip. These dependencies are required before authenticating or using the management client. Users must have Python 3.8+ and pip installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/impactreporting/azure-mgmt-impactreporting/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-impactreporting\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services SDK and Identity Dependencies (bash)\nDESCRIPTION: Installs the required Python packages 'azure-mgmt-recoveryservices' and 'azure-identity' using pip. These dependencies are necessary for utilizing the Recovery Services management client and handling Azure identity authentication in Python projects. Run these commands in your terminal to set up the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-recoveryservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining the TooManyRedirectsError Exception in Python\nDESCRIPTION: This snippet defines the `TooManyRedirectsError` class, a subclass of `HttpResponseError`. This exception is raised when the maximum number of allowed redirect attempts is reached during an HTTP request. It stores the history of requests/responses that led to the redirects.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TooManyRedirectsError(HttpResponseError):\n    def __init__(self, history, *args, **kwargs):\n        self.history = history\n        message = \"Reached maximum redirect attempts.\"\n        super(TooManyRedirectsError, self).__init__(message, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using Async Support in Azure DNS SDK for Python\nDESCRIPTION: Shows how to use the async client from the 'aio' namespace for asynchronous operations in the Azure DNS SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.dns.aio import DnsManagementClient\n\nasync with DnsManagementClient(credential, subscription_id) as async_client:\n    result = await async_client.zones.get(resource_group_name, zone_name)\n```\n\n----------------------------------------\n\nTITLE: Operations Additions - Azure SDK Python\nDESCRIPTION: List of new operations added to various Operations classes including AccessControlLists, ExternalNetworks, InternalNetworks, and NetworkDevices operations. These additions enhance network management and configuration capabilities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managednetworkfabric/azure-mgmt-managednetworkfabric/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Added Operations\nAccessControlListsOperations.begin_resync()\nAccessControlListsOperations.begin_update_administrative_state()\nAccessControlListsOperations.begin_validate_configuration()\nExternalNetworksOperations.begin_update_static_route_bfd_administrative_state()\nExternalNetworksOperations.list_by_l3_isolation_domain()\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Azure SDK Models\nDESCRIPTION: Lists significant breaking changes to various Azure SDK models including QuickBooks, PostgreSQL, and MySQL linked services. These changes affect parameter requirements and model structures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nParameter access_token_secret of model QuickBooksLinkedService is now required\nParameter access_token of model QuickBooksLinkedService is now required\nModel PostgreSqlLinkedService has a new required parameter connection_string\nModel MySqlLinkedService has a new required parameter connection_string\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Release history changelog showing version updates, features and breaking changes across multiple releases for Azure SDK Python Peering Service module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/peering/azure-mgmt-peering/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0b1 (2022-11-01)\n\n### Features Added\n\n  - Added operation PeeringServicesOperations.initialize_connection_monitor\n  - Added operation PrefixesOperations.create_or_update\n  - Added operation PrefixesOperations.delete\n  - Added operation PrefixesOperations.get\n  - Added operation group CdnPeeringPrefixesOperations\n  - Added operation group ConnectionMonitorTestsOperations\n  - Added operation group LookingGlassOperations\n  - Added operation group PeeringServiceCountriesOperations\n  - Added operation group ReceivedRoutesOperations\n  - Added operation group RegisteredAsnsOperations\n  - Added operation group RegisteredPrefixesOperations\n  - Added operation group RpUnbilledPrefixesOperations\n  - Model DirectConnection has a new parameter error_message\n  - Model DirectConnection has a new parameter microsoft_tracking_id\n  - Model ErrorResponse has a new parameter error\n  - Model ExchangeConnection has a new parameter error_message\n  - Model Operation has a new parameter service_specification\n  - Model PeerAsn has a new parameter error_message\n  - Model PeerAsn has a new parameter peer_contact_detail\n  - Model PeeringService has a new parameter log_analytics_workspace_properties\n  - Model PeeringService has a new parameter provider_backup_peering_location\n  - Model PeeringService has a new parameter provider_primary_peering_location\n  - Model PeeringService has a new parameter sku\n  - Model PeeringServicePrefix has a new parameter error_message\n  - Model PeeringServicePrefix has a new parameter events\n  - Model PeeringServicePrefix has a new parameter peering_service_prefix_key\n  - Model PeeringServiceProvider has a new parameter peering_locations\n\n### Breaking Changes\n\n  - Model ErrorResponse no longer has parameter code\n  - Model ErrorResponse no longer has parameter message\n  - Model PeerAsn no longer has parameter peer_contact_info\n  - Operation LegacyPeeringsOperations.list has a new parameter asn\n  - Operation LegacyPeeringsOperations.list has a new parameter direct_peering_type\n  - Operation PeeringServiceLocationsOperations.list has a new parameter country\n  - Operation PrefixesOperations.list_by_peering_service has a new parameter expand\n  - Removed operation group PeeringServicePrefixesOperations\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Release history entry showing version 1.0.0 release date for Azure SDK Python package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managednetworkfabric/azure-mgmt-managednetworkfabric/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2023-07-19)\n\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Purview Datamap Package using pip\nDESCRIPTION: Command to install the Azure Purview Datamap Python package using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-datamap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-purview-datamap\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet outlines project dependencies for a Python environment, typically found in a `requirements.txt` file. It includes an editable installation (`-e`) of a local package located at `../../../tools/azure-sdk-tools`, allowing changes in the source to be reflected directly. It also specifies the `aiohttp` library, an asynchronous HTTP client/server framework for Python, as a required dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoretable/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Management Dependencies\nDESCRIPTION: Commands to install the required Azure Communication Management package and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-mgmt-communication/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-communication\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -Environment in PowerShell\nDESCRIPTION: Defines the optional 'Environment' parameter, a string specifying the target Azure cloud environment (e.g., 'AzureCloud', 'AzureUSGovernment'). It defaults to 'AzureCloud' (Azure Public Cloud). It's not required, is named, defaults to 'AzureCloud', and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: AzureCloud\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Specifies required dependencies for Azure SDK Python development including local package references and external dependencies. Uses -e flag for editable installs of local packages and specifies minimum version for aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../nspkg/azure-purview-nspkg\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.0.0b1 Release in Markdown\nDESCRIPTION: Details major changes in the beta version 1.0.0b1, including breaking changes to the credential system, configuration, and operation parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2021-02-09)\n\nThis is beta preview version.\nFor detailed changelog please refer to equivalent stable version 10.2.0 (https://pypi.org/project/azure-mgmt-network/10.2.0/)\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n```\n\n----------------------------------------\n\nTITLE: Adding New Properties to Cluster Model in Python\nDESCRIPTION: Updates to the Cluster model in version 2.1.0b1, adding new properties for analytics output settings, secret archive settings, and vulnerability scanning settings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nModel `Cluster` added property `analytics_output_settings`\nModel `Cluster` added property `secret_archive_settings`\nModel `Cluster` added property `vulnerability_scanning_settings`\n```\n\n----------------------------------------\n\nTITLE: Creating Pytest Fixtures for Test Setup and Teardown\nDESCRIPTION: Example showing how to implement a pytest fixture in conftest.py that handles both setup and teardown of test resources. The fixture uses yield to separate setup from teardown code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests-advanced.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom devtools_testutils.azure_recorded_testcase import get_credential\n\n@pytest.fixture(scope=\"session\")\ndef setup_teardown_fixture():\n    # Note that we can't reference AzureRecordedTestCase.get_credential but can use the module-level function\n    client = ServiceClient(\"...\", get_credential())\n    client.set_up_resource()\n    yield  # <-- Tests run here, and execution resumes after they finish\n    client.tear_down_resources()\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Azure SDK Python Development\nDESCRIPTION: A requirements.txt file listing the dependencies needed for Azure SDK development in Python. It references the azure-sdk-tools package from a relative path and includes the azure-core package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-videosearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-core\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Storage Service in Python\nDESCRIPTION: This code creates a new Azure Storage Service using the Service Management API. It specifies the service name, description, label, and location for the new storage account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nname = \"mystorageservice\"\ndesc = name\nlabel = name\nlocation = 'West US'\n\nresult = sms.create_storage_account(name, desc, label, location=location)\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Release History Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, new features, bug fixes, and breaking changes across multiple beta releases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b9 (2025-02-14)\n\n### Features Added\n\n* Added support for chat completion messages with `developer` role.\n* Updated package document with an example of how to set custom HTTP request headers,\nand an example of providing chat completion \"messages\" as an array of Python `dict` objects.\n* Add a descriptive Exception error message when `load_client` function or\n`get_model_info` method fails to run on an endpoint that does not support the `/info` route.\n\n### Bugs Fixed\n\n* Fix for Exception raised while parsing Chat Completions streaming response, in some rare cases, for\nmultibyte UTF-8 languages like Chinese ([GitHub Issue 39565](https://github.com/Azure/azure-sdk-for-python/issues/39565)).\n\n## 1.0.0b8 (2025-01-29)\n\n### Features Added\n\n* Added support for Chat Completions with audio input. See new sample `sample_chat_completions_with_audio_data.py`.\n\n### Bugs Fixed\n\n* Fix a bug that caused filtering of a package with token usage from Azure OpenAI models in the streaming mode.\n\n## 1.0.0b7 (2025-01-15)\n\n### Features Added\n\n* Added a client for Image Embeddings, named `ImageEmbeddingsClient`. See package README.md and new samples.\n* Added support for Chat Completions response message in JSON format that adheres to a given JSON schema. Also known\nas \"structured output\". See new samples `sample_chat_completions_with_structured_output.py` and\n`sample_chat_completions_with_structured_output_pydantic.py`.\n* Made input argument `content` a positional argument (in addition to keyword argument), in the constructors of\n`UserMessage`, `SystemMessage`, `AssistantMessage` and `ToolMessage`. For example, you no longer need to write\n`UserMessage(content=\"my message\")`. Simply write `UserMessage(\"my message\")`. All samples were updated accordingly.\n\n### Breaking Changes\n\n* If you previously configured your `ChatCompletionClient.complete()` call to output JSON format without a scheme, you have this in your code: `response_format=ChatCompletionsResponseFormatJSON()`. To maintain the same functionality, replace this with `response_format=\"json_object\"`. We however recommend that you now switch to output JSON format with a provided schema if your AI model supports it: `response_format=JsonSchemaFormat(...)`.\n\n### Bugs Fixed\n\n* Fix a bug that would cause an error when tracing was enabled and azure-core-tracing-opentelemetry was not installed and asynchronous chat completion was used.\n* Enforce distinct timestamps on prompt and completion tracing events to preserve the order for chat history.\n\n## 1.0.0b6 (2024-11-11)\n\n### Features Added\n\n* OpenTelemetry tracing:\n  * Method `AIInferenceInstrumentor().instrument()` updated with an input argument `enable_content_recording`.\n  * Calling `AIInferenceInstrumentor().instrument()` twice no longer results in an exception.\n  * Added method `AIInferenceInstrumentor().is_content_recording_enabled()`\n* Support [Prompty](https://github.com/microsoft/prompty) and prompt template from string. PromptTemplate class outputs an array of dictionary with OpenAI compatible message format.\n\n### Bugs Fixed\n\n* Fix tracing for asynchronous streaming.\n\n## 1.0.0b5 (2024-10-16)\n\n### Features Added\n\n* Support for OpenTelemetry tracing. Please find more information in the package [README.md](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/README.md).\n* When constructing clients using input `credential` of type `AzureKeyCredential`, two HTTP request headers are sent simultaneously for authentication: `Authentication: Beater <key>` and `api-key: <key>` (previously only the first one was sent). This is to support different inference services, removing the need for the application to explicitly specify an additional HTTP request header.\n\n## 1.0.0b4 (2024-08-30)\n\n### Features Added\n\n* Support chat completion streaming response with function arguments (tool calls). Add new classes\n`StreamingChatResponseMessageUpdate` and `StreamingChatResponseToolCallUpdate`.\n* Support text embeddings result in base64 encoded string format.\n* Nicely formated print of chat completions and embeddings result objects.\n\n### Breaking Changes\n\n* Classes `ChatCompletionsToolSelectionPreset`, `ChatCompletionsNamedToolSelection` and `ChatCompletionsFunctionToolSelection` renamed to `ChatCompletionsToolChoicePreset` `ChatCompletionsNamedToolChoice` and `ChatCompletionsNamedToolChoiceFunction` respectively.\n* Update the object type of `embeddings` property on `EmbeddingsResult`, from `embedding: List[float]` to `embedding: Union[str, List[float]]`.\n* Instead of base class `ChatCompletionsToolCall` and derived class `ChatCompletionsFunctionToolCall`, we now have a flat representation of only one class `ChatCompletionsToolCall` that that represents a function tool. This is because the only support tool is a function call.\n\n### Bugs Fixed\n\n* Fix setting of chat completions response format, to allow response in JSON format. See classes `ChatCompletionsResponseFormat` (base class) and\nderived classes `ChatCompletionsResponseFormatJSON` and `ChatCompletionsResponseFormatText`.\n\n## 1.0.0b3 (2024-07-31)\n\n### Features Added\n\n* Allow setting default chat completions configuration in the `ChatCompletionsClient` constructor.\n* Allow setting default embeddings configuration in the `EmbeddingsClient` constructor.\n* Add `model` as an optional input argument to the `embed` method of `EmbeddingsClient`.\n\n## 1.0.0b2 (2024-06-24)\n\n### Features Added\n\nAdd `model` as an optional input argument to the `complete` method of `ChatCompletionsClient`.\n\n### Breaking Changes\n\nThe field `input_tokens` was removed from class `EmbeddingsUsage`, as this was never defined in the\nREST API and the service never returned this value.\n\n## 1.0.0b1 (2024-06-11)\n\n* Initial beta version\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example for New-TestResources.ps1\nDESCRIPTION: A simple example showing how to use the script in a desktop environment. This creates a new AAD application and Service Principal for running live tests against the created test resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount -Subscription 'REPLACE_WITH_SUBSCRIPTION_ID'\nNew-TestResources.ps1 keyvault\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements file lists the dependencies needed for the Azure SDK for Python project. It includes a local development dependency (azure-sdk-tools) referenced by a relative path and the azure-core package which provides fundamental functionality for Azure SDK clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-face/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-core\n```\n\n----------------------------------------\n\nTITLE: Template Variables for Chatbot Interaction\nDESCRIPTION: Template syntax demonstrating placeholder variables for inserting dynamic content like names, chatbot name, and file content using double curly brace notation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/synthetic/simulator/templates/summarization.md#2025-04-23_snippet_0\n\nLANGUAGE: template\nCODE:\n```\nYour name is {{ name }} and you're talking to {{ chatbot_name }} about summarizing a document.\nYou need first to ask {{ chatbot_name }} to summarize the file {{ filename }}.\n<|im_start|>\nFile {{ filename }} content:\n{{ file_content }}\n<|im_end|>\n\nReminder, you need to first ask {{ chatbot_name }} to summarize the document.\n```\n\n----------------------------------------\n\nTITLE: Using AzureOperationPoller with Result in Python\nDESCRIPTION: Example of how to use an asynchronous operation that returns an AzureOperationPoller with a result. This pattern shows creating an asynchronous operation and then waiting for its result.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/exceptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync_poller = client.network_security_groups.create_or_update(myparameters)\nresult = async_poller.result()\n```\n\n----------------------------------------\n\nTITLE: Configuring Confidential Ledger Client Generation\nDESCRIPTION: YAML configuration for generating the main Confidential Ledger client. Specifies input specifications, output location, package details and generation options for the Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/confidentialledger/data-plane/Microsoft.ConfidentialLedger/preview/2024-12-09-preview/confidentialledger.json\noutput-folder: ../azure/confidentialledger\nnamespace: azure.confidentialledger\npackage-name: azure-confidentialledger\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: false\nno-namespace-folders: true\ntitle: ConfidentialLedgerClient\nversion-tolerant: true\npackage-version: 1.1.3\npython: true\n```\n\n----------------------------------------\n\nTITLE: Setting live mode in testsettings_local.cfg\nDESCRIPTION: Configuration setting for enabling live mode in the Azure SDK test framework, to be added to testsettings_local.cfg file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nlive-mode: true\n```\n\n----------------------------------------\n\nTITLE: Setting up DefaultAzureCredential with PowerShell Exclusion in Python\nDESCRIPTION: Creates a DefaultAzureCredential instance with the PowerShell credential explicitly excluded from the authentication chain.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nDefaultAzureCredential(exclude_powershell_credential=True)\n```\n\n----------------------------------------\n\nTITLE: Translating to Multiple Target Languages - Azure Text Translator - Python\nDESCRIPTION: This snippet shows how to translate an input text to multiple target languages (e.g., Czech, Spanish, German) in one API call with the text_translator SDK. Detected input language and confidence score are printed along with translations for each specified target. Inputs: list of target languages, input texts. Outputs: detected source language and translations per target language. Exception handling ensures robust behavior.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    to_language = [\\\"cs\\\", \\\"es\\\", \\\"de\\\"]\\n    input_text_elements = [\\\"This is a test\\\"]\\n\\n    response = text_translator.translate(body=input_text_elements, to_language=to_language)\\n    translation = response[0] if response else None\\n\\n    if translation:\\n        detected_language = translation.detected_language\\n        if detected_language:\\n            print(\\n                f\\\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\\\"\\n            )\\n        for translated_text in translation.translations:\\n            print(f\\\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\\\")\\n\\nexcept HttpResponseError as exception:\\n    if exception.error is not None:\\n        print(f\\\"Error Code: {exception.error.code}\\\")\\n        print(f\\\"Message: {exception.error.message}\\\")\n```\n\n----------------------------------------\n\nTITLE: Defining Editable Local Dependency in Python Requirements\nDESCRIPTION: Specifies a package installed in editable mode from a local, relative path, pointing to the 'azure-sdk-tools' utility used for development or build tooling. This requires pip and a local copy of the package to be present at '../../../tools/azure-sdk-tools'. The '-e' flag ensures changes to the source are reflected without reinstalling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This code snippet lists the required dependencies for the Azure SDK for Python project. It includes internal Azure SDK tools, resource management, core components, identity, and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computefleet/azure-mgmt-computefleet/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Media Services SDK for Python\nDESCRIPTION: Commands to install the Azure Media Services management package and the Azure Identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/media/azure-mgmt-media/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-media\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Replacing Manifest Get Response Schema with Binary Stream\nDESCRIPTION: Applies an AutoRest directive to modify the `200` OK response schema for the GET operation on the `/v2/{name}/manifests/{reference}` path in Swagger. It replaces the original schema (likely `ManifestWrapper`) with a binary stream (`type: string`, `format: binary`). This allows the SDK to receive the manifest content directly as a stream, enabling efficient SHA256 hash calculation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/swagger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.paths[\"/v2/{name}/manifests/{reference}\"].get.responses[\"200\"]\n  transform: >\n      $.schema = {\n          \"type\": \"string\",\n          \"format\": \"binary\"\n      };\n```\n\n----------------------------------------\n\nTITLE: SansIOHTTPPolicy Implementation Pattern for Azure Pipeline\nDESCRIPTION: Implementation pattern for SansIOHTTPPolicy, a simple abstract class that can modify requests or responses without IO operations. These policies can work in either Pipeline or AsyncPipeline contexts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef on_request(self, request):\n    \"\"\"Is executed before sending the request to next policy.\"\"\"\n\ndef on_response(self, request, response):\n    \"\"\"Is executed after the request comes back from the policy.\"\"\"\n\ndef on_exception(self, request):\n    \"\"\"Is executed if an exception is raised while executing this policy.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Connectivity SDK Packages with pip - Bash\nDESCRIPTION: Demonstrates use of pip to install the azure-mgmt-hybridconnectivity and azure-identity Python packages. These are essential dependencies for interacting with the Azure Hybridconnectivity service and authenticating via Azure Active Directory. Input is two pip commands; outputs are installed supporting libraries. Python 3.8+ and pip must already be available. This snippet should be run in a shell environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridconnectivity/azure-mgmt-hybridconnectivity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hybridconnectivity\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2023-10-01\nDESCRIPTION: Configuration settings for the v2023-10-01 stable API version, specifying input files for machineLearningServices, registries, workspaceFeatures, and mfe along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2023-10-01'\ninput-file:\n  - Microsoft.MachineLearningServices/stable/2023-10-01/machineLearningServices.json\n  - Microsoft.MachineLearningServices/stable/2023-10-01/registries.json\n  - Microsoft.MachineLearningServices/stable/2023-10-01/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/stable/2023-10-01/mfe.json\noutput-folder: $(python-sdks-folder)/v2023_10_01\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Detailed changelog tracking version updates, breaking changes, new features, and bugfixes for the Azure SDK Python package. Includes significant changes to credential system, client configuration, and async support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningcompute/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2022-11-01)\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 1.0.0b1 (2021-05-13)\n\nThis is beta preview version.\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n\n## 0.4.1 (2018-05-29)\n\n**Bugfixes**\n\n  - Compatibility of the sdist with wheel 0.31.0\n  - msrestazure dependency version range\n\n## 0.4.0 (2018-01-02)\n\n**Features**\n\n  - Delete all resources associated with cluster with the optional\n    deleteAll paramater.\n\n## 0.3.0 (2017-10-25)\n\n**Features**\n\n  - ACS orchestrator properties property is now optional.\n\n## 0.2.0 (2017-10-17)\n\n**Features**\n\n  - Kubernetes orchestrator service principal property is now optional.\n\n## 0.1.0 (2017-09-22)\n\n**Features**\n\n  - Initial private preview release.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Timeout Parameter from Send Method in Python\nDESCRIPTION: Removed the `timeout` parameter from `ServiceBusSender.send()` (now `send_messages`). Timeouts and retries should now be configured via the retry options when creating the `ServiceBusClient`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\n# Removed parameter:\nServiceBusSender.send_messages(messages) # No timeout parameter\n```\n\n----------------------------------------\n\nTITLE: Renaming Conversion 'outputLocation' to 'outputSettings' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML targeting the 'outputLocation' property within the 'conversion_settings' definition. It renames the client-side representation of this property to 'outputSettings' in the generated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion_settings.properties.outputLocation'\n    transform: >\n        $[\"x-ms-client-name\"] = \"outputSettings\";\n```\n\n----------------------------------------\n\nTITLE: Using KeyVaultBackupClient for Pre-Backup and Pre-Restore Operations\nDESCRIPTION: Added methods for checking if it's possible to perform full key backup or restore operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nKeyVaultBackupClient.begin_pre_backup()\nKeyVaultBackupClient.begin_pre_restore()\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK Python Development\nDESCRIPTION: This requirements file lists two dependencies: a local reference to Azure SDK tools and the aiohttp library. The -e flag indicates that the tools package should be installed in editable mode from a relative path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redisenterprise/azure-mgmt-redisenterprise/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ProvisionerApplicationId in PowerShell\nDESCRIPTION: Defines the required 'ProvisionerApplicationId' parameter for the 'Provisioner' set, a string representing the Application ID of the AAD service principal used for provisioning test resources. If omitted, the caller's context is used. Specific Graph API permissions ('Application.Read.All', 'Application.ReadWrite.OwnedBy') are beneficial but not strictly required if Test Application details are provided manually. This value is not passed to the ARM template. It's required for the 'Provisioner' set, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Networkcloud Management Client in Python\nDESCRIPTION: This code demonstrates how to authenticate the NetworkCloudMgmtClient using DefaultAzureCredential. It requires the AZURE_SUBSCRIPTION_ID environment variable to be set. The client can then be used to interact with Azure Networkcloud services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.networkcloud import NetworkCloudMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetworkCloudMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK for Python\nDESCRIPTION: Lists required development dependencies for the Azure SDK for Python project, including references to local tools and identity packages using relative file paths. This format is typically used in pip requirements files or similar dependency management configurations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/graphservices/azure-mgmt-graphservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This configuration snippet defines the Python package dependencies for an Azure SDK component using the pip requirements file format. It includes editable installs (`-e`) for local development packages (`azure-sdk-tools`, `azure-identity`) located in relative paths, a dependency on the core Azure library (`azure-core`), a specific Azure management library (`azure-mgmt-communication`), and external libraries (`aiohttp`, `parameterized`, `python-dateutil`) with minimum version constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\n../azure-mgmt-communication\naiohttp>=3.0\nparameterized>=0.7.3\npython-dateutil>=2.8.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Version history changelog detailing changes across multiple releases including API version updates, Python version support changes, and internal bugfixes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-accesscontrol/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.8.0 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 0.7.0 (2021-08-10)\n\n- Updated API version to \"2020-12-01\"\n\n## 0.6.0 (2021-03-09)\n\n- Internal bugfixes (re-generated with latest generator)\n- Stop Python 3.5 support\n\n## 0.5.0 (2021-02-09)\n\n- Update to API version 2020-08-01\n\n## 0.4.0 (2020-12-08)\n\n- Internal bugfixes (re-generated with latest generator)\n\n## 0.3.0 (2020-09-15)\n\n- Internal bugfixes (re-generated with latest generator)\n\n## 0.2.0 (2020-07-01)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage File Share Client Library for Python\nDESCRIPTION: This snippet shows how to install the Azure Storage File Share client library for Python using pip. The '--pre' flag is used to include pre-release versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-file-share --pre\n```\n\n----------------------------------------\n\nTITLE: Renaming Authoring Client Operations in YAML\nDESCRIPTION: This snippet renames various operations in the Conversational Analysis Authoring module to improve readability and consistency in the SDK. It removes the prefix 'ConversationalAnalysisAuthoring_' from operation names.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  - rename-operation:\n      from: ConversationalAnalysisAuthoring_ListProjects\n      to: ListProjects\n  - rename-operation:\n      from: ConversationalAnalysisAuthoring_CreateProject\n      to: CreateProject\n  - rename-operation:\n      from: ConversationalAnalysisAuthoring_GetProject\n      to: GetProject\n  - rename-operation:\n      from: ConversationalAnalysisAuthoring_DeleteProject\n      to: DeleteProject\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Dependencies\nDESCRIPTION: Defines required package dependencies for building the Azure SDK for Python. Includes paths to SDK tools and version-specific aiohttp requirement for Python 3.5+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/dependency_tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../../tools/azure-sdk-tools[build]\naiohttp>=3.0; python_version >= '3.5'\n```\n\n----------------------------------------\n\nTITLE: Using Forward References in Python Classmethod Annotations\nDESCRIPTION: Shows two ways to annotate a @classmethod's return type referencing its own class, to avoid NameError due to undefined type at annotation time. Demonstrates forward reference via string and via Python's from __future__ import annotations. Aids compatibility for classes with methods returning their own type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass TreeHouse:\\n    def __init__(self): ...\\n\\n    @classmethod\\n    def build(cls) -> TreeHouse:\\n        return cls()\n```\n\nLANGUAGE: python\nCODE:\n```\nclass TreeHouse:\\n    def __init__(self): ...\\n\\n    @classmethod\\n    def build(cls) -> \\\"TreeHouse\\\":  # forward reference\\n        return cls()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\\n\\nclass TreeHouse:\\n    def __init__(self) -> None: ...\\n\\n    @classmethod\\n    def build(cls) -> TreeHouse:\\n        return cls()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies (requirements format)\nDESCRIPTION: This snippet lists Python package dependencies using a format commonly found in pip requirements files. It specifies dependencies, including local editable installs (`-e`) for `azure-sdk-tools` and `azure-identity`, a core Azure library (`azure-core`), and third-party libraries (`aiohttp`, `aiounittest`, `pytest-tornasync`, `retry`) with version constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\naiohttp>=3.0\naiounittest>=1.4\npytest-tornasync==0.6.0.post2\nretry>=0.9.2\n```\n\n----------------------------------------\n\nTITLE: Autorest Configuration Settings\nDESCRIPTION: YAML configuration for Azure Maps Render SDK generation, including API version, input swagger file, output settings, and Python-specific configurations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntag: '2024-04-01'\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/maps/data-plane/Render/stable/2024-04-01/render.json\noutput-folder: ../azure/maps/render/_generated\nnamespace: azure.maps.render\npackage-name: azure-maps-render\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\ncredential-scopes: https://atlas.microsoft.com/.default\nclear-output-folder: true\npython: true\nadd-credential: true\ntitle: MapsRenderClient\ndisable-async-iterators: true\npython-sdks-folder: $(python-sdks-folder)\npython3-only: true\n```\n\n----------------------------------------\n\nTITLE: Running Tox with Custom Pytest Arguments\nDESCRIPTION: Example of invoking Tox with custom arguments for Pytest, specifically enabling the debugger on test failure. This shows how to pass additional arguments to the underlying test runner.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e whl -c <path to tox.ini> --root <path to python package> -- --pdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in Azure Functions v2.x+ (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to disable logging in Azure Functions v2.x and above by setting the default log level to 'None'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logging\": {\n    ...\n    \"logLevel\": {\n      \"default\": \"None\",\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Package in Editable Mode\nDESCRIPTION: Specifies installation of the local Azure SDK tools package in editable mode using pip's -e flag, referencing the tools directory with a relative path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-knowledge-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Documenting Beta Release 1.0.0b1 in Markdown\nDESCRIPTION: Details the beta release 1.0.0b1, including major breaking changes and new features related to authentication, async programming, and more.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.0.0b1 (2021-02-09)\n\nThis is beta preview version.\nFor detailed changelog please refer to equivalent stable version 10.2.0 (https://pypi.org/project/azure-mgmt-network/10.2.0/)\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown for Azure SDK for Python\nDESCRIPTION: This Markdown snippet outlines the structure for documenting release history. It includes sections for the unreleased version 1.1.0b1 and the stable version 1.0.0, with placeholders for features, breaking changes, bugs fixed, and other changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-search-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0 (2020-03-18)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet defines the dependencies required for the Azure SDK for Python project. It includes local package references using the -e flag, specific versions of Azure management packages, and general package requirements.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\nazure-mgmt-storage==20.1.0\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes local package references using editable installs (-e flag) and specific versions of Azure services. The dependencies cover various Azure management packages, identity, storage, and key vault functionalities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../authorization/azure-mgmt-authorization\n-e ../../storage/azure-mgmt-storage\n-e ../../network/azure-mgmt-network\n-e ../../resources/azure-mgmt-resource\naiohttp>=3.0; python_version >= '3.5'\n../../identity/azure-identity\nazure-storage-blob==12.9.0\nazure-mgmt-keyvault==10.0.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure for documenting release history in a Markdown file. It includes the main heading, version number, release date, and a bullet point for the release notes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-messaging-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2021-04-23)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Development Dependency in Python\nDESCRIPTION: This line specifies a development dependency on the Azure SDK tools using the -e flag to install in development mode from a relative path. The -e flag ensures that changes to the tools are immediately available without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-newssearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Security DevOps Management SDK and Azure Identity packages\nDESCRIPTION: Commands to install the required Python packages for working with Azure Security DevOps Management. Installs both the azure-mgmt-securitydevops package for management operations and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/securitydevops/azure-mgmt-securitydevops/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-securitydevops\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Removing Status Operations from Authoring API - YAML\nDESCRIPTION: Contains transform directives to delete legacy or redundant status operations from the authoring API paths. Limits the generated Python client surface area to active, meaningful job resources, preventing clutter and confusion in the API. Ensures status and job operations are excluded from the final SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/deletion-jobs/{jobId}\"]\n    transform: >\n        delete $[\"get\"];\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/export/jobs/{jobId}\"]\n    transform: >\n        delete $[\"get\"];\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/import/jobs/{jobId}\"]\n    transform: >\n        delete $[\"get\"];\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/deployments/{deploymentName}/jobs/{jobId}\"]\n    transform: >\n        delete $[\"get\"];\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/sources/jobs/{jobId}\"]\n    transform: >\n        delete $[\"get\"];\n  - from: swagger-document\n    where: $[\"paths\"][\"/query-knowledgebases/projects/{projectName}/qnas/jobs/{jobId}\"]\n    transform: >\n        delete $[\"get\"];\n\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Document Intelligence SDK for Python\nDESCRIPTION: Command to install the Azure AI Document Intelligence package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-ai-documentintelligence\n```\n\n----------------------------------------\n\nTITLE: Renaming Session 'creationTime' to 'createdOn' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that modifies the generated Python code. It targets the 'creationTime' property within the 'session_properties' definition in the Swagger document and renames its client-side representation to 'createdOn'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.session_properties.properties.creationTime'\n    transform: >\n        $[\"x-ms-client-name\"] = \"createdOn\";\n```\n\n----------------------------------------\n\nTITLE: Managing Queues with Administration Client in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares queue management and metadata retrieval using the administration client in v0.50 and v7. In v0.50, the `ServiceBusService` from `azure.servicebus.control_client` was used. In v7, this is replaced by `ServiceBusAdministrationClient` from `azure.servicebus.management`. Methods for CRUD operations on queues are similar, but retrieving message counts (total, active, scheduled, dead-letter) in v7 requires calling `get_queue_runtime_properties`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus.control_client import ServiceBusService\nservice_bus_service = ServiceBusService()\nqueue = service_bus_service.get_queue(queue_name)\nservice_bus_service.create_queue(queue_name)\nservice_bus_service.delete_queue(queue_name)\nqueues = service_bus_service.list_queues()\n\n# get message count info\nfor queue in queues:\n    print(queue.message_count)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicebus.management import ServiceBusAdministrationClient\nservice_bus_administration_client = ServiceBusAdministrationClient()\nqueue = service_bus_administration_client.get_queue(queue_name)\nservice_bus_administration_client.create_queue(queue_name)\nservice_bus_administration_client.delete_queue(queue_name)\nqueues = service_bus_administration_client.list_queues()\n\n# get total, active, scheduled, dead-letter message count info\nfor queue in queues:\n    queue_runtime_properties = service_bus_administration_client.get_queue_runtime_properties(queue.name)\n    print(queue_runtime_properties.total_message_count)\n    print(queue_runtime_properties.active_message_count)\n    print(queue_runtime_properties.scheduled_message_count)\n    print(queue_runtime_properties.dead_letter_message_count)\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Dependencies\nDESCRIPTION: Lists the required Python package dependencies for Azure SDK development, including development tools, core libraries, identity packages, and async HTTP client. Specifies relative paths for local development packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/durabletask/azure-mgmt-durabletask/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Properties from Peeked/Received Messages in Python\nDESCRIPTION: Removed properties `partition_id` and `settled` from both `PeekMessage` and `ReceivedMessage`. Additionally, removed the instance variable `received_timestamp_utc` from both, `settled` from `PeekMessage` specifically, and `expired` from `ReceivedMessage` specifically.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Removed from PeekMessage and ReceivedMessage:\nPeekMessage.partition_id\nPeekMessage.settled\nPeekMessage.received_timestamp_utc\nReceivedMessage.partition_id\nReceivedMessage.settled\nReceivedMessage.received_timestamp_utc\n\n# Removed from ReceivedMessage only:\nReceivedMessage.expired\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation for Azure Guest Configuration SDK\nDESCRIPTION: Changelog documenting features added in version 1.0.0b2 including new operations and model parameter additions. Also notes the initial 1.0.0b1 release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-guestconfig/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2022-11-04)\n\n### Features Added\n\n  - Added operation GuestConfigurationAssignmentsOperations.rg_list\n  - Added operation GuestConfigurationAssignmentsOperations.subscription_list\n  - Added operation group GuestConfigurationAssignmentReportsVMSSOperations\n  - Added operation group GuestConfigurationAssignmentsVMSSOperations\n  - Model GuestConfigurationAssignment has a new parameter system_data\n  - Model GuestConfigurationAssignmentProperties has a new parameter parameter_hash\n  - Model GuestConfigurationAssignmentProperties has a new parameter resource_type\n  - Model GuestConfigurationAssignmentProperties has a new parameter vmss_vm_list\n  - Model GuestConfigurationAssignmentReportProperties has a new parameter vmss_resource_id\n  - Model GuestConfigurationNavigation has a new parameter assignment_source\n  - Model GuestConfigurationNavigation has a new parameter configuration_protected_parameter\n  - Model GuestConfigurationNavigation has a new parameter content_type\n\n## 1.0.0b1 (2021-07-13)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: mypy Output Illustrating Type Checking Errors in Function Calls\nDESCRIPTION: Includes sample mypy command output to show errors when passing instance versus class object to functions expecting Type[Duck] or Duck. Useful for debugging and learning about static type checking in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_22\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:15: error: Argument 1 to \\\"create_duck\\\" has incompatible type \\\"Duck\\\"; expected \\\"Type[Duck]\\\"\\nmain.py:17: error: Argument 1 to \\\"make_quack\\\" has incompatible type \\\"Type[Duck]\\\"; expected \\\"Duck\\\"\\nFound 2 errors in 1 file (checked 1 source file)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure SDK Component\nDESCRIPTION: This snippet defines the Python package dependencies required for a specific component within the Azure SDK for Python, likely for development or testing purposes. It utilizes the standard `requirements.txt` format. Key dependencies include `requests`, `aiohttp` (with a version constraint for PyPy due to a known issue), `httpx`, core Azure libraries (`azure-core`, `azure-identity`), Azure service libraries (`azure-storage-blob`, `azure-data-tables`), and editable installs (`-e`) for local packages (`azure-sdk-tools`, `coretestserver`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/corehttp/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests\n# Aiohttp 3.8.6 triggers https://github.com/aio-libs/aiohttp/issues/4581 on pypy for some reasons\naiohttp<3.8.6 ; platform_python_implementation == \"PyPy\"\naiohttp ; platform_python_implementation != \"PyPy\"\nhttpx>=0.25.0\n-e ../../../tools/azure-sdk-tools\n-e tests/testserver_tests/coretestserver\n../../core/azure-core\nazure-storage-blob\nazure-data-tables\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 using npm\nDESCRIPTION: Command to install Autorest v3 globally using npm package manager. This is a prerequisite for generating the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Development Tools\nDESCRIPTION: Requirements file entry for installing Azure SDK tools from a local relative path using pip's editable install mode (-e flag)\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-mgmt-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Edge Order Management Client Library in Python\nDESCRIPTION: This snippet shows how to install the Azure Edge Order Management Client Library and Azure Identity package using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgeorder/azure-mgmt-edgeorder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-edgeorder\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Generating X509 Certificate with V3 Extensions in PowerShell\nDESCRIPTION: This snippet shows how to create a certificate with V3 extensions, including subject alternative names, key usage flags, and CA/TLS settings. It also demonstrates formatting the certificate as a PEM with both certificate and private key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/scripts/X509Certificate2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name eng/scripts/X509Certificate2.psm1 # assumes $PWD is repo root\n\n$cert2 = New-X509Certificate2 -SubjectName 'CN=Azure SDK' -SubjectAlternativeNames (New-X509Certificate2SubjectAlternativeNames -EmailAddress azuresdk@microsoft.com) -KeyUsageFlags KeyEncipherment, NonRepudiation, DigitalSignature -CA -TLS -ValidDays 3652\n\n$PemCertificateWithV3Extensions = ($cert2 | Format-X509Certificate2 -Type Certificate) + \"`n\" + ($cert2 | Format-X509Certificate2 -Type Pkcs8)\n$CertificateWithV3ExtensionsBase64 = $cert2 | Format-X509Certificate2 -Type CertificateBase64\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Dependencies in Python SDK Development\nDESCRIPTION: Defines paths to local development dependencies using relative path notation. This includes references to the Azure SDK tools package and the Azure Identity package, both of which are referenced as local directory paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-mgmt-devcenter/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Correcting Client Import Path in azure-mgmt-containerregistry (Python)\nDESCRIPTION: Describes the breaking change introduced in v3.0.0rc2. The `ContainerRegistryManagementClient` class could no longer be imported directly from its module file (`azure.mgmt.containerregistry.containerregistry_management_client`). Instead, it should be imported from the main package namespace (`azure.mgmt.containerregistry`). This change resulted from updates in the code generator.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect import path after v3.0.0rc2\n# from azure.mgmt.containerregistry.containerregistry_management_client import ContainerRegistryManagementClient\n```\n\nLANGUAGE: python\nCODE:\n```\n# Correct import path starting from v3.0.0rc2\nfrom azure.mgmt.containerregistry import ContainerRegistryManagementClient\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Development Dependencies in Python\nDESCRIPTION: This configuration references two essential dependencies for Azure SDK Python development: the Azure SDK tools package from a relative path and the Azure Identity package. These are specified as editable installation paths, allowing developers to work with the latest versions during development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/securitydevops/azure-mgmt-securitydevops/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Resource Group Using Dictionary (Python)\nDESCRIPTION: Demonstrates the simplified approach introduced in Azure SDK for Python version 2.0.0rc4/0.30.0rc4 for creating or updating an Azure resource group. Instead of importing and instantiating a model class, parameters like `location` can be passed directly as a dictionary to the client method (`create_or_update`), reducing the need for model imports.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresource_client.resource_groups.create_or_update(\n    group_name,\n    {\n        'location':'westus',\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Autorest Configuration Settings\nDESCRIPTION: YAML configuration for generating the Azure Purview Python SDK. Specifies input swagger file, output settings, package details, authentication scopes, and generation options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-catalog/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/ccbe894f6b012ca2000184307ed453fd68797b86/specification/purview/data-plane/Azure.Analytics.Purview.Catalog/preview/2022-03-01-preview/purviewcatalog.json\noutput-folder: ../azure/purview/catalog\nnamespace: azure.purview.catalog\npackage-name: azure-purview-catalog\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\nno-namespace-folders: true\npython: true\ntitle: PurviewCatalogClient\npackage-version: 1.0.0b4\nadd-credential: true\ncredential-scopes: https://purview.azure.net/.default\nonly-path-params-positional: true\nversion-tolerant: true\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Cloud Service in Python\nDESCRIPTION: This snippet demonstrates how to create a new Azure Cloud Service (also known as a hosted service) using the Service Management API. It specifies the service name, description, label, and location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nname = \"myhostedservice\"\ndesc = name\nlabel = name\nlocation = 'West US'\n\nresult = sms.create_hosted_service(name, label, desc, location=location)\n```\n\n----------------------------------------\n\nTITLE: Parsing Thread Run Queued Event in JSON\nDESCRIPTION: This snippet represents the 'thread.run.queued' event data. It contains the same structure and information as the 'created' event, indicating that the run has been queued for processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/main_stream_response.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"run_01\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1735945041,\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"status\": \"queued\",\n  \"started_at\": null,\n  \"expires_at\": 1735945641,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": null,\n  \"required_action\": null,\n  \"last_error\": null,\n  \"model\": \"gpt-4-1106-preview\",\n  \"instructions\": \"You are a helpful assistant\",\n  \"tools\": [...],\n  \"tool_resources\": {\n    \"code_interpreter\": {\n      \"file_ids\": []\n    }\n  },\n  \"metadata\": {},\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_completion_tokens\": null,\n  \"max_prompt_tokens\": null,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"incomplete_details\": null,\n  \"usage\": null,\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Resource Group for KeyVault Service in PowerShell\nDESCRIPTION: This example shows how to use the Update-TestResources.ps1 cmdlet to update a resource group for the KeyVault service, setting it to be deleted after 24 hours.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 keyvault -DeleteAfterHours 24\n```\n\n----------------------------------------\n\nTITLE: Injecting URL Parameter and Prepending to Paths via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive modifies all operation paths defined in `x-ms-paths`. It adds a reference to a global `Url` parameter to each operation's parameter list. It then prepends `{url}` to the beginning of each path string, effectively making the base URL part of the path template for routing in the generated code. Special handling is included for root ('/') paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        $[property][\"parameters\"].push({\"$ref\": \"#/parameters/Url\"});\n\n        var oldName = property;\n        // For service operations (where the path is just '/') we need to\n        // remove the '/' at the begining to avoid having an extra '/' in\n        // the final URL.\n        if (property === '/' || property.startsWith('/?'))\n        {\n            var newName = '{url}' + property.substring(1);\n        }\n        else\n        {\n            var newName = '{url}' + property;\n        }\n        $[newName] = $[oldName];\n        delete $[oldName];\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Azure SDK for Python\nDESCRIPTION: This requirements file defines the dependencies needed for development work on the Azure SDK for Python. It includes a local path to development tools, pytest-related packages for testing, and flake8 for code linting.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/modelsrepository/azure-iot-modelsrepository/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\npytest-mock\npytest-testdox\nflake8\n```\n\n----------------------------------------\n\nTITLE: Running perfstress Command for Azure Key Vault Administration Tests\nDESCRIPTION: Demonstrates how to use the perfstress command-line tool to list available performance tests in the current module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-administration> cd tests/perfstress_tests/\n(env) ~/azure-keyvault-administration/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Development Dependencies\nDESCRIPTION: Lists the required dependencies for Azure SDK Python development using relative paths to other packages within the repo. This includes tools, resource management, and identity components.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/relay/azure-mgmt-relay/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Implementing Final Type Declaration in Python\nDESCRIPTION: Demonstrates how to use Final type annotation from typing_extensions to create immutable variables. Shows type checker error when attempting to reassign a final value.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Final\n\nMAX_BLOB_SIZE: Final = 4 * 1024 * 1024\n```\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:6: error: Cannot assign to final name \"MAX_BLOB_SIZE\"\nFound 1 error in 1 file (checked 1 source file)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Scenario in readme.cli.md\nDESCRIPTION: YAML configuration for defining the test scenario in the readme.cli.md file. It lists the operations to be tested in the integration tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generating-integration-test.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n## CLI\n\nThese settings apply only when `--cli` is specified on the command line.\n\n``` yaml $(cli)\ncli:\n  namespace: azure.mgmt.attestation\ntest-scenario:\n- name: AttestationProviders_Create\n- name: AttestationProviders_Get\n- name: AttestationProviders_ListByResourceGroup\n- name: AttestationProviders_List\n- name: Operations_List\n- name: AttestationProviders_Delete\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Projects Wheel Package\nDESCRIPTION: This command installs the built wheel package for Azure AI Projects. The version number needs to be updated to the current one.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install dist\\azure_ai_projects-1.0.0b5-py3-none-any.whl --user --force-reinstall\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Azure SDK\nDESCRIPTION: Lists required Python packages and local development dependencies for the Azure SDK project. Includes references to local packages, specific version requirements for azure-storage-blob, and minimum version requirements for aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\nazure-storage-blob==12.9.0\n-e ../../identity/azure-identity\naiohttp>=3.0\npytz\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure Python SDK Project - requirements-spec\nDESCRIPTION: This snippet lists the dependencies required by the Azure SDK for Python project, including asynchronous frameworks (trio, aiohttp), HTTP request libraries (requests), telemetry integrations (opencensus and extensions), a local editable tools directory, a contained package, and direct links to specific package versions as ZIP files. The list is designed for a requirement-specification file (e.g., requirements.txt), and is intended for consumption by Python tools such as pip. Each entry must be accessible by the Python environment; URLs and editable installs require correct configuration. There are no parameters. The expected result is a reproducible set of installed or available dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/complex_requirements/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements-spec\nCODE:\n```\ntrio\nrequests\naiohttp>=3.0\nopencensus>=0.6.0\nopencensus-ext-azure\nopencensus-ext-threading\n-e ../../../../../../tools/azure-sdk-tools\na/contained/package\nhttps://docsupport.blob.core.windows.net/repackaged/azure-core-1.5.0.zip\n./optional-environment-test-1.0.0.zip\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Python SDK Dependencies\nDESCRIPTION: Package dependencies required for the Azure SDK Python project, including development tools, core SDK components, identity management, and HTTP client libraries. References local packages with relative paths and external packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Release Notes Documentation in Markdown\nDESCRIPTION: Detailed changelog documenting feature additions, breaking changes and version history across multiple releases from version 1.0.0 to 1.1.0b4.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elastic/azure-mgmt-elastic/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b4 (2024-10-23)\n\n### Features Added\n\n  - Model `MicrosoftElastic` added property `monitored_subscriptions`\n  - Model `MicrosoftElastic` added property `billing_info`\n  - Model `MicrosoftElastic` added property `connected_partner_resources`\n  - Model `MicrosoftElastic` added property `open_ai`\n  - Model `DeploymentInfoResponse` added property `elasticsearch_end_point`\n  - Model `MarketplaceSaaSInfo` added property `marketplace_status`\n  - Model `MarketplaceSaaSInfo` added property `billed_azure_subscription_id`\n  - Model `MarketplaceSaaSInfo` added property `subscribed`\n  - Model `MarketplaceSaaSInfoMarketplaceSubscription` added property `publisher_id`\n  - Model `MarketplaceSaaSInfoMarketplaceSubscription` added property `offer_id`\n  - Model `MonitorProperties` added property `plan_details`\n  - Model `MonitorProperties` added property `subscription_state`\n  - Model `MonitorProperties` added property `saa_s_azure_subscription_status`\n  - Model `MonitorProperties` added property `source_campaign_name`\n  - Model `MonitorProperties` added property `source_campaign_id`\n  - Added model `BillingInfoResponse`\n  - Added model `ConnectedPartnerResourceProperties`\n  - Added model `ConnectedPartnerResourcesListFormat`\n  - Added model `ConnectedPartnerResourcesListResponse`\n  - Added model `ElasticOrganizationToAzureSubscriptionMappingResponse`\n  - Added model `ElasticOrganizationToAzureSubscriptionMappingResponseProperties`\n  - Added model `ErrorAdditionalInfo`\n  - Added model `ErrorDetail`\n  - Added model `ErrorResponse`\n  - Added model `MonitoredSubscription`\n  - Added model `MonitoredSubscriptionProperties`\n  - Added model `MonitoredSubscriptionPropertiesList`\n  - Added model `OpenAIIntegrationProperties`\n  - Added model `OpenAIIntegrationRPModel`\n  - Added model `OpenAIIntegrationRPModelListResponse`\n  - Added model `OpenAIIntegrationStatusResponse`\n  - Added model `OpenAIIntegrationStatusResponseProperties`\n  - Added enum `Operation`\n  - Added model `PartnerBillingEntity`\n  - Added model `PlanDetails`\n  - Added model `ResubscribeProperties`\n  - Added enum `Status`\n  - Added model `SubscriptionList`\n  - Operation group `OrganizationsOperations` added method `begin_resubscribe`\n  - Operation group `OrganizationsOperations` added method `get_elastic_to_azure_subscription_mapping`\n  - Added operation group `BillingInfoOperations`\n  - Added operation group `ConnectedPartnerResourcesOperations`\n  - Added operation group `MonitoredSubscriptionsOperations`\n  - Added operation group `OpenAIOperations`\n\n### Breaking Changes\n\n  - Renamed method `update` to `begin_update` in Operation group `MonitorsOperations`\n\n## 1.1.0b3 (2023-05-22)\n\n### Features Added\n\n  - Added operation group ElasticVersionsOperations\n  - Model MonitorProperties has a new parameter generate_api_key\n  - Model UserApiKeyResponse has a new parameter properties\n\n### Breaking Changes\n\n  - Model ElasticMonitorResource no longer has parameter generate_api_key\n  - Model UserApiKeyResponse no longer has parameter api_key\n  - Operation OrganizationsOperations.get_api_key no longer has parameter resource_group_name\n\n## 1.1.0b2 (2023-04-20)\n\n### Features Added\n\n  - Added operation group OrganizationsOperations\n  - Model DeploymentInfoResponse has a new parameter deployment_url\n  - Model DeploymentInfoResponse has a new parameter marketplace_saas_info\n  - Model ElasticMonitorResource has a new parameter generate_api_key\n\n## 1.1.0b1 (2022-11-08)\n\n### Features Added\n\n  - Added operation group AllTrafficFiltersOperations\n  - Added operation group AssociateTrafficFilterOperations\n  - Added operation group CreateAndAssociateIPFilterOperations\n  - Added operation group CreateAndAssociatePLFilterOperations\n  - Added operation group DetachAndDeleteTrafficFilterOperations\n  - Added operation group DetachTrafficFilterOperations\n  - Added operation group ExternalUserOperations\n  - Added operation group ListAssociatedTrafficFiltersOperations\n  - Added operation group MonitorOperations\n  - Added operation group TrafficFiltersOperations\n  - Added operation group UpgradableVersionsOperations\n  - Model MonitorProperties has a new parameter version\n\n## 1.0.0 (2021-08-04)\n\n  - GA Release\n\n## 1.0.0b1 (2021-05-08)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Dependencies\nDESCRIPTION: Lists required Python package dependencies including Azure SDK tools, Azure Core package, and msrestazure client library. Uses relative paths for local development packages and pip editable installs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-loganalytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\nmsrestazure\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Data Box Edge Management Client and Azure Identity packages\nDESCRIPTION: Commands for installing the required Python packages via pip. The azure-mgmt-databoxedge package provides the client library, while azure-identity is used for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databoxedge/azure-mgmt-databoxedge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-databoxedge\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Adding URL Parameter to Operations and Modifying Paths in Swagger Document\nDESCRIPTION: YAML directive to add a URL parameter to each operation and modify the paths to include the URL, handling service operations differently.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $(\"x-ms-paths\")\n  transform: >\n    for (const property in $)\n    {\n        $[property][\"parameters\"].push({\"$ref\": \"#/parameters/Url\"});\n\n        var oldName = property;\n        // For service operations (where the path is just '/') we need to\n        // remove the '/' at the begining to avoid having an extra '/' in\n        // the final URL.\n        if (property === '/' || property.startsWith('/?'))\n        {\n            var newName = '{url}' + property.substring(1);\n        )\n        else\n        {\n            var newName = '{url}' + property;\n        )\n        $[newName] = $[oldName];\n        delete $[oldName];\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining the MatchConditions Enum in Python\nDESCRIPTION: This snippet defines the `MatchConditions` enum provided by `azure.core`. This enum is used to specify conditions for operations, often mapping to HTTP conditional headers like ETag matching (e.g., If-Match, If-None-Match). It provides standardized values like `Unconditionally`, `IfNotModified`, `IfModified`, `IfPresent`, and `IfMissing`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_out_of_sync.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MatchConditions(Enum):\n    Unconditionally = 1\n    IfNotModified = 2\n    IfModified = 3\n    IfPresent = 4\n    IfMissing = 5\n```\n\n----------------------------------------\n\nTITLE: Renaming EntityStatus to DataFeedStatus in Paths\nDESCRIPTION: Directive to rename EntityStatus enum to DataFeedStatus in the paths section of the swagger document for more specific naming.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"paths\"]\n    transform: >\n      $[\"/dataFeeds\"][\"get\"][\"parameters\"][3][\"x-ms-enum\"][\"name\"] = \"DataFeedStatus\";\n```\n\n----------------------------------------\n\nTITLE: Installing Required Azure Packages\nDESCRIPTION: Install the necessary Azure packages for using Intent Resolution Evaluator including azure-ai-projects, azure-identity, and azure-ai-evaluation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/intent_resolution.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-projects azure-identity azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install required Python packages using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requiriments.txt\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK for Python\nDESCRIPTION: A requirements file listing the dependencies for developing Azure SDK for Python. It includes a reference to local Azure SDK tools and the identity package directory path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/migrationdiscovery/azure-mgmt-migrationdiscoverysap/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ProgressAction in PowerShell\nDESCRIPTION: Defines the common PowerShell 'ProgressAction' parameter. The description needs to be filled in ({{ Fill ProgressAction Description }}). It's of type ActionPreference, not required, named, has no default value, doesn't accept pipeline input or wildcards, and has an alias 'proga'. This parameter typically controls how progress updates are handled.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nType: ActionPreference\nParameter Sets: (All)\nAliases: proga\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Azure SDK Python Package Version 1.1.0b1\nDESCRIPTION: Beta release notes from November 2022 documenting dropping Python <3.7 support and adding generated samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portal/azure-mgmt-portal/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b1 (2022-11-01)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n```\n\n----------------------------------------\n\nTITLE: Dependency on Local Azure Core Package (Python)\nDESCRIPTION: Declares a dependency on the `azure-core` package located at the relative path `../../core/azure-core`. This links the current project component to another local component within the Azure SDK monorepo.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n../../core/azure-core\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Comprehensive changelog documenting version history, feature additions, and breaking changes for the Azure SDK Python package. Covers version changes from 1.0.0b1 through 2.0.0, including model updates, new parameters, and operation changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/orbital/azure-mgmt-orbital/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0 (2023-03-20)\n\n### Features Added\n\n  - Model ContactProfile has a new parameter third_party_configurations\n  - Model ContactProfileProperties has a new parameter third_party_configurations\n  - Model ContactProfilesProperties has a new parameter third_party_configurations\n  - Model OperationResult has a new parameter next_link\n  - Model OperationResult has a new parameter value\n  - Operation ContactProfilesOperations.begin_create_or_update has a new optional parameter third_party_configurations\n\n### Breaking Changes\n\n  - Model Contact no longer has parameter etag\n  - Model ContactProfile no longer has parameter etag\n  - Model Spacecraft no longer has parameter etag\n  - Parameter contact_profile of model Contact is now required\n  - Parameter expiration_date of model AuthorizedGroundstation is now required\n  - Parameter ground_station of model AuthorizedGroundstation is now required\n  - Parameter ground_station_name of model Contact is now required\n  - Parameter id of model AvailableContactsSpacecraft is now required\n  - Parameter id of model ContactParametersContactProfile is now required\n  - Parameter id of model ContactsPropertiesContactProfile is now required\n  - Parameter id of model ResourceReference is now required\n  - Parameter links of model ContactProfile is now required\n  - Parameter links of model Spacecraft is now required\n  - Parameter network_configuration of model ContactProfile is now required\n  - Parameter reservation_end_time of model Contact is now required\n  - Parameter reservation_start_time of model Contact is now required\n  - Parameter title_line of model Spacecraft is now required\n  - Parameter tle_line1 of model Spacecraft is now required\n  - Parameter tle_line2 of model Spacecraft is now required\n  - Removed operation AvailableGroundStationsOperations.get\n\n## 1.1.0b1 (2022-11-30)\n\n### Features Added\n\n  - Added model ContactsStatus\n\n## 1.0.0 (2022-06-16)\n\n**Features**\n\n  - Added operation ContactProfilesOperations.begin_update_tags\n  - Added operation SpacecraftsOperations.begin_update_tags\n  - Added operation group OperationsResultsOperations\n  - Model AvailableGroundStation has a new parameter release_mode\n  - Model Contact has a new parameter antenna_configuration\n  - Model Contact has a new parameter provisioning_state\n  - Model ContactProfile has a new parameter event_hub_uri\n  - Model ContactProfile has a new parameter network_configuration\n  - Model ContactProfile has a new parameter provisioning_state\n  - Model Spacecraft has a new parameter provisioning_state\n  - Model SpacecraftLink has a new parameter authorizations\n\n**Breaking changes**\n\n  - Model ContactProfileLink has a new required parameter name\n  - Model ContactProfileLinkChannel has a new required parameter name\n  - Model Spacecraft no longer has parameter authorization_status\n  - Model Spacecraft no longer has parameter authorization_status_extended\n  - Model SpacecraftLink has a new required parameter name\n  - Operation ContactProfilesOperations.begin_create_or_update has a new parameter event_hub_uri\n  - Operation ContactProfilesOperations.begin_create_or_update has a new parameter network_configuration\n  - Operation ContactProfilesOperations.begin_create_or_update has a new parameter provisioning_state\n  - Operation ContactProfilesOperations.list has a new parameter skiptoken\n  - Operation ContactProfilesOperations.list_by_subscription has a new parameter skiptoken\n  - Operation ContactsOperations.list has a new parameter skiptoken\n  - Operation SpacecraftsOperations.begin_create_or_update has a new parameter provisioning_state\n  - Operation SpacecraftsOperations.list has a new parameter skiptoken\n  - Operation SpacecraftsOperations.list_by_subscription has a new parameter skiptoken\n  - Removed operation ContactProfilesOperations.update_tags\n  - Removed operation SpacecraftsOperations.update_tags\n\n## 1.0.0b1 (2021-11-19)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Communication Email SDK with pip\nDESCRIPTION: Installs the Azure Communication Email client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-communication-email\n```\n\n----------------------------------------\n\nTITLE: Customizing Authoring Operations Documentation and Descriptions - YAML\nDESCRIPTION: Introduces Autorest transformation directives for enriching operation descriptions using additional documentation links, and adjusts global API info description. The YAML snippet guides how to append relevant documentation URLs and improve API info across generated files. Relies on Autorest transform scripting.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\ndirective:\n- from: questionanswering-authoring.json\n  where: $.paths.*.*\n  transform: |\n    var operationId = $.operationId.replace(/_/g, \"/\").replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n    $.description = \"See https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/\" + operationId + \" for more information.\";\n\n# Fix too long of link in description.\n- from: swagger-document\n  where: $.info\n  transform: |\n    $[\"description\"] = \"The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in https://learn.microsoft.com/azure/cognitive-services/text-analytics/overview\";\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -CI in PowerShell\nDESCRIPTION: Defines the optional 'CI' switch parameter. When present, it indicates the script is running within a Continuous Integration / Continuous Deployment (CI/CD) environment (specifically Azure Pipelines is mentioned). Its default value is determined by checking for the presence of the environment variable '$env:SYSTEM_TEAMPROJECTID'. It's not required, is named, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: ($null -ne $env:SYSTEM_TEAMPROJECTID)\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Generation for Azure Monitor Logs in Python\nDESCRIPTION: Creates a sample JSON file for setting up custom logs in Azure Monitor, including anomaly detection results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nsample_data = [{\n    \"TimeGenerated\": \"2023-03-19T19:56:43.7447391Z\",\n    \"ActualUsage\": 40.1,\n    \"PredictedUsage\": 45.1,\n    \"Anomalies\": -1,\n    \"DataType\": \"AzureDiagnostics\"\n}]\n\nwith open(\"data_sample.json\", \"w\") as file:\n    json.dump(sample_data, file)\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for azure.cosmos.aio Package in Sphinx\nDESCRIPTION: Sphinx documentation structure definition for the Azure Cosmos DB asynchronous client library. The directive configures the autodoc extension to include all members, undocumented members, and inherited members from the azure.cosmos.aio package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/doc/azure.cosmos.aio.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: azure.cosmos.aio\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2022-01-01-preview\nDESCRIPTION: Configuration settings for the v2022-01-01-preview API version, specifying input files for machineLearningServices and workspaceFeatures along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2022-01-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2022-01-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2022-01-01-preview/workspaceFeatures.json\noutput-folder: $(python-sdks-folder)/v2022_01_01_preview\n```\n\n----------------------------------------\n\nTITLE: Discovering and Running Blob Perf Stress Tests with perfstress (cmd)\nDESCRIPTION: This snippet runs the \"perfstress\" tool to discover and execute performance tests for Azure Blob Storage. The first command changes the current directory to the tests folder; the second runs the perfstress tool which detects available performance tests depending on the installed SDK (T1 or T2). Requires: devtools_testutils installed, Python environment activated, and perf test dependencies in place. Outputs: lists or runs specific perf tests as available based on environment setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-blob> cd tests\n(env) ~/azure-storage-blob/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies (requirements.txt format)\nDESCRIPTION: This configuration snippet lists dependencies for a Python project, intended to be processed by a tool like pip. It includes an editable local dependency (`azure-sdk-tools`), another local path dependency (`azure-identity`), and the external `aiohttp` library. The paths suggest this file resides within a sub-project of the main `azure-sdk-for-python` repository.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/standbypool/azure-mgmt-standbypool/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path in Python\nDESCRIPTION: This command installs Azure SDK tools from a relative path using pip's editable mode. It points to a directory three levels up from the current location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-vision-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Release History Document\nDESCRIPTION: Markdown formatted release history tracking API changes, bug fixes, and new features across multiple versions of the Azure EventHub Extensions package, focusing on the BlobCheckpointStore implementation\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.1 (Unreleased)\n\n### Other Changes\n\n- Updated type annotations in `BlobCheckpointStore`.\n\n## 1.2.0 (2025-02-13)\n\nThis version and all future versions will require Python 3.8+. Python 2.7, 3.6, and 3.7 are no longer supported.\n\n### Bugs Fixed\n\n- Fixed a bug with `BlobCheckpointStore.claim_ownership` mutating the `ownership_list` argument to no longer mutate the argument.\n- Updated `azure-core` dependency to 1.20.1 to fix `cchardet` ImportError.\n\n### Other Changes\n\n- Updated vendor azure-storage-blob dependency to v12.24.0.\n  - Fixed typing/linting issues and other bugs. See azure-storage-blob CHANGELOG.md for more info.\n\n## 1.1.4 (2021-04-07)\n\nThis version and all future versions will require Python 2.7 or Python 3.6+, Python 3.5 is no longer supported.\n\n**New features**\n- Updated `list_ownership`, `claim_ownership`, `update_checkpoint`, `list_checkpoints` on `BlobCheckpointStore` to support taking `**kwargs`.\n\n## 1.1.3 (2021-03-09)\n\nThis version will be the last version to officially support Python 3.5, future versions will require Python 2.7 or Python 3.6+.\n\n**Bug fixes**\n- Updated vendor azure-storage-blob dependency to v12.7.1.\n  - Fixed storage blob authentication failure due to request date header too old (#16192).\n\n## 1.1.2 (2021-01-11)\n\n**Bug fixes**\n- Fixed a bug that `BlobCheckpointStore.list_ownership` and `BlobCheckpointStore.list_checkpoints` triggering `KeyError` due to reading empty metadata of parent node when working with Data Lake enabled Blob Storage.\n\n## 1.1.1 (2020-09-08)\n\n**Bug fixes**\n- Fixed a bug that may gradually slow down retrieving checkpoint data from the storage blob if the storage account \"File share soft delete\" is enabled. #12836\n\n## 1.1.0 (2020-03-09)\n\n**New features**\n- Param `api_version` of `BlobCheckpointStore` now supports older versions of Azure Storage Service API.\n\n## 1.0.0 (2020-01-13)\nStable release. No new features or API changes.\n\n## 1.0.0b6 (2019-12-04)\n\n**Breaking changes**\n\n- Renamed `BlobPartitionManager` to `BlobCheckpointStore`.\n- Constructor of `BlobCheckpointStore` has been updated to take the storage container details directly rather than an instance of `ContainerClient`.\n- A `from_connection_string` constructor has been added for Blob Storage connection strings.\n- Module `blobstoragepm` is now internal, all imports should be directly from `azure.eventhub.extensions.checkpointstoreblob`.\n- `BlobCheckpointStore` now has a `close()` function for shutting down an HTTP connection pool, additionally the object can be used in a context manager to manage the connection.\n\n## 1.0.0b5 (2019-11-04)\n\n**New features**\n\n- `BlobPartitionManager` that uses Azure Blob Storage Block Blob to store EventProcessor checkpoint data\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes in Markdown\nDESCRIPTION: Chronological documentation of version changes including feature additions, breaking changes, and general updates from version 1.0.0b1 through 2.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/paloaltonetworks/azure-mgmt-paloaltonetworksngfw/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0b1 (2023-11-20)\n\n### Features Added\n\n  - Model NetworkProfile has a new parameter trusted_ranges\n\n### Breaking Changes\n\n  - Removed operation LocalRulestacksOperations.list_app_ids\n  - Removed operation LocalRulestacksOperations.list_countries\n  - Removed operation LocalRulestacksOperations.list_predefined_url_categories\n\n## 1.0.0 (2023-07-14)\n\n### Other Changes\n\n  - First GA version\n\n## 1.0.0b2 (2023-05-05)\n\n### Features Added\n\n  - Added operation group FirewallStatusOperations\n\n### Other Changes\n\n  - Fixed annotation about namespace\n\n## 1.0.0b1 (2023-05-04)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency in Python\nDESCRIPTION: This line defines a dependency installation requirement that points to a local directory containing Azure SDK tools. The '-e' flag indicates an editable install, which means changes to the source will be reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-mgmt-videoanalyzer/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: A pip requirements file that specifies the local and external dependencies needed for the Azure SDK for Python. It includes references to local packages like azure-sdk-tools, azure-core, azure-identity, azure-mgmt-core, and the external aiohttp package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/pineconevectordb/azure-mgmt-pineconevectordb/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2023-04-01\nDESCRIPTION: Configuration settings for the v2023-04-01 stable API version, specifying input files for machineLearningServices, registries, workspaceFeatures, and mfe along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2023-04-01'\ninput-file:\n  - Microsoft.MachineLearningServices/stable/2023-04-01/machineLearningServices.json\n  - Microsoft.MachineLearningServices/stable/2023-04-01/registries.json\n  - Microsoft.MachineLearningServices/stable/2023-04-01/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/stable/2023-04-01/mfe.json\noutput-folder: $(python-sdks-folder)/v2023_04_01\n```\n\n----------------------------------------\n\nTITLE: Adding New Models in Python\nDESCRIPTION: This snippet shows the addition of new models such as CalloutPoliciesList, CalloutPolicy, and CalloutPolicyToRemove in version 3.4.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n  - Added model `CalloutPoliciesList`\n  - Added model `CalloutPolicy`\n  - Added model `CalloutPolicyToRemove`\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Dependencies\nDESCRIPTION: Lists required Python packages including Azure SDK tools, Azure Identity, and aiohttp client library for making HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservicefleet/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Containers Package Link\nDESCRIPTION: Markdown link to the recommended replacement package azure-mgmt-appcontainers on PyPI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/app/azure-mgmt-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[azure-mgmt-appcontainers](https://pypi.org/project/azure-mgmt-appcontainers/)\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Document Model with Azure Form Recognizer v3.2.x - Python\nDESCRIPTION: This code demonstrates how to build a custom document model using the DocumentModelAdministrationClient in Azure Form Recognizer SDK v3.2.x for Python. It uses 'begin_build_document_model' and requires specifying 'build_mode' and 'blob_container_url' for accessing training data. Required dependencies include the relevant SDK classes and authentication credentials. The snippet prints out the model ID, description, creation date, and lists the document types and associated field confidence scores. This is specific to v3.2.x and requires training data to be stored in Azure Blob Storage.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndocument_model_admin_client = DocumentModelAdministrationClient(endpoint, AzureKeyCredential(key))\npoller = document_model_admin_client.begin_build_document_model(\n    \"template\", blob_container_url=container_sas_url, model_id=\"my-model-id\", description=\"my model description\"\n)\nmodel = poller.result()\n\nprint(\"Model ID: {}\".format(model.model_id))\nprint(\"Description: {}\".format(model.description))\nprint(\"Model created on: {}\\n\".format(model.created_on))\nprint(\"Doc types the model can recognize:\")\nfor name, doc_type in model.doc_types.items():\n    print(\"\\nDoc Type: '{}' which has the following fields:\".format(name))\n    for field_name, confidence in doc_type.field_confidence.items():\n        print(\"Field: '{}' has confidence score {}\".format(field_name, confidence))\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK Projects - plaintext\nDESCRIPTION: Lists both version-constrained third-party packages and local editable packages required for the Azure SDK for Python project. Dependencies include core Azure management clients with version constraints, and editable links to internal tools and services referenced by relative paths. The file is intended to be used with pip for installing all dependencies, ensuring environmental reproducibility and compatibility. Major dependencies include azure-mgmt-keyvault, azure-mgmt-network, azure-mgmt-resource, azure-mgmt-storage, azure-identity, and aiohttp, mapping both core Azure services and local utilities. This snippet must be placed in a requirements.txt file or provided to pip directly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/batch/azure-mgmt-batch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\ngazure-mgmt-keyvault<9.0.0\ngazure-mgmt-network<19.0.0\ng-e ../../resources/azure-mgmt-resource\ng-e ../../storage/azure-mgmt-storage\ng../../identity/azure-identity\ngaiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating a Replication Configuration for Azure Container Registry\nDESCRIPTION: Command to create a replication configuration for an Azure Container Registry to replicate content to a specific location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file_2.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz acr replication create -r MyRegistry -l westus2\n```\n\n----------------------------------------\n\nTITLE: Sending Messages - Service Bus v0.50 - Python\nDESCRIPTION: Shows how to send single and batch messages using the sender object in v0.50. BatchMessage may fail if the payload size exceeds limits. The sender must be used within a context manager. Message construction is done via Message or BatchMessage. Only synchronous sending is supported; the API throws if batch sizes are too large.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith sender:\n    # send a single message\n    sender.send(Message(\"Hello world!\"))\n\n    # send multiple messages. This can fail if the batch exceeded size limit\n    sender.send(BatchMessage([\"data 1\", \"data 2\", ...]))\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet defines local package dependencies for the Azure SDK for Python project. It includes references to azure-sdk-tools and azure-identity packages from specific relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: File Structure for Azure Promptflow Python Components\nDESCRIPTION: Basic directory structure showing the two main promptflow packages - the core promptflow package and the promptflow-tools package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/evaluate/pf_templates/built_in_metrics/qa/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npromptflow\nprompftlow-tools\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet outlines the release history for the Azure SDK for Python. It includes version numbers, release dates, and changes made in each version. The most recent release, 1.0.0b2, adds generated samples and drops support for older Python versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/education/azure-mgmt-education/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2022-12-12)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n\n## 1.0.0b1 (2022-07-07)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation using Sphinx automodule in reStructuredText\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `automodule` directive to generate documentation for the Python module `azure.ai.translation.document.models`. The options `:members:`, `:undoc-members:`, and `:inherited-members:` instruct Sphinx to include documentation for all members, members without docstrings, and members inherited from base classes, respectively. This requires Sphinx and the target Python package (`azure-ai-translation-document`) to be installed and accessible in the Python path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/doc/azure.ai.translation.document.models.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.ai.translation.document.models\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting a Python Class with Instance Variables in Azure SDK\nDESCRIPTION: This snippet demonstrates how to create a docstring for a Python class representing a detected language in the azure-ai-textanalytics package. It shows the proper format for documenting instance variables using the :ivar and :vartype descriptors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass DetectedLanguage(DictMixin):\n    \"\"\"DetectedLanguage contains the predicted language found in text,\n    its confidence score, and its ISO 639-1 representation.\n\n    :ivar name: Long name of a detected language (e.g. English,\n        French).\n    :vartype name: str\n    :ivar iso6391_name: A two letter representation of the detected\n        language according to the ISO 639-1 standard (e.g. en, fr).\n    :vartype iso6391_name: str\n    :ivar confidence_score: A confidence score between 0 and 1. Scores close\n        to 1 indicate 100% certainty that the identified language is true.\n    :vartype confidence_score: float\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Verifytypes for Type Completeness Check\nDESCRIPTION: Command to run Verifytypes, a feature of Pyright, to check type completeness of a Python package using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e verifytypes -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Package Dependencies for Azure SDK Python\nDESCRIPTION: This snippet lists the local package dependencies required for the Azure SDK for Python project. It includes references to Azure SDK tools, Azure Resource Management, and Azure Identity packages using relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/peering/azure-mgmt-peering/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Route Package via CLI\nDESCRIPTION: Command to install the Azure Maps Route SDK using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-route\n```\n\n----------------------------------------\n\nTITLE: YAML Directives for Renaming Enum Types\nDESCRIPTION: YAML transformation directives to rename various enum types in the generated code, including RecordingContentType, RecordingChannelType, RecordingFormatType, RecordingStorageType, Tone, and CallConnectionStateModel.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/swagger/SWAGGER.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.RecordingContentType.x-ms-enum\n  transform: >\n    $[\"name\"] = \"RecordingContent\";\n- from: swagger-document\n  where: $.definitions.RecordingChannelType.x-ms-enum\n  transform: >\n    $[\"name\"] = \"RecordingChannel\";\n- from: swagger-document\n  where: $.definitions.RecordingFormatType.x-ms-enum\n  transform: >\n    $[\"name\"] = \"RecordingFormat\";\n- from: swagger-document\n  where: $.definitions.RecordingStorageType.x-ms-enum\n  transform: >\n    $[\"name\"] = \"RecordingStorageKind\";\n- from: swagger-document\n  where: $.definitions.Tone.x-ms-enum\n  transform: >\n    $[\"name\"] = \"DtmfTone\";\n- from: swagger-document\n  where: $.definitions.CallConnectionStateModel.x-ms-enum\n  transform: >\n    $[\"name\"] = \"CallConnectionState\";\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK Python Dependencies\nDESCRIPTION: This requirements file lists necessary dependencies for Azure SDK Python development. It references internal SDK components and external libraries needed for the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dependencymap/azure-mgmt-dependencymap/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Using the Source Distribution Environment in Tox\nDESCRIPTION: Command to use the 'sdist' Tox environment which installs the package in editable mode and runs tests. This is primarily used for local development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntox run -e sdist -c <path to tox.ini> --root <path to python package>\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable and Conditional Python Dependencies\nDESCRIPTION: This snippet lists Python package dependencies using pip's requirements file format. It uses the `-e` flag to specify editable installations for local packages (`azure-sdk-tools`, `azure-core`, `azure-identity`) located via relative paths, allowing changes in those packages to be immediately reflected. It also includes a conditional dependency: `aiohttp` version 3.0 or higher is required only if the Python version is 3.8 or greater.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.8'\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0rc1 in Markdown\nDESCRIPTION: Announces the initial release of the Azure Stream Analytics Python SDK version 1.0.0rc1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0rc1 (2020-09-18)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.1.0b1\nDESCRIPTION: Release notes documenting extensive feature additions including new operation groups, models, and enums in beta version 1.1.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b1 (2024-11-04)\n\n### Features Added\n\n  - Client `PostgreSQLManagementClient` added operation group `quota_usages`\n  - Client `PostgreSQLManagementClient` added operation group `tuning_options`\n  - Model `FlexibleServerCapability` added property `supported_features`\n  - Enum `IdentityType` added member `SYSTEM_ASSIGNED`\n  - Model `Server` added property `cluster`\n  - Model `ServerSkuCapability` added property `supported_features`\n  - Model `ServerSkuCapability` added property `security_profile`\n  - Enum `ServerVersion` added member `SEVENTEEN`\n  - Model `ServerVersionCapability` added property `supported_features`\n  - Enum `SourceType` added member `APSARA_DB_RDS`\n  - Enum `SourceType` added member `CRUNCHY_POSTGRE_SQL`\n  - Enum `SourceType` added member `DIGITAL_OCEAN_DROPLETS`\n  - Enum `SourceType` added member `DIGITAL_OCEAN_POSTGRE_SQL`\n  - Enum `SourceType` added member `EDB_ORACLE_SERVER`\n  - Enum `SourceType` added member `EDB_POSTGRE_SQL`\n  - Enum `SourceType` added member `HEROKU_POSTGRE_SQL`\n  - Enum `SourceType` added member `HUAWEI_COMPUTE`\n  - Enum `SourceType` added member `HUAWEI_RDS`\n  - Enum `SourceType` added member `POSTGRE_SQL_COSMOS_DB`\n  - Enum `SourceType` added member `POSTGRE_SQL_FLEXIBLE_SERVER`\n  - Enum `SourceType` added member `SUPABASE_POSTGRE_SQL`\n  - Enum `StorageType` added member `ULTRA_SSD_LRS`\n  - Added model `Cluster`\n  - Added model `ImpactRecord`\n  - Added model `IndexRecommendationDetails`\n  - Added model `IndexRecommendationListResult`\n  - Added model `IndexRecommendationResource`\n  - Added model `IndexRecommendationResourcePropertiesAnalyzedWorkload`\n  - Added model `IndexRecommendationResourcePropertiesImplementationDetails`\n  - Added model `NameProperty`\n  - Added model `QuotaUsage`\n  - Added model `QuotaUsagesListResult`\n  - Added enum `RecommendationType`\n  - Added enum `RecommendationTypeEnum`\n  - Added model `SupportedFeature`\n  - Added enum `SupportedFeatureStatusEnum`\n  - Added enum `TuningOptionEnum`\n  - Added model `TuningOptionsListResult`\n  - Added model `TuningOptionsResource`\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure of release notes for the Azure SDK for Python. It includes sections for an unreleased version (1.1.0b1) and a released version (1.0.0), with placeholders for different types of changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-language-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0 (2021-07-27)\n```\n\n----------------------------------------\n\nTITLE: Creating DataFrame from Digital Twin Data in Python\nDESCRIPTION: This snippet shows how to create a pandas DataFrame from digital twin data, extracting specific properties.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/notebooks/03_Adding_a_bunch of_other_components.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf_customers = pd.DataFrame([[i['$dtId'],i['satisfaction']] for i in values],\n                           columns=['id','satisfaction'])\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Name in ServiceManifest.xml for sfmitestuser - XML\nDESCRIPTION: Specifies the Docker image to be used by the 'sfmitestuser' Service Fabric application in the ServiceManifest.xml file. Replace '{ACR_NAME}' with the Azure Container Registry name. Required for instructing Service Fabric which container image to deploy for the sfmitestuser application.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<ImageName>{ACR_NAME}.azurecr.io/sfmitestuser</ImageName>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode\nDESCRIPTION: Installs the Azure SDK tools package in editable mode from a relative path, allowing changes to the tools to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-websearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-Tenant Authentication Tenant Mismatch in Python\nDESCRIPTION: Specifies the parameter `additionally_allowed_tenants` used in credential types supporting multi-tenant authentication. Applications must explicitly list additional tenant IDs or use '*' in this parameter to allow token acquisition from tenants other than the credential's primary tenant ID, otherwise a `ClientAuthenticationError` is thrown.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nadditionally_allowed_tenants\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Comprehensive changelog tracking version releases, breaking changes, feature additions, and updates for the Azure Digital Twins Python SDK. Details changes in API versions, model properties, operations, and authentication methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-mgmt-digitaltwins/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 7.0.0 (2024-10-30)\n\n### Breaking Changes\n\n  - This package now only targets the latest Api-Version available on Azure and removes APIs of other Api-Version. After this change, the package can have much smaller size. If your application requires a specific and non-latest Api-Version, it's recommended to pin this package to the previous released version; If your application always only use latest Api-Version, please ignore this change.\n\n## 6.4.0 (2023-03-20)\n\n### Features Added\n\n  - Model AzureDataExplorerConnectionProperties has a new parameter adx_relationship_lifecycle_events_table_name\n  - Model AzureDataExplorerConnectionProperties has a new parameter adx_twin_lifecycle_events_table_name\n  - Model AzureDataExplorerConnectionProperties has a new parameter record_property_and_item_removals\n  - Operation TimeSeriesDatabaseConnectionsOperations.begin_delete has a new optional parameter cleanup_connection_artifacts\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Connected VMWare Management SDK Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip package manager. Installs both the Connected VMWare management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedvmware/azure-mgmt-connectedvmware/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-connectedvmware\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Generating Docs for EventHubConsumerClient (aio, Python)\nDESCRIPTION: Sphinx directive to automatically generate documentation for the asynchronous `EventHubConsumerClient` class in `azure.eventhub.aio`. Includes all members, undocumented members, and inherited members using the specified options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.aio.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.aio.EventHubConsumerClient\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK\nDESCRIPTION: This configuration specifies the required dependencies for the Azure SDK for Python. It includes relative paths to the Azure SDK tools and core packages, as well as the external aiohttp package with version requirement.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Removing Format Constraint for Endpoint Parameter in Azure Phone Numbers Swagger\nDESCRIPTION: This YAML snippet is an AutoRest directive that modifies the `Endpoint` parameter definition within the input Swagger document. It removes the `format` property from this parameter, potentially to avoid overly strict type checking or formatting issues during code generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/PHONE_NUMBER_SWAGGER.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.parameters.Endpoint\n  transform: >\n    $[\"format\"] = \"\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for MLflow Environment\nDESCRIPTION: This requirements file defines specific package versions needed for an MLflow environment. It includes mlflow itself, cloudpickle 2.0.0 for object serialization, psutil 5.8.0 for system monitoring, and scikit-learn 0.24.1 for machine learning algorithms.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/deployments/sklearn-diabetes/model/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nmlflow\ncloudpickle==2.0.0\npsutil==5.8.0\nscikit-learn==0.24.1\n```\n\n----------------------------------------\n\nTITLE: Python Function with Any Type Hints\nDESCRIPTION: Example showing how an untyped function is interpreted by the type checker, using explicit Any types. Demonstrates what type checking assumes for untyped code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\n\ndef add_things(x: Any, y: Any) -> Any:\n    return x + y\n```\n\n----------------------------------------\n\nTITLE: Making AccessTier Enum Names Unique via Autorest Directive (YAML)\nDESCRIPTION: This set of Autorest directives addresses an issue where the same enum (`AccessTier`) was used with potentially different value sets in parameters (`AccessTierRequired`, `AccessTierOptional`). It renames the enums using the `x-ms-enum.name` extension to `AccessTierRequired` and `AccessTierOptional` respectively, resolving conflicts in the Autorest Python generator.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.AccessTierRequired\n  transform: >\n    $[\"x-ms-enum\"].name = \"AccessTierRequired\";\n- from: swagger-document\n  where: $.parameters.AccessTierOptional\n  transform: >\n    $[\"x-ms-enum\"].name = \"AccessTierOptional\";\n```\n\n----------------------------------------\n\nTITLE: Sending a Single Event in azure-eventhub v1 (Python)\nDESCRIPTION: Shows the v1 process for sending an event. This involves creating an `EventHubClient`, adding a sender using `add_sender()`, starting the client lifecycle with `run()`, sending a single `EventData` object using `sender.send()`, and finally stopping the client with `stop()`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = EventHubClient(address)\nsender = client.add_sender()\nclient.run()\nsender.send(EventData('Single message'))\nclient.stop()\n```\n\n----------------------------------------\n\nTITLE: Azure Batch Account Creation Test with Multiple Preparers in Python\nDESCRIPTION: This example demonstrates the use of multiple preparers (ResourceGroupPreparer and StorageAccountPreparer) to set up prerequisites for testing Azure Batch account creation. It shows how to customize preparer parameters and handle complex resource dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport azure.mgmt.batch\nfrom azure.mgmt.batch import models\n\nfrom devtools_testutils import (\n    AzureMgmtRecordedTestCase,\n    recorded_by_proxy,\n    ResourceGroupPreparer,\n    StorageAccountPreparer\n)\n\nAZURE_ARM_ENDPOINT = \"https://centraluseuap.management.azure.com\"\nAZURE_LOCATION = 'eastus'\n\nclass TestMgmtBatch(AzureMgmtRecordedTestCase):\n    def setup_method(self, method):\n        self.mgmt_batch_client = self.create_mgmt_client(\n            azure.mgmt.batch.BatchManagementClient,\n            base_url=AZURE_ARM_ENDPOINT)\n\n    @ResourceGroupPreparer(location=AZURE_LOCATION)\n    @StorageAccountPreparer(name_prefix='batch', location=AZURE_LOCATION)\n    @recorded_by_proxy\n    def test_mgmt_batch_applications(self, resource_group, location, storage_account, storage_account_key):\n        # Test Create Account with Auto-Storage\n        storage_resource = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}'.format(\n            self.get_settings_value(\"SUBSCRIPTION_ID\"),\n            resource_group.name,\n            storage_account.name\n        )\n        batch_account = models.BatchAccountCreateParameters(\n            location=location,\n            auto_storage=models.AutoStorageBaseProperties(storage_account_id=storage_resource)\n        )\n        account_name = \"testbatch\"\n        account_setup = self.mgmt_batch_client.batch_account.begin_create(\n            resource_group.name,\n            account_name,\n            batch_account).result()\n        assert account_setup.name == account_name\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generator for EventGrid Python Client\nDESCRIPTION: YAML configuration for AutoRest that defines settings for generating the EventGrid Python Publisher Client. Specifies the input specification file, output locations, and various generation parameters including license header and models mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/swagger/README.PYTHON_T2.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: EventGridPublisherClient\ndescription: EventGrid Python Publisher Client\ngenerated-metadata: false\nlicense-header: MICROSOFT_MIT_NO_VERSION\nno-namespace-folders: true\noutput-folder: ../azure/eventgrid/_generated\nsource-code-folder-path: ./azure/eventgrid/_generated\ninput-file: \n    - https://github.com/Azure/azure-rest-api-specs/blob/master/specification/eventgrid/data-plane/Microsoft.EventGrid/stable/2018-01-01/EventGrid.json\n\npython: true\nmodels-mode: \"msrest\"\n```\n\n----------------------------------------\n\nTITLE: Typing Variadic Arguments with *args and **kwargs in Python Functions\nDESCRIPTION: Defines begin_operation function accepting arbitrary positional args of type str and keyword args of any type using Python's typing module. Enhances type safety for variadic function arguments in libraries. Code assumes operation-specific keyword arguments and demonstrates best practices for type annotation in flexible signatures.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\\n\\n\\ndef begin_operation(*args: str, **kwargs: Any) -> None:\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency on Local `azure-identity` (Pip Requirements)\nDESCRIPTION: Declares a dependency on the `azure-identity` package located at the relative path `../../identity/azure-identity`. This instructs `pip` to install the package from this local source directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/qumulo/azure-mgmt-qumulo/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: Pip Requirements\nCODE:\n```\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Development Dependencies\nDESCRIPTION: Lists the required dependencies for Azure SDK Python development, including local tool packages, resource management modules, identity components and aiohttp library\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-mgmt-loganalytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Removing x-ms-parameterized-host from Swagger document using YAML directive\nDESCRIPTION: YAML directive to remove the x-ms-parameterized-host property from the Swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $\n  transform: >\n    $[\"x-ms-parameterized-host\"] = undefined;\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Markdown formatted release history document showing version 3.1.0b1 (unreleased) and version 3.0.1 sections with standard changelog categories including Features Added, Breaking Changes, Bugs Fixed, and Other Changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 3.0.1 (2019-03-01)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Advisor Management Client in Python\nDESCRIPTION: Example of how to import the Azure Advisor Management Client after version 3.0.0. Shows the change in import statement from previous versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/advisor/azure-mgmt-advisor/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.advisor import AdvisorManagementClient\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Recovery Services Data Replication SDK using DefaultAzureCredential\nDESCRIPTION: Python code for authenticating with the Recovery Services Data Replication Management Client using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservicesdatareplication/azure-mgmt-recoveryservicesdatareplication/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.recoveryservicesdatareplication import RecoveryServicesDataReplicationMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RecoveryServicesDataReplicationMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet defines the dependencies required for the Azure SDK for Python project. It includes an editable installation of the azure-sdk-tools package from a relative path and the azure-core package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-spellcheck/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nazure-core\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Python Dependencies\nDESCRIPTION: Lists required package dependencies for Azure SDK Python development including core libraries, identity components, and async HTTP client libraries. Uses relative paths for local development packages and version constraints for external dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\naiodns>=2.0\n```\n\n----------------------------------------\n\nTITLE: Tracing Support in Azure SDK for Python\nDESCRIPTION: Shows how to integrate the Azure SDK for Python with tracing libraries like OpenTelemetry for monitoring and diagnostics.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Set up OpenTelemetry tracing\nfrom azure.core.tracing.ext.opentelemetry_span import OpenTelemetrySpan\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, SimpleExportSpanProcessor\n\n# Set the tracer provider\ntrace.set_tracer_provider(TracerProvider())\n\n# Export traces to console\ntrace.get_tracer_provider().add_span_processor(\n    SimpleExportSpanProcessor(ConsoleSpanExporter())\n)\n\n# Use Azure SDK with tracing\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.identity import DefaultAzureCredential\n\ntracer = trace.get_tracer(__name__)\ncredential = DefaultAzureCredential()\nclient = WebSiteManagementClient(credential, subscription_id)\n\nwith tracer.start_as_current_span(\"web_app_operation\"):\n    result = client.web_apps.get(resource_group_name, app_name)\n```\n\n----------------------------------------\n\nTITLE: Listing Tox Environments with Sample Output\nDESCRIPTION: Example output of the 'tox list' command showing available test environments in the Azure SDK for Python repository. This demonstrates the various predefined environments for different testing purposes like linting, type checking, and documentation building.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsdk-for-python/eng/tox> tox list\ndefault environments:\nwhl              -> Builds a wheel and runs tests\nsdist            -> Builds a source distribution and runs tests\n\nadditional environments:\npylint           -> Lints a package with a pinned version of pylint\nnext-pylint      -> Lints a package with pylint (version 2.15.8)\nmypy             -> Typechecks a package with mypy (version 1.9.0)\nnext-mypy        -> Typechecks a package with the latest version of mypy\npyright          -> Typechecks a package with pyright (version 1.1.287)\nnext-pyright     -> Typechecks a package with the latest version of static type-checker pyright\nverifytypes      -> Verifies the \"type completeness\" of a package with pyright\nwhl_no_aio       -> Builds a wheel without aio and runs tests\ndevelop          -> Tests a package\nsphinx           -> Builds a package's documentation with sphinx\ndepends          -> Ensures all modules in a target package can be successfully imported\nverifywhl        -> Verify directories included in whl and contents in manifest file\nverifysdist      -> Verify directories included in sdist and contents in manifest file. Also ensures that py.typed configuration is correct within the setup.py\ndevtest          -> Tests a package against dependencies installed from a dev index\nlatestdependency -> Tests a package against the released, upper-bound versions of its azure dependencies\nmindependency    -> Tests a package against the released, lower-bound versions of its azure dependencies\napistub          -> Generate an api stub of a package ( for https://apiview.dev )\nbandit           -> Runs bandit, a tool to find common security issues, against a package\nsamples          -> Runs a package's samples\nbreaking         -> Runs the breaking changes checker against a package\n```\n\n----------------------------------------\n\nTITLE: Authoring SDK Generation Settings for Azure QnA - YAML with Condition\nDESCRIPTION: Provides generation settings for the 'authoring' configuration, targeting the authoring-specific OpenAPI specification and outputting client code to the authoring directory. Overwrites output location and client title when --tag=release_authoring_1_1 is specified. Ensures separation of runtime and authoring client artifacts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nyaml $(tag) == 'release_authoring_1_1'\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/59ad2b7dd63e952822aa51e11a26a0af5724f996/specification/cognitiveservices/data-plane/Language/stable/2021-10-01/questionanswering-authoring.json\noutput-folder: ../azure/ai/language/questionanswering/authoring\ntitle: AuthoringClient\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Dependencies\nDESCRIPTION: This requirements file lists the necessary dependencies for Azure SDK for Python development, including local development tools, core libraries, and async HTTP components for Python 3.5 and above.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/media/azure-media-analytics-edge/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.5'\naiodns>=2.0; python_version >= '3.5'\n```\n\n----------------------------------------\n\nTITLE: Installing azure-sdk-tools in Editable Mode (pip)\nDESCRIPTION: This line instructs pip (Python's package installer) to install the package located at the relative path '../../../tools/azure-sdk-tools' in editable mode (specified by the '-e' flag). Editable installs link the installed package directly to the source code location, allowing code changes to be reflected without reinstalling. This is typically used for development environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/chaos/azure-mgmt-chaos/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Importing Version Information in Azure SDK for Python\nDESCRIPTION: Shows the new method for importing version information in the Azure SDK for Python. The version module is replaced with the __version__ attribute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/labservices/azure-mgmt-labservices/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__version__\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Versions with pip - Python\nDESCRIPTION: Demonstrates the command-line installation of specific versions of azure-core and azure-storage-blob using pip. Ensures compatibility by pinning the dependencies, which is necessary for projects relying on older or beta versions of the Azure SDK libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install azure-core==1.0.0b2 azure-storage-blob==12.0.0b2\n```\n\n----------------------------------------\n\nTITLE: Specifying External Development Tools for Azure SDK Python\nDESCRIPTION: This line specifies an editable install of the azure-sdk-tools package from a relative directory path. It's likely used in a requirements file for development dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Local Azure SDK Python Package Dependencies\nDESCRIPTION: Requirements file listing local editable installs (-e) for Azure SDK development packages including core libraries, management modules, and tools\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-mgmt-communication/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../notificationhubs/azure-mgmt-notificationhubs\n-e ../../identity/azure-identity\n-e ../../core/azure-core\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog Markdown\nDESCRIPTION: Detailed version history documenting changes, feature additions, and breaking changes for the Azure SDK for Python ElasticSan management package. Covers versions from initial beta 1.0.0b1 through 1.2.0b2.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elasticsan/azure-mgmt-elasticsan/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.2.0b2 (2025-04-21)\n\n### Features Added\n\n  - Client `ElasticSanMgmtClient` added method `begin_restore_volume`\n  - Model `ElasticSanMgmtClient` added property `url`\n  - Enum `ProvisioningStates` added member `DELETED`\n  - Enum `ProvisioningStates` added member `RESTORING`\n  - Enum `ProvisioningStates` added member `SOFT_DELETING`\n  - Model `VolumeGroupProperties` added property `delete_retention_policy`\n  - Model `VolumeGroupUpdateProperties` added property `delete_retention_policy`\n  - Added model `DeleteRetentionPolicy`\n  - Added enum `DeleteType`\n  - Added model `DiskSnapshotList`\n  - Added enum `PolicyState`\n  - Added model `PreValidationResponse`\n  - Added model `VolumeNameList`\n  - Added enum `XMsAccessSoftDeletedResources`\n  - Operation group `VolumesOperations` added method `begin_pre_backup`\n  - Operation group `VolumesOperations` added method `begin_pre_restore`\n  - Added operation group `ElasticSanMgmtClientOperationsMixin`\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation - Markdown\nDESCRIPTION: Changelog documenting release history from initial release through beta and GA versions, including breaking changes and feature additions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managementpartner/azure-mgmt-managementpartner/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (2022-11-01)\n\n### Features Added\n\n  - Model Error has a new parameter code\n  - Model Error has a new parameter message\n\n## 1.0.0 (2021-05-21)\n\n- GA release\n\n## 1.0.0b1 (2020-12-10)\n\nThis is beta preview version.\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n\n## 0.1.1 (2019-05-17)\n\n**Features**\n\n  - Model PartnerResponse has a new parameter partner_name\n  - Added operation group PartnersOperations\n\n## 0.1.0 (2018-02-06)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools for Python Development\nDESCRIPTION: This line installs the Azure SDK tools from a local directory in editable mode. It's typically used in a requirements file for setting up a development environment for the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedvmware/azure-mgmt-connectedvmware/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Core Azure Core Dependency in Python Requirements\nDESCRIPTION: References the base Azure Core package using a relative path for local development. This allows the project to use an in-development version of 'azure-core' located in '../../core/azure-core'. Dependencies must be available at the specified path and structured as a Python package. It's critical for providing shared functionality across all Azure SDK components.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servermanager/azure-mgmt-servermanager/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n../../core/azure-core\n```\n\n----------------------------------------\n\nTITLE: Disabling Geo-Replica Discovery - Azure App Configuration Python Provider - Python\nDESCRIPTION: Demonstrates how to disable automatic geo-replica discovery by setting 'replica_discovery_enabled=False' in the provider options. Dependencies: 'azure.appconfiguration.provider', 'azure.identity'. Suitable for scenarios where deterministic endpoint use is necessary or privacy is a concern.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.appconfiguration.provider import load\nfrom azure.identity import DefaultAzureCredential\n\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), replica_discovery_enabled=False)\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes in Markdown\nDESCRIPTION: Shows how to document general breaking changes in a Markdown format, including code examples and links.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Service in Python\nDESCRIPTION: Demonstrates how to import an Azure service package using the 'azure' namespace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport azure.myservice\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Image Analysis Library in Python\nDESCRIPTION: Command to install the Azure Image Analysis package for Python using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-vision-imageanalysis\n```\n\n----------------------------------------\n\nTITLE: Declaring Autorest Directive for Flattening Properties in YAML\nDESCRIPTION: This YAML snippet declares a reusable Autorest directive named 'flatten-property'. It utilizes JavaScript transformations targeting Swagger or OpenAPI documents. If a specified property exists within a model's properties, it adds the 'x-ms-client-flatten' extension with a value of 'true'. This instructs Autorest to flatten the structure of this property in the generated client SDK, promoting its nested properties to the level of the parent object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndeclare-directive:\n    flatten-property: >-\n        [{\n        from: 'swagger-document',\n        transform: `if ($.properties[${JSON.stringify($)}]) { $.properties[${JSON.stringify($)}][\\\"x-ms-client-flatten\\\"] = true; }`\n        },\n        {\n        from: 'openapi-document',\n        transform: `if ($.properties[${JSON.stringify($)}]) { $.properties[${JSON.stringify($)}][\\\"x-ms-client-flatten\\\"] = true; }`\n        }]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode with Pip\nDESCRIPTION: Pip requirement specification to install Azure SDK development tools from a relative path in editable mode. Uses the -e flag to install in development/editable mode, allowing changes to the source to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/app/azure-mgmt-app/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest Using PowerShell\nDESCRIPTION: Command to install AutoRest globally using npm, which is required for generating the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/swagger/SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Peeked and Received Messages in Python\nDESCRIPTION: Added new properties `enqueued_sequence_number`, `dead_letter_error_description`, `dead_letter_reason`, `dead_letter_source`, `delivery_count`, and `expires_at_utc` to `PeekMessage` and `ReceivedMessage` classes, providing more detailed runtime and state information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nPeekMessage.enqueued_sequence_number, PeekMessage.dead_letter_error_description, PeekMessage.dead_letter_reason, PeekMessage.dead_letter_source, PeekMessage.delivery_count, PeekMessage.expires_at_utc\nReceivedMessage.enqueued_sequence_number, ReceivedMessage.dead_letter_error_description, ReceivedMessage.dead_letter_reason, ReceivedMessage.dead_letter_source, ReceivedMessage.delivery_count, ReceivedMessage.expires_at_utc\n```\n\n----------------------------------------\n\nTITLE: Importing SqlManagementClientConfiguration in Python\nDESCRIPTION: Demonstrates the new import location for SqlManagementClientConfiguration after breaking changes in version 0.13.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.sqlmanagement import SqlManagementClientConfiguration\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Maps Route SDK\nDESCRIPTION: Commands to generate the Python SDK using Autorest v3\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest --v3 --python\n```\n\n----------------------------------------\n\nTITLE: Documenting Return Values in Python Azure SDK Docstrings\nDESCRIPTION: Example of documenting return values in Azure SDK docstrings, including description and type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n:return: <Description of the returned object>\n:rtype: <Type of the returned object>\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group and All Contained Resources using Azure CLI in Shell\nDESCRIPTION: This final shell snippet deletes the entire Azure resource group, including all associated Azure resources created during the test. The command is non-blocking (--no-wait) and suppresses confirmation prompts (-y). Proper permissions are required, and accidental deletion is irreversible.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\naz group delete -n $RESOURCE_GROUP -y --no-wait\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest Globally - PowerShell\nDESCRIPTION: Installs the AutoRest tool globally using npm to provide code generation capabilities for OpenAPI/Swagger definitions. This step is a prerequisite for subsequent AutoRest commands and must be run in an environment where Node.js and npm are available. The globally installed AutoRest enables access to the autorest CLI command across the system.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/swagger/SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Adding New Models to MonitorManagementClient in Azure SDK for Python\nDESCRIPTION: This snippet lists the new models added to the MonitorManagementClient, providing additional data structures for various monitoring and management operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nAdded model `Action`\nAdded model `ActionDetail`\nAdded model `ActionGroupList`\nAdded model `ActionGroupResource`\nAdded model `ActivityLogAlertActionGroup`\nAdded model `ActivityLogAlertActionList`\nAdded model `ActivityLogAlertAllOfCondition`\nAdded model `ActivityLogAlertLeafCondition`\nAdded model `ActivityLogAlertList`\nAdded model `ActivityLogAlertPatchBody`\nAdded model `ActivityLogAlertResource`\nAdded enum `AggregationType`\nAdded enum `AggregationTypeEnum`\nAdded enum `AlertSeverity`\nAdded model `AlertingAction`\nAdded model `ArmRoleReceiver`\nAdded model `AutomationRunbookReceiver`\nAdded model `AutoscaleErrorResponse`\nAdded model `AutoscaleErrorResponseError`\nAdded model `AutoscaleNotification`\nAdded model `AutoscaleProfile`\nAdded model `AutoscaleSettingResource`\nAdded model `AutoscaleSettingResourceCollection`\nAdded model `AutoscaleSettingResourcePatch`\nAdded model `AzNsActionGroup`\nAdded model `AzureFunctionReceiver`\nAdded model `AzureMonitorPrivateLinkScope`\nAdded model `AzureMonitorPrivateLinkScopeListResult`\nAdded model `BaselineMetadata`\nAdded enum `BaselineSensitivity`\nAdded enum `CategoryType`\nAdded enum `ComparisonOperationType`\nAdded enum `ConditionalOperator`\nAdded model `Context`\nAdded enum `CreatedByType`\nAdded model `Criteria`\nAdded enum `CriterionType`\nAdded model `DataContainer`\nAdded model `DataSource`\nAdded model `DataSourceConfiguration`\nAdded enum `DataSourceKind`\nAdded enum `DataStatus`\nAdded model `DiagnosticSettingsCategoryResource`\nAdded model `DiagnosticSettingsCategoryResourceCollection`\nAdded model `DiagnosticSettingsResource`\nAdded model `DiagnosticSettingsResourceCollection`\nAdded model `Dimension`\nAdded model `DynamicMetricCriteria`\nAdded model `DynamicThresholdFailingPeriods`\nAdded enum `DynamicThresholdOperator`\nAdded enum `DynamicThresholdSensitivity`\nAdded model `EmailNotification`\nAdded model `EnableRequest`\nAdded enum `Enabled`\nAdded model `Error`\nAdded model `ErrorAdditionalInfo`\nAdded model `ErrorContract`\nAdded model `ErrorDetail`\nAdded model `ErrorDetailAdditionalInfoItem`\nAdded model `ErrorResponseAutoGenerated`\nAdded model `ErrorResponseAutoGenerated2`\nAdded model `ErrorResponseCommon`\nAdded model `ErrorResponseError`\nAdded model `ErrorResponseErrorAdditionalInfoItem`\nAdded model `EtwEventConfiguration`\nAdded model `EtwProviderConfiguration`\nAdded model `EventCategoryCollection`\nAdded model `EventData`\nAdded model `EventDataCollection`\nAdded model `EventHubReceiver`\nAdded enum `EventLevel`\nAdded model `EventLogConfiguration`\nAdded model `GuestDiagnosticSettingsAssociationList`\nAdded model `GuestDiagnosticSettingsAssociationResource`\nAdded model `GuestDiagnosticSettingsAssociationResourcePatch`\nAdded model `GuestDiagnosticSettingsList`\nAdded enum `GuestDiagnosticSettingsOsType`\nAdded model `GuestDiagnosticSettingsPatchResource`\nAdded model `GuestDiagnosticSettingsResource`\nAdded model `HttpRequestInfo`\nAdded model `Incident`\nAdded model `IncidentListResult`\nAdded model `ItsmReceiver`\nAdded model `LocalizableString`\nAdded model `LocalizableStringAutoGenerated`\nAdded model `LogMetricTrigger`\nAdded model `LogProfileCollection`\nAdded model `LogProfileResource`\nAdded model `LogProfileResourcePatch`\nAdded model `LogSearchRuleResource`\nAdded model `LogSearchRuleResourceCollection`\nAdded model `LogSearchRuleResourcePatch`\nAdded model `LogSettings`\nAdded model `LogSettingsAutoGenerated`\nAdded model `LogToMetricAction`\nAdded model `LogicAppReceiver`\nAdded model `MetadataValue`\nAdded model `Metric`\nAdded model `MetricAlertAction`\nAdded model `MetricAlertCriteria`\nAdded model `MetricAlertMultipleResourceMultipleMetricCriteria`\nAdded model `MetricAlertResource`\nAdded model `MetricAlertResourceCollection`\nAdded model `MetricAlertResourcePatch`\nAdded model `MetricAlertSingleResourceMultipleMetricCriteria`\nAdded model `MetricAlertStatus`\nAdded model `MetricAlertStatusCollection`\nAdded model `MetricAlertStatusProperties`\nAdded model `MetricAvailability`\nAdded model `MetricBaselinesResponse`\nAdded enum `MetricClass`\nAdded model `MetricCriteria`\nAdded model `MetricDefinition`\nAdded model `MetricDefinitionCollection`\nAdded model `MetricDimension`\nAdded model `MetricNamespace`\nAdded model `MetricNamespaceCollection`\nAdded model `MetricNamespaceName`\nAdded model `MetricSettings`\nAdded model `MetricSettingsAutoGenerated`\nAdded model `MetricSingleDimension`\nAdded enum `MetricStatisticType`\nAdded model `MetricTrigger`\nAdded enum `MetricTriggerType`\nAdded enum `MetricUnit`\nAdded model `MetricValue`\nAdded model `MultiMetricCriteria`\nAdded enum `NamespaceClassification`\nAdded model `NotificationRequestBody`\nAdded enum `Odatatype`\nAdded enum `OnboardingStatus`\nAdded model `Operation`\nAdded model `OperationDisplay`\nAdded model `OperationListResult`\nAdded model `OperationStatus`\nAdded enum `Operator`\nAdded model `PerformanceCounterConfiguration`\nAdded model `PredictiveAutoscalePolicy`\nAdded enum `PredictiveAutoscalePolicyScaleMode`\nAdded model `PredictiveResponse`\nAdded model `PredictiveValue`\nAdded model `PrivateEndpointConnection`\nAdded model `PrivateEndpointConnectionListResult`\nAdded model `PrivateEndpointProperty`\nAdded model `PrivateLinkResource`\nAdded model `PrivateLinkResourceListResult`\nAdded model `PrivateLinkScopesResource`\nAdded model `PrivateLinkServiceConnectionStateProperty`\nAdded enum `ProvisioningState`\nAdded model `ProxyOnlyResource`\nAdded model `ProxyResource`\nAdded enum `QueryType`\nAdded model `Recurrence`\nAdded enum `RecurrenceFrequency`\nAdded model `RecurrentSchedule`\nAdded model `Resource`\nAdded model `ResourceAutoGenerated`\nAdded model `ResourceAutoGenerated2`\nAdded model `ResourceAutoGenerated3`\nAdded model `Response`\nAdded model `ResponseWithError`\nAdded enum `ResultType`\nAdded model `RetentionPolicy`\nAdded model `ScaleAction`\nAdded model `ScaleCapacity`\nAdded enum `ScaleDirection`\nAdded model `ScaleRule`\nAdded model `ScaleRuleMetricDimension`\nAdded enum `ScaleRuleMetricDimensionOperationType`\nAdded enum `ScaleType`\nAdded model `Schedule`\nAdded model `ScopedResource`\nAdded model `ScopedResourceListResult`\nAdded model `SenderAuthorization`\nAdded model `ServiceDiagnosticSettingsResource`\nAdded model `ServiceDiagnosticSettingsResourcePatch`\nAdded model `SingleBaseline`\nAdded model `SingleMetricBaseline`\nAdded model `SinkConfiguration`\nAdded enum `SinkConfigurationKind`\nAdded model `Source`\nAdded model `SubscriptionDiagnosticSettingsResource`\nAdded model `SubscriptionDiagnosticSettingsResourceCollection`\nAdded model `SubscriptionLogSettings`\nAdded model `SubscriptionProxyOnlyResource`\nAdded model `SystemData`\nAdded model `TagsResource`\nAdded model `TestNotificationDetailsResponse`\nAdded enum `TimeAggregationType`\nAdded model `TimeSeriesBaseline`\nAdded model `TimeSeriesElement`\nAdded model `TimeWindow`\nAdded model `TriggerCondition`\n```\n\n----------------------------------------\n\nTITLE: Running Python tests using pytest in Azure SDK\nDESCRIPTION: Commands for running Python tests in the Azure SDK using pytest, including options for running specific tests or enabling print statement output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/tests.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsdk/storage/azure-mgmt-storage> pytest\n```\n\nLANGUAGE: shell\nCODE:\n```\nsdk/storage/azure-mgmt-storage> pytest tests/test_mgmt_storage.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nsdk/storage/azure-mgmt-storage> pytest -s\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Dependencies for Python\nDESCRIPTION: Lists required dependencies for the Azure SDK for Python project using relative paths. Includes references to Azure SDK tools and Azure Identity modules.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkfunction/azure-mgmt-networkfunction/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Retrieving Managed Identity Details - Shell\nDESCRIPTION: Fetches details for a previously created user-assigned managed identity using Azure CLI, including its principal ID and client ID. These values are needed for subsequent configuration steps. The command assumes the managed identity exists in the specified resource group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\naz identity show -g $RESOURCE_GROUP -n AdminUser\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Help Information\nDESCRIPTION: Command to display detailed help information for a specific performance test.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/perfstress_tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventhub> perfstress ProcessEventsTest --help\n```\n\n----------------------------------------\n\nTITLE: Including Azure Security Namespace Package in Python Requirements\nDESCRIPTION: References the 'azure-security-nspkg' package from a relative path '../../nspkg/azure-security-nspkg', suggesting use of a namespace package for Azure security functionality. This should be installed locally via pip, and is a common pattern for SDK modularization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/dev_requirements.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n../../nspkg/azure-security-nspkg\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for AmqpMessageBodyType Class using Sphinx reStructuredText\nDESCRIPTION: This reStructuredText directive uses Sphinx's `autoclass` to automatically generate documentation for the `azure.eventhub.amqp.AmqpMessageBodyType` class, including all members, undocumented members, and inherited members. This requires Sphinx and the `azure-eventhub` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.amqp.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.amqp.AmqpMessageBodyType\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode with Pip\nDESCRIPTION: This snippet specifies how to install the Azure SDK tools package from a local directory using pip's editable mode (-e flag). The package is located at a relative path from the current directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-customsearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0b3 in Markdown\nDESCRIPTION: This snippet details the changes in version 1.0.0b3 of the Azure SDK for Python, including new properties added to existing models and a new model introduced.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mysqlflexibleservers/azure-mgmt-mysqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b3 (2024-11-18)\n\n### Features Added\n\n  - Model `Capability` added property `supported_features`\n  - Model `Server` added property `full_version`\n  - Added model `FeatureProperty`\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Changelog Entry v35.0.0\nDESCRIPTION: Changelog entry documenting feature additions and breaking changes for version 35.0.0 released on April 14, 2025\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservice/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 35.0.0 (2025-04-14)\n\n### Features Added\n\n  - Model ManagedClusterIngressProfileWebAppRouting has a new parameter nginx\n\n### Breaking Changes\n\n  - Model LoadBalancer no longer has parameter name_properties_name\n  - Operation LoadBalancersOperations.create_or_update has a new required parameter parameters\n  - Operation LoadBalancersOperations.create_or_update no longer has parameter allow_service_placement\n  - Operation LoadBalancersOperations.create_or_update no longer has parameter name\n  - Operation LoadBalancersOperations.create_or_update no longer has parameter node_selector\n  - Operation LoadBalancersOperations.create_or_update no longer has parameter primary_agent_pool_name\n  - Operation LoadBalancersOperations.create_or_update no longer has parameter service_label_selector\n  - Operation LoadBalancersOperations.create_or_update no longer has parameter service_namespace_selector\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -SubscriptionId in PowerShell\nDESCRIPTION: Defines the optional 'SubscriptionId' parameter, a string representing the Azure subscription ID to use for new resources when logging in as a provisioner. If not specified and not logged in, Connect-AzAccount selects one. Once set or logged in, this subscription is used for subsequent operations. It's not required, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Proxy for Live Azure AI Inference Tests (Bash)\nDESCRIPTION: Commands to configure the test proxy for running live service tests without recordings. This setup enables testing against the actual Azure service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset AZURE_TEST_RUN_LIVE=true\nset AZURE_SKIP_LIVE_RECORDING=true\nset PROXY_URL=http://localhost:5000\nset AZURE_TEST_USE_CLI_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Messages in Python SDK\nDESCRIPTION: This documentation highlights a breaking change in version 1.0.0b3 of the `azure-ai-project` Python SDK. The method `.agents.get_messages` was removed and replaced by `.agents.list_messages` for retrieving messages associated with an agent thread. Users should update their code to use the `list_messages` method instead.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.agents.get_messages\n```\n\nLANGUAGE: python\nCODE:\n```\n.agents.list_messages\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -AdditionalParameters in PowerShell\nDESCRIPTION: Defines the optional 'AdditionalParameters' parameter, a Hashtable containing key-value pairs passed to both the ARM template(s) and any pre/post deployment scripts. It's not required, is named, has no default value, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies (Pip Requirements Format)\nDESCRIPTION: This snippet lists Python package dependencies, likely from a `requirements.txt` file, for an Azure SDK-related project. It includes an editable local installation (`-e`) of `azure-sdk-tools`, a local path dependency on `azure-core`, and external PyPI dependencies on `aiohttp` (for async HTTP) and `azure-identity` (for Azure authentication). These lines define the necessary packages to be installed using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-radiologyinsights/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\naiohttp\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Adding New Methods to ClustersOperations in Python\nDESCRIPTION: This snippet demonstrates the addition of new methods to the ClustersOperations model in version 3.4.0, including methods for managing callout policies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n  - Model `ClustersOperations` added method `begin_add_callout_policies`\n  - Model `ClustersOperations` added method `begin_remove_callout_policy`\n  - Model `ClustersOperations` added method `list_callout_policies`\n  - Model `ClustersOperations` added method `list_follower_databases_get`\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK Python\nDESCRIPTION: Lists required development dependencies including local tools, Azure identity package, and Azure resource management package with version constraint. The file uses pip's editable install mode for local tools and specifies version constraints for resource management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-analytics/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\nazure-mgmt-resource<=21.1.0\n```\n\n----------------------------------------\n\nTITLE: Running WebPubSub Client Stress Tests in Python\nDESCRIPTION: Command to execute stress tests using the specified stress test file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/stress/how-to-run.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-messaging-webpubsubclient/stress> python stress_base_async.py\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PostgreSQL Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages for PostgreSQL Flexible Servers management and authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-postgresqlflexibleservers\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools Package Reference\nDESCRIPTION: Relative path reference to Azure SDK development tools package that should be installed in editable mode (-e flag) for development purposes\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portal/azure-mgmt-portal/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Adding Admonition Blocks in Markdown Documentation\nDESCRIPTION: Examples of different admonition blocks that can be used in Sphinx-style documentation to highlight notes, warnings, important information, and general information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/documentation_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.. admonition:: Additional Note \n\n   :class: note \n\n   This is a note admonition. \n\n.. admonition:: Warning \n\n   :class: warning \n\n   This is a warning admonition. \n\n.. admonition:: Important \n\n   :class: danger \n\n   This is an important admonition. \n\n.. admonition:: Information \n\n   :class: info \n\n   This is an informational admonition. \n```\n\n----------------------------------------\n\nTITLE: Applying AutoRest Directives for Azure Service Bus SDK Customization (YAML)\nDESCRIPTION: This YAML configuration uses AutoRest directives to customize the code generation process. It modifies the input Swagger document by transforming the `type` of the `title` property to `string` for several specific definitions (NamespacePropertiesEntry, QueueDescriptionEntry, TopicDescriptionEntry, SubscriptionDescriptionEntry, RuleDescriptionEntry) before the Python code is generated.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    - from: swagger-document\n      where: $.definitions.NamespacePropertiesEntry.properties.title\n      transform: >\n        $[\"type\"] = \"string\";\n    - from: swagger-document\n      where: $.definitions.QueueDescriptionEntry.properties.title\n      transform: >\n        $[\"type\"] = \"string\";\n    - from: swagger-document\n      where: $.definitions.TopicDescriptionEntry.properties.title\n      transform: >\n        $[\"type\"] = \"string\";\n    - from: swagger-document\n      where: $.definitions.SubscriptionDescriptionEntry.properties.title\n      transform: >\n        $[\"type\"] = \"string\";\n    - from: swagger-document\n      where: $.definitions.RuleDescriptionEntry.properties.title\n      transform: >\n        $[\"type\"] = \"string\";\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Document Translation Performance Test\nDESCRIPTION: Example command showing how to run a specific performance test (TranslationPerfStressTest) for the Azure Document Translation service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-translation-document/tests/perfstress_tests> perfstress TranslationPerfStressTest\n```\n\n----------------------------------------\n\nTITLE: Adding New Features in Azure Network Management Client 28.1.0\nDESCRIPTION: This code snippet shows the new features added in version 28.1.0 of the Azure Network Management Client, including new operation groups, enum members, and models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 28.1.0 (2024-12-20)\n\n### Features Added\n\n  - Client `NetworkManagementClient` added operation group `ipam_pools`\n  - Client `NetworkManagementClient` added operation group `static_cidrs`\n  - Client `NetworkManagementClient` added operation group `reachability_analysis_intents`\n  - Client `NetworkManagementClient` added operation group `reachability_analysis_runs`\n  - Client `NetworkManagementClient` added operation group `verifier_workspaces`\n  - Enum `AddressPrefixType` added member `NETWORK_GROUP`\n  - Model `AddressSpace` added property `ipam_pool_prefix_allocations`\n  - Model `BastionHost` added property `enable_private_only_bastion`\n  - Enum `FirewallPolicyIDPSSignatureDirection` added member `FIVE`\n  - Model `NetworkInterface` added property `default_outbound_connectivity_enabled`\n  - Enum `ProvisioningState` added member `CANCELED`\n  - Enum `ProvisioningState` added member `CREATING`\n  - Model `SecurityAdminConfiguration` added property `network_group_address_space_aggregation_option`\n  - Model `Subnet` added property `ipam_pool_prefix_allocations`\n  - Added enum `AddressSpaceAggregationOption`\n  - Added model `CommonErrorAdditionalInfo`\n  - Added model `CommonErrorDetail`\n  - Added model `CommonErrorResponse`\n  - Added model `CommonProxyResource`\n  - Added model `CommonResource`\n  - Added model `CommonTrackedResource`\n  - Added model `ExpressRouteFailoverCircuitResourceDetails`\n  - Added model `ExpressRouteFailoverConnectionResourceDetails`\n  - Added model `ExpressRouteFailoverRedundantRoute`\n  - Added model `ExpressRouteFailoverSingleTestDetails`\n  - Added model `ExpressRouteFailoverStopApiParameters`\n  - Added model `ExpressRouteFailoverTestDetails`\n  - Added model `FailoverConnectionDetails`\n  - Added enum `FailoverConnectionStatus`\n  - Added enum `FailoverTestStatus`\n  - Added enum `FailoverTestStatusForSingleTest`\n  - Added enum `FailoverTestType`\n  - Added model `IPTraffic`\n  - Added model `IntentContent`\n  - Added enum `IpType`\n  - Added model `IpamPool`\n  - Added model `IpamPoolList`\n  - Added model `IpamPoolPrefixAllocation`\n  - Added model `IpamPoolProperties`\n  - Added model `IpamPoolUpdate`\n  - Added model `IpamPoolUpdateProperties`\n  - Added model `LoadBalancerHealthPerRule`\n  - Added model `LoadBalancerHealthPerRulePerBackendAddress`\n  - Added enum `NetworkProtocol`\n  - Added model `PoolAssociation`\n  - Added model `PoolAssociationList`\n  - Added model `PoolUsage`\n  - Added model `ReachabilityAnalysisIntent`\n  - Added model `ReachabilityAnalysisIntentListResult`\n  - Added model `ReachabilityAnalysisIntentProperties`\n  - Added model `ReachabilityAnalysisRun`\n  - Added model `ReachabilityAnalysisRunListResult`\n  - Added model `ReachabilityAnalysisRunProperties`\n  - Added model `ResourceBasics`\n  - Added model `StaticCidr`\n  - Added model `StaticCidrList`\n  - Added model `StaticCidrProperties`\n  - Added model `VerifierWorkspace`\n  - Added model `VerifierWorkspaceListResult`\n  - Added model `VerifierWorkspaceProperties`\n  - Added model `VerifierWorkspaceUpdate`\n  - Added model `VerifierWorkspaceUpdateProperties`\n  - Operation group `LoadBalancerLoadBalancingRulesOperations` added method `begin_health`\n  - Operation group `VirtualNetworkGatewaysOperations` added method `begin_get_failover_all_test_details`\n  - Operation group `VirtualNetworkGatewaysOperations` added method `begin_get_failover_single_test_details`\n  - Operation group `VirtualNetworkGatewaysOperations` added method `begin_start_express_route_site_failover_simulation`\n  - Operation group `VirtualNetworkGatewaysOperations` added method `begin_stop_express_route_site_failover_simulation`\n  - Added operation group `IpamPoolsOperations`\n  - Added operation group `ReachabilityAnalysisIntentsOperations`\n  - Added operation group `ReachabilityAnalysisRunsOperations`\n  - Added operation group `StaticCidrsOperations`\n  - Added operation group `VerifierWorkspacesOperations`\n```\n\n----------------------------------------\n\nTITLE: Applying General Autorest Customization Directives (Part 2)\nDESCRIPTION: This YAML block contains further Autorest directives for general customization. It remaps the security definition from `apim_key` to `AzureKey` to support automatic key credential generation. It simplifies the security requirements to use only the `AzureKey`. It also shortens the main description in the `info` block and standardizes the description and format for the `Endpoint` parameter. Finally, it explicitly defines the `multilingual` parameter in a specific operation as a boolean type.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n# Support automatically generating code for key credentials.\n- from: swagger-document\n  where: $.securityDefinitions\n  transform: |\n    $[\"AzureKey\"] = $[\"apim_key\"];\n    delete $[\"apim_key\"];\n\n- from: swagger-document\n  where: $.security\n  transform: |\n    $ = [\n        {\n          \"AzureKey\": []\n        }\n    ];\n\n# Fix too long of link in description.\n- from: swagger-document\n  where: $.info\n  transform: |\n    $[\"description\"] = \"The language service conversations API is a suite of natural language processing (NLP) skills that can be used to analyze structured conversations (textual or spoken). Further documentation can be found in https://learn.microsoft.com/azure/cognitive-services/language-service/overview.\";\n\n# Fix Endpoint parameter description and format.\n- from: swagger-document\n  where: $.parameters.Endpoint\n  transform: |\n    $[\"description\"] = \"Supported Cognitive Services endpoint (e.g., https://<resource-name>.cognitiveservices.azure.com).\";\n    $[\"format\"] = \"url\";\n\n# Define multilingual parameter as a boolean.\n- where-operation: ConversationalAnalysisAuthoring_GetSupportedPrebuiltEntities\n  transform: |\n    var multilingualParam = $.parameters.find(param => param.name === \"multilingual\");\n    multilingualParam.type = \"boolean\";\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Exceptions in Python\nDESCRIPTION: Shows how to catch and handle HTTP exceptions after the 1.0.0b1 update. Most exceptions are now azure.core.exceptions.HttpResponseError instead of CloudError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    result = client.subscriptions.get(subscription_id)\nexcept HttpResponseError as e:\n    print(f\"An HTTP error occurred: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Removing Share, Directory, and File Name Parameters from Swagger Paths\nDESCRIPTION: YAML directive to remove share name, directory, and file name parameters from paths in the swagger document, as direct URIs are used instead.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $(\"x-ms-paths\")\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{shareName}/{directory}/{fileName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ShareName\") && false == param['$ref'].endsWith(\"#/parameters/DirectoryPath\") && false == param['$ref'].endsWith(\"#/parameters/FilePath\"))}));\n        }\n        else if (property.includes('/{shareName}/{directory}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ShareName\") && false == param['$ref'].endsWith(\"#/parameters/DirectoryPath\"))}));\n        }\n        else if (property.includes('/{shareName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ShareName\"))}));\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Command Line Execution with Test Proxy - CMD\nDESCRIPTION: Example of running a performance test using the test proxy server with the -x flag to specify the proxy endpoint.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-blob/tests> perfstress DownloadTest -x \"https://localhost:5001\"\n```\n\n----------------------------------------\n\nTITLE: Defining Editable Dependency on Azure SDK Tools in Python Requirements\nDESCRIPTION: Specifies an editable installation of the Azure SDK Tools located at a relative path. The '-e' flag allows real-time updates to the package during development. Requires the target directory ('../../../tools/azure-sdk-tools') to contain a valid Python package setup (e.g., setup.py or pyproject.toml). This enables local development and testing without reinstalling the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servermanager/azure-mgmt-servermanager/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Dependencies with Relative Paths\nDESCRIPTION: Dependency declarations using relative file paths to reference local Azure SDK packages and tools. This includes the Azure SDK tools package and Azure Identity package located in parent directories.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/newrelicobservability/azure-mgmt-newrelicobservability/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Declaring Editable Dependency on Azure SDK Tools in Python Requirements\nDESCRIPTION: Specifies an editable (`-e`) installation dependency on the `azure-sdk-tools` package located at the relative path `../../../tools/azure-sdk-tools`. This allows developers to modify the tools package source code, and have those changes immediately reflected in the environment without needing reinstallation. Essential for active development on the tools package itself.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sphere/azure-mgmt-sphere/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation (Markdown)\nDESCRIPTION: Detailed changelog documenting feature additions, breaking changes, bug fixes and other updates across multiple SDK versions from 1.0.0b3 to 1.7.2\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.7.2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.7.1 (2024-08-22)\n\n### Bugs Fixed\n- Fixed a bug in serializing/deserializing tags filter in `ConfigurationSnapshot`.\n\n## 1.7.0 (2024-08-15)\n\n### Features Added\n- Added operation `list_labels()` for listing configuration setting labels.\n- Supported filtering by configuration setting tags in `list_configuration_settings()` and `list_revisions()`.\n- Added a new property tags to ConfigurationSettingsFilter to support filtering settings with tags filter for snapshot.\n\n### Bugs Fixed\n- Fixed a bug where the `feature_id` of `FeatureFlagConfigurationSetting` will be different from `id` customer field, and may overwrite the original customer-defined value if different from the `FeatureFlagConfigurationSetting` key suffix.\n\n### Other Changes\n- Updated the default `api_version` to \"2023-11-01\".\n- Published enum `LabelFields` and model `ConfigurationSettingLabel`.\n- Published enum `SnapshotFields`, and accepted the type for `fields` parameter in `get_snapshot()` and `list_snapshots()`.\n- Published enum `ConfigurationSettingFields`, and accepted the type for `fields` parameter in `list_configuration_settings()` and `list_revisions()`.\n- Published enum `SnapshotComposition`, and accepted the type for `ConfigurationSnapshot` property `composition_type` and `begion_create_snapshot()` kwarg `composition_type`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DNS Client in Python\nDESCRIPTION: Demonstrates how to configure the Azure DNS client with additional options as keyword arguments, replacing the previous config attribute approach.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = MyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Package Path for Python\nDESCRIPTION: This line specifies the path to the Azure SDK tools package for installation. It uses the '-e' flag, which typically indicates an editable install, pointing to a local directory containing the package source.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Adding New Properties to Cluster Model in Python\nDESCRIPTION: This snippet shows new properties added to the Cluster model in version 3.4.0, including callout_policies and zone_status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  - Model `Cluster` added property `callout_policies`\n  - Model `Cluster` added property `zone_status`\n```\n\n----------------------------------------\n\nTITLE: MANIFEST.in Configuration for Azure Package\nDESCRIPTION: Example MANIFEST.in file content for including necessary files in the package distribution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ninclude *.md\ninclude LICENSE\ninclude azure/__init__.py\nrecursive-include tests *.py\nrecursive-include samples *.py *.md\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Names for BlobHierarchyListSegment via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive modifies the `BlobHierarchyListSegment` definition. It specifies explicit XML names (`BlobPrefix` and `Blob`) for the `BlobPrefixes` and `BlobItems` array properties, respectively, ensuring correct XML serialization/deserialization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.BlobHierarchyListSegment\n  transform: >\n    $.properties.BlobPrefixes.xml = { \"name\": \"BlobPrefix\" };\n    $.properties.BlobItems.xml = { \"name\": \"Blob\" };\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Local Path Dependency\nDESCRIPTION: Indicates a local editable install path to Azure SDK tools located three directories up in the tools folder. This is typically used in development environments for pip installations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-accesscontrol/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Azure SDK Python Dependencies\nDESCRIPTION: Lists required Python package dependencies for Azure SDK development, including local development tools, core Azure libraries, and third party packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Detailed changelog documenting version releases and changes for the Azure SDK Python package, including features added, breaking changes, bugs fixed and other modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0b3 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 2.0.0b2 (2024-12-12)\n\n### Features Added\n\n- Integrated support for SAS-based authentication\n\n## 2.0.0b1 (2024-08-06)\n\n### Features Added\n\n- Support Render API `2024-04-01`\n\n## 1.0.0b3 (2024-05-15)\n\n### Other Changes\n\n- Fix Sphinx errors\n- Fix mypy typing errors for mypy version 1.6.1\n\n## 1.0.0b2 (2023-07-13)\n\n### Other Changes\n\n- Deprecate Elevation tile enum\n- Remove python 3.6 support\n\n## 1.0.0b1 (2022-10-13)\n\n### Features Added\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Correcting Client Configuration Import Path in azure-mgmt-containerregistry (Python)\nDESCRIPTION: Details the breaking change in v3.0.0rc2 affecting the import path for `ContainerRegistryManagementClientConfiguration`. Previously potentially importable from the client module, it was moved to the main package namespace (`azure.mgmt.containerregistry`). This adjustment was part of the code generator update.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old import location (potentially incorrect)\n# from azure.mgmt.containerregistry.containerregistry_management_client import ContainerRegistryManagementClientConfiguration\n```\n\nLANGUAGE: python\nCODE:\n```\n# Correct import location starting from v3.0.0rc2\nfrom azure.mgmt.containerregistry import ContainerRegistryManagementClientConfiguration\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cognitive Search Python Client Library\nDESCRIPTION: Command to install the Azure Cognitive Search client library for Python using pip. The --pre flag indicates the use of a pre-release version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-search-documents --pre\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK Python Development\nDESCRIPTION: This snippet defines the required dependencies for Azure SDK Python development. It references a local path to Azure SDK tools and includes the aiohttp library as a dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databoxedge/azure-mgmt-databoxedge/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required Python packages for the Azure SDK project. It includes local dependencies using relative paths and one external dependency. The -e flag indicates editable installs for local packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-mgmt-digitaltwins/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n-e ../../resources/azure-mgmt-msi\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Key Vault Keys Version Definition\nDESCRIPTION: Version definition import for azure.keyvault.keys package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.keyvault.keys import __version__\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 3.1.0b2 in Markdown\nDESCRIPTION: This snippet outlines the changes in version 3.1.0b2 of the Azure SDK for Python, including new features, added models, and breaking changes related to NGINX management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.1.0b2 (2025-02-23)\n\n### Features Added\n\n  - Client `NginxManagementClient` added operation group `api_keys`\n  - Model `AnalysisResultData` added property `diagnostics`\n  - Model `NginxDeploymentProperties` added property `nginx_app_protect`\n  - Model `NginxDeploymentProperties` added property `dataplane_api_endpoint`\n  - Model `NginxDeploymentUpdateProperties` added property `network_profile`\n  - Model `NginxDeploymentUpdateProperties` added property `nginx_app_protect`\n  - Added enum `ActivationState`\n  - Added model `DiagnosticItem`\n  - Added model `ErrorResponse`\n  - Added enum `Level`\n  - Added model `NginxConfigurationProtectedFileRequest`\n  - Added model `NginxConfigurationProtectedFileResponse`\n  - Added model `NginxConfigurationRequest`\n  - Added model `NginxConfigurationRequestProperties`\n  - Added model `NginxConfigurationResponse`\n  - Added model `NginxConfigurationResponseProperties`\n  - Added model `NginxDeploymentApiKeyListResponse`\n  - Added model `NginxDeploymentApiKeyRequest`\n  - Added model `NginxDeploymentApiKeyRequestProperties`\n  - Added model `NginxDeploymentApiKeyResponse`\n  - Added model `NginxDeploymentApiKeyResponseProperties`\n  - Added model `NginxDeploymentPropertiesNginxAppProtect`\n  - Added model `NginxDeploymentUpdatePropertiesNginxAppProtect`\n  - Added model `WebApplicationFirewallComponentVersions`\n  - Added model `WebApplicationFirewallPackage`\n  - Added model `WebApplicationFirewallSettings`\n  - Added model `WebApplicationFirewallStatus`\n  - Added operation group `ApiKeysOperations`\n\n### Breaking Changes\n\n  - Model `NginxDeploymentProperties` deleted or renamed its instance variable `managed_resource_group`\n  - Deleted or renamed model `NginxConfiguration`\n  - Deleted or renamed model `NginxConfigurationProperties`\n  - Deleted or renamed model `ResourceProviderDefaultErrorResponse`\n```\n\n----------------------------------------\n\nTITLE: Listing key properties with azure-keyvault\nDESCRIPTION: Demonstrates how to list properties of keys in a vault using the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nkeys = client.get_keys(vault_base_url=\"https://my-key-vault.vault.azure.net/\")\n\nfor key in keys:\n    print(key.attributes.created)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes a local path to Azure SDK tools using the -e flag, which installs the package in editable mode. Additionally, it specifies the aiohttp library as a dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerinstance/azure-mgmt-containerinstance/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK\nDESCRIPTION: This requirements file lists the Python package dependencies needed for the Azure SDK project. It includes both external libraries with version specifications and local SDK components.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/repo_health_status_report/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttpx==0.25.2\nmarkdown==3.6\nPyGitHub>=1.59.0\nsetuptools==74.1.3\n-e ./sdk/identity/azure-identity\n-e ./tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.0.0 Release in Markdown\nDESCRIPTION: Indicates the general availability (GA) release of version 1.0.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2021-03-26)\n\n - GA release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Blob Library\nDESCRIPTION: This snippet demonstrates how to install the Azure Storage Blob library and run a sample script to create a container.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-storage-blob library\n$ pip install azure-storage-blob\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_storage_blob.py\n```\n\n----------------------------------------\n\nTITLE: Identity and Authentication Changes - Python SDK\nDESCRIPTION: Breaking changes in authentication implementation requiring migration from azure.common.credentials to azure-identity classes. Example of new client initialization pattern.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-cosmosdb/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools as Editable Dependency\nDESCRIPTION: Specifies an editable installation path for Azure SDK tools using pip's -e flag, pointing to a relative path '../../../tools/azure-sdk-tools'\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/logz/azure-mgmt-logz/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK Python Development\nDESCRIPTION: This requirements file lists the necessary dependencies for Azure SDK Python development. It includes a reference to local development tools, the Azure Identity package for authentication, and aiohttp for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/migrate/azure-mgmt-migrationassessment/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Reservations using DefaultAzureCredential\nDESCRIPTION: Python code demonstrating how to authenticate with the Azure Reservations API using DefaultAzureCredential. This approach uses environment variables for authentication parameters and creates a client instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/reservations/azure-mgmt-reservations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.reservations import AzureReservationAPI\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureReservationAPI(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Autorest v3 to v4 Import Path Changes (Multi-API)\nDESCRIPTION: Demonstrates the breaking changes in Python import paths for clients, configurations, models, and operations when migrating from Autorest v3 to v4 for multi-API packages. Direct imports from internal modules within versioned API folders (e.g., `v20xx_yy_zz`) are no longer allowed. Imports should target the versioned namespace or its primary submodules like 'models' and 'operations'. This example uses `azure.mgmt.network` as a placeholder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/changelog_generics.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Client import: OLD (no longer works)\n# from azure.mgmt.network.v20xx_yy_zz.network_management_client import NetworkManagementClient\n\n# Client import: NEW (works)\nfrom azure.mgmt.network.v20xx_yy_zz import NetworkManagementClient\n\n# Configuration import: OLD (no longer works)\n# from azure.mgmt.network.v20xx_yy_zz.network_management_client import NetworkManagementClientConfiguration\n\n# Configuration import: NEW (works)\nfrom azure.mgmt.network.v20xx_yy_zz import NetworkManagementClientConfiguration\n\n# Model import: OLD (no longer works)\n# from azure.mgmt.network.v20xx_yy_zz.models.my_class import MyClass\n\n# Model import: NEW (works)\nfrom azure.mgmt.network.v20xx_yy_zz.models import MyClass\n\n# Operation import: OLD (no longer works)\n# from azure.mgmt.network.v20xx_yy_zz.operations.my_class_operations import MyClassOperations\n\n# Operation import: NEW (works)\nfrom azure.mgmt.network.v20xx_yy_zz.operations import MyClassOperations\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Configuration\nDESCRIPTION: Defines the required Python packages and their versions for an Azure SDK project. Includes local package references, Azure components, and third-party dependencies with specific version constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\npillow\npydantic\ngit+https://github.com/openai/openai-python@next\nwebsockets >= 13, < 15\n```\n\n----------------------------------------\n\nTITLE: Customizing Generated Operation Methods in AutoRest\nDESCRIPTION: YAML directive to make the POST operation for data collection rules streams internal. This customization modifies the Swagger document to add the x-ms-internal property.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: '$[\"paths\"][\"/dataCollectionRules/{ruleId}/streams/{stream}\"][\"post\"]'\n    transform: >\n      $[\"x-ms-internal\"] = true;\n```\n\n----------------------------------------\n\nTITLE: Defining a Typed Function with Union Arguments and Results in Python\nDESCRIPTION: This Python snippet showcases a function that accepts either SentimentAnalysis, EntityRecognition, or LanguageDetection as input, deciding its output type via a Union return type annotation. Dependencies include the typing module's Union and the respective analysis/result classes, which must be defined elsewhere. Inputs include a string and one of three analysis type objects; the function then delegates to an internal _analyze implementation and returns a corresponding result object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\n\ndef analyze_text(text: str, analysis_kind: Union[SentimentAnalysis, EntityRecognition, LanguageDetection]) -> Union[\n    SentimentResult, EntityRecognitionResult, LanguageDetectionResult]:\n    return _analyze(text, analysis_kind)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Key Vault with Certificate Deployment Enabled - Shell\nDESCRIPTION: Provisions an Azure Key Vault configured for deployment and template integration using Azure CLI. The command sets the resource group, name, location, and enables deployment scenarios. The specified vault will later store secrets and certificates required by the Service Fabric cluster and applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\naz keyvault create -g $RESOURCE_GROUP -n $KEY_VAULT_NAME -l $LOCATION --sku standard --enabled-for-deployment true --enabled-for-template-deployment true\n```\n\n----------------------------------------\n\nTITLE: Building Azure Core Wheel Package (Bash)\nDESCRIPTION: This command builds a Python wheel distribution package for the `azure-core` library using its `setup.py` script. This step is necessary to package the library code so it can be loaded by the browser test environment. It should be executed from the `/sdk/core/azure-core` directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-experimental/samples/pyodide_integration/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment - Shell\nDESCRIPTION: Activates the previously created Python virtual environment by sourcing the activate script, ensuring that subsequent Python and pip commands use the isolated environment. Parameter: path to activation script.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsource ~/venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK for Python Dependencies\nDESCRIPTION: This snippet defines the dependencies required for the Azure SDK for Python project. It includes the azure-core package from a relative path and the azure-sdk-tools package installed in editable mode from a different relative path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-imagebuilder/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../core/azure-core\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Azure SDK Development\nDESCRIPTION: This requirements file specifies the dependencies needed for Azure SDK for Python development. It includes references to local development tools and other Azure packages that are required for development and testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsightcontainers/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Installs the necessary Python libraries including Azure Monitor Query, Azure Identity, Azure Monitor Ingestion, pandas, numpy, plotly, and scikit-learn.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\n!{sys.executable} -m pip install --upgrade azure-monitor-query azure-identity azure-monitor-ingestion\n\n!{sys.executable} -m pip install --upgrade pandas numpy plotly scikit-learn nbformat\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies with Version Constraints for Azure SDK for Python\nDESCRIPTION: This snippet lists all required dependencies with specific version constraints for the Azure SDK for Python project. It includes testing libraries like pytest with version constraints based on Python version, along with HTTP clients, serialization libraries, and utilities needed for development and testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/autorest_req.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest==5.4.2; python_version >= '3.5'\npytest==4.6.9; python_version == '2.7'\npytest-cov==2.8.1\npytest-asyncio==0.12.0; python_version >= '3.5'\nisodate==0.6.0\nmsrest==0.6.14\nwheel==0.34.2\nGitPython==3.1.14\naiohttp==3.6.2; python_version >= '3.6'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with azure-keyvault using ServicePrincipalCredentials\nDESCRIPTION: Creates a KeyVaultClient using ServicePrincipalCredentials from azure.common for authentication in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.credentials import ServicePrincipalCredentials\nfrom azure.keyvault import KeyVaultClient\n\ncredentials = ServicePrincipalCredentials(\n    client_id=\"client id\",\n    secret=\"client secret\",\n    tenant=\"tenant id\"\n)\n\nclient = KeyVaultClient(credentials)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Dependencies\nDESCRIPTION: Local package dependencies required for Azure SDK Python development, including SDK tools and resource management packages\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK Development Dependencies in Python\nDESCRIPTION: A list of required dependencies for developing the Azure SDK for Python. It includes local path references to development tools, namespace packages, and specific Azure service packages with version constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../nspkg/azure-search-nspkg\naiohttp>=3.0\nazure-identity\nazure-mgmt-resource<=21.1.0\n```\n\n----------------------------------------\n\nTITLE: Generating SDK Using AutoRest in PowerShell\nDESCRIPTION: Commands to navigate to the swagger folder and run AutoRest to generate the SDK based on the configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/swagger/SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Using ResourceGroup+Provisioner Parameter Set for Resource Deletion in PowerShell\nDESCRIPTION: This syntax shows the ResourceGroup+Provisioner parameter set for the Remove-TestResources.ps1 script, which allows specifying a ResourceGroupName directly along with service principal authentication details.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-ResourceGroupName <String>] -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationSecret <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-CI] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Development Dependencies\nDESCRIPTION: This requirements file lists dependencies needed for development of the Azure SDK for Python. It includes a local path reference to Azure SDK tools and the aiohttp library which is commonly used for asynchronous HTTP requests in Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/desktopvirtualization/azure-mgmt-desktopvirtualization/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: Records version 0.0.0b1 release details from September 22, 2020, noting a test successful release milestone.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-communication-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.0.0b1 (2020-09-22)\n- Test a successful Release\n```\n\n----------------------------------------\n\nTITLE: Logging In to Azure Container Registry - Shell\nDESCRIPTION: Authenticates the Docker client to the specified Azure Container Registry using Azure CLI. This step is necessary prior to pushing or pulling images to/from the registry. The command assumes that Azure CLI is authenticated and the ACR resource exists.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\naz acr login -n $ACR_NAME\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Azure SDK Python Project\nDESCRIPTION: Lists required development dependencies for working with the Azure SDK for Python. The file references two dependencies: the Azure SDK tools package and the Azure Identity package, both specified using relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/commerce/azure-mgmt-commerce/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a local directory as a dependency for Azure SDK development tools. It uses the '-e' flag to indicate an editable install, allowing changes in the source directory to be immediately reflected in the installed package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-security-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Local Editable Python Dependency (pip)\nDESCRIPTION: This line, typically found in a requirements file (`requirements.txt`, `dev-requirements.txt`, etc.), instructs pip to install the package located at the relative path `../../../tools/azure-sdk-tools` in editable mode. The `-e` flag ensures that changes made directly to the source code in that directory are immediately reflected in the project's environment without needing reinstallation. This is common for development setups.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/workloads/azure-mgmt-workloads/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Personalizer SDK Operation Renaming and Transformations\nDESCRIPTION: YAML directives for renaming operations and transforming parameters in the Azure Personalizer SDK generation process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-operation: Evaluations_List\n    transform: >\n        $.parameters[1][\"x-ms-client-name\"] = \"filter_expression\";\n  - rename-operation:\n      from: Evaluations_List\n      to: ListEvaluations\n  - rename-operation:\n      from: Evaluations_Get\n      to: GetEvaluation\n  - rename-operation:\n      from: Evaluations_Delete\n      to: DeleteEvaluation\n  - rename-operation:\n      from: Evaluations_Create\n      to: CreateEvaluation\n  - rename-operation:\n      from: FeatureImportances_List\n      to: ListFeatureImportances\n  - rename-operation:\n      from: FeatureImportances_Get\n      to: GetFeatureImportance\n  - rename-operation:\n      from: FeatureImportances_Delete\n      to: DeleteFeatureImportance\n  - rename-operation:\n      from: FeatureImportances_Create\n      to: CreateFeatureImportance\n  - rename-operation:\n      from: ServiceConfiguration_Get\n      to: GetServiceConfiguration\n  - rename-operation:\n      from: ServiceConfiguration_Update\n      to: UpdateServiceConfiguration\n  - rename-operation:\n      from: ServiceConfiguration_ApplyFromEvaluation\n      to: ApplyFromEvaluation\n  - rename-operation:\n      from: Policy_Get\n      to: GetPolicy\n  - rename-operation:\n      from: Policy_Update\n      to: UpdatePolicy\n  - rename-operation:\n      from: Policy_Update\n      to: UpdatePolicy\n  - rename-operation:\n      from: Policy_Reset\n      to: ResetPolicy\n  - rename-operation:\n      from: Log_Delete\n      to: DeleteLog\n  - rename-operation:\n      from: Log_GetProperties\n      to: GetLogProperties\n  - rename-operation:\n      from: Model_Get\n      to: GetModel\n  - rename-operation:\n      from: Model_Import\n      to: ImportModel\n  - rename-operation:\n      from: Model_Reset\n      to: ResetModel\n  - rename-operation:\n      from: Model_GetProperties\n      to: GetModelProperties\n  - rename-operation:\n      from: Rank\n      to: RankSingleSlot\n  - rename-operation:\n      from: Events_Reward\n      to: RewardSingleSlotEvent\n  - rename-operation:\n      from: Events_Activate\n      to: ActivateSingleSlotEvent\n  - rename-operation:\n      from: MultiSlot_Rank\n      to: RankMultiSlot\n  - rename-operation:\n      from: MultiSlotEvents_Reward\n      to: RewardMultiSlotEvent\n  - rename-operation:\n      from: MultiSlotEvents_Activate\n      to: ActivateMultiSlotEvent\n```\n\n----------------------------------------\n\nTITLE: Specifying aiohttp dependency version for Azure SDK for Python\nDESCRIPTION: This code snippet defines the required version of the aiohttp library (3.8.1) needed for the Azure SDK for Python. It uses pinned version syntax to ensure compatibility.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/requirements_async.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naiohttp==3.8.1\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration Settings in YAML\nDESCRIPTION: YAML configuration for AutoRest that specifies the API version, output folder, namespace, and other generation options for the Azure Communication Chat SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/swagger/SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntag: package-chat-2024-03-07\nrequire: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/72d4c8cae964a12dc27ad4684b0bddf493225338/specification/communication/data-plane/Chat/readme.md\noutput-folder: ../azure/communication/chat/_generated\nnamespace: azure.communication.chat\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nclear-output-folder: true\npython: true\nv3: true\nno-async: false\nadd-credential: false\ntitle: Azure Communication Chat Service\ndisable-async-iterators: true\nsecurity: Anonymous\n```\n\n----------------------------------------\n\nTITLE: Adversarial Simulator with Promptflow Eval SDK\nDESCRIPTION: Example of using the Adversarial Simulator in Promptflow Eval SDK for generating synthetic datasets and evaluating LLM responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom promptflow.evals.synthetic import AdversarialSimulator, AdversarialScenario\nfrom pprint import pprint\n\nazure_cred = DefaultAzureCredential()\nproject_scope = {\n    \"subscription_id\": \"<your-subscription-id>\",\n    \"resource_group_name\": \"<your-resource-group>\",\n    \"project_name\": \"<your-project-name>\",\n}\n\nsimulator = AdversarialSimulator(azure_ai_project=project_scope, credential=azure_cred)\n\noutputs = await simulator(\n    scenario=AdversarialScenario.ADVERSARIAL_QA, \n    max_conversation_turns=1, \n    max_simulation_results=1, \n    target=callback\n)\n\npprint(outputs.to_eval_qa_json_lines())\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK for Python Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes relative paths to core Azure libraries, specific Azure management libraries, and external packages like aiohttp.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n../../core/azure-core\nazure-mgmt-authorization\nazure-mgmt-digitaltwins\n-e ../../identity/azure-identity\n-e ../../../tools/azure-sdk-tools\naiohttp>=3.0\n../../nspkg/azure-digitaltwins-nspkg\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2022-02-01-preview\nDESCRIPTION: Configuration settings for the v2022-02-01-preview API version, specifying input file for mfe and the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2022-02-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2022-02-01-preview/mfe.json\noutput-folder: $(python-sdks-folder)/v2022_02_01_preview\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Service Bus Performance Tests using pip\nDESCRIPTION: Shows the command-line instructions to install development dependencies from `dev_requirements.txt` and the Azure Service Bus package itself using pip within an active virtual environment. This prepares the environment for running the `perfstress` tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/tests/perf_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-servicebus> pip install -r dev_requirements.txt\n(env) ~/azure-servicebus> pip install .\n```\n\n----------------------------------------\n\nTITLE: Installing Required Azure Packages\nDESCRIPTION: Initial setup command to install necessary Azure Python packages for AI agent implementation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-projects azure-identity azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Generating SDK using AutoRest\nDESCRIPTION: Commands to navigate to swagger folder and generate SDK using AutoRest\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/swagger/SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Documenting a Python Class with Parameters and Instance Variables in Azure SDK\nDESCRIPTION: This example shows how to document a Python class that has both positional parameters, keyword arguments, and instance variables. It's from the azure-ai-translation-document package and demonstrates the use of :param, :keyword, :ivar, and :vartype descriptors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass DocumentTranslationInput(object):  # pylint: disable=useless-object-inheritance\n    # pylint: disable=C0301\n    \"\"\"Input for translation. This requires that you have your source document or\n    documents in an Azure Blob Storage container. Provide a SAS URL to the source file or\n    source container containing the documents for translation. The source document(s) are\n    translated and written to the location provided by the TranslationTargets.\n\n    :param str source_url: Required. Location of the folder / container or single file with your\n        documents.\n    :param targets: Required. Location of the destination for the output. This is a list of\n        TranslationTargets. Note that a TranslationTarget is required for each language code specified.\n    :type targets: list[~azure.ai.translation.document.TranslationTarget]\n    :keyword str source_language_code: Language code for the source documents.\n        If none is specified, the source language will be auto-detected for each document.\n    :keyword str prefix: A case-sensitive prefix string to filter documents in the source path for\n        translation. For example, when using a Azure storage blob Uri, use the prefix to restrict\n        sub folders for translation.\n    :keyword str suffix: A case-sensitive suffix string to filter documents in the source path for\n        translation. This is most often use for file extensions.\n    :keyword storage_type: Storage type of the input documents source string. Possible values\n        include: \"Folder\", \"File\".\n    :paramtype storage_type: str or ~azure.ai.translation.document.StorageInputType\n    :keyword str storage_source: Storage Source. Default value: \"AzureBlob\".\n        Currently only \"AzureBlob\" is supported.\n\n    :ivar str source_url: Required. Location of the folder / container or single file with your\n        documents.\n    :ivar targets: Required. Location of the destination for the output. This is a list of\n        TranslationTargets. Note that a TranslationTarget is required for each language code specified.\n    :vartype targets: list[~azure.ai.translation.document.TranslationTarget]\n    :ivar str source_language_code: Language code for the source documents.\n        If none is specified, the source language will be auto-detected for each document.\n    :ivar str prefix: A case-sensitive prefix string to filter documents in the source path for\n        translation. For example, when using a Azure storage blob Uri, use the prefix to restrict\n        sub folders for translation.\n    :ivar str suffix: A case-sensitive suffix string to filter documents in the source path for\n        translation. This is most often use for file extensions.\n    :ivar storage_type: Storage type of the input documents source string. Possible values\n        include: \"Folder\", \"File\".\n    :vartype storage_type: str or ~azure.ai.translation.document.StorageInputType\n    :ivar str storage_source: Storage Source. Default value: \"AzureBlob\".\n        Currently only \"AzureBlob\" is supported.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Python SDK\nDESCRIPTION: Commands to navigate to swagger folder and generate Python SDK using Autorest\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest --v3 --python\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path\nDESCRIPTION: Pip requirements entry that installs the Azure SDK tools package in editable mode from a relative local path. The -e flag enables development mode installation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/aks/azure-mgmt-devspaces/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Removing queueName from URLs in Swagger document using YAML directive\nDESCRIPTION: YAML directive to remove {queueName} from URLs and add dummy query parameters to avoid collisions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{queueName}/messages/{messageid}'))\n        {\n            var oldName = property;\n            var newName = property.replace('/{queueName}', '').replace('/{messageid}', '?restype=dummpyMessage');\n            $[newName] = $[oldName];\n            delete $[oldName];\n        }\n        else if (property.includes('/{queueName}'))\n        {\n            var oldName = property;\n            var newName = property.replace('/{queueName}', '');\n            $[newName] = $[oldName];\n            delete $[oldName];\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: SDK Package Structure JSON Example\nDESCRIPTION: Example JSON structure showing how package components like enums, models, and operations are represented for diff analysis. This format optimizes diff processing by using dictionaries instead of arrays where order is not significant.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/changelog_impl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"models\": {\n    \"enums\": {\n      \"AvailabilitySetSkuTypes\": {\n        \"name\": \"AvailabilitySetSkuTypes\",\n        \"type\": \"Enum\",\n        \"values\": [\n          \"classic\",\n          \"aligned\"\n        ]\n      }\n    },\n    \"exceptions\": {},\n    \"models\": {\n      \"AdditionalCapabilities\": {\n        \"name\": \"AdditionalCapabilities\",\n        \"type\": \"Model\",\n        \"parameters\": {\n          \"ultra_ssd_enabled\": {\n            \"name\": \"ultra_ssd_enabled\",\n            \"properties\": {\n              \"type\": \"bool\",\n              \"required\": false,\n              \"readonly\": false\n            }\n          }\n        }\n      }\n    }\n  },\n  \"operations\": {\n    \"AvailabilitySetsOperations\": {\n      \"name\": \"AvailabilitySetsOperations\",\n      \"functions\": {\n        \"create_or_update\": {\n          \"name\": \"create_or_update\",\n          \"metadata\": {\n            \"url\": \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}\"\n          },\n          \"parameters\": [\n            {\n              \"name\": \"resource_group_name\"\n            },\n            {\n              \"name\": \"availability_set_name\"\n            },\n            {\n              \"name\": \"parameters\"\n            }\n          ]\n        }\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet outlines the release history for the Azure SDK for Python, including version 1.1.0, 1.0.0, and 1.0.0b1. It details new features, operations, and model changes for each release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/newrelicobservability/azure-mgmt-newrelicobservability/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0 (2024-03-18)\n\n### Features Added\n\n  - Added operation MonitorsOperations.list_linked_resources\n  - Added operation group BillingInfoOperations\n  - Added operation group ConnectedPartnerResourcesOperations\n  - Added operation group MonitoredSubscriptionsOperations\n  - Model NewRelicMonitorResource has a new parameter saa_s_azure_subscription_status\n  - Model NewRelicMonitorResource has a new parameter subscription_state\n\n## 1.0.0 (2023-05-20)\n\n### Other Changes\n\n  - First GA\n\n## 1.0.0b1 (2023-03-24)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Exporting Required Environment Variables for Test Runs - Shell\nDESCRIPTION: Sets two environment variables: AZURE_TEST_RUN_LIVE to enable live test runs, and AZURE_SKIP_LIVE_RECORDING to skip recording of live test results. These influence the behavior of the pytest suite for Azure SDK testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nexport AZURE_TEST_RUN_LIVE=true\nexport AZURE_SKIP_LIVE_RECORDING=true\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Requirements for Azure Event Hub SDK Projects\nDESCRIPTION: Lists the core dependencies required to build and run applications with the Azure SDK for Python, particularly focused on Event Hub and related blob/checkpointing and identity features. Notes usage of extra packages for telemetry (opencensus), environment variable handling (python-dotenv), and WebSocket support. Each package name represents a PyPI installable dependency, typically managed through pip or a requirements manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/stress/scripts/dev_requirement.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npsutil\n# To install from a specific git branch, replace the package with a req in the following format:\n# git+<gh-repo-url>@<branch>#subdirectory=<path/to/sdk>&egg=<package-name>\n# ex. git+https://github.com/kashifkhan/azure-sdk-for-python.git@fix_ws_none_error#subdirectory=sdk/eventhub/azure-eventhub&egg=azure-eventhub\nazure-eventhub\nazure-eventhub-checkpointstoreblob\nazure-eventhub-checkpointstoreblob-aio\nazure-storage-blob\nazure-identity\nopencensus-ext-azure\npython-dotenv\nwebsocket-client\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the dependencies required for the Azure SDK for Python project. It includes a local dependency using the -e flag and an external dependency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Mongocluster Management Client using DefaultAzureCredential\nDESCRIPTION: Example code showing how to authenticate with the MongoClusterMgmtClient using DefaultAzureCredential. This requires environment variables for client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mongocluster/azure-mgmt-mongocluster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.mongocluster import MongoClusterMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MongoClusterMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode using Relative Path\nDESCRIPTION: This requirement specifies an editable installation (-e flag) of Azure SDK tools from a relative path. This allows developers to make changes to the tools while developing the Azure SDK for Python without having to reinstall the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datadog/azure-mgmt-datadog/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Disabling PR Batching in Matrix Configuration\nDESCRIPTION: Example YAML configuration showing how to disable the matrix batching feature for specific test matrices by setting the PRBatching flag to false.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/scripts/job-matrix/pullrequest-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nMatrixConfigs:\n  - Name: version_overrides_tests\n    Path: sdk/core/version-overrides-matrix.json\n    Selection: all\n    PRBatching: false # the new key\n    GenerateVMJobs: true\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools via pip requirements file\nDESCRIPTION: Specifies a local editable install of Azure SDK tools from a relative path for Python development purposes\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-synapse-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Dependencies for Azure SDK Python Package\nDESCRIPTION: This requirements file specifies the development dependencies needed for testing an Azure SDK Python package. It includes relative path references to other Azure SDK components and external libraries for async HTTP and testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\n../../core/azure-core\naiohttp>=3.0\naiounittest>=1.4\npytest-tornasync==0.6.0.post2\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Documents the complete release history of Azure SDK for Python including version updates, feature additions, breaking changes, and bug fixes. Notable changes include dropping Python 2.7 support, adding LivyStatementStates and LivyStates features, and API version updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-spark/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.8.0 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 0.7.0 (2021-10-05)\n\n### Features Added\n\n- Added `LivyStatementStates` and `LivyStates`\n\n## 0.6.0 (2021-08-10)\n\n- Updated API version to \"2020-12-01\"\n\n## 0.5.0 (2021-03-09)\n\n- Internal bugfixes (re-generated with latest generator)\n- Stop Python 3.5 support\n\n## 0.4.0 (2020-12-08)\n\n- Internal bugfixes (re-generated with latest generator)\n\n## 0.3.0 (2020-09-15)\n\n- Internal bugfixes (re-generated with latest generator)\n\n## 0.2.0 (2020-07-01)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Model Parameter Updates - Azure SDK Python\nDESCRIPTION: New parameters added to various models including AccessControlList, ExternalNetwork, InternalNetwork, and NetworkDevice. These parameters provide additional configuration options and state management capabilities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managednetworkfabric/azure-mgmt-managednetworkfabric/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Model Parameter Additions\nAccessControlList.acls_url\nAccessControlList.administrative_state\nAccessControlList.configuration_state\nAccessControlList.configuration_type\nAccessControlList.dynamic_match_configurations\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Geolocation Python Package\nDESCRIPTION: Command to install the Azure Maps Geolocation SDK using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-geolocation\n```\n\n----------------------------------------\n\nTITLE: Declaring Editable and Versioned Dependencies with pip Requirements - Python\nDESCRIPTION: This requirements file defines dependencies for the Azure SDK for Python, including internal modules referenced with -e for editable installs and external libraries with specific version constraints. Dependencies like azure-sdk-tools, azure-core, and azure-identity are included via relative paths, allowing for local development and testing. The aiohttp package is marked for Python 3.8 or higher, ensuring environment-specific compatibility. The file is used by pip to resolve and install required packages; it assumes the relative paths exist and are properly structured for pip installation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-timezone/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.8'\n```\n\n----------------------------------------\n\nTITLE: Specifying aiohttp Dependency in Python Requirements\nDESCRIPTION: Declares 'aiohttp' as a required dependency with a minimum version of 3.0. This ensures the project has access to asynchronous HTTP client/server functionality for Python 3. This should be resolved from PyPI and installed via pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Directives for Parameter Manipulation\nDESCRIPTION: These YAML blocks define custom directives for locating and modifying parameters in different contexts (code-model-v1, code-model-v3, openapi-document, swagger-document). They provide utility functions for parameter manipulation across various document types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndeclare-directive:\n  where-parameter: >\n    (() => {\n      switch ($context.from) {\n        case \"code-model-v1\":\n          throw \"not implemented\";\n\n        case \"code-model-v3\":\n          return {from: \"code-model-v3\", where: `$.parameters.filter(p => p[\"name\"] == ${JSON.stringify($)})[0]`};\n\n        case \"openapi-document\":\n          return { from: \"openapi-document\", where: `$.parameters.filter(p => p[\"name\"] == ${JSON.stringify($)})[0]` };\n\n        case \"swagger-document\":\n        default:\n          return { from: \"swagger-document\", where: `$.parameters.filter(p => p[\"name\"] == ${JSON.stringify($)})[0]` };\n      }\n    })()\n\ndeclare-directive:\n    change-parameter-schema: >\n        [{\n        from: 'swagger-document',\n        transform: `$.schema[\"$ref\"] = \"#/definitions/\" + JSON.stringify($)`\n        },\n        {\n        from: 'openapi-document',\n        transform: `$.schema[\"$ref\"] = \"#/definitions/\" + JSON.stringify($)`\n        }]\n```\n\n----------------------------------------\n\nTITLE: Release History Entry for Version 1.0.0b1\nDESCRIPTION: Initial release entry from May 11, 2021 marking the first release of the Azure Purview Scanning library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2021-05-11)\n\n- This is the initial release of the Azure Purview Scanning library.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Change Log Generator\nDESCRIPTION: Command to install required Python dependencies from requirements.txt file using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/check_change_log/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated Azure Cosmos DB development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv azure-cosmosdb-sdk-environment\nsource azure-cosmosdb-sdk-environment/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Keys Library\nDESCRIPTION: This snippet shows how to install the Azure Key Vault Keys library and run a sample script to create keys.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-keyvault-keys library\n$ pip install azure-keyvault-keys\n$ # azure-identity library for authentication\n$ pip install azure-identity\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_key_keys.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Intelligence Endpoint with Azure CLI\nDESCRIPTION: Bash command to get the endpoint for a Document Intelligence resource using Azure CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Get the endpoint for the Document Intelligence resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Azure Container Registry using Azure CLI in Shell\nDESCRIPTION: This snippet logs into the Azure Container Registry from the shell using the Azure CLI and the provided registry name (ACR_NAME). This authentication step is required before pushing Docker images to ACR. Dependencies are Azure CLI, valid login credentials, and existing registry. Returns authentication status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naz acr login -n $ACR_NAME\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hardware Security Modules SDK with pip\nDESCRIPTION: Commands to install the Azure Hardware Security Modules management package and the Azure Identity library required for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hardwaresecuritymodules/azure-mgmt-hardwaresecuritymodules/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hardwaresecuritymodules\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Evaluating Tool Call Accuracy with Multiple Tool Calls - Python\nDESCRIPTION: Runs the accuracy evaluation for a query with multiple tool calls and a single shared tool definition, returning and pretty-printing the score. This demonstrates the evaluator's ability to process and judge responses involving several tool calls at once. The snippet assumes prior initialization of the variables and the evaluator object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = tool_call_accuracy(query=query, tool_calls=tool_calls, tool_definitions=tool_definition)\npprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initializing ResourceManagementClient Directly (Python)\nDESCRIPTION: Illustrates the updated method for initializing the `ResourceManagementClient` introduced in Azure SDK for Python version 2.0.0rc4/0.30.0rc4. Credentials and subscription ID are now passed directly to the client's constructor, simplifying the initialization process compared to the previous configuration class method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresource_client = ResourceManagementClient(\n    credentials,\n    subscription_id\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for SMB File Parameters in Swagger Document\nDESCRIPTION: YAML directives to set default values for new SMB file parameters in the swagger document, including creation time, last write time, attributes, and permissions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.FileCreationTime\n  transform: >\n    $.format = \"str\";\n    $.default = \"now\";\n- from: swagger-document\n  where: $.parameters.FileLastWriteTime\n  transform: >\n    $.format = \"str\";\n    $.default = \"now\";\n- from: swagger-document\n  where: $.parameters.FileAttributes\n  transform: >\n    $.default = \"none\";\n- from: swagger-document\n  where: $.parameters.FilePermission\n  transform: >\n    $.default = \"inherit\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Python SDK Package Generation for Azure Service\nDESCRIPTION: Defines the core configuration for generating an Azure Python SDK package, specifying it as an ARM package with Microsoft MIT license, package naming conventions, namespace, and version number. Also clears the output folder during generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/single_api/readme.python.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\npackage-name: azure-mgmt-servicetoreplace\nnamespace: azure.mgmt.servicetoreplace\npackage-version: 1.0.0b1\nclear-output-folder: true\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Event Hubs Testing\nDESCRIPTION: Required environment variables for connecting to Azure Event Hubs resources, including connection string and Event Hub name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_EVENTHUB_CONNECTION_STRING=<the connection string of an Event Hub.>\nAZURE_EVENTHUB_NAME=<the path of the specific Event Hub to connect to>\n```\n\n----------------------------------------\n\nTITLE: Parametrizing and Recording a Python Test with Custom Decorators - Pytest/Azure SDK - Python\nDESCRIPTION: This snippet shows how to layer multiple decorators on a pytest test function to achieve parameterization, automated argument passing, and HTTP request recording for test playback within the Azure SDK for Python environment. It uses @pytest.mark.parameterize for input variation, a custom ArgumentPasser for argument management, and @recorded_by_proxy to record HTTP interactions. Required dependencies include pytest and Azure SDK devtools; the ArgumentPasser implementation is assumed to handle dynamic argument injection. The function supports test inputs a and b, accepts extra keyword arguments, and produces no direct output; typically used for integration or end-to-end tests relying on external services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Works because `ArgumentPasser.__call__`'s return value has the expected parameters\\n@pytest.mark.parameterize(\"a, b\", test_values)\\n@ArgumentPasser()\\n@recorded_by_proxy\\ndef test_recorded_function(a, b, **kwargs):\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Dependency on Azure Identity Package (Python)\nDESCRIPTION: Specifies a dependency on the `azure-identity` package. This package provides Azure Active Directory token authentication support needed by Azure SDK clients.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/dev_requirements.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Autorest YAML Configuration for Azure Media Analytics Edge SDK\nDESCRIPTION: YAML configuration for Autorest specifying input swagger files, output paths, package details, and generation options for the Azure Media Analytics Edge SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/media/azure-media-analytics-edge/swagger/autorest.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrequire: https://github.com/Azure/azure-rest-api-specs/blob/14732a2d9802c98cb8fea52800853874529c5f8e/specification/mediaservices/data-plane/readme.md\noutput-folder: ../azure/media/analyticsedge/_generated\nnamespace: azure.media.analyticsedge\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: false\nvanilla: true\nclear-output-folder: true\nadd-credentials: false\npython: true\npackage-version: \"1.0\"\npublic-clients: false\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies in Requirements Format\nDESCRIPTION: This snippet defines Python package dependencies, typically found in a `requirements.txt` file. It uses the `-e` flag for an editable installation of local tools (`azure-sdk-tools`), lists `msrestazure` as a required package, and includes a relative path to a local `azure-core` package, indicating dependencies needed for development or testing within the Azure SDK project structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/applicationinsights/azure-applicationinsights/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\nmsrestazure\n../../core/azure-core\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment with Specific Python Version\nDESCRIPTION: Command to create a virtual environment using a specific Python version by passing the path to the Python executable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nC:\\Users> python -m venv -p <path/to/Python/Python38/python.exe> py38_venv\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Health Insights Cancer Profiling Client Library with pip\nDESCRIPTION: Command to install the Azure Health Insights Cancer Profiling client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-healthinsights-cancerprofiling\n```\n\n----------------------------------------\n\nTITLE: Creating Client Certificate from Azure PublishSettings in Python\nDESCRIPTION: This snippet demonstrates how to create a client certificate (.pem file) from an Azure PublishSettings file using the Azure SDK for Python. It extracts the certificate and optionally specifies a subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.servicemanagement import get_certificate_from_publish_settings\n\nsubscription_id = get_certificate_from_publish_settings(\n    publish_settings_path='MyAccount.PublishSettings',\n    path_to_write_certificate='mycert.pem',\n    subscription_id='00000000-0000-0000-0000-000000000000',\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python 3.9 as Runtime Dependency\nDESCRIPTION: This snippet specifies Python 3.9 as the required Python runtime version for the project. This declaration is commonly used in configuration files to ensure the correct Python environment is used when deploying or running the application.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/environment/environment_files/runtime.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-3.9\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode with Pip\nDESCRIPTION: This command installs the Azure SDK tools package in editable/development mode from a relative path. The -e flag enables pip's editable mode, which creates a special link to the source code rather than copying it to the site-packages directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-resourcegraph/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Async Client Namespace (v1.0.0b1+)\nDESCRIPTION: Identifies the `aio` namespace as the location for the asynchronous version of the client library, introduced in version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\naio\n```\n\n----------------------------------------\n\nTITLE: Running Dependency Import Check\nDESCRIPTION: Command to run the 'depends' check, which verifies successful import of all modules in a package, using tox.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ntox run -e sdist -c ../../../eng/tox/tox.ini --root .\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Migrationassessment Management Client\nDESCRIPTION: Python code to authenticate and create a MigrationAssessmentMgmtClient using DefaultAzureCredential. Requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/migrate/azure-mgmt-migrationassessment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.migrationassessment import MigrationAssessmentMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MigrationAssessmentMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Azure Management Packages List - 2022.09.01 Release\nDESCRIPTION: List of Azure management packages and their versions included in the September 2022 release of Azure SDK for Python. Shows historical version information for Azure service management packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 2022.09.01\n\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apimanagement-3.0.0\n[...additional packages...]\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Modifying Management Client Update Methods in Python\nDESCRIPTION: Removed keyword arguments corresponding to model class attributes from `update_queue` and `update_topic` methods in `ServiceBusManagementClient`. Users should now pass a fully populated model instance (obtained via get/list methods) to perform updates.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# Discouraged (removed kwargs):\n# ServiceBusManagementClient.update_queue(name='queue_name', lock_duration='PT5M') \n\n# Encouraged:\nqueue_props = client.get_queue('queue_name')\nqueue_props.lock_duration = timedelta(minutes=5)\nclient.update_queue(queue_props)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure App Configuration Performance Tests (Cmd)\nDESCRIPTION: Installs the development requirements, including `devtools_testutils`, and the Azure App Configuration package itself in editable mode within the activated virtual environment (`env`). This prepares the environment for running performance tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-appconfiguration> pip install -r dev_requirements.txt\n(env) ~/azure-appconfiguration> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Including Azure SDK Tools for Python Development\nDESCRIPTION: This line specifies that the Azure SDK tools should be installed from a local directory relative to this requirements file. The '-e' flag indicates that it should be installed in editable mode, meaning changes to the source will be reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/securityinsight/azure-mgmt-securityinsight/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Key Vault Performance Tests\nDESCRIPTION: These environment variables need to be set to access live Azure resources for performance testing. They include tenant ID, client ID, client secret, and the Key Vault URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TENANT_ID=<tenant ID of testing service principal>\nAZURE_CLIENT_ID=<client ID of testing service principal>\nAZURE_CLIENT_SECRET=<client secret of testing service principal>\nAZURE_KEYVAULT_URL=<URL of the testing key vault>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Azure SDK Project\nDESCRIPTION: Specifies project dependencies using pip requirements file format. Includes an editable install (`-e`) for local development tools (`azure-sdk-tools`), relative paths pointing to core Azure libraries (`azure-core`, `azure-identity`), and the external `aiohttp` library. This format is typically used with `pip install -r <filename>`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Running Performance Stress Tests\nDESCRIPTION: Demonstrates how to use the perfstress command-line tool to run performance tests. This command lists available tests when run without arguments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share> cd tests\n(env) ~/azure-storage-file-share/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Digital Twins Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages using pip package manager. Installs both the Digital Twins management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-mgmt-digitaltwins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-digitaltwins\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Filtering Customer-Reported Questions Query\nDESCRIPTION: GitHub issue query filter used to track customer-reported questions that have been open for more than 30 days\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/repo_health_status.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nis:open is:issue label:customer-reported label:Client -label:issue-addressed -label:bug -label:needs-author-feedback -label:feature-request label:\"[library-label]\" created:\"[<30days]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Batch Generation for Azure Monitor Query Client\nDESCRIPTION: Settings for generating metrics batch-related code. It specifies the input file, output folder, and client details for the metrics batch component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n    - https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/monitor/data-plane/Microsoft.Insights/stable/2024-02-01/metricBatch.json\noutput-folder: ../azure/monitor/query/_generated/metrics/batch\ntitle: MonitorBatchMetricsClient\ndescription: Azure Monitor Batch Metrics Python Client\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Azure SDK Tools Package\nDESCRIPTION: A pip requirements file entry that references a local development version of the Azure SDK tools package using an editable install (-e flag).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-media-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: SDK File Path Example\nDESCRIPTION: Example file path for customizing LVA SDK functionality\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/docs/DevTips.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsdk\\media\\azure-media-lva-edge\\azure\\media\\lva\\edge\\__init__.py\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for Azure Event Hub\nDESCRIPTION: Sphinx documentation configuration showing the structure and autoclass directives for the Azure Event Hub Python SDK classes. Includes configuration for members, undocumented members, and inherited members documentation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nazure.eventhub package\n======================\n\n    .. autoclass:: azure.eventhub.EventHubConsumerClient\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.EventHubProducerClient\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.EventData\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.EventDataBatch\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.EventHubSharedKeyCredential\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.CheckpointStore\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.PartitionContext\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.CloseReason\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n    .. autoclass:: azure.eventhub.TransportType\n        :members:\n        :undoc-members:\n        :inherited-members:\n    .. autoclass:: azure.eventhub.LoadBalancingStrategy\n        :members:\n        :undoc-members:\n        :inherited-members:\n\n\nSubpackages\n-----------\n\n.. toctree::\n\n   azure.eventhub.aio\n   azure.eventhub.exceptions\n   azure.eventhub.amqp\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Consistent Line Breaks\nDESCRIPTION: Content for a .gitattributes file that forces git to checkout text files with LF (line feed) as the ending instead of CRLF. This helps maintain consistent line breaks in test files across different operating systems.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# Force git to checkout text files with LF (line feed) as the ending (vs CRLF)\n# This allows us to consistently run tests that depend on the exact contents of a file\n* text=auto eol=lf\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorest Base Settings for Blob Storage SDK (YAML)\nDESCRIPTION: Specifies essential Autorest v3 settings for generating the Python Azure Blob Storage SDK. It defines the input Swagger file URL, output folder, target namespace (`azure.storage.blob`), disables namespace folders, sets the license header, enables XML support, clears the output folder before generation, and sets other Python-specific options like sealing single-value enums.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-07-05/blob.json\noutput-folder: ../azure/storage/blob/_generated\nnamespace: azure.storage.blob\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nvanilla: true\nclear-output-folder: true\npython: true\nversion-tolerant: false\nmodelerfour:\n    seal-single-value-enum-by-default: true\n```\n\n----------------------------------------\n\nTITLE: Removing TrunkUpdate Definition using Autorest Directive\nDESCRIPTION: This `autorest` directive removes the `TrunkUpdate` definition from the Swagger document processed during SDK generation. This step contributes to simplifying the update mechanisms in the resulting SDK by removing specific update-related types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.TrunkUpdate\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Python Package Generation\nDESCRIPTION: YAML configuration for generating an Azure SDK package for Python. It defines input files, output folder, namespace, package details, license header, and security settings. The configuration uses template variables for customization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/quickstart_tooling_dpg/template/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n{%- for file in input_file %}\n - {{ file }}\n{%- endfor %}\noutput-folder: ../\nnamespace: {{ namespace }}\npackage-name: {{ package_name }}\nlicense-header: MICROSOFT_MIT_NO_VERSION\ntitle: {{ client_name }}\npackage-version: 1.0.0b1\npackage-mode: dataplane\npackage-pprint-name: {{ package_pprint_name }}\n{%- if security_scope %}\nsecurity: AADToken\nsecurity-scopes: {{ security_scope }}\n{%- elif security_header_name %}\nsecurity: AzureKey\nsecurity-header-name: {{ security_header_name }}\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Generating Quickpulse Client with AutoRest for Azure Monitor OpenTelemetry Exporter\nDESCRIPTION: Bash command to run AutoRest for generating the Quickpulse client. It specifies the input README file and sets Python as the target language.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/swagger/README_QUICKPULSE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrmdir ./azure/monitor/opentelemetry/exporter/quickpulse/_generated\nautorest ./swagger/README_QUICKPULSE.md --python --v3\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode\nDESCRIPTION: This command installs the Azure SDK tools package from a relative path in editable mode. The -e flag enables editable mode, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-communication-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history from 1.0.0b1 through 1.0.0b3, including features added, breaking changes, bug fixes and other modifications for each release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b3 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0b2 (2023-10-26)\n\n### Features Added\n\n- Add `/workflows/{id}/validate` API.\n- Add admin query options to workflow / workflow run APIs.\n\n### Breaking Changes\n\n- Add operation groups `workflows`, `workflowruns`, `workflowtasks`, and `userrequest`.\n\n### Other Changes\n\n- Update descriptions of some APIs.\n\n## 1.0.0b1 (2023-02-21)\n\n- Initial release of the Purview Workflow client library for Python\n```\n\n----------------------------------------\n\nTITLE: Old Method for Creating StoredAttestationPolicy in Python (Deprecated)\nDESCRIPTION: Shows the deprecated method (prior to v1.0.0b4) for initializing the `StoredAttestationPolicy` object. This required using the `attestation_policy` keyword argument and explicitly encoding the policy string to UTF-8 bytes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nStoredAttestationPolicy(attestation_policy=str(attestation_policy).encode('utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Operations with Legacy Azure Key Vault SDK\nDESCRIPTION: Demonstrates cryptographic operations using the legacy azure-keyvault SDK, requiring vault endpoint, key name, and version for each operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.keyvault import KeyId\n\nkey_bundle = client.create_key(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    key_name=\"key-name\",\n    kty=\"RSA\"\n)\nkey = key_bundle.key\nkey_id = KeyId(key.kid)\nkey_version = key_id.version\n\nplaintext = b\"plaintext\"\n\n# encrypt data using the key\noperation_result = client.encrypt(\n    vault_base_url=\"https://my-key-vault.vault.azure.net/\",\n    key_name=\"key-name\",\n    key_version=key_version,\n    algorithm=\"RSA-OAEP-256\",\n    value=plaintext\n)\nciphertext = operation_result.result\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure Communication Services Python SDK\nDESCRIPTION: This requirements file specifies the dependencies needed for Azure Communication Services Python packages. It includes references to internal Azure SDK tools, the Azure Communication Identity module, and third-party packages aiohttp and python-dateutil with version constraints.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../azure-communication-identity\naiohttp>=3.0\npython-dateutil>=2.8.1\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook for an Azure Container Registry\nDESCRIPTION: Command to create a webhook for an Azure Container Registry that triggers on push events to a specified registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file_2.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz acr webhook create -n MyWebhook -r MyRegistry --uri http://myservice.com --actions push\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release of Azure SDK for Python\nDESCRIPTION: This markdown snippet documents the initial release of the Azure SDK for Python. It specifies the version number and release date.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-media-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2020-12-11)\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode\nDESCRIPTION: This line installs the Azure SDK tools from a local directory in editable mode. This allows developers to modify the tools and have the changes immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Documenting GA Release 1.0.0 in Markdown\nDESCRIPTION: Announces the general availability (GA) release of version 1.0.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.0.0 (2021-03-25)\n\n- GA release\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog showing version history from 0.1.0 to 0.5.0, including API version updates, breaking changes, and Python version support changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-managedprivateendpoints/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.5.0 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 0.4.0 (2021-08-10)\n\n- Updated API version to \"2020-12-01\" which is the default API version\n- Added API version \"2021-06-01-preview\" support\n- `ManagedPrivateEndpointsClient` is renamed to `VnetClient`\n\n## 0.3.0 (2021-03-09)\n\n- Internal bugfixes (re-generated with latest generator)\n- Stop Python 3.5 support\n\n## 0.2.0 (2021-02-09)\n\n- Internal bugfixes (re-generated with latest generator)\n\n## 0.1.0 (2020-12-08)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Question Answering SDK using Bash\nDESCRIPTION: This command installs the Azure Question Answering client library for Python using pip, the Python package installer. This package is required to interact with the Azure Question Answering service via Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-language-questionanswering\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Package Dependencies for Azure SDK Python\nDESCRIPTION: Specifies local development dependencies using relative path references to required Azure packages including SDK tools, resource management, and identity components. Uses -e flag to install packages in editable/development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/logic/azure-mgmt-logic/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies an editable installation of the Azure SDK tools package from a local directory. The -e flag indicates an editable install, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-computervision/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Remove Operations - YAML Directives\nDESCRIPTION: Removes the getActiveSeriesCount operation from the swagger definition\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - remove-operation: getActiveSeriesCount\n```\n\n----------------------------------------\n\nTITLE: Python Package Version Sample\nDESCRIPTION: Example Python package version string from release history, showing semantic versioning pattern used.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trafficmanager/azure-mgmt-trafficmanager/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__version__ = '1.1.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest CLI Tool\nDESCRIPTION: Command to install Autorest v3 globally using npm package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-catalog/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Authenticating Event Hub Clients in azure-eventhub v1 (Python)\nDESCRIPTION: Demonstrates client initialization in `azure-eventhub` v1. It shows authentication using an AMQP address (`EventHubClient(address)`) or a connection string (`EventHubClient.from_connection_string`). It also covers initializing `EventProcessorHost` and `AzureStorageCheckpointLeaseManager` using Event Hub configuration details (namespace, name, user, key) and storage account information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with address\neventhub_client = EventHubClient(address)\n\n# Authenticate with connection string\neventhub_client = EventHubClient.from_connection_string(conn_str)\n\n# Authenticate the EventProcessorHost and StorageCheckpointLeaseManager\neh_config = EventHubConfig(eh_namespace, eventhub_name, user, key, consumer_group=\"$default\")\nstorage_manager = AzureStorageCheckpointLeaseManager(storage_account_name, storage_key, lease_container_name)\nhost = EventProcessorHost(EventProcessor, eventhub_config, storage_manager)\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Generation with PowerShell\nDESCRIPTION: Commands to navigate to the swagger folder and run autorest to generate the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Documentation Link Reference in Markdown\nDESCRIPTION: A markdown link pointing to the Azure Pipelines Matrix Generator documentation in the azure-sdk-tools repository.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/scripts/job-matrix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`azure-sdk-tools/doc/common/matrix_generator.md`](https://github.com/Azure/azure-sdk-tools/blob/main/doc/common/matrix_generator.md)\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK for Python project. It includes references to local development tools, the Azure Identity library, and the aiohttp library for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storageactions/azure-mgmt-storageactions/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Renewing Session Locks in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares session lock renewal in v0.50 and v7. In v0.50, `renew_lock` was called directly on the `SessionReceiver`. In v7, this method is moved to the `ServiceBusSession` object, accessed via the `session` property of the `ServiceBusReceiver` (i.e., `session_receiver.session.renew_lock()`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith session_receiver:\n    session_receiver.renew_lock()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith session_receiver:\n    session_receiver.session.renew_lock()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest\nDESCRIPTION: Commands demonstrating how to run pytest for all tests in a directory or for a specific test file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/tests.md#2025-04-23_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pytest tests\n(env) azure-sdk-for-python\\sdk\\my-service\\my-package> pytest tests\\<test_file.py>\n```\n\n----------------------------------------\n\nTITLE: Updating Question Answering Project Sources with azure-ai-language-questionanswering in Python\nDESCRIPTION: This snippet shows how to update sources in a Question Answering project using the begin_update_sources method in the new azure-ai-language-questionanswering library. It demonstrates authentication and adding a new source to the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n\nsources_poller = client.begin_update_sources(\n    project_name=\"<project_name>\",\n    sources=[{\n        \"op\": \"add\",\n        \"value\": {\n            \"displayName\": \"MicrosoftFAQ\",\n            \"source\": \"https://www.microsoft.com/en-in/software-download/faq\",\n            \"sourceUri\": \"https://www.microsoft.com/en-in/software-download/faq\",\n            \"sourceKind\": \"url\",\n            \"contentStructureKind\": \"unstructured\",\n            \"refresh\": False\n        }\n    }]\n)\nsources = sources_poller.result()\n\nfor item in sources:\n    print(f\"source name: {item.get('displayName', 'N/A')}\")\n    print(f\"\\tsource: {item['source']}\")\n    print(f\"\\tsource uri: {item.get('sourceUri', 'N/A')}\")\n    print(f\"\\tsource kind: {item['sourceKind']}\")\n```\n\n----------------------------------------\n\nTITLE: Installing WebPubSub Client and Development Dependencies in Python\nDESCRIPTION: Commands to install the WebPubSub Client from the current directory and required development dependencies for stress testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/stress/how-to-run.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-messaging-webpubsubclient> pip install .\n(env) ~/azure-messaging-webpubsubclient> pip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Python Code with Autorest\nDESCRIPTION: Basic command to generate Python code using Autorest with a readme.md configuration file. This command processes the Swagger specifications and generates the corresponding Python SDK code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger_conf.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nautorest readme.md --python\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifacts in CI Pipeline YAML\nDESCRIPTION: Example artifact configuration in a ci.yml file for Azure DevOps unified pipelines. Defines package artifacts with required name and safeName parameters, where name must match the package name with underscores instead of hyphens.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/release.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    Artifacts:\n    - name: azure_core\n      safeName: azurecore\n    - name: azure_core_tracing_opencensus\n      safeName: azurecorecoretracingopencensus\n```\n\n----------------------------------------\n\nTITLE: Visualizing Service to SDK Workflow with ASCII Diagram\nDESCRIPTION: A simple ASCII diagram showing the relationship between Azure Services and the Python SDK. It illustrates the one-way flow from Service to Python SDK in the generation process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/how_to_request_a_feature_in_sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n ---------      ------------ \n|         |    |            | \n| Service | -> | Python SDK | \n|         |    |            |  \n ---------      ------------\n```\n\n----------------------------------------\n\nTITLE: mypy Output for Overloaded Function Returns in Command Line\nDESCRIPTION: This snippet captures mypy's command line output for two invocations of an overloaded function, reporting the type checker’s inference for different call signatures. It confirms that mypy correctly distinguishes between a LanguageDetectionResult and a builtin str based on arguments. Dependencies: none (mypy command line).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_31\n\nLANGUAGE: cmd\nCODE:\n```\nmain.py:36: note: Revealed type is \"__main__.LanguageDetectionResult\"\nmain.py:39: note: Revealed type is \"builtins.str\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Azure SDK for Python Documentation\nDESCRIPTION: This restructuredtext directive defines a table of contents for the Azure SDK for Python documentation. It includes references to documentation for all Azure service modules, organized in a hierarchical structure with a maximum depth of 5 levels.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/toc_tree.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 5\n  :glob:\n  :caption: Developer Documentation\n\n  ref/azure.common\n  ./ref/azure.appconfiguration.rst\n  ./ref/azure.applicationinsights.rst\n  ./ref/azure.batch.rst\n  ./ref/azure.cognitiveservices.anomalydetector.rst\n  ./ref/azure.cognitiveservices.knowledge.qnamaker.rst\n  ./ref/azure.cognitiveservices.language.luis.authoring.rst\n  ./ref/azure.cognitiveservices.language.luis.runtime.rst\n  ./ref/azure.cognitiveservices.language.spellcheck.rst\n  ./ref/azure.cognitiveservices.language.textanalytics.rst\n  ./ref/azure.cognitiveservices.search.autosuggest.rst\n  ./ref/azure.cognitiveservices.search.customimagesearch.rst\n  ./ref/azure.cognitiveservices.search.customsearch.rst\n  ./ref/azure.cognitiveservices.search.entitysearch.rst\n  ./ref/azure.cognitiveservices.search.imagesearch.rst\n  ./ref/azure.cognitiveservices.search.newssearch.rst\n  ./ref/azure.cognitiveservices.search.videosearch.rst\n  ./ref/azure.cognitiveservices.search.visualsearch.rst\n  ./ref/azure.cognitiveservices.search.websearch.rst\n  ./ref/azure.cognitiveservices.vision.computervision.rst\n  ./ref/azure.cognitiveservices.vision.contentmoderator.rst\n  ./ref/azure.cognitiveservices.vision.customvision.prediction.rst\n  ./ref/azure.cognitiveservices.vision.customvision.training.rst\n  ./ref/azure.cognitiveservices.vision.face.rst\n  ./ref/azure.core.rst\n  ./ref/azure.core.tracing.opencensus.rst\n  ./ref/azure.cosmos.rst\n  ./ref/azure.data.appconfiguration.rst\n  ./ref/azure.eventgrid.rst\n  ./ref/azure.eventhub.rst\n  ./ref/azure.eventhub.extensions.rst\n  ./ref/azure.graphrbac.rst\n  ./ref/azure.identity.rst\n  ./ref/azure.keyvault.certificates.rst\n  ./ref/azure.keyvault.keys.rst\n  ./ref/azure.keyvault.secrets.rst\n  ./ref/azure.loganalytics.rst\n  ./ref/azure.mgmt.advisor.rst\n  ./ref/azure.mgmt.alertsmanagement.rst\n  ./ref/azure.mgmt.apimanagement.rst\n  ./ref/azure.mgmt.applicationinsights.rst\n  ./ref/azure.mgmt.authorization.rst\n  ./ref/azure.mgmt.automation.rst\n  ./ref/azure.mgmt.batch.rst\n  ./ref/azure.mgmt.batchai.rst\n  ./ref/azure.mgmt.billing.rst\n  ./ref/azure.mgmt.cdn.rst\n  ./ref/azure.mgmt.cognitiveservices.rst\n  ./ref/azure.mgmt.commerce.rst\n  ./ref/azure.mgmt.compute.rst\n  ./ref/azure.mgmt.consumption.rst\n  ./ref/azure.mgmt.containerinstance.rst\n  ./ref/azure.mgmt.containerregistry.rst\n  ./ref/azure.mgmt.containerservice.rst\n  ./ref/azure.mgmt.cosmosdb.rst\n  ./ref/azure.mgmt.databricks.rst\n  ./ref/azure.mgmt.datafactory.rst\n  ./ref/azure.mgmt.datalake.analytics.account.rst\n  ./ref/azure.mgmt.datalake.analytics.catalog.rst\n  ./ref/azure.mgmt.datalake.analytics.job.rst\n  ./ref/azure.mgmt.datalake.store.rst\n  ./ref/azure.mgmt.datamigration.rst\n  ./ref/azure.mgmt.devspaces.rst\n  ./ref/azure.mgmt.devtestlabs.rst\n  ./ref/azure.mgmt.dns.rst\n  ./ref/azure.mgmt.eventgrid.rst\n  ./ref/azure.mgmt.eventhub.rst\n  ./ref/azure.mgmt.hanaonazure.rst\n  ./ref/azure.mgmt.hdinsight.rst\n  ./ref/azure.mgmt.imagebuilder.rst\n  ./ref/azure.mgmt.iotcentral.rst\n  ./ref/azure.mgmt.iothub.rst\n  ./ref/azure.mgmt.iothubprovisioningservices.rst\n  ./ref/azure.mgmt.keyvault.rst\n  ./ref/azure.mgmt.kusto.rst\n  ./ref/azure.mgmt.labservices.rst\n  ./ref/azure.mgmt.loganalytics.rst\n  ./ref/azure.mgmt.logic.rst\n  ./ref/azure.mgmt.machinelearningcompute.rst\n  ./ref/azure.mgmt.managementgroups.rst\n  ./ref/azure.mgmt.managementpartner.rst\n  ./ref/azure.mgmt.maps.rst\n  ./ref/azure.mgmt.marketplaceordering.rst\n  ./ref/azure.mgmt.media.rst\n  ./ref/azure.mgmt.mixedreality.rst\n  ./ref/azure.mgmt.monitor.rst\n  ./ref/azure.mgmt.msi.rst\n  ./ref/azure.mgmt.netapp.rst\n  ./ref/azure.mgmt.network.rst\n  ./ref/azure.mgmt.notificationhubs.rst\n  ./ref/azure.mgmt.policyinsights.rst\n  ./ref/azure.mgmt.powerbiembedded.rst\n  ./ref/azure.mgmt.rdbms.mariadb.rst\n  ./ref/azure.mgmt.rdbms.mysql.rst\n  ./ref/azure.mgmt.rdbms.postgresql.rst\n  ./ref/azure.mgmt.recoveryservices.rst\n  ./ref/azure.mgmt.recoveryservicesbackup.rst\n  ./ref/azure.mgmt.redis.rst\n  ./ref/azure.mgmt.relay.rst\n  ./ref/azure.mgmt.resource.features.rst\n  ./ref/azure.mgmt.resource.links.rst\n  ./ref/azure.mgmt.resource.locks.rst\n  ./ref/azure.mgmt.resource.managedapplications.rst\n  ./ref/azure.mgmt.resource.policy.rst\n  ./ref/azure.mgmt.resource.resources.rst\n  ./ref/azure.mgmt.resource.subscriptions.rst\n  ./ref/azure.mgmt.resourcegraph.rst\n  ./ref/azure.mgmt.scheduler.rst\n  ./ref/azure.mgmt.search.rst\n  ./ref/azure.mgmt.security.rst\n  ./ref/azure.mgmt.servermanager.rst\n  ./ref/azure.mgmt.servicebus.rst\n  ./ref/azure.mgmt.servicefabric.rst\n  ./ref/azure.mgmt.signalr.rst\n  ./ref/azure.mgmt.sql.rst\n  ./ref/azure.mgmt.sqlvirtualmachine.rst\n  ./ref/azure.mgmt.storage.rst\n  ./ref/azure.mgmt.subscription.rst\n  ./ref/azure.mgmt.trafficmanager.rst\n  ./ref/azure.mgmt.web.rst\n  ./ref/azure.servicebus.rst\n  ./ref/azure.servicefabric.rst\n  ./ref/azure.storage.blob.rst\n  ./ref/azure.storage.file.rst\n  ./ref/azure.storage.queue.rst\n  ref/azure.servicemanagement\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version Requirement in setup.py\nDESCRIPTION: How to specify the minimum Python version required for the package in setup.py.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/packaging.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython_requires=\">=3.8\",\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating to Samples in Bash\nDESCRIPTION: This snippet demonstrates how to clone the Azure SDK for Python repository from GitHub using Git and then navigate into the specific directory containing the agent evaluator samples. It requires Git to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Azure/azure-sdk-for-python\n\n# Navigate to the repo folder with samples\ncd azure-sdk-for-python/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Entry\nDESCRIPTION: Documents the initial 3.0.0 release of the Azure SDK for Python package from December 21, 2018.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-knowledge-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.0.0 (2018-12-21)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Verification Locally\nDESCRIPTION: Bash command to run autorest automation verification locally from the azure-sdk-for-python root directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nazure-sdk-for-python> python scripts/devops_tasks/verify_autorest.py --service_directory <your_service_directory>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid Library\nDESCRIPTION: This snippet shows how to install the Azure Event Grid library and run a sample script to send events.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/traces/README.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ # azure-azure-eventgrid library\n$ pip install azure-eventgrid\n$ # azure sdk core tracing library for opentelemetry\n$ pip install azure-core-tracing-opentelemetry\n$ # from this directory\n$ python sample_event_grid.py\n```\n\n----------------------------------------\n\nTITLE: Documenting Keyword Arguments in Python Azure SDK Docstrings\nDESCRIPTION: Examples of one-line and two-line keyword argument documentation formats for basic types and custom models in Azure SDK docstrings.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n:keyword <type> <keyword_name>: <Description of the keyword>\n```\n\nLANGUAGE: python\nCODE:\n```\n:keyword <keyword_name>: <Description of the keyword>\n:paramtype <keyword_name>: <keyword_type>\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a local path to Azure SDK development tools as an editable installation. The -e flag indicates that changes to the source code will be reflected without needing to reinstall the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-luis/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Directive for Azure Schema Registry Avro Encoder (async)\nDESCRIPTION: Sphinx directive to automatically generate documentation for the asynchronous implementation of the Azure Schema Registry Avro encoder module. The directive includes all members, undocumented members, and inherited members of the module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/doc/azure.schemaregistry.encoder.avroencoder.aio.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: azure.schemaregistry.encoder.avroencoder.aio\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Azure SDK in Python\nDESCRIPTION: A requirements file that specifies the necessary dependencies for Azure SDK development. It includes local references to azure-sdk-tools and azure-identity packages in editable mode, and requires aiohttp 3.0 or higher for Python 3.5+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroserializer/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\naiohttp>=3.0; python_version >= '3.5'\n```\n\n----------------------------------------\n\nTITLE: Running Test Profiles in Python for Azure Load Testing\nDESCRIPTION: Use the begin_test_profile_run method in LoadTestRunClient to initiate Test Profile Runs in Azure Load Testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.begin_test_profile_run(...)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Packages in Python\nDESCRIPTION: Shows the new modular package structure for installing Azure SDK components via pip. Users can install the full bundle or individual packages as needed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nazure (bundle)\n  azure-mgmt (bundle)\n    azure-mgmt-compute\n    azure-mgmt-network\n    azure-mgmt-resource\n    azure-mgmt-storage\n  azure-servicebus\n  azure-servicemanagement-legacy\n  azure-storage\n```\n\n----------------------------------------\n\nTITLE: Disabling Azure Functions Telemetry Logger (Python)\nDESCRIPTION: This code snippet shows how to disable the default Azure Functions telemetry logger to avoid duplicate telemetry entries. It clears the list of handlers from the root logger.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n...\nroot_logger = logging.getLogger()\nfor handler in root_logger.handlers[:]:\n    root_logger.removeHandler(handler)\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies in pip format\nDESCRIPTION: This configuration snippet lists project dependencies in a format recognized by pip. It includes an editable local package (`azure-sdk-tools`) using the '-e' flag, a direct reference to another local package (`azure-core`), and standard external libraries `aiohttp` and `requests`. These dependencies are necessary for the correct functioning or development of the associated Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/optional_environment_zero_options/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../../../../tools/azure-sdk-tools\n../../../../../../sdk/core/azure-core\naiohttp\nrequests\n```\n\n----------------------------------------\n\nTITLE: Session Operations in Azure Service Bus Python SDK v0.50 vs v7\nDESCRIPTION: Compares performing session-related operations in v0.50 and v7. In v0.50, methods like `get_session_state`, `set_session_state`, and `renew_lock` were directly on the `SessionReceiver`. In v7, these operations are accessed through the `session` property of the `ServiceBusReceiver` (which is a `ServiceBusSession` object), leading to calls like `session_receiver.session.get_state()`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/migration_guide.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Session-related operation\nwith session_receiver:\n    session_receiver.get_session_state()\n    session_receiver.set_session_state(\"start\")\n    session_receiver.renew_lock()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Session-related operation\nwith session_receiver:\n    session_receiver.session.get_state()\n    session_receiver.session.set_state(\"start\")\n    session_receiver.session.renew_lock()\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Python\nDESCRIPTION: This markdown document outlines the changes made in different versions of the Azure SDK for Python. It includes details about new features, breaking changes, and initial releases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devopsinfrastructure/azure-mgmt-devopsinfrastructure/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-11-21)\n\n### Features Added\n\n  - Model `Quota` added property `unit`\n  - Model `Quota` added property `current_value`\n  - Model `Quota` added property `limit`\n  - Operation group `SubscriptionUsagesOperations` added method `usages`\n\n### Breaking Changes\n\n  - Enum `ManagedServiceIdentityType` renamed its value `SYSTEM_AND_USER_ASSIGNED` to `SYSTEM_ASSIGNED_USER_ASSIGNED`\n  - Enum `OsDiskStorageAccountType` renamed its value `STANDARD_S_S_D` to `STANDARD_SSD`\n  - Model `Quota` deleted or renamed its instance variable `properties`\n  - Model `Quota` deleted or renamed its instance variable `type`\n  - Model `Quota` deleted or renamed its instance variable `system_data`\n  - Deleted or renamed enum value `StorageAccountType.PREMIUM_L_R_S`\n  - Deleted or renamed enum value `StorageAccountType.PREMIUM_Z_R_S`\n  - Deleted or renamed enum value `StorageAccountType.STANDARD_L_R_S`\n  - Deleted or renamed enum value `StorageAccountType.STANDARD_S_S_D_L_R_S`\n  - Deleted or renamed enum value `StorageAccountType.STANDARD_S_S_D_Z_R_S`\n  - Deleted or renamed model `ActionType`\n  - Deleted or renamed model `Operation`\n  - Deleted or renamed model `OperationDisplay`\n  - Deleted or renamed model `Origin`\n  - Deleted or renamed model `QuotaProperties`\n  - Deleted or renamed method `SubscriptionUsagesOperations.list_by_location`\n\n## 1.0.0b1 (2024-05-29)\n\n- Initial version\n```\n\n----------------------------------------\n\nTITLE: Installing Azure RDBMS and Identity Packages using pip (Bash)\nDESCRIPTION: This snippet shows how to install the necessary Azure SDK packages (`azure-mgmt-rdbms` and `azure-identity`) using the pip package manager in a Bash environment. These packages are prerequisites for managing Azure RDBMS resources and handling authentication in Python applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/rdbms/azure-mgmt-rdbms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-rdbms\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Removing Package from CI Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to remove a deprecated package from the CI configuration. It demonstrates removing the 'Artifacts' section or specific package entries from the ci.yml file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/deprecation_process.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  parameters:\n    ...\n    Artifacts:\n    - name: azure-mypackage\n      safeName: azuremypackage\n```\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  parameters:\n    ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  parameters:\n    ...\n    Artifacts:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.0.0b2 Release in Markdown\nDESCRIPTION: Details the features added, breaking changes, and other modifications in the 1.0.0b2 release of the Azure AgriFood Farming SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b2 (2023-02-23)\n### Features Added\n- Adding clients for Sensor Integration which includes crud operations on DeviceDataModels, Devices, SensorDataModels, Sensors, SensorMappings, SensorPartnerIntegration and get Sensor events.\n- Adding new APIs for STAC search and get feature\n- Adding breedingMethods and Measurements as part of Crop Entity\n- Adding geographicIdentifier as part of Season Entity\n- Adding trait, relativeMeasurements and treatments as part of CropVariety Entity\n- Adding type, crs, centroid and bbox(bounding box of the geometry) as part of Boundary Entity\n- Adding Source field in Farmer, Farm, Field, Seasonal Field, Boundary, Crop, Crop variety, Season and Attachment\n- CreatedBy and ModifiedBy in all entities\n- Measure renamed to measurements in Prescription & Crop\n- Acreage renamed to area in Boundary\n- Get Feature and Search Feature APIs for Sentinel 2 L2A and Sentinel 2 L1C STAC collections\n- Adding Weather Data APIs to fetch IBM weather data\n\n### Breaking Changes\n- Removing primaryBoundaryId & boundaryIds from Field and Seasonal Field\n- Removing isPrimary flag from Boundary\n- Removing avgYields from Seasonal Field\n- Renaming Farmer to Party\n- Renaming CropVariety to CropProduct\n- Updated dependency from azure-core<2.0.0,>=1.2.2 to azure-core<2.0.0,>=1.24.0\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n```\n\n----------------------------------------\n\nTITLE: Preparing Sample Tool Call and Definition for Evaluation - Python\nDESCRIPTION: Defines a sample query, a single tool call dictionary for 'fetch_weather', and its tool definition as required inputs for the accuracy evaluator. The code specifies the function arguments, expected schema, and their descriptions, setting up structured data for subsequent accuracy testing. No code execution occurs in this snippet, but it provides static data that will be referenced by calling the evaluation method.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/tool_call_accuracy.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquery = \"How is the weather in Seattle ?\"\ntool_call = {\n                    \"type\": \"tool_call\",\n                    \"tool_call_id\": \"call_CUdbkBfvVBla2YP3p24uhElJ\",\n                    \"name\": \"fetch_weather\",\n                    \"arguments\": {\n                        \"location\": \"Seattle\"\n                    }\n                }\n\ntool_definition = {\n                    \"id\": \"fetch_weather\",\n                    \"name\": \"fetch_weather\",\n                    \"description\": \"Fetches the weather information for the specified location.\",\n                    \"parameters\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"location\": {\n                                \"type\": \"string\",\n                                \"description\": \"The location to fetch weather for.\"\n                            }\n                        }\n                    }\n                }\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for azure.servicebus.exceptions Module (rst)\nDESCRIPTION: This reStructuredText directive uses Sphinx's `automodule` to automatically generate documentation for the `azure.servicebus.exceptions` Python submodule. It includes documentation for all members, undocumented members, and inherited members within that specific module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/doc/azure.servicebus.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.servicebus.exceptions\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This markdown snippet outlines the release history of the Azure Synapse Python SDK, including version numbers, release dates, and changes. It also includes important deprecation notices and migration instructions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.2 (2024-11-01)\n\n### Other Changes\n\n- This package has been officially deprecated and will no longer be maintained after 2020-04-13. This package will only receive security fixes until 2020-04-13. Please install the service specific packages prefixed by azure-synapse needed for your application. The complete list of available packages can be found at: https://aka.ms/azsdk/python/all\n\n## 0.1.1 (2020-04-13)\n\n* Deprecate azure-synapse\n\n## 0.1.0 (2020-02-20)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies in Requirements File - Plaintext\nDESCRIPTION: This snippet is a requirements.txt file that lists essential third-party libraries for a Python project. It includes core dependencies such as 'aiohttp', 'psutil', 'azure-servicebus', and others, as well as an example (via comment) explaining how to install a package from a particular Git branch, which is useful for using development or feature-specific versions of packages. Users are expected to have Python and pip installed; the file is consumed directly via 'pip install -r requirements.txt' to ensure all dependencies are installed prior to running the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/stress/scripts/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.0\nopencensus-ext-azure\npsutil\n# To install from a specific git branch, replace the package with a req in the following format:\n# git+<gh-repo-url>@<branch>#subdirectory=<path/to/sdk>&egg=<package-name>\n# ex. git+https://github.com/l0lawrence/azure-sdk-for-python.git@sb_retries#subdirectory=sdk/servicebus/azure-servicebus&egg=azure-servicebus\nazure-servicebus\npython-dotenv\nwebsocket-client\nmemray\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release of Azure SDK for Python\nDESCRIPTION: This markdown snippet documents the initial release of the Azure SDK for Python. It specifies the version number and release date for the first beta version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/largeinstance/azure-mgmt-largeinstance/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2024-04-15)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Encoding EventData with AvroSerializer (Legacy)\nDESCRIPTION: Example showing how to manually set the Avro-serialized payload as the body of an EventData object using the legacy approach.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith serializer:\n    dict_data = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    payload_bytes = serializer.serialize(value=dict_data, schema=SCHEMA_STRING)\n    event_data = EventData(body=payload_bytes)  # pass the bytes data to the body of an EventData\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Azure Identity Test Folder in Shell\nDESCRIPTION: This shell snippet changes the working directory to the test folder for azure-identity, where build and test operations will occur. It assumes the repository has been cloned locally. A valid filesystem path is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd azure-sdk-for-python/sdk/identity/azure-identity/tests\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK Python\nDESCRIPTION: This markdown snippet outlines the release history for version 1.0.0b1 of the Azure SDK for Python, released on 2024-11-21. It indicates that this is the initial version of the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/terraform/azure-mgmt-terraform/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2024-11-21)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Running Python Sample for Azure Storage Queue\nDESCRIPTION: This snippet demonstrates how to run a Python sample file for Azure Storage Queue operations. It assumes the environment variables are set and the user is in the correct directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython queue_samples_hello_world.py\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Detailed changelog documenting version history from 1.0.0b1 through 1.1.1, including features added, breaking changes, bug fixes and other changes for the Azure Document Translation SDK\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.1.0 (2024-11-15)\n\n### Other Changes\n- Renamed SingleDocumentTranslationClient's API from `document_translate` to `translate`\n\n## 1.1.0b1 (2024-05-21)\n\n### Features Added\n- Added SingleDocumentTranslationClient that is used to invoke `document_translate` API.\n- `document_translate` is the method added to submit a single/synchronous document translation request to the Document Translation service.\n- `DocumentTranslateContent` has been added to specify the `document_translate` request content.\n\n### Breaking Changes\n- Version `v1.0` is not supported.\n- The service has changed to date-based API versioning and v1.0 service behavior is supported through the new version: 2024-05-01.\n\n### Other Changes\n\n- This version and all future versions will require Python 3.8+. Python 3.7 is no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Generating SAS Token and Creating QueueService Client (Python 2.X)\nDESCRIPTION: Demonstrates how to generate a SAS token and create a QueueService client using it in version 2.X of the Azure Storage Queue SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.queue import QueueService\nfrom azure.storage.common import (\n    ResourceTypes,\n    AccountPermissions,\n)\nfrom datetime import datetime, timedelta\n\nservice = QueueService(\"<storage-account-name>\", \"<account-access-key>\", endpoint_suffix=\"<endpoint_suffix>\")\n                        \ntoken = service.generate_account_shared_access_signature(\n    ResourceTypes.CONTAINER,\n    AccountPermissions.READ,\n    datetime.utcnow() + timedelta(hours=1),\n)\n\n# Create a service and use the SAS\nsas_service = QueueService(\n    account_name=\"<storage-account-name>\",\n    sas_token=token,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Network API Settings in YAML\nDESCRIPTION: Defines the basic configuration settings for the Network Management API, including title, description, type, and API version tag to use.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: NetworkManagementClient\ndescription: Network Client\nopenapi-type: arm\ntag: package-2019-04\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Dependencies for Azure SDK Python Development\nDESCRIPTION: This configuration specifies path references to local dependencies required for Azure SDK Python development. It includes the Azure SDK tools from a relative path and the Azure Identity package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/selfhelp/azure-mgmt-selfhelp/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency in Python\nDESCRIPTION: This line specifies a local path dependency for Azure SDK tools, using the -e flag to indicate an editable install. The path '../../../tools/azure-sdk-tools' points to the location of the tools relative to the current directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-digitaltwins-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Development Dependency for Azure SDK Tools\nDESCRIPTION: This line specifies a local development dependency for the Azure SDK for Python project. It uses the '-e' flag to install the package in editable mode, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-mgmt-agrifood/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure Identity Dependency in Python Requirements\nDESCRIPTION: Includes the 'azure-identity' package from a local folder, facilitating authentication scenarios in Azure SDK development. It assumes an editable or local development setup, where '../../identity/azure-identity' points to the current development version of the package. Required for implementing authentication flows in test or development environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servermanager/azure-mgmt-servermanager/dev_requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted release history tracking version changes from initial release 1.0.0b1 through deprecation notice in 1.0.0b5. Documents features, bug fixes, and breaking changes across releases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-catalog/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b5 (2024-04-17)\n\n - This package is no longer being maintained. Use the [azure-purview-datamap](https://pypi.org/project/azure-purview-datamap/) package instead.\n\n## 1.0.0b4 (2022-06-13)\n\n**Features**\n\n  - Support Atlas 2.2 APIs\n\n**Bugs Fixed**\n\n  - Add missing query parameter `includeTermHierarchy` for update term API\n  - Add missing query parameter `excludeRelationshipTypes` for get term API\n\n## 1.0.0b3 (2022-03-15)\n\n**Bugs Fixed**\n\n  - Fix `delete_by_guids` to get rid of bad request error #22487\n\n## 1.0.0b2 (2021-09-29)\n\n**Features**\n\n  - Add convenience operations to client\n\n**Breaking changes**\n\n  - Remove rest layer and request builders(detailed description is in `README.md`)\n  - The HttpRequest parameter to send_request has changed from `http_request` to `request`\n  - Ordering of endpoint and credential params have changed\n\n\n## 1.0.0b1 (2021-05-11)\n\n- This is the initial release of the Azure Purview Catalog library.\n```\n\n----------------------------------------\n\nTITLE: Upgrading Azure AI Inference Library (Bash)\nDESCRIPTION: Upgrades an existing installation of the Azure AI Inference client library for Python to the latest version using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade azure-ai-inference\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Azure SDK Python Project\nDESCRIPTION: A dependency configuration listing required packages for an Azure SDK Python project. The file references both local development packages (using -e flag for editable installs) and Azure SDK components needed for the project's functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/mongocluster/azure-mgmt-mongocluster/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Dependencies for Azure SDK Python Development\nDESCRIPTION: This code snippet defines local development dependencies for the Azure SDK for Python. It references the Azure SDK tools package and the Azure Network Management package from relative local paths, likely for development or testing purposes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datamigration/azure-mgmt-datamigration/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../network/azure-mgmt-network\n```\n\n----------------------------------------\n\nTITLE: Renaming DataSourceCredential to DatasourceCredential\nDESCRIPTION: Directive to rename DataSourceCredential class to DatasourceCredential for consistent naming conventions in the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataSourceCredential\"][\"x-ms-client-name\"] = \"DatasourceCredential\";\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Autorest CLI\nDESCRIPTION: Docker command to run the Azure CLI tools container, which includes Autorest for generating tests. It maps a local directory to the container for accessing cloned repositories.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generating-integration-test.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v c:\\dev:/_ mcr.microsoft.com/azure-cli/tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure SDK for Python\nDESCRIPTION: Lists the dependencies required for the Azure SDK for Python project. It uses editable installation mode (-e) for local development packages and includes the aiohttp package for asynchronous HTTP requests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/redhatopenshift/azure-mgmt-redhatopenshift/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Updating CHANGELOG.md for Deprecation\nDESCRIPTION: Example of how to update the CHANGELOG.md file to include the deprecation notice for a new version release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/deprecation_process.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.4 (2023-03-31)\n\n### Other Changes\n\n- This package has been deprecated and will no longer be maintained after <EOLDate>. This package will only receive security fixes until <EOLDate>. To receive updates on new features and non-security bug fixes, upgrade to the replacement package, [azure-mynewpackage](https://pypi.org/project/azure-mynewpackage/). Refer to the migration guide (https://aka.ms/azsdk/python/migrate/my-new-package) for guidance on upgrading.\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault using Azure CLI in Shell\nDESCRIPTION: This shell snippet provisions a new Azure Key Vault in the specified resource group and with the given name using the Azure CLI. Valid values for RESOURCE_GROUP and KEY_VAULT_NAME are required, with Key Vault naming constraints enforced by Azure. Permissions for creating resources in the subscription and Azure CLI login are required. On success, a Key Vault instance is created.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naz keyvault create -g $RESOURCE_GROUP -n $KEY_VAULT_NAME --sku standard\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Python Development Dependencies\nDESCRIPTION: Lists the required dependencies for Azure SDK Python development, including local path references to Azure tools, core packages, identity components and the aiohttp library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/computeschedule/azure-mgmt-computeschedule/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to SQL Filters and Actions in Python\nDESCRIPTION: Added new properties `parameters` and `requires_preprocessing` to `SqlRuleFilter` and `SqlRuleAction` classes, enhancing the capabilities of SQL-based rule definitions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nSqlRuleFilter.parameters, SqlRuleFilter.requires_preprocessing\nSqlRuleAction.parameters, SqlRuleAction.requires_preprocessing\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure Key Vault Performance Tests\nDESCRIPTION: These commands install the required dependencies for running performance tests, including the dev requirements and the local package in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-keys> pip install -r dev_requirements.txt\n(env) ~/azure-keyvault-keys> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 11.0.0b1 in Markdown\nDESCRIPTION: Documents the changes in version 11.0.0b1 of the Azure SDK for Python, including new features added and breaking changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/consumption/azure-mgmt-consumption/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 11.0.0b1 (2022-12-07)\n\n### Features Added\n\n  - Model ChargeSummary has a new parameter etag\n  - Model ChargeSummary has a new parameter tags\n  - Model CreditSummary has a new parameter e_tag_properties_e_tag\n  - Model LegacyChargeSummary has a new parameter azure_marketplace_charges\n  - Model LegacyChargeSummary has a new parameter etag\n  - Model LegacyChargeSummary has a new parameter tags\n  - Model ModernChargeSummary has a new parameter etag\n  - Model ModernChargeSummary has a new parameter tags\n  - Model ModernReservationRecommendation has a new parameter resource_type\n  - Model ModernReservationRecommendation has a new parameter subscription_id\n\n### Breaking Changes\n\n  - Model ChargeSummary no longer has parameter e_tag\n  - Model CreditSummary no longer has parameter etag\n  - Model CreditSummary no longer has parameter tags\n  - Model LegacyChargeSummary no longer has parameter e_tag\n  - Model LegacyChargeSummary no longer has parameter marketplace_charges\n  - Model ModernChargeSummary no longer has parameter e_tag\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a local development dependency for the Azure SDK tools. It uses the '-e' flag to indicate an editable install, pointing to a relative path where the tools are located.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kubernetesconfiguration/azure-mgmt-kubernetesconfiguration/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Override for Unique Items in Composed Models\nDESCRIPTION: YAML directive to override the uniqueItems property for component models in ComposeDocumentModelRequest to address a validation issue with msrest.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    -   from: swagger-document\n        where: '$.definitions[\"ComposeDocumentModelRequest\"].properties'\n        transform: >\n            $[\"componentModels\"].uniqueItems = false\n```\n\n----------------------------------------\n\nTITLE: Question Set Before Pronoun Replacement\nDESCRIPTION: Original set of questions with repeated entity references\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/azure/ai/generative/synthetic/templates/prompt_qa_conversation_modify.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[Q]: What is a Compute instance?\n[Q]: What do Compute instances provide for IT administrators?\n[Q]: Which tools do compute instances come with?\n[Q]: What kind of computes are Compute clusters?\n[Q]: What is a Compute cluster?\n[Q]: Are Online and Batch endpoints the same?\n```\n\n----------------------------------------\n\nTITLE: Conditional Aiohttp Dependency for Non-PyPy (Python)\nDESCRIPTION: Requires the `aiohttp` package version >=3.0 when the Python implementation is *not* PyPy (e.g., CPython). This specifies the standard dependency requirement for aiohttp in most common environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/dev_requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\naiohttp>=3.0 ; platform_python_implementation != \"PyPy\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure SDK for Python in Markdown\nDESCRIPTION: This snippet outlines the release history for the Azure SDK for Python, detailing changes in versions 1.0.0b2 and 1.0.0b1. It includes information about features added and other changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/pineconevectordb/azure-mgmt-pineconevectordb/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (2025-03-20)\n\n### Features Added\n\n  - Parameter `subscription_id` of model `MarketplaceDetails` is now optional\n  - Parameter `first_name` of model `UserDetails` is now optional\n  - Parameter `last_name` of model `UserDetails` is now optional\n  - Parameter `email_address` of model `UserDetails` is now optional\n\n## 1.0.0b1 (2025-02-06)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Using the NULL Sentinel Value for Optional Attributes in Python\nDESCRIPTION: This snippet illustrates the usage of the `NULL` sentinel value provided by `azure.core.serialization`. `NULL` is a special object that evaluates to `False` in boolean contexts and is intended to represent attributes without data, which should be serialized as `null`. The example shows how to import `NULL`, check its boolean value, and assign it to an attribute of a hypothetical `Foo` object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.serialization import NULL\n\nassert bool(NULL) is False\n\nfoo = Foo(\n    attr=NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Generating SDK from Swagger Folder Using AutoRest and PowerShell\nDESCRIPTION: Provides two commands for navigating to a Swagger/OpenAPI folder and generating the Python SDK using AutoRest. The commands must be run in sequence: first to change directories, then to invoke AutoRest on a README.md file with the relevant API specs. Users must replace <swagger-folder> with the actual path and ensure README.md exists.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd <swagger-folder>\nautorest README.md\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Structured release history detailing version changes, breaking changes, and new features across multiple releases of the Azure SDK for Python package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/operationsmanagement/azure-mgmt-operationsmanagement/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0b1 (2022-10-27)\n\n### Breaking Changes\n\n  - Operation ManagementAssociationsOperations.create_or_update has a new parameter provider_name\n  - Operation ManagementAssociationsOperations.create_or_update has a new parameter resource_name\n  - Operation ManagementAssociationsOperations.create_or_update has a new parameter resource_type\n  - Operation ManagementAssociationsOperations.delete has a new parameter provider_name\n  - Operation ManagementAssociationsOperations.delete has a new parameter resource_name\n  - Operation ManagementAssociationsOperations.delete has a new parameter resource_type\n  - Operation ManagementAssociationsOperations.get has a new parameter provider_name\n  - Operation ManagementAssociationsOperations.get has a new parameter resource_name\n  - Operation ManagementAssociationsOperations.get has a new parameter resource_type\n\n## 1.0.0 (2020-12-16)\n\n- GA release\n\n## 1.0.0b1 (2020-11-02)\n\nThis is beta preview version.\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\nGeneral breaking changes\n\nCredential system has been completly revamped:\n\nazure.common.credentials or msrestazure.azure_active_directory instances are no longer supported, use the azure-identity classes instead: https://pypi.org/project/azure-identity/\ncredentials parameter has been renamed credential\nThe config attribute no longer exists on a client, configuration should be passed as kwarg. Example: MyClient(credential, subscription_id, enable_logging=True). For a complete set of supported options, see the parameters accept in init documentation of azure-core\n\nYou can't import a version module anymore, use __version__ instead\n\nOperations that used to return a msrest.polling.LROPoller now returns a azure.core.polling.LROPoller and are prefixed with begin_.\n\nExceptions tree have been simplified and most exceptions are now azure.core.exceptions.HttpResponseError (CloudError has been removed).\n\nMost of the operation kwarg have changed. Some of the most noticeable:\n\nraw has been removed. Equivalent feature can be found using cls, a callback that will give access to internal HTTP response for advanced user\nFor a complete set of supported options, see the parameters accept in Request documentation of azure-core\nGeneral new features\n\nType annotations support using typing. SDKs are mypy ready.\nThis client has now stable and official support for async. Check the aio namespace of your package to find the async client.\nThis client now support natively tracing library like OpenCensus or OpenTelemetry. See this tracing quickstart for an overview.\n\n## 0.1.0 (2020-01-24)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Listing Azure SDK Packages for Python\nDESCRIPTION: This snippet shows a markdown-formatted list of Azure SDK packages for Python, including their names and versions. It represents the current release of the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apimanagement-4.0.0\n- azure-mgmt-appconfiguration-3.0.0\n- azure-mgmt-appcontainers-3.0.0\n- azure-mgmt-applicationinsights-4.0.0\n- azure-mgmt-appplatform-8.0.0\n- azure-mgmt-attestation-1.0.0\n- azure-mgmt-authorization-4.0.0\n- azure-mgmt-automanage-1.0.0\n- azure-mgmt-automation-1.0.0\n- azure-mgmt-avs-8.0.0\n- azure-mgmt-azurearcdata-1.0.0\n- azure-mgmt-azurestack-1.0.0\n- azure-mgmt-azurestackhci-7.0.0\n- azure-mgmt-baremetalinfrastructure-1.0.0\n- azure-mgmt-batch-17.1.0\n- azure-mgmt-billing-6.0.0\n- azure-mgmt-botservice-2.0.0\n- azure-mgmt-cdn-13.0.0\n- azure-mgmt-changeanalysis-1.0.0\n- azure-mgmt-chaos-1.0.0\n- azure-mgmt-cognitiveservices-13.5.0\n- azure-mgmt-commerce-6.0.0\n- azure-mgmt-communication-2.0.0\n- azure-mgmt-compute-30.3.0\n- azure-mgmt-confidentialledger-1.0.0\n- azure-mgmt-confluent-2.0.0\n- azure-mgmt-connectedvmware-1.0.0\n- azure-mgmt-consumption-10.0.0\n- azure-mgmt-containerinstance-10.1.0\n- azure-mgmt-containerregistry-10.3.0\n- azure-mgmt-containerservice-28.0.0\n- azure-mgmt-cosmosdb-9.3.0\n- azure-mgmt-costmanagement-4.0.1\n- azure-mgmt-customproviders-1.0.0\n- azure-mgmt-dashboard-1.1.0\n- azure-mgmt-databox-2.0.0\n- azure-mgmt-databoxedge-1.0.0\n- azure-mgmt-databricks-2.0.0\n- azure-mgmt-datadog-2.1.0\n- azure-mgmt-datafactory-4.0.0\n- azure-mgmt-datalake-store-1.0.0\n- azure-mgmt-datamigration-10.0.0\n- azure-mgmt-dataprotection-1.2.0\n- azure-mgmt-datashare-1.0.0\n- azure-mgmt-deploymentmanager-1.0.0\n- azure-mgmt-desktopvirtualization-1.0.0\n- azure-mgmt-devcenter-1.0.0\n- azure-mgmt-deviceupdate-1.0.0\n- azure-mgmt-devtestlabs-9.0.0\n- azure-mgmt-digitaltwins-6.4.0\n- azure-mgmt-dns-8.0.1\n- azure-mgmt-dnsresolver-1.0.0\n- azure-mgmt-dynatrace-2.0.0\n- azure-mgmt-edgeorder-1.0.0\n- azure-mgmt-elastic-1.0.0\n- azure-mgmt-eventgrid-10.2.0\n- azure-mgmt-eventhub-11.0.0\n- azure-mgmt-extendedlocation-1.1.0\n- azure-mgmt-fluidrelay-1.0.0\n- azure-mgmt-frontdoor-1.1.0\n- azure-mgmt-graphservices-1.0.0\n- azure-mgmt-hanaonazure-1.0.0\n- azure-mgmt-hdinsight-9.0.0\n- azure-mgmt-healthcareapis-1.1.0\n- azure-mgmt-hybridcompute-8.0.0\n- azure-mgmt-hybridconnectivity-1.0.0\n- azure-mgmt-hybridkubernetes-1.1.0\n- azure-mgmt-hybridnetwork-2.0.0\n- azure-mgmt-imagebuilder-1.2.0\n- azure-mgmt-iothub-3.0.0\n- azure-mgmt-iothubprovisioningservices-1.1.0\n- azure-mgmt-keyvault-10.3.0\n- azure-mgmt-kubernetesconfiguration-3.1.0\n- azure-mgmt-kusto-3.3.0\n- azure-mgmt-labservices-2.0.0\n- azure-mgmt-loadtesting-1.0.0\n- azure-mgmt-loganalytics-12.0.0\n- azure-mgmt-logic-10.0.0\n- azure-mgmt-logz-1.0.0\n- azure-mgmt-machinelearningservices-1.0.0\n- azure-mgmt-maintenance-2.1.0\n- azure-mgmt-managednetworkfabric-1.0.0\n- azure-mgmt-managedservices-6.0.0\n- azure-mgmt-managementgroups-1.0.0\n- azure-mgmt-managementpartner-1.0.0\n- azure-mgmt-maps-2.1.0\n- azure-mgmt-marketplaceordering-1.1.0\n- azure-mgmt-media-10.2.0\n- azure-mgmt-mixedreality-1.0.0\n- azure-mgmt-mobilenetwork-3.1.0\n- azure-mgmt-monitor-6.0.2\n- azure-mgmt-msi-7.0.0\n- azure-mgmt-netapp-11.0.0\n- azure-mgmt-network-25.1.0\n- azure-mgmt-networkcloud-1.0.0\n- azure-mgmt-newrelicobservability-1.0.0\n- azure-mgmt-nginx-3.0.0\n- azure-mgmt-notificationhubs-8.0.0\n- azure-mgmt-operationsmanagement-1.0.0\n- azure-mgmt-orbital-2.0.0\n- azure-mgmt-operationsmanagement-1.0.0\n- azure-mgmt-paloaltonetworksngfw-1.0.0\n- azure-mgmt-peering-1.0.0\n- azure-mgmt-policyinsights-1.0.0\n- azure-mgmt-portal-1.0.0\n- azure-mgmt-powerbidedicated-1.0.0\n- azure-mgmt-privatedns-1.1.0\n- azure-mgmt-purview-1.0.0\n- azure-mgmt-qumulo-1.0.0\n- azure-mgmt-quota-1.1.0\n- azure-mgmt-rdbms-10.1.0\n- azure-mgmt-recoveryservices-2.5.0\n- azure-mgmt-recoveryservicesbackup-7.0.0\n- azure-mgmt-redhatopenshift-1.4.0\n- azure-mgmt-redis-14.3.0\n- azure-mgmt-redisenterprise-2.0.0\n- azure-mgmt-relay-1.1.0\n- azure-mgmt-reservations-2.3.0\n- azure-mgmt-resource-23.0.1\n- azure-mgmt-resourceconnector-1.0.0\n- azure-mgmt-resourcemover-1.1.0\n- azure-mgmt-search-9.1.0\n- azure-mgmt-security-5.0.0\n- azure-mgmt-securityinsight-1.0.0\n- azure-mgmt-selfhelp-1.0.0\n- azure-mgmt-serialconsole-1.0.0\n- azure-mgmt-servicebus-8.2.0\n- azure-mgmt-servicefabric-2.0.0\n- azure-mgmt-servicelinker-1.1.0\n- azure-mgmt-servicenetworking-1.0.0\n- azure-mgmt-signalr-1.2.0\n- azure-mgmt-sql-3.0.1\n- azure-mgmt-storage-21.1.0\n- azure-mgmt-storagecache-1.5.0\n- azure-mgmt-storagemover-2.0.0\n- azure-mgmt-storagepool-1.0.0\n- azure-mgmt-storagesync-1.0.0\n- azure-mgmt-streamanalytics-1.0.0\n- azure-mgmt-subscription-3.1.1\n- azure-mgmt-support-6.0.0\n- azure-mgmt-synapse-2.0.0\n- azure-mgmt-timeseriesinsights-1.0.0\n- azure-mgmt-trafficmanager-1.1.0\n- azure-mgmt-voiceservices-1.0.0\n- azure-mgmt-web-7.2.0\n- azure-mgmt-webpubsub-1.1.0\n- azure-mgmt-workloads-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Error Message Format Example for CredScan\nDESCRIPTION: Example showing the format of a CredScan error message, indicating file path and location of potential credential findings. The example demonstrates how CredScan reports issues with row and column information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/credscan_process.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n##[error]1. Credential Scanner Error CSCAN-GENERAL0030 - File: sdk/{service}/{package}/{file}.py:sdk/{service}/{package}/{file}.py(3,20)\n```\n\n----------------------------------------\n\nTITLE: Including Azure SDK Tools Development Dependency\nDESCRIPTION: A pip requirements file entry that references a local path to Azure SDK tools package using the -e flag for editable mode installation\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-vmwarecloudsimple/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Evaluating with Reasoning Model\nDESCRIPTION: Implementation of completeness evaluation using a reasoning model with specific configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/response_completeness.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation import ResponseCompletenessEvaluator , AzureOpenAIModelConfiguration\nfrom pprint import pprint\n\n# set is_reasoning_model to True in case the model is a reasoning model (ex: o3-mini, o1-preview)\nresponse_completeness_evaluator = ResponseCompletenessEvaluator(model_config=model_config,\n                                                                is_reasoning_model=True)\n\nresult = response_completeness_evaluator(\n    response=\"The capital of Japan is Tokyo.\",\n    ground_truth=\"The capital of Japan is Tokyo.\"\n)\nresult\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Conditions and Editable Installs\nDESCRIPTION: This snippet defines project dependencies for a Python project using the pip requirements file format. The first line specifies a dependency on 'aiohttp' version 3.0 or greater, but only if the Python version is 3.5 or higher. The second line specifies an editable installation ('-e') of a local package located at '../../../tools/azure-sdk-tools'. These dependencies are typically installed using 'pip install -r <filename>'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/baremetalinfrastructure/azure-mgmt-baremetalinfrastructure/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\naiohttp>=3.0; python_version >= '3.5'\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Healthdataaiservices Management package with pip\nDESCRIPTION: Commands to install the required Python packages for working with Azure Healthdataaiservices. Installs both the management client library and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-mgmt-healthdataaiservices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-healthdataaiservices\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest using npm (PowerShell)\nDESCRIPTION: Installs the Autorest code generation tool globally using the Node Package Manager (npm). Requires npm to be installed and available in the system's PATH.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n```ps\nnpm install -g autorest\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for Package Documentation\nDESCRIPTION: This reStructuredText snippet uses the Sphinx `automodule` directive to automatically generate documentation for the specified Python module (`azure.ai.language.conversations.authoring`). The options `:members:`, `:undoc-members:`, and `:inherited-members:` instruct Sphinx to include documentation for all members, members without docstrings, and members inherited from base classes, respectively.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/doc/azure.ai.language.conversations.authoring.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.ai.language.conversations.authoring\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies via Requirements File\nDESCRIPTION: This snippet lists Python package dependencies, typically found in a `requirements.txt` or similar file. It includes an editable installation (`-e`) pointing to local development tools, and specifies dependencies on core Azure libraries (`azure-core`, `azure-identity`, `azure-mgmt-core`) likely referenced via relative paths, along with the `aiohttp` library for asynchronous HTTP requests. These are essential for building and running the associated Azure SDK component.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/impactreporting/azure-mgmt-impactreporting/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Azure SDK\nDESCRIPTION: This snippet defines the package dependencies for the Azure SDK for Python project. It includes local project references, core Azure packages, and external dependencies with specific version requirements. There's a special condition for the aiohttp package based on the Python implementation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../cosmos/azure-mgmt-cosmosdb\n-e ../../resources/azure-mgmt-resource\n../../core/azure-core\n../../nspkg/azure-data-nspkg\n# Aiohttp 3.8.6 triggers https://github.com/aio-libs/aiohttp/issues/4581 on pypy for some reasons\naiohttp<3.8.6 ; platform_python_implementation == \"PyPy\"\naiohttp ; platform_python_implementation != \"PyPy\"\nazure-identity\npython-dateutil>=2.8.0\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Documentation - Version 8.1.0b2\nDESCRIPTION: Lists breaking changes in version 8.1.0b2 including removed operations, required parameters, and model changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/notificationhubs/azure-mgmt-notificationhubs/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n  - Model DebugSendResponse no longer has parameter sku\n  - Model ErrorResponse no longer has parameter code\n  - Model ErrorResponse no longer has parameter message\n  - Model NotificationHubPatchParameters no longer has parameter id\n```\n\n----------------------------------------\n\nTITLE: Installing Azure API Center Management Package\nDESCRIPTION: Commands to install the required Azure packages using pip. Installs both the API Center management package and Azure identity package for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apicenter/azure-mgmt-apicenter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-apicenter\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Conda Package Build Configuration Path\nDESCRIPTION: Reference to the YAML configuration file path that defines the default workloads for conda package generation when no explicit JSON configuration is provided.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-recipes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\neng/pipelines/templates/stages/conda-sdk-client.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpResponseError Exception in Azure SDK for Python\nDESCRIPTION: The HttpResponseError class extends AzureError to represent errors arising from HTTP responses with non-success status codes. It requires a message (optional), a response object (optional), and keyword arguments for additional context. The class attempts to parse an OData error from the response body, and provides structured reason, status_code, and error parsing for robust error reporting in client applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/README_missing_snippet.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass HttpResponseError(AzureError):\n    def __init__(self, message=None, response=None, **kwargs):\n        self.reason = None\n        self.response = response\n        if response:\n            self.reason = response.reason\n            self.status_code = response.status_code\n        self.error = self._parse_odata_body(ODataV4Format, response)  # type: Optional[ODataV4Format]\n        if self.error:\n            message = str(self.error)\n        else:\n            message = message or \"Operation returned an invalid status '{}'\".format(\n                self.reason\n            )\n\n        super(HttpResponseError, self).__init__(message=message, **kwargs)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure used to document release history for the Azure SDK for Python. It includes sections for unreleased changes and a released version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-translation-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b1 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0 (2021-04-06)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History for Azure Confidential Ledger SDK in Markdown\nDESCRIPTION: This markdown document details the release history of the Azure Confidential Ledger SDK for Python. It includes version numbers, release dates, added features, breaking changes, and other modifications across multiple releases.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-mgmt-confidentialledger/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0b4 (2024-04-22)\n\n### Features Added\n\n  - Added operation LedgerOperations.begin_backup\n  - Added operation LedgerOperations.begin_restore\n  - Added operation ManagedCCFOperations.begin_backup\n  - Added operation ManagedCCFOperations.begin_restore\n  - Model LedgerProperties has a new parameter ledger_sku\n  - Model ManagedCCFProperties has a new parameter running_state\n\n## 2.0.0b3 (2023-05-17)\n\n### Other Changes\n\n  - Added samples\n\n## 2.0.0b2 (2023-04-20)\n\n### Features Added\n\n  - Added operation group ManagedCCFOperations\n  - Model LedgerProperties has a new parameter running_state\n\n### Breaking Changes\n\n  - Model LedgerProperties no longer has parameter ledger_storage_account\n  - Parameter location of model ConfidentialLedger is now required\n\n## 2.0.0b1 (2022-11-25)\n\n### Features Added\n\n  - Model LedgerProperties has a new parameter ledger_storage_account\n\n### Breaking Changes\n\n  - Removed operation group ConfidentialLedgerOperationsMixin\n\n## 1.0.0 (2022-05-30)\n\n**Features**\n\n  - Added operation group ConfidentialLedgerOperationsMixin\n\n**Breaking changes**\n\n  - Model LedgerProperties no longer has parameter ledger_storage_account\n\n## 1.0.0b1 (2021-04-28)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 3.1.0b1 in Markdown\nDESCRIPTION: This snippet details the changes in version 3.1.0b1 of the Azure SDK for Python, including new operations and model updates for NGINX management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.1.0b1 (2024-03-18)\n\n### Features Added\n\n  - Added operation ConfigurationsOperations.analysis\n  - Model NginxCertificateProperties has a new parameter certificate_error\n  - Model NginxCertificateProperties has a new parameter key_vault_secret_created\n  - Model NginxCertificateProperties has a new parameter key_vault_secret_version\n  - Model NginxCertificateProperties has a new parameter sha1_thumbprint\n  - Model NginxDeploymentProperties has a new parameter auto_upgrade_profile\n  - Model NginxDeploymentScalingProperties has a new parameter profiles\n  - Model NginxDeploymentUpdateProperties has a new parameter auto_upgrade_profile\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown documentation detailing the release history of the Azure SDK for Python package, including feature additions, breaking changes, and version information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apicenter/azure-mgmt-apicenter/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2024-02-19)\n\n### Features Added\n\n  - Added operation ServicesOperations.begin_export_metadata_schema\n  - Added operation group ApiDefinitionsOperations\n  - Added operation group ApiVersionsOperations\n  - Added operation group ApisOperations\n  - Added operation group DeploymentsOperations\n  - Added operation group EnvironmentsOperations\n  - Added operation group MetadataSchemasOperations\n  - Added operation group WorkspacesOperations\n  - Model Service has a new parameter properties\n  - Model ServiceUpdate has a new parameter identity\n  - Model ServiceUpdate has a new parameter tags\n\n### Breaking Changes\n\n  - Model Service no longer has parameter provisioning_state\n  - Model ServiceUpdate no longer has parameter provisioning_state\n  - Operation ServicesOperations.update has a new required parameter properties\n  - Operation ServicesOperations.update no longer has parameter parameters\n\n## 1.0.0b1 (2023-08-25)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Azure SDK Development in Python\nDESCRIPTION: This requirements file specifies the dependencies needed for Azure SDK development. It references local paths to Azure SDK components, including tools, core, identity, and management core packages. It also includes aiohttp for asynchronous HTTP operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databasewatcher/azure-mgmt-databasewatcher/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Entry\nDESCRIPTION: Documents the initial beta release version 1.0.0b1 from September 27, 2024, noting that this is the initial version.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/trustedsigning/azure-mgmt-trustedsigning/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2024-09-27)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Documents the version history starting with the initial 1.0.0 release made on May 7, 2021.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-agrifood-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2021-05-07)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Running a Chat Completion Sample (Bash)\nDESCRIPTION: Executes the Python script `sample_chat_completions.py` using the Python interpreter. This script demonstrates how to perform chat completions using the Azure AI Inference client library, likely requiring pre-configured environment variables for endpoint and key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython sample_chat_completions.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Verification Status in TOML\nDESCRIPTION: Demonstrates how to add a 'verify_status_by' key to a package's pyproject.toml file to exclude it from deprecation or set a future re-evaluation date.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/old_packages/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.azure-sdk-build]\nverify_status_by = 2025-07-09\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK\nDESCRIPTION: This configuration lists the required Python packages for the Azure SDK for Python project. It includes `pytest-xdist` for parallel testing, `cloudevents` (version <=2.0.0 for Python 3.7+), `opencensus` (version >=0.6.0) for telemetry, `pywin32` (version 304) specifically for Windows platforms (`sys_platform == 'win32'`), and `azure-mgmt-cognitiveservices` (version <12.0.0) for interacting with Azure Cognitive Services. These dependencies are typically installed using package managers like `pip`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/dev_requirement_samples/specifiers_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest-xdist\ncloudevents<=2.0.0; python_version >= \"3.7\"\nopencensus>=0.6.0\npywin32==304 ; sys_platform == 'win32'\nazure-mgmt-cognitiveservices<12.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages and their versions for the Azure SDK Python project. Includes local development tools, HTTP requests library, static type checker, and GitHub API client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/repo_type_completeness/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ./tools/azure-sdk-tools\nrequests==2.28.1\npyright==1.1.287\nPyGitHub>=1.59.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Dependencies in Python\nDESCRIPTION: This requirements list includes essential dependencies for Azure SDK development in Python. It references local tools, the aiohttp library for async operations, specific Azure management packages, and azure-identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-resource/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp>=3.0; python_version >= '3.5'\nazure-mgmt-managementgroups==1.0.0\nazure-mgmt-msi==1.0.0\nazure-identity\n```\n\n----------------------------------------\n\nTITLE: Renaming EntityStatus to DataFeedStatus in Definitions\nDESCRIPTION: Directive to rename EntityStatus enum to DataFeedStatus in the definitions section of the swagger document for consistency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $[\"definitions\"]\n    transform: >\n      $[\"DataFeedDetail\"][\"properties\"][\"status\"][\"x-ms-enum\"][\"name\"] = \"DataFeedStatus\";\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Python Changelog Entry v34.2.0\nDESCRIPTION: Changelog entry documenting feature additions for version 34.2.0 released on March 18, 2025\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservice/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 34.2.0 (2025-03-18)\n\n### Features Added\n\n  - Added operation group ContainerServiceOperations\n  - Added operation group LoadBalancersOperations\n  - Added operation group ManagedClusterSnapshotsOperations\n  - Added operation group OperationStatusResultOperations\n  - Model AgentPool has a new parameter gpu_profile\n  - Model ManagedCluster has a new parameter bootstrap_profile\n  - Model ManagedClusterAgentPoolProfile has a new parameter gpu_profile\n  - Model ManagedClusterAgentPoolProfileProperties has a new parameter gpu_profile\n  - Model ManagedClusterSecurityProfile has a new parameter custom_ca_trust_certificates\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Polling Strategy in Service Operations\nDESCRIPTION: Shows how to integrate a custom polling strategy into a service operation method using LROBasePolling. Demonstrates passing the custom strategy through the polling parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/customize_long_running_operation.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AnyStr, MutableMapping, Any\nfrom azure.core.polling import LROPoller\nfrom azure.core.polling.base_polling import LROBasePolling\nJSON = MutableMapping[str, Any]\n\n\nclass ServiceOperations:\n\n    def begin_analyze(self, data: AnyStr, name: str, **kwargs) -> LROPoller[JSON]:\n        return self._generated_client.begin_analyze(\n            data,\n            name,\n            polling=LROBasePolling(\n                lro_algorithms=[\n                    CustomOperationResourcePolling()  # overrides other LRO strategies\n                ]\n            ),\n            **kwargs\n        )\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0 in Markdown\nDESCRIPTION: Details the changes in version 1.0.0, including new operations, model updates, and breaking changes affecting various components of the Azure Stream Analytics Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 (2022-01-06)\n\n**Features**\n\n  - Added operation StreamingJobsOperations.begin_scale\n  - Model AzureSqlReferenceInputDataSource has a new parameter database\n  - Model AzureSqlReferenceInputDataSource has a new parameter delta_snapshot_query\n  - Model AzureSqlReferenceInputDataSource has a new parameter full_snapshot_query\n  - Model AzureSqlReferenceInputDataSource has a new parameter password\n  - Model AzureSqlReferenceInputDataSource has a new parameter refresh_rate\n  - Model AzureSqlReferenceInputDataSource has a new parameter refresh_type\n  - Model AzureSqlReferenceInputDataSource has a new parameter server\n  - Model AzureSqlReferenceInputDataSource has a new parameter table\n  - Model AzureSqlReferenceInputDataSource has a new parameter user\n  - Model Cluster has a new parameter capacity_allocated\n  - Model Cluster has a new parameter capacity_assigned\n  - Model Cluster has a new parameter cluster_id\n  - Model Cluster has a new parameter created_date\n  - Model Cluster has a new parameter provisioning_state\n  - Model Operation has a new parameter is_data_action\n  - Model PrivateEndpoint has a new parameter created_date\n  - Model PrivateEndpoint has a new parameter manual_private_link_service_connections\n  - Model Transformation has a new parameter valid_streaming_units\n\n**Breaking changes**\n\n  - Model AzureSqlReferenceInputDataSource no longer has parameter properties\n  - Model Cluster no longer has parameter properties\n  - Model FunctionProperties no longer has parameter binding\n  - Model FunctionProperties no longer has parameter inputs\n  - Model FunctionProperties no longer has parameter output\n  - Model PrivateEndpoint no longer has parameter properties\n  - Model StreamingJob no longer has parameter externals\n```\n\n----------------------------------------\n\nTITLE: Initializing Purview Scanning Client\nDESCRIPTION: Authentication setup using DefaultAzureCredential to create a PurviewScanningClient instance\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.purview.scanning import PurviewScanningClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewScanningClient(endpoint=\"https://<my-account-name>.scan.purview.azure.com\", credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.1.0 in Markdown\nDESCRIPTION: Documents the changes in version 1.1.0, noting the addition of an internal_id parameter to the PrivateZone model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.1.0 (2023-05-20)\n\n### Features Added\n\n  - Model PrivateZone has a new parameter internal_id\n```\n\n----------------------------------------\n\nTITLE: Installing Editable and Core Dependencies for Azure SDK in Python\nDESCRIPTION: Specifies a list of dependencies for an Azure SDK for Python environment, including editable installs of local development tools and libraries (using -e), as well as core and identity management modules. Required dependencies are referenced either as relative file paths (editable for local development) or as direct links, and aiohttp is included as a third-party HTTP library. The file is typically used as a requirements file for pip, facilitating automated environment setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/informaticadatamanagement/azure-mgmt-informaticadatamanagement/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Training LightGBM Binary Classification Model using Command Line\nDESCRIPTION: Command to train a LightGBM binary classification model using the train.conf configuration file. The lightgbm binary must be properly installed and available at the root of the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/batch_setup/light_gbm_examples/binary_classification/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"../../lightgbm\" config=train.conf\n```\n\n----------------------------------------\n\nTITLE: Moved Azure Constants in Python SDK\nDESCRIPTION: Lists constants that were moved from the 'azure' package to specific sub-packages like 'azure.servicemanagement', 'azure.servicebus', and 'azure.storage' in version 1.0.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Moved to azure.servicemanagement:\nDEFAULT_HTTP_TIMEOUT\nMANAGEMENT_HOST\n\n# Moved to azure.servicebus:\nDEFAULT_HTTP_TIMEOUT\nSERVICE_BUS_HOST_BASE\n\n# Moved to azure.storage:\nDEFAULT_HTTP_TIMEOUT\nDEV_ACCOUNT_NAME\nDEV_ACCOUNT_KEY\n```\n\n----------------------------------------\n\nTITLE: Applying Runtime API Specific Autorest Directives (Conditional)\nDESCRIPTION: This YAML block defines Autorest directives applied only when the `release_runtime_1_1` tag is specified. These directives customize the runtime client: adding a response schema to the `AnalyzeConversation_SubmitJob` operation for polling, renaming client operations (`ConversationAnalysis_AnalyzeConversation` to `AnalyzeConversation`, `AnalyzeConversation_SubmitJob` to `ConversationAnalysis`), renaming request body parameters to `task`, and removing specific API paths related to asynchronous job status checks and cancellation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'release_runtime_1_1'\ndirective:\n  # Give analyze job LRO a return type\n  - where-operation: AnalyzeConversation_SubmitJob\n    transform: >\n      $[\"responses\"][\"200\"] = {\n          \"description\": \"mock schema to get poller response when calling .result()\",\n          \"schema\": {\n              \"$ref\": \"#/definitions/AnalyzeConversationJobState\"\n          }\n      };\n  # Rename Runtime client operation\n  - rename-operation:\n      from: ConversationAnalysis_AnalyzeConversation\n      to: AnalyzeConversation\n  # Rename Runtime client async operation\n  - rename-operation:\n      from: AnalyzeConversation_SubmitJob\n      to: ConversationAnalysis\n  # Rename analyze_conversation `body` to `tasks`\n  - from: swagger-document\n    where: $[\"paths\"][\"/:analyze-conversations\"][\"post\"]\n    transform: >\n      $[\"parameters\"][1][\"x-ms-client-name\"] = \"task\";\n  # Rename begin_conversation_analysis `body` to `tasks`\n  - from: swagger-document\n    where: $[\"paths\"][\"/analyze-conversations/jobs\"][\"post\"]\n    transform: >\n      $[\"parameters\"][1][\"x-ms-client-name\"] = \"task\";\n  # Remove async GET operation status\n  - from: swagger-document\n    where: $[\"paths\"]\n    transform: >\n        delete $[\"/analyze-conversations/jobs/{jobId}\"];\n  # Remove async cancel operation\n  - from: swagger-document\n    where: $[\"paths\"]\n    transform: >\n        delete $[\"/analyze-conversations/jobs/{jobId}:cancel\"];\n```\n\n----------------------------------------\n\nTITLE: Modifying date formats in Swagger document using YAML directive\nDESCRIPTION: YAML directive to change the format of Start and Expiry properties to string in the AccessPolicy definition.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.AccessPolicy.properties\n  transform: >\n    $.Start.format = \"str\";\n    $.Expiry.format = \"str\";\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for AmqpMessageHeader Class using Sphinx reStructuredText\nDESCRIPTION: This reStructuredText directive utilizes Sphinx's `autoclass` to generate documentation for the `azure.eventhub.amqp.AmqpMessageHeader` class. It specifies that documentation should cover all members, undocumented members, and inherited members. Depends on Sphinx and the `azure-eventhub` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.amqp.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.amqp.AmqpMessageHeader\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Generation using PowerShell\nDESCRIPTION: This command executes the Autorest tool within the directory containing the Swagger/OpenAPI specification (`<swagger-folder>`). Autorest reads the configuration files (like `readme.md` or configuration blocks) in the current directory to generate the client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ps\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Azure SDK Development\nDESCRIPTION: Lists required Python packages for Azure SDK development and testing. Includes packages for async I/O (aiohttp, aiodns), testing frameworks (mock, pytest-asyncio), core Azure components (azure-core, azure-mgmt-storage) and other utilities.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/conda_test_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# install from root of repo\naiohttp>=3.0\ntools/azure-sdk-tools\nmock;\naiodns>=2.0\nparameterized>=0.7.3\ntrio\ntyping_extensions>=3.7.2\ncryptography\nadal\nsetuptools==75.3.2\npytest-asyncio==0.25.3\n-e sdk/core/azure-core/tests/testserver_tests/coretestserver\nazure-mgmt-storage\n```\n\n----------------------------------------\n\nTITLE: Setting Key Vault Access Policy for User-Assigned Identity\nDESCRIPTION: Command to set the key vault access policy for the user-assigned managed identity, granting list permissions for secrets.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\naz keyvault set-policy -n $KEY_VAULT_NAME --secret-permissions list --object-id $PRINCIPAL_ID\n```\n\n----------------------------------------\n\nTITLE: Installing AutoRest Globally using PowerShell\nDESCRIPTION: Installs the AutoRest code generation tool globally using the Node Package Manager (npm). This is a prerequisite step for generating the Azure SDK client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_0\n\nLANGUAGE: ps\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Version Update Changes - Azure Key Vault Certificates 4.0.0b4\nDESCRIPTION: Details changes in version 4.0.0b4 including enum renames, return type changes, and property restructuring.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n- Renamed enums `JsonWebKeyCurveName` and `JsonWebKeyType`\n- Updated poller return types for create_certificate\n- Restructured `Certificate` type with new properties attribute\n- Renamed various methods and parameters\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Azure SDK Tools Package\nDESCRIPTION: Requirement specification line referencing local Azure SDK tools package using relative path for development purposes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/education/azure-mgmt-education/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Dependencies\nDESCRIPTION: Defines the required Python package dependencies including Azure core packages, identity management, event hub components, and utility libraries. Includes both local path references and version-specific dependencies.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\nazure-identity~=1.17.0\nazure-mgmt-eventhub<=10.1.0\nazure-mgmt-resource==20.0.0\naiohttp>=3.11.0\nwebsocket-client\n../azure-eventhub-checkpointstoreblob-aio\n../azure-eventhub-checkpointstoreblob\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies in a Requirements File - Plaintext\nDESCRIPTION: This snippet specifies the dependencies for development on the Azure SDK for Python project. It uses relative paths with the '-e' option for local editable installations and lists external packages with version specifiers. Required dependencies include core packages, identity components, SDK development tools, and the 'aiohttp' asynchronous HTTP client (version 3.0 or greater). The file is intended to be used with pip or similar tooling to set up Python environments, and all packages listed must be accessible in the specified relative locations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n-e ../../identity/azure-identity\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.1.0b2 Changes in Markdown\nDESCRIPTION: Lists new features, added operation groups, models, and enums for version 1.1.0b2 of the Azure DNS Resolver SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b2 (2024-10-21)\n\n### Features Added\n\n  - Client `DnsResolverManagementClient` added operation group `dns_resolver_policies`\n  - Client `DnsResolverManagementClient` added operation group `dns_security_rules`\n  - Client `DnsResolverManagementClient` added operation group `dns_resolver_policy_virtual_network_links`\n  - Client `DnsResolverManagementClient` added operation group `dns_resolver_domain_lists`\n  - Model `Resource` added property `system_data`\n  - Added enum `ActionType`\n  - Added enum `BlockResponseCode`\n  - Added model `DnsResolverDomainList`\n  - Added model `DnsResolverDomainListPatch`\n  - Added model `DnsResolverDomainListResult`\n  - Added model `DnsResolverPolicy`\n  - Added model `DnsResolverPolicyListResult`\n  - Added model `DnsResolverPolicyPatch`\n  - Added model `DnsResolverPolicyVirtualNetworkLink`\n  - Added model `DnsResolverPolicyVirtualNetworkLinkListResult`\n  - Added model `DnsResolverPolicyVirtualNetworkLinkPatch`\n  - Added model `DnsSecurityRule`\n  - Added model `DnsSecurityRuleAction`\n  - Added model `DnsSecurityRuleListResult`\n  - Added model `DnsSecurityRulePatch`\n  - Added enum `DnsSecurityRuleState`\n  - Added model `ErrorAdditionalInfo`\n  - Added model `ErrorDetail`\n  - Added model `ErrorResponse`\n  - Added model `DnsResolverDomainListsOperations`\n  - Added model `DnsResolverPoliciesOperations`\n  - Added model `DnsResolverPolicyVirtualNetworkLinksOperations`\n  - Added model `DnsSecurityRulesOperations`\n```\n\n----------------------------------------\n\nTITLE: Authenticating WebPubSubServiceClient with Endpoint and Key - Python\nDESCRIPTION: Demonstrates client authentication using explicit service endpoint and Azure access key credentials. Requires the azure-messaging-webpubsubservice and azure.core packages. 'endpoint' and 'hub' must be specified to target the correct Web PubSub instance; 'credential' should be an AzureKeyCredential wrapping your access key. Returns a client ready for publishing messages. This method bypasses the use of a connection string for scenarios where keys are managed directly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> from azure.core.credentials import AzureKeyCredential\n\n>>> service = WebPubSubServiceClient(endpoint='<endpoint>', hub='hub', credential=AzureKeyCredential(\"<access_key>\"))\n```\n\n----------------------------------------\n\nTITLE: Updating ci.yml for Artifact Generation\nDESCRIPTION: Example of how to update the ci.yml file to ensure the package is listed under Artifacts for release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/deprecation_process.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  parameters:\n    ...\n    Artifacts:\n    - name: azure-mypackage\n      safeName: azuremypackage\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release 1.0.0b1 in Markdown\nDESCRIPTION: Notes the initial release of the Azure DNS Resolver SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2022-02-21)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Simplified Exception Handling in Azure SDK for Python (v1.0.0b1)\nDESCRIPTION: Exception handling was simplified in version 1.0.0b1. The `CloudError` exception has been removed, and most service-related errors are now raised as `azure.core.exceptions.HttpResponseError`. This standardizes error handling across Azure SDK libraries that depend on `azure-core`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Old exception type (removed):\n# from msrestazure.azure_exceptions import CloudError\n\n# New primary exception type:\n# from azure.core.exceptions import HttpResponseError\n\ntry:\n    # SDK call\n    pass\nexcept HttpResponseError as e:\n    # Handle error\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest Generation Settings for Azure Service Bus SDK (YAML)\nDESCRIPTION: This YAML configuration block defines the settings for AutoRest when generating the Azure Service Bus Python SDK. It specifies the input OpenAPI specification URL, the output directory for the generated code, the target Python namespace, licensing information, and enables Python-specific generation using the 'msrest' models mode. It also ensures the output folder is cleared before generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/servicebus/data-plane/Microsoft.ServiceBus/stable/2021-05/servicebus.json\noutput-folder: ../azure/servicebus/management/_generated\nnamespace: azure.servicebus.management._generated\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nclear-output-folder: true\npython: true\nmodels-mode: msrest\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Entry\nDESCRIPTION: Documents the initial beta release version 1.0.0b1 and its changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/durabletask/azure-mgmt-durabletask/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b1 (2025-03-25)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Docker Image Build in Shell\nDESCRIPTION: This multi-line shell snippet sets three environment variables using export: 'REPOSITORY' (container registry server login address), 'IMAGE_NAME' (Docker image name), and 'PYTHON_VERSION' (Python version). Values are dynamically retrieved or statically set. This prepares the environment for building Docker images. Requires prior creation of the ACR and Azure CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/container_instances.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport REPOSITORY=$(az acr show -g $RESOURCE_GROUP -n $ACR_NAME --query loginServer -o tsv) \\\n  IMAGE_NAME=test-pod-identity \\\n  PYTHON_VERSION=3.10\n```\n\n----------------------------------------\n\nTITLE: Renaming 'conversion_status' Enum to 'asset_conversion_status' via AutoRest Directive\nDESCRIPTION: An AutoRest directive in YAML that targets the 'conversion_status' enum definition in the Swagger document. It changes the name of the generated enum to 'asset_conversion_status' in the Python code using the 'x-ms-enum.name' extension.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/swagger/AUTOREST.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n    from: swagger-document\n    where: '$.definitions.conversion_status'\n    transform: >\n        $[\"x-ms-enum\"].name = \"asset_conversion_status\";\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Test Resources Expiration\nDESCRIPTION: This PowerShell command updates the expiration time for Azure Key Vault test resources using the Update-TestResources.ps1 script.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-TestResources.ps1 keyvault\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 2.1.0b1 in Markdown\nDESCRIPTION: This snippet details the changes in version 2.1.0b1 of the Azure SDK for Python, including the addition of generated samples and dropping support for older Python versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0b1 (2022-12-29)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for v2023-06-01-preview\nDESCRIPTION: Configuration settings for the v2023-06-01-preview API version, specifying input files for machineLearningServices, registries, workspaceFeatures, mfe, and workspaceRP along with the output folder.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n$(tag) == 'v2023-06-01-preview'\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2023-06-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2023-06-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2023-06-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2023-06-01-preview/mfe.json\n  - Microsoft.MachineLearningServices/preview/2023-06-01-preview/workspaceRP.json\noutput-folder: $(python-sdks-folder)/v2023_06_01_preview\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Hub SDK Packages - Bash\nDESCRIPTION: This snippet demonstrates how to install the required Python packages for Azure Event Hub management using pip. The dependencies include 'azure-mgmt-eventhub' for managing Event Hub resources, and 'azure-identity' for handling authentication. Both commands should be run in a command-line shell. No input parameters beyond standard pip usage are required, and the output will be package installation logs. Python 3.8+ is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-mgmt-eventhub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-eventhub\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Updating Knowledge Base with azure-cognitiveservices-knowledge-qnamaker in Python\nDESCRIPTION: This snippet demonstrates how to update an existing knowledge base using the UpdateKbOperationDTO in the legacy azure-cognitiveservices-knowledge-qnamaker library. It includes authentication, updating the knowledge base, and waiting for the operation to complete.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom msrest.authentication import CognitiveServicesCredentials\nfrom azure.cognitiveservices.knowledge.qnamaker.models import UpdateKbOperationDTO, UpdateKbOperationDTOAdd, QnADTO\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credentials=CognitiveServicesCredentials(\"API key\")\n)\n\noperation = client.knowledgebase.update(\n    kb_id=\"<knowledgebase-id>\",\n    update_kb=UpdateKbOperationDTO(\n        add=UpdateKbOperationDTOAdd(\n            qna_list=[\n                QnADTO(\n                    questions=[\"questions\"],\n                    answer=\"answer\"\n                )\n            ]\n        )   \n    )\n)\nfor i in range(20):\n    if operation.operation_state in [\"NotStarted\", \"Running\"]:\n        print(\"Waiting for operation: {} to complete.\".format(operation.operation_id))\n        time.sleep(5)\n        operation = client.operations.get_details(operation_id=operation.operation_id)\n    else:\n        break\n\nif operation.operation_state != \"Succeeded\":\n    raise Exception(\"Operation {} failed to complete.\".format(operation.operation_id))\n\n# Get knowledge base ID from resourceLocation HTTP header\nknowledge_base_id = operation.resource_location.replace(\"/knowledgebases/\", \"\")\nprint(\"Created KB with ID: {}\".format(knowledge_base_id))\n```\n\n----------------------------------------\n\nTITLE: Authentication Code Migration Example Python\nDESCRIPTION: Example showing the migration from legacy credential system to new azure-identity based authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/powerbiembedded/azure-mgmt-powerbiembedded/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Python Dependencies\nDESCRIPTION: Specifies the required dependencies for Azure SDK Python development including core libraries, identity components, management tools and aiohttp for async HTTP functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/portalservices/azure-mgmt-portalservicescopilot/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\n../../core/azure-mgmt-core\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Container Registry - Shell\nDESCRIPTION: Creates an Azure Container Registry in a specified resource group and location using Azure CLI. The registry is required for storing Docker images of the Service Fabric applications. The command enables the admin account and sets SKU to 'basic'. The registry name must adhere to Azure constraints, such as avoiding uppercase letters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\naz acr create -g $RESOURCE_GROUP -n $ACR_NAME -l $LOCATION --admin-enabled --sku basic\n```\n\n----------------------------------------\n\nTITLE: Running the perfstress Command to List Available Tests\nDESCRIPTION: Commands to navigate to the performance test directory and run the perfstress utility to list all available performance tests for the Azure Document Translation service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-translation-document> cd tests/perfstress_tests/\n(env) ~/azure-ai-translation-document/tests/perfstress_tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Assigning Storage Permissions for Azure AI Studio\nDESCRIPTION: Shell command to assign Storage Blob Data Contributor role to a user for accessing Azure AI Studio's linked storage account. Requires subscription ID, resource group name, and user object ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naz role assignment create --role \"Storage Blob Data Contributor\" --scope /subscriptions/<mySubscriptionID>/resourceGroups/<myResourceGroupName> --assignee-principal-type User --assignee-object-id \"<user-id>\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Chaos Management Client with Azure Identity in Python\nDESCRIPTION: This Python snippet demonstrates how to authenticate the Chaos Management Client using Azure Active Directory credentials loaded from environment variables. Dependencies include 'azure.identity', 'azure.mgmt.chaos', and 'os'. It retrieves the subscription ID from the 'AZURE_SUBSCRIPTION_ID' environment variable and initializes the authenticated client. Inputs required are set environment variables for Azure credentials. Output is an authenticated ChaosManagementClient object ready for API operations. The code assumes prior installation of dependencies and proper Azure subscription setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/chaos/azure-mgmt-chaos/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.chaos import ChaosManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ChaosManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Conversations SDK using pip - bash\nDESCRIPTION: Installs the Azure Conversations client library for Python using pip. This step is prerequisite for all further development using CLU features in Python. Ensure Python 3.7 or later is present in the environment before running the command.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-language-conversations\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Members in Python\nDESCRIPTION: This snippet demonstrates the addition of new enum members to ClusterPrincipalRole and LanguageExtensionImageName in version 3.4.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n  - Enum `ClusterPrincipalRole` added member `ALL_DATABASES_MONITOR`\n  - Enum `LanguageExtensionImageName` added member `PYTHON3_11_7`\n  - Enum `LanguageExtensionImageName` added member `PYTHON3_11_7_DL`\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Version in Azure SDK for Python (v1.0.0b1)\nDESCRIPTION: In version 1.0.0b1, accessing the package version changed. Instead of importing a dedicated `version` module, the version should be retrieved using the standard `__version__` attribute on the imported package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Old (no longer works):\n# from azure.mgmt.authorization import version\n# print(version)\n\n# New:\n# import azure.mgmt.authorization\n# print(azure.mgmt.authorization.__version__)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release Version in Markdown\nDESCRIPTION: This snippet shows how to document a release version using Markdown formatting. It includes the version number and release date.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.20.0 (2025-03-07)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.0.0b1 in Markdown\nDESCRIPTION: This snippet documents the initial release of the Azure SDK for Python, version 1.0.0b1, for NGINX management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2022-06-13)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Members in Python\nDESCRIPTION: Updates to various enums in version 2.1.0b1, including new members for OsDiskCreateOption, StorageApplianceDetailedStatus, and VirtualMachineDeviceModelType.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nEnum `OsDiskCreateOption` added member `PERSISTENT`\nEnum `StorageApplianceDetailedStatus` added member `DEGRADED`\nEnum `VirtualMachineDeviceModelType` added member `T3`\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 10.0.0 in Markdown\nDESCRIPTION: Details the changes in version 10.0.0 of the Azure SDK for Python, including new features and breaking changes to various operations and models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/consumption/azure-mgmt-consumption/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 10.0.0 (2022-06-20)\n\n**Features**\n\n  - Added operation LotsOperations.list_by_customer\n\n**Breaking changes**\n\n  - Model BudgetFilter no longer has parameter not_property\n  - Operation ReservationRecommendationDetailsOperations.get has a new parameter resource_scope\n  - Operation ReservationRecommendationsOperations.list has a new parameter resource_scope\n  - Operation ReservationRecommendationsOperations.list no longer has parameter scope\n  - Operation ReservationsDetailsOperations.list has a new parameter resource_scope\n  - Operation ReservationsDetailsOperations.list no longer has parameter scope\n  - Operation ReservationsSummariesOperations.list has a new parameter resource_scope\n  - Operation ReservationsSummariesOperations.list no longer has parameter scope\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure Storage File Share SDK in Python\nDESCRIPTION: This snippet lists the required dependencies for the Azure Storage File Share SDK. It includes local SDK components like azure-core and azure-identity, as well as the azure-storage-blob package. The external dependency aiohttp is also specified with a minimum version requirement.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\n-e ../azure-storage-blob\naiohttp>=3.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Registry Admin User in Azure CLI\nDESCRIPTION: Command to enable the admin user for an Azure Container Registry, which provides username/password access for basic authentication to the registry.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file_2.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz acr update -n MyRegistry --admin-enabled true\n```\n\n----------------------------------------\n\nTITLE: Renaming Host Parameter with Autorest Directive (YAML)\nDESCRIPTION: Uses an Autorest directive to modify the input Swagger definition during code generation. This specific directive targets the 'x-ms-parameterized-host' parameters section and renames the parameter to 'endpoint'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndirective:\n  from: swagger-document\n  where: \"$.x-ms-parameterized-host.parameters\"\n  transform: >\n    $.name = \"endpoint\"\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.0.0b1\nDESCRIPTION: Initial beta release entry marking the first version of the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/postgresqlflexibleservers/azure-mgmt-postgresqlflexibleservers/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2024-08-27)\n\n### Other Changes\n\n  - Initial version\n```\n\n----------------------------------------\n\nTITLE: Referencing a Code Snippet in README for Azure SDK Python\nDESCRIPTION: This example shows how to reference a code snippet from a sample file in a README.md file. It uses special comment syntax to indicate the start and end of the snippet reference.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/code_snippets.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- SNIPPET:test_example_async.asyncio -->\n\n```python\nfrom azure.core.pipeline.transport import AsyncioRequestsTransport\n\nasync with AsyncPipeline(AsyncioRequestsTransport(), policies=policies) as pipeline:\n    response = await pipeline.run(request)\n```\n\n<!-- END SNIPPET -->\n```\n\n----------------------------------------\n\nTITLE: Running Monitor Exporter Performance Test\nDESCRIPTION: Example command to run the MonitorExporterPerfTest with specific parameters, including the number of spans and synchronous execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/tests/perfstress_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-opentelemetry-exporter> cd tests\n(env) ~/azure-monitor-opentelemetry-exporter/tests> perfstress MonitorExporterPerfTest --sync --num-spans=10\n```\n\n----------------------------------------\n\nTITLE: Complete Synchronous Implementation\nDESCRIPTION: Full example of creating and sending a request using synchronous client with error handling and JSON response processing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/send_request.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.example.service import ExampleClient\nfrom azure.core.rest import HttpRequest, HttpResponse\nfrom azure.core.exceptions import HttpResponseError\n\nclient = ExampleClient(\n    endpoint=\"https://example.org\",\n    credential=DefaultAzureCredential()\n)\n\nrequest = HttpRequest(\n    method=\"POST\",\n    url=\"/helloWorld\",\n    json={\"document\": \"Hello world!\"},\n    params={\"language\": \"en\"}\n)\n\nresponse = client.send_request(request)  # returns an azure.core.rest.HttpResponse\n\ntry:\n    response.raise_for_status()\n    json_response = response.json()\n    # Play with your response!\n    print(json_response[\"language\"])\nexcept HttpResponseError:\n    print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Version Import in Azure SDK for Python\nDESCRIPTION: Shows the change in how to access version information in Azure SDK modules, moving from importing a version module to using the __version__ attribute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Before:\nfrom azure.mgmt.web import version\nversion_string = version.VERSION\n\n# After:\nfrom azure.mgmt.web import __version__\nversion_string = __version__\n```\n\n----------------------------------------\n\nTITLE: Using LROPoller for Long Running Operations in Azure SDK\nDESCRIPTION: Example of the new return type for Long Running Operations, which now uses msrest.polling.LROPoller instead of msrestazure.azure_operation.AzureOperationPoller. This change affects how long-running operations are handled and their return values.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-mgmt-cognitiveservices/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom msrest.polling import LROPoller\n```\n\n----------------------------------------\n\nTITLE: Initializing ADLS Service Client from Connection String - Python\nDESCRIPTION: This snippet demonstrates creating a DataLakeServiceClient instance for Azure Data Lake Storage Gen2 using a connection string. It imports the required azure.storage.filedatalake module, requires the user to insert their Azure Storage account connection string, and handles errors during client initialization. Outputs are error messages upon exception. This client is used for subsequent ADLS file operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.storage.filedatalake import DataLakeServiceClient\\n\\nAZURE_STORAGE_CONNECTION_STRING = \"<your connection string>\"\\n\\ntry:\\n    adls_service_client = DataLakeServiceClient.from_connection_string(AZURE_STORAGE_CONNECTION_STRING)\\nexcept Exception as e:\\n    print(e)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies (requirements.txt format)\nDESCRIPTION: This configuration lists project dependencies, likely intended for use with pip. It includes editable installs (`-e`) for local development versions of `azure-sdk-tools` and `azure-mgmt-resource`, referencing relative paths. It also specifies standard dependencies on `azure-identity` (likely from a local path) and `aiohttp` (likely from PyPI). These packages provide essential tools, Azure authentication, resource management capabilities, and asynchronous HTTP support for the project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicenetworking/azure-mgmt-servicenetworking/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Azure Form Recognizer Package Versions Timeline\nDESCRIPTION: Detailed version history of azure-ai-formrecognizer package releases from June 2021 to December 2024, tracking the package evolution from version 3.1.0 to 3.3.3.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-ai-formrecognizer.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- 2024.12.01: azure-ai-formrecognizer-3.3.3\n- 2024.09.01: azure-ai-formrecognizer-3.3.3\n- 2024.06.01: azure-ai-formrecognizer-3.3.3\n- 2024.03.01: azure-ai-formrecognizer-3.3.2\n- 2023.12.01: azure-ai-formrecognizer-3.3.2\n- 2023.09.01: azure-ai-formrecognizer-3.3.0\n- 2023.06.01: azure-ai-formrecognizer-3.2.1\n- 2023.03.01: azure-ai-formrecognizer-3.2.0\n- 2022.12.01: azure-ai-formrecognizer-3.2.0\n- 2022.09.01: azure-ai-formrecognizer-3.1.2\n- 2022.06.01: azure-ai-formrecognizer-3.1.2\n- 2022.03.01: azure-ai-formrecognizer-3.1.2\n- 2021.12.01: azure-ai-formrecognizer-3.1.2\n- 2021.09.01: azure-ai-formrecognizer-3.1.2\n- 2021.06.01: azure-ai-formrecognizer-3.1.0\n```\n\n----------------------------------------\n\nTITLE: Listing Available Perf Tests Using Perfstress (Python SDK, Bash)\nDESCRIPTION: Lists all available performance tests after installing required dependencies and activating a Python virtual environment. Assumes the environment variable is activated and the perfstress tool from devtools_testutils is installed. No additional arguments will enumerate the discovered perf tests for the current module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(env) ~/azure-identity/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure WebSiteManagementClient with DefaultAzureCredential - Python\nDESCRIPTION: This code snippet demonstrates authenticating to Microsoft Azure using the DefaultAzureCredential from azure-identity and initializing the WebSiteManagementClient from azure-mgmt-web. It relies on the environment variables AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID for proper authentication setup. This snippet must be run in a Python 3.8+ environment, and creates an authenticated client object to interact with Azure Web App resources; it does not perform any web app operations itself.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.web import WebSiteManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WebSiteManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Converting KeyVaultSetting Value to Boolean\nDESCRIPTION: Added a getboolean method to KeyVaultSetting class for converting the setting's value to a boolean.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nsetting.getboolean()\n```\n\n----------------------------------------\n\nTITLE: Defining a Runtime-Checkable Protocol Interface in Python\nDESCRIPTION: Defines a structural protocol class using Python typing extensions, allowing duck typing via Protocol and runtime type checks with @runtime_checkable. Dependencies include typing_extensions, and the snippet showcases a method signature for OAuth token provisioning. Key parameters include 'scopes', 'claims', and 'tenant_id', and the expected output is an AccessToken instance; method internals are unspecified and illustrative.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Protocol, runtime_checkable\\n\\n@runtime_checkable\\nclass TokenCredential(Protocol):\\n    \\\"\\\"\\\"Protocol for classes able to provide OAuth tokens.\\\"\\\"\\\"\\n\\n    def get_token(\\n        self, *scopes: str, claims: Optional[str] = None, tenant_id: Optional[str] = None, **kwargs: Any\\n    ) -> AccessToken:\\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Notification Hubs Dependencies\nDESCRIPTION: Commands to install the required Azure Notification Hubs management package and Azure identity package using pip\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/notificationhubs/azure-mgmt-notificationhubs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-notificationhubs\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.1.0b1 Release in Markdown\nDESCRIPTION: Lists features added in the beta version 1.1.0b1, including updates to PoliciesOperations, FrontDoor, and FrontDoorProperties models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b1 (2022-11-22)\n\n### Features Added\n\n  - Added operation PoliciesOperations.begin_update\n  - Model FrontDoor has a new parameter extended_properties\n  - Model FrontDoorProperties has a new parameter extended_properties\n```\n\n----------------------------------------\n\nTITLE: Release History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version changes, featuring removal of Python 2.7 support and initial release details for Azure Purview Administration library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 1.0.0b1 (2021-09-29)\n\n- This is the initial release of the Azure Purview Administration library.\n- This package includes the operations of `azure-purview-account` that was previously released\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode via Requirements\nDESCRIPTION: This line, typically found in a requirements file (e.g., requirements.txt) or used directly with pip, specifies an editable installation. The '-e' flag instructs pip to install the package located at the relative path '../../../tools/azure-sdk-tools' in editable mode. This links the installation to the source code, allowing changes in the source to be immediately reflected without needing to reinstall. Requires pip and a valid package structure at the target path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/workloadmonitor/azure-mgmt-workloadmonitor/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Changelog Template Rules in Python\nDESCRIPTION: Python dictionary defining the templates used for generating changelog entries. Includes patterns for both feature additions and breaking changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/changelog_impl.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n## Features\n_ADD_OPERATION_GROUP = \"Added operation group {}\"\n_ADD_OPERATION = \"Added operation {}.{}\"\n_MODEL_PARAM_ADD = \"Model {} has a new parameter {}\"\n\n## Breaking Changes\n_REMOVE_OPERATION_GROUP = \"Removed operation group {}\"\n_REMOVE_OPERATION = \"Removed operation {}.{}\"\n_SIGNATURE_CHANGE = \"Operation {}.{} has a new signature\"\n_MODEL_SIGNATURE_CHANGE = \"Model {} has a new signature\"\n_MODEL_PARAM_DELETE = \"Model {} no longer has parameter {}\"\n_MODEL_PARAM_ADD_REQUIRED = \"Model {} has a new required parameter {}\"\n_MODEL_PARAM_CHANGE_REQUIRED = \"Parameter {} of model {} is now required\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Service Client Instances in Python\nDESCRIPTION: This snippet demonstrates how to create multiple instances of Azure service clients. It shows that creating a new client per operation is inefficient and should be avoided as it can lead to resource exhaustion.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# DO NOT DO THIS - creates a new client per operation\nimport uuid\nfrom azure.storage.blob import BlobServiceClient\n\ndef upload_data(data):\n    connection_string = \"DefaultEndpointsProtocol=https;AccountName=foo;AccountKey=foo;EndpointSuffix=core.windows.net\"\n    # This creates a new client connection each time this method is called\n    blob_service = BlobServiceClient.from_connection_string(connection_string)\n    container = blob_service.get_container_client(\"mycontainer\")\n    name = str(uuid.uuid4())\n    blob = container.get_blob_client(name)\n    blob.upload_blob(data)\n    return name\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure China Cloud using msrestazure\nDESCRIPTION: This snippet demonstrates how to use the msrestazure package to connect to Azure China Cloud. It uses the AZURE_CHINA_CLOUD predefined cloud definition and creates a ResourceManagementClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/multicloud.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom msrestazure.azure_cloud import AZURE_CHINA_CLOUD\nfrom msrestazure.azure_active_directory import UserPassCredentials\nfrom azure.mgmt.resource import ResourceManagementClient\n\ncredentials = UserPassCredentials(\n    login,\n    password,\n    cloud_environment=AZURE_CHINA_CLOUD\n)\nclient = ResourceManagementClient(\n    credentials,\n    subscription_id,\n    base_url=AZURE_CHINA_CLOUD.endpoints.resource_manager\n)\n```\n\n----------------------------------------\n\nTITLE: Azure Management Packages List - Latest Version\nDESCRIPTION: List of Azure management packages and their versions included in the latest release of Azure SDK for Python. Includes packages for managing various Azure services like compute, storage, networking etc.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apimanagement-3.0.0\n[...additional packages...]\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Subpackages with Sphinx toctree in reStructuredText\nDESCRIPTION: This reStructuredText directive uses Sphinx's `toctree` (Table of Contents tree) feature to create links to the documentation pages for the specified subpackages (`azure.core.pipeline.policies` and `azure.core.pipeline.transport`). This helps structure the documentation by providing navigation to related modules. It assumes corresponding documentation files exist for the listed subpackages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/doc/azure.core.pipeline.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   azure.core.pipeline.policies\n   azure.core.pipeline.transport\n```\n\n----------------------------------------\n\nTITLE: Converting a 3D Asset with Azure Remote Rendering in Python\nDESCRIPTION: This snippet demonstrates how to convert a 3D model (box.fbx) stored in Azure Blob Storage to a format compatible with Azure Remote Rendering. It creates a conversion request with unique ID, specifies input and output settings, and polls until the conversion completes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    conversion_id = str(uuid.uuid4()) # A randomly generated uuid is a good choice for a conversion_id.\n\n    input_settings = AssetConversionInputSettings(\n        storage_container_uri=\"<STORAGE CONTAINER URI>\",\n        relative_input_asset_path=\"box.fbx\",\n        blob_prefix=\"input/box\"\n    )\n    output_settings = AssetConversionOutputSettings(\n        storage_container_uri=\"<STORAGE CONTAINER URI>\",\n        blob_prefix=\"output/\"+conversion_id,\n        output_asset_filename=\"convertedBox.arrAsset\" #if no output_asset_filename <input asset filename>.arrAsset will be the name of the resulting converted asset\n    )\n    try:\n        conversion_poller = client.begin_asset_conversion(\n            conversion_id=conversion_id,\n            input_settings=input_settings,\n            output_settings=output_settings\n        )\n\n        print(\"Conversion with id:\", conversion_id, \"created. Waiting for completion.\")\n        conversion = conversion_poller.result()\n        print(\"conversion output:\", conversion.output.asset_uri)\n\n    except Exception as e:\n        print(\"Conversion failed\", e)\n```\n\n----------------------------------------\n\nTITLE: Documenting Unreleased Version 1.0.0b3 in Markdown\nDESCRIPTION: Placeholder sections for documenting features, breaking changes, bug fixes, and other changes in the upcoming 1.0.0b3 release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b3 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation with Sphinx automodule in reStructuredText\nDESCRIPTION: This reStructuredText directive uses Sphinx's `automodule` feature to automatically pull documentation from the specified Python module (`azure.core.pipeline`). The options `:members:`, `:undoc-members:`, and `:inherited-members:` instruct Sphinx to include documentation for all members, members without docstrings, and members inherited from base classes, respectively. It depends on Sphinx and the target Python module being available in the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/doc/azure.core.pipeline.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: azure.core.pipeline\n   :members:\n   :undoc-members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest via npm (PowerShell)\nDESCRIPTION: This command installs the Autorest tool globally using the Node Package Manager (npm). Autorest is required to generate Azure SDKs from OpenAPI (Swagger) specifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/swagger/SWAGGER.md#2025-04-23_snippet_0\n\nLANGUAGE: ps\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Azure Schema Registry in Python\nDESCRIPTION: This requirements file lists all necessary dependencies for the Azure Schema Registry component of the Azure SDK for Python. It includes local development tools, the Azure Identity package for authentication, aiohttp for async HTTP operations, and the main azure-schemaregistry package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../identity/azure-identity\naiohttp>=3.0\nazure-schemaregistry\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Changelog entries detailing features added, breaking changes, and other modifications across multiple SDK versions. The content outlines API changes, model updates, and operational modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/connectedvmware/azure-mgmt-connectedvmware/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0 (2023-10-23)\n\n### Features Added\n\n  - Added operation group VMInstanceGuestAgentsOperations\n  - Added operation group VirtualMachineInstancesOperations\n  - Added operation group VmInstanceHybridIdentityMetadataOperations\n  - Model Cluster has a new parameter total_cpu_m_hz\n  - Model Cluster has a new parameter total_memory_gb\n  - Model Cluster has a new parameter used_cpu_m_hz\n  - Model Cluster has a new parameter used_memory_gb\n  - Model GuestAgent has a new parameter private_link_scope_resource_id\n  - Model Host has a new parameter cpu_mhz\n  - Model Host has a new parameter memory_size_gb\n  - Model Host has a new parameter overall_cpu_usage_m_hz\n  - Model Host has a new parameter overall_memory_usage_gb\n  - Model ProxyResource has a new parameter system_data\n  - Model Resource has a new parameter system_data\n  - Model ResourcePool has a new parameter cpu_capacity_m_hz\n  - Model ResourcePool has a new parameter cpu_overall_usage_m_hz\n  - Model ResourcePool has a new parameter mem_capacity_gb\n  - Model ResourcePool has a new parameter mem_overall_usage_gb\n\n### Breaking Changes\n\n  - Client name is changed from `AzureArcVMwareManagementServiceAPI` to `ConnectedVMwareMgmtClient`\n  - Removed operation group AzureArcVMwareManagementServiceAPIOperationsMixin\n  - Removed operation group GuestAgentsOperations\n  - Removed operation group HybridIdentityMetadataOperations\n  - Removed operation group MachineExtensionsOperations\n  - Removed operation group VirtualMachinesOperations\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Cognitive Services API Keys - powershell\nDESCRIPTION: Uses Azure CLI to retrieve account API keys for a given Cognitive Services resource. Requires authentication to Azure and the name of the resource group and Cognitive Service instance. This allows the user to extract the endpoint and API key required for SDK authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\naz cognitiveservices account keys list --resource-group <resource-group-name> --name <resource-name>\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for Machine Learning Model Training\nDESCRIPTION: Selects specific data types, queries historical data for these types, and prepares the data for model training by expanding timestamp information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata_types = [\"ContainerLog\", \"AzureNetworkAnalytics_CL\", \"StorageBlobLogs\", \"AzureDiagnostics\", \"Perf\", \"AVSSyslog\"]\n\navailable_data_types = df[\"DataType\"].unique()\n\ndata_types = list(filter(lambda data_type: data_type in available_data_types, data_types))\n\nif data_types:\n    print(f\"Selected data type for analysis: {data_types}\")\nelse:\n    raise SystemExit(\"No datatypes found. Please select data types which have data\")\n\ndef get_selected_datatypes(data_types, start, end):\n    data_types_string = \",\".join([f\"'{data_type}'\" for data_type in data_types])\n    query = (\n        f\"let starttime = {start}d; \"\n        f\"let endtime = {end}d; \"\n        \"Usage | project TimeGenerated, DataType, Quantity \"\n        \"| where TimeGenerated between (ago(starttime)..ago(endtime)) \"\n        f\"| where DataType in ({data_types_string}) \"\n        \"| summarize ActualUsage=sum(Quantity) by TimeGenerated=bin(TimeGenerated, 1h), DataType\"\n    )\n    return query\n\nstart = 28\nend = 7\n\nquery = get_selected_datatypes(data_types, start, end)\nmy_data = query_logs_workspace(query)\ndisplay(my_data)\n\nif my_data.empty:\n    raise SystemExit(\"No data found for training. Please select data types which have data\")\n\ndisplay_graph(my_data, \"Selected Data Types - Historical Data Usage (3 weeks)\")\n\nmy_data['Year'] = pd.DatetimeIndex(my_data['TimeGenerated']).year\nmy_data['Month'] = pd.DatetimeIndex(my_data['TimeGenerated']).month\nmy_data['Day'] = pd.DatetimeIndex(my_data['TimeGenerated']).day\nmy_data['Hour'] = pd.DatetimeIndex(my_data['TimeGenerated']).hour\n\nY = my_data['ActualUsage']\nX = my_data[['DataType', 'Year', 'Month', 'Day', 'Hour']]\n\ndisplay(X)\n```\n\n----------------------------------------\n\nTITLE: Using Default+Provisioner Parameter Set for Resource Deletion in PowerShell\nDESCRIPTION: This syntax shows the Default+Provisioner parameter set for the Remove-TestResources.ps1 script, which requires BaseName, TenantId, and ProvisionerApplicationId for service principal authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 -BaseName <String> -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationSecret <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Building Package Configuration\nDESCRIPTION: Command to build or update package configuration for Azure management packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/mgmt_release.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m packaging_tools --build-conf azure-mgmt-web\n```\n\n----------------------------------------\n\nTITLE: Simulating Direct Adversarial Attacks with Azure SDK - Python\nDESCRIPTION: This Python snippet demonstrates instantiating a DirectAttackSimulator with Azure credentials and running it asynchronously with customizable scenario parameters. Dependencies include the Azure AI SDK, DirectAttackSimulator class, and authentication via DefaultAzureCredential. Key parameters are azure_ai_project for environment configuration, credential for authentication, scenario and target for simulation, and randomize_order to control the sequence of prompts. The output is a list of generated adversarial simulation results.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadversarial_simulator = DirectAttackSimulator(azure_ai_project=azure_ai_project, credential=DefaultAzureCredential())\\noutputs = asyncio.run(\\n    adversarial_simulator(\\n        scenario=scenario,\\n        target=callback,\\n        randomize_order=True\\n    )\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Modeler Settings\nDESCRIPTION: Additional configuration for the modelerfour component enabling lenient model deduplication\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmodelerfour:\n  lenient-model-deduplication: true\n```\n\n----------------------------------------\n\nTITLE: Running DownloadBinaryDataTest with Custom Options Using perfstress - CMD\nDESCRIPTION: This example shows how to run the DownloadBinaryDataTest perf test with several customized command line options. It uses Entra ID authentication, the requests transport, increases the request size to 20480 bytes, and runs two parallel test instances. Values for --use-entra-id, --transport, --size, and --parallel are provided explicitly. The test command should be executed in the context of an activated Python virtual environment with dependencies installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/tests/perf_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-core> perfstress DownloadBinaryDataTest --use-entra-id --transport requests --size=20480 --parallel=2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure AI Projects SDK and Dependencies in Bash\nDESCRIPTION: This code snippet shows the command to install the Azure AI Projects SDK and its dependencies using pip. It includes OpenTelemetry for tracing and the Azure SDK tracing plugin.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry\npip install azure-ai-projects azure-identity opentelemetry-sdk azure-core-tracing-opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Schema Registry Package using Bash\nDESCRIPTION: Demonstrates how to install the `azure-schemaregistry` package using the `pip` command. This is the primary package needed for interacting with the Azure Schema Registry service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install azure-schemaregistry\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Tables in azure-cosmosdb-table\nDESCRIPTION: Demonstrates how to create and delete tables using azure-cosmosdb-table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmosdb.table import TableService\nclient = TableService(...)\ntable_name = \"tableName\"\n# create_table returns True if a new table was created, False if the table already exists\ncreated = client.create_table(table_name)\n\n# Delete\ntable_name = \"deleteTableName\"\n# delete_table returns True if a table was deleted, False if the table does not exist\nclient.delete_table(table_name)\n```\n\n----------------------------------------\n\nTITLE: Tracing Function Call Steps and Deltas During Threaded Tool Invocation - JSON\nDESCRIPTION: This snippet details event-based thread run steps and progress deltas, representing the creation and evolution of a tool function call (send_email) in a thread. Each object documents the status of an invocation step (in_progress, created, delta arguments), being crucial for real-time monitoring, partial updates, and debugging in agent-driven workflows. Input payloads such as arguments or output may initially be empty, being filled as the call progresses. No dependencies other than conforming to the schema are required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/fetch_current_datetime_and_weather_stream_response.txt#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"step_02\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1735945052,\n  \"run_id\": \"run_01\",\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"type\": \"tool_calls\",\n  \"status\": \"in_progress\",\n  \"cancelled_at\": null,\n  \"completed_at\": null,\n  \"expires_at\": 1735945641,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\n    \"type\": \"tool_calls\",\n    \"tool_calls\": []\n  },\n  \"usage\": null\n}\n{\n  \"id\": \"step_02\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\n    \"step_details\": {\n      \"type\": \"tool_calls\",\n      \"tool_calls\": [\n        {\n          \"index\": 0, \n          \"id\": \"call_03\",\n          \"type\": \"function\",\n          \"function\": {\"name\": \"send_email\", \"arguments\": \"\", \"output\": null}\n        }\n      ]\n    }\n  }\n}\n{\n  \"id\": \"step_02\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\n    \"step_details\": {\n      \"type\": \"tool_calls\",\n      \"tool_calls\": [\n        {\n          \"index\": 0, \"type\": \"function\", \"function\": {\"arguments\": \"{\\n\"}\n        }\n      ]\n    }\n  }\n}\n{\n  \"id\": \"step_02\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\n    \"step_details\": {\n      \"type\": \"tool_calls\",\n      \"tool_calls\": [\n        {\n          \"index\": 0, \"type\": \"function\", \"function\": {\"arguments\": \" \"}\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting JSON Message to Hub - Python\nDESCRIPTION: Sends a JSON-formatted broadcast message to all clients connected to the specified hub. Requires a WebPubSubServiceClient instance; 'send_to_all' is used for publishing. The 'message' parameter accepts a Python dictionary, which is serialized as JSON; modify keys/values for your payload. Output: all clients in the hub receive the message as a JSON text. Only works if clients are listening on the designated hub.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n\n>>> service = WebPubSubServiceClient.from_connection_string('<connection_string>', hub='hub1')\n>>> service.send_to_all(message = {\n        'from': 'user1',\n        'data': 'Hello world'\n    })\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for AmqpAnnotatedMessage Class using Sphinx reStructuredText\nDESCRIPTION: This reStructuredText directive uses Sphinx's `autoclass` feature to generate documentation for the `azure.eventhub.amqp.AmqpAnnotatedMessage` class. It includes documentation for all members (`:members:`), undocumented members (`:undoc-members:`), and inherited members (`:inherited-members:`). Requires Sphinx and the `azure-eventhub` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.amqp.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.amqp.AmqpAnnotatedMessage\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Dependency for azure-sdk-tools (Python Requirements)\nDESCRIPTION: This line in a requirements file indicates an editable dependency on the `azure-sdk-tools` package found at the relative path `../../../tools/azure-sdk-tools`. Using `-e` ensures changes in the source directory are immediately reflected in the installed package, common in development environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appcontainers/azure-mgmt-appcontainers/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Generating SDK using Autorest from Swagger Definition in PowerShell\nDESCRIPTION: This PowerShell sequence changes the current directory to the one containing the Swagger definition (`<swagger-folder>`) and then runs the `autorest` command on the `SWAGGER.md` file to generate the SDK based on the configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_1\n\nLANGUAGE: ps\nCODE:\n```\ncd <swagger-folder>\nautorest SWAGGER.md\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Path Dependency for Azure SDK Tools in Python\nDESCRIPTION: This line specifies a local path dependency for Azure SDK tools, using the -e flag to indicate an editable install from a local directory. The path '../../../tools/azure-sdk-tools' suggests this is part of a larger Azure SDK project structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-language-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Executing Specific Azure Key Vault Certificate Performance Test\nDESCRIPTION: Shows an example of running a specific performance test (GetCertificateTest) using the perfstress command-line tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-keyvault-certificates/tests> perfstress GetCertificateTest\n```\n\n----------------------------------------\n\nTITLE: Deidentifying a String using Python\nDESCRIPTION: This example shows how to perform a basic deidentification operation on a given string. It creates a `DeidentificationContent` object containing the input text and then calls the `deidentify` method of the previously initialized `DeidentificationClient`. The result, a `DeidentificationResult` object containing the processed text, is then printed along with the original input. Requires the `DeidentificationContent` and `DeidentificationResult` classes from the `azure.health.deidentification` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-health-deidentification/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    body = DeidentificationContent(input_text=\"Hello, my name is John Smith.\")\n\n    result: DeidentificationResult = client.deidentify(body)\n    \n    print(f'Original Text:     \"{body.input_text}\"')\n    print(f'Deidentified Text: \"{result.output_text}\"')\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Plain Text Message to Hub - Python\nDESCRIPTION: Shows how to broadcast a plain-text message using the send_to_all method of WebPubSubServiceClient. Requires client initialization. The 'message' is a simple string, and 'content_type' must be set to 'text/plain' to ensure the correct format is delivered. Hub clients receive the raw text as-is. This call is synchronous and expects no return except error handling.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> service = WebPubSubServiceClient.from_connection_string('<connection_string>', hub='hub1')\n>>> service.send_to_all(message = 'Hello world', content_type='text/plain')\n```\n\n----------------------------------------\n\nTITLE: Redeploying Service Fabric Applications for Python 3.9\nDESCRIPTION: Commands to redeploy the Service Fabric applications using the updated Docker images with Python 3.9.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_23\n\nLANGUAGE: Bash\nCODE:\n```\naz deployment group create -g $RESOURCE_GROUP -f arm-templates\\sfmitestsystem.template.json -p arm-templates\\sfmitestsystem.parameters.json\naz deployment group create -g $RESOURCE_GROUP -f arm-templates\\sfmitestuser.template.json -p arm-templates\\sfmitestuser.parameters.json\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Web Apps Management SDK and Identity Package using pip - Bash\nDESCRIPTION: This snippet demonstrates how to install the required Python packages, azure-mgmt-web and azure-identity, using the pip package manager. These packages are necessary to interact with Microsoft Azure Web Apps and to handle authentication via Azure Active Directory, respectively. The commands must be executed in a shell environment with Python 3.8+ installed, and they do not require any input or output beyond package installation status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-web\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a dependency on Azure SDK tools, likely used in a requirements file for a Python project. It references the tools directory relative to the current location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/check_change_log/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Initializing Compute Management Client with Legacy API Version\nDESCRIPTION: Example showing how to initialize the Compute Management Client with a specific legacy API version to maintain v1.0.0 behavior.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nComputeManagementClient(credentials, subscription_id, api_version=\"2016-04-30-preview\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SQL Virtual Machine Management SDK with pip (Bash)\nDESCRIPTION: This snippet provides pip commands to install the Azure SQL Virtual Machine Management SDK and its identity dependency in Python 3.7+ environments. Both packages are prerequisites for programmatic management of Azure SQL Virtual Machines via Python. The 'azure-mgmt-sqlvirtualmachine' package provides client operations, while 'azure-identity' enables authentication with Azure Active Directory. No parameters are required; simply run these commands in a terminal to install.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sqlvirtualmachine/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-sqlvirtualmachine\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Initializing the DeidentificationClient in Python\nDESCRIPTION: This snippet demonstrates how to create an instance of the `DeidentificationClient`. It retrieves the service endpoint URL from the `AZURE_HEALTH_DEIDENTIFICATION_ENDPOINT` environment variable, removes the 'https://' prefix (as required by the client constructor shown), and initializes the client using this endpoint and `DefaultAzureCredential` for authentication. Dependencies include the `os` module and the `azure.identity.DefaultAzureCredential` and `azure.health.deidentification.DeidentificationClient` classes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-health-deidentification/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    endpoint = os.environ[\"AZURE_HEALTH_DEIDENTIFICATION_ENDPOINT\"]\n    endpoint = endpoint.replace(\"https://\", \"\")\n    print(endpoint)\n    # example: fuf4h4bxg5b0d0dr.api.cac001.deid.azure.com\n\n    credential = DefaultAzureCredential()\n\n    client = DeidentificationClient(endpoint, DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Binary Message to Hub - Python\nDESCRIPTION: Broadcasts a binary message to all hub connections using the send_to_all method. Requires import of 'io' for constructing a binary stream. The 'message' argument is set as an io.StringIO instance, and 'content_type' is 'application/octet-stream'. All connected clients receive the message as binary data. Useful for sending payloads that aren't valid plain text or JSON.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import io\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> service = WebPubSubServiceClient.from_connection_string('<connection_string>', hub='hub')\n>>> service.send_to_all(message=io.StringIO('Hello World'), content_type='application/octet-stream')\n```\n\n----------------------------------------\n\nTITLE: Complete setup.py Example for Azure Package\nDESCRIPTION: A full example of a setup.py file for an Azure package, including package metadata, dependencies, and configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/packaging.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n\n#-------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n#--------------------------------------------------------------------------\n\nimport re\nimport os.path\nfrom io import open\nfrom setuptools import find_packages, setup\n\n# Change the PACKAGE_NAME only to change folder and different name\nPACKAGE_NAME = \"azure-keyvault\"\nPACKAGE_PPRINT_NAME = \"KeyVault\"\n\n# a-b-c => a/b/c\npackage_folder_path = PACKAGE_NAME.replace('-', '/')\n# a-b-c => a.b.c\nnamespace_name = PACKAGE_NAME.replace('-', '.')\n\n# Version extraction inspired from 'requests'\nwith open(os.path.join(package_folder_path, 'version.py'), 'r') as fd:\n    version = re.search(r'^VERSION\\s*=\\s*[\\'\"](.*?)[\\'\"]',\n                        fd.read(), re.MULTILINE).group(1)\n\nif not version:\n    raise RuntimeError('Cannot find version information')\n\nwith open('README.rst', encoding='utf-8') as f:\n    readme = f.read()\nwith open('HISTORY.rst', encoding='utf-8') as f:\n    history = f.read()\n\nsetup(\n    name=PACKAGE_NAME,\n    version=version,\n    description='Microsoft Azure {} Client Library for Python'.format(PACKAGE_PPRINT_NAME),\n    long_description=readme + '\\n\\n' + history,\n    license='MIT License',\n    author='Microsoft Corporation',\n    author_email='azpysdkhelp@microsoft.com',\n    url='https://github.com/Azure/azure-sdk-for-python',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'License :: OSI Approved :: MIT License',\n    ],\n    python_requires=\">=3.8\",\n    zip_safe=False,\n    packages=find_packages(exclude=[\n        'tests',\n        # Exclude packages that will be covered by PEP420 or nspkg\n        'azure',\n    ]),\n    install_requires=[\n        'msrest>=0.5.0',\n        'msrestazure>=0.4.32,<2.0.0',\n        'azure-common~=1.1',\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Chatting with Context using KnowledgeBaseAnswerContext (New QnA SDK) in Python\nDESCRIPTION: Shows how to perform a contextual query (chat) using the modern `QuestionAnsweringClient` by providing follow-up context. It uses the `answer_context` parameter with a `KnowledgeBaseAnswerContext` object containing the `previous_qna_id`. Requires the question, project name, and deployment name.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\nfrom azure.ai.language.questionanswering.models import KnowledgeBaseAnswerContext\n\nclient = QuestionAnsweringClient(endpoint=endpoint, credential=credential)\n\nresponse = client.get_answers(\n    question=\"How long should my Surface battery last?\",\n    project_name=\"<my-qna-project-name>\",\n    deployment_name=\"<my-qna-deployment-name>\",\n    answer_context=KnowledgeBaseAnswerContext(\n        previous_qna_id=1\n    )\n)\n\nbest_answers = [a for a in response.answers if a.confidence_score > 0.9]\n```\n```\n\n----------------------------------------\n\nTITLE: Example Azure Attestation Policy for SGX Enclave\nDESCRIPTION: Provides a sample attestation policy document illustrating the structure for SGX enclaves. It defines 'authorizationrules' that check enclave properties (debuggable status, product ID, SVN, MRSIGNER) to permit token issuance, and 'issuancerules' that specify claims to be included in the issued attestation token based on enclave attributes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nversion= 1.0;\nauthorizationrules\n{\n    [ type==\"x-ms-sgx-is-debuggable\", value==false ] &&\n    [ type==\"x-ms-sgx-product-id\", value==<product-id> ] &&\n    [ type==\"x-ms-sgx-svn\", value>= 0 ] &&\n    [ type==\"x-ms-sgx-mrsigner\", value==\"<mrsigner>\"]\n        => permit();\n};\nissuancerules {\n    c:[type==\"x-ms-sgx-mrsigner\"] => issue(type=\"<custom-name>\", value=c.value);\n};\n```\n\n----------------------------------------\n\nTITLE: Including Local Package Dependencies with pip in Python\nDESCRIPTION: Specifies a local editable Python package dependency for development using pip requirements. The '-e' flag marks a package as editable, allowing local changes to take effect immediately. This is typically included in requirements files to facilitate development workflows that depend on local tool packages, such as the Azure SDK tools. No external network dependencies are required to install the referenced package, but the specified path must be valid on the local filesystem.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sqlvirtualmachine/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Release History Markdown Documentation\nDESCRIPTION: Comprehensive changelog documenting feature additions, breaking changes, and updates across multiple versions of the Azure SDK for Python. Includes detailed tracking of model changes, new operations, parameter updates and deprecations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-avs/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 9.0.0 (2024-09-22)\n\n### Features Added\n\n  - Client `AVSClient` added operation group `iscsi_paths`\n  - Model `CloudLink` added property `provisioning_state`\n  - Model `Cluster` added property `vsan_datastore_name`\n  - Model `ClusterUpdate` added property `sku`\n  - Model `Datastore` added property `elastic_san_volume`\n  - Model `Endpoints` added property `nsxt_manager_ip`\n  - Model `Endpoints` added property `vcenter_ip`\n  - Model `Endpoints` added property `hcx_cloud_manager_ip`\n  - Model `HcxEnterpriseSite` added property `provisioning_state`\n  - Model `ManagementCluster` added parameter `vsan_datastore_name` in method `__init__`\n  - Model `Operation` added property `action_type`\n  - Model `PrivateCloud` added property `virtual_network_id`\n  - Model `PrivateCloud` added property `dns_zone_type`\n  - Model `PrivateCloudUpdate` added property `sku`\n  - Model `PrivateCloudUpdate` added property `dns_zone_type`\n  - Model `Resource` added property `system_data`\n  - Model `ScriptCmdlet` added property `provisioning_state`\n  - Model `ScriptCmdlet` added property `audience`\n  - Model `ScriptPackage` added property `provisioning_state`\n  - Model `Sku` added property `tier`\n  - Model `Sku` added property `size`\n  - Model `Sku` added property `family`\n  - Model `Sku` added property `capacity`\n  - Model `VirtualMachine` added property `provisioning_state`\n  - Model `WorkloadNetworkGateway` added property `provisioning_state`\n  - Model `WorkloadNetworkVirtualMachine` added property `provisioning_state`\n  - Added enum `ActionType`\n  - Added enum `CloudLinkProvisioningState`\n  - Added enum `CreatedByType`\n  - Added enum `DnsZoneType`\n  - Added model `ElasticSanVolume`\n  - Added enum `HcxEnterpriseSiteProvisioningState`\n  - Added model `IscsiPath`\n  - Added model `IscsiPathListResult`\n  - Added enum `IscsiPathProvisioningState`\n  - Added model `OperationListResult`\n  - Added enum `Origin`\n  - Added enum `ScriptCmdletAudience`\n  - Added enum `ScriptCmdletProvisioningState`\n  - Added enum `ScriptPackageProvisioningState`\n  - Added enum `SkuTier`\n  - Added model `SystemData`\n  - Added enum `VirtualMachineProvisioningState`\n  - Added enum `WorkloadNetworkProvisioningState`\n  - Added model `IscsiPathsOperations`\n```\n\n----------------------------------------\n\nTITLE: Change Parameter Types - YAML Directives\nDESCRIPTION: Transforms parameter schema references to '#/definitions/Anything' for multiple API operations including updateHook, listAlerts, updateDetectionConfiguration and others\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-operation: updateHook\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: updateDetectionConfiguration\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listAlerts\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listMetricSeriesData\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listMetricDimensionValues\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listMetricSeriesDefinitions\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: updateAlertConfiguration\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: updateDatasourceCredential\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: updateDataFeed\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listAnomalyDimensionValues\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: getAnomaliesByAnomalyDetectionConfiguration\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: getIncidentsByAnomalyDetectionConfiguration\n    transform: >\n      $[\"parameters\"][2][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listMetricEnrichedSeriesData\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listMetricEnrichmentStatus\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listFeedback\n    transform: >\n      $[\"parameters\"][2][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: refreshDataFeedIngestion\n    transform: >\n      $[\"parameters\"][1][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n  - where-operation: listDataFeedIngestionStatus\n    transform: >\n      $[\"parameters\"][3][\"schema\"][\"$ref\"] = \"#/definitions/Anything\";\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Key Types\nDESCRIPTION: Examples of creating EC and RSA keys with simplified parameter structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nkey_client.create_ec_key(name)\nkey_client.create_rsa_key(name)\n```\n\n----------------------------------------\n\nTITLE: Complete Example with Asynchronous Client\nDESCRIPTION: This snippet provides a complete example of using an asynchronous ExampleClient to send a request and handle the response.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/request_builders.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.example.aio import ExampleClient\nfrom azure.example.rest import build_analyze_text_request\nfrom azure.core.exceptions import HttpResponseError\n\nrequest = build_analyze_text_request(\n    json={\"document\": \"Hello world!\"},\n    language=\"en\",\n)\n\nwith DefaultAzureCredential() as credential:\n    with ExampleClient(endpoint=\"https://example.org\", credential=credential) as client:\n        response = await client.send_request(request)\n\n        try:\n            response.raise_for_status()\n            await response.load_body()\n            json_response = response.json()\n            # Play with your response!\n        except HttpResponseError:\n            print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Key Vault with Azure CLI - Shell\nDESCRIPTION: This command creates a new Azure Key Vault within a specified resource group. It requires a unique vault name conforming to Azure's naming constraints. Dependencies: Azure CLI, proper Azure role permissions, and pre-existing resource group. Parameters: RESOURCE_GROUP (the group name), KEY_VAULT_NAME (the vault name). Outputs Key Vault provisioning details via standard output.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\naz keyvault create -g $RESOURCE_GROUP -n $KEY_VAULT_NAME --sku standard\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure SDK Versions - pip - Shell\nDESCRIPTION: This snippet demonstrates how to install explicit versions of azure-core and azure-storage-blob Python packages using pip. It should be used when downgrading or working with dependencies that require a specific major or minor version of azure-core in sync with azure-storage-blob. Key parameters are the exact versions to install. The command must be run in a terminal or shell with pip available, and requires network access to the Python Package Index. Outputs will be the installed versions of the specified packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\npip install azure-core==1.0.0b1 azure-storage-blob==12.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Recovery Services Site Recovery Management SDK and Dependencies in Bash\nDESCRIPTION: Installs the core azure-mgmt-recoveryservicessiterecovery package and the azure-identity package needed for authentication using pip. Users must have Python 3.9+ and pip installed. These commands set up the base dependencies for further SDK use; no input parameters are required. Output is standard package installation logs or errors if prerequisites are missing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicessiterecovery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-recoveryservicessiterecovery\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Available Performance Tests\nDESCRIPTION: Command to display all available performance tests using the perfstress tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventhub> perfstress\n```\n\n----------------------------------------\n\nTITLE: Authenticating WebPubSubServiceClient with Azure Active Directory - Python\nDESCRIPTION: Illustrates authenticating the WebPubSubServiceClient using Azure Active Directory via DefaultAzureCredential. Requires azure-messaging-webpubsubservice and azure-identity packages. 'endpoint' and 'hub' define connection targets, and credential uses Azure AD for secure authentication. This approach is appropriate when AAD resource authentication is enabled. Supports all credential types in DefaultAzureCredential for different environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> from azure.identity import DefaultAzureCredential\n>>> service = WebPubSubServiceClient(endpoint='<endpoint>', hub='hub', credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies with Editable Installs\nDESCRIPTION: This snippet lists Python package dependencies, typically found in a requirements file. The '-e' flag indicates editable installs, meaning the project directly uses the source code from the specified relative paths ('../../../tools/azure-sdk-tools', '../../resources/azure-mgmt-resource'), which is common during development of the packages themselves. It also specifies a direct dependency on the 'aiohttp' library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/azurestackhci/azure-mgmt-azurestackhci/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Group Commands in Azure CLI\nDESCRIPTION: Example of how commands are defined in a command group for resource groups, showing different command types including delete, show, exists, list, create, export, update, and wait commands.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/find_sdk/find_sdk_in_cli_command.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith self.command_group('group', resource_group_sdk, resource_type=ResourceType.MGMT_RESOURCE_RESOURCES) as g:\n    g.command('delete', 'begin_delete', supports_no_wait=True, confirmation=True)\n    g.show_command('show', 'get')\n    g.command('exists', 'check_existence')\n    g.custom_command('list', 'list_resource_groups', table_transformer=transform_resource_group_list)\n    g.custom_command('create', 'create_resource_group')\n    g.custom_command('export', 'export_group_as_template')\n    g.generic_update_command('update', custom_func_name='update_resource_group', custom_func_type=resource_custom)\n    g.wait_command('wait')\n```\n\n----------------------------------------\n\nTITLE: Applying Generics and TypeVar in Python Functions\nDESCRIPTION: Demonstrates the use of TypeVar and generics to constrain function return and parameter types, ensuring static type safety. Includes an anti-pattern with Sequence[Any] and a correct generic pattern with TypeVar. Dependencies are typing.TypeVar, typing.Sequence, and typing.Any. Input is a sequence of items, and output matches the type variable, ensuring type affinity between inputs and outputs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypeVar, Sequence, Any\\n\\n# No:\\ndef choose(items: Sequence[Any]) -> Any:\\n    ...\\n\\n# Yes:\\nT = TypeVar(\\\"T\\\")\\n\\ndef choose(items: Sequence[T]) -> T:\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Raw Autorest Command for Non-ARM Swagger\nDESCRIPTION: Basic Autorest command for generating Python code from a non-ARM Swagger specification. Includes the add-credentials option for authentication support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generation.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nautorest --version=latest --python --payload-flattening-threshold=2 --add-credentials --input-file=myswagger.json\n```\n\n----------------------------------------\n\nTITLE: Authenticating WebPubSubServiceClient with Connection String - Python\nDESCRIPTION: Shows how to initialize the WebPubSubServiceClient using a connection string and specifying a hub name. Requires the azure-messaging-webpubsubservice package. Parameter 'connection_string' should be replaced by a valid Azure Web PubSub connection string; 'hub' specifies the logical hub to use. Returns a client instance for subsequent messaging operations. No authentication mechanisms other than the connection string are required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n\n>>> service = WebPubSubServiceClient.from_connection_string(connection_string='<connection_string>', hub='hub')\n```\n\n----------------------------------------\n\nTITLE: Sample Output of FunctionTool Definition - JSON\nDESCRIPTION: Shows the JSON schema output for a function tool definition as generated by the FunctionTool utility. Lists type, function name, description, input parameters with types and descriptions, and required fields. This output is useful for verifying schema conformance, ensuring that the agent can interpret and call the function correctly.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/FunctionTool.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"fetch_weather\",\n            \"description\": \"Fetches the weather information for the specified location.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The location to fetch weather for.\"\n                    }\n                },\n                \"required\": [\n                    \"location\"\n                ]\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Azure AI Vision Packages for Python (Conda) - Version 2025.03.01\nDESCRIPTION: This snippet lists the packages included in the 2025.03.01 version of the Azure AI Vision client library for Python, specifically for conda environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-ai-vision.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2025.03.01\n\n### Packages included\n\n- azure-ai-vision-imageanalysis-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.1.0b1 Changes in Markdown\nDESCRIPTION: Lists changes for version 1.1.0b1, including the addition of generated samples and dropping support for older Python versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0b1 (2022-12-27)\n\n### Other Changes\n\n  - Added generated samples in github repo\n  - Drop support for python<3.7.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required Python packages and their specific versions for the Azure SDK for Python project. It includes dependencies for CI tools, azure-sdk-tools, and local development. The file ensures consistent package versions across different environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/regression_tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# requirements leveraged by ci tools\nsetuptools==74.1.3\nvirtualenv==20.23.0\nwheel==0.43.0\nJinja2==3.1.2\npackaging==23.1\ntox==4.5.0\npathlib2==2.3.5\ndoc-warden==0.7.2\nbeautifulsoup4==4.9.1\npkginfo==1.5.0.1\npip==20.3.3\ntyping-extensions<=4.6.3\n\n# locking packages defined as deps from azure-sdk-tools\npytoml==0.1.21\njson-delta==2.0\nConfigArgParse==1.7\nsix==1.14.0\npyyaml==5.4.1\npytest==7.3.1\npytest-cov==4.0.0\ncoverage==7.2.5\n\n# local dev packages\n./tools/azure-sdk-tools[build]\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Service Fabric Managed Clusters Client - Python\nDESCRIPTION: This Python snippet initializes the ServiceFabricManagedClustersManagementClient with Azure Active Directory credentials obtained from environment variables. It uses DefaultAzureCredential from the 'azure-identity' package, and retrieves the Azure subscription ID from the 'AZURE_SUBSCRIPTION_ID' environment variable. Required dependencies are 'azure-identity', 'azure-mgmt-servicefabricmanagedclusters', and Python 3.8+. The client is then ready for further SDK operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicefabricmanagedclusters/azure-mgmt-servicefabricmanagedclusters/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicefabricmanagedclusters import ServiceFabricManagedClustersManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceFabricManagedClustersManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Looking up Dictionary Entries between English and Spanish with Azure Translator\nDESCRIPTION: Shows how to use the Azure Translator Text API to look up dictionary entries for a word in the source language (English) and get equivalent words in the target language (Spanish). The response includes translations with confidence scores.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from_language = \"en\"\n    to_language = \"es\"\n    input_text_elements = [\"fly\"]\n\n    response = text_translator.lookup_dictionary_entries(\n        body=input_text_elements, from_language=from_language, to_language=to_language\n    )\n    dictionary_entry = response[0] if response else None\n\n    if dictionary_entry:\n        print(f\"For the given input {len(dictionary_entry.translations)} entries were found in the dictionary.\")\n        print(\n            f\"First entry: '{dictionary_entry.translations[0].display_target}', confidence: {dictionary_entry.translations[0].confidence}.\"\n        )\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n    raise\n```\n\n----------------------------------------\n\nTITLE: KeyClient Random Bytes Example\nDESCRIPTION: Shows the breaking change in get_random_bytes method return type from direct bytes to RandomBytes model\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Before\nbytes_data = key_client.get_random_bytes(number_of_bytes)\n\n# After\nrandom_bytes = key_client.get_random_bytes(number_of_bytes)\nbytes_data = random_bytes.value\n```\n\n----------------------------------------\n\nTITLE: Provisioner Syntax for New-TestResources.ps1 PowerShell Script\nDESCRIPTION: The provisioner parameter set for the New-TestResources.ps1 script, which adds parameters specific to using a provisioner application for deployment. This allows the script to be executed with a dedicated service principal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>\n [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]\n [-TestApplicationOid <String>] -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationOid <String>]\n [-ProvisionerApplicationSecret <String>] [-DeleteAfterHours <Int32>] [-Location <String>]\n [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]\n [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]\n [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]\n [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Devopsinfrastructure Management Client Library for Python\nDESCRIPTION: These commands install the required packages for using the Azure Devopsinfrastructure Management Client Library and Azure Identity for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devopsinfrastructure/azure-mgmt-devopsinfrastructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-devopsinfrastructure\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 2.0.0b1 in Markdown\nDESCRIPTION: Describes extensive features and breaking changes in version 2.0.0b1, including new operations, model updates, and property changes across various components of the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0b1 (2022-11-11)\n\n### Features Added\n\n  - Added operation SubscriptionsOperations.begin_sample_input\n  - Added operation SubscriptionsOperations.begin_test_input\n  - Added operation SubscriptionsOperations.begin_test_output\n  - Added operation SubscriptionsOperations.begin_test_query\n  - Added operation SubscriptionsOperations.compile_query\n  - Added operation group SkuOperations\n  - Model AzureSqlReferenceInputDataSource has a new parameter authentication_mode\n  - Model AzureSynapseDataSourceProperties has a new parameter authentication_mode\n  - Model AzureSynapseOutputDataSource has a new parameter authentication_mode\n  - Model AzureSynapseOutputDataSourceProperties has a new parameter authentication_mode\n  - Model BlobDataSourceProperties has a new parameter authentication_mode\n  - Model BlobOutputDataSource has a new parameter blob_path_prefix\n  - Model BlobOutputDataSource has a new parameter blob_write_mode\n  - Model BlobOutputDataSourceProperties has a new parameter blob_path_prefix\n  - Model BlobOutputDataSourceProperties has a new parameter blob_write_mode\n  - Model BlobReferenceInputDataSource has a new parameter authentication_mode\n  - Model BlobReferenceInputDataSource has a new parameter blob_name\n  - Model BlobReferenceInputDataSource has a new parameter delta_path_pattern\n  - Model BlobReferenceInputDataSource has a new parameter delta_snapshot_refresh_rate\n  - Model BlobReferenceInputDataSource has a new parameter full_snapshot_refresh_rate\n  - Model BlobReferenceInputDataSource has a new parameter source_partition_count\n  - Model BlobReferenceInputDataSourceProperties has a new parameter authentication_mode\n  - Model BlobReferenceInputDataSourceProperties has a new parameter blob_name\n  - Model BlobReferenceInputDataSourceProperties has a new parameter delta_path_pattern\n  - Model BlobReferenceInputDataSourceProperties has a new parameter delta_snapshot_refresh_rate\n  - Model BlobReferenceInputDataSourceProperties has a new parameter full_snapshot_refresh_rate\n  - Model BlobReferenceInputDataSourceProperties has a new parameter source_partition_count\n  - Model BlobStreamInputDataSource has a new parameter authentication_mode\n  - Model BlobStreamInputDataSourceProperties has a new parameter authentication_mode\n  - Model Cluster has a new parameter properties\n  - Model DocumentDbOutputDataSource has a new parameter authentication_mode\n  - Model EventHubDataSourceProperties has a new parameter partition_count\n  - Model EventHubOutputDataSource has a new parameter partition_count\n  - Model EventHubOutputDataSourceProperties has a new parameter partition_count\n  - Model EventHubStreamInputDataSource has a new parameter partition_count\n  - Model EventHubStreamInputDataSource has a new parameter prefetch_count\n  - Model EventHubStreamInputDataSourceProperties has a new parameter partition_count\n  - Model EventHubStreamInputDataSourceProperties has a new parameter prefetch_count\n  - Model EventHubV2OutputDataSource has a new parameter partition_count\n  - Model EventHubV2StreamInputDataSource has a new parameter partition_count\n  - Model EventHubV2StreamInputDataSource has a new parameter prefetch_count\n  - Model FunctionProperties has a new parameter binding\n  - Model FunctionProperties has a new parameter inputs\n  - Model FunctionProperties has a new parameter output\n  - Model Identity has a new parameter user_assigned_identities\n  - Model InputProperties has a new parameter watermark_settings\n  - Model Output has a new parameter last_output_event_timestamps\n  - Model Output has a new parameter watermark_settings\n  - Model PrivateEndpoint has a new parameter properties\n  - Model ReferenceInputProperties has a new parameter watermark_settings\n  - Model Sku has a new parameter capacity\n  - Model StorageAccount has a new parameter authentication_mode\n  - Model StreamInputProperties has a new parameter watermark_settings\n  - Model StreamingJob has a new parameter externals\n  - Model StreamingJob has a new parameter sku_properties_sku\n\n### Breaking Changes\n\n  - Model AzureSqlReferenceInputDataSource no longer has parameter table\n  - Model Cluster no longer has parameter capacity_allocated\n  - Model Cluster no longer has parameter capacity_assigned\n  - Model Cluster no longer has parameter cluster_id\n  - Model Cluster no longer has parameter created_date\n  - Model Cluster no longer has parameter provisioning_state\n  - Model PrivateEndpoint no longer has parameter created_date\n  - Model PrivateEndpoint no longer has parameter manual_private_link_service_connections\n```\n\n----------------------------------------\n\nTITLE: Importing Latest API Models in Azure SDK\nDESCRIPTION: Shows how to import model classes from the Azure SDK, which automatically loads the latest API version of the model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/multiapi.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.compute.models import VirtualMachineCreateParameter\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Commands in Windows CMD\nDESCRIPTION: Lists command-line instructions for setting up performance test environments, installing both test and legacy dependencies, and initiating test runs with the perfstress or systemperf tools. Examples include activating virtual environments, pip installations, and running tests with optional parameters. Commands are designed for Windows CMD or similar shells but generalize to any OS with appropriate Python and package management setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/perfstress_tests.md#2025-04-23_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share> pip install -r dev_requirements.txt\n(env) ~/azure-storage-file-share> pip install -e .\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(legacy-env) ~/azure-storage-file-share> pip install -r dev_requirements.txt\n(legacy-env) ~/azure-storage-file-share> pip install tests/perfstress_tests/T1_legacy_tests/t1_test_requirements.txt\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share> perfstress\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-storage-file-share> perfstress UploadTest --parallel=2 --size=10240\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/> pip install -e azure-sdk-for-python/tools/devtools_testutils[systemperf]\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(env)~/> systemperf\n```\n\nLANGUAGE: cmd\nCODE:\n```\n(env)~/> systemperf AioHttpGetTest --url=\"http://test-endpoint.com\"\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for Azure AI Projects\nDESCRIPTION: This command runs all tests for the Azure AI Projects client library using pytest.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Clients in Azure SDK for Python (v1.0.0b1)\nDESCRIPTION: Version 1.0.0b1 introduced stable support for asynchronous operations using Python's `asyncio`. Async clients and methods are located within the `aio` namespace of the SDK package (e.g., `azure.mgmt.authorization.aio`).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Import the async client from the .aio namespace\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.mgmt.authorization.aio import AuthorizationManagementClient\n\nasync def main():\n    credential = DefaultAzureCredential()\n    async with AuthorizationManagementClient(credential, \"subscription_id\") as client:\n        # Use await for async operations\n        result = await client.role_assignments.list()\n\n# Requires asyncio to run\nimport asyncio\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestation Policy Token Hash in Python\nDESCRIPTION: Demonstrates how to verify the integrity of a newly set attestation policy. It involves creating an `AttestationPolicyToken` locally with the policy and signing credentials (if used), calculating its SHA256 hash using the `cryptography` library, and comparing this hash to the `policy_token_hash` returned by the `set_policy` operation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom cryptography.hazmat.primitives import hashes\n\nexpected_policy = AttestationPolicyToken(\n    attestation_policy,\n    signing_key=key,\n    signing_certificate=signing_certificate)\nhasher = hashes.Hash(hashes.SHA256())\nhasher.update(expected_policy.serialize().encode('utf-8'))\nexpected_hash = hasher.finalize()\n\n# `expected_hash` will exactly match `policy_set_response.policy_token_hash`\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information Function - Python\nDESCRIPTION: Defines a tool-callable function named \\\"get_user_info\\\" that retrieves user data using a required integer user_id parameter. The function's schema describes its input requirements and its purpose as user information retrieval. No explicit dependencies besides a consumer able to interpret the schema.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"get_user_info\",\n  \"description\": \"Retrieves user information based on user ID.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"user_id\": {\"type\": \"integer\", \"description\": \"ID of the user.\"}\n    },\n    \"required\": [\"user_id\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitor Query and Dependencies in Python\nDESCRIPTION: Installs the Azure Monitor Query client library, Azure Identity package, and pandas data analysis library using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\n!{sys.executable} -m pip install --upgrade azure-monitor-query azure-identity pandas\n\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Service Principal using Azure CLI (Powershell)\nDESCRIPTION: This Azure CLI command, typically run in a shell like Powershell, creates a new service principal in Azure Active Directory. The `-n` parameter specifies the application name, and `--skip-assignment` prevents assigning any roles during creation. This command outputs credentials (app ID, password, tenant ID) required for application authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Powershell\nCODE:\n```\naz ad sp create-for-rbac -n <your-application-name> --skip-assignment\n```\n\n----------------------------------------\n\nTITLE: Transforming Enum Name in Azure Phone Numbers Swagger\nDESCRIPTION: This YAML snippet contains an AutoRest directive used to modify the input Swagger definition before code generation. It targets the `x-ms-enum` extension within the `error` property of the `PhoneNumberSearchResult` definition and transforms its `name` property to `PhoneNumberSearchResultError`, likely to provide a more specific name for the generated enum.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/PHONE_NUMBER_SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: $.definitions.PhoneNumberSearchResult.properties.error.x-ms-enum\n  transform: >\n    $[\"name\"] = \"PhoneNumberSearchResultError\";\n```\n\n----------------------------------------\n\nTITLE: Removing RegionalAuthority Class in Python\nDESCRIPTION: Breaking change in version 1.7.0 where the `azure.identity.RegionalAuthority` class was removed. Functionality related to specifying regional authorities was potentially changed or removed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nazure.identity.RegionalAuthority\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Blob Client Library with pip - Bash\nDESCRIPTION: Demonstrates how to install the Azure Storage Blob client library using pip, which is required to execute the provided Python samples. This command should be run in a terminal environment with Python and pip available. It installs the latest version of the azure-storage-blob package and does not require additional arguments. No input is expected except the command; output is the package installation status.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-storage-blob\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Face Python SDK\nDESCRIPTION: This command uses pip, the Python package installer, to install the Azure Face client library (`azure-ai-vision-face`). This library is required to run the provided Python samples.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/face/azure-ai-vision-face/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-ai-vision-face\n```\n\n----------------------------------------\n\nTITLE: Defining Context-Specific Types with NewType in Python\nDESCRIPTION: Applies typing.NewType to distinguish a string used as a sanitized log from normal str, enabling type checking and reducing accidental misuse. Dependencies are typing.NewType. The function returns a specialized string subtype, adding contextual safety; demonstrates usage in API signatures as well.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking_cheat_sheet.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import NewType\\n\\nSanitized = NewType(\\\"Sanitized\\\", str)\\n\\n\\ndef sanitize(log) -> Sanitized:\\n    return Sanitized(_sanitize(log))\\n\\ndef print_log(log: Sanitized) -> None: ...\n```\n\n----------------------------------------\n\nTITLE: Including Sentence Length Information\nDESCRIPTION: Demonstrates how to include sentence boundary information for both input and translated text. Returns sentence lengths for source and translated content.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    include_sentence_length = True\n    to_language = [\"cs\"]\n    input_text_elements = [\"The answer lies in machine translation. This is a test.\"]\n\n    response = text_translator.translate(\n        body=input_text_elements, to_language=to_language, include_sentence_length=include_sentence_length\n    )\n    translation = response[0] if response else None\n\n    if translation:\n        detected_language = translation.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n            if translated_text.sent_len:\n                print(f\"Source Sentence length: {translated_text.sent_len.src_sent_len}\")\n                print(f\"Translated Sentence length: {translated_text.sent_len.trans_sent_len}\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release of Azure SDK for Python\nDESCRIPTION: This Markdown snippet documents the initial release of the Azure SDK for Python, version 0.1.0, released on April 1, 2019. It provides a basic structure for recording future releases and changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgegateway/azure-mgmt-edgegateway/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Release History\n\n## 0.1.0 (2019-04-01)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Service URL using Azure CLI\nDESCRIPTION: Azure CLI command to get the file service URL for a storage account.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get the file service URL for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.file\"\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Coverage Check with Interrogate\nDESCRIPTION: Command-line instructions for installing and using the interrogate package to verify documentation coverage in Python code.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/documentation_guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install interrogate\n$ interrogate -vv [PATH TO REPO/MODULE/FILE]\n```\n\n----------------------------------------\n\nTITLE: Implementing Built-in Evaluators\nDESCRIPTION: Example showing usage of different types of evaluators including NLP, AI-assisted quality, and safety evaluators with their configurations\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom azure.ai.evaluation import evaluate, RelevanceEvaluator, ViolenceEvaluator, BleuScoreEvaluator\n\n# NLP bleu score evaluator\nbleu_score_evaluator = BleuScoreEvaluator()\nresult = bleu_score(\n    response=\"Tokyo is the capital of Japan.\",\n    ground_truth=\"The capital of Japan is Tokyo.\"\n)\n\n# AI assisted quality evaluator\nmodel_config = {\n    \"azure_endpoint\": os.environ.get(\"AZURE_OPENAI_ENDPOINT\"),\n    \"api_key\": os.environ.get(\"AZURE_OPENAI_API_KEY\"),\n    \"azure_deployment\": os.environ.get(\"AZURE_OPENAI_DEPLOYMENT\"),\n}\n\nrelevance_evaluator = RelevanceEvaluator(model_config)\nresult = relevance_evaluator(\n    query=\"What is the capital of Japan?\",\n    response=\"The capital of Japan is Tokyo.\"\n)\n\n# AI assisted safety evaluator\nazure_ai_project = {\n    \"subscription_id\": \"<subscription_id>\",\n    \"resource_group_name\": \"<resource_group_name>\",\n    \"project_name\": \"<project_name>\",\n}\n\nviolence_evaluator = ViolenceEvaluator(azure_ai_project)\nresult = violence_evaluator(\n    query=\"What is the capital of France?\",\n    response=\"Paris.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Authoring Client with CognitiveServicesCredentials (Legacy QnA Maker SDK) in Python\nDESCRIPTION: Demonstrates authenticating the `QnAMakerClient` (used for authoring operations like creating/updating knowledge bases) from the legacy `azure-cognitiveservices-knowledge-qnamaker` library using `CognitiveServicesCredentials`. Requires the Azure Cognitive Services endpoint URL and the corresponding API key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom msrest.authentication import CognitiveServicesCredentials\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credentials=CognitiveServicesCredentials(\"API key\")\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Workloads Management SDK and Identity Library in Bash\nDESCRIPTION: This snippet demonstrates how to install the required Azure SDK Python packages using pip, specifically azure-mgmt-workloads and azure-identity. These packages are prerequisites for managing Azure workloads and for handling Azure Active Directory authentication in Python code. The commands should be run in a shell or terminal environment, and require Python 3.7 or later to be available in the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/workloads/azure-mgmt-workloads/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-workloads\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing the Azure SAP Virtual Instance Client in Python\nDESCRIPTION: Demonstrates how to authenticate with Azure using `DefaultAzureCredential` from the `azure-identity` library and initialize the `WorkloadsSapVirtualInstanceMgmtClient`. It relies on environment variables (`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`) for the credential and `AZURE_SUBSCRIPTION_ID` for the subscription ID, retrieved using `os.getenv()`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/workloads/azure-mgmt-workloadssapvirtualinstance/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.workloadssapvirtualinstance import WorkloadsSapVirtualInstanceMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WorkloadsSapVirtualInstanceMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Attestation Policy (Isolated Mode) in Python\nDESCRIPTION: Illustrates how to set an attestation policy for a specific type (e.g., SGX Enclave) when the service instance is in Isolated mode. This requires providing a signing key and certificate to authorize the policy change. The example also shows retrieving the policy afterwards to confirm the update.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npolicy_set_response = attest_client.set_policy(AttestationType.SGX_ENCLAVE,\n    attestation_policy,\n    signing_key=key,\n    signing_certificate=signing_certificate)\nnew_policy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n# `new_policy` will equal `attestation_policy`.\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Model Configuration\nDESCRIPTION: Setup of AzureOpenAIModelConfiguration with required environment variables for model configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/response_completeness.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation import ResponseCompletenessEvaluator , AzureOpenAIModelConfiguration\nfrom pprint import pprint\nimport os\n\nmodel_config = AzureOpenAIModelConfiguration(\n    azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n    api_key=os.environ[\"AZURE_OPENAI_API_KEY\"],\n    api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Version Release Notes - Latest Version 8.1.0b2\nDESCRIPTION: Documents changes in Azure SDK for Python version 8.1.0b2 including new features and breaking changes for Notification Hubs functionality.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/notificationhubs/azure-mgmt-notificationhubs/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 8.1.0b2 (2024-03-21)\n\n### Features Added\n\n  - Added operation NamespacesOperations.delete\n  - Added operation NamespacesOperations.get_pns_credentials\n  - Added operation NamespacesOperations.update\n  - Added operation NotificationHubsOperations.update\n  - Added operation group PrivateEndpointConnectionsOperations\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Linker and Identity Packages using pip - Bash\nDESCRIPTION: Installs the 'azure-mgmt-servicelinker' and 'azure-identity' packages via pip to enable Azure management and authentication capabilities in Python. This command requires Python 3.8 or newer and should be run in a terminal or command prompt where pip is available. The user must have an active Python environment and internet access for installation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicelinker/azure-mgmt-servicelinker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-servicelinker\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Handling Errors During SGX Attestation in Python\nDESCRIPTION: Provides an example of error handling using a try-except block when calling the `attest_sgx_enclave` method. It catches `HttpResponseError` from `azure-core` and demonstrates checking the `ex.error` attribute to potentially implement specific logic for different error types, such as ignoring 'InvalidParameter' errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response, _ = attest_client.attest_sgx_enclave(\n        quote,\n        runtime_data=AttestationData(runtime_data, is_json=False))\nexcept HttpResponseError as ex:\n    # Ignore invalid quote errors.\n    if ex.error == \"InvalidParameter\":\n        pass\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attestation Token Signing Certificates in Python\nDESCRIPTION: Demonstrates using the `get_signing_certificates` method to retrieve the set of public key certificates used by the Azure Attestation service to sign the attestation tokens it issues. The example iterates through the retrieved signers, decodes the PEM certificate using the `cryptography` library, and prints issuer/subject information.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsigners = attest_client.get_signing_certificates()\nfor signer in signers:\n    from cryptography.hazmat.backends import default_backend\n    cert = cryptography.x509.load_pem_x509_certificate(signer.certificates[0].encode('ascii'), backend=default_backend())\n    print('Cert  iss:', cert.issuer, '; subject:', cert.subject)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schemas for Long-Running Operations in YAML\nDESCRIPTION: This snippet defines response schemas for various long-running operations in the Conversational Analysis Authoring module. It adds a 200 response with a schema reference to each operation to support poller responses.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-operation: ConversationalAnalysisAuthoring_CancelTrainingJob\n    transform: >\n      $[\"responses\"][\"200\"] = {\n        \"description\": \"mock schema to get poller response when calling .result()\",\n        \"schema\": {\n          \"$ref\": \"#/definitions/ConversationalAnalysisAuthoringTrainingJobState\"\n        }\n      };\n  - where-operation: ConversationalAnalysisAuthoring_DeleteDeployment\n    transform: >\n      $[\"responses\"][\"200\"] = {\n        \"description\": \"mock schema to get poller response when calling .result()\",\n        \"schema\": {\n          \"$ref\": \"#/definitions/ConversationalAnalysisAuthoringDeploymentJobState\"\n        }\n      };\n```\n\n----------------------------------------\n\nTITLE: Renaming TrunkRoute Model to SipTrunkRouteInternal using Autorest Directive\nDESCRIPTION: This `autorest` directive targets the `TrunkRoute` definition in the Swagger document and applies the `x-ms-client-name` extension with the value `SipTrunkRouteInternal`. Similar to the previous directive, this renames the model in the generated client code for clarity or to manage internal representations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/swagger/SIP_ROUTING_SWAGGER.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  from: swagger-document\n  where: \"$.definitions.TrunkRoute\"\n  transform: >\n    $[\"x-ms-client-name\"] = \"SipTrunkRouteInternal\";\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure SDK Tools Package (Editable) using pip\nDESCRIPTION: This line instructs pip (Python's package installer) to install the package located at the relative path `../../../tools/azure-sdk-tools` in editable mode (`-e`). Editable mode installs the package by linking directly to the source directory, allowing changes in the source code to be immediately available without needing reinstallation. This is typically used during development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-anomalydetector/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Queue Storage SDK generation settings in YAML\nDESCRIPTION: YAML configuration for AutoRest, specifying input file, output folder, namespace, and other generation options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/storage/data-plane/Microsoft.QueueStorage/stable/2018-03-28/queue.json\noutput-folder: ../azure/storage/queue/_generated\nnamespace: azure.storage.queue\nno-namespace-folders: true\nlicense-header: MICROSOFT_MIT_NO_VERSION\nenable-xml: true\nvanilla: true\nclear-output-folder: true\npython: true\nversion-tolerant: false\nmodelerfour:\n    seal-single-value-enum-by-default: true\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Maps Search Python Client - Bash\nDESCRIPTION: This snippet demonstrates how to install the Azure Maps Search Python client library using the pip package manager. The --pre flag allows installation of pre-release versions. It assumes that pip is already installed on your system. Running this command makes the azure-maps-search package available for use in Python environments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-maps-search --pre\n```\n\n----------------------------------------\n\nTITLE: Multiapiscript Configuration\nDESCRIPTION: YAML configuration that defines the output folder, default API version, and other settings for the multiapi script generation process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noutput-folder: $(python-sdks-folder)/formrecognizer/azure-ai-formrecognizer/azure/ai/formrecognizer/_generated/\ndefault-api: v2_1\nclear-output-folder: true\nperform-load: false\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release 0.1.0 in Markdown\nDESCRIPTION: Announces the initial release of the SDK, version 0.1.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.1.0 (2019-02-26)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Digital Twins Core and Azure Identity packages\nDESCRIPTION: Install the required Azure Digital Twins Core and Azure Identity packages using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-digitaltwins-core azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing and Querying Tables in azure-data-tables\nDESCRIPTION: Shows how to list and query tables using TableServiceClient in azure-data-tables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.data.tables import TableServiceClient\n\nservice_client = TableServiceClient.from_connection_string(conn_str)\n\nfor table in service_client.list_tables():\n    print(table.name)\n\nquery_filter = \"TableName eq @name1 or TableName gt @name2\"\nparameters = {\n    \"name1\": \"myTableName1\",\n    \"name2\": \"myTableName2\",\n}\n\nfor table in service_client.query_tables(query_filter, parameters=parameters):\n    print(table.name)\n```\n\n----------------------------------------\n\nTITLE: Markdown Link References for Azure Text Analytics Samples\nDESCRIPTION: A collection of markdown reference-style links pointing to sample code files in the Azure SDK for Python repository. Includes both synchronous and asynchronous implementations of various text analytics features.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/README.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n[opinion_mining_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_sentiment_with_opinion_mining.py\n[opinion_mining_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_sentiment_with_opinion_mining_async.py\n[recognize_custom_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_custom_entities.py\n[recognize_custom_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_custom_entities_async.py\n[single_label_classify_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_single_label_classify.py\n[single_label_classify_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_single_label_classify_async.py\n[multi_label_classify_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_multi_label_classify.py\n[multi_label_classify_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_multi_label_classify_async.py\n[healthcare_action_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_healthcare_action.py\n[extract_summary_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_extract_summary.py\n[extract_summary_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_extract_summary_async.py\n[abstract_summary_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_abstract_summary.py\n[abstract_summary_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_abstract_summary_async.py\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Environment Variables (Powershell)\nDESCRIPTION: These Powershell commands demonstrate how to set the `AZURE_CLIENT_ID`, `AZURE_CLIENT_SECRET`, and `AZURE_TENANT_ID` environment variables using the credentials (`appId`, `password`, `tenant`) obtained from creating an Azure AD service principal. The Azure Identity library (e.g., `DefaultAzureCredential`) can automatically detect and use these variables for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Powershell\nCODE:\n```\n$Env:AZURE_CLIENT_ID=\"generated-app-ID\"\n$Env:AZURE_CLIENT_SECRET=\"random-password\"\n$Env:AZURE_TENANT_ID=\"tenant-ID\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Service Principal Creation\nDESCRIPTION: This JSON object represents the typical output from the `az ad sp create-for-rbac` command. It includes the `appId` (client ID), `displayName`, `name`, `password` (client secret), and `tenant` (tenant ID) which are essential for configuring application authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"appId\": \"generated-app-ID\",\n    \"displayName\": \"dummy-app-name\",\n    \"name\": \"http://dummy-app-name\",\n    \"password\": \"random-password\",\n    \"tenant\": \"tenant-ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Dictionaries Function - Python\nDESCRIPTION: Describes a dynamic \\\"merge_dicts\\\" function that merges two provided dictionaries. Both \\\"dict1\\\" and \\\"dict2\\\" are required and described, making this feature apt for data transformation or parameter merging scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/send_email_stream_response.txt#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"merge_dicts\",\n  \"description\": \"Merges two dictionaries.\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"dict1\": {\"type\": \"object\", \"description\": \"First dictionary.\"},\n      \"dict2\": {\"type\": \"object\", \"description\": \"Second dictionary.\"}\n    },\n    \"required\": [\"dict1\", \"dict2\"]\n  },\n  \"strict\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrative Key Release Flow Post-Attestation\nDESCRIPTION: This snippet conceptually outlines the steps following successful SGX attestation in a Secure Key Release pattern. The attestation token (containing enclave-held data like a public key) is sent to a relying party, which validates the token, encrypts data using the key, and sends the encrypted data back to the client/enclave.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nencrypted_data = send_token_to_relying_party(attestationResult.Token)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ServicePrincipalAuth in PowerShell\nDESCRIPTION: Defines the optional 'ServicePrincipalAuth' switch parameter. When present, it indicates that service principal credentials should be used for deployment (provisioner SP) and passed to tests (test SP). If SPs aren't set, it provisions a new SP using user credentials and passes that to tests. It's not required, is named, defaults to $false, and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Breaking Text into Sentences\nDESCRIPTION: Demonstrates how to identify sentence boundaries and get sentence lengths in translated text.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    include_sentence_length = True\n    to_language = [\"cs\"]\n    input_text_elements = [\"The answer lies in machine translation. This is a test.\"]\n\n    response = text_translator.translate(\n        body=input_text_elements, to_language=to_language, include_sentence_length=include_sentence_length\n    )\n    translation = response[0] if response else None\n\n    if translation:\n        detected_language = translation.detected_language\n        if detected_language:\n            print(\n                f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\"\n            )\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n            if translated_text.sent_len:\n                print(f\"Source Sentence length: {translated_text.sent_len.src_sent_len}\")\n                print(f\"Translated Sentence length: {translated_text.sent_len.trans_sent_len}\")\n\nexcept HttpResponseError as exception:\n    if exception.error is not None:\n        print(f\"Error Code: {exception.error.code}\")\n        print(f\"Message: {exception.error.message}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Astro Management and Identity SDKs - Bash\nDESCRIPTION: Installs the azure-mgmt-astro and azure-identity packages required to interact with Microsoft Azure services through the Astro Management Client Library. This is the initial step for setting up the Python development environment. The commands should be run in a terminal that has Python 3.8 or above installed. Both packages are required for authentication and resource management using the Azure SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/astro/azure-mgmt-astro/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-astro\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Importing Model Classes in Python\nDESCRIPTION: Shows how to import model classes after the breaking changes in version 0.13.0. Individual classes can no longer be imported directly from the models sub-module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.sqlmanagement.models import MyClass\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Certificates Using OpenSSL\nDESCRIPTION: These shell commands use OpenSSL to create both .pem and .cer certificate files for use with Azure Service Management. The .pem file is used as the client certificate, while the .cer file needs to be uploaded to Azure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/servicemanagement.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer\n```\n\n----------------------------------------\n\nTITLE: Using AnyStr-typed Functions to Constrain str/bytes Arguments in Python\nDESCRIPTION: Implements a function concat using AnyStr to ensure that both arguments (and the output) are the same type (either str or bytes), providing static type safety against mixing these types. Dependencies: AnyStr TypeVar. Inputs: two values of type AnyStr; output: their concatenation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/static_type_checking.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef concat(a: AnyStr, b: AnyStr) -> AnyStr:\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Defining Azure ML Python Dependencies\nDESCRIPTION: A requirements file that specifies Python packages needed for an Azure Machine Learning project. It includes the azureml-defaults package and pins the rsa package to version 4.7 for security and compatibility reasons.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/internal/env-pip-dependencies/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nazureml-defaults\nrsa==4.7\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceUpdateClient in Python\nDESCRIPTION: This snippet demonstrates how to initialize the `DeviceUpdateClient` using endpoint and instance ID from environment variables (`DEVICEUPDATE_ENDPOINT`, `DEVICEUPDATE_INSTANCE_ID`) and authenticating via `DefaultAzureCredential`. This client object is required for subsequent interactions with the Device Update service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ListUpdates/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n``` python\nendpoint = os.environ[\"DEVICEUPDATE_ENDPOINT\"]\ninstance = os.environ[\"DEVICEUPDATE_INSTANCE_ID\"]\nclient = DeviceUpdateClient(credential=DefaultAzureCredential(), endpoint=endpoint, instance_id=instance)\n```\n```\n\n----------------------------------------\n\nTITLE: Resource Management Client Aliases in Namespace (Python)\nDESCRIPTION: Lists the convenience aliases provided in the `azure.mgmt.resource` namespace as of version 2.0.0rc4/0.30.0rc4. These aliases allow easier access to different Azure Resource Management clients like `FeatureClient`, `ManagementLockClient`, `PolicyClient`, `ResourceManagementClient`, and `SubscriptionClient` directly from the top-level resource namespace.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nazure.mgmt.resource.FeatureClient\nazure.mgmt.resource.ManagementLockClient\nazure.mgmt.resource.PolicyClient\nazure.mgmt.resource.ResourceManagementClient\nazure.mgmt.resource.SubscriptionClient\n```\n\n----------------------------------------\n\nTITLE: Importing Operation Classes in Python\nDESCRIPTION: Demonstrates the correct way to import operation classes after the breaking changes in version 0.13.0. Classes can no longer be imported directly from the operations sub-module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.mgmt.sqlmanagement.operations import MyClassOperations\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Azure SDK Project\nDESCRIPTION: This snippet enumerates the required Python packages for an Azure SDK project. It includes local package references, core Azure packages, testing frameworks, and AI-related Azure packages. The file uses both relative paths for local packages and specific version requirements for external packages.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../core/azure-core\n../../identity/azure-identity\npytest\npytest-asyncio\npytest-cov\npytest-mock\npytest-xdist\nazure-ai-inference>=1.0.0b4\nazure-ai-projects\naiohttp\n-e ../azure-ai-evaluation\n```\n\n----------------------------------------\n\nTITLE: Using Async Client with azure-ai-language-questionanswering in Python\nDESCRIPTION: This snippet shows how to use the async client in the new azure-ai-language-questionanswering library. It demonstrates two ways of using the async client: with an async context manager and by manually closing the client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.aio import QuestionAnsweringClient\n\nendpoint = \"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\"\ncredential = AzureKeyCredential(\"API key\")\n\n# call close when the client is no longer needed\nclient = QuestionAnsweringClient(endpoint=endpoint, credential=credential)\n...\nawait client.close()\n\n# alternatively, use the client as an async context manager\nasync with QuestionAnsweringClient(endpoint=endpoint, credential=credential) as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating X509 Certificate in Pre-Resource Script\nDESCRIPTION: This PowerShell snippet from a test-resources-pre.ps1 file creates an X509 certificate and adds its details to the templateFileParameters for use in test-resources.json.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ./eng/common/scripts/X509Certificate2\n$cert = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Frisco, S=TX, C=US' -ValidDays 3652\n# Create new entries in $templateFileParameters\n$templateFileParameters['ConfidentialLedgerPrincipalPEM'] = Format-X509Certificate2 -Certificate $cert\n$templateFileParameters['ConfidentialLedgerPrincipalPEMPK'] = Format-X509Certificate2 -Type Pkcs8 -Certificate $cert\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Quickpulse Client Generation in Azure Monitor OpenTelemetry\nDESCRIPTION: YAML configuration for AutoRest to generate the Quickpulse client. It specifies metadata, output locations, and input specifications for the client generation process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/swagger/README_QUICKPULSE.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: QuickpulseClient\ndescription: Quickpulse Client\ngenerated-metadata: false\nlicense-header: MICROSOFT_MIT_NO_VERSION\nno-namespace-folders: true\noutput-folder: ../azure/monitor/opentelemetry/exporter/_quickpulse/_generated\nsource-code-folder-path: ./azure/monitor/opentelemetry/exporter/_quickpulse/_generated\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/665e7c3b6f26b148b3c05e55602621bc293cc0a4/specification/applicationinsights/data-plane/LiveMetrics/preview/2024-04-01-preview/livemetrics.json\npython: true\nmodels-mode: msrest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy and Token with Azure Attestation Client in Python\nDESCRIPTION: Demonstrates the updated pattern (as of v1.0.0) for calling the `get_policy` method on an attestation client. This method now returns a tuple containing both the policy string and the associated `AttestationToken`. This example unpacks both values into separate variables.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npolicy, token = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Event Grid SDK and Identity Package - Bash\nDESCRIPTION: Installs the Azure Event Grid management client and Azure Identity libraries using pip. Required as the initial setup step, ensuring all necessary Python packages are available for subsequent code and usage. Takes no input parameters and should be run in a shell or command prompt where Python is available.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-mgmt-eventgrid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-eventgrid\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Dependencies with pip\nDESCRIPTION: Commands to install the required Azure SDK packages for Containerservicefleet management and authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservicefleet/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-containerservicefleet\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Release History Entry - Version 1.0.0b3\nDESCRIPTION: Changelog entry for version 1.0.0b3 released on December 26, 2022. Documents new operations and model changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-mgmt-agrifood/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b3 (2022-12-26)\n\n### Features Added\n\n  - Added operation ExtensionsOperations.create_or_update\n  - Added operation group SolutionsDiscoverabilityOperations\n  - Added operation group SolutionsOperations\n  - Model Extension has a new parameter additional_api_properties\n  - Model PrivateEndpointConnection has a new parameter group_ids\n\n### Breaking Changes\n\n  - Removed operation ExtensionsOperations.create\n  - Removed operation ExtensionsOperations.update\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Hybrid Compute and Identity SDKs via pip - Bash\nDESCRIPTION: Installs the 'azure-mgmt-hybridcompute' and 'azure-identity' Python packages via pip. These packages enable management and authentication for Azure Hybrid Compute from Python applications. Run the command in your terminal prior to using the SDKs, ensuring you have Python 3.8 or later.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/hybridcompute/azure-mgmt-hybridcompute/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-hybridcompute\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Extended Location and Identity Libraries via Pip (Bash)\nDESCRIPTION: Installs the necessary Python packages (`azure-mgmt-extendedlocation` and `azure-identity`) using the pip package installer. These libraries are required to interact with Azure Extended Location services and handle authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/extendedlocation/azure-mgmt-extendedlocation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-extendedlocation\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Fabric Management SDK and Identity Library - Bash\nDESCRIPTION: This snippet demonstrates how to install the necessary Azure Service Fabric Management SDK and Azure Identity library via pip for use in Python projects. Ensure that you have Python 3.8 or later and pip installed prior to running these commands. These packages are prerequisites for managing Azure Service Fabric resources and performing authenticated operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicefabric/azure-mgmt-servicefabric/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-servicefabric\npip install azure-identity\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure ML Python Dependencies\nDESCRIPTION: This requirements file defines Python package dependencies for an Azure Machine Learning project. It specifies the azureml-defaults package which provides the standard Azure ML SDK functionalities, and pins the rsa package to version 4.7 for cryptographic operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/internal/env-duplicate-dependencies/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nazureml-defaults\nrsa==4.7\n```\n\n----------------------------------------\n\nTITLE: Enumerating Device Groups with DeviceUpdateClient in Python\nDESCRIPTION: Retrieves a list of all device groups defined within the Device Update instance using the `list_groups` method of the `device_management` attribute from an initialized `DeviceUpdateClient`. The code iterates through the result and prints the `groupId` for each device group.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetDevice/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.device_management.list_groups()\nfor item in response:\n    print(f\"  {item['groupId']}\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DirectAttackSimulator in Python\nDESCRIPTION: This snippet shows how to use the DirectAttackSimulator to produce 2 results with 3 conversation turns each, resulting in 6 messages per result. It's used as an inline example in the documentation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    .. admonition:: Example:\n\n        .. literalinclude:: ../samples/evaluation_samples_simulate.py\n            :start-after: [START direct_attack_simulator]\n            :end-before: [END direct_attack_simulator]\n            :language: python\n            :dedent: 8\n            :caption: Run the DirectAttackSimulator to produce 2 results with 3 conversation turns each (6 messages in each result).\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group and Its Resources - Shell\nDESCRIPTION: Removes the previously created Azure resource group and all associated resources using the Azure CLI. Parameters: RESOURCE_GROUP (name of the group to delete). Flags: '-y' auto-confirms, '--no-wait' returns immediately. Used to minimize resource usage and cleanup at the end of tests.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\naz group delete -n $RESOURCE_GROUP -y --no-wait\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter -ResourceType in PowerShell\nDESCRIPTION: Defines the optional 'ResourceType' parameter. The description needs to be filled in ({{ Fill ResourceType Description }}). It's a string, not required, is named, defaults to 'Test', and doesn't accept pipeline input or wildcards.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Test\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure Service Bus Performance Tests using perfstress\nDESCRIPTION: Provides the commands to change into the tests directory and run the `perfstress` tool without arguments. This action lists all discoverable performance tests within the current module, requiring the `devtools_testutils` package to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/tests/perf_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-servicebus> cd tests\n(env) ~/azure-servicebus/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Parsing Thread Run Created Event in JSON\nDESCRIPTION: This snippet represents the 'thread.run.created' event data. It includes information about the run's ID, status, agent, thread, model, instructions, and available tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/tests/agents/assets/main_stream_response.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"run_01\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1735945041,\n  \"agent_id\": \"asst_01\",\n  \"thread_id\": \"thread_01\",\n  \"status\": \"queued\",\n  \"started_at\": null,\n  \"expires_at\": 1735945641,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": null,\n  \"required_action\": null,\n  \"last_error\": null,\n  \"model\": \"gpt-4-1106-preview\",\n  \"instructions\": \"You are a helpful assistant\",\n  \"tools\": [...],\n  \"tool_resources\": {\n    \"code_interpreter\": {\n      \"file_ids\": []\n    }\n  },\n  \"metadata\": {},\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_completion_tokens\": null,\n  \"max_prompt_tokens\": null,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"incomplete_details\": null,\n  \"usage\": null,\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Discovery Group in Azure EASM\nDESCRIPTION: This example shows how to create a discovery group with a seed host and initiate a discovery run using the EasmClient.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.defender.easm import EasmClient\nfrom azure.identity import DefaultAzureCredential\n\nsub_id = '<your subscription ID here>'\nworkspace_name = '<your workspace name here>'\nresource_group = '<your resource group here>'\nregion = '<your region here>'\n\nendpoint = f'{region}.easm.defender.microsoft.com'\n\nclient = EasmClient(endpoint, resource_group, sub_id, workspace_name, credential=DefaultAzureCredential())\n\nclient.discovery_groups.put(\"example group\", {\n\t'seeds': [\n\t    {'kind': 'host', 'name': 'example.org'}\n\t]\n})\nclient.discovery_groups.run(\"example group\")\n```\n\n----------------------------------------\n\nTITLE: Initializing EasmClient with Azure Active Directory Credential\nDESCRIPTION: This code snippet demonstrates how to initialize the EasmClient using DefaultAzureCredential for authentication. It requires setting environment variables for Azure AD application credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.defender.easm import EasmClient\nfrom azure.identity import DefaultAzureCredential\n\nsub_id = '<your subscription ID here>'\nworkspace_name = '<your workspace name here>'\nresource_group = '<your resource group here>'\nregion = '<your region here>'\n\nendpoint = f'{region}.easm.defender.microsoft.com'\n\nclient = EasmClient(endpoint, resource_group, sub_id, workspace_name, credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Modifying Session Receiver Creation in Python\nDESCRIPTION: Session-specific receivers are now created using dedicated top-level functions: `get_queue_session_receiver` and `get_subscription_session_receiver`. The non-session receiver creation methods no longer accept a `session_id` parameter.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\n# New functions for session receivers:\nget_queue_session_receiver(...)\nget_subscription_session_receiver(...)\n\n# Non-session receivers no longer take session_id:\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Settings in readme.cli.md\nDESCRIPTION: YAML configuration for the readme.cli.md file, which is required for generating Python integration tests. It specifies the namespace for the Azure management package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/generating-integration-test.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n## CLI\n\nThese settings apply only when `--cli` is specified on the command line.\n\n``` yaml $(cli)\ncli:\n  namespace: azure.mgmt.attestation\n```\n```\n\n----------------------------------------\n\nTITLE: Including Core Azure SDK in Python Requirements\nDESCRIPTION: References the 'azure-core' package from a relative path, implying that the core SDK is built and maintained within the same repository or a sibling directory. This local dependency should be installed via pip from a directory '../../core/azure-core'.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/dev_requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n../../core/azure-core\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Generation\nDESCRIPTION: Commands to navigate to swagger folder and run autorest generation\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest\n```\n\n----------------------------------------\n\nTITLE: Deleting Question Answering Project with azure-ai-language-questionanswering in Python\nDESCRIPTION: This snippet demonstrates how to delete a Question Answering project using the begin_delete_project method in the new azure-ai-language-questionanswering library. It shows authentication and initiating the project deletion process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nclient = AuthoringClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credential=AzureKeyCredential(\"API key\")\n)\n\ndelete_poller = client.begin_delete_project(\n    project_name=\"<project_name>\",\n)\ndelete_poller.result()\n```\n\n----------------------------------------\n\nTITLE: Describing Azure Namespace Package in Markdown\nDESCRIPTION: This snippet provides an overview of the Microsoft Azure namespace package for Python. It explains that the package is not intended for direct installation, discusses version compatibility, and directs users to the appropriate resources for installing Azure client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-nspkg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use [PEP420](https://www.python.org/dev/peps/pep-0420/) as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Requirements with Editable Installs\nDESCRIPTION: Defines all Python package dependencies needed for developing and building the Azure SDK for Python. The snippet includes references to local packages using -e for editable mode, ensuring changes in source directories are immediately reflected without reinstallation. It also lists required libraries like aiohttp and requests, which must be installed for async HTTP and REST functionality, respectively. Dependencies should be installed using pip with this requirements file as input.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/tests/integration/scenarios/optional_environment_two_options/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../../../../tools/azure-sdk-tools\n../../../../../../sdk/core/azure-core\naiohttp\nrequests\n-e .\n```\n\n----------------------------------------\n\nTITLE: Evaluating Existing Dataset\nDESCRIPTION: Example of using evaluate API to assess multiple evaluators on an existing dataset with column mapping configuration\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation import evaluate\n\nresult = evaluate(\n    data=\"data.jsonl\", # provide your data here\n    evaluators={\n        \"blocklist\": blocklist_evaluator,\n        \"relevance\": relevance_evaluator\n    },\n    # column mapping\n    evaluator_config={\n        \"relevance\": {\n            \"column_mapping\": {\n                \"query\": \"${data.queries}\"\n                \"ground_truth\": \"${data.ground_truth}\"\n                \"response\": \"${outputs.response}\"\n            } \n        }\n    }\n    # Optionally provide your AI Foundry project information to track your evaluation results in your Azure AI Foundry project\n    azure_ai_project = azure_ai_project,\n    # Optionally provide an output path to dump a json of metric summary, row level data and metric and AI Foundry URL\n    output_path=\"./evaluation_results.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adjusting SignedIdentifier Required Properties via Autorest Directive (YAML)\nDESCRIPTION: This Autorest directive targets the `SignedIdentifier` definition in the Swagger document. It updates the `required` array to only include `Id`, making the `AccessPolicy` property optional for this object.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/swagger/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions.SignedIdentifier\n  transform: >\n    $.required = [ \"Id\" ];\n```\n\n----------------------------------------\n\nTITLE: Listing Assets in Azure EASM\nDESCRIPTION: This code snippet demonstrates how to list and print all assets discovered by the Azure EASM client, showing the kind and name of each asset.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.defender.easm import EasmClient\nfrom azure.identity import DefaultAzureCredential\n\nsub_id = '<your subscription ID here>'\nworkspace_name = '<your workspace name here>'\nresource_group = '<your resource group here>'\nregion = '<your region here>'\n\nendpoint = f'{region}.easm.defender.microsoft.com'\n\nclient = EasmClient(endpoint, resource_group, sub_id, workspace_name, credential=DefaultAzureCredential())\n\nfor asset in client.assets.list():\n\tprint(f'{asset.kind}: {asset.name}')\n```\n\n----------------------------------------\n\nTITLE: Version Tag Configuration - 2024-04-01-preview\nDESCRIPTION: YAML configuration for the v2024-04-01-preview API version. Specifies input files and output folder for SDK generation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file:\n  - Microsoft.MachineLearningServices/preview/2024-04-01-preview/machineLearningServices.json\n  - Microsoft.MachineLearningServices/preview/2024-04-01-preview/registries.json\n  - Microsoft.MachineLearningServices/preview/2024-04-01-preview/workspaceFeatures.json\n  - Microsoft.MachineLearningServices/preview/2024-04-01-preview/mfe.json\n  - Microsoft.MachineLearningServices/preview/2024-04-01-preview/workspaceRP.json\noutput-folder: $(python-sdks-folder)/v2024_04_01_preview\n```\n\n----------------------------------------\n\nTITLE: Parameter Renaming Directive Declaration\nDESCRIPTION: Declares a directive for renaming parameters in both swagger and openapi documents. The directive transforms parameter names using x-ms-client-name extension.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\ndeclare-directive:\n    rename-parameter: >\n        [{\n        from: 'swagger-document',\n        transform: `for (const param in $.parameters) { if (param[\\\"name\\\"] == ${JSON.stringify($.from)}) { $[param][\\\"x-ms-client-name\\\"] = ${JSON.stringify($.to)}; } }`\n        },\n        {\n        from: 'openapi-document',\n        transform: `for (const param in $.parameters) { if (param[\\\"name\\\"] == ${JSON.stringify($.from)}) { $[param][\\\"x-ms-client-name\\\"] = ${JSON.stringify($.to)}; } }`\n        }]\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Tracing in Azure SDK for Python\nDESCRIPTION: This snippet shows how to enable network tracing for debugging in Azure SDK clients. It demonstrates setting up logging to capture HTTP request and response details, which helps troubleshoot connectivity issues.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/storage/test_file.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\n# Set up logging to capture HTTP request/response details\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Add a handler to output to console\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Generating Docs for EventHubProducerClient (aio, Python)\nDESCRIPTION: Sphinx directive to automatically generate documentation for the asynchronous `EventHubProducerClient` class in `azure.eventhub.aio`. Includes all members, undocumented members, and inherited members using the specified options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/doc/azure.eventhub.aio.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: azure.eventhub.aio.EventHubProducerClient\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only Policy with Azure Attestation Client in Python (Ignoring Token)\nDESCRIPTION: Shows how to retrieve only the attestation policy string when calling `get_policy` (as of v1.0.0) by using an underscore (`_`) to discard the second element (the `AttestationToken`) of the returned tuple.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npolicy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n```\n\n----------------------------------------\n\nTITLE: Including Code Samples in Documentation with Sphinx\nDESCRIPTION: Shows how to include code samples in documentation using Sphinx directives. The example demonstrates referencing an external Python file with start/end markers for specific sections.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.. admonition:: Example:\\n\\n    .. literalinclude:: ../samples/ml_samples_authentication.py\\n        :start-after: [START create_ml_client_from_config_default]\\n        :end-before: [END create_ml_client_from_config_default]\\n        :language: python\\n        :dedent: 8\\n        :caption: Creating an MLClient from a file named \"config.json\"\\n            in directory \"src\".\n```\n\n----------------------------------------\n\nTITLE: Using Default Parameter Set for Resource Deletion in PowerShell\nDESCRIPTION: This syntax shows the default parameter set for the Remove-TestResources.ps1 script, which includes optional BaseName, SubscriptionId and ServiceDirectory parameters along with other configuration options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-BaseName <String>] [-SubscriptionId <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure App Configuration Provider Library using pip (commandline)\nDESCRIPTION: This command uses pip, the Python package installer, to install the necessary `azure-appconfiguration-provider` client library. This library is required to interact with Azure App Configuration from Python applications as demonstrated in the linked samples. Requires Python and pip to be installed.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\npip install azure.appconfiguration.provider\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure SCVMM Management Client in Python\nDESCRIPTION: Example code that demonstrates how to authenticate with the Azure SCVMM Management Client using DefaultAzureCredential. This requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be properly configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/scvmm/azure-mgmt-scvmm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.scvmm import SCVMM\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SCVMM(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Group with Azure CLI - PowerShell\nDESCRIPTION: Creates a new Azure resource group using the Azure CLI. The resource group is necessary for organizing related Azure resources, including Form Recognizer. The command must be run in a PowerShell shell with the Azure CLI installed, and requires specifying the resource name and location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Create a new resource group to hold the Form Recognizer resource\n# if using an existing resource group, skip this step\naz group create --name <your-resource-name> --location <location>\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Health Insights Package Versions in Markdown\nDESCRIPTION: This snippet lists two versions of the Azure Cognitive Services Health Insights client library for Python (conda) and their included packages. Both versions include the azure-healthinsights-radiologyinsights-1.0.0 package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-healthinsights.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Azure Cognitive Services Health Insights client library for Python (conda)\n\n## 2025.03.01\n\n### Packages included\n\n- azure-healthinsights-radiologyinsights-1.0.0\n\n## 2024.12.01\n\n### Packages included\n\n- azure-healthinsights-radiologyinsights-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library for Authentication using Bash\nDESCRIPTION: Installs the `azure-identity` Python package using the pip package manager. This library is required to run samples that utilize Azure Active Directory for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables in Linux\nDESCRIPTION: Shell commands to set, change, or unset the AZURE_TEST_RUN_LIVE environment variable for Linux environments, controlling test behavior against Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/cheatsheet.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport AZURE_TEST_RUN_LIVE=true\nexport AZURE_TEST_RUN_LIVE=false\nunset AZURE_TEST_RUN_LIVE\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Dependencymap Management SDK with pip\nDESCRIPTION: Commands to install the Azure Dependencymap Management SDK and Azure Identity packages using pip. These packages are required to use the Azure Dependencymap Management client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/dependencymap/azure-mgmt-dependencymap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-dependencymap\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Azure Resource Management Package List Markdown\nDESCRIPTION: Comprehensive listing of Azure Resource Management packages and their versions for Python/conda distribution, dated 2025.03.01. Includes over 140 different Azure management packages covering various Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Azure Resource Management library for Python (conda)\n\n## 2025.03.01\n\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apicenter-1.0.0\n[...remaining package list omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Adding aiohttp as a Package Requirement in Python\nDESCRIPTION: Declares 'aiohttp' as a dependency in a Python requirements file, ensuring it is installed for asynchronous HTTP operations. This is necessary for network-related functionalities, particularly asynchronous programming. There are no explicit constraints here, but compatibility with the existing Python environment and other installed packages must be considered. Input: the string 'aiohttp' in a requirements/dependencies file; Output: aiohttp package is installed on setup.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/databox/azure-mgmt-databox/dev_requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SAP Virtual Instance and Identity Libraries using pip\nDESCRIPTION: Installs the required Python packages `azure-mgmt-workloadssapvirtualinstance` and `azure-identity` using the pip package manager. These packages are necessary to interact with the Azure Workloads SAP Virtual Instance management API and handle authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/workloads/azure-mgmt-workloadssapvirtualinstance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-workloadssapvirtualinstance\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Implementing ArgumentPasser for Parametrized Tests\nDESCRIPTION: Custom decorator class to enable use of pytest.mark.parametrize with recorded tests. The ArgumentPasser class wraps the test function to accept parametrized arguments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ArgumentPasser:\n    def __call__(self, fn):\n        # _wrapper accepts the `a` and `b` arguments we want to parametrize with\n        def _wrapper(test_class, a, b, **kwargs):\n            fn(test_class, a, b, **kwargs)\n        return _wrapper\n```\n\n----------------------------------------\n\nTITLE: Transforming dtTimestamp Parameter Name\nDESCRIPTION: AutoRest directive to rename the 'dt-timestamp' parameter to 'timestamp' in the generated code for better consistency.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.paths..parameters[*]\n    transform: >\n      if ($.name === \"dt-timestamp\") {\n        $[\"x-ms-client-name\"] = \"timestamp\";\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Evaluators\nDESCRIPTION: Implementation of custom evaluators including a function-based evaluator for response length and a class-based evaluator for blocklist checking\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Custom evaluator as a function to calculate response length\ndef response_length(response, **kwargs):\n    return len(response)\n\n# Custom class based evaluator to check for blocked words\nclass BlocklistEvaluator:\n    def __init__(self, blocklist):\n        self._blocklist = blocklist\n\n    def __call__(self, *, response: str, **kwargs):\n        score = any([word in answer for word in self._blocklist])\n        return {\"score\": score}\n\nblocklist_evaluator = BlocklistEvaluator(blocklist=[\"bad, worst, terrible\"])\n\nresult = response_length(\"The capital of Japan is Tokyo.\")\nresult = blocklist_evaluator(answer=\"The capital of Japan is Tokyo.\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Account Key in Python\nDESCRIPTION: Code to authenticate with the Azure Remote Rendering service using an account key. This method creates a RemoteRenderingClient instance with AzureKeyCredential for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\narr_endpoint = \"<ARR_ENDPOINT>\"\n\nkey_credential = AzureKeyCredential(account_key)\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=key_credential\n)\n```\n\n----------------------------------------\n\nTITLE: Example Output for Service Principal Object ID Retrieval (Powershell)\nDESCRIPTION: This shows an example output format when retrieving the service principal's object ID using the Azure CLI command `az ad sp show --id <appId> --query objectId`. The output is the unique object ID string for the service principal.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Powershell\nCODE:\n```\n\"<your-service-principal-object-id>\"\n```\n\n----------------------------------------\n\nTITLE: Long-Running Operation Changes in Azure SDK for Python\nDESCRIPTION: Example of the change in long-running operations naming and return type, moving from msrest.polling.LROPoller to azure.core.polling.LROPoller with methods now prefixed with begin_.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Before:\npoller = client.create_or_update(resource_group_name, name, parameters)\nresult = poller.result()\n\n# After:\npoller = client.begin_create_or_update(resource_group_name, name, parameters)\nresult = poller.result()\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Package List Markdown\nDESCRIPTION: Markdown formatted list of Azure Management SDK packages and their versions organized by release dates. Includes multiple releases showing version progression of packages over time.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Packages included\n\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apimanagement-3.0.0\n- azure-mgmt-appconfiguration-2.0.0\n[...additional packages truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Principal Object ID using Azure CLI (Powershell)\nDESCRIPTION: This Azure CLI command queries Azure Active Directory to retrieve the `objectId` of a service principal, identified by its `appId`. The object ID might be needed for specific Azure configurations or role assignments.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Powershell\nCODE:\n```\naz ad sp show --id <appId> --query objectId\n```\n\n----------------------------------------\n\nTITLE: Implementing Adversarial Simulator\nDESCRIPTION: Example demonstrating setup and usage of adversarial simulator for testing AI applications against adversarial scenarios\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.evaluation.simulator import AdversarialSimulator, AdversarialScenario\nfrom azure.identity import DefaultAzureCredential\nazure_ai_project = {\n    \"subscription_id\": <subscription_id>,\n    \"resource_group_name\": <resource_group_name>,\n    \"project_name\": <project_name>\n}\nscenario = AdversarialScenario.ADVERSARIAL_QA\nsimulator = AdversarialSimulator(azure_ai_project=azure_ai_project, credential=DefaultAzureCredential())\n\noutputs = asyncio.run(\n    simulator(\n        scenario=scenario,\n        max_conversation_turns=1,\n        max_simulation_results=3,\n        target=callback\n    )\n)\n\nprint(outputs.to_eval_qr_json_lines())\n```\n\n----------------------------------------\n\nTITLE: Installing azure-core-experimental with pip (Bash)\nDESCRIPTION: This command uses the pip package manager to install the `azure-core-experimental` library for Python. This library provides experimental features for Azure SDKs and requires pip to be installed and available in the system's PATH.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-experimental/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-core-experimental\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger-to-SDK Generation Targets in YAML\nDESCRIPTION: Specifies which language SDKs should be generated from the Swagger definition, including Python (track2), Java, Go, JavaScript, Node.js, and Ruby with post-generation scripts.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nswagger-to-sdk:\n  - repo: azure-sdk-for-python-track2\n  - repo: azure-sdk-for-java\n  - repo: azure-sdk-for-go\n  - repo: azure-sdk-for-js\n  - repo: azure-sdk-for-node\n  - repo: azure-sdk-for-ruby\n    after_scripts:\n      - bundle install && rake arm:regen_all_profiles['azure_mgmt_network']\n```\n\n----------------------------------------\n\nTITLE: Running Azure SDK Health Report Generation Script (Python)\nDESCRIPTION: Executes the main Python script to generate the health status report for the Azure SDK. This command assumes all prerequisites have been met, including setting the GH_TOKEN environment variable.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/repo_health_status_report/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython output_health_report.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure Personalizer SDK Runtime Configuration\nDESCRIPTION: YAML configuration defining the input Swagger file, output folder, and client title for the Azure Personalizer SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninput-file: https://github.com/Azure/azure-rest-api-specs/blob/e24bbf6a66cb0a19c072c6f15cee163acbd7acf7/specification/cognitiveservices/data-plane/Personalizer/preview/2022-09-01-preview/Personalizer.json\noutput-folder: ../azure/ai/personalizer\ntitle: PersonalizerClient\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Python Packages Using pip - Bash\nDESCRIPTION: This snippet shows the Bash commands to install the required Python packages for working with the Microsoft Azure SDK. It installs the main SDK package (using a placeholder for the actual package name) and the azure-identity package for authentication support. Users must have Python and pip installed before executing these commands. These commands should be run in the project environment where the SDK will be used.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/packaging_tools/templates/packaging_files/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install {{package_name}}\\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Implementing Simulator Callback\nDESCRIPTION: Implementation of a callback function for simulator integration with AI applications\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def callback(\n    messages: Dict[str, List[Dict]],\n    stream: bool = False,\n    session_state: Any = None,\n    context: Optional[Dict[str, Any]] = None,\n) -> dict:\n    messages_list = messages[\"messages\"]\n    # Get the last message from the user\n    latest_message = messages_list[-1]\n    query = latest_message[\"content\"]\n    # Call your endpoint or AI application here\n    # response should be a string\n    response = call_to_your_application(query, messages_list, context)\n    formatted_response = {\n        \"content\": response,\n        \"role\": \"assistant\",\n        \"context\": \"\",\n    }\n    messages[\"messages\"].append(formatted_response)\n    return {\"messages\": messages[\"messages\"], \"stream\": stream, \"session_state\": session_state, \"context\": context}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Support Management Client\nDESCRIPTION: This code demonstrates how to authenticate with the Azure Support Management client using DefaultAzureCredential. It requires environment variables for Azure client ID, tenant ID, client secret, and subscription ID to be set.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/support/azure-mgmt-support/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.support import MicrosoftSupport\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftSupport(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Generating Azure File Storage SDK for Python\nDESCRIPTION: Commands to navigate to the swagger folder and generate the Python SDK using Autorest v3.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest --v3 --python\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Editable Mode with pip\nDESCRIPTION: This code snippet specifies a pip installation requirement that installs the Azure SDK tools package in editable mode from a relative path. Using the -e flag allows changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datashare/azure-mgmt-datashare/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Azure SDK Tools Package for Development\nDESCRIPTION: This snippet specifies a dependency on the Azure SDK tools package located in a relative path. The -e flag indicates an editable install, which means changes to the source code will be reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/costmanagement/azure-mgmt-costmanagement/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode using pip\nDESCRIPTION: Installs the Azure SDK tools package in editable/development mode from a relative path. The -e flag indicates an editable installation, allowing changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-mgmt-maps/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Digitaltwins Core Package in Python\nDESCRIPTION: This code snippet demonstrates how to import the azure-digitaltwins-core package, which is the actual client library for Azure Digitaltwins. It's provided as an example of where to find the usable Digitaltwins client libraries.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-digitaltwins-nspkg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.digitaltwins.core import DigitalTwinsClient\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library via pip (Powershell)\nDESCRIPTION: This command installs the `azure-identity` library using pip in Powershell. This library provides various credential types, including `DefaultAzureCredential`, needed for authenticating the Attestation client with Azure Active Directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Powershell\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Server and Groups in Python\nDESCRIPTION: Registers callbacks to handle messages from the application server and from groups the client has joined.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Registers a listener for the \"server-message\". The callback will be invoked when your application server sends message to the connectionID, to or broadcast to all connections.\nclient.subscribe(CallbackType.SERVER_MESSAGE, lambda e: print(f\"Received message {e.data}\"))\n\n# Registers a listener for the \"group-message\". The callback will be invoked when the client receives a message from the groups it has joined.\nclient.subscribe(CallbackType.GROUP_MESSAGE, lambda e: print(f\"Received message from {e.group}: {e.data}\"))\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Changes in Azure SDK for Python\nDESCRIPTION: Demonstrates the simplification of the exception hierarchy, with most exceptions now being azure.core.exceptions.HttpResponseError instead of CloudError.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Before:\ntry:\n    result = client.create_or_update(resource_group_name, name, parameters)\nexcept msrestazure.azure_exceptions.CloudError as e:\n    print(e)\n\n# After:\ntry:\n    result = client.begin_create_or_update(resource_group_name, name, parameters)\nexcept azure.core.exceptions.HttpResponseError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Package Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet lists local package dependencies for the Azure SDK for Python project. It includes references to internal tools, resource management, and identity packages using editable install mode (-e flag).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/consumption/azure-mgmt-consumption/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Adding Version-specific Information in Python Azure SDK Docstrings\nDESCRIPTION: Example of adding version-specific information to Azure SDK docstrings using the versionadded directive.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/docstring.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. versionadded:: <version_number>\n```\n\n----------------------------------------\n\nTITLE: Installing Conda Build Tools for Azure SDK Development\nDESCRIPTION: Command to install the Azure SDK tools required for building conda packages. This installs the tools with the build and conda extras from the tools/azure-sdk-tools directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/conda-builds.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd <repo root>\npip install \"tools/azure-sdk-tools[build,conda]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure AI Inference Tests (Bash)\nDESCRIPTION: Commands to install the required dependencies for running Azure AI Inference tests. This includes installing development requirements and the Azure AI Inference package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-inference/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r dev_requirements.txt\npip install azure-ai-inference\n```\n\n----------------------------------------\n\nTITLE: Azure Search Documents Package Versions\nDESCRIPTION: Package version listing showing the evolution of azure-search-documents from version 11.1.0 to 11.5.2 across quarterly releases\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-search-documents.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- azure-search-documents-11.5.2\n- azure-search-documents-11.4.0\n- azure-search-documents-11.3.0\n- azure-search-documents-11.2.2\n- azure-search-documents-11.2.1\n- azure-search-documents-11.2.0\n- azure-search-documents-11.1.0\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Azure SDK Python Project\nDESCRIPTION: This snippet lists the required dependencies for the Azure SDK Python project, including local package references, Azure-related packages, and third-party libraries. It specifies version requirements for some packages and includes development tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../core/azure-core\n-e ../../identity/azure-identity\n-e ../azure-keyvault-keys\n../../nspkg/azure-keyvault-nspkg\naiohttp>=3.0\nazure-storage-blob==12.6.0\nparameterized>=0.7.3\npython-dateutil>=2.8.0\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Web PubSub Client Connection in Python\nDESCRIPTION: Creates a WebPubSubClient instance using a client access URL and establishes a connection. The context manager ensures proper resource management.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.messaging.webpubsubclient import WebPubSubClient\n\nclient = WebPubSubClient(\"<<client-access-url>>\")\nwith client:\n    # The client can join/leave groups, send/receive messages to and from those groups all in real-time\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CDN Management Packages - Bash\nDESCRIPTION: This snippet demonstrates the use of pip to install the required Azure CDN management client library and identity module. The packages 'azure-mgmt-cdn' and 'azure-identity' must be installed before using the Python management client. Run these commands in your terminal; no additional input or configuration is required.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cdn/azure-mgmt-cdn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-cdn\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing openai Package using Bash\nDESCRIPTION: Installs the `openai` Python package using pip. This package is needed to interact with OpenAI models deployed in Azure AI Foundry via the `AzureOpenAI` client.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Creating SearchClient with Microsoft Entra ID Authentication\nDESCRIPTION: Python code snippet demonstrating how to create a SearchClient using Microsoft Entra ID authentication via DefaultAzureCredential, which supports multiple authentication methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.search.documents import SearchClient\n\nservice_endpoint = os.getenv(\"AZURE_SEARCH_SERVICE_ENDPOINT\")\nindex_name = os.getenv(\"AZURE_SEARCH_INDEX_NAME\")\ncredential = DefaultAzureCredential()\n\nsearch_client = SearchClient(service_endpoint, index_name, credential)\n```\n\n----------------------------------------\n\nTITLE: Filtering Customer-Reported Bugs Query\nDESCRIPTION: GitHub issue query filter used to track customer-reported bugs that have been open for more than 90 days\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/repo_health_status.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nis:open is:issue label:customer-reported label:Client -label:issue-addressed -label:question -label:needs-author-feedback -label:feature-request label:\"[library-label]\" created:\"[<90days]\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Elastic Management Client\nDESCRIPTION: Python code demonstrating how to authenticate with Azure using DefaultAzureCredential and create an Elastic Management client. Requires environment variables for Azure credentials and subscription ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/elastic/azure-mgmt-elastic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.elastic import MicrosoftElastic\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftElastic(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Attestation Client in Python\nDESCRIPTION: Creates an instance of the `AttestationClient` using a specified service endpoint URI and `DefaultAzureCredential` for authentication. This client object is used for subsequent interactions with the Azure Attestation service.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nattest_client = AttestationClient(\n    endpoint=base_uri,\n    credential=DefaultAzureCredential())\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Paths and Adding Dummy Query Parameters in Swagger Document\nDESCRIPTION: YAML directive to remove ShareName, Directory, and FileName from paths and add dummy query parameters to avoid collisions in the swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/swagger/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $(\"x-ms-paths\")\n  transform: >\n   Object.keys($).map(id => {\n     if (id.includes('/{shareName}/{directory}/{fileName}'))\n     {\n       $[id.replace('/{shareName}/{directory}/{fileName}', '?dummyFile')] = $[id];\n       delete $[id];\n     )\n     else if (id.includes('/{shareName}/{directory}'))\n     {\n       $[id.replace('/{shareName}/{directory}', '?dummyDir')] = $[id];\n       delete $[id];\n     )\n     else if (id.includes('/{shareName}'))\n     {\n       $[id.replace('/{shareName}', '?dummyShare')] = $[id];\n       delete $[id];\n     )\n   });\n```\n\n----------------------------------------\n\nTITLE: Setting Log Analytics Workspace ID\nDESCRIPTION: Sets the Log Analytics workspace ID to use for querying. It's currently set to use a demo workspace, but it's recommended to use your own if available.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLOGS_WORKSPACE_ID = \"DEMO_WORKSPACE\"\n```\n\n----------------------------------------\n\nTITLE: Deactivating Python Virtual Environment - Shell\nDESCRIPTION: Deactivates the Python virtual environment, reverting the shell back to its default environment. No parameters or outputs. Recommended after completing all package-dependent operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/cloudshell.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Document Translation Tests\nDESCRIPTION: Configures the required environment variables to connect to Azure resources for testing. Includes the translation endpoint, storage account name, and storage access key.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/tests/perfstress_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOCUMENT_TRANSLATION_ENDPOINT=<translation-endpoint>\nDOCUMENT_TRANSLATION_STORAGE_NAME=<storage-blob-account-name>\nDOCUMENT_TRANSLATION_STORAGE_KEY=<storage-shared-key>\n```\n\n----------------------------------------\n\nTITLE: Installing Beta Version of Azure Management Package\nDESCRIPTION: Shows how to install a beta version of an Azure management package using pip. This is for packages still in Public Preview, containing a 'b' in the version number.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/python_mgmt_migration_guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-beta-service-example==10.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Tables API Key in Python\nDESCRIPTION: Demonstrates how to authenticate a client using a Tables API key. This snippet references separate sample files for both synchronous and asynchronous authentication methods.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# See sample_authentication.py and sample_authentication_async.py for authentication examples\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Markdown formatted changelog documenting version history starting with initial beta release 1.0.0b1 and placeholder for upcoming 1.0.0b2 release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.0b1 (2023-03-01)\n\n- Initial Release\n```\n\n----------------------------------------\n\nTITLE: Invoking Direct Method in Python\nDESCRIPTION: Example showing how to invoke a direct method on an IoT device using both the Video Analyzer Edge SDK and Azure IoT Hub SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nset_method_request = PipelineTopologySetRequest(pipeline_topology=pipeline_topology)\ndirect_method = CloudToDeviceMethod(method_name=set_method_request.method_name, payload=set_method_request.serialize())\nregistry_manager = IoTHubRegistryManager(connection_string)\n\nregistry_manager.invoke_device_module_method(device_id, module_d, direct_method)\n```\n\n----------------------------------------\n\nTITLE: Using DefaultAzureCredential with custom authority in Azure Government\nDESCRIPTION: Shows how to initialize DefaultAzureCredential with a specific authority parameter for use in Azure Government cloud instead of the default Azure Public Cloud.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/CHANGELOG.md#2025-04-23_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential, KnownAuthorities\ncredential = DefaultAzureCredential(authority=KnownAuthorities.AZURE_GOVERNMENT)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role Definitions in Azure Synapse\nDESCRIPTION: Shows how to fetch and list available role definitions in an Azure Synapse workspace. This provides information about what roles can be assigned to principals.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_data/match_trial_clinical_note.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# List role definitions\nrole_definitions = access_control_client.list_role_definitions()\nfor role_definition in role_definitions:\n    print(role_definition)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Library using pip\nDESCRIPTION: Command to install the azure-identity package which is required for authentication with Azure Active Directory. This package provides various credential types for authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Corrected Client Configuration Import Path (v0.2.0+)\nDESCRIPTION: Specifies the correct path (`azure.mgmt.apimanagement`) for importing the `ApiManagementClientConfiguration`. Importing it from the internal `azure.mgmt.apimanagement.api_management_client` submodule is no longer supported as of v0.2.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nazure.mgmt.apimanagement\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Execution Tags in Autorest YAML\nDESCRIPTION: This YAML configuration defines a batch process for Autorest. It specifies multiple generation runs using tags (`release_runtime_1_1` and `release_authoring_1_1`), allowing different configurations to be applied based on the tag used during execution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/swagger/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  - tag: release_runtime_1_1\n  - tag: release_authoring_1_1\n```\n\n----------------------------------------\n\nTITLE: Installing Local Azure Image Analysis Python SDK Wheel via pip\nDESCRIPTION: Installs the locally built Azure Image Analysis Python SDK wheel file using pip from the `dist` directory. The `--user` flag installs it for the current user, and `--force-reinstall` ensures it overwrites any existing version. The version number (`1.0.0b1`) in the filename must be updated to match the actual built wheel.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/vision/azure-ai-vision-imageanalysis/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install dist\\azure_ai_vision_imageanalysis-1.0.0b1-py3-none-any.whl --user --force-reinstall\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Dependencies\nDESCRIPTION: Local package references for Azure SDK development, including tools and identity packages installed in editable mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apicenter/azure-mgmt-apicenter/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Health Deidentification Python Library\nDESCRIPTION: This command uses pip, the Python package installer, to install the `azure-health-deidentification` client library. This package is required to interact with the Azure Health Deidentification service from Python applications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-health-deidentification/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-health-deidentification\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line specifies a development dependency for the Azure SDK for Python project. It uses the -e flag to install the package in editable mode from a local directory, which contains Azure SDK tools.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-keyvault-nspkg/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Containerservicefleet Client\nDESCRIPTION: Example showing how to authenticate the ContainerServiceFleetMgmtClient using DefaultAzureCredential and environment variables for Azure subscription ID.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservicefleet/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerservicefleet import ContainerServiceFleetMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerServiceFleetMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Management Package with pip\nDESCRIPTION: Demonstrates how to install the Azure Compute management package using pip. This is for packages that are already generally available (GA).\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/python_mgmt_migration_guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-compute\n```\n\n----------------------------------------\n\nTITLE: Authenticating DeidentificationClient with DefaultAzureCredential\nDESCRIPTION: Creates an instance of the DeidentificationClient using DefaultAzureCredential for authentication. Requires setting environment variables for Azure Active Directory application credentials.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-health-deidentification/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from azure.health.deidentification import DeidentificationClient\n>>> from azure.identity import DefaultAzureCredential\n>>> client = DeidentificationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Schema Registry Client Library\nDESCRIPTION: Command to install the Azure Schema Registry client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-schemaregistry\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Multi-API Generation for Azure SDK\nDESCRIPTION: Configuration for generating multiple API versions in a batch process with clear output folder setting and multiapi flag.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/mgmt/swagger/multi_api/readme.python.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclear-output-folder: true\nmultiapi: true\nbatch:\n  - tag: package-2019-04\n  - tag: package-2019-02\n  - multiapiscript: true\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure DevCenter Package using pip\nDESCRIPTION: Command to install the azure-developer-devcenter package using pip. This package provides access to Azure DevCenter APIs for managing Dev Box and Environment resources.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-developer-devcenter\n```\n\n----------------------------------------\n\nTITLE: Change Property Types - YAML Directives\nDESCRIPTION: Removes x-ms-enum and enum properties from multiple models including MetricBoundaryCondition, AnomalyAlertingConfiguration, AnomalyProperty, NotificationHook and DataFeedIngestionStatus\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-model: MetricBoundaryCondition\n    transform: >\n      $[\"properties\"][\"direction\"][\"x-ms-enum\"] = undefined;\n      $[\"properties\"][\"direction\"][\"enum\"] = undefined;\n  - where-model: AnomalyAlertingConfiguration\n    transform: >\n      $[\"properties\"][\"crossMetricsOperator\"][\"x-ms-enum\"] = undefined;\n      $[\"properties\"][\"crossMetricsOperator\"][\"enum\"] = undefined;\n  - where-model: AnomalyProperty\n    transform: >\n      $[\"properties\"][\"anomalyStatus\"][\"x-ms-enum\"] = undefined;\n      $[\"properties\"][\"anomalyStatus\"][\"enum\"] = undefined;\n  - where-model: NotificationHook\n    transform: >\n      $[\"properties\"][\"hookType\"][\"x-ms-enum\"] = undefined;\n      $[\"properties\"][\"hookType\"][\"enum\"] = undefined;\n  - where-model: DataFeedIngestionStatus\n    transform: >\n      $[\"properties\"][\"status\"][\"x-ms-enum\"] = undefined;\n      $[\"properties\"][\"status\"][\"enum\"] = undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Load Tests with RPS in Python for Azure Load Testing\nDESCRIPTION: Use 'requests_per_second' and 'max_response_time_in_ms' in OptionalLoadTestConfig model to specify desired RPS for a quick load test in Azure Load Testing.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = OptionalLoadTestConfig(requests_per_second=100, max_response_time_in_ms=1000)\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Proxy in CI Pipeline YAML\nDESCRIPTION: Modification to the ci.yml file to enable the test proxy for CI pipelines. The TestProxy parameter is set to true.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/test_proxy_migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  template: ../../eng/pipelines/templates/stages/archetype-sdk-client.yml\n  parameters:\n    ServiceDirectory: eventgrid\n    TestProxy: true\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Dev Build Package - Python PIP\nDESCRIPTION: Command to install the latest development build version of an Azure SDK package using pip and a custom package index URL.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install <package-name> --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple --pre\n```\n\n----------------------------------------\n\nTITLE: Inserting Entities in azure-cosmosdb-table\nDESCRIPTION: Demonstrates how to insert entities using azure-cosmosdb-table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.cosmosdb.table import TableService\nclient = TableService(...)\ntable_name = \"tableName\"\nentity = {\n    \"PartitionKey\": \"pk0001\",\n    \"RowKey\": \"rk0001\",\n    \"StringProperty\": \"stringystring\",\n    \"BooleanProperty\": False,\n    \"IntegerProperty\": 31,\n    \"FloatProperty\": 3.14159,\n    \"BinaryProperty\": b\"binary\",\n    \"GuidProperty\": uuid.uuid4(),\n    \"DatetimeProperty\": datetime.datetime.now(),\n}\n\netag = client.insert_entity(table_name, entity)\n```\n\n----------------------------------------\n\nTITLE: Running the Performance Test Tool for Azure Monitor\nDESCRIPTION: Basic command to launch the performance testing framework without any specific test selected. This displays available tests and options.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/tests/perf_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-monitor-ingestion> perfstress\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Requirements file that lists necessary Python packages for the Azure SDK development. Includes a local Azure SDK tools package and the aiohttp async HTTP client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managementgroups/azure-mgmt-managementgroups/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Tests in YAML\nDESCRIPTION: YAML configuration to enable running library samples as part of nightly checks by adding matrix replacement parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/eng_sys_checks.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - template: ../../eng/pipelines/templates/stages/archetype-sdk-tests.yml\n    parameters:\n      ...\n      MatrixReplace:\n        - TestSamples=.*/true\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Dependencies for Azure SDK for Python\nDESCRIPTION: This snippet defines two local dependencies for the Azure SDK for Python project. It includes the Azure SDK tools from a relative path and the Azure Identity package from another relative path.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/testbase/azure-mgmt-testbase/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Authentication Key Example in Plaintext\nDESCRIPTION: This snippet shows an example of what appears to be an Azure SDK authentication key or token. Such keys are used to authenticate API requests to Azure services when using the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/tests/test_configs/compute/ssh_fake_key.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyfakekey\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Tools Path Dependency\nDESCRIPTION: Defines a relative path to the Azure SDK tools directory that should be installed with pip's editable mode (-e flag). This ensures development tools are available from the correct location.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Java SDK Configuration\nDESCRIPTION: Java specific configuration settings for SDK generation. Includes namespace, fluent settings and output folder configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/swagger/machinelearningservices/resource-manager/readme.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: true\nfluent: true\nnamespace: com.microsoft.azure.management.machinelearning.services\nlicense-header: MICROSOFT_MIT_NO_CODEGEN\npayload-flattening-threshold: 1\noutput-folder: $(azure-libraries-for-java-folder)/azure-mgmt-machinelearning/services\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Azure SDK Tools Dependency for Python\nDESCRIPTION: This line indicates a local path dependency for Azure SDK tools, typically used in development environments. It points to a relative path where the tools are located, allowing developers to use local versions for testing and development.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/labservices/azure-mgmt-labservices/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: New Azure SDK Model Parameters\nDESCRIPTION: Documents new parameters added to various Azure SDK models including IfConditionActivity, CosmosDbLinkedService, and multiple dataset types.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nModel IfConditionActivity has a new parameter user_properties\nModel CosmosDbLinkedService has a new parameter account_key\nModel GoogleBigQueryObjectDataset has new parameters folder, schema, table_name\n```\n\n----------------------------------------\n\nTITLE: Authenticating with azure-keyvault using ServicePrincipalCredentials\nDESCRIPTION: Creates a KeyVaultClient using ServicePrincipalCredentials from azure.common in the deprecated azure-keyvault library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.credentials import ServicePrincipalCredentials\nfrom azure.keyvault import KeyVaultClient\n\ncredentials = ServicePrincipalCredentials(\n    client_id=\"client id\",\n    secret=\"client secret\",\n    tenant=\"tenant id\"\n)\n\nclient = KeyVaultClient(credentials)\n```\n\n----------------------------------------\n\nTITLE: Updating DataFactoryManagementClientConfiguration Import Path in Python\nDESCRIPTION: Shows the change in the import path for `DataFactoryManagementClientConfiguration`. The import has moved from `azure.mgmt.datafactory.datafactory_management_client` to the main `azure.mgmt.datafactory` package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old import path (no longer works)\nazure.mgmt.datafactory.datafactory_management_client\n```\n\nLANGUAGE: python\nCODE:\n```\n# New import path (works)\nazure.mgmt.datafactory\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Queue SDK with Async Support\nDESCRIPTION: Command to install the Azure Storage Queue SDK with support for async operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install azure-storage-queue[aio]\n```\n\n----------------------------------------\n\nTITLE: Package Deprecation Notice in Markdown\nDESCRIPTION: Markdown documentation stating the deprecation of the Azure AI Generative Package and providing a link to the new recommended package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-generative/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Azure AI Generative Package client library for Python\n\nThis package has been deprecated and will no longer be maintained. \n\nPlease refer to new package [Azure AI Evaluation](https://pypi.org/project/azure-ai-evaluation/) for evaluating Generative AI applications that leverage Azure AI services.\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Protocol Type for Web PubSub Client\nDESCRIPTION: Shows how to specify the JSON protocol type when creating a WebPubSubClient instance.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.messaging.webpubsubclient.models import WebPubSubProtocolType\n# Change to use json.webpubsub.azure.v1\nconst client = new WebPubSubClient(\"<client-access-url>\", protocol_type=WebPubSubProtocolType.JSON);\n```\n\n----------------------------------------\n\nTITLE: Removing x-ms-pageable from Swagger document using YAML directive\nDESCRIPTION: YAML directive to remove x-ms-pageable property from GET operations in the Swagger document.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]..get\n  transform: >\n    if ($[\"x-ms-pageable\"]) { delete $[\"x-ms-pageable\"]; }\n```\n\n----------------------------------------\n\nTITLE: Configuring BearerTokenCredentialPolicy\nDESCRIPTION: Shows how to configure BearerTokenCredentialPolicy for authenticating requests with bearer tokens, including CAE support.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.pipeline.policies import BearerTokenCredentialPolicy\n\nauthentication_policy = BearerTokenCredentialPolicy(credential, scopes, enable_cae=True)\n```\n\n----------------------------------------\n\nTITLE: Executing a query with azure-loganalytics v0.1.0\nDESCRIPTION: Demonstrates how to execute a Kusto query using the legacy azure-loganalytics package with the QueryBody model.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.loganalytics.models import QueryBody\n\nquery = 'AppRequests | take 5'\nresponse = client.query(workspace_id, QueryBody(**{'query': query}))\n```\n\n----------------------------------------\n\nTITLE: Make Property Not Readonly Directive Declaration\nDESCRIPTION: Declares a directive for making properties not readonly in both swagger and openapi documents by setting readOnly to false.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ndeclare-directive:\n    make-not-readonly: >\n        [{\n        from: 'swagger-document',\n        transform: `if ($.properties[${JSON.stringify($)}]) { $.properties[${JSON.stringify($)}][\"readOnly\"] = false; }`\n        },\n        {\n        from: 'openapi-document',\n        transform: `if ($.properties[${JSON.stringify($)}]) { $.properties[${JSON.stringify($)}][\"readOnly\"] = false; }`\n        }]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure CLI for SDK Health Report Script\nDESCRIPTION: Logs in to Azure using the Azure CLI. This step is necessary to access Azure resources for generating the health report.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/repo_health_status_report/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Blob Package Requirement\nDESCRIPTION: Specifies the required azure-storage-blob package version 12.13.0 needed to run the generate_ml_sample_update.py script in the devops_tasks directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/ml_sample_tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nazure-storage-blob==12.13.0\n```\n\n----------------------------------------\n\nTITLE: Authentication with DefaultAzureCredential in azure-monitor-query v1.0.x\nDESCRIPTION: Creates a LogsQueryClient instance using DefaultAzureCredential from azure-identity for authentication in the new azure-monitor-query package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.monitor.query import LogsQueryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential=credential)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Linux\nDESCRIPTION: Commands to set required Azure authentication environment variables in Linux-based operating systems.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/sphinx/mgmt_quickstart.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_CLIENT_ID=\"__CLIENT_ID__\"\nexport AZURE_CLIENT_SECRET=\"__CLIENT_SECRET__\"\nexport AZURE_TENANT_ID=\"__TENANT_ID__\"\nexport AZURE_SUBSCRIPTION_ID=\"__SUBSCRIPTION_ID__\"\n```\n\n----------------------------------------\n\nTITLE: Authentication with ServicePrincipalCredentials in azure-loganalytics v0.1.0\nDESCRIPTION: Creates a LogAnalyticsDataClient instance using ServicePrincipalCredentials for authentication in the legacy azure-loganalytics package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.loganalytics import LogAnalyticsDataClient\nfrom msrestazure.azure_active_directory import ServicePrincipalCredentials\n\ncredential = ServicePrincipalCredentials(...)\nclient = LogAnalyticsDataClient(credentials=credential)\n```\n\n----------------------------------------\n\nTITLE: AutoRest Configuration for Python SDK - YAML\nDESCRIPTION: Defines the configuration settings and generation options for running AutoRest against Azure Communication Identity Swagger files, targeting the Python SDK. It specifies the tag, required Swagger input, output location, namespace, generated class title, header/licensing details, payload flattening, and various Python-specific generator flags. Dependencies include AutoRest and access to the referenced Azure Swagger definition. Inputs determine code structure and output destination; no direct outputs, but essential for the code generation process.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/swagger/SWAGGER.md#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ntag: package-2023-10\nrequire:\n    -  https://raw.githubusercontent.com/Azure/azure-rest-api-specs/5797d78f04cd8ca773be82d2c99a3294009b3f0a/specification/communication/data-plane/Identity/readme.md\noutput-folder: ../azure/communication/identity/_generated/\nnamespace: azure.communication.identity\ntitle: Communication Identity Client\nlicense-header: MICROSOFT_MIT_NO_VERSION\npayload-flattening-threshold: 3\nno-namespace-folders: true\nclear-output-folder: true\nv3: true\npython: true\nmodels-mode: msrest\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Azure SDK Tools Path for Editable Installation\nDESCRIPTION: Specifies a local path to Azure SDK tools using pip's editable install mode (-e flag). This allows developers to use a local version of the tools during development or testing, with changes to the source code reflecting immediately without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-contentmoderator/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies (Plaintext)\nDESCRIPTION: Lists the required Python packages and their specific versions for the project, typically used in a requirements file. This ensures that the correct versions of 'packaging', 'pyparsing', 'six', and 'setuptools' are installed using package managers like pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/tools/azure-sdk-tools/ci_tools/versioning/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackaging==23.1\npyparsing==2.4.5\nsix==1.13.0\nsetuptools==74.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating User Message\nDESCRIPTION: Creates a new message in the conversation thread with user content.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMESSAGE = \"Can you send me an email with weather information for Seattle?\"\n\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=MESSAGE,\n)\nprint(f\"Created message, ID: {message.id}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Edgezones Management Client Library\nDESCRIPTION: Commands to install the Azure Edgezones Management Client Library and Azure Identity using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/edgezones/azure-mgmt-edgezones/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-edgezones\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Release History Entry for Version 1.0.0b3\nDESCRIPTION: Unreleased version noting the deprecation of Python 2.7 support and requirement for Python 3.6+.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b3 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n```\n\n----------------------------------------\n\nTITLE: Processing Agent Run\nDESCRIPTION: Executes the agent run and handles the response or potential errors.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrun = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id)\n\nprint(f\"Run finished with status: {run.status}\")\n\nif run.status == \"failed\":\n    print(f\"Run failed: {run.last_error}\")\n\nprint(f\"Run ID: {run.id}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 for Azure Personalizer SDK Generation\nDESCRIPTION: Command to install Autorest v3 globally using npm. This is a prerequisite for generating the Azure Personalizer SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Modified EventHub Implementation\nDESCRIPTION: Example of customizing the EventHub class to handle specific event sending scenarios.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef SendAndReceiveEvents(self, partitionID, events):\n    producer = self.client.create_producer(partition_id=partitionID)\n    producer.send(events)\n    producer.close()\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Version and Date in Markdown\nDESCRIPTION: Shows how to format a release version number and date in a Markdown header.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.2.0b2 (2023-06-16)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools Package\nDESCRIPTION: Pip installation directive using -e flag for installing Azure SDK tools package from a relative path. The -e flag enables installation in editable/development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/policyinsights/azure-mgmt-policyinsights/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key with Azure CLI\nDESCRIPTION: Bash command to list the API keys for a Document Intelligence resource using Azure CLI.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/documentintelligence/azure-ai-documentintelligence/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n----------------------------------------\n\nTITLE: Renaming EventRoute Class\nDESCRIPTION: AutoRest directive to rename the EventRoute class to DigitalTwinsEventRoute in the generated Python SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/swagger/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: swagger-document\n    where: $.definitions.EventRoute\n    transform: >\n      $[\"x-ms-client-name\"] = \"DigitalTwinsEventRoute\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Device Update SDK with pip\nDESCRIPTION: Command to install the Device Update for IoT Hub client library for Python using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-iot-deviceupdate\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AI Agent\nDESCRIPTION: Creates an AI agent with specified model, name, instructions, and toolset.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent = project_client.agents.create_agent(\n    model=os.environ[\"MODEL_DEPLOYMENT_NAME\"],\n    name=AGENT_NAME,\n    instructions=\"You are a helpful assistant\",\n    toolset=toolset,\n)\n\nprint(f\"Created agent, ID: {agent.id}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Defender EASM Package from Source\nDESCRIPTION: This command installs the Azure Defender EASM package from the source code using setup.py.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py intall\n```\n\n----------------------------------------\n\nTITLE: Authenticating Clients in azure-cosmosdb-table\nDESCRIPTION: Demonstrates how to authenticate and create a TableService client using azure-cosmosdb-table.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.cosmosdb.table import TableService\n\nclient = TableService(account_name=os.environ[\"ACCOUNT_URI\"], account_key=os.environ[\"ACCOUNT_KEY\"])\n```\n\n----------------------------------------\n\nTITLE: Running Autorest Generation\nDESCRIPTION: Commands to navigate to swagger folder and run Autorest generation using the README configuration.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/swagger/README.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd <swagger-folder>\nautorest .\\README.md\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Terraform Management Dependencies\nDESCRIPTION: Commands to install the required Azure packages for Terraform management using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/terraform/azure-mgmt-terraform/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-mgmt-terraform\npip install azure-identity\n```\n\n----------------------------------------\n\nTITLE: Listing Conversation Messages\nDESCRIPTION: Retrieves and displays all messages in the conversation thread.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor message in project_client.agents.list_messages(thread.id, order=\"asc\").data:\n    print(f\"Role: {message.role}\")\n    print(f\"Content: {message.content[0].text.value}\")\n    print(\"-\" * 40)\n```\n\n----------------------------------------\n\nTITLE: Instantiating the API Management Client (v1.0.0b1+)\nDESCRIPTION: Demonstrates the updated way to initialize the Azure API Management client from version 1.0.0b1 onwards. It uses the renamed 'credential' parameter (accepting azure-identity objects) and passes configuration options like 'enable_logging' directly as keyword arguments, replacing the old 'config' attribute.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nMyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Development Dependencies\nDESCRIPTION: Lists the required local package dependencies that need to be installed via pip, including Azure SDK tools and Azure Identity packages using relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/paloaltonetworks/azure-mgmt-paloaltonetworksngfw/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Installation for azure-sdk-tools (requirements.txt)\nDESCRIPTION: This line specifies an editable (`-e`) installation using `pip` for the Python package located at the relative path `../../../tools/azure-sdk-tools`. Editable installs link the package source directory to the environment, allowing code changes to be effective without reinstalling. This requires `pip` to be available and the specified path to be valid.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/serialconsole/azure-mgmt-serialconsole/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency on `aiohttp` (Pip Requirements)\nDESCRIPTION: Declares a dependency on the `aiohttp` package, typically fetched from PyPI by `pip`. `aiohttp` provides asynchronous HTTP client/server capabilities for Python, often used in Azure SDK async operations.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/qumulo/azure-mgmt-qumulo/dev_requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: Pip Requirements\nCODE:\n```\naiohttp\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog detailing version history, features, breaking changes, bug fixes and other updates across multiple releases of the Azure Purview Share client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.0b3 (2023-07-18)\n\n### Features Added\n\n- Added the new share resources capability that allows listing resources associated with sent and received shares.\n- Added missing test cases to test_sent_shares and test_received_shares\n\n### Breaking Changes\n\n- In _operations.py, the `skip_token` parameter was removed from list definitions in favor of placing it within `nextLink` \n- The `orderby` parameter in all definitions that relate to listing shares has been renamed to `order_by`\n\n### Bugs Fixed\n\n- Fixed Samples and Tests\n- Updated broken link in samples README to point to Azure/azure-python-sdk instead of developer fork\n\n### Other Changes\n\n- Updated and fixed README according to feedback\n- Migrated test recordings to the azure-sdk-assets repo\n- Added more sanitizers to conftest.py\n\n## 1.0.0b2 (2023-06-05)\n\n### Bugs Fixed\n\n- Fixed Samples and Tests\n\n## 1.0.0b1 (2023-03-30)\n\n### New Features\n\n- Initial release of the Purview Share client library for python\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test Discovery\nDESCRIPTION: Command to list available performance tests using the perfstress tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-containerregistry> cd tests\n(env) ~/azure-containerregistry/tests> perfstress\n```\n\n----------------------------------------\n\nTITLE: Importing Tests in Other Projects\nDESCRIPTION: Example of incorporating smoke tests into another Python project.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/common/smoketest/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom KeyVaultSecrets import KeyVault\n\n...\n\ndef  myTests():\n    console.log(\"Smoke Test imported from other project\")\n    KeyVault().Run()\n\nmyTests()\notherFunction()\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Video Analyzer Edge Package\nDESCRIPTION: Command to install the Azure Video Analyzer Edge client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-media-videoanalyzer-edge\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Comprehensive changelog documenting the evolution of the Azure Alerts Management SDK for Python, including feature additions, breaking changes, and version updates from initial release to current beta versions.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/alertsmanagement/azure-mgmt-alertsmanagement/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0b2 (2022-12-26)\n\n### Features Added\n\n  - Added operation group PrometheusRuleGroupsOperations\n\n## 2.0.0b1 (2022-08-22)\n\n### Features Added\n\n  - Added operation group AlertProcessingRulesOperations\n  - Model Condition has a new parameter field\n  - Model Essentials has a new parameter action_status\n  - Model Essentials has a new parameter description\n  - Model Operation has a new parameter origin\n  - Model PatchObject has a new parameter enabled\n\n### Breaking Changes\n\n  - Model PatchObject no longer has parameter status\n  - Operation AlertsOperations.change_state has a new parameter comment\n  - Removed operation group ActionRulesOperations\n  - Removed operation group SmartDetectorAlertRulesOperations\n\n## 1.0.0 (2021-03-16)\n\n- GA release\n\n## 1.0.0b1 (2020-11-20)\n\nThis is beta preview version.\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n\n\n## 0.2.0rc2 (2019-07-31)\n\n**Bugfix**\n\n  - Fixed autogenerated code problems\n\n## 0.2.0rc1 (2019-07-29)\n\n**Features**\n\n  - Added operation AlertsOperations.meta_data\n  - Added operation group SmartDetectorAlertRulesOperations\n  - Added operation group ActionRulesOperations\n\n**General breaking changes**\n\nThis version uses a next-generation code generator that *might*\nintroduce breaking changes if from some import. In summary, some modules\nwere incorrectly visible/importable and have been renamed. This fixed\nseveral issues caused by usage of classes that were not supposed to be\nused in the first place.\n\n  - AlertsManagementClient cannot be imported from\n    `azure.mgmt.alertsmanagement.alerts_management_client` anymore\n    (import from `azure.mgmt.alertsmanagement` works like before)\n  - AlertsManagementClientConfiguration import has been moved from\n    `azure.mgmt.alertsmanagement.alerts_management_client` to\n    `azure.mgmt.alertsmanagement`\n  - A model `MyClass` from a \"models\" sub-module cannot be imported\n    anymore using `azure.mgmt.alertsmanagement.models.my_class`\n    (import from `azure.mgmt.alertsmanagement.models` works like\n    before)\n  - An operation class `MyClassOperations` from an `operations`\n    sub-module cannot be imported anymore using\n    `azure.mgmt.alertsmanagement.operations.my_class_operations`\n    (import from `azure.mgmt.alertsmanagement.operations` works like\n    before)\n\nLast but not least, HTTP connection pooling is now enabled by default.\nYou should always use a client as a context manager, or call close(), or\nuse no more than one client per process.\n\n## 0.1.0 (2018-09-17)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Combined Package Components\nDESCRIPTION: Lists the Azure Storage components that get combined into a single conda package distribution.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-recipes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nqueue, blob, file, and datalake\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Health Deidentification Package with pip\nDESCRIPTION: Command to install the Azure Health Deidentification client library using pip package manager.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthdataaiservices/azure-health-deidentification/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install azure-health-deidentification\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Markdown formatted release history documenting version 2.0.0 as the initial release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-purview-nspkg/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 2.0.0 (2021-03-08)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure Storage Account using Azure CLI - Bash\nDESCRIPTION: This snippet shows how to create a new Azure resource group and a storage account using Azure CLI commands. The resource group organizes resources, while the storage account is required to store and retrieve blobs and change feed data. Ensure az CLI is installed and authenticated. Edit the resource group name, location, and storage account name as appropriate.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n----------------------------------------\n\nTITLE: Triggering Release with PowerShell Script\nDESCRIPTION: PowerShell command to run the Prepare-Release.ps1 script for updating DevOps release work items before releasing the package.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/deprecation_process.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nazure-sdk-for-python> cd eng/common/scripts\nazure-sdk-for-python/eng/common/scripts> ./Prepare-Release.ps1 -PackageName azure-mypackage -ServiceDirectory mypackage -ReleaseDate MM/DD/YYYY\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode\nDESCRIPTION: This directive installs Azure SDK tools in development mode (-e flag) from a relative path. Development mode allows changes to the source code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-personalizer/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Playwrighttesting Client\nDESCRIPTION: Initializes the PlaywrightTestingMgmtClient using DefaultAzureCredential and subscription ID from environment variables. Requires AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET, and AZURE_SUBSCRIPTION_ID to be configured.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/playwrighttesting/azure-mgmt-playwrighttesting/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.playwrighttesting import PlaywrightTestingMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PlaywrightTestingMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n----------------------------------------\n\nTITLE: Version History Entry - Azure SDK Python v2.1.0\nDESCRIPTION: Release notes documenting new operations added to AccessOperations and OrganizationOperations classes in version 2.1.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/confluent/azure-mgmt-confluent/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0 (2024-03-18)\n\n### Features Added\n\n  - Added operation AccessOperations.create_role_binding\n  - Added operation AccessOperations.delete_role_binding\n  - Added operation AccessOperations.list_role_binding_name_list\n  - Added operation OrganizationOperations.create_api_key\n  - Added operation OrganizationOperations.delete_cluster_api_key\n  - Added operation OrganizationOperations.get_cluster_api_key\n  - Added operation OrganizationOperations.get_cluster_by_id\n  - Added operation OrganizationOperations.get_environment_by_id\n  - Added operation OrganizationOperations.get_schema_registry_cluster_by_id\n  - Added operation OrganizationOperations.list_clusters\n  - Added operation OrganizationOperations.list_environments\n  - Added operation OrganizationOperations.list_regions\n  - Added operation OrganizationOperations.list_schema_registry_clusters\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Web PubSub Client Package for Python\nDESCRIPTION: Command to install the Azure Web PubSub client library using pip.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-messaging-webpubsubclient\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Release History Changelog\nDESCRIPTION: Markdown formatted changelog detailing version history and changes across multiple releases of the Azure SDK for Python. Documents features, breaking changes, bug fixes and other modifications.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.0.2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 1.0.1 (2024-06-24)\n\n### Bugs Fixed\n  - Fixed a bug where Entra Id authentication couldn't be used with custom endpoint.\n\n## 1.0.0 (2024-05-23)\n\n### Features Added\n  - Added support for Entra Id authentication.\n\n### Breaking Changes\n\n  - All calls to the client using parameter `content` have been changed to use parameter `body`.\n  - Users can call methods using just a string type instead of complex objects.\n  - `get_languages` methods were changed to `get_supported_languages`.\n  - renamed `from_parameter` to `from_language`.\n  - renamed `to` parameter to `to_language`.\n\n## 1.0.0b1 (2023-04-19)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Renaming Service Bus Description Classes in Python\nDESCRIPTION: Renamed entity description classes for consistency: `QueueDescription` to `QueueProperties`, `TopicDescription` to `TopicProperties`, `SubscriptionDescription` to `SubscriptionProperties`, and `RuleDescription` to `RuleProperties`.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nQueueDescription -> QueueProperties\nTopicDescription -> TopicProperties\nSubscriptionDescription -> SubscriptionProperties\nRuleDescription -> RuleProperties\n```\n\n----------------------------------------\n\nTITLE: Monitor Client Import Change\nDESCRIPTION: Shows the correct way to import the Monitor Management Client after the import path changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.mgmt.monitor import MonitorManagementClient\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure SDK Python Package Dependencies\nDESCRIPTION: Lists package dependencies using -e flag for local development packages. References azure-sdk-tools from the tools directory and azure-identity from the identity directory.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managednetworkfabric/azure-mgmt-managednetworkfabric/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Building Python Package Manually\nDESCRIPTION: Command to manually build an Azure management service package, generating both source distribution (sdist) and wheel files. Requires the wheel package to be installed in the environment.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/release.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython .\\build_package.py azure-mgmt-myservice\n```\n\n----------------------------------------\n\nTITLE: Getting API Keys using Azure PowerShell\nDESCRIPTION: PowerShell command using Azure CLI to retrieve API keys for a Health Insights resource.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/README.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Vault URI and Managed Identity Client ID for sfmitestuser - XML\nDESCRIPTION: Provides environment variables in ServiceManifest.xml to inject the Azure Key Vault URI and the client ID of a user-assigned managed identity for the 'sfmitestuser' application. Replace placeholders with the actual URLs and IDs. The application will use these values for authentication with Azure services.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/tests/managed-identity-live/service-fabric/service_fabric.md#2025-04-23_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<EnvironmentVariable Name=\"AZURE_IDENTITY_TEST_VAULT_URL\" Value=\"<KEY_VAULT_URL>\"/>\\n<EnvironmentVariable Name=\"AZURE_IDENTITY_TEST_MANAGED_IDENTITY_CLIENT_ID\" Value=\"<AdminUser client ID>\"/>\n```\n\n----------------------------------------\n\nTITLE: Release Notes Documentation in Markdown\nDESCRIPTION: Comprehensive changelog entries documenting the evolution of the Azure SDK for Python management groups package, including version updates, feature additions, breaking changes, and initial release notes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managementgroups/azure-mgmt-managementgroups/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.1.0b2 (2024-11-05)\n\n### Other Changes\n\n  - Update dependencies\n\n## 1.1.0b1 (2022-11-01)\n\n### Features Added\n\n  - Added model EntitySearchType\n  - Added model EntityViewParameterType\n  - Added model ManagementGroupExpandType\n  - Added model ParentGroupBagInfo\n\n## 1.0.0 (2021-05-21)\n\n**Features**\n\n  - Model ManagementGroupDetails has a new parameter path\n  - Model ManagementGroupDetails has a new parameter management_group_ancestors\n  - Model ManagementGroupDetails has a new parameter management_group_ancestors_chain\n\n**Breaking changes**\n\n  - Operation ManagementGroupSubscriptionsOperations.get_subscriptions_under_management_group has a new signature\n  - Operation ManagementGroupsOperations.list has a new signature\n  - Operation EntitiesOperations.list has a new signature\n  - Operation ManagementGroupsOperations.get_descendants has a new signature\n  - Model ManagementGroup no longer has parameter path\n\n## 1.0.0b1 (2020-12-09)\n\nThis is beta preview version.\n\nThis version uses a next-generation code generator that introduces important breaking changes, but also important new features (like unified authentication and async programming).\n\n**General breaking changes**\n\n- Credential system has been completly revamped:\n\n  - `azure.common.credentials` or `msrestazure.azure_active_directory` instances are no longer supported, use the `azure-identity` classes instead: https://pypi.org/project/azure-identity/\n  - `credentials` parameter has been renamed `credential`\n\n- The `config` attribute no longer exists on a client, configuration should be passed as kwarg. Example: `MyClient(credential, subscription_id, enable_logging=True)`. For a complete set of\n  supported options, see the [parameters accept in init documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n- You can't import a `version` module anymore, use `__version__` instead\n- Operations that used to return a `msrest.polling.LROPoller` now returns a `azure.core.polling.LROPoller` and are prefixed with `begin_`.\n- Exceptions tree have been simplified and most exceptions are now `azure.core.exceptions.HttpResponseError` (`CloudError` has been removed).\n- Most of the operation kwarg have changed. Some of the most noticeable:\n\n  - `raw` has been removed. Equivalent feature can be found using `cls`, a callback that will give access to internal HTTP response for advanced user\n  - For a complete set of\n  supported options, see the [parameters accept in Request documentation of azure-core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#available-policies)\n\n**General new features**\n\n- Type annotations support using `typing`. SDKs are mypy ready.\n- This client has now stable and official support for async. Check the `aio` namespace of your package to find the async client.\n- This client now support natively tracing library like OpenCensus or OpenTelemetry. See this [tracing quickstart](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry) for an overview.\n\n## 0.2.0 (2019-02-21)\n\n**Features**\n\n  - Model EntityInfo has a new parameter number_of_children\n  - Model EntityInfo has a new parameter number_of_child_groups\n\n## 0.1.0 (2018-05-31)\n\n  - Initial Release\n```\n\n----------------------------------------\n\nTITLE: Defining Local Package Dependencies for Azure SDK Python\nDESCRIPTION: Specifies local development dependencies using editable installs (-e flag) for azure-sdk-tools and azure-identity packages located in relative paths.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/managedapplications/azure-mgmt-managedapplications/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Using ResourceGroup Parameter Set for Resource Deletion in PowerShell\nDESCRIPTION: This syntax shows the ResourceGroup parameter set for the Remove-TestResources.ps1 script, which allows specifying a ResourceGroupName directly without requiring service principal authentication.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-ResourceGroupName <String>] [-SubscriptionId <String>]\n [[-ServiceDirectory] <String>] [-Environment <String>] [-CI] [-ResourceType <String>] [-ServicePrincipalAuth]\n [-Force] [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf]\n [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools in Development Mode for Python\nDESCRIPTION: This command installs the Azure SDK tools package in development mode ('-e' flag) from a local relative path. This setup allows developers to modify the tools code while developing the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-customimagesearch/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Data Analysis\nDESCRIPTION: Defines helper functions for querying logs, displaying graphs, and setting display options for data visualization.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\nfrom azure.monitor.query import LogsQueryStatus\nfrom azure.core.exceptions import HttpResponseError\n\n\ndef query_logs_workspace(query):\n    try:\n        response = logs_query_client.query_workspace(LOGS_WORKSPACE_ID, query, timespan=None)\n        if response.status == LogsQueryStatus.SUCCESS:\n            data = response.tables\n        else:\n            error = response.partial_error\n            data = response.partial_data\n            print(error)\n\n        for table in data:\n            my_data = pd.DataFrame(data=table.rows, columns=table.columns)\n    except HttpResponseError as err:\n        print(\"something fatal happened\")\n        print (err)\n    return my_data\n\n\ndef display_graph(df, title):\n    df = df.sort_values(by=\"TimeGenerated\")\n    graph = px.line(df, x='TimeGenerated', y=\"ActualUsage\", color='DataType', title=title)\n    graph.show()\n\n\n# Set display options for visualizing\ndef display_options():\n    display = pd.options.display\n    display.max_columns = 10\n    display.max_rows = 10\n    display.max_colwidth = 300\n    display.width = None\n    return None\n\ndisplay_options()\n```\n\n----------------------------------------\n\nTITLE: Version Release History Documentation\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, features added, breaking changes, and fixes for the Azure SDK Python package. Covers versions from 13.0.0b7 to 0.7.0.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-mgmt-loganalytics/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 13.0.0b7 (2024-11-05)\n\n### Other Changes\n\n  - Update dependencies\n\n## 13.0.0b6 (2022-12-12)\n\n### Features Added\n\n  - Added operation TablesOperations.begin_create_or_update\n  - Added operation TablesOperations.begin_delete\n  - Added operation TablesOperations.cancel_search\n  - Added operation TablesOperations.migrate\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Azure SDK\nDESCRIPTION: This snippet lists the required Python packages for the Azure SDK project. It includes PyGithub version 1.55, the datetime module, and the requests library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/issue_helper/requirement.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub==1.55\ndatetime\nrequests\n```\n\n----------------------------------------\n\nTITLE: Making Properties Not Readonly for Specific Models\nDESCRIPTION: Directive to make specific properties not readonly for AnomalyAlertConfiguration and DataFeed models.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - where-model: AnomalyAlertConfiguration\n    make-not-readonly: anomalyAlertingConfigurationId\n  - where-model: DataFeed\n    make-not-readonly: status\n```\n\n----------------------------------------\n\nTITLE: Installing Autorest v3 with PowerShell\nDESCRIPTION: Command to install Autorest v3 globally using npm, which is required for generating the SDK.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/swagger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install -g autorest\n```\n\n----------------------------------------\n\nTITLE: Logging a Model as an Azure ML Run Output in Python\nDESCRIPTION: This snippet illustrates logging a trained model as an output artifact of an active Azure Machine Learning run. It retrieves the current run context, trains a model (example uses scikit-learn and joblib), saves the model to the standard `outputs` directory associated with the run, and then uploads the file as a run artifact using `run.upload_file()`. This links the specific model version to the run that generated it.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/tests/unittests/data/unsupported_file_type.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.linear_model import LogisticRegression\nfrom azureml.core.run import Run\n\n# Initialize a run object\nrun = Run.get_context()\n\n# Train your model\nX_train, y_train = ...\nclf = LogisticRegression().fit(X_train, y_train)\n\n# Save the model to the Run object's outputs directory\nmodel_path = 'outputs\\/model.pkl'\njoblib.dump(value=clf, filename=model_path)\n\n# Log the model as a run artifact\nrun.upload_file(name=model_path, path_or_stream=model_path)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Package Dependencies for Azure SDK Python Development\nDESCRIPTION: Specifies local package dependencies using editable install mode (-e flag) for Azure SDK development tools, resource management, and identity packages. Uses relative paths to reference packages within the SDK repository structure.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/notificationhubs/azure-mgmt-notificationhubs/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n-e ../../resources/azure-mgmt-resource\n../../identity/azure-identity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK Tools from Local Path in Editable Mode\nDESCRIPTION: This command installs the Azure SDK tools package in development mode from a local relative path. Using the -e flag allows changes to the tools directory to be immediately available without reinstallation.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/deploymentmanager/azure-mgmt-deploymentmanager/dev_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ../../../tools/azure-sdk-tools\n```\n\n----------------------------------------\n\nTITLE: Azure Management SDK Package List\nDESCRIPTION: Markdown formatted list of Azure Management SDK packages and their versions representing the current state of the Azure SDK for Python.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-mgmt.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- azure-mgmt-advisor-9.0.0\n- azure-mgmt-alertsmanagement-1.0.0\n- azure-mgmt-apicenter-1.0.0\n- azure-mgmt-apimanagement-4.0.1\n- azure-mgmt-appcomplianceautomation-1.0.0\n- azure-mgmt-appconfiguration-3.0.0\n[...truncated for brevity...]\n- azure-mgmt-workloads-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Versioned Package Listing - Azure Cosmos DB SQL API Python Package\nDESCRIPTION: Chronological listing of azure-cosmos package versions released through conda distribution channel, spanning from June 2021 to March 2025. Shows version progression and update frequency for the Azure Cosmos DB SQL API client library.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/conda/conda-releaselogs/azure-cosmos.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Azure Cosmos DB SQL API client library for Python (conda)\n\n## 2025.03.01\n\n### Packages included\n\n- azure-cosmos-4.9.0\n\n## 2024.12.01\n\n### Packages included\n\n- azure-cosmos-4.9.0\n\n## 2024.09.01\n\n### Packages included\n\n- azure-cosmos-4.7.0\n\n## 2024.06.01\n\n### Packages included\n\n- azure-cosmos-4.7.0\n\n## 2024.03.01\n\n### Packages included\n\n- azure-cosmos-4.5.1\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release 1.0.0b1 in Markdown\nDESCRIPTION: Marks the initial release of the Azure SDK for Python version 1.0.0b1.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/testbase/azure-mgmt-testbase/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0b1 (2021-06-17)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Time Range for Package Analysis\nDESCRIPTION: Demonstrates how to run the script with a custom time range, in this case, identifying packages without releases in the past year.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/scripts/old_packages/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython output_old_packages.py -y 1\n```\n\n----------------------------------------\n\nTITLE: Documenting Release 1.1.0b1 in Markdown\nDESCRIPTION: Documents the changes in the beta version 1.1.0b1, which mirrors the changes in the stable 1.1.0 release.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.1.0b1 (2022-10-28)\n\n### Features Added\n\n  - Model PrivateZone has a new parameter internal_id\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Form Recognizer Performance Tests\nDESCRIPTION: Commands to set up the Python environment for running performance tests, including installing development requirements and the package in development mode.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/tests/perfstress_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-formrecognizer> pip install -r dev_requirements.txt\n(env) ~/azure-ai-formrecognizer> pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Converting Agent Data for Evaluation\nDESCRIPTION: Prepares agent conversation data for evaluation and saves it to a JSONL file.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom azure.ai.evaluation import AIAgentConverter\n\n# Initialize the converter that will be backed by the project.\nconverter = AIAgentConverter(project_client)\n\nthread_id = thread.id\nrun_id = run.id\n\nconverted_data = converter.convert(thread_id, run_id)\nprint(json.dumps(converted_data, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Creating Conversation Thread\nDESCRIPTION: Initializes a new conversation thread for the agent.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/evaluation/azure-ai-evaluation/samples/agent_evaluators/agent_evaluation.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nthread = project_client.agents.create_thread()\nprint(f\"Created thread, ID: {thread.id}\")\n```\n\n----------------------------------------\n\nTITLE: Authentication and Configuration Changes in Azure SDK for Python\nDESCRIPTION: Example showing the credential system change from legacy azure.common.credentials to the new azure-identity package, along with configuration changes moving from a config attribute to kwargs.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Before:\nfrom azure.common.credentials import ServicePrincipalCredentials\ncredentials = ServicePrincipalCredentials(client_id, client_secret, tenant)\nclient = MyClient(credentials, subscription_id, config=my_config)\n\n# After:\nfrom azure.identity import DefaultAzureCredential\ncredential = DefaultAzureCredential()\nclient = MyClient(credential, subscription_id, enable_logging=True)\n```\n\n----------------------------------------\n\nTITLE: Documenting Release History in Markdown\nDESCRIPTION: This snippet shows the structure of a release history document for an Azure SDK Python package. It includes sections for unreleased changes and past releases, with placeholders for different types of changes.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-loganalytics/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 0.1.2 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 0.1.1 (2021-11-11)\n\n* This package is no longer maintained. Please use https://pypi.org/project/azure-monitor-query/\n\n## 0.1.0 (2018-07-11)\n\n* Initial Release\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Release History Changelog\nDESCRIPTION: Markdown formatted changelog documenting version updates, feature additions, breaking changes, and bug fixes across multiple beta releases of the Azure SDK Python Anomaly Detector module.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 3.0.0b7 (Unreleased)\n\n### Features Added\n\n### Breaking Changes\n\n### Bugs Fixed\n\n### Other Changes\n\n## 3.0.0b6 (2022-12-08)\n  **Features**\n  - Added `OneTable` and `MultiTable` two data schemas.\n  - Added `DataSchema` to `ModelInfo`.\n  - Added Azure Managed Identity data reader access for Azure Blob Storage.\n  - Added `topContributorCount` in the request body for `get_multivariate_batch_detection_result`, `detect_multivariate_batch_anomaly` and `detect_multivariate_last_anomaly`.\n\n  **Breaking Changes**\n  - Renamed `Model` to `AnomalyDetectionModel`.\n  - Renamed `DetectionRequest` to `MultivariateBatchDetectionOptions`.\n  - Renamed `DetectionResult` to `MultivariateDetectionResult`.\n  - Renamed `DetectionStatus` to `MultivariateBatchDetectionStatus`.\n  - Renamed `DetectionResultSummary` to `MultivariateBatchDetectionResultSummary`.\n  - Renamed `FillNaMethod` to `FillNAMethod`.\n  - Renamed `LastDetectionRequest` to `MultivariateLastDetectionOptions`.\n  - Renamed `LastDetectionResult` to `MultivariateLastDetectionResult`.\n  - Replaced `ModelSnapshot` with `AnomalyDetectionModel` in `list_multivariate_model`.\n  - Renamed `train_multivariate_model_with_response` to `train_multivariate_model`.\n  - Renamed `detect_anomaly_with_response` to `detect_multivariate_batch_anomaly`.\n  - Renamed `get_detection_result` to `get_multivariate_batch_detection_result`.\n  - Renamed `list_multivariate_model` to `list_multivariate_models`.\n  - Renamed `last_detect_anomaly_with_response` to `detect_multivariate_last_anomaly`.\n  - Renamed `DetectRequest` to `UnivariateDetectionOptions`.\n  - Renamed `EntireDetectResponse` to `UnivariateEntireDetectionResult`.\n  - Renamed `LastDetectResponse` to `UnivariateLastDetectionResult`.\n  - Renamed `ChangePointDetectRequest` to `UnivariateChangePointDetectionOptions`.\n  - Renamed `ChangePointDetectResponse` to `UnivariateChangePointDetectionResult`.\n  - Renamed `detect_entire_series` to `detect_univariate_entire_series`.\n  - Renamed `detect_last_point` to `detect_univariate_last_point`.\n  - Renamed `detect_change_point` to `detect_univariate_change_point`.\n  - Removed `AnomalyDetectorErrorException`.\n  - Removed `export_model_with_response`.\n  - Removed `changedvalue` in the inference response body.\n  - Removed `detecting_points` in the sync inference request body.\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Form Recognizer Performance Test\nDESCRIPTION: Example command to run a specific performance test case (RecognizeCustomForms) using the perfstress tool.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-ai-formrecognizer/tests/perfstress_tests> perfstress RecognizeCustomForms\n```\n\n----------------------------------------\n\nTITLE: Adding Test Proxy to PATH in PowerShell (Windows)\nDESCRIPTION: Command to add the test proxy executable to the PATH environment variable in a PowerShell session on Windows.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/doc/dev/recording_migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PATH += ';<path-to-repo>\\azure-sdk-for-python\\.proxy'\n```\n\n----------------------------------------\n\nTITLE: Getting an Authenticated Image Embeddings Client in Python\nDESCRIPTION: This code snippet shows the method `.inference.get_image_embeddings_client` available on an `AIProjectClient` instance in the `azure-ai-project` Python SDK (version 1.0.0b5+). It returns an authenticated `ImageEmbeddingsClient` (from the `azure-ai-inference` package, version 1.0.0b7 or higher required) configured based on the project's default or specified connection, allowing users to perform image embedding inference tasks.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/ai/azure-ai-projects/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.inference.get_image_embeddings_client\n```\n\n----------------------------------------\n\nTITLE: Example EventGrid Performance Test Command\nDESCRIPTION: Example command demonstrating how to run a specific EventGrid performance test with custom parameters.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/tests/perfstress_tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n(env) ~/azure-eventgrid/tests> perfstress EventGridPerfTest --num-events=100\n```\n\n----------------------------------------\n\nTITLE: Deleting Knowledge Base with azure-cognitiveservices-knowledge-qnamaker in Python\nDESCRIPTION: This snippet shows how to delete a knowledge base using the delete method in the legacy azure-cognitiveservices-knowledge-qnamaker library. It includes authentication and deleting the specified knowledge base.\nSOURCE: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/migration_guide.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom msrest.authentication import CognitiveServicesCredentials\nfrom azure.cognitiveservices.knowledge.qnamaker import QnAMakerClient\n\nclient = QnAMakerClient(\n    endpoint=\"https://<my-cognitiveservices-account>.cognitiveservices.azure.com\",\n    credentials=CognitiveServicesCredentials(\"API key\")\n)\n\nclient.knowledgebase.delete(\n    kb_id=\"<knowledgebase-id>\"\n)\n```"
  }
]