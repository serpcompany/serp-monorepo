[
  {
    "owner": "eduardocruz",
    "repo": "phpx",
    "content": "TITLE: Installing PHPX Globally - Composer - Bash\nDESCRIPTION: The recommended way to install PHPX is globally using Composer. This makes the 'phpx' command available system-wide, provided your global Composer bin directory is in your system's PATH.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer global require eduardocruz/phpx\n```\n\n----------------------------------------\n\nTITLE: Command Runner Class\nDESCRIPTION: This class executes the specified command for a given PHP package. It resolves the package using the PackageManager, resolves dependencies using the DependencyResolver, creates an execution environment, finds the executable, and executes the command within the environment. It relies on PackageManager, DependencyResolver and ExecutionEnvironment classes.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass CommandRunner {\n    private $packageManager;\n    private $dependencyResolver;\n    \n    public function __construct(\n        PackageManager $packageManager, \n        DependencyResolver $dependencyResolver\n    ) {\n        $this->packageManager = $packageManager;\n        $this->dependencyResolver = $dependencyResolver;\n    }\n    \n    public function run(array $args): int {\n        // Split package spec from command arguments\n        $packageSpec = $args[0];\n        $commandArgs = $this->extractCommandArgs($args);\n        \n        // Resolve package\n        $package = $this->packageManager->resolvePackage($packageSpec);\n        \n        // Resolve dependencies\n        $dependencies = $this->dependencyResolver->resolveDependencies($package);\n        \n        // Create execution environment\n        $environment = new ExecutionEnvironment($package, $dependencies);\n        \n        // Find executable\n        $executable = $this->findExecutable($package, $commandArgs);\n        \n        // Execute command\n        return $environment->execute($executable, $commandArgs);\n    }\n    \n    private function extractCommandArgs(array $args): array {\n        $doubleDashPos = array_search('--', $args);\n        if ($doubleDashPos !== false) {\n            return array_slice($args, $doubleDashPos + 1);\n        }\n        return array_slice($args, 1);\n    }\n    \n    private function findExecutable(Package $package, array $commandArgs): string {\n        // First check bin in composer.json\n        $composerJson = $package->getComposerJson();\n        \n        if (isset($composerJson['bin'])) {\n            if (is_array($composerJson['bin'])) {\n                // If multiple bin entries and first arg matches one, use that\n                if (!empty($commandArgs) && in_array($commandArgs[0], $composerJson['bin'])) {\n                    return $commandArgs[0];\n                }\n                // Otherwise use first bin entry\n                return $composerJson['bin'][0];\n            } else {\n                return $composerJson['bin'];\n            }\n        }\n        \n        // Next check for common entry points\n        $commonEntryPoints = [\n            $package->getPath() . '/bin/' . $package->getName(),\n            $package->getPath() . '/bin/run',\n            $package->getPath() . '/bin/console',\n        ];\n        \n        foreach ($commonEntryPoints as $entryPoint) {\n            if (file_exists($entryPoint) && is_executable($entryPoint)) {\n                return $entryPoint;\n            }\n        }\n        \n        throw new \\RuntimeException(\"Could not find executable in package \" . $package->getName());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Manager Class\nDESCRIPTION: This class is responsible for managing PHP packages. It resolves package specifications, checks for cached packages, fetches package information from Packagist, downloads and installs packages, and handles package version parsing. It depends on ComposerClient and PackagistClient.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass PackageManager {\n    private $config;\n    private $composerClient;\n    private $packagistClient;\n    \n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->composerClient = new ComposerClient();\n        $this->packagistClient = new PackagistClient();\n    }\n    \n    public function resolvePackage(string $packageSpec): Package {\n        // Parse package name and version constraint\n        list($name, $version) = $this->parsePackageSpec($packageSpec);\n        \n        // Check if already cached\n        if ($this->isPackageCached($name, $version)) {\n            return $this->getCachedPackage($name, $version);\n        }\n        \n        // Fetch from Packagist\n        $packageInfo = $this->packagistClient->getPackageInfo($name);\n        $bestVersion = $this->findBestVersion($packageInfo, $version);\n        \n        // Download and install\n        $package = $this->installPackage($name, $bestVersion);\n        \n        return $package;\n    }\n    \n    private function parsePackageSpec(string $spec): array {\n        // Handle package:version format or just package name\n        if (strpos($spec, ':') !== false) {\n            list($name, $version) = explode(':', $spec, 2);\n            return [$name, $version];\n        }\n        \n        return [$spec, null]; // null means latest\n    }\n    \n    // Additional methods for caching, installation, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Secure Sandbox Environment in PHP\nDESCRIPTION: Defines the `Sandbox` class to execute commands within an isolated, temporary environment. The constructor creates a unique temporary directory. The `execute` method runs a command using `proc_open`, setting environment variables (including `PHPX_SANDBOX=1`) and attempting to disable dangerous PHP functions (`exec`, `system`, etc.) by generating a temporary `php.ini` file and setting the `PHPRC` environment variable. The destructor (`__destruct`) recursively removes the temporary sandbox directory and its contents.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass Sandbox {\n    private $workDir;\n    \n    public function __construct() {\n        $this->workDir = sys_get_temp_dir() . '/phpx_sandbox_' . uniqid();\n        mkdir($this->workDir, 0755, true);\n    }\n    \n    public function execute(string $command, array $env = []): int {\n        // Set up environment with restrictions\n        $fullEnv = array_merge($_ENV, $env);\n        $fullEnv['PHPX_SANDBOX'] = '1';\n        \n        // Disable dangerous PHP functions if possible\n        $disableFunctions = [\n            'exec', 'shell_exec', 'system', 'passthru', 'proc_open', \n            'popen', 'curl_exec', 'curl_multi_exec', 'parse_ini_file', \n            'show_source'\n        ];\n        \n        $iniContent = 'disable_functions=' . implode(',', $disableFunctions) . \"\\n\";\n        $iniPath = $this->workDir . '/php.ini';\n        file_put_contents($iniPath, $iniContent);\n        \n        $fullEnv['PHPRC'] = $iniPath;\n        \n        // Execute command\n        $descriptorSpec = [\n            0 => STDIN,\n            1 => STDOUT,\n            2 => STDERR,\n        ];\n        \n        $process = proc_open($command, $descriptorSpec, $pipes, $this->workDir, $fullEnv);\n        return proc_close($process);\n    }\n    \n    public function __destruct() {\n        // Clean up\n        $this->recursiveRemoveDirectory($this->workDir);\n    }\n    \n    private function recursiveRemoveDirectory(string $dir): void {\n        $files = array_diff(scandir($dir), ['.', '..']);\n        foreach ($files as $file) {\n            $path = \"$dir/$file\";\n            is_dir($path) ? $this->recursiveRemoveDirectory($path) : unlink($path);\n        }\n        rmdir($dir);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing a Dynamic Package Environment using PHPX in PHP\nDESCRIPTION: This snippet initializes a working environment for a PHP package along with its dependencies by creating a temporary directory and generating a consolidated autoloader. It sets up the runtime environment for the package, including resolving and including the autoloaders of the main package and all its dependencies. The prepare routine is called in the constructor, and environment variables are set before executing a target PHP or PHAR script. Requires standard PHP functions for file and directory operations, process management, and the presence of correctly structured package and dependency objects. Inputs include executable file paths and argument arrays. Outputs are exit status codes of the spawned process. Potential constraints include permissions for filesystem and the need for valid autoloaders for each dependency.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->package = $package;\n$this->dependencies = $dependencies;\n$this->workDir = sys_get_temp_dir() . '/phpx_' . uniqid();\n\n$this->prepare();\n}\n\nprivate function prepare(): void {\n    // Create working directory\n    if (!is_dir($this->workDir)) {\n        mkdir($this->workDir, 0755, true);\n    }\n    \n    // Create autoloader that includes package and dependencies\n    $this->createAutoloader();\n}\n\nprivate function createAutoloader(): void {\n    $autoloaderContent = '<?php' . PHP_EOL;\n    $autoloaderContent .= '// Generated by PHPX' . PHP_EOL;\n    // Add package's autoloader\n    $packageAutoloader = $this->package->getPath() . '/vendor/autoload.php';\n    if (file_exists($packageAutoloader)) {\n        $autoloaderContent .= 'require_once ' . var_export($packageAutoloader, true) . ';' . PHP_EOL;\n    }\n    // Add dependency autoloaders\n    foreach ($this->dependencies as $dependency) {\n        $depAutoloader = $dependency->getPath() . '/vendor/autoload.php';\n        if (file_exists($depAutoloader)) {\n            $autoloaderContent .= 'require_once ' . var_export($depAutoloader, true) . ';' . PHP_EOL;\n        }\n    }\n    file_put_contents($this->workDir . '/autoload.php', $autoloaderContent);\n}\n\npublic function execute(string $executable, array $args): int {\n    // Prepare environment variables\n    $env = $_ENV;\n    $env['PHPX_PACKAGE_PATH'] = $this->package->getPath();\n    $env['PHPX_AUTOLOADER'] = $this->workDir . '/autoload.php';\n    // Build command\n    if (strtolower(substr($executable, -5)) === '.phar') {\n        $command = 'php ' . escapeshellarg($executable);\n    } elseif (strtolower(substr($executable, -4)) === '.php') {\n        $command = 'php ' . escapeshellarg($executable);\n    } else {\n        $command = escapeshellarg($executable);\n    }\n    // Add arguments\n    foreach ($args as $arg) {\n        $command .= ' ' . escapeshellarg($arg);\n    }\n    // Execute\n    $descriptorSpec = [\n        0 => STDIN,\n        1 => STDOUT,\n        2 => STDERR,\n    ];\n    $process = proc_open($command, $descriptorSpec, $pipes, $this->workDir, $env);\n    return proc_close($process);\n}\n\npublic function __destruct() {\n    // Clean up temporary directory\n    $this->cleanup();\n}\n\nprivate function cleanup(): void {\n    // Remove temporary directory and its contents\n    if (is_dir($this->workDir)) {\n        $this->recursiveRemoveDirectory($this->workDir);\n    }\n}\n\nprivate function recursiveRemoveDirectory(string $dir): void {\n    $files = array_diff(scandir($dir), ['.', '..']);\n    foreach ($files as $file) {\n        $path = \"$dir/$file\";\n        is_dir($path) ? $this->recursiveRemoveDirectory($path) : unlink($path);\n    }\n    rmdir($dir);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Caching Package Data with PHPX Configuration in PHP\nDESCRIPTION: This snippet sets up and manages configuration and cache directories for PHPX according to the XDG Base Directory specification, using JSON for persistent configuration storage. It ensures the existence of required directories and loads or initializes configuration defaults if none exist, saving them to disk. Functions allow retrieval and updating of configuration values, as well as access to cache locations. Requires PHP environment variables (XDG_CONFIG_HOME/XDG_CACHE_HOME/HOME), permissions for file system manipulation, and JSON extension. Inputs include configuration keys and values, and outputs are the corresponding configuration values or directory paths. Constraints include proper access permissions and a writable file system.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass Config {\n    private $configDir;\n    private $cacheDir;\n    \n    public function __construct() {\n        // Use XDG Base Directory spec if possible\n        $this->configDir = getenv('XDG_CONFIG_HOME') ?: (getenv('HOME') . '/.config/phpx');\n        $this->cacheDir = getenv('XDG_CACHE_HOME') ?: (getenv('HOME') . '/.cache/phpx');\n        \n        $this->ensureDirectories();\n        $this->loadConfig();\n    }\n    \n    private function ensureDirectories(): void {\n        if (!is_dir($this->configDir)) {\n            mkdir($this->configDir, 0755, true);\n        }\n        \n        if (!is_dir($this->cacheDir)) {\n            mkdir($this->cacheDir, 0755, true);\n        }\n        \n        if (!is_dir($this->cacheDir . '/packages')) {\n            mkdir($this->cacheDir . '/packages', 0755, true);\n        }\n    }\n    \n    private function loadConfig(): void {\n        $configFile = $this->configDir . '/config.json';\n        if (file_exists($configFile)) {\n            $this->config = json_decode(file_get_contents($configFile), true);\n        } else {\n            // Default configuration\n            $this->config = [\n                'cache_ttl' => 86400, // 24 hours\n                'packagist_url' => 'https://packagist.org',\n                'prefer_dist' => true,\n            ];\n            \n            // Save default config\n            $this->saveConfig();\n        }\n    }\n    \n    private function saveConfig(): void {\n        file_put_contents(\n            $this->configDir . '/config.json', \n            json_encode($this->config, JSON_PRETTY_PRINT)\n        );\n    }\n    \n    public function getCacheDir(): string {\n        return $this->cacheDir;\n    }\n    \n    public function getPackageCacheDir(): string {\n        return $this->cacheDir . '/packages';\n    }\n    \n    public function getConfigValue(string $key, $default = null) {\n        return $this->config[$key] ?? $default;\n    }\n    \n    public function setConfigValue(string $key, $value): void {\n        $this->config[$key] = $value;\n        $this->saveConfig();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Composer and Packagist for PHP Project Management in PHP\nDESCRIPTION: This snippet provides mechanisms for programmatically locating the Composer executable, creating new PHP projects, installing Composer dependencies, and retrieving package information from Packagist. The ComposerClient tries multiple search paths and also downloads composer.phar if necessary, then handles project creation using 'create-project' and dependency installation via 'install'. PackagistClient queries the Packagist API to get package metadata and intelligently resolves the most appropriate version based on constraints or stability. Dependencies include the presence of the Composer binary or network access, file system execution rights, and internet connectivity to reach Packagist APIs. Inputs are package names, version constraints, target directories, and configuration URLs. Outputs are booleans for success/failure and arrays for package data. Limitations include failure scenarios when APIs are unreachable or permissions are denied.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass ComposerClient {\n    private $composerPath;\n    \n    public function __construct() {\n        // Find composer executable\n        $this->composerPath = $this->findComposerPath();\n    }\n    \n    private function findComposerPath(): string {\n        // Check if composer is in PATH\n        $composerPath = shell_exec('which composer 2>/dev/null');\n        if ($composerPath) {\n            return trim($composerPath);\n        }\n        // Check common locations\n        $commonLocations = [\n            '/usr/local/bin/composer',\n            '/usr/bin/composer',\n            getenv('HOME') . '/composer.phar',\n        ];\n        foreach ($commonLocations as $location) {\n            if (file_exists($location) && is_executable($location)) {\n                return $location;\n            }\n        }\n        // As a last resort, download composer.phar\n        $tempPath = sys_get_temp_dir() . '/composer.phar';\n        if (!file_exists($tempPath)) {\n            file_put_contents(\n                $tempPath, \n                file_get_contents('https://getcomposer.org/composer.phar')\n            );\n            chmod($tempPath, 0755);\n        }\n        return $tempPath;\n    }\n    \n    public function createProject(string $packageName, string $version, string $targetDir): bool {\n        $command = sprintf(\n            '%s create-project %s:%s %s --prefer-dist --no-dev --no-interaction',\n            escapeshellarg($this->composerPath),\n            escapeshellarg($packageName),\n            escapeshellarg($version),\n            escapeshellarg($targetDir)\n        );\n        \n        exec($command, $output, $returnCode);\n        \n        return $returnCode === 0;\n    }\n    \n    public function installDependencies(string $projectDir): bool {\n        $command = sprintf(\n            'cd %s && %s install --no-dev --no-interaction',\n            escapeshellarg($projectDir),\n            escapeshellarg($this->composerPath)\n        );\n        \n        exec($command, $output, $returnCode);\n        \n        return $returnCode === 0;\n    }\n}\n\nclass PackagistClient {\n    private $apiUrl;\n    \n    public function __construct(string $apiUrl = 'https://packagist.org') {\n        $this->apiUrl = rtrim($apiUrl, '/');\n    }\n    \n    public function getPackageInfo(string $packageName): array {\n        $url = sprintf('%s/packages/%s.json', $this->apiUrl, $packageName);\n        $response = file_get_contents($url);\n        \n        if ($response === false) {\n            throw new \\RuntimeException(\"Package $packageName not found on Packagist\");\n        }\n        \n        return json_decode($response, true);\n    }\n    \n    public function findBestVersion(array $packageInfo, ?string $constraint = null): string {\n        $versions = $packageInfo['package']['versions'] ?? [];\n        \n        if (empty($versions)) {\n            throw new \\RuntimeException(\"No versions available for package\");\n        }\n        \n        // If specific version requested\n        if ($constraint !== null && isset($versions[$constraint])) {\n            return $constraint;\n        }\n        \n        // If dev-main/master requested\n        if ($constraint === 'dev-main' && isset($versions['dev-main'])) {\n            return 'dev-main';\n        } elseif ($constraint === 'dev-master' && isset($versions['dev-master'])) {\n            return 'dev-master';\n        }\n        \n        // Filter out dev versions unless specifically requested\n        if ($constraint === null) {\n            $stableVersions = array_filter(array_keys($versions), function($version) {\n                return strpos($version, 'dev-') !== 0;\n            });\n            \n            if (empty($stableVersions)) {\n                // If no stable versions, use dev-main or dev-master\n                if (isset($versions['dev-main'])) {\n                    return 'dev-main';\n                } elseif (isset($versions['dev-master'])) {\n                    return 'dev-master';\n                }\n            } else {\n                // Sort versions and get the latest\n                usort($stableVersions, 'version_compare');\n                return end($stableVersions);\n            }\n        }\n        \n        throw new \\RuntimeException(\"Could not find suitable version for constraint: $constraint\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Development Tasks Using CLI Commands - Bash\nDESCRIPTION: Demonstrates usage of the CLI `list` command to display development tasks from the tasks.json file. Supports filtering by task status and optionally including subtasks for detailed views. This snippet outlines typical command-line usages for viewing tasks, aiding task tracking and management.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# List all tasks\ntask-master list\n\n# List tasks with a specific status\ntask-master list --status=pending\n\n# List tasks and include their subtasks\ntask-master list --with-subtasks\n\n# List tasks with a specific status and include their subtasks\ntask-master list --status=pending --with-subtasks\n```\n\n----------------------------------------\n\nTITLE: Finding the Next Task with Task-Master CLI\nDESCRIPTION: Command to determine which task to work on next based on dependencies and status. It identifies eligible tasks, prioritizes them, and displays comprehensive information with suggested actions.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Show the next task to work on\ntask-master next\n\n# Specify a different tasks file\ntask-master next --file=custom-tasks.json\n```\n\n----------------------------------------\n\nTITLE: Analyzing Task Complexity (Bash)\nDESCRIPTION: This set of commands analyzes the complexity of tasks using AI.  It allows customizing the output location, specifying the LLM model, setting a complexity threshold, using an alternative tasks file, and incorporating research-backed analysis.  The complexity is assessed on a scale, and the report contains expansion prompts.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Analyze complexity of all tasks\ntask-master analyze-complexity\n\n# Save report to a custom location\ntask-master analyze-complexity --output=my-report.json\n\n# Use a specific LLM model\ntask-master analyze-complexity --model=claude-3-opus-20240229\n\n# Set a custom complexity threshold (1-10)\ntask-master analyze-complexity --threshold=6\n\n# Use an alternative tasks file\ntask-master analyze-complexity --file=custom-tasks.json\n\n# Use Perplexity AI for research-backed complexity analysis\ntask-master analyze-complexity --research\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub Repository Interactions in PHP\nDESCRIPTION: Defines the `GitHubHandler` class for managing interactions with GitHub repositories. It includes methods to check if a URL is a GitHub URL, parse repository owner, name, and ref from various URL formats, and download/extract a repository's zip archive into a local cache directory. Depends on a `Config` object for cache path configuration.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass GitHubHandler {\n    private $config;\n    private $cacheDir;\n    \n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->cacheDir = $config->getCacheDir() . '/github';\n        \n        if (!is_dir($this->cacheDir)) {\n            mkdir($this->cacheDir, 0755, true);\n        }\n    }\n    \n    public function isGitHubUrl(string $url): bool {\n        return (strpos($url, 'github.com/') !== false);\n    }\n    \n    public function parseGitHubUrl(string $url): array {\n        // Handle different GitHub URL formats\n        if (preg_match('#github\\.com/([^/]+)/([^/]+)(?:/tree/([^/]+))?#', $url, $matches)) {\n            $owner = $matches[1];\n            $repo = $matches[2];\n            $ref = $matches[3] ?? 'master';\n            \n            return [\n                'owner' => $owner,\n                'repo' => $repo,\n                'ref' => $ref,\n            ];\n        }\n        \n        throw new \\RuntimeException(\"Invalid GitHub URL: $url\");\n    }\n    \n    public function downloadFromGitHub(string $url): string {\n        $info = $this->parseGitHubUrl($url);\n        \n        // Create directory for repo\n        $repoDir = $this->cacheDir . '/' . $info['owner'] . '_' . $info['repo'] . '_' . $info['ref'];\n        \n        if (!is_dir($repoDir)) {\n            mkdir($repoDir, 0755, true);\n            \n            // Download zip from GitHub\n            $zipUrl = sprintf(\n                'https://github.com/%s/%s/archive/%s.zip',\n                $info['owner'],\n                $info['repo'],\n                $info['ref']\n            );\n            \n            $zipPath = $repoDir . '.zip';\n            file_put_contents($zipPath, file_get_contents($zipUrl));\n            \n            // Extract zip\n            $zip = new \\ZipArchive();\n            if ($zip->open($zipPath) === true) {\n                $zip->extractTo($this->cacheDir);\n                $zip->close();\n                \n                // Find extracted directory\n                $extractedDir = glob($this->cacheDir . '/' . $info['repo'] . '-*', GLOB_ONLYDIR);\n                if (!empty($extractedDir)) {\n                    // Rename to our standard format\n                    rename($extractedDir[0], $repoDir);\n                }\n                \n                // Remove zip file\n                unlink($zipPath);\n            } else {\n                throw new \\RuntimeException(\"Failed to extract GitHub repository\");\n            }\n        }\n        \n        return $repoDir;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Package Security Checks in PHP\nDESCRIPTION: Defines the `SecurityManager` class responsible for package security within the PHPX project. It includes a placeholder method `verifyPackageSignature` and a functional method `scanForMaliciousCode` which iterates through PHP files in a given package path, scanning their content for potentially dangerous patterns like `eval()`, `system()`, `base64_decode()`, etc., using regular expressions. It returns an array of warnings if suspicious patterns are found. Depends on `Config` and `Package` objects.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass SecurityManager {\n    private $config;\n    \n    public function __construct(Config $config) {\n        $this->config = $config;\n    }\n    \n    public function verifyPackageSignature(Package $package): bool {\n        // Implement package signature verification\n        // For Composer packages, can check composer.lock hashes\n        return true; // For now, just return true\n    }\n    \n    public function scanForMaliciousCode(Package $package): array {\n        // Implement basic code scanning for common malicious patterns\n        $warnings = [];\n        $path = $package->getPath();\n        \n        // List of patterns to look for\n        $patterns = [\n            'eval\\s*\\(' => 'Use of eval() detected',\n            'base64_decode\\s*\\(' => 'Use of base64_decode detected',\n            'system\\s*\\(' => 'System command execution detected',\n            'exec\\s*\\(' => 'System command execution detected',\n            'shell_exec\\s*\\(' => 'System command execution detected',\n            'passthru\\s*\\(' => 'System command execution detected',\n            '`.*`' => 'Shell execution via backticks detected',\n        ];\n        \n        // Get all PHP files\n        $iterator = new \\RecursiveIteratorIterator(\n            new \\RecursiveDirectoryIterator($path)\n        );\n        \n        $phpFiles = [];\n        foreach ($iterator as $file) {\n            if ($file->isFile() && $file->getExtension() === 'php') {\n                $phpFiles[] = $file->getPathname();\n            }\n        }\n        \n        // Scan files\n        foreach ($phpFiles as $file) {\n            $content = file_get_contents($file);\n            \n            foreach ($patterns as $pattern => $warning) {\n                if (preg_match('/' . $pattern . '/i', $content)) {\n                    $relPath = str_replace($path . '/', '', $file);\n                    $warnings[] = [\n                        'file' => $relPath,\n                        'warning' => $warning,\n                    ];\n                }\n            }\n        }\n        \n        return $warnings;\n    }\n    \n    public function createSandbox(): Sandbox {\n        return new Sandbox();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complexity Analysis Report Structure in JSON\nDESCRIPTION: Example structure of the complexity analysis report generated by the analyze-complexity command. It includes metadata and detailed analysis of each task with complexity scores and recommendations.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"meta\": {\n\t\t\"generatedAt\": \"2023-06-15T12:34:56.789Z\",\n\t\t\"tasksAnalyzed\": 20,\n\t\t\"thresholdScore\": 5,\n\t\t\"projectName\": \"Your Project Name\",\n\t\t\"usedResearch\": true\n\t},\n\t\"complexityAnalysis\": [\n\t\t{\n\t\t\t\"taskId\": 8,\n\t\t\t\"taskTitle\": \"Develop Implementation Drift Handling\",\n\t\t\t\"complexityScore\": 9.5,\n\t\t\t\"recommendedSubtasks\": 6,\n\t\t\t\"expansionPrompt\": \"Create subtasks that handle detecting...\",\n\t\t\t\"reasoning\": \"This task requires sophisticated logic...\",\n\t\t\t\"expansionCommand\": \"task-master expand --id=8 --num=6 --prompt=\\\"Create subtasks...\\\" --research\"\n\t\t}\n\t\t// More tasks sorted by complexity score (highest first)\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Package (Version Pattern) - PHPX - Bash\nDESCRIPTION: Execute a Composer package specifying a version pattern (like 1.10.*) instead of a strict version or semver constraint.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\nphpx phpstan/phpstan:1.10.* analyse\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks Based on New Prompts or Architecture Changes - Bash\nDESCRIPTION: Illustrates updating tasks from a specified starting ID using a new prompt to reflect changes in implementation or design decisions. Supports updating all tasks or those in a custom tasks file. Requires the `--prompt` parameter that provides context for the update. Updates exclude tasks marked as done.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update tasks starting from ID 4 with a new prompt\ntask-master update --from=4 --prompt=\"Refactor tasks from ID 4 onward to use Express instead of Fastify\"\n\n# Update all tasks (default from=1)\ntask-master update --prompt=\"Add authentication to all relevant tasks\"\n\n# Specify a different tasks file\ntask-master update --file=custom-tasks.json --from=5 --prompt=\"Change database from MongoDB to PostgreSQL\"\n```\n\n----------------------------------------\n\nTITLE: Verifying PHAR Archive Integrity in PHP\nDESCRIPTION: Checks if a given file path points to a valid PHAR archive by attempting to instantiate the `\\Phar` class with it within a try-catch block. Returns `true` if the PHAR is valid and can be opened, `false` if any exception occurs during the process, indicating an invalid or corrupt PHAR file.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    public function verifyPhar(string $pharPath): bool {\n        try {\n            // Try to open the PHAR\n            $phar = new \\Phar($pharPath);\n            return true;\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Fixing Dependencies with Task-Master CLI\nDESCRIPTION: Command to find and automatically fix all invalid dependencies in tasks. It removes references to non-existent tasks and self-dependencies, updating both the data structure and individual task files.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Find and fix all invalid dependencies\ntask-master fix-dependencies\n\n# Specify a different tasks file\ntask-master fix-dependencies --file=custom-tasks.json\n```\n\n----------------------------------------\n\nTITLE: Listing Known PHARs and Aliases - PHPX - Bash\nDESCRIPTION: View the list of known PHAR files and their corresponding aliases that PHPX can automatically download and execute.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nphpx list-phars\n```\n\n----------------------------------------\n\nTITLE: Executing Non-Interactively - PHPX - Bash\nDESCRIPTION: Run PHPX commands in a non-interactive mode, suitable for CI/CD pipelines or scripting, by using the '--no-interaction' flag.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\nphpx --no-interaction phpunit/phpunit:^9.0 --version\n```\n\n----------------------------------------\n\nTITLE: Adding PHPX to PATH (Temporary) - Shell - Bash\nDESCRIPTION: To use the manually installed PHPX executable directly, add its 'bin' directory to your system's PATH environment variable for the current shell session.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nexport PATH=\"$PATH:$(pwd)/bin\"\n```\n\n----------------------------------------\n\nTITLE: Handling PHAR Package Support with PHPX in PHP\nDESCRIPTION: This snippet provides a basic handler for dealing with PHAR packages, enabling PHPX to identify PHAR files by extension and download them from remote URLs to the specified local destination. The class depends on a configuration instance for possible directory use and leverages standard PHP functions for string and file operations. Inputs are package specifications or URLs and file paths, and outputs are booleans indicating successful identification or download. PHAR-related network or file errors must be handled externally. Constraints include requirements for writable destinations and accessible URLs.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass PharHandler {\n    private $config;\n    \n    public function __construct(Config $config) {\n        $this->config = $config;\n    }\n    \n    public function isPhar(string $packageSpec): bool {\n        return strtolower(substr($packageSpec, -5)) === '.phar';\n    }\n    \n    public function downloadPhar(string $url, string $destination): bool {\n\n```\n\n----------------------------------------\n\nTITLE: Validating Dependencies with Task-Master CLI\nDESCRIPTION: Command to check for invalid dependencies in tasks without making changes. It scans for non-existent dependencies and self-dependencies, reporting issues without modifying files.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Check for invalid dependencies in tasks.json\ntask-master validate-dependencies\n\n# Specify a different tasks file\ntask-master validate-dependencies --file=custom-tasks.json\n```\n\n----------------------------------------\n\nTITLE: Expanding Tasks into Subtasks Using CLI with Optional Research Integration - Bash\nDESCRIPTION: Commands to break down development tasks into multiple subtasks for granular management. Supports specifying the number of subtasks, custom prompt context, targeting all pending tasks, and forceful regeneration. Includes optional AI-powered research-backed generation using Perplexity AI via the --research flag.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Expand a specific task with 3 subtasks (default)\ntask-master expand --id=3\n\n# Expand a specific task with 5 subtasks\ntask-master expand --id=3 --num=5\n\n# Expand a task with additional context\ntask-master expand --id=3 --prompt=\"Focus on security aspects\"\n\n# Expand all pending tasks that don't have subtasks\ntask-master expand --all\n\n# Force regeneration of subtasks for all pending tasks\ntask-master expand --all --force\n\n# Use Perplexity AI for research-backed subtask generation\ntask-master expand --id=3 --research\n\n# Use Perplexity AI for research-backed generation on all pending tasks\ntask-master expand --all --research\n```\n\n----------------------------------------\n\nTITLE: Installing PHPX Dependencies - Composer - Bash\nDESCRIPTION: Within the cloned PHPX directory, use Composer to install all required project dependencies for PHPX itself.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Cloning PHPX Repository - Git - Bash\nDESCRIPTION: As part of the manual installation process, clone the PHPX source code repository from GitHub to your local machine.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/eduardocruz/phpx.git\n```\n\n----------------------------------------\n\nTITLE: PHPX CLI Entry Point\nDESCRIPTION: This is the main entry point for the PHPX command-line interface. It parses command-line arguments, initializes core components, and executes the specified command using the CommandRunner. It handles errors and exits with an appropriate status code.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n#!/usr/bin/env php\n<?php\n// phpx.php - Main entry point\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PHPX\\CommandRunner;\nuse PHPX\\DependencyResolver;\nuse PHPX\\PackageManager;\nuse PHPX\\Config;\n\n$config = new Config();\n$packageManager = new PackageManager($config);\n$dependencyResolver = new DependencyResolver($packageManager);\n$commandRunner = new CommandRunner($packageManager, $dependencyResolver);\n\n// Parse and validate arguments\n$args = array_slice($argv, 1);\nif (empty($args)) {\n    echo \"Usage: phpx [options] <package-name>[:<version>] [-- <args>...]\\n\";\n    exit(1);\n}\n\n// Execute command\ntry {\n    $exitCode = $commandRunner->run($args);\n    exit($exitCode);\n} catch (\\Exception $e) {\n    echo \"Error: \" . $e->getMessage() . \"\\n\";\n    exit(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to PHPX - Shell - Bash\nDESCRIPTION: After cloning the repository, navigate into the newly created 'phpx' directory to proceed with the manual installation steps.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncd phpx\n```\n\n----------------------------------------\n\nTITLE: Setting Task Status via CLI Commands - Bash\nDESCRIPTION: Commands for marking one or more tasks or subtasks with a status such as done, pending, or deferred. Supports multiple IDs in a single command, including subtasks identified by compound IDs (e.g., 3.1). Automatically updates subtasks when a parent task's status is changed.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Mark a task as done\ntask-master set-status --id=3 --status=done\n\n# Mark a task as pending\ntask-master set-status --id=4 --status=pending\n\n# Mark a specific subtask as done\ntask-master set-status --id=3.1 --status=done\n\n# Mark multiple tasks at once\ntask-master set-status --id=1,2,3 --status=done\n```\n\n----------------------------------------\n\nTITLE: Expanding Tasks (Bash)\nDESCRIPTION: These commands expand tasks, generating subtasks based on various criteria. You can expand a specific task, all pending tasks, and include additional context or research-backed generation. The `--force` flag regenerates subtasks even if they already exist.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Expand a specific task with subtasks\ntask-master expand --id=<id> --num=<number>\n\n# Expand with additional context\ntask-master expand --id=<id> --prompt=\"<context>\"\n\n# Expand all pending tasks\ntask-master expand --all\n\n# Force regeneration of subtasks for tasks that already have them\ntask-master expand --all --force\n\n# Research-backed subtask generation for a specific task\ntask-master expand --id=<id> --research\n\n# Research-backed generation for all tasks\ntask-master expand --all --research\n```\n\n----------------------------------------\n\nTITLE: Dependency Resolver Class\nDESCRIPTION: This class resolves dependencies for a given PHP package. It retrieves the composer.json file, identifies required dependencies, and uses the PackageManager to resolve each dependency. It skips PHP itself and PHP extensions.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass DependencyResolver {\n    private $packageManager;\n    \n    public function __construct(PackageManager $packageManager) {\n        $this->packageManager = $packageManager;\n    }\n    \n    public function resolveDependencies(Package $package): array {\n        $composerJson = $package->getComposerJson();\n        $dependencies = $composerJson['require'] ?? [];\n        $resolvedDeps = [];\n        \n        foreach ($dependencies as $name => $constraint) {\n            // Skip PHP itself and extensions\n            if ($name === 'php' || strpos($name, 'ext-') === 0) {\n                continue;\n            }\n            \n            $resolvedDeps[$name] = $this->packageManager->resolvePackage(\"$name:$constraint\");\n        }\n        \n        return $resolvedDeps;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a PHAR Archive with Arguments in PHP\nDESCRIPTION: Executes a specified PHAR file using the `php` command-line interpreter, passing along an array of arguments. Arguments are safely escaped using `escapeshellarg`. The command is executed using `passthru` to allow direct output, and the function returns the exit code of the executed PHAR command.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n    public function executePhar(string $pharPath, array $args): int {\n        $command = 'php ' . escapeshellarg($pharPath);\n        \n        foreach ($args as $arg) {\n            $command .= ' ' . escapeshellarg($arg);\n        }\n        \n        passthru($command, $exitCode);\n        return $exitCode;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Saving Remote File Content in PHP\nDESCRIPTION: Fetches content from a given URL using `file_get_contents` and saves it to a specified destination path using `file_put_contents`. Returns `false` if downloading or saving fails, `true` otherwise. This snippet appears to be part of a method within a larger class, likely used for downloading resources like PHAR files.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n        $content = file_get_contents($url);\n        \n        if ($content === false) {\n            return false;\n        }\n        \n        return file_put_contents($destination, $content) !== false;\n    }\n```\n\n----------------------------------------\n\nTITLE: Managing Task Dependencies with Add and Remove Commands - Bash\nDESCRIPTION: Commands to add or remove dependencies between tasks to control execution order and track progress. Validate inputs to prevent circular or duplicate dependencies, ensuring task integrity. Automatically updates task files to reflect dependency changes and provides user feedback.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Add a dependency to a task\ntask-master add-dependency --id=<id> --depends-on=<id>\n\n# Remove a dependency from a task\ntask-master remove-dependency --id=<id> --depends-on=<id>\n```\n\n----------------------------------------\n\nTITLE: Clearing Subtasks from Tasks via CLI Commands - Bash\nDESCRIPTION: Commands to remove subtasks from individual, multiple, or all tasks, useful for regenerating or restructuring subtasks. Automatically regenerates task files upon clearing. Can be combined with expand commands to immediately generate updated subtasks.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Clear subtasks from a specific task\ntask-master clear-subtasks --id=3\n\n# Clear subtasks from multiple tasks\ntask-master clear-subtasks --id=1,2,3\n\n# Clear subtasks from all tasks\ntask-master clear-subtasks --all\n```\n\n----------------------------------------\n\nTITLE: Setting Task Status (Bash)\nDESCRIPTION: This set of commands allows you to update the status of tasks, including individual tasks, multiple tasks, and subtasks.  It requires specifying the task ID and the desired status. Setting a parent task to 'done' automatically marks its subtasks as 'done'.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set status of a single task\ntask-master set-status --id=<id> --status=<status>\n\n# Set status for multiple tasks\ntask-master set-status --id=1,2,3 --status=<status>\n\n# Set status for subtasks\ntask-master set-status --id=1.1,1.2 --status=<status>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Task Complexity with Task-Master CLI\nDESCRIPTION: Command to assess task complexity and generate expansion recommendations. It analyzes tasks on a scale of 1-10 and provides suggested subtask counts and expansion commands.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Analyze all tasks and generate expansion recommendations\ntask-master analyze-complexity\n\n# Specify a custom output file\ntask-master analyze-complexity --output=custom-report.json\n\n# Override the model used for analysis\ntask-master analyze-complexity --model=claude-3-opus-20240229\n\n# Set a custom complexity threshold (1-10)\ntask-master analyze-complexity --threshold=6\n\n# Use Perplexity AI for research-backed complexity analysis\ntask-master analyze-complexity --research\n```\n\n----------------------------------------\n\nTITLE: Managing Task Dependencies (Bash)\nDESCRIPTION: These commands allow you to manage task dependencies. You can add or remove dependencies between tasks, validate existing dependencies, and automatically fix invalid dependencies. Task IDs are used to define the relationships.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Add a dependency to a task\ntask-master add-dependency --id=<id> --depends-on=<id>\n\n# Remove a dependency from a task\ntask-master remove-dependency --id=<id> --depends-on=<id>\n\n# Validate dependencies without fixing them\ntask-master validate-dependencies\n\n# Find and fix invalid dependencies automatically\ntask-master fix-dependencies\n```\n\n----------------------------------------\n\nTITLE: Expanding Tasks with Task-Master CLI\nDESCRIPTION: Command to expand tasks into subtasks, optionally using complexity analysis recommendations. It can expand individual tasks or all tasks, prioritizing by complexity score when a report exists.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Expand a task, using complexity report recommendations if available\ntask-master expand --id=8\n\n# Expand all tasks, prioritizing by complexity score if a report exists\ntask-master expand --all\n\n# Override recommendations with explicit values\ntask-master expand --id=8 --num=5 --prompt=\"Custom prompt\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Subtasks (Bash)\nDESCRIPTION: These commands remove subtasks from specific tasks or all tasks. It's useful for regenerating subtasks or cleaning up existing task structures.  You can target a single task, multiple tasks identified by their IDs, or all tasks.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Clear subtasks from a specific task\ntask-master clear-subtasks --id=<id>\n\n# Clear subtasks from multiple tasks\ntask-master clear-subtasks --id=1,2,3\n\n# Clear subtasks from all tasks\ntask-master clear-subtasks --all\n```\n\n----------------------------------------\n\nTITLE: Showing Task Details with Task-Master CLI\nDESCRIPTION: Command to view detailed information about a specific task or subtask. It displays comprehensive information including status, dependencies, and provides contextual suggested actions.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/scripts/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Show details for a specific task\ntask-master show 1\n\n# Alternative syntax with --id option\ntask-master show --id=1\n\n# Show details for a subtask\ntask-master show --id=1.2\n\n# Specify a different tasks file\ntask-master show 3 --file=custom-tasks.json\n```\n\n----------------------------------------\n\nTITLE: Adding a New Task (Bash)\nDESCRIPTION: These commands add new tasks to the system. You can add a task using AI-generated content based on a prompt, include dependencies, and set a priority. The prompt provides the description of the new task.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Add a new task using AI\ntask-master add-task --prompt=\"Description of the new task\"\n\n# Add a task with dependencies\ntask-master add-task --prompt=\"Description\" --dependencies=1,2,3\n\n# Add a task with priority\ntask-master add-task --prompt=\"Description\" --priority=high\n```\n\n----------------------------------------\n\nTITLE: Adding PHPX to PATH (Permanent) - Shell - Bash\nDESCRIPTION: For permanent access to the manually installed PHPX executable, add its 'bin' directory to your shell's configuration file (like .zshrc or .bashrc). Remember to replace '/path/to/phpx' with the actual path.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\necho 'export PATH=\"$PATH:/path/to/phpx/bin\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Executing Known PHAR (Full Name, Specific Version) - PHPX - Bash\nDESCRIPTION: Execute a known PHAR file using its full name and specifying a precise version number using the ':version' suffix.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nphpx php-cs-fixer.phar:3.26 fix src/\n```\n\n----------------------------------------\n\nTITLE: Viewing Complexity Report (Bash)\nDESCRIPTION: These commands display the task complexity analysis report.  You can view the report at the default location or specify a custom file path. The report shows tasks organized by complexity score and provides expansion commands.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Display the task complexity analysis report\ntask-master complexity-report\n\n# View a report at a custom location\ntask-master complexity-report --file=my-report.json\n```\n\n----------------------------------------\n\nTITLE: Execution Environment Class\nDESCRIPTION: This class sets up the environment for executing a PHP package. It handles setting up temporary directories and any other environmental configurations needed to isolate and safely execute the package. It needs to be completed with the proper implementation.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/specification.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace PHPX;\n\nclass ExecutionEnvironment {\n    private $package;\n    private $dependencies;\n    private $workDir;\n    \n    public function __construct(Package $package, array $dependencies) {\n\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Starting a new project\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to parse a PRD and set up the initial tasks. This interaction demonstrates the usage of an external agent in conjunction with the task master tool.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nI've just initialized a new project with Claude Task Master. I have a PRD at scripts/prd.txt.\nCan you help me parse it and set up the initial tasks?\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Package via PHPX - PHPX - Bash\nDESCRIPTION: Execute a Composer package by specifying the vendor/package name (and optionally version) followed by the arguments you want to pass to the package's entry point.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nphpx vendor/package[:version] [arguments]\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Completing work\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to mark a task as complete and get the next task. This interaction demonstrates how to use AI to manage task status and progression.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nI've finished implementing the authentication system described in task 2. All tests are passing.\nPlease mark it as complete and tell me what I should work on next.\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Handling changes\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to update future tasks to reflect a change in technology. This interaction demonstrates how to keep tasks aligned with current approaches.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nWe've decided to use MongoDB instead of PostgreSQL. Can you update all future tasks to reflect this change?\n```\n\n----------------------------------------\n\nTITLE: Generating Task Files from tasks.json (Bash)\nDESCRIPTION: This command generates individual task files based on the data present in the `tasks.json` file. It acts as an initial step to propagate tasks from a JSON format to a file-based system.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntask-master generate\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Managing subtasks\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to clear and regenerate subtasks with a different approach. This interaction demonstrates how to use AI for task decomposition and refinement.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nI need to regenerate the subtasks for task 3 with a different approach. Can you help me clear and regenerate them?\n```\n\n----------------------------------------\n\nTITLE: Executing Known PHAR (Alias, Latest) - PHPX - Bash\nDESCRIPTION: Execute a known PHAR file using its defined alias (like 'cs-fixer'). PHPX will resolve the alias and use the latest available version of the corresponding PHAR.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nphpx cs-fixer fix src/\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Analyzing complexity\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to analyze the complexity of tasks. This interaction demonstrates how to leverage AI to identify tasks that need further breakdown.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCan you analyze the complexity of our tasks to help me understand which ones need to be broken down further?\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Implementing a specific task\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to get assistance with implementing a specific task. This interaction demonstrates how to leverage AI to understand task requirements and approach.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nI'd like to implement task 4. Can you help me understand what needs to be done and how to approach it?\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Working on tasks\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to identify the next task based on dependencies and priorities. This interaction demonstrates how to leverage AI for task selection.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nWhat's the next task I should work on? Please consider dependencies and priorities.\n```\n\n----------------------------------------\n\nTITLE: Executing Known PHAR (Alias, Specific Version) - PHPX - Bash\nDESCRIPTION: Execute a known PHAR file using its alias and specifying a precise version number using the ':version' suffix.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\nphpx cs-fixer:3.26 fix src/\n```\n\n----------------------------------------\n\nTITLE: Example Cursor AI Interactions - Viewing complexity report\nDESCRIPTION: An example of an interaction with the Cursor AI agent showing how to view the complexity report in a readable format. This interaction demonstrates how to review task complexity analysis.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README-task-master.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nCan you show me the complexity report in a more readable format?\n```\n\n----------------------------------------\n\nTITLE: Making PHPX Executable - Shell - Bash\nDESCRIPTION: For the manual installation, ensure the PHPX binary script in the 'bin' directory has execute permissions.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nchmod +x bin/phpx\n```\n\n----------------------------------------\n\nTITLE: Verifying PHP Requirement - PHP - Bash\nDESCRIPTION: Before installing PHPX, verify that your system meets the minimum PHP version requirement (8.1 or higher) by checking the installed PHP version.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp -v\n```\n\n----------------------------------------\n\nTITLE: Executing Local PHAR via PHPX - PHPX - Bash\nDESCRIPTION: Run a PHAR file located on your local filesystem by providing its full path to PHPX, followed by any arguments the PHAR accepts.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nphpx path/to/your-tool.phar [arguments]\n```\n\n----------------------------------------\n\nTITLE: Executing Known PHAR (Full Name, Latest) - PHPX - Bash\nDESCRIPTION: Execute a known PHAR file (like php-cs-fixer.phar) by its full name. PHPX will use the latest available version unless specified otherwise.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nphpx php-cs-fixer.phar fix src/\n```\n\n----------------------------------------\n\nTITLE: Executing Known PHAR (Alias, Major Version) - PHPX - Bash\nDESCRIPTION: Execute a known PHAR using its alias and specifying only the major version number to run a specific major release.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\nphpx phpunit:9 --filter MyTest\n```\n\n----------------------------------------\n\nTITLE: Executing PHPUnit via PHPX (Version) - PHPUnit/PHPX - Bash\nDESCRIPTION: An example of using PHPX to execute the 'phpunit/phpunit' package with a specific semantic version constraint (^9.0) and passing the '--version' argument.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nphpx phpunit/phpunit:^9.0 --version\n```\n\n----------------------------------------\n\nTITLE: Executing Known PHAR ('latest' Version Keyword) - PHPX - Bash\nDESCRIPTION: Explicitly request the 'latest' version of a known PHAR using the ':latest' suffix.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\nphpx php-cs-fixer.phar:latest fix\n```\n\n----------------------------------------\n\nTITLE: Viewing PHPX Cache Size - PHPX - Bash\nDESCRIPTION: Use the 'cache:size' command to display detailed information about the size of cached packages and PHARs.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\nphpx cache:size\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPX Cache - PHPX - Bash\nDESCRIPTION: Execute the 'cache:clear' command to remove all cached packages and PHARs, freeing up disk space. This command requires confirmation.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_21\n\nLANGUAGE: Bash\nCODE:\n```\nphpx cache:clear\n```\n\n----------------------------------------\n\nTITLE: Updating Global Composer - Composer - Bash\nDESCRIPTION: If experiencing autoloader issues, especially with a global PHPX installation, ensure your global Composer dependencies and autoloader are up-to-date.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer global update\n```\n\n----------------------------------------\n\nTITLE: Checking PHPX Script Permissions - Shell - Bash\nDESCRIPTION: When facing 'permission denied' errors during manual installation, check the file permissions of the PHPX binary script.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_23\n\nLANGUAGE: Bash\nCODE:\n```\nls -l bin/phpx\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPX Script Permissions - Shell - Bash\nDESCRIPTION: If the PHPX binary script lacks execute permissions during manual installation, use chmod to make it executable.\nSOURCE: https://github.com/eduardocruz/phpx/blob/main/README.md#_snippet_24\n\nLANGUAGE: Bash\nCODE:\n```\nchmod +x bin/phpx\n```"
  }
]