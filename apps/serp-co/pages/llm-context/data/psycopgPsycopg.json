[
  {
    "owner": "psycopg",
    "repo": "psycopg",
    "content": "TITLE: Psycopg Connection Shortcuts\nDESCRIPTION: Shows simplified patterns for database operations using Psycopg 3's shortcut methods, demonstrating how to reduce code verbosity while maintaining functionality.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/usage.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(psycopg.connect(DSN).execute(\"SELECT now()\").fetchone()[0])\n# 2042-07-12 18:15:10.706497+01:00\n```\n\n----------------------------------------\n\nTITLE: Using Connection Context Manager for Automatic Commit in Psycopg\nDESCRIPTION: Shows how to use the connection context manager to ensure transactions are automatically committed at the end of the block, fixing the issue of uncommitted changes.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect() as conn:\n\n    cur = conn.cursor()\n\n    cur.execute(\"SELECT count(*) FROM my_table\")\n    # This function call executes:\n    # - BEGIN\n    # - SELECT count(*) FROM my_table\n    # So now a transaction has started.\n\n    cur.execute(\"INSERT INTO data VALUES (%s)\", (\"Hello\",))\n    # This statement is executed inside the transaction\n\n# No exception at the end of the block:\n# COMMIT is executed.\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Positional Parameters in Python using Psycopg\nDESCRIPTION: Demonstrates how to use positional parameters to safely insert data into a PostgreSQL database using Psycopg. The example shows inserting an ID, date, and name into a table.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/params.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"\"\"\n    INSERT INTO some_table (id, created_at, last_name)\n    VALUES (%s, %s, %s);\n    \"\"\",\n    (10, datetime.date(2020, 11, 18), \"O'Reilly\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Database Operations with Psycopg\nDESCRIPTION: Demonstrates fundamental database operations including connecting to a database, creating tables, inserting data, and querying records. Shows proper usage of connection and cursor objects within context managers.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/usage.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Note: the module name is psycopg, not psycopg3\nimport psycopg\n\n# Connect to an existing database\nwith psycopg.connect(\"dbname=test user=postgres\") as conn:\n\n    # Open a cursor to perform database operations\n    with conn.cursor() as cur:\n\n        # Execute a command: this creates a new table\n        cur.execute(\"\"\"\n            CREATE TABLE test (\n                id serial PRIMARY KEY,\n                num integer,\n                data text)\n            \"\"\")\n\n        # Pass data to fill a query placeholders and let Psycopg perform\n        # the correct conversion (no SQL injections!)\n        cur.execute(\n            \"INSERT INTO test (num, data) VALUES (%s, %s)\",\n            (100, \"abc'def\"))\n\n        # Query the database and obtain data as Python objects.\n        cur.execute(\"SELECT * FROM test\")\n        print(cur.fetchone())\n        # will print (1, 100, \"abc'def\")\n\n        # You can use `cur.executemany()` to perform an operation in batch\n        cur.executemany(\n            \"INSERT INTO test (num) values (%s)\",\n            [(33,), (66,), (99,)])\n\n        # You can use `cur.fetchmany()`, `cur.fetchall()` to return a list\n        # of several records, or even iterate on the cursor\n        cur.execute(\"SELECT id, num FROM test order by num\")\n        for record in cur:\n            print(record)\n\n        # Make the changes to the database persistent\n        conn.commit()\n```\n\n----------------------------------------\n\nTITLE: Using class_row Factory in Psycopg\nDESCRIPTION: Demonstrates creating custom class-based row factories to return results as dataclass instances.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/rows.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nimport psycopg\nfrom psycopg.rows import class_row\n\n@dataclass\nclass Person:\n    first_name: str\n    last_name: str\n    age: int = None\n\nconn = psycopg.connect()\ncur = conn.cursor(row_factory=class_row(Person))\n\ncur.execute(\"select 'John' as first_name, 'Smith' as last_name\").fetchone()\n# Returns: Person(first_name='John', last_name='Smith', age=None)\n```\n\n----------------------------------------\n\nTITLE: Connection Context Management\nDESCRIPTION: Demonstrates the proper use of connection objects with context managers, showing automatic transaction handling and resource cleanup.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/usage.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect() as conn:\n    ... # use the connection\n\n# the connection is now closed\n```\n\n----------------------------------------\n\nTITLE: Using AsyncConnection and AsyncCursor with asyncio in Python\nDESCRIPTION: Demonstrates how to use asynchronous database connections and cursors with the asyncio interface. The example shows connecting to a database, executing queries, and fetching results using async/await syntax.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with await psycopg.AsyncConnection.connect(\n        \"dbname=test user=postgres\") as aconn:\n    async with aconn.cursor() as acur:\n        await acur.execute(\n            \"INSERT INTO test (num, data) VALUES (%s, %s)\",\n            (100, \"abc'def\"))\n        await acur.execute(\"SELECT * FROM test\")\n        await acur.fetchone()\n        # will return (1, 100, \"abc'def\")\n        async for record in acur:\n            print(record)\n```\n\n----------------------------------------\n\nTITLE: Inserting and Retrieving Unicode Strings in PostgreSQL with Python\nDESCRIPTION: Shows how to insert and retrieve Unicode strings in PostgreSQL using psycopg, demonstrating proper handling of non-ASCII characters.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect()\nconn.execute(\n    \"INSERT INTO menu (id, entry) VALUES (%s, %s)\",\n    (1, \"Crème Brûlée at 4.99€\"))\nconn.execute(\"SELECT entry FROM menu WHERE id = 1\").fetchone()[0]\n'Crème Brûlée at 4.99€'\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Context with Autocommit Connection in Psycopg\nDESCRIPTION: Shows how to wrap specific operations in explicit transaction blocks within an autocommit connection, providing atomic execution when needed while avoiding idle transactions.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect(autocommit=True) as conn:\n\n    cur = conn.cursor()\n\n    cur.execute(\"SELECT count(*) FROM my_table\")\n    # The connection is autocommit, so no BEGIN executed.\n\n    with conn.transaction():\n        # BEGIN is executed, a transaction started\n\n        cur.execute(\"INSERT INTO data VALUES (%s)\", (\"Hello\",))\n        cur.execute(\"INSERT INTO times VALUES (now())\")\n        # These two operation run atomically in the same transaction\n\n    # COMMIT is executed at the end of the block.\n    # The connection is in idle state again.\n\n# The connection is closed at the end of the block.\n```\n\n----------------------------------------\n\nTITLE: Nested Transactions with Error Handling in Psycopg\nDESCRIPTION: Demonstrates how to use nested transaction blocks to implement partial failure recovery, allowing some operations to fail while still completing the outer transaction successfully.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith conn.transaction() as tx1:\n    num_ok = 0\n    for operation in operations:\n        try:\n            with conn.transaction() as tx2:\n                unreliable_operation(conn, operation)\n        except Exception:\n            logger.exception(f\"{operation} failed\")\n        else:\n            num_ok += 1\n\n    save_number_of_successes(conn, num_ok)\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Behavior Example in Psycopg\nDESCRIPTION: Demonstrates the default transaction behavior in Psycopg where operations start a transaction automatically but changes are discarded if not committed before closing the connection.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect()\n\n# Creating a cursor doesn't start a transaction or affect the connection\n# in any way.\ncur = conn.cursor()\n\ncur.execute(\"SELECT count(*) FROM my_table\")\n# This function call executes:\n# - BEGIN\n# - SELECT count(*) FROM my_table\n# So now a transaction has started.\n\n# If your program spends a long time in this state, the server will keep\n# a connection \"idle in transaction\", which is likely something undesired\n\ncur.execute(\"INSERT INTO data VALUES (%s)\", (\"Hello\",))\n# This statement is executed inside the transaction\n\nconn.close()\n# No COMMIT was sent: the INSERT was discarded.\n```\n\n----------------------------------------\n\nTITLE: Pool Startup Validation in Python\nDESCRIPTION: Example showing how to use the wait() method to ensure proper database configuration early in application startup. This will block until min_size connections are established or fail with a PoolTimeout if connections cannot be made.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith ConnectionPool(...) as pool:\n    pool.wait()\n    use_the(pool)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Named Parameters in Python using Psycopg\nDESCRIPTION: Shows how to use named parameters to insert data into a PostgreSQL database using Psycopg. This method allows specifying values in any order and repeating values.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/params.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"\"\"\n    INSERT INTO some_table (id, created_at, updated_at, last_name)\n    VALUES (%(id)s, %(created)s, %(created)s, %(name)s);\n    \"\"\",\n    {'id': 10, 'name': \"O'Reilly\", 'created': datetime.date(2020, 11, 18)})\n```\n\n----------------------------------------\n\nTITLE: Correct SQL Query Parameter Passing in Python using Psycopg\nDESCRIPTION: Shows the correct way to pass parameters to a SQL query using Psycopg, which prevents SQL injection vulnerabilities.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/params.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"INSERT INTO numbers VALUES (%s, %s)\", (10, 20))  # correct\n```\n\n----------------------------------------\n\nTITLE: Using Async Connection Pool with Context Managers in Python\nDESCRIPTION: Example demonstrating how to use an AsyncConnectionPool for asynchronous code. It follows the same context manager pattern as the synchronous version but uses async/await syntax for asynchronous operations.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with AsyncConnectionPool(...) as pool:\n    async with pool.connection() as conn:\n        await conn.execute(\"SELECT something FROM somewhere ...\")\n\n        async with conn.cursor() as cur:\n            await cur.execute(\"SELECT something else...\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Notifications with Psycopg\nDESCRIPTION: Shows how to use PostgreSQL's LISTEN/NOTIFY functionality for asynchronous communication between database sessions. Demonstrates notification handling using a generator pattern.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg\nconn = psycopg.connect(\"\", autocommit=True)\nconn.execute(\"LISTEN mychan\")\ngen = conn.notifies()\nfor notify in gen:\n    print(notify)\n    if notify.payload == \"stop\":\n        gen.close()\nprint(\"there, I stopped\")\n```\n\n----------------------------------------\n\nTITLE: Using Connection Pool with Context Managers in Python\nDESCRIPTION: Example showing how to use a ConnectionPool as a context manager in Python. Within the pool context, connections are requested using the connection() method, also as a context manager. This pattern ensures proper connection handling and transaction management.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith ConnectionPool(...) as pool:\n    with pool.connection() as conn:\n        conn.execute(\"SELECT something FROM somewhere ...\")\n\n        with conn.cursor() as cur:\n            cur.execute(\"SELECT something else...\")\n\n    # At the end of the `connection()` context, the transaction is committed\n    # or rolled back, and the connection returned to the pool\n\n# At the end of the pool context, all the resources used by the pool are released\n```\n\n----------------------------------------\n\nTITLE: Using Stream Method with Closing Context in Python\nDESCRIPTION: Demonstrates how to use the stream method with a closing context to ensure proper cleanup in case of errors.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith closing(cur.stream(\"select generate_series(1, 10000)\")) as gen:\n    for rec in gen:\n        something(rec)  # might fail\n```\n\n----------------------------------------\n\nTITLE: Working with Enum Types Between Python and PostgreSQL\nDESCRIPTION: Shows how to set up bidirectional mapping between Python Enum classes and PostgreSQL enum types using Psycopg's EnumInfo and register_enum functionality.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from enum import Enum, auto\n>>> from psycopg.types.enum import EnumInfo, register_enum\n\n>>> class UserRole(Enum):\n...     ADMIN = auto()\n...     EDITOR = auto()\n...     GUEST = auto()\n\n>>> conn.execute(\"CREATE TYPE user_role AS ENUM ('ADMIN', 'EDITOR', 'GUEST')\")\n\n>>> info = EnumInfo.fetch(conn, \"user_role\")\n>>> register_enum(info, conn, UserRole)\n\n>>> some_editor = info.enum.EDITOR\n>>> some_editor\n<UserRole.EDITOR: 2>\n\n>>> conn.execute(\n...     \"SELECT pg_typeof(%(editor)s), %(editor)s\",\n...     {\"editor\": some_editor}\n... ).fetchone()\n('user_role', <UserRole.EDITOR: 2>)\n\n>>> conn.execute(\n...     \"SELECT ARRAY[%s, %s]\",\n...     [UserRole.ADMIN, UserRole.GUEST]\n... ).fetchone()\n[<UserRole.ADMIN: 1>, <UserRole.GUEST: 3>]\n```\n\n----------------------------------------\n\nTITLE: Using JSON Types with Custom Serialization in Psycopg\nDESCRIPTION: Demonstrates JSON data insertion using Psycopg's Json/Jsonb wrappers. Shows both basic usage and custom serialization techniques with different JSON libraries and customized encoder functions.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg.types.json import Jsonb\n\nthing = {\"foo\": [\"bar\", 42]}\nconn.execute(\"INSERT INTO mytable VALUES (%s)\", [Jsonb(thing)])\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom psycopg.types.json import Jsonb, set_json_dumps, set_json_loads\nimport ujson\n\n# Use a faster dump function\nset_json_dumps(ujson.dumps)\n\n# Return floating point values as Decimal, just in one connection\nset_json_loads(partial(json.loads, parse_float=Decimal), conn)\n\nconn.execute(\"SELECT %s\", [Jsonb({\"value\": 123.45})]).fetchone()[0]\n# {'value': Decimal('123.45')}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom uuid import UUID, uuid4\n\nclass UUIDEncoder(json.JSONEncoder):\n    \"\"\"A JSON encoder which can dump UUID.\"\"\"\n    def default(self, obj):\n        if isinstance(obj, UUID):\n            return str(obj)\n        return json.JSONEncoder.default(self, obj)\n\nuuid_dumps = partial(json.dumps, cls=UUIDEncoder)\nobj = {\"uuid\": uuid4()}\ncnn.execute(\"INSERT INTO objs VALUES %s\", [Json(obj, dumps=uuid_dumps)])\n# will insert: {'uuid': '0a40799d-3980-4c65-8315-2956b18ab0e1'}\n```\n\n----------------------------------------\n\nTITLE: Using sql Module for Dynamic Identifiers\nDESCRIPTION: Example of using psycopg.sql module to safely format identifiers like table names or column names in SQL statements.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg import sql\n\n# This will quote the user and the password using the right quotes\n# e.g.: ALTER USER \"foo\" SET PASSWORD 'bar'\n>>> conn.execute(\n...     sql.SQL(\"ALTER USER {} SET PASSWORD {}\")\n...     .format(sql.Identifier(username), password))\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Quality Check in Psycopg ConnectionPool\nDESCRIPTION: This snippet demonstrates how to configure a connection quality check callback when creating a ConnectionPool. It uses the built-in check_connection method to ensure that only working connections are passed to clients.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith ConnectionPool(\n    ..., check=ConnectionPool.check_connection, ...\n) as pool:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg 3 with Binary Package\nDESCRIPTION: Installs Psycopg 3 using pip with the binary package. This is the quickest way to start developing with Psycopg 3. It requires pip 20.3 or later.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/install.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip\npip install \"psycopg[binary]\"\n```\n\n----------------------------------------\n\nTITLE: Using dict_row Factory in Psycopg\nDESCRIPTION: Demonstrates how to use the dict_row factory to return query results as dictionaries instead of tuples. The example shows connecting with the row_factory parameter and executing a simple query that returns name and age fields as a dictionary.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/rows.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.rows import dict_row\n\n>>> conn = psycopg.connect(DSN, row_factory=dict_row)\n\n>>> conn.execute(\"select 'John Doe' as name, 33 as age\").fetchone()\n{'name': 'John Doe', 'age': 33}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Connection Pool in Python\nDESCRIPTION: Example showing how to create a connection pool as a global object that can be imported and used by other modules. This approach starts the connection process at import time.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# module db.py in your program\nfrom psycopg_pool import ConnectionPool\n\npool = ConnectionPool(..., open=True, ...)\n# the pool starts connecting immediately.\n\n# in another module\nfrom .db import pool\n\ndef my_function():\n    with pool.connection() as conn:\n        conn.execute(...)\n```\n\n----------------------------------------\n\nTITLE: Async Iteration Over Cursor Results in Psycopg3\nDESCRIPTION: Shows how to asynchronously iterate over query results using a cursor. This approach allows processing database records one at a time without loading all results into memory.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync for record in cur:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Cursor Creation with Context Manager\nDESCRIPTION: Example demonstrating how to create and automatically close a cursor using a context manager pattern.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/connections.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cur:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Registering and Using PostgreSQL Composite Types in Python\nDESCRIPTION: Shows how to fetch composite type information, register it with the connection, and use it for bidirectional conversion between PostgreSQL composite types and Python objects.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.types.composite import CompositeInfo, register_composite\n\n>>> conn.execute(\"CREATE TYPE card AS (value int, suit text)\")\n\n>>> info = CompositeInfo.fetch(conn, \"card\")\n>>> register_composite(info, conn)\n\n>>> my_card = info.python_type(8, \"hearts\")\n>>> my_card\ncard(value=8, suit='hearts')\n\n>>> conn.execute(\n...     \"SELECT pg_typeof(%(card)s), (%(card)s).suit\", {\"card\": my_card}\n...     ).fetchone()\n('card', 'hearts')\n\n>>> conn.execute(\"SELECT (%s, %s)::card\", [1, \"spades\"]).fetchone()[0]\ncard(value=1, suit='spades')\n```\n\n----------------------------------------\n\nTITLE: Querying PgBouncer Admin Console with ClientCursor\nDESCRIPTION: Demonstrates how to use a ClientCursor to query the PgBouncer admin console, which requires the simple query protocol.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import connect, ClientCursor\n\nconn = psycopg.connect(ADMIN_DSN, cursor_factory=ClientCursor)\ncur = conn.cursor()\ncur.execute(\"SHOW STATS\")\ncur.fetchall()\n```\n\n----------------------------------------\n\nTITLE: Exporting Data to a File with COPY TO STDOUT\nDESCRIPTION: Demonstrates how to produce data in COPY format by iterating over a Copy object from a COPY TO STDOUT operation, which produces a stream of bytes objects that can be written to a file.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"data.out\", \"wb\") as f:\n    with cursor.copy(\"COPY table_name TO STDOUT\") as copy:\n        for data in copy:\n            f.write(data)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Cursor Results in Python\nDESCRIPTION: Shows how to iterate over the records in a cursor's current recordset using a for loop.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor record in cursor:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Transaction Management with Context Manager\nDESCRIPTION: Example showing how to manage transactions using the transaction context manager, with optional transaction object access.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/connections.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith conn.transaction():\n    ...\n\nwith conn.transaction() as tx:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Connection String with make_conninfo in Python\nDESCRIPTION: Shows how to use the make_conninfo function to create a connection string from a base string and additional parameters. The function combines the base string with the provided parameters, with newer parameters overriding any existing ones.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/conninfo.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> make_conninfo(\"dbname=db user=jeff\", user=\"piro\", port=5432)\n'dbname=db user=piro port=5432'\n```\n\n----------------------------------------\n\nTITLE: Error Handling with SQLSTATE Exceptions in Python\nDESCRIPTION: Example showing how to catch specific PostgreSQL errors using SQLSTATE exception classes. Demonstrates catching a LockNotAvailable error when attempting to lock a table.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/errors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    cur.execute(\"LOCK TABLE mytable IN ACCESS EXCLUSIVE MODE NOWAIT\")\nexcept psycopg.errors.LockNotAvailable:\n    locked = True\n```\n\n----------------------------------------\n\nTITLE: Writing Data Row-by-Row in Psycopg COPY Operations\nDESCRIPTION: Demonstrates how to load data into the database from a Python iterable using write_row() with COPY FROM STDIN. Python values are automatically adapted as they would be in normal querying.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrecords = [(10, 20, \"hello\"), (40, None, \"world\")]\n\nwith cursor.copy(\"COPY sample (col1, col2, col3) FROM STDIN\") as copy:\n    for record in records:\n        copy.write_row(record)\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric to Float in Psycopg (Python)\nDESCRIPTION: This snippet demonstrates how to register a custom loader for numeric values in Psycopg, converting them to Python floats instead of Decimals. It shows the default behavior and then the customized behavior after registering the FloatLoader.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/adapt.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect()\n\nconn.execute(\"SELECT 123.45\").fetchone()[0]\n# Decimal('123.45')\n\nconn.adapters.register_loader(\"numeric\", psycopg.types.numeric.FloatLoader)\n\nconn.execute(\"SELECT 123.45\").fetchone()[0]\n# 123.45\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Factories in Psycopg 3 for Custom Result Formats\nDESCRIPTION: Shows how to use row factories in Psycopg 3 to customize the format of query results. Examples include using dict_row for dictionary-like results and namedtuple_row for named tuple results.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg.rows import dict_row, namedtuple_row\n\n# By default, every cursor will return dicts.\nconn = psycopg.connect(DSN, row_factory=dict_row)\n\n# You can set a row factory on a single cursor too.\ncur = conn.cursor(row_factory=namedtuple_row)\n```\n\n----------------------------------------\n\nTITLE: Using Async Connection Pool with FastAPI Lifespan in Python\nDESCRIPTION: Example showing how to integrate an AsyncConnectionPool with FastAPI's lifespan context manager. This ensures the pool is properly opened at application startup and closed on shutdown.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npool = AsyncConnectionPool(..., open=False, ...)\n\n@asynccontextmanager\nasync def lifespan(instance: FastAPI):\n    await pool.open()\n    yield\n    await pool.close()\n\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Handling Infinity Date in Psycopg (Python)\nDESCRIPTION: This example shows how to handle the 'infinity' date in PostgreSQL, which is not natively supported in Python. It creates custom dumper and loader classes to map Python's date.max and date.min to PostgreSQL's infinity and -infinity dates.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/adapt.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\n# Subclass existing adapters so that the base case is handled normally.\nfrom psycopg.types.datetime import DateLoader, DateDumper\n\nclass InfDateDumper(DateDumper):\n    def dump(self, obj):\n        if obj == date.max:\n            return b\"infinity\"\n        elif obj == date.min:\n            return b\"-infinity\"\n        else:\n            return super().dump(obj)\n\nclass InfDateLoader(DateLoader):\n    def load(self, data):\n        if data == b\"infinity\":\n            return date.max\n        elif data == b\"-infinity\":\n            return date.min\n        else:\n            return super().load(data)\n\n# The new classes can be registered globally, on a connection, on a cursor\ncur.adapters.register_dumper(date, InfDateDumper)\ncur.adapters.register_loader(\"date\", InfDateLoader)\n\ncur.execute(\"SELECT %s::text, %s::text\", [date(2020, 12, 31), date.max]).fetchone()\n# ('2020-12-31', 'infinity')\ncur.execute(\"SELECT '2020-12-31'::date, 'infinity'::date\").fetchone()\n# (datetime.date(2020, 12, 31), datetime.date(9999, 12, 31))\n```\n\n----------------------------------------\n\nTITLE: Working with PostgreSQL Multirange Types in Python\nDESCRIPTION: Shows how to create, register, and use custom multirange types that correspond to custom range types, enabling bidirectional conversion between PostgreSQL and Python.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.types.multirange import \\\n...     Multirange, MultirangeInfo, register_multirange\n>>> from psycopg.types.range import Range\n\n>>> conn.execute(\"CREATE TYPE strrange AS RANGE (SUBTYPE = text)\")\n>>> info = MultirangeInfo.fetch(conn, \"strmultirange\")\n>>> register_multirange(info, conn)\n\n>>> rec = conn.execute(\n...     \"SELECT pg_typeof(%(mr)s), %(mr)s\",\n...     {\"mr\": Multirange([Range(\"a\", \"q\"), Range(\"l\", \"z\")])}).fetchone()\n\n>>> rec[0]\n'strmultirange'\n>>> rec[1]\nMultirange([Range('a', 'z', '[)')])\n```\n\n----------------------------------------\n\nTITLE: Using FileWriter with Copy for Offline Data Export in Python\nDESCRIPTION: This example demonstrates how to use the FileWriter class with a Copy object to save records in PostgreSQL COPY format to a file without executing a COPY operation on the database. It iterates through a list of records and writes them row by row to the specified file.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/copy.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"target-file.pgcopy\", \"wb\") as f:\n    with Copy(cur, writer=FileWriter(f)) as copy:\n        for record in records\n            copy.write_row(record)\n```\n\n----------------------------------------\n\nTITLE: Configuring DateStyle for Timestamps Connection in Python\nDESCRIPTION: Example of setting DateStyle connection parameter in Psycopg to ensure timestamp compatibility. This is necessary because loading timestamp with time zone in text format is only supported with ISO format.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> conn = psycopg.connect(options=\"-c datestyle=ISO,YMD\")\n>>> conn.execute(\"show datestyle\").fetchone()[0]\n# 'ISO, YMD'\n```\n\n----------------------------------------\n\nTITLE: Autocommit Connection Example in Psycopg\nDESCRIPTION: Demonstrates using an autocommit connection where database operations are immediately persisted without requiring explicit commits, useful for operations that can't be run in transactions.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect(autocommit=True) as conn:\n\n    cur = conn.cursor()\n\n    cur.execute(\"SELECT count(*) FROM my_table\")\n    # This function call now only executes:\n    # - SELECT count(*) FROM my_table\n    # and no transaction starts.\n\n    cur.execute(\"INSERT INTO data VALUES (%s)\", (\"Hello\",))\n    # The result of this statement is persisted immediately by the database\n\n# The connection is closed at the end of the block but, because it is not\n# in a transaction state, no COMMIT is executed.\n```\n\n----------------------------------------\n\nTITLE: Basic Connection Usage with Context Manager\nDESCRIPTION: Example showing how to use the Connection class with a context manager to automatically close the connection when done.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/connections.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect() as conn:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Copying a Table Across PostgreSQL Servers with Psycopg\nDESCRIPTION: Demonstrates how to copy data between two PostgreSQL servers by connecting to both databases and using COPY TO and COPY FROM operations together. The binary format is used for better performance when schemas match perfectly.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect(dsn_src) as conn1, psycopg.connect(dsn_tgt) as conn2:\n    with conn1.cursor().copy(\"COPY src TO STDOUT (FORMAT BINARY)\") as copy1:\n        with conn2.cursor().copy(\"COPY tgt FROM STDIN (FORMAT BINARY)\") as copy2:\n            for data in copy1:\n                copy2.write(data)\n```\n\n----------------------------------------\n\nTITLE: Creating a ClientCursor in Python\nDESCRIPTION: Demonstrates how to create a ClientCursor object from a database connection in Psycopg. ClientCursors use client-side binding and are useful for porting Psycopg 2 code or when server-side binding is not possible.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import connect, ClientCursor\n\nconn = psycopg.connect(DSN, cursor_factory=ClientCursor)\ncur = conn.cursor()\n# <psycopg.ClientCursor [no result] [IDLE] (database=piro) at 0x7fd977ae2880>\n```\n\n----------------------------------------\n\nTITLE: Transaction Context with Non-Autocommit Connection in Psycopg\nDESCRIPTION: Demonstrates how transaction contexts behave with non-autocommit connections, creating savepoints rather than new transactions when an implicit transaction is already active.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect()\n\ncur = conn.cursor()\n\ncur.execute(\"SELECT count(*) FROM my_table\")\n# This function call executes:\n# - BEGIN\n# - SELECT count(*) FROM my_table\n# So now a transaction has started.\n\nwith conn.transaction():\n    # The block starts with a transaction already open, so it will execute\n    # - SAVEPOINT\n\n    cur.execute(\"INSERT INTO data VALUES (%s)\", (\"Hello\",))\n\n# The block was executing a sub-transaction so on exit it will only run:\n# - RELEASE SAVEPOINT\n# The transaction is still on.\n\nconn.close()\n# No COMMIT was sent: the INSERT was discarded.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Row Factory as a Class in Psycopg\nDESCRIPTION: Shows how to create a custom row factory implemented as a class. This example implements DictRowFactory which transforms query results into dictionaries by mapping column names to values.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/rows.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Sequence\nfrom psycopg import Cursor\n\nclass DictRowFactory:\n    def __init__(self, cursor: Cursor[Any]):\n        self.fields = [c.name for c in cursor.description]\n\n    def __call__(self, values: Sequence[Any]) -> dict[str, Any]:\n        return dict(zip(self.fields, values))\n```\n\n----------------------------------------\n\nTITLE: Using Class-based Row Factory with Custom Classes in Psycopg\nDESCRIPTION: Demonstrates using class_row to map query results to custom class instances. This example defines a Person dataclass and uses class_row to create Person objects from query results.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/rows.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from dataclasses import dataclass\n\n>>> @dataclass\n... class Person:\n...     name: str\n...     age: int\n...     weight: Optional[int] = None\n\n>>> from psycopg.rows import class_row\n>>> cur = conn.cursor(row_factory=class_row(Person))\n>>> cur.execute(\"select 'John Doe' as name, 33 as age\").fetchone()\nPerson(name='John Doe', age=33, weight=None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timezone Information from PostgreSQL Connection in Python\nDESCRIPTION: Demonstrates how to access the timezone information of a PostgreSQL connection and how timestamptz values are returned with the connection's timezone.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.info.timezone\nzoneinfo.ZoneInfo(key='Europe/London')\n\n>>> conn.execute(\"select '2048-07-08 12:00'::timestamptz\").fetchone()[0]\ndatetime.datetime(2048, 7, 8, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/London'))\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionPool with context manager for connection\nDESCRIPTION: Example of acquiring a connection from the pool using the connection() method with a context manager. The connection is automatically returned to the pool when the context is exited.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith my_pool.connection() as conn:\n    conn.execute(...)\n\n# the connection is now back in the pool\n```\n\n----------------------------------------\n\nTITLE: Using TypeInfo to Register and Convert Custom PostgreSQL Types\nDESCRIPTION: Example of fetching type information for a custom PostgreSQL type, registering it with a connection, and creating a custom loader to convert the type to a Python representation.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/types.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg.adapt import Loader\nfrom psycopg.types import TypeInfo\n\nt = TypeInfo.fetch(conn, \"mytype\")\nt.register(conn)\n\nfor record in conn.execute(\"SELECT mytypearray FROM mytable\"):\n    # records will return lists of \"mytype\" as string\n\nclass MyTypeLoader(Loader):\n    def load(self, data):\n        # parse the data and return a MyType instance\n\nconn.adapters.register_loader(\"mytype\", MyTypeLoader)\n\nfor record in conn.execute(\"SELECT mytypearray FROM mytable\"):\n    # records will return lists of MyType instances\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Connection with Context Managers in Python\nDESCRIPTION: Shows how to use synchronous connections and cursors with context managers. The connection and cursor are automatically closed when leaving their respective contexts, and the transaction is committed.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect(\"dbname=test user=postgres\") as conn:\n    with conn.cursor() as cur:\n        cur.execute(...)\n    # the cursor is closed upon leaving the context\n# the transaction is committed, the connection closed\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Composition with Named Placeholders\nDESCRIPTION: Example showing how to use multiple identifiers with named placeholders in the format method while maintaining parameter placeholders for values.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = sql.SQL(\"SELECT {field} FROM {table} WHERE {pkey} = %s\").format(\n    field=sql.Identifier('my_name'),\n    table=sql.Identifier('some_table'),\n    pkey=sql.Identifier('id'))\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Class Implementation in Python\nDESCRIPTION: Shows implementation of a custom Connection class with built-in row factory configuration.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/typing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyConnection(Connection[DictRow]):\n    def __init__(self, *args, **kwargs):\n        kwargs[\"row_factory\"] = dict_row\n        super().__init__(*args, **kwargs)\n\nwith ConnectionPool(connection_class=MyConnection) as pool:\n    # reveal_type(pool): ConnectionPool[MyConnection]\n\n    with pool.connection() as conn:\n        # reveal_type(conn): MyConnection\n\n        row = conn.execute(\"SELECT now()\").fetchone()\n        # reveal_type(row): dict[str, Any] | None\n\n        print(row)  # {\"now\": datetime.datetime(...)}\n```\n\n----------------------------------------\n\nTITLE: Custom String Dumper for NULL Handling in PostgreSQL\nDESCRIPTION: Implementation of a custom string dumper that converts empty or whitespace-only strings to NULL values in PostgreSQL. This example demonstrates subclassing the built-in string dumper to modify its behavior.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/adapt.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.types.string import StrDumper\n\n>>> class NullStrDumper(StrDumper):\n...     def dump(self, obj):\n...         if not obj or obj.isspace():\n...             return None\n...         return super().dump(obj)\n\n>>> conn.adapters.register_dumper(str, NullStrDumper)\n\n>>> conn.execute(\"select %s, %s, %s, %s\", (\"foo\", \"\", \"bar\", \"  \")).fetchone()\n('foo', None, 'bar', None)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous COPY Operations with Psycopg\nDESCRIPTION: Shows how to perform asynchronous COPY operations using async/await with AsyncCopy objects. This example demonstrates reading from an async file-like object and writing to the database.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync with cursor.copy(\"COPY data FROM STDIN\") as copy:\n    while data := await f.read():\n        await copy.write(data)\n```\n\n----------------------------------------\n\nTITLE: Multiple Statements Without Parameters\nDESCRIPTION: Example of executing multiple statements in a single call without parameters, which is supported in Psycopg 3.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg import sql\n>>> conn.execute(\n...     sql.SQL(\"INSERT INTO foo VALUES ({}); INSERT INTO foo values ({})\"\n...     .format(10, 20))\n```\n\n----------------------------------------\n\nTITLE: Multiple Statements With Parameters Using ClientCursor\nDESCRIPTION: Example of executing multiple statements with parameters using a ClientCursor which provides client-side binding.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> cur = psycopg.ClientCursor(conn)\n>>> cur.execute(\n...     \"INSERT INTO foo VALUES (%s); INSERT INTO foo VALUES (%s)\",\n...     (10, 20))\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionPool as a context manager\nDESCRIPTION: Example of using the ConnectionPool itself as a context manager, which will automatically open the pool when entering the block and close it when exiting.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith ConnectionPool(...) as pool:\n    # code using the pool\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Composition with psycopg.sql Module\nDESCRIPTION: Example demonstrating the recommended approach using SQL and Identifier classes from the psycopg.sql module to safely generate dynamic queries.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import sql\n\ncur.execute(\n    sql.SQL(\"INSERT INTO {} VALUES (%s, %s)\")\n        .format(sql.Identifier('my_table')),\n    [10, 20])\n```\n\n----------------------------------------\n\nTITLE: Handling Database Notices in Psycopg\nDESCRIPTION: Demonstrates how to register a notice handler function that processes server messages. The handler receives diagnostic information through a Diagnostic object containing severity and message details.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import psycopg\n\n>>> def log_notice(diag):\n...     print(f\"The server says: {diag.severity} - {diag.message_primary}\")\n\n>>> conn = psycopg.connect(autocommit=True)\n>>> conn.add_notice_handler(log_notice)\n\n>>> cur = conn.execute(\"ROLLBACK\")\nThe server says: WARNING - there is no transaction in progress\n>>> print(cur.statusmessage)\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Logging Pool Operations in Psycopg\nDESCRIPTION: This example shows how to set up logging for pool operations in Psycopg. It configures the logging module to display INFO level messages for the psycopg.pool logger, which helps in debugging pool behavior.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport logging\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom psycopg_pool import ConnectionPool\n\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s %(levelname)s %(name)s: %(message)s\"\n)\nlogging.getLogger(\"psycopg.pool\").setLevel(logging.INFO)\n\npool = ConnectionPool(min_size=2)\npool.wait()\nlogging.info(\"pool ready\")\n\ndef square(n):\n    with pool.connection() as conn:\n        time.sleep(1)\n        rec = conn.execute(\"SELECT %s * %s\", (n, n)).fetchone()\n        logging.info(f\"The square of {n} is {rec[0]}.\")\n\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    futures = [executor.submit(square, n) for n in range(4)]\n    for future in as_completed(futures):\n        future.result()\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Data in PostgreSQL Queries with Psycopg\nDESCRIPTION: Demonstrates how to retrieve binary data (like images) from a PostgreSQL database using Psycopg. It uses the binary=True parameter to request binary format results.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/params.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\n    \"SELECT image_data FROM images WHERE id = %s\", [image_id], binary=True)\ndata = cur.fetchone()[0]\n```\n\n----------------------------------------\n\nTITLE: Using Arrays with the ANY Operator in PostgreSQL Queries\nDESCRIPTION: Example showing the correct way to use Python lists with PostgreSQL's ANY operator instead of the IN operator, which is a common mistake when working with lists of values in SQL queries.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SELECT * FROM mytable WHERE id IN %s\", [[10,20,30]])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\npsycopg.errors.SyntaxError: syntax error at or near \"$1\"\nLINE 1: SELECT * FROM mytable WHERE id IN $1\n                                              ^\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SELECT * FROM mytable WHERE id = ANY(%s)\", [[10,20,30]])\n```\n\n----------------------------------------\n\nTITLE: Database Query Tracing Example\nDESCRIPTION: Demonstrates how to enable and configure query tracing using PGconn's trace methods. Shows trace output for a simple SELECT query including protocol-level details.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/pq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.pgconn.trace(sys.stderr.fileno())\n>>> conn.pgconn.set_trace_flags(pq.Trace.SUPPRESS_TIMESTAMPS | pq.Trace.REGRESS_MODE)\n>>> conn.execute(\"select now()\")\nF\t13\tParse\t \"\" \"BEGIN\" 0\nF\t14\tBind\t \"\" \"\" 0 0 1 0\nF\t6\tDescribe\t P \"\"\nF\t9\tExecute\t \"\" 0\nF\t4\tSync\nB\t4\tParseComplete\nB\t4\tBindComplete\nB\t4\tNoData\nB\t10\tCommandComplete\t \"BEGIN\"\nB\t5\tReadyForQuery\t T\nF\t17\tQuery\t \"select now()\"\nB\t28\tRowDescription\t 1 \"now\" NNNN 0 NNNN 8 -1 0\nB\t39\tDataRow\t 1 29 '2022-09-14 14:12:16.648035+02'\nB\t13\tCommandComplete\t \"SELECT 1\"\nB\t5\tReadyForQuery\t T\n<psycopg.Cursor [TUPLES_OK] [INTRANS] (database=postgres) at 0x7f18a18ba040>\n>>> conn.pgconn.untrace()\n```\n\n----------------------------------------\n\nTITLE: Using atexit to Close Connection Pool in Python\nDESCRIPTION: Example demonstrating how to register the pool's close method to be called automatically on program exit using the atexit module. This ensures proper cleanup when not using the pool as a context manager.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pool.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\natexit.register(pool.close)\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Integration with Psycopg in Python\nDESCRIPTION: Demonstrates integration of Pydantic models with Psycopg for type-safe database queries.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/typing.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom typing import Optional\n\nimport psycopg\nfrom psycopg.rows import class_row\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    id: int\n    first_name: str\n    last_name: str\n    dob: Optional[date]\n\ndef fetch_person(id: int) -> Person:\n    with psycopg.connect() as conn:\n        with conn.cursor(row_factory=class_row(Person)) as cur:\n            cur.execute(\n                \"\"\"\n                SELECT id, first_name, last_name, dob\n                FROM (VALUES\n                    (1, 'John', 'Doe', '2000-01-01'::date),\n                    (2, 'Jane', 'White', NULL)\n                ) AS data (id, first_name, last_name, dob)\n                WHERE id = %(id)s;\n                \"\"\",\n                {\"id\": id},\n            )\n            obj = cur.fetchone()\n\n            if not obj:\n                raise KeyError(f\"person {id} not found\")\n\n            return obj\n\nfor id in [1, 2]:\n    p = fetch_person(id)\n    if p.dob:\n        print(f\"{p.first_name} was born in {p.dob.year}\")\n    else:\n        print(f\"Who knows when {p.first_name} was born\")\n```\n\n----------------------------------------\n\nTITLE: Using SQL Composition Results with Cursor Methods\nDESCRIPTION: Example showing how to use the composed SQL object with cursor.execute and how to convert it to a string if needed.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(query, (42,))\nfull_query = query.as_string(cur)\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering Custom Range Types in PostgreSQL\nDESCRIPTION: Example of creating a custom range type for strings, fetching its type information, and registering it with the connection to enable bidirectional conversion.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.types.range import Range, RangeInfo, register_range\n\n>>> conn.execute(\"CREATE TYPE strrange AS RANGE (SUBTYPE = text)\")\n>>> info = RangeInfo.fetch(conn, \"strrange\")\n>>> register_range(info, conn)\n\n>>> conn.execute(\"SELECT pg_typeof(%s)\", [Range(\"a\", \"z\")]).fetchone()[0]\n'strrange'\n\n>>> conn.execute(\"SELECT '[a,z]'::strrange\").fetchone()[0]\nRange('a', 'z', '[]')\n```\n\n----------------------------------------\n\nTITLE: Encrypting Password Example with PGconn\nDESCRIPTION: Example showing how to encrypt a password using the PGconn.encrypt_password() method. The password and rolename are encoded using the connection's encoding before encryption.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/pq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> enc = conn.info.encoding\n>>> encrypted = conn.pgconn.encrypt_password(password.encode(enc), rolename.encode(enc))\nb'SCRAM-SHA-256$4096:...'\n```\n\n----------------------------------------\n\nTITLE: Handling Nested PostgreSQL Composite Types in Python\nDESCRIPTION: Demonstrates how to work with nested composite types in PostgreSQL by registering both the parent and child types with the connection.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"CREATE TYPE card_back AS (face card, back text)\")\n\n>>> info2 = CompositeInfo.fetch(conn, \"card_back\")\n>>> register_composite(info2, conn)\n\n>>> conn.execute(\"SELECT ((8, 'hearts'), 'blue')::card_back\").fetchone()[0]\ncard_back(face=card(value=8, suit='hearts'), back='blue')\n```\n\n----------------------------------------\n\nTITLE: Initiating a COPY Operation with Psycopg's Cursor\nDESCRIPTION: Shows how to initiate a COPY FROM STDIN operation using the cursor.copy() method in a with block. This pattern allows you to pass data to the database using the returned copy object.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith cursor.copy(\"COPY table_name (col1, col2) FROM STDIN\") as copy:\n    # pass data to the 'copy' object using write()/write_row()\n```\n\n----------------------------------------\n\nTITLE: Pipeline Error Handling Example in Python with Psycopg\nDESCRIPTION: Demonstrates pipeline mode error handling with autocommit enabled, showing how failed transactions affect sequence numbers and data insertion. The example shows transaction atomicity and error propagation behavior.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pipeline.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith psycopg.connect(autocommit=True) as conn:\n    with conn.pipeline() as p, conn.cursor() as cur:\n        try:\n            cur.execute(\"INSERT INTO mytable (data) VALUES (%s)\", [\"one\"])\n            cur.execute(\"INSERT INTO no_such_table (data) VALUES (%s)\", [\"two\"])\n            conn.execute(\"INSERT INTO mytable (data) VALUES (%s)\", [\"three\"])\n            p.sync()\n        except psycopg.errors.UndefinedTable:\n            pass\n        cur.execute(\"INSERT INTO mytable (data) VALUES (%s)\", [\"four\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Function for Server-Side Cursor\nDESCRIPTION: A PL/pgSQL function that opens a cursor and returns it. This allows creating server-side cursors from PostgreSQL functions.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_5\n\nLANGUAGE: plpgsql\nCODE:\n```\nBEGIN\n    OPEN $1 FOR SELECT col FROM test;\n    RETURN $1;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Working with UUID Data Type in Psycopg\nDESCRIPTION: Example of UUID handling in Psycopg, showing how Python's uuid.UUID objects are adapted to PostgreSQL's UUID type and back.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"select gen_random_uuid()\").fetchone()[0]\nUUID('97f0dd62-3bd2-459e-89b8-a5e36ea3c16c')\n\n>>> from uuid import uuid4\n>>> conn.execute(\"select gen_random_uuid() = %s\", [uuid4()]).fetchone()[0]\nFalse  # long shot\n```\n\n----------------------------------------\n\nTITLE: Basic Connection and Cursor Type Annotations in Python\nDESCRIPTION: Demonstrates basic type annotations for Psycopg connections and cursors, showing return types for fetch operations.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/typing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect() # type is psycopg.Connection[tuple[Any, ...]]\n\ncur = conn.cursor()      # type is psycopg.Cursor[tuple[Any, ...]]\n\nrec = cur.fetchone()     # type is tuple[Any, ...] | None\n\nrecs = cur.fetchall()    # type is List[tuple[Any, ...]]\n```\n\n----------------------------------------\n\nTITLE: Handling Indeterminate Data Types\nDESCRIPTION: Example showing how to handle indeterminate data type errors by explicitly casting parameters in function calls.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SELECT json_build_array(%s::text, %s::text)\", [\"foo\", \"bar\"])\n```\n\n----------------------------------------\n\nTITLE: Instantiating a RawCursor in Psycopg3\nDESCRIPTION: Python code demonstrating how to create a RawCursor instance directly with a connection, enabling the use of PostgreSQL's native placeholders.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import connect, RawCursor\n\nwith connect(dsn) as conn:\n    with RawCursor(conn) as cur:\n        cur.execute(\"SELECT $1, $2\", [1, \"Hello\"])\n        assert cur.fetchone() == (1, \"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Handling Timezone Conversions with PostgreSQL Timestamptz in Python\nDESCRIPTION: Illustrates how PostgreSQL handles timestamptz data type and converts it based on the connection's timezone setting.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SET TIMEZONE to 'Europe/Rome'\")  # UTC+2 in summer\n\n>>> conn.execute(\"SELECT '2042-07-01 12:00Z'::timestamptz\").fetchone()[0]  # UTC input\ndatetime.datetime(2042, 7, 1, 14, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Rome'))\n```\n\n----------------------------------------\n\nTITLE: Using scalar_row Factory in Psycopg\nDESCRIPTION: Shows how to use scalar_row factory to return single column results directly as values.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/rows.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncur = conn.cursor(row_factory=scalar_row)\ncur.execute(\"SELECT 10 AS foo, 'hello' AS bar\").fetchone()\n# Returns: 10\n```\n\n----------------------------------------\n\nTITLE: Calling PostgreSQL Cursor Function with Psycopg3\nDESCRIPTION: Python code showing how to call a PostgreSQL function that creates a server-side cursor using the Connection.execute() method.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconn.execute(\"SELECT reffunc('curname')\")\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Type Information in Python\nDESCRIPTION: Shows how to access PostgreSQL type information through the adapters.types registry, which contains metadata about PostgreSQL builtin types for adaptation customization.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/module.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> psycopg.adapters.types[\"int4\"]\n<TypeInfo: int4 (oid: 23, array oid: 1007)>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primary Keys after Bulk Insert in Python and SQL\nDESCRIPTION: Shows how to insert multiple records and retrieve their primary keys using executemany with returning=True.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncur.executemany(query, records)\nids = []\nwhile True:\n    ids.append(cur.fetchone()[0])\n    if not cur.nextset():\n        break\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Row Factory in Psycopg\nDESCRIPTION: Shows how to apply a custom row factory when creating a connection and executing a query. This example uses the DictRowFactory to format results and access dictionary fields.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/rows.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect(row_factory=DictRowFactory)\ncur = conn.execute(\"SELECT first_name, last_name, age FROM persons\")\nperson = cur.fetchone()\nprint(f\"{person['first_name']} {person['last_name']}\")\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Percent Sign in SQL Queries with Psycopg\nDESCRIPTION: Illustrates the correct way to include a literal percent sign in a SQL query when using Psycopg. It uses double percent signs to escape the special meaning.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/params.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"SELECT (%s %% 2) = 0 AS even\", (10,))\n```\n\n----------------------------------------\n\nTITLE: Incorrect SQL Identifier Handling Example in Python\nDESCRIPTION: Example showing why passing table names directly as parameters doesn't work in SQL queries.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This will not work\ntable_name = 'my_table'\ncur.execute(\"INSERT INTO %s VALUES (%s, %s)\", [table_name, 10, 20])\n```\n\n----------------------------------------\n\nTITLE: Using ANY() Instead of IN with Array Parameters\nDESCRIPTION: Example showing how to use the ANY() construct with an array parameter instead of IN with a tuple, which is not supported in Psycopg 3.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SELECT * FROM foo WHERE id = ANY(%s)\", [[10,20,30]])\n```\n\n----------------------------------------\n\nTITLE: Condensed Approach with await for Async Connection Context Managers\nDESCRIPTION: Shows the condensed version of the two-step approach using 'async with await' syntax for async connections with context managers.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync with await psycopg.AsyncConnection.connect() as aconn:\n    async with aconn.cursor() as cur:\n        await cur.execute(...)\n```\n\n----------------------------------------\n\nTITLE: Reading Data Row-by-Row from COPY TO STDOUT\nDESCRIPTION: Shows how to read rows from a COPY TO STDOUT operation by iterating on copy.rows(). The example demonstrates that PostgreSQL doesn't provide complete type information, so rows are returned as unparsed data.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith cur.copy(\"COPY (VALUES (10::int, current_date)) TO STDOUT\") as copy:\n    for row in copy.rows():\n        print(row)  # return unparsed data: ('10', '2046-12-24')\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg 3 with pip\nDESCRIPTION: Commands to upgrade pip and install Psycopg 3 with binary and pool dependencies. This ensures the latest version of pip is used and installs Psycopg 3 with recommended optional features.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/psycopg/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip           # to upgrade pip\npip install \"psycopg[binary,pool]\"  # to install package and dependencies\n```\n\n----------------------------------------\n\nTITLE: Applying Row Factories to Cursors in Psycopg\nDESCRIPTION: Shows how to use row factories with cursors and change them dynamically. The example demonstrates creating a cursor with dict_row factory, then switching to namedtuple_row factory to change the return format of query results.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/rows.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cur = conn.cursor(row_factory=dict_row)\n>>> cur.execute(\"select 'John Doe' as name, 33 as age\").fetchone()\n{'name': 'John Doe', 'age': 33}\n\n>>> from psycopg.rows import namedtuple_row\n>>> cur.row_factory = namedtuple_row\n>>> cur.execute(\"select 'John Doe' as name, 33 as age\").fetchone()\nRow(name='John Doe', age=33)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic SQL Composition for COPY Operations\nDESCRIPTION: Demonstrates how to compose a COPY statement dynamically using the psycopg.sql module, which safely handles identifiers and prevents SQL injection.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith cursor.copy(\n    sql.SQL(\"COPY {} TO STDOUT\").format(sql.Identifier(\"table_name\"))\n) as copy:\n    # read data from the 'copy' object using read()/read_row()\n```\n\n----------------------------------------\n\nTITLE: Executing Boolean Values in PostgreSQL with Python\nDESCRIPTION: Demonstrates how Python boolean values are converted to PostgreSQL boolean type when executing a query.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> cur.execute(\"SELECT %s, %s\", (True, False))\n# equivalent to \"SELECT true, false\"\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg with C Extensions using pip\nDESCRIPTION: Command to install Psycopg with the C optimization extension. This approach ensures that the optimization package version matches the core psycopg version installed.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/psycopg_c/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"psycopg[c]\"\n```\n\n----------------------------------------\n\nTITLE: Two-Step Approach for Async Connection Context Managers\nDESCRIPTION: Demonstrates the two-step approach required for using async connections with context managers. The connection needs to be created first, then used in an async context.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\naconn = await psycopg.AsyncConnection.connect()\nasync with aconn:\n    async with aconn.cursor() as cur:\n        await cur.execute(...)\n```\n\n----------------------------------------\n\nTITLE: Async Cursor Stream Pattern\nDESCRIPTION: Example of using async iteration to stream records from an async cursor.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync for record in cursor.stream(query):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using tuple_row Factory in Psycopg\nDESCRIPTION: Demonstrates using tuple_row factory to return query results as tuples.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/rows.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncur = conn.cursor(row_factory=tuple_row)\ncur.execute(\"SELECT 10 AS foo, 'hello' AS bar\").fetchone()\n# Returns: (10, 'hello')\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg Binary Package via pip\nDESCRIPTION: Command to install the Psycopg binary optimization package. This command ensures installation of the correct version matching the installed psycopg package. Requires pip version 20.3 or newer.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/psycopg_c/README-binary.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \"psycopg[binary]\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Psycopg Capabilities in Python\nDESCRIPTION: Demonstrates how to use the capabilities object to check for feature availability in the Psycopg client library, both at import time and runtime.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/module.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Fail at import time if encrypted passwords is not available\nimport psycopg\npsycopg.capabilities.has_encrypt_password(check=True)\n\n# Verify at runtime if a feature can be used\nif psycopg.capabilities.has_hostaddr():\n    print(conn.info.hostaddr)\nelse:\n    print(\"unknown connection hostadd\")\n```\n\n----------------------------------------\n\nTITLE: Executing SQL with IS NOT DISTINCT FROM in Python using Psycopg\nDESCRIPTION: Demonstrates how to use the IS NOT DISTINCT FROM operator in a SQL query executed through a Psycopg connection. This is useful for comparing values that may be NULL.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nconn.execute(\"SELECT * FROM foo WHERE field IS NOT DISTINCT FROM %s\", [None])\n```\n\n----------------------------------------\n\nTITLE: Using namedtuple_row Factory in Psycopg\nDESCRIPTION: Demonstrates using namedtuple_row factory to return results as named tuples.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/rows.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncur = conn.cursor(row_factory=namedtuple_row)\ncur.execute(\"SELECT 10 AS foo, 'hello' AS bar\").fetchone()\n# Returns: Row(foo=10, bar='hello')\n```\n\n----------------------------------------\n\nTITLE: Incorrect SQL Query Parameter Passing in Python\nDESCRIPTION: Demonstrates an incorrect way of passing parameters to a SQL query, which can lead to SQL injection vulnerabilities. This method should never be used.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/params.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"INSERT INTO numbers VALUES (%s, %s)\" % (10, 20)) # WRONG\n```\n\n----------------------------------------\n\nTITLE: SQL Query String Safety Examples in Python\nDESCRIPTION: Shows correct and incorrect ways to handle SQL query strings with proper type safety.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/typing.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_record(conn: psycopg.Connection[Any], id: int) -> Any:\n    cur = conn.execute(\"SELECT * FROM my_table WHERE id = %s\" % id)  # BAD!\n    return cur.fetchone()\n\n# the function should be implemented as:\n\ndef get_record(conn: psycopg.Connection[Any], id: int) -> Any:\n    cur = conn.execute(\"select * FROM my_table WHERE id = %s\", (id,))\n    return cur.fetchone()\n\ndef count_records(conn: psycopg.Connection[Any], table: str) -> int:\n    query = \"SELECT count(*) FROM %s\" % table  # BAD!\n    return conn.execute(query).fetchone()[0]\n\n# the function should be implemented as:\n\ndef count_records(conn: psycopg.Connection[Any], table: str) -> int:\n    query = sql.SQL(\"SELECT count(*) FROM {}\").format(sql.Identifier(table))\n    return conn.execute(query).fetchone()[0]\n```\n\n----------------------------------------\n\nTITLE: Network Address Type Adaptation in Psycopg\nDESCRIPTION: Demonstrates how Psycopg automatically converts between Python's ipaddress objects and PostgreSQL's network address types (inet and cidr).\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"select '192.168.0.1'::inet, '192.168.0.1/24'::inet\").fetchone()\n(IPv4Address('192.168.0.1'), IPv4Interface('192.168.0.1/24'))\n\n>>> conn.execute(\"select '::ffff:1.2.3.0/120'::cidr\").fetchone()[0]\nIPv6Network('::ffff:102:300/120')\n```\n\n----------------------------------------\n\nTITLE: Async Cursor Iteration Pattern\nDESCRIPTION: Example of iterating over results from an async cursor using async for.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync for record in cursor:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Risky SQL String Formatting in Python\nDESCRIPTION: Example of a working but insecure way to include a table name in a query using string formatting.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This works, but it is not optimal\ntable_name = 'my_table'\ncur.execute(\n    \"INSERT INTO %s VALUES (%%s, %%s)\" % table_name,\n    [10, 20])\n```\n\n----------------------------------------\n\nTITLE: Copying Data Block-by-Block from File to Database\nDESCRIPTION: Shows how to load data in blocks using Copy.write() when data is already formatted for COPY operations. This approach works with any COPY option and format as long as the input data is compatible.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"data\", \"r\") as f:\n    with cursor.copy(\"COPY data FROM STDIN\") as copy:\n        while data := f.read(BLOCK_SIZE):\n            copy.write(data)\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Connection Class with DNS Resolution\nDESCRIPTION: Example of subclassing psycopg.AsyncConnection to extend the _get_connection_params method for asynchronous DNS resolution of hostnames before connection.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/dns.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg._dns  # not imported automatically\n\nclass AsyncDnsConnection(psycopg.AsyncConnection):\n    @classmethod\n    async def _get_connection_params(cls, conninfo, **kwargs):\n        params = await super()._get_connection_params(conninfo, **kwargs)\n        params = await psycopg._dns.resolve_hostaddr_async(params)\n        return params\n```\n\n----------------------------------------\n\nTITLE: Using Async Context Manager with Named Cursor in Psycopg3\nDESCRIPTION: Demonstrates how to create and use a named cursor with an asynchronous context manager in Psycopg3. This pattern automatically closes the cursor when exiting the context block.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync with conn.cursor(\"name\") as cursor:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Cloning Psycopg Repository for Development\nDESCRIPTION: Commands to clone the Psycopg GitHub repository for local development. This provides access to the full source code of the project.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/psycopg/psycopg.git\ncd psycopg\n```\n\n----------------------------------------\n\nTITLE: Mapping String-Based Python Enum to PostgreSQL Enum Using Value-Based Mapping\nDESCRIPTION: This example creates a lowercase string-based Python enum and maps it to a PostgreSQL enum using a dictionary comprehension that maps enum members to their string values. This technique is useful when PostgreSQL labels match the values of a string-based enum.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> class LowercaseRole(str, Enum):\n...     ADMIN = \"admin\"\n...     EDITOR = \"editor\"\n...     GUEST = \"guest\"\n\n>>> conn.execute(\n...     \"CREATE TYPE lowercase_role AS ENUM ('admin', 'editor', 'guest')\")\n\n>>> info = EnumInfo.fetch(conn, \"lowercase_role\")\n>>> register_enum(\n...     info, conn, LowercaseRole, mapping={m: m.value for m in LowercaseRole})\n\n>>> conn.execute(\"SELECT 'editor'::lowercase_role\").fetchone()[0]\n<LowercaseRole.EDITOR: 'editor'>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Cursor Context Manager Pattern\nDESCRIPTION: Example of using a server-side cursor with a context manager to ensure proper resource cleanup.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Closing Cursor with Context Manager in Python\nDESCRIPTION: Demonstrates how to use a cursor as a context manager to automatically close it when the block is exited.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith conn.cursor() as cur:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running PostgreSQL Tests for Psycopg\nDESCRIPTION: Commands to create a test database and set environment variables for running the test suite. This ensures that tests are executed against a properly configured PostgreSQL instance.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npsql -c 'create database psycopg_test'\nexport PSYCOPG_TEST_DSN=\"dbname=psycopg_test\"\npytest\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized COPY Statements\nDESCRIPTION: Shows how to use parameters in COPY operations similar to cursor.execute(), which is available since Psycopg 3.1. This example limits the number of records copied using a parameter.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith cur.copy(\"COPY (SELECT * FROM table_name LIMIT %s) TO STDOUT\", (3,)) as copy:\n    # expect no more than three records\n```\n\n----------------------------------------\n\nTITLE: Registering HStore Type Adapter in Psycopg\nDESCRIPTION: Example of fetching HStore type information from PostgreSQL and registering an adapter to convert between Python dictionaries and PostgreSQL HStore type.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.types import TypeInfo\n>>> from psycopg.types.hstore import register_hstore\n\n>>> info = TypeInfo.fetch(conn, \"hstore\")\n>>> register_hstore(info, conn)\n\n>>> conn.execute(\"SELECT pg_typeof(%s)\", [{\"a\": \"b\"}]).fetchone()[0]\n'hstore'\n\n>>> conn.execute(\"SELECT 'foo => bar'::hstore\").fetchone()[0]\n{'foo': 'bar'}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Cursor Iteration Pattern\nDESCRIPTION: Example of iterating over records from a server-side cursor, which fetches results in batches of itersize.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor record in cur:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Psycopg Development\nDESCRIPTION: Command to install pre-commit hooks that check code validity according to the project's coding conventions. This helps maintain code quality and consistency before submitting pull requests.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg 3 with Local Build\nDESCRIPTION: Installs Psycopg 3 by building it locally. This method requires a C compiler, Python development headers, PostgreSQL client development headers, and pg_config in the PATH.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/install.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"psycopg[c]\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Mapping PostgreSQL Enum to Python UserRole Enum with Custom Mapping\nDESCRIPTION: This example creates a PostgreSQL enum for abbey roles and maps it to a Python UserRole enum using a custom mapping list. It demonstrates how to handle cases where multiple PostgreSQL enum labels map to the same Python enum member.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Legacy roles, defined in medieval times.\n>>> conn.execute(\n...     \"CREATE TYPE abbey_role AS ENUM ('ABBOT', 'SCRIBE', 'MONK', 'GUEST')\")\n\n>>> info = EnumInfo.fetch(conn, \"abbey_role\")\n>>> register_enum(info, conn, UserRole, mapping=[\n...     (UserRole.ADMIN, \"ABBOT\"),\n...     (UserRole.EDITOR, \"SCRIBE\"),\n...     (UserRole.EDITOR, \"MONK\")])\n\n>>> conn.execute(\"SELECT '{ABBOT,SCRIBE,MONK,GUEST}'::abbey_role[]\").fetchone()[0]\n[<UserRole.ADMIN: 1>,\n <UserRole.EDITOR: 2>,\n <UserRole.EDITOR: 2>,\n <UserRole.GUEST: 3>]\n\n>>> conn.execute(\"SELECT %s::text[]\", [list(UserRole)]).fetchone()[0]\n['ABBOT', 'MONK', 'GUEST']\n```\n\n----------------------------------------\n\nTITLE: Using Rollback Exception for Transaction Control in Psycopg\nDESCRIPTION: Demonstrates how to use the Rollback exception to explicitly roll back an outer transaction block when a condition is met. This example shows nested transaction handling where a CancelCommand triggers a rollback to the outer transaction while allowing execution to continue.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/transactions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import Rollback\n\nwith conn.transaction() as outer_tx:\n    for command in commands():\n        with conn.transaction() as inner_tx:\n            if isinstance(command, CancelCommand):\n                raise Rollback(outer_tx)\n            process_command(command)\n\n# If `Rollback` is raised, it would propagate only up to this block,\n# and the program would continue from here with no exception.\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Serving Psycopg Documentation (Bash)\nDESCRIPTION: This snippet provides the commands to create a virtual environment, activate it, and start the Psycopg documentation server. After running these commands, the documentation will be accessible at http://localhost:8000.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake env\nsource .venv/bin/activate\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Async Cursor Context Manager Pattern\nDESCRIPTION: Example of using an async cursor with an async context manager for automatic cleanup.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync with conn.cursor():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating XML Dumper for Python ElementTree to PostgreSQL\nDESCRIPTION: Implementation of a custom dumper to convert Python ElementTree objects to PostgreSQL XML type. The dumper is registered with the connection's adapters and allows using ElementTree objects as query parameters.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/adapt.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.adapt import Dumper\n\n>>> class XmlDumper(Dumper):\n...     # Setting an OID is not necessary but can be helpful\n...     oid = psycopg.adapters.types[\"xml\"].oid\n...\n...     def dump(self, elem):\n...         return ET.tostring(elem)\n\n>>> # Register the dumper on the adapters of a context\n>>> conn.adapters.register_dumper(ET.Element, XmlDumper)\n\n>>> # Now, in that context, it is possible to use ET.Element objects as parameters\n>>> conn.execute(\"SELECT xpath('//title/text()', %s)\", [elem]).fetchone()[0]\n['Manual']\n```\n\n----------------------------------------\n\nTITLE: Using dict_row Factory in Psycopg\nDESCRIPTION: Shows how to use dict_row factory to return query results as dictionaries with column names as keys.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/rows.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncur = conn.cursor(row_factory=dict_row)\ncur.execute(\"SELECT 10 AS foo, 'hello' AS bar\").fetchone()\n# Returns: {'foo': 10, 'bar': 'hello'}\n```\n\n----------------------------------------\n\nTITLE: isort Configuration for Psycopg Style\nDESCRIPTION: TOML configuration settings for isort to enable Psycopg-style import sorting with Black compatibility.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tools/isort-psycopg/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.isort]\nprofile = \"black\"\nlength_sort = true\nmulti_line_output = 9\nsort_order = \"psycopg\"\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Function Alternatives for Server-side Binding\nDESCRIPTION: Examples of using PostgreSQL functions like set_config() and pg_notify() as alternatives to SET and NOTIFY statements when using server-side binding.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SELECT set_config('TimeZone', %s, false)\", [\"UTC\"])\n\n>>> conn.execute(\"SELECT pg_notify(%s, %s)\", [\"chan\", \"42\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Row Factory as Nested Functions in Psycopg\nDESCRIPTION: Demonstrates creating a custom row factory using nested functions. The outer function captures column information from the cursor, while the inner function creates dictionary objects from the values.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/rows.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef dict_row_factory(cursor: Cursor[Any]) -> RowMaker[dict[str, Any]]:\n    fields = [c.name for c in cursor.description]\n\n    def make_row(values: Sequence[Any]) -> dict[str, Any]:\n        return dict(zip(fields, values))\n\n    return make_row\n```\n\n----------------------------------------\n\nTITLE: Using RawCursor with Cursor Factory in Psycopg3\nDESCRIPTION: Python code showing how to use a RawCursor with native PostgreSQL placeholders by setting it as the cursor_factory for a connection.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import connect, RawCursor\n\nwith connect(dsn, cursor_factory=RawCursor) as conn:\n    with conn.cursor() as cur:\n        cur.execute(\"SELECT $1, $2\", [1, \"Hello\"])\n        assert cur.fetchone() == (1, \"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Structuring Advanced Topics TOC in RST\nDESCRIPTION: ReStructuredText markup defining the table of contents and structure for the advanced topics documentation section.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _advanced:\n\nMore advanced topics\n====================\n\nOnce you have familiarised yourself with the :ref:`Psycopg basic operations\n<basic>`, you can take a look at the chapter of this section for more advanced\nusages.\n\n.. toctree::\n    :maxdepth: 2\n    :caption: Contents:\n\n    async\n    typing\n    rows\n    pool\n    cursors\n    adapt\n    prepare\n    pipeline\n```\n\n----------------------------------------\n\nTITLE: Converting Connection String to Dictionary with conninfo_to_dict in Python\nDESCRIPTION: Demonstrates using the conninfo_to_dict function to parse a connection string into a dictionary. This example shows how a PostgreSQL connection URL is converted to a dictionary, with an additional parameter overriding a value in the URL.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/conninfo.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> conninfo_to_dict(\"postgres://jeff@example.com/db\", user=\"piro\")\n{'user': 'piro', 'dbname': 'db', 'host': 'example.com'}\n```\n\n----------------------------------------\n\nTITLE: Improving Type Conversion in COPY TO Operations\nDESCRIPTION: Demonstrates how to improve type conversion when reading data by using set_types() to specify the expected data types before reading rows from a COPY operation.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/copy.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith cur.copy(\"COPY (VALUES (10::int, current_date)) TO STDOUT\") as copy:\n    copy.set_types([\"int4\", \"date\"])\n    for row in copy.rows():\n        print(row)  # (10, datetime.date(2046, 12, 24))\n```\n\n----------------------------------------\n\nTITLE: Registering Shapely Geometry Adapter in Psycopg\nDESCRIPTION: Example of fetching PostGIS geometry type information and registering an adapter to convert between Shapely geometry objects and PostgreSQL geometry data type.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg.types import TypeInfo\n>>> from psycopg.types.shapely import register_shapely\n>>> from shapely.geometry import Point\n\n>>> info = TypeInfo.fetch(conn, \"geometry\")\n>>> register_shapely(info, conn)\n\n>>> conn.execute(\"SELECT pg_typeof(%s)\", [Point(1.2, 3.4)]).fetchone()[0]\n'geometry'\n\n>>> conn.execute(\"\"\"\n... SELECT ST_GeomFromGeoJSON('{\n...     \"type\":\"Point\",\n...     \"coordinates\":[-48.23456,20.12345]}')\n... \"\"\").fetchone()[0]\n<shapely.geometry.multipolygon.MultiPolygon object at 0x7fb131f3cd90>\n```\n\n----------------------------------------\n\nTITLE: Using a Server-Side Cursor in Psycopg3\nDESCRIPTION: Python code demonstrating how to use a server-side cursor that was previously created by a PostgreSQL function, skipping the execute() call.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncur = conn.cursor('curname')\n# no cur.execute()\nfor record in cur:  # or cur.fetchone(), cur.fetchmany()...\n    # do something with record\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple SQL Identifiers in a Query\nDESCRIPTION: Example demonstrating how to build a dynamic list of field names using SQL.join() method to create a comma-separated list.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = sql.SQL(\"SELECT {fields} FROM {table}\").format(\n    fields=sql.SQL(',').join([\n        sql.Identifier('field1'),\n        sql.Identifier('field2'),\n        sql.Identifier('field3'),\n    ]),\n    table=sql.Identifier('some_table'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Result Sets\nDESCRIPTION: Example showing how to retrieve multiple result sets from a multiple-statement query using the nextset() method in Psycopg 3.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> cur_pg3.execute(\"SELECT 1; SELECT 2\")\n>>> cur_pg3.fetchone()\n(1,)\n\n>>> cur_pg3.nextset()\nTrue\n>>> cur_pg3.fetchone()\n(2,)\n\n>>> cur_pg3.nextset()\nNone  # no more results\n```\n\n----------------------------------------\n\nTITLE: Looking Up Exception Classes by SQLSTATE Code\nDESCRIPTION: Example showing how to use the lookup() function to catch exceptions using SQLSTATE codes or condition names.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/errors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    cur.execute(\"LOCK TABLE mytable IN ACCESS EXCLUSIVE MODE NOWAIT\")\nexcept psycopg.errors.lookup(\"UNDEFINED_TABLE\"):\n    missing = True\nexcept psycopg.errors.lookup(\"55P03\"):\n    locked = True\n```\n\n----------------------------------------\n\nTITLE: Async Copy Context Manager Pattern\nDESCRIPTION: Example of using the async copy method with an async context manager.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/cursors.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync with cursor.copy() as copy:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating XML Loader for PostgreSQL XML Type in Python\nDESCRIPTION: Implementation of a custom loader to convert PostgreSQL XML data type to Python's ElementTree. The loader is registered with the connection's adapters and can be used to parse XML data from database queries.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/adapt.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import xml.etree.ElementTree as ET\n>>> from psycopg.adapt import Loader\n\n>>> # Create a class implementing the `load()` method.\n>>> class XmlLoader(Loader):\n...     def load(self, data):\n...         return ET.fromstring(data)\n\n>>> # Register the loader on the adapters of a context.\n>>> conn.adapters.register_loader(\"xml\", XmlLoader)\n\n>>> # Now just query the database returning XML data.\n>>> cur = conn.execute(\n...     \"\"\"select XMLPARSE (DOCUMENT '<?xml version=\"1.0\"?>\n...            <book><title>Manual</title><chapter>...</chapter></book>')\n...     \"\"\")\n\n>>> elem = cur.fetchone()[0]\n>>> elem\n<Element 'book' at 0x7ffb55142ef0>\n```\n\n----------------------------------------\n\nTITLE: Working with Time with Timezone in PostgreSQL and Python\nDESCRIPTION: Shows how PostgreSQL timetz values are converted to Python time objects with fixed offset timezones, and the limitations of this approach.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SET TIMEZONE to 'Europe/Rome'\")\n\n# UTC+1 in winter\n>>> conn.execute(\"SELECT '2042-01-01 12:00Z'::timestamptz::timetz\").fetchone()[0]\ndatetime.time(13, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))\n\n# UTC+2 in summer\n>>> conn.execute(\"SELECT '2042-07-01 12:00Z'::timestamptz::timetz\").fetchone()[0]\ndatetime.time(14, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200)))\n```\n\n----------------------------------------\n\nTITLE: Dictionary Row Type Annotations in Python\nDESCRIPTION: Shows how to use dictionary row factories with proper type annotations for connections and cursors.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/typing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndconn = psycopg.connect(row_factory=dict_row)\n# dconn type is psycopg.Connection[dict[str, Any]]\n\ndcur = conn.cursor(row_factory=dict_row)\ndcur = dconn.cursor()\n# dcur type is psycopg.Cursor[dict[str, Any]] in both cases\n\ndrec = dcur.fetchone()\n# drec type is dict[str, Any] | None\n```\n\n----------------------------------------\n\nTITLE: Manual SQL Identifier Escaping in Psycopg\nDESCRIPTION: Example showing manually escaping SQL identifiers using Psycopg's escape_identifier function, which is safer but cumbersome.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/sql.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg.pq import Escaping\n\n# This works, but it is not optimal\ntable_name = 'my_table'\ncur.execute(\n    \"INSERT INTO %s VALUES (%%s, %%s)\" % Escaping.escape_identifier(table_name),\n    [10, 20])\n```\n\n----------------------------------------\n\nTITLE: Asyncio-based Database Connection Monitoring\nDESCRIPTION: Implements connection monitoring using asyncio for asynchronous applications. Uses event loop and reader callbacks to detect connection issues.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nev = asyncio.Event()\nloop = asyncio.get_event_loop()\nloop.add_reader(conn.fileno(), ev.set)\n\nwhile True:\n    try:\n        await asyncio.wait_for(ev.wait(), 60.0)\n    except asyncio.TimeoutError:\n        continue  # No FD activity detected in one minute\n\n    # Activity detected. Is the connection still ok?\n    try:\n        await conn.execute(\"SELECT 1\")\n    except psycopg.OperationalError:\n        # Guess what happened\n        ...\n```\n\n----------------------------------------\n\nTITLE: Manual Connection Management\nDESCRIPTION: Shows the equivalent manual connection management pattern without using context managers, demonstrating explicit transaction and resource handling.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/usage.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect()\ntry:\n    ... # use the connection\nexcept BaseException:\n    conn.rollback()\nelse:\n    conn.commit()\nfinally:\n    conn.close()\n```\n\n----------------------------------------\n\nTITLE: PL/pgSQL Function Returning a Cursor\nDESCRIPTION: Example of a PL/pgSQL function that returns a cursor, which can be used with a ServerCursor in Psycopg.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION reffunc(refcursor) RETURNS refcursor AS $$\n```\n\n----------------------------------------\n\nTITLE: Creating a One-off ClientCursor in Python\nDESCRIPTION: Shows how to create a single ClientCursor object from a normal connection without changing the connection's default cursor factory.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconn = psycopg.connect(DSN)\ncur = psycopg.ClientCursor(conn)\n```\n\n----------------------------------------\n\nTITLE: Handling Encoding Issues with PostgreSQL Connections in Python\nDESCRIPTION: Demonstrates how to check and set the client encoding for a PostgreSQL connection, and shows potential issues with incompatible character encodings.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# The encoding is set at connection time according to the db configuration\nconn.info.encoding\n'utf-8'\n\n# The Latin-9 encoding can manage some European accented letters\n# and the Euro symbol\nconn.execute(\"SET client_encoding TO LATIN9\")\nconn.execute(\"SELECT entry FROM menu WHERE id = 1\").fetchone()[0]\n'Crème Brûlée at 4.99€'\n\n# The Latin-1 encoding doesn't have a representation for the Euro symbol\nconn.execute(\"SET client_encoding TO LATIN1\")\nconn.execute(\"SELECT entry FROM menu WHERE id = 1\").fetchone()[0]\n# Traceback (most recent call last)\n# ...\n# UntranslatableCharacter: character with byte sequence 0xe2 0x82 0xac\n# in encoding \"UTF8\" has no equivalent in encoding \"LATIN1\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Server-side Binding Failures in Psycopg 3\nDESCRIPTION: Examples showing how server-side binding fails with SET, NOTIFY, and CREATE TABLE statements in Psycopg 3, resulting in syntax errors.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.execute(\"SET TimeZone TO %s\", [\"UTC\"])\nTraceback (most recent call last):\n...\npsycopg.errors.SyntaxError: syntax error at or near \"$1\"\nLINE 1: SET TimeZone TO $1\n                        ^\n\n>>> conn.execute(\"NOTIFY %s, %s\", [\"chan\", 42])\nTraceback (most recent call last):\n...\npsycopg.errors.SyntaxError: syntax error at or near \"$1\"\nLINE 1: NOTIFY $1, $2\n               ^\n\n>>> conn.execute(\"CREATE TABLE foo (id int DEFAULT %s)\", [42])\nTraceback (most recent call last):\n...\npsycopg.errors.UndefinedParameter: there is no parameter $1\nLINE 1: CREATE TABLE foo (id int DEFAULT $1)\n                                         ^\n```\n\n----------------------------------------\n\nTITLE: Connecting to CockroachDB Database - Connection Classes\nDESCRIPTION: Defines connection classes for CockroachDB integration. Includes CrdbConnection for synchronous operations and AsyncCrdbConnection for asynchronous operations, both extending from their respective Psycopg base classes.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/crdb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CrdbConnection(psycopg.Connection):\n    @classmethod\n    def is_crdb(cls, conn):\n        # Method to check if connection is CockroachDB\n        pass\n\nclass AsyncCrdbConnection(psycopg.AsyncConnection):\n    pass\n\nclass CrdbConnectionInfo:\n    @property\n    def vendor(self):\n        return \"CockroachDB\"\n\n    @property\n    def server_version(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection Class with SRV DNS Resolution\nDESCRIPTION: Example of subclassing psycopg.Connection to extend the _get_connection_params method to automatically apply SRV DNS resolution to connection parameters.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/dns.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg._dns  # not imported automatically\n\nclass SrvCognizantConnection(psycopg.Connection):\n    @classmethod\n    def _get_connection_params(cls, conninfo, **kwargs):\n        params = super()._get_connection_params(conninfo, **kwargs)\n        params = psycopg._dns.resolve_srv(params)\n        return params\n\n# The name will be resolved to db1.example.com\ncnn = SrvCognizantConnection.connect(\"host=_postgres._tcp.db.psycopg.org\")\n```\n\n----------------------------------------\n\nTITLE: Checking Pipeline Capability Example in Python\nDESCRIPTION: Example showing capability check implementation with error handling when a feature is not supported by the current libpq version.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/objects.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import psycopg\n>>> psycopg.capabilities.has_pipeline(check=True)\nTraceback (most recent call last):\n  ...\npsycopg.NotSupportedError: the feature 'Connection.pipeline()' is not available:\n    the client libpq version (imported from system libraries) is 13.4; the\n    feature requires libpq version 14.0 or newer\n```\n\n----------------------------------------\n\nTITLE: Installing libpq Dependencies on macOS with Homebrew\nDESCRIPTION: Command to install the PostgreSQL client library (libpq) on macOS using Homebrew, which is required for working with Psycopg.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install libpq\n```\n\n----------------------------------------\n\nTITLE: Using Notify Handlers in Psycopg\nDESCRIPTION: Demonstrates how to register a callback function for handling notifications during normal query processing. The handler is called when notifications are received during connection operations.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconn.add_notify_handler(lambda n: print(f\"got this: {n}\"))\n\nprint(conn.execute(\"SELECT 1\").fetchone())\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg with Binary and Pool Dependencies using pip\nDESCRIPTION: Commands to upgrade pip and install Psycopg with binary and connection pool dependencies. This is the recommended way to install Psycopg for general use.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip               # upgrade pip to at least 20.3\npip install \"psycopg[binary,pool]\"      # install binary dependencies\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Psycopg\nDESCRIPTION: Commands to create a virtual environment and install Psycopg packages in development mode with their dependencies. This setup enables local development and testing of the different components.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install -e \"./psycopg[dev,test]\"    # for the base Python package\npip install -e ./psycopg_pool           # for the connection pool\npip install ./psycopg_c                 # for the C speedup module\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Timezone Example in Python\nDESCRIPTION: Example showing how to access the timezone information from a database connection using the ConnectionInfo class.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/objects.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> conn.info.timezone\nzoneinfo.ZoneInfo(key='Europe/Rome')\n```\n\n----------------------------------------\n\nTITLE: Installing libpq Dependencies on Debian Systems\nDESCRIPTION: Command to install the PostgreSQL client library (libpq) on Debian-based Linux systems, which is required for working with Psycopg.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libpq5\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Basic Tests in Psycopg\nDESCRIPTION: Basic setup commands for installing Psycopg test dependencies and running the test suite with a local PostgreSQL database.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tests/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e \"psycopg[test]\"\n$ export PSYCOPG_TEST_DSN=\"host=localhost dbname=psycopg_test\"\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Connection Encoding Example in Python\nDESCRIPTION: Example demonstrating how to set and access the client encoding for a database connection, showing normalization of encoding names.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/objects.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconn.execute(\"SET client_encoding TO LATIN9\")\nconn.info.encoding\n'iso8859-15'\n```\n\n----------------------------------------\n\nTITLE: SQL Commands for CockroachDB Session Management\nDESCRIPTION: SQL commands specific to CockroachDB for managing sessions and queries, including showing session IDs and canceling operations.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/crdb.rst#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW session_id;\nCANCEL SESSION;\nCANCEL QUERY;\n```\n\n----------------------------------------\n\nTITLE: Using psycopg.sql Module for Client-side Parameter Merging\nDESCRIPTION: Example of using the psycopg.sql module to format parameters on the client side, useful when server-side binding doesn't work for certain statements.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from psycopg import sql\n\n>>> cur.execute(sql.SQL(\"CREATE TABLE foo (id int DEFAULT {})\").format(42))\n```\n\n----------------------------------------\n\nTITLE: Querying PgBouncer Admin Console with Autocommit (Pre-3.1.20)\nDESCRIPTION: Shows how to query the PgBouncer admin console using an autocommit connection for versions of Psycopg prior to 3.1.20.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/cursors.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import connect, ClientCursor\n\nconn = psycopg.connect(ADMIN_DSN, cursor_factory=ClientCursor, autocommit=True)\n...\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Error Code Mapping Table\nDESCRIPTION: Defines mappings between PostgreSQL SQLSTATE error codes and corresponding psycopg exception classes. Error codes are grouped by class (e.g., Class 40 for Transaction Rollback, Class 42 for Syntax Errors) and mapped to either ProgrammingError, OperationalError, or DatabaseError exception types.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/errors.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n3F000 InvalidSchemaName                               ProgrammingError\n40000 TransactionRollback                             OperationalError\n40001 SerializationFailure                            OperationalError\n40002 TransactionIntegrityConstraintViolation         OperationalError\n40003 StatementCompletionUnknown                      OperationalError\n40P01 DeadlockDetected                                OperationalError\n```\n\n----------------------------------------\n\nTITLE: Using ClientCursor for Client-side Binding\nDESCRIPTION: Example of creating and using a ClientCursor to perform client-side parameter binding for statements not supported by server-side binding.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/from_pg2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> cur = ClientCursor(conn)\n>>> cur.execute(\"CREATE TABLE foo (id int DEFAULT %s)\", [42])\n```\n\n----------------------------------------\n\nTITLE: Running CockroachDB Container for Testing\nDESCRIPTION: Commands for setting up and running tests against a CockroachDB instance in Docker.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tests/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 26257:26257 --name crdb --rm \\\n    cockroachdb/cockroach:v22.1.3 start-single-node --insecure\n\nexport PSYCOPG_TEST_DSN=\"host=localhost port=26257 user=root dbname=defaultdb\"\npytest ...\n```\n\n----------------------------------------\n\nTITLE: SQL Query Result Example\nDESCRIPTION: Shows the resulting table state after pipeline execution with error handling, demonstrating how transaction rollback affects sequence numbers.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/pipeline.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n=# SELECT * FROM mytable;\n+----+------+\n| id | data |\n+----+------+\n|  2 | four |\n+----+------+\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Using SQL_ASCII Encoding to Retrieve Raw Bytes from PostgreSQL in Python\nDESCRIPTION: Shows how to use the SQL_ASCII client encoding to disable decoding of data from the database, returning raw bytes instead of decoded strings.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/adapt.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconn.execute(\"SET client_encoding TO SQL_ASCII\")\nconn.execute(\"SELECT entry FROM menu WHERE id = 1\").fetchone()[0]\nb'Cr\\xc3\\xa8me Br\\xc3\\xbbl\\xc3\\xa9e at 4.99\\xe2\\x82\\xac'\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Definition\nDESCRIPTION: Defines the documentation structure using ReStructuredText toctree directive, organizing the major sections of the Psycopg 3 documentation.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n    :caption: Contents:\n\n    install\n    usage\n    params\n    adapt\n    pgtypes\n    transactions\n    copy\n    from_pg2\n```\n\n----------------------------------------\n\nTITLE: Defining Pip Constraints for Psycopg Project Dependencies\nDESCRIPTION: A comprehensive pip constraints file that enforces minimum allowed versions for all project dependencies. This includes core requirements, test, dev, and docs extras, build tools, and undeclared extras that enable additional features.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tests/constraints.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n# This is a constraint file forcing the minimum allowed version to be\n# installed.\n#\n# https://pip.pypa.io/en/stable/user_guide/#constraints-files\n\n# From install_requires\nbackports.zoneinfo == 0.2.0\ntyping-extensions == 4.6.0\nimportlib-metadata == 1.4\n\n# From the 'test' extra\nanyio == 4.0\nmypy == 1.14.0\npproxy == 2.7.0\npytest == 6.2.5\npytest-cov == 3.0.0\npytest-randomly == 3.5.0\n\n# From the 'dev' extra\nblack == 24.1.0\ndnspython == 2.1.0\nflake8 == 4.0.0\ntypes-setuptools == 57.4.0\nwheel == 0.37\n\n# From the 'docs' extra\nSphinx == 5.0\nfuro == 2022.6.21\nsphinx-autobuild == 2021.3.14\nsphinx-autodoc-typehints == 1.12.0\n\n# Build tools\nwheel == 0.37\nCython == 3.0.0\ntomli == 2.0.1\n\n# Undeclared extras to \"unblock\" extra features\n#\n# Warning: the versions specified for these packages are the oldest versions\n# offering a binary package for the oldest Python version we support.\n#\n# When the minimum supported Python version is increased, these dependencies\n# might need to be updated.\n#\n# Grep help: the current minimum supported version is Python 3.9.\nshapely == 1.8.0\nnumpy == 1.20.0\n```\n\n----------------------------------------\n\nTITLE: Generic Connection Pool Type Implementation in Python\nDESCRIPTION: Demonstrates using generic types with connection pools and custom row factories.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/typing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom psycopg import Connection\nfrom psycopg.rows import DictRow, dict_row\n\nwith ConnectionPool(\n    connection_class=Connection[DictRow],   # provides type hinting\n    kwargs={\"row_factory\": dict_row},       # works at runtime\n) as pool:\n    # reveal_type(pool): ConnectionPool[Connection[dict[str, Any]]]\n\n    with pool.connection() as conn:\n        # reveal_type(conn): Connection[dict[str, Any]]\n\n        row = conn.execute(\"SELECT now()\").fetchone()\n        # reveal_type(row): dict[str, Any] | None\n\n        print(row)  # {\"now\": datetime.datetime(...)}\n```\n\n----------------------------------------\n\nTITLE: Example Python Imports Using Psycopg Style\nDESCRIPTION: Demonstrates how imports are sorted by module name length while maintaining natural order within import lists.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tools/isort-psycopg/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ccc import aaaa, bbb, cc\nfrom bbbb import ddd, ee\nfrom aaaaa import fff, gg\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the documentation using reStructuredText directives. It creates a table of contents with links to various sections of the documentation, including basic and advanced topics, API reference, and release notes.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    basic/index\n    advanced/index\n    api/index\n\nRelease notes\n-------------\n\n.. toctree::\n    :maxdepth: 1\n\n    news\n    news_pool\n\n\nIndices and tables\n------------------\n\n* :ref:`genindex`\n* :ref:`modindex`\n```\n\n----------------------------------------\n\nTITLE: Connection-Specific Type Registration in Psycopg\nDESCRIPTION: Example demonstrating that type adapters registered on a specific connection don't affect other connections. The second connection returns raw geometry data instead of Shapely objects.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/pgtypes.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> conn2 = psycopg.connect(CONN_STR)\n>>> conn2.execute(\"\"\"\n... SELECT ST_GeomFromGeoJSON('{\n...     \"type\":\"Point\",\n...     \"coordinates\":[-48.23456,20.12345]}')\n... \"\"\").fetchone()[0]\n'0101000020E61000009279E40F061E48C0F2B0506B9A1F3440'\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Python Implementation\nDESCRIPTION: Command to run tests using the Python implementation of the libpq wrapper instead of the default C implementation.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tests/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ PSYCOPG_IMPL=python pytest\n```\n\n----------------------------------------\n\nTITLE: Subclassing Connection to Override _get_connection_params\nDESCRIPTION: Example implementation of the _get_connection_params method to manipulate connection parameters before connection. This pattern allows customizing how connection parameters are processed.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/dns.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef _get_connection_params(cls, conninfo, **kwargs):\n    params = super()._get_connection_params(conninfo, **kwargs)\n    # do something with the params\n    return params\n```\n\n----------------------------------------\n\nTITLE: Detecting Database Disconnections using Selectors\nDESCRIPTION: Implements a connection monitoring system using the selectors module to detect database disconnections efficiently without polling. Includes error handling for connection failures.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/advanced/async.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport selectors\n\nsel = selectors.DefaultSelector()\nsel.register(conn, selectors.EVENT_READ)\nwhile True:\n    if not sel.select(timeout=60.0):\n        continue  # No FD activity detected in one minute\n\n    # Activity detected. Is the connection still ok?\n    try:\n        conn.execute(\"SELECT 1\")\n    except psycopg.OperationalError:\n        # You were disconnected: do something useful such as panicking\n        logger.error(\"we lost our database!\")\n        sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg 3 Connection Pool\nDESCRIPTION: Installs the Psycopg connection pools, which are distributed in a separate package. This allows for a different release cycle from the main psycopg package.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/install.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"psycopg[pool]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dumper Protocol Class\nDESCRIPTION: Abstract class protocol for converting Python objects to PostgreSQL format. Includes methods for dumping and quoting values, with OID type handling and format specification.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/abc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Dumper:\n    def __init__(self, cls, context=None):\n        \"\"\"Initialize dumper for specific type and context\"\"\"\n        pass\n    \n    @property\n    def format(self):\n        \"\"\"Format specification\"\"\"\n        pass\n        \n    def dump(self):\n        \"\"\"Convert value to database format\"\"\"\n        pass\n        \n    def quote(self):\n        \"\"\"Quote value for text format\"\"\"\n        pass\n        \n    @property\n    def oid(self):\n        \"\"\"OID of the PostgreSQL type\"\"\"\n        pass\n```\n\n----------------------------------------\n\nTITLE: Running Docker Tests with Environment Variables\nDESCRIPTION: Docker command for running tests in a containerized environment with volume mounting and environment variable configuration.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/tests/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --rm --volume `pwd`:/src --workdir /src \\\n  -e PSYCOPG_TEST_DSN -e PGHOST=172.17.0.1 -e PGUSER=`whoami` \\\n  python:3.9 bash\n\n# pip install -e \"./psycopg[test]\" ./psycopg_pool ./psycopg_c\n# pytest\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg Connection Pool via pip\nDESCRIPTION: Command to install the Psycopg connection pool extension using pip. This installs the psycopg package with the pool extra dependency.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/psycopg_pool/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \"psycopg[pool]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Psycopg 3 Pure Python Version\nDESCRIPTION: Installs the pure Python implementation of Psycopg 3. This version still requires the system libpq to operate, which is dynamically imported via ctypes.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/basic/install.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install psycopg\n```\n\n----------------------------------------\n\nTITLE: Installing Required DNS Python Package with pip\nDESCRIPTION: Command to install the dnspython package which is required for the psycopg._dns module to function but is not automatically installed with Psycopg.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/dns.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"dnspython >= 2.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining Loader Protocol Class\nDESCRIPTION: Abstract class protocol for converting PostgreSQL data to Python objects. Handles loading data based on specific PostgreSQL OIDs and context settings.\nSOURCE: https://github.com/psycopg/psycopg/blob/master/docs/api/abc.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Loader:\n    def __init__(self, oid, context=None):\n        \"\"\"Initialize loader for specific OID and context\"\"\"\n        pass\n    \n    @property\n    def format(self):\n        \"\"\"Format specification\"\"\"\n        pass\n        \n    def load(self):\n        \"\"\"Convert database value to Python\"\"\"\n        pass\n```"
  }
]