[
  {
    "owner": "likec4",
    "repo": "likec4",
    "content": "TITLE: Defining and Modeling Architecture with LikeC4 DSL\nDESCRIPTION: This snippet demonstrates how to define specifications, model elements and relationships, and create views in LikeC4. It shows how to create element types, define actors and systems, establish relationships, and configure the rendering styles.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\n// You start with defining your terms and ...\nspecification {\n  // ... \"types\" of your elements\n  element actor {\n    style {\n      shape person // how to render\n    }\n  }\n  element system\n  element component\n  // and \"typed\" relationships (if you need)\n  relationship async\n}\n\n// Here goes your model, the single source of truth\nmodel {\n  customer = actor 'Customer' {\n    description 'A user of our product with active subscription'\n    -> ui 'opens in browser'\n  }\n\n  cloud = system 'Our SaaS' {\n    backend = component 'Backend' {\n      icon tech:graphql\n      description 'Implements business logic and provides GraphQL API'\n    }\n\n    ui = component 'Frontend' {\n      description 'NextJS application'\n      style {\n        icon tech:nextjs\n        shape browser\n      }\n    }\n\n    ui -[async]-> backend 'requests via HTTPS'\n  }\n}\n\n// And finally, you define what to render\nviews {\n  view index {\n    title 'Landscape view'\n    include *, cloud.*\n\n    style cloud.* {\n      color green\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Kinds in LikeC4 Specification\nDESCRIPTION: Defines various element kinds that can be used throughout the model. These custom elements represent different components like users, systems, applications, and databases that will be available for use when creating the actual architectural model.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/specification.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n\n  // Define whatever you want\n  element user\n  element cloud\n  element system\n  element application\n  element component\n  element controller\n  element microservice\n  element queue\n  element restapi\n  element graphqlMutation\n  element repository\n  element database\n  element pgTable\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Model and View Example in LikeC4\nDESCRIPTION: Comprehensive example showing model definition with actors, systems, and containers, along with corresponding view configurations.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  actor customer {\n    -> webApp 'uses in browser via HTTPS'\n  }\n  system cloud {\n    container backend {\n      component api    \n    }\n    container ui {\n      component webApp {\n        -> api 'requests data'\n      }\n    }\n  }\n}\nviews {\n\n  // Unscoped view - wildcard refers to top-level elements\n  view {\n    include *\n    // Visible top-level elements: customer, cloud\n    // and derived relationship customer -> cloud\n  }\n\n  // Scoped view - wildcard refers to element and its children\n  view of cloud.ui {\n    include *\n    // Visible:\n    // - cloud.ui\n    // - cloud.ui.webApp\n    // - customer\n    // - relationship customer -> cloud.ui.webApp\n    // - cloud.backend\n    // - cloud.ui.webApp -> cloud.backend, derived from cloud.ui.webApp -> cloud.backend.api\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Model in LikeC4\nDESCRIPTION: Defines the top-level elements of the architecture model, including a customer actor and a SaaS system.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor\n  element system\n}\n\nmodel {\n  customer = actor 'Customer'\n  saas = system 'Our SaaS'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Element Specifications in LikeC4\nDESCRIPTION: This snippet demonstrates how to define element specifications in LikeC4, including actor, system, and service elements with custom styling. The specification block establishes the element types that can be used throughout the model.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor {\n    style {\n      shape person\n    }\n  }\n  element system\n  element service\n}\n```\n\n----------------------------------------\n\nTITLE: Basic LikeC4 File Structure with Top-Level Statements\nDESCRIPTION: Demonstrates the fundamental structure of a LikeC4 file with all possible top-level statements: specification (defines element kinds), model (architecture elements), views (visualizations), and global (shared predicates).\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/intro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\n// example.c4\nspecification {\n  //...\n}\n\nglobal {\n  //...\n}\n\nmodel {\n  //...  \n}\n\nviews {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Top-Level Elements and Views in LikeC4\nDESCRIPTION: This snippet shows how to define top-level elements like 'customer' and 'cloud' and create a landscape view. The model block declares the elements while the views block configures how they are visualized.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer = actor 'Customer'\n  cloud = system 'Cloud System'\n}\nviews {\n  view index of cloud {\n    title \"Cloud System - Landscape\"\n    include *\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Elements in LikeC4\nDESCRIPTION: Demonstrates how to define basic elements with kinds and names in LikeC4. Shows specification of element types and creation of actor and service elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor // define a kind\n  element service\n}\n\nmodel {\n  // element of kind 'actor' with the name 'customer'\n  actor customer\n  // element of kind 'service' named as 'cloud'\n  service cloud\n\n  // also possible with '=' and the name goes first\n  cloud = service\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Element Kinds in LikeC4 Specification\nDESCRIPTION: Demonstrates how to style all elements of a specific kind using the 'style' block in the specification section. This example shows styling for 'user' and 'frontend' elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element user {\n    style {\n      // every element of 'user' kind\n      shape person // have 'person' shape\n      color amber  // and amber color\n    }\n  }\n\n  element frontend {    \n    style {\n      // every 'frontend' displayed as browser\n      shape: browser // ':' is optional, but if you prefer\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing and querying the LikeC4 model\nDESCRIPTION: Demonstrates how to query and traverse the model including validation errors checking, element selection, relationship filtering, and view layout retrieval.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/model-api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LikeC4 } from \"likec4\"\n\nconst likec4 = await LikeC4.fromSource(`....`)\n\n// Validation errors\nconsole.log(likec4.getErrors())\n\n// Traverse the model\nconst model = likec4.computedModel()\nmodel\n  .element('cloud.backend.api')\n  .incoming() // relationships incoming to the element\n  .filter(r => r.tags.includes('http')) // filter by tags\n  .map(r => r.source) // get source elements\n\nconst diagram = await likec4.layoutedModel().view('index')\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships in LikeC4 Model\nDESCRIPTION: Defines relationships between elements in the model, including interactions between the customer, UI, and backend components.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor\n  element system\n  element component\n}\n\nmodel {\n  customer = actor 'Customer'\n  saas = system 'Our SaaS' {\n    component ui\n    component backend\n\n    // UI fetches data from the Backend\n    ui -> backend\n  }\n\n  // Customer uses the UI\n  customer -> ui 'opens in browser'\n}\n```\n\n----------------------------------------\n\nTITLE: ReactLikeC4 Advanced Component Usage\nDESCRIPTION: Example demonstrating the use of the low-level ReactLikeC4 component with various configuration options.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactLikeC4, type LikeC4ViewId } from './likec4.generated'\n\nconst App = () => {\n  const [viewId, setViewId] = useState<LikeC4ViewId>('index')\n  return (\n    <ReactLikeC4\n      viewId={viewId}\n      pannable\n      zoomable={false} \n      keepAspectRatio\n      showNavigationButtons\n      enableDynamicViewWalkthrough={false}\n      enableElementDetails\n      enableRelationshipDetails\n      showDiagramTitle={false}\n      onNavigateTo={setViewId}\n      onNodeClick={...}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Global Styles Configuration in LikeC4\nDESCRIPTION: Demonstrates how to define and apply global styles across different views, with the ability to mute elements and apply specific color schemes\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: zig\nCODE:\n```\nglobal {\n  style mute_all * {\n    color muted\n    opacity 10%\n  }\n}\n\nviews {\n  view of app {  \n    global style mute_all\n    style cloud.* {\n      color green\n    }\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic View in LikeC4\nDESCRIPTION: A comprehensive example showing how to define a dynamic view in LikeC4, including model specification, elements definition, and view declaration. The example demonstrates relationships between customer, web interface, authentication, and API components.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/dynamic-views.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\n//dynamic-view.c4\nspecification {\n  element actor {\n    style {\n      shape person\n    }\n  }\n  element system\n  element component\n}\n\nmodel {\n  customer = actor 'Customer' {\n    description 'Customer of Cloud System'\n  }\n\n  cloud = system 'Cloud System' {\n    backend = component 'Backend' {\n      description 'Backend services and API'\n\n      auth = component 'Authentication'\n\n      api = component 'Backend API' {\n        description 'RESTful API'\n      }\n\n      api -> auth 'validates bearer token' \n    }\n\n    ui = component 'Frontend' {\n      description '\n        All the frontend applications\n        of Cloud System\n      '\n      style {\n        shape browser\n      }\n\n      web = component 'Customer Dashboard' {\n        description 'React Application'\n        style {\n          shape browser\n        }\n      }\n\n      web -> auth\n      web -> api 'requests'\n    }\n  }\n\n  customer -> web 'opens in browser'\n\n}\n\nviews {\n  dynamic view example {\n    title 'Dynamic View Example'\n    customer -> web 'opens in browser'\n    web -> auth 'updates bearer token if needed'\n    web -> api 'POST request'\n    api -> auth // title is derived from the model\n    api -> api 'process request' // allow self-call\n\n    // reverse direction, as a response to line 59\n    web <- api 'returns JSON'\n\n    // Include elements, that are not participating\n    include cloud, ui, backend\n\n    style cloud {\n      color muted\n      opacity 0%\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating architecture models with type-safe Model Builder\nDESCRIPTION: Demonstrates the use of the type-safe Builder API to create LikeC4 models programmatically with code completion for specifications, elements, relationships, and views.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/model-api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Builder } from \"@likec4/core/builder\"\n\nconst m = Builder\n  .specification({\n    elements: {\n      actor: {\n        style: {\n          shape: 'person',\n        },\n      },\n      system: {},\n      component: {},\n    },\n    relationships: {\n      likes: {},\n    },\n    tags: ['tag1', 'tag2', 'tag1'],\n  })\n  .model(({ actor, system, component, relTo, rel }, _) =>\n    _(\n      actor('alice'),\n      actor('bob'),\n      rel('alice', 'bob', {\n        tags: ['tag1'], // you get code completion for tags\n        kind: 'likes',  // code completion for kind\n      }),\n      system('cloud', { tags: ['tag1', 'tag2'] }).with(\n        component('backend').with(\n          component('api'),\n          component('db'),\n          // code completion for relationships\n          rel('cloud.backend.api', 'cloud.backend.db')\n        ),\n        component('frontend').with(\n          relTo('cloud.backend.api')\n        ),\n      ),\n    )\n  )    \n  .views(({ view, viewOf, $include, $style }, _) =>\n    _(\n      view('index', 'Index').with(\n        $include('cloud.*'),\n      ),\n      viewOf('ui', 'cloud.ui').with(\n        // code completion for predicates\n        $include('* -> cloud.**'),\n        $style('cloud.ui', { color: 'red' }),\n      ),\n    )\n  )\n  .toLikeC4Model()\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Layouts in Views - LikeC4\nDESCRIPTION: This snippet shows how to apply an auto-layout feature in views, arranging elements within a defined structure based on specified directions and distance parameters.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_12\n\nLANGUAGE: likec4\nCODE:\n```\nview {\n  include *\n  autoLayout LeftRight 120 110\n}\n```\n\n----------------------------------------\n\nTITLE: Basic View Definition in LikeC4\nDESCRIPTION: Demonstrates how to define named and unnamed views in the views section. Named views can be referenced and are used for file naming and URLs.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n  // with name\n  view index {\n  }\n  // unnamed\n  view {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Relationships in LikeC4\nDESCRIPTION: Demonstrates how to create a simple relationship between two elements using the '->' operator in LikeC4.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/relationships.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer = actor 'Customer'\n  cloud = service 'Cloud'\n\n  customer -> cloud\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Relationships in LikeC4\nDESCRIPTION: Shows how to add various properties to relationships, including title, technology, description, metadata, tags, and links.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/relationships.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  actor customer\n  service cloud {\n    component backend\n    component frontend\n\n    // Title can be inlined\n    frontend -> backend 'requests data to display'\n  }\n\n  customer -> frontend {\n    title 'opens in browser' // or nested\n  }\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer -> frontend 'opens in browser' {\n    technology 'HTTPS'\n  }\n\n  // Or in a shorter way\n  customer -> frontend 'opens in browser' 'HTTPS'\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer -> frontend 'opens in browser' {\n    description 'Customer opens the frontend in the browser to interact with the system'\n  }\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer -> frontend 'opens in browser' {\n    metadata {\n      prop1 'value1'\n      prop2 'value2'\n    }\n  }\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  // inlined\n  frontend -> backend 'requests data' #graphql #team1\n\n  // or nested\n  customer -> frontend 'opens in browser' {\n    #graphql #team1 \n  }\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer -> frontend 'opens in browser' {\n    // External link\n    link https://any-external-link.com\n\n    // or any URI\n    link ssh://bastion.internal 'SSH'\n\n    // or relative link to navigate to sources\n    link ../src/index.ts#L1-L10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Element Structures\nDESCRIPTION: Shows how to create hierarchical element structures with nested components and unique naming constraints.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 'Service 1' {\n    component backend\n\n    component backend // ⛔️ Error: 'service1.backend' already defined\n  }\n\n  service service2 'Service 2' {\n    component backend // ✅ This is OK - 'service2.backend'\n\n    component legacy {\n      component backend // ✅ This is OK - 'service2.legacy.backend'\n    }\n  }\n\n  component backend // ✅ This is OK - 'backend'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships Between Components in LikeC4\nDESCRIPTION: This example shows how to add a relationship between components within the same service. It demonstrates referencing elements within the same scope.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 {\n    component api\n    component frontend\n  }\n  frontend -> api\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationships by Tag or Kind in LikeC4 DSL\nDESCRIPTION: Shows how to use the 'where' clause to filter relationships based on source or target properties such as tags and element kinds. This enables creating more focused views that highlight specific aspects of the architecture.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: zig\nCODE:\n```\ninclude\n  // only relationships outgoing from elements with with tag #next\n  cloud.* -> amazon.*\n    where source.tag is #next,\n\n  // only incoming relations of elements with kind microservice\n  -> *\n    where target.kind is microservice\n```\n\n----------------------------------------\n\nTITLE: LikeC4Model Interface Definition\nDESCRIPTION: Details the complete interface for the LikeC4Model with methods for querying and traversing the architecture model, including element relationships and hierarchy navigation.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/model-api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LikeC4Model {\n  /**\n   * Returns the root elements of the model.\n   */\n  roots(): Element[];\n  /**\n   * Returns all elements in the model.\n   */\n  elements(): Element[];\n  /**\n   * Returns a specific element by its FQN.\n   */\n  element(id: Fqn): Element;\n  /**\n   * Returns all relationships in the model.\n   */\n  relationships(): Relationship[];\n  /**\n   * Returns a specific relationship by its ID.\n   */\n  relationship(id: RelationID): Relationship;\n  /**\n   * Returns all views in the model.\n   */\n  views(): ReadonlyArray<LikeC4ViewModel>;\n  /**\n   * Returns a specific view by its ID.\n   */\n  view(viewId: ViewID): LikeC4ViewModel;\n  /**\n   * Returns the parent element of given element.\n   * @see ancestors\n   */\n  parent(element: ElementOrFqn): Element | null;\n  /**\n   * Get all children of the element (only direct children),\n   * @see descendants\n   */\n  children(element: ElementOrFqn): Element[];\n  /**\n   * Get all sibling (i.e. same parent)\n   */\n  siblings(element: ElementOrFqn): Element[];\n  /**\n   * Get all ancestor elements (i.e. parent, parent's parent, etc.)\n   * (from closest to root)\n   */\n  ancestors(element: ElementOrFqn): Element[];\n  /**\n   * Get all descendant elements (i.e. children, children's children, etc.)\n   */\n  descendants(element: ElementOrFqn): Element[];\n  /**\n   * Incoming relationships to the element and its descendants\n   * @see incomers\n   */\n  incoming(element: ElementOrFqn, filter?: 'all' | 'direct' | 'to-descendants'): Relationship[];\n  /**\n   * Source elements of incoming relationships\n   */\n  incomers(element: ElementOrFqn, filter?: 'all' | 'direct' | 'to-descendants'): Element[];\n  /**\n   * Outgoing relationships from the element and its descendants\n   * @see outgoers\n   */\n  outgoing(element: ElementOrFqn, filter?: 'all' | 'direct' | 'from-descendants'): Relationship[];\n  /**\n   * Target elements of outgoing relationships\n   */\n  outgoers(element: ElementOrFqn, filter?: 'all' | 'direct' | 'from-descendants'): Element[];\n  /**\n   * Relationships inside the element, among descendants\n   */\n  internal(element: ElementOrFqn): Relationship[];\n  /**\n   * Resolve siblings of the element and siblings of ancestors\n   *  (from closest to root)\n   */\n  ascendingSiblings(element: ElementOrFqn): Element[];\n  /**\n   * Resolve all views that contain the element\n   */\n  viewsWithElement(element: ElementOrFqn): ViewModel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic View in LikeC4 DSL\nDESCRIPTION: Example of creating a dynamic view that describes interactions between components without modifying the core model. Shows how to define a titled view with customer interactions.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: zig\nCODE:\n```\ndynamic view example {\n  title 'Dynamic View Example'\n  customer -> web 'opens in browser'\n  web -> api 'POST request'\n  web <- api 'returns JSON'\n}\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4 View in React Application\nDESCRIPTION: This code snippet shows how to use a LikeC4 view in a React application. It imports the LikeC4View component from the 'likec4:react' module and renders it with a specific viewId.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/main.tsx\nimport { createRoot } from 'react-dom/client'\nimport { LikeC4View } from 'likec4:react'\n\ncreateRoot(document.getElementById('root')!).render(\n  <LikeC4View viewId='index' />\n)\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements with Where Predicate - LikeC4\nDESCRIPTION: This snippet demonstrates how to filter out elements and relationships that do not meet certain tag conditions using the 'exclude' predicate. It's useful for cleaning views to only include relevant items.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_8\n\nLANGUAGE: likec4\nCODE:\n```\n// only keep elements tagged with #v1\nexclude * where tag is not #v1\n\n// only keep relationships tagged with #commands\nexclude * -> * where tag is not #commands\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Kinds in LikeC4\nDESCRIPTION: Shows how to define and use custom relationship kinds to add more semantics to interactions between elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/relationships.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element system\n  // Define relationship kind\n  relationship async\n  relationship uses\n}\n\nmodel {\n  system1 = system 'System 1'\n  system2 = system 'System 2'\n\n  system1 -[async]-> system2\n\n  // Or prefix with '.' to use the kind\n  system1 .uses system2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment View in LikeC4\nDESCRIPTION: This snippet demonstrates how to define a deployment environment with zones and instances, and create a corresponding view. It includes the deployment structure and a view definition with predicates.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/views.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod {\n    zone eu {\n      zone zone1 {\n        instanceOf frontend.ui\n        instanceOf backend.api\n      }\n      zone zone2 {\n        instanceOf frontend.ui\n        instanceOf backend.api\n      }\n      instanceOf database\n    }    \n  }\n}\nviews {\n  deployment view index {\n    title 'Production Deployment'\n    link https://likec4.dev\n\n    include prod.**\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Deployment Relationships in LikeC4\nDESCRIPTION: Shows how to create relationships with additional properties like kinds, tags, and descriptions.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_7\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod {\n    vm2.db -[streaming]-> vm1.db {\n      #next, #live\n      title 'replicates'\n      description 'Streaming replication'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating View Navigation in LikeC4 Dynamic Views\nDESCRIPTION: Demonstrates how to implement navigation between different dynamic views in LikeC4. The example shows a high-level view with a link to a more detailed view using the navigateTo directive.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/dynamic-views.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\ndynamic view level1 {\n  title 'Highlevel'\n\n  ui -> api {\n    navigateTo moreDetails\n  }\n}\n\ndynamic view moreDetails {\n  title 'Some details'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Services and Components in LikeC4\nDESCRIPTION: This snippet demonstrates how to define services and components within a model in LikeC4. It shows the basic structure of a model with nested elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 {\n    component api\n    component frontend\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LikeC4 API from workspace directory\nDESCRIPTION: Demonstrates how to initialize the LikeC4 API by recursively searching and parsing source files from a workspace directory.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/model-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LikeC4 } from 'likec4'\n\nconst likec4 = await LikeC4.fromWorkspace('/path/to/workspace')\n```\n\n----------------------------------------\n\nTITLE: Extending Views in LikeC4 - LikeC4\nDESCRIPTION: This snippet demonstrates how to extend views in LikeC4 to prevent duplication and create structured presentations, allowing inheriting the predicates and styles from ancestor views.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_13\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n\n  view view1 {\n    include *\n  }\n\n  view view2 extends view1 {\n    title 'Same as View1, but with more details'\n\n    style * {\n      color muted\n    }\n\n    include some.backend\n  }\n\n  // cascade inheritance\n  view view3 extends view2 {\n    title 'Same as View2, but with more details'\n\n    include * -> some.backend\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enriching LikeC4 Model with Descriptions and Styles\nDESCRIPTION: Adds detailed descriptions, defines UI shape, and adds labels to relationships in the model. Also includes styling for the customer element in the SaaS view.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer = actor 'Customer' {\n    description 'The regular customer of the system'\n  }\n\n  saas = system 'Our SaaS' {\n    component ui 'Frontend' {\n      description 'Nextjs application, hosted on Vercel'\n      style {\n        icon tech:nextjs  \n        shape browser\n      }\n    }\n    component backend 'Backend Services' {\n      description '\n        Implements business logic\n        and exposes as REST API\n      '\n    }\n\n    // UI fetches data from the Backend\n    ui -> backend 'fetches via HTTPS'\n  }\n\n  // Customer uses the UI\n  customer -> ui 'opens in browser'\n}\n\nviews {\n  view of saas {\n    include *\n\n    style customer {\n      color muted\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Node Specifications in LikeC4\nDESCRIPTION: Demonstrates how to specify different types of deployment nodes with their properties and styling options. Includes environment, zone, kubernetes, and vm node definitions.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  deploymentNode environment\n  deploymentNode zone\n  deploymentNode kubernetes {\n    // Nodes have same styling options\n    style {\n      color blue\n      icon tech:kubernetes\n      multiple true\n    }\n  }\n  deploymentNode vm {\n    // Common properties for the kind\n    notation 'Virtual Machine'\n    technology 'VMware'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Element Metadata\nDESCRIPTION: Demonstrates how to add key-value metadata to elements, including complex data in YAML format.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  app = application 'App' {\n    metadata {\n      prop1 'value1'\n      prop2 '\n        apiVersion: apps/v1\n        kind: StatefulSet\n        metadata:\n          name: app-statefulset\n        spec: {}        \n      '\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LikeC4 Model API Usage Example\nDESCRIPTION: Example demonstrating how to programmatically access and traverse the architecture model using LikeC4 Model API.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LikeC4 } from \"likec4\"\n\nconst likec4 = await LikeC4.fromWorkspace(`....`)\n\n// Validation errors\nconsole.log(likec4.getErrors())\n\n// Traverse the model\nconst model = likec4.model()\nmodel\n  .element('cloud.backend.api')\n  .incoming() // relationships incoming to the element\n  .filter(r => r.tags.includes('http')) // filter by tags\n  .map(r => r.source) // get source elements\n\n// Layouted views\nconst diagrams = await likec4.diagrams()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Relationship Types in LikeC4\nDESCRIPTION: Defines custom relationship types that can be used to connect elements in the model. These relationships express specific semantic connections like asynchronous communication, subscription patterns, or downstream dependencies.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/specification.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  relationship async\n  relationship subscribes\n  relationship is-downstream-of\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with Style Predicates - LikeC4\nDESCRIPTION: This snippet illustrates how to define and apply styles using style predicates, determining how elements are rendered based on their characteristics and tags within a defined view.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_11\n\nLANGUAGE: likec4\nCODE:\n```\nview apiApp of internetBankingSystem.apiApplication {\n\n  include *\n\n  // apply to all elements\n  style * {\n    color muted\n    opacity 10%\n  }\n\n  // apply only to these elements\n  style singlePageApplication, mobileApp {\n    color secondary\n    size xlarge\n  }\n\n  // apply only to nested of apiApplication\n  style apiApplication.* {\n    color primary\n    multiple true\n  }\n\n  // apply to apiApplication and nested\n  style apiApplication._ {\n    color primary\n  }\n\n  // apply only to elements with specific tag\n  style element.tag = #deprecated {\n    color muted\n  }\n\n  // apply to elements not tagged\n  style element.tag != #deprecated {\n    opacity 20%\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Elements from Other Projects in LikeC4 DSL\nDESCRIPTION: Shows how to reference elements from other projects using the import statement in the LikeC4 DSL, enabling cross-project relationships.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: zig\nCODE:\n```\nimport { serviceA } from 'projectA'\n\nmodel {\n  serviceB = service {\n    -> serviceA.api 'calls serviceA'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Logical Elements as Instances in LikeC4\nDESCRIPTION: Demonstrates how to deploy logical model elements as instances in deployment nodes using the instanceOf operator.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod {\n    zone eu {\n      zone zone1 {\n        // 'frontend.ui' is a logical element\n        // by default, instance has same name, \n        // i.e. it becomes 'prod.eu.zone1.ui'\n        instanceOf frontend.ui\n        // this becomes 'prod.eu.zone1.api'\n        instanceOf backend.api\n      }\n\n      zone zone2 {\n        // or use '=' with the name coming first\n        ui = instanceOf frontend.ui\n\n        // two instances of same element\n        api1 = instanceOf backend.api\n        api2 = instanceOf backend.api\n      }\n\n      // Deploy to any level, not only leaf nodes\n      // Assume database shared between zones\n      db = instanceOf database\n    }    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Systems in LikeC4\nDESCRIPTION: This snippet demonstrates how to define external systems and their nested services. Here, an 'Amazon Web Services' system with a 'Database' service is defined, showing the hierarchical structure possible in LikeC4 models.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  amazon = system 'Amazon Web Services' {\n    rds = service 'Database'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local View Notations with Style Predicates in LikeC4\nDESCRIPTION: Demonstrates defining local notations using style predicates to override global settings. Includes examples for applications under development and deprecated elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/notations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nview {\n\n  style webApp1, webApp2 {\n    notation \"Application under development\"\n    color amber\n  }\n\n  style element.tag = #deprecated {\n    notation \"Deprecated\"\n    color muted\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Relationships in LikeC4\nDESCRIPTION: Illustrates how to create nested relationships within elements and use 'it' or 'this' to refer to the parent element.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/relationships.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  actor customer\n  service cloud {\n    component backend\n    component frontend\n\n    frontend -> backend\n    customer -> frontend\n  }\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer = actor {\n    it -> frontend 'opens in browser'\n    this -> frontend 'opens in browser'\n  }\n}\n```\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  component frontend {\n    customer -> it 'opens in browser'\n    customer -> this 'opens in browser'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Elements with Nested Components in LikeC4\nDESCRIPTION: This snippet shows how to extend an existing element ('cloud') to define a nested service ('service1'). The extend keyword allows enriching elements defined in other files, enabling modular organization of the architecture model.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\n// cloud/service1.c4\nmodel {\n  // cloud is defined in landscape.c4\n  extend cloud {\n    // extend and define cloud.service1\n    service1 = service 'Service 1'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading LikeC4 from Source\nDESCRIPTION: Code example demonstrating how to initialize LikeC4 model from a source string.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { LikeC4 } from 'likec4'\n\nconst likec4 = await LikeC4.fromSource(\n  `\n  specification {\n    element system\n    element user\n  }\n  model {\n    customer = user 'Customer'\n    cloud = system 'System'\n  }\n  views {\n    view index {\n      include *\n    }\n  }`,\n  opts,\n)\n```\n\n----------------------------------------\n\nTITLE: Previewing LikeC4 Diagrams\nDESCRIPTION: Commands to start a development server for previewing LikeC4 diagrams with hot-reload functionality.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 serve\n# Aliases:\nlikec4 start\nlikec4 dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Microservices with Where Operator - LikeC4\nDESCRIPTION: This snippet demonstrates how to use the 'where' operator to filter results based on specific conditions for microservices within cloud elements. It allows inclusion of only those elements that meet defined criteria such as kind being 'microservice' or tags defining attributes.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\n// include only microservices from nested\ninclude cloud.*\n  where kind is microservice\n\n// only microservices and not deprecated\ninclude cloud.*\n  where\n    kind == microservice and // possible to use 'is' or '=='\n    tag != #deprecated       // possible to use 'is not' or '!='\n\n// Use logical operators\ninclude cloud.*\n  where\n    not (kind is microservice or kind is webapp)\n    and tag is not #legacy\n    and (tag is #v1 or tag is #v2)\n```\n\n----------------------------------------\n\nTITLE: Basic LikeC4View Component Usage\nDESCRIPTION: Example of using the generated LikeC4View component to render an architecture view.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LikeC4View } from './likec4.generated'\n\nconst App = () => {\n  return (\n    <div>\n      <LikeC4View viewId=\"index\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Elements in LikeC4 Model\nDESCRIPTION: Demonstrates how to add an icon to an element using a URL. This example adds a PostgreSQL icon to a service element and adjusts its size and text size.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  pg = service 'PostgreSQL' {\n    style {\n      icon https://icons.terrastruct.com/dev%2Fpostgresql.svg\n      size sm\n      textSize lg\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4 Factory to Create React Components\nDESCRIPTION: Demonstrates how to use the LikeC4 factory to create React components bound to the generated model data. This ensures type safety and allows rendering only existing views.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LikeC4 } from '@likec4/diagrams'\nimport { LikeC4Views } from './generated-code'\n\n// Creates components, bound to the data (with type checks).\n// It ensures that only existing views can be rendered.\nconst { Diagram, Responsive, Embedded, Browser } = LikeC4.create(LikeC4Views)\n\nexport const IndexView = () => <Embedded viewId={'indexLR'} />\n```\n\n----------------------------------------\n\nTITLE: Initializing LikeC4 API from source string\nDESCRIPTION: Shows how to initialize the LikeC4 API by parsing a DSL source string directly, providing a simple architecture model definition.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/model-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LikeC4 } from \"likec4\"\n\nconst likec4 = await LikeC4.fromSource(`\n  specification {\n    element system\n    element user\n  }\n  model {\n    customer = user 'Customer'\n    cloud = system 'System'\n  }\n  views {\n    view index {\n      include *\n    }\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Using Relationship Predicates - LikeC4\nDESCRIPTION: This snippet showcases how to filter relationships within cloud components using predicates. Specifically, it demonstrates filtering based on tags like #messaging and specific kinds such as http-request.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\ninclude\n  // only relationships with tag #messaging\n  cloud.* <-> amazon.*\n    where tag is #messaging,\n\n  // only incoming http-requests\n  -> backend\n    where kind is http-request\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Kinds in LikeC4 Specification\nDESCRIPTION: Example of how to define custom relationship kinds in LikeC4 with styling properties like color, line style, and arrow head shape. This allows users to express different types of relations in their architectural models with distinct visual representations.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  relationship async {\n    color amber\n    line dotted\n    head diamond\n  }\n}\nmodel {\n  service1 -[async]-> service2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Predicates in LikeC4\nDESCRIPTION: Demonstrates the syntax for creating global predicates with complex inclusion and exclusion rules. Allows defining reusable predicate groups across different views.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: zig\nCODE:\n```\nglobal {\n  predicateGroup new_cloud_service {\n    include cloud.*\n      where kind is microservice\n    exclude *\n      where tag is #deprecated\n  }\n}\nviews {\n  view of newServices {\n    include *\n    global predicate new_cloud_service\n  }\n  view of newBackendServices {\n    include *\n    global predicate new_cloud_service\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4View Component in React Application\nDESCRIPTION: Shows how to render a LikeC4 diagram in a React application using the LikeC4View component provided by the Vite plugin.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { LikeC4View } from 'likec4:react'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <LikeC4View viewId='index' />\n  </StrictMode>\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Mermaid, Dot, and D2 from LikeC4\nDESCRIPTION: Commands to generate Mermaid, Dot, and D2 diagram formats from LikeC4 using the codegen feature.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 gen mmd\nlikec4 gen mermaid\nlikec4 gen dot\nlikec4 gen d2\n```\n\n----------------------------------------\n\nTITLE: Defining Web App Interaction View with LikeC4\nDESCRIPTION: This snippet shows how to visualize interactions with the web application using LikeC4. It includes all elements, the API application, the internet banking system, and relationships originating from the single-page application. Styles are applied to emphasize the single-page application in green and mute the internet banking system.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_10\n\nLANGUAGE: likec4\nCODE:\n```\n```likec4\nviews {\n\n  view spa of singlePageApplication {\n    include\n      *,\n      apiApplication,\n      internetBankingSystem,\n      -> singlePageApplication ->\n\n    style * {\n      color secondary\n    }\n    style internetBankingSystem {\n      color muted\n    }\n    style singlePageApplication {\n      color green\n    }\n  }\n\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Arrow Types in LikeC4\nDESCRIPTION: Demonstrates how to set custom arrow types for the head and tail of a relationship. This example sets a diamond head and crow tail for a relationship.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_10\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer -> ui 'opens in browser' {\n    style {\n      head diamond\n      tail crow\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Explanatory Notes to LikeC4 Dynamic Views\nDESCRIPTION: Illustrates how to add explanatory notes to steps in a LikeC4 dynamic view. The example includes notes for API requests and parallel database operations, enhancing the view with additional context and information.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/dynamic-views.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\ndynamic view stepnotes {\n  title 'Dynamic View Parallel Example'\n\n  ui -> api {\n    notes '\n      🏛️ - Requests data using predefined GraphQL queries\n      🤖 - Queries regression on CI\n    '\n  }\n\n  parallel {\n    api -> cache {\n      notes '\n        Requests temporary session-scoped data\n      '\n    }\n    api -> db {\n      notes '\n        Queries persistent data\n      '\n    }\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating First View in LikeC4\nDESCRIPTION: Defines the first view (index) that includes all top-level elements in the model.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n  view index {\n    include *\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sourceless Relationships in LikeC4\nDESCRIPTION: Demonstrates how to use sourceless relationships where the parent element is implicitly the source of the relationship.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/relationships.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  relationship graphql\n}\nmodel {\n  customer = actor {\n    // same as customer -> frontend\n    -> frontend 'opens in browser' \n  }\n  service cloud {\n    component backend\n    component frontend {\n      // same as frontend -[graphql]-> backend\n      -[graphql]-> backend 'requests data'  \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Style Notations Example in LikeC4\nDESCRIPTION: Shows how to apply the same notation text to different styles with varying colors for web applications.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/notations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nview {\n\n  style webApp1 {\n    notation \"Web Application\"\n    color amber\n  }\n\n  style webApp2 {\n    notation \"Web Application\"\n    color green\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Relationships in LikeC4 Specification\nDESCRIPTION: Demonstrates how to style all relationships of a specific kind in the specification section. This example styles 'async' relationships with amber color, dotted line, and custom arrow heads.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_8\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  relationship async {\n    color amber\n    line dotted\n    head diamond\n    tail vee\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Extended Elements in LikeC4\nDESCRIPTION: This snippet demonstrates how to enrich an extended element with additional properties such as tags, metadata, and links. These added properties provide more context and information to the architecture model elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  extend cloud {\n    // Add tags\n    #additional-tag, #another-tag\n\n    // Add metadata\n    metadata {\n      prop1 'value1'\n    }\n\n    // Add links\n    link ../src/index.ts#L1-L10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Views in LikeC4\nDESCRIPTION: Expands the views section to include both an index view and a detailed view of the SaaS system.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n  view index {\n    include *\n  }\n\n  view of saas {\n    include *\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Navigation in LikeC4 Views\nDESCRIPTION: Demonstrates how to set up custom navigation between views in LikeC4, using the 'navigateTo' keyword to create links between different views.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: likec4\nCODE:\n```\nview view2 {\n  include *\n  include cloud.backend with {\n    // navigate to 'view3' on click\n    navigateTo view3\n  }\n}\n\nview view3 {\n  include *\n  include cloud.backend with {\n    // the same element, but navigate back to 'view2'\n    navigateTo view2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic LikeC4 Project Configuration\nDESCRIPTION: JSON configuration for defining a LikeC4 project. The configuration file must specify a unique project name that identifies the project within the workspace.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/projects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"project-name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Element Border Style in LikeC4\nDESCRIPTION: Demonstrates how to change the border style of an element displayed as a group or container. This example sets a dotted border and 10% opacity.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element element {\n    style {\n      opacity 10%\n      border dotted // or dashed, solid, none\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Code from LikeC4 Diagrams with GitHub Actions\nDESCRIPTION: This snippet demonstrates how to generate React components from LikeC4 diagrams using GitHub Actions. It specifies the codegen type and output file path for the generated code.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/github.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: code generation\n    uses: likec4/actions@v1\n    with:\n      codegen: react\n      output: __generated__/likec4.jsx\n```\n\n----------------------------------------\n\nTITLE: Nested Component References in LikeC4\nDESCRIPTION: This snippet demonstrates how to reference components nested within other components using fully qualified names. It shows how to create relationships between deeply nested elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 {\n    component api\n    component frontend {\n      -> service2.api\n    }\n  }\n  service service2 {\n    component api\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in LikeC4 Specification\nDESCRIPTION: Creates tags that can be used to mark, group, or filter elements, relationships, and views in the model. Tags provide additional semantic meaning such as indicating deprecated components or associating elements with teams or epics.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/specification.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n\n  tag deprecated\n  tag epic-123\n  tag team2\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with LikeC4 Plugin in TypeScript\nDESCRIPTION: This snippet shows how to add the LikeC4 Vite Plugin to a Vite configuration file. It imports the necessary modules and adds the plugin to the plugins array.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { LikeC4VitePlugin } from 'likec4/vite-plugin'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    LikeC4VitePlugin(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using the bidirectional relationship predicate in LikeC4\nDESCRIPTION: Example of the new '<->' predicate which includes relationships in both directions between elements, simplifying view definitions when bidirectional relationships need to be displayed.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: zig\nCODE:\n```\nview {\n   include someA.* <-> someB.*\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LikeC4 views as webcomponents in HTML\nDESCRIPTION: Example of using LikeC4 as a custom web component by including the script and using the likec4-view element with a specified view-id. This allows for easy integration of LikeC4 diagrams into web pages.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://published.website/likec4-views.js\"></script>\n<likec4-view view-id=\"index\"></likec4-view>\n```\n\n----------------------------------------\n\nTITLE: Omitting Parts of Fully Qualified Names in LikeC4\nDESCRIPTION: This example shows how parts of fully qualified names can be omitted in LikeC4 if they remain unique. It demonstrates various scenarios of referencing elements with different levels of qualification.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_7\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service {\n    component backend1  {\n      component api\n    }\n    component backend2  {\n      component api\n      component graphql\n    }\n  }\n\n  frontend -> service.backend1.api // ✅ Non-ambiguous fully qualified name\n\n  frontend -> backend1.api  // ✅ This is OK, 'api' is unique in 'backend1',\n                            //    and 'backend1' is unique in the model\n                            //    We may omit 'service'\n\n  frontend -> backend2.api  // ✅ This is also OK\n\n  frontend -> service.api   // ⛔️ Error: 'api' is ambiguous in 'service'\n\n  frontend -> service.graphql // ✅ This is also OK, we omit 'backend2'\n                              //    as 'graphql' is unique in 'service'\n}\n```\n\n----------------------------------------\n\nTITLE: Element Override Notations in LikeC4\nDESCRIPTION: Demonstrates how to define notations when including elements with specific conditions, such as deprecated microservices.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/notations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nview {\n\n  include *\n    where kind is microservice\n      and tag is #deprecated\n      with {\n        notation \"Deprecated microservice\"\n        shape rectangle\n        color muted\n      }\n\n}\n```\n\n----------------------------------------\n\nTITLE: View Properties Configuration in LikeC4\nDESCRIPTION: Shows how to configure view properties including title, description, tags and links. Properties must be defined before predicates.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n\n  view epic12 {\n    #next, #epic-12\n    title \"Cloud System - Changes in Epic-12\"\n    description \"\n      This diagram shows the high-level\n      components and interactions.\n    \"\n\n    link https://my.jira/epic/12 'Epic-12'\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships Between Extended Elements in LikeC4\nDESCRIPTION: This snippet demonstrates how to extend an element and define relationships between nested elements. It shows that elements within the same parent scope can reference each other directly, illustrating scoping rules in LikeC4.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\n// cloud/service2.c4\nmodel {\n  // cloud is defined in landscape.c4\n  extend cloud {\n    // extend and define cloud.service2\n    service2 = service 'Some Service 2'\n\n    service2 -> service1 // ✅ service1 is known inside 'cloud'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for LikeC4 Library Mode\nDESCRIPTION: This configuration sets up Vite to build LikeC4 as a library for use with Next.js. It specifies the build output directory, entry point, and external dependencies.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { LikeC4VitePlugin } from 'likec4/vite-plugin'\n\nexport default defineConfig({\n  build: {\n    // Build views to 'lib' directory\n    outDir: 'lib',\n    lib: {\n      entry: 'src/likec4/index.tsx',\n    },\n    rollupOptions: {\n      // make sure to externalize deps that shouldn't be bundled\n      // to avoid code duplication\n      external: [\n        'react',\n        'react-dom',\n        'react/jsx-runtime',\n        'react/jsx-dev-runtime',\n        'react-dom/client',\n      ],\n    },\n  },  \n  plugins: [\n    react(),\n    LikeC4VitePlugin(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting LikeC4 Diagrams to PNG with GitHub Actions\nDESCRIPTION: This snippet shows how to export LikeC4 diagrams to PNG format using GitHub Actions. It specifies the export format, input path, output directory, and enables the use of the dot binary from Graphviz.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/github.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: export diagrams\n    uses: likec4/actions@v1\n    with:\n      export: png\n      path: src/likec4\n      output: out/images\n      use-dot-bin: 'true'\n```\n\n----------------------------------------\n\nTITLE: Generic ReactLikeC4 Component Usage\nDESCRIPTION: Example showing how to use the generic version of ReactLikeC4 component with model provider.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactLikeC4, LikeC4ModelProvider } from 'likec4/react'\nimport { RenderIcon, likeC4Model } from './likec4.generated'\n\nconst App = () => {\n  return (\n    <LikeC4ModelProvider likec4model={likeC4Model}>\n      <ReactLikeC4\n        viewId={\"index\"}\n        renderIcon={RenderIcon} // Optional, used for bundled icons\n        onEdgeClick={...}\n      />\n    </LikeC4ModelProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Interaction View with LikeC4\nDESCRIPTION: This snippet visualizes customer interactions using LikeC4. It includes all elements and specific relationships between the customer and the internet banking system and Bigbank, excluding the web application. Styles are applied to Bigbank (muted) and customer (green) elements to highlight them in the view. The resulting view is rendered via LikeC4View.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_8\n\nLANGUAGE: likec4\nCODE:\n```\n```likec4\nviews {\n\n  view customer of customer {\n    include\n      *,\n      customer -> internetBankingSystem.*,\n      customer -> bigbank.*\n      \n    exclude webApplication\n\n    style bigbank {\n      color muted\n    }\n    style customer {\n      color green\n    }\n  }\n\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Element Properties in Structurizr Style\nDESCRIPTION: Shows how to define element properties like title, description and technology using Structurizr DSL syntax.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element softwareSystem\n}\nmodel {\n  // Structurizr DSL style:\n  // <name> = softwareSystem [title] [description] [technology]\n  cloud = softwareSystem 'Cloud' 'Provides services to customers' 'SaaS'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin\nDESCRIPTION: Configuration code for integrating LikeC4 with Vite using the official plugin.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\nimport react from '@vitejs/plugin-react'\nimport { LikeC4VitePlugin } from 'likec4/vite-plugin'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    LikeC4VitePlugin(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Element Links\nDESCRIPTION: Shows how to add external and internal links to elements, including URIs and source code references.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  bastion = application 'Bastion' {\n    // External link\n    link https://any-external-link.com\n\n    // or any URI\n    link ssh://bastion.internal 'SSH'\n\n    // or relative link to navigate to sources\n    link ../src/index.ts#L1-L10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fully Qualified Names in LikeC4\nDESCRIPTION: This example illustrates the use of fully qualified names (FQN) to reference nested elements in LikeC4. It shows how to resolve ambiguities by using FQN and how parts of FQN can be omitted if they remain unique.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 {\n    component api\n    component frontend\n  }\n  service service2 {\n    component api\n  }\n\n  frontend -> api // ⛔️ Error: 'api' not found\n  frontend -> service1.api // ✅ This is OK\n  frontend -> service2.api // ✅ This is OK\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Steps in LikeC4 Dynamic Views\nDESCRIPTION: Shows how to define parallel operations in a LikeC4 dynamic view. The example demonstrates API simultaneously interacting with cache and database systems using either 'parallel' or 'par' syntax.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/dynamic-views.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\ndynamic view parallelexample {\n  title 'Dynamic View Parallel Example'\n  ui -> api\n  parallel {\n    api -> cache \n    api -> db\n  }\n  // or\n  par {\n    api -> cache \n    api -> db\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Deployment Structure in LikeC4\nDESCRIPTION: Shows how to organize deployment nodes in a hierarchical structure with environments, zones, and virtual machines.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod {\n    zone eu {\n      zone zone1 {\n        vm vm1\n        vm vm2\n      }\n      // You can also use '=' with the name coming first\n      zone2 = zone {        \n        vm1 = vm\n        vm2 = vm\n      }\n    }  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hoisting in LikeC4\nDESCRIPTION: This snippet showcases the hoisting mechanism in LikeC4. It demonstrates how elements can be referenced before they are declared and how they 'bubble up' to upper scopes if they remain unique.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n\n  service service1 {\n    component api\n    component frontend\n\n    frontend -> api // ✅ This is OK, references to 'api' from 'service1'\n    frontend -> graphql // ✅ This is OK, references to unique 'graphql'\n  }\n\n  frontend -> api // ⛔️ Error: 'api' is ambiguous\n\n  service service2 {\n    component api\n    component graphql\n\n    frontend -> api  // ✅ This is OK, references to 'api' from 'service2'\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Element Tags in LikeC4 DSL\nDESCRIPTION: Demonstrates how to extend an element with additional tags, metadata, and links using the LikeC4 modeling language. This allows adding extra information to existing elements without modifying their core definition.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: zig\nCODE:\n```\nmodel {\n  extend cloud {\n    // Add tags\n    #additional-tag, #another-tag\n\n    // Add metadata\n    metadata {\n      prop1 'value1'\n    }\n\n    // Add links\n    link ../src/index.ts#L1-L10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a LikeC4 Model in C4 Language\nDESCRIPTION: This snippet presents a LikeC4 model written in the C4 language. It defines a system with actors, components, and their relationships, along with view definitions.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\n//src/tutorial.c4\n// Tutorial - https://likec4.dev/tutorial/\n\nspecification {\n  element actor\n  element system\n  element component\n}\n\nmodel {\n  customer = actor 'Customer' {\n    description 'The regular customer of the system'\n  }\n\n  saas = system 'Our SaaS' {\n    component ui 'Frontend' {\n      description 'Nextjs application, hosted on Vercel'\n      style {\n        icon tech:nextjs\n        shape browser\n      }\n    }\n    component backend 'Backend Services' {\n      description '\n        Implements business logic\n        and exposes as REST API\n      '\n    }\n\n    // UI requests data from the Backend\n    ui -> backend 'fetches via HTTPS'\n  }\n\n  // Customer uses the UI\n  customer -> ui 'opens in browser'\n  customer -> saas 'enjoys our product'\n}\n\nviews {\n\n  view index {\n    title 'Landscape view'\n\n    include *\n  }\n\n  view saas of saas {\n    include *\n\n    style * {\n      opacity 25%\n    }\n    style customer {\n      color muted\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Views with LikeC4\nDESCRIPTION: This snippet demonstrates how to define a component view using LikeC4. It includes all elements, applies a muted style to all, a secondary color to the singlePageApplication and mobileApp, and a primary color to the apiApplication and its components. The resulting view is then rendered using the LikeC4View component.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\n```likec4\nviews {\n\n  view apiApp of internetBankingSystem.apiApplication {\n    title \"API Application - Components\"\n\n    include *\n\n    style * {\n      color muted\n    }\n\n    style singlePageApplication, mobileApp {\n      color secondary\n    }\n\n    style apiApplication, apiApplication.* {\n      color primary\n    }\n  }\n\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Deployment Views in LikeC4\nDESCRIPTION: This snippet illustrates how filtering works in deployment views, showing the combination of tags from the model and deployment model. It includes examples of different filtering scenarios based on tags and relations.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/views.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  el cloud {\n    el frontend {\n      #next\n      -> backend \"rel1\"\n    }\n    el backend {\n      #next\n      -> db \"rel2\"\n    }\n    el db\n  }\n}\ndeployment {\n  environment prod { // Resulting tags: #alpha\n    #alpha\n    zone eu { // Resulting tags: #beta\n      #beta\n      instanceOf frontend { // Resulting tags: #next, #gamma\n          #gamma\n      }\n      instanceOf backend { // Resulting tags: #next, #sigma\n          #sigma\n      }\n      eu -> prod.db \"rel3\"\n    }\n    instanceOf db { // Resulting tags: #delta\n      #delta\n    }\n  }\n}\nviews {\n  deployment view some {\n    include prod.eu.frontend -> prod.eu.backend\n      where source.tag is #next // includes relation \"rel1\"\n    include prod.eu.frontend -> prod.eu.backend\n      where source.tag is #gamma // includes relation \"rel1\"\n    include prod.eu -> prod.db\n      where source.tag is #beta // includes relation \"rel3\"\n    include prod.eu -> prod.db\n      where source.tag is #sigma // does not include any relations\n    include eu.* -> prod.db\n      where source.tag is #sigma // includes relations \"rel2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Properties in LikeC4\nDESCRIPTION: Demonstrates how to set various properties for deployment nodes including titles, descriptions, tags, and technologies.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod 'Production' {\n    #live #sla-customer \n    description 'Production environment'\n    technology 'OpenTofu'\n    link https://likec4.dev\n\n    zone eu {\n      title 'EU Region' \n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements in Views - LikeC4\nDESCRIPTION: This snippet demonstrates how to create groups within views to organize related cloud components visually. It includes examples of group definitions with titles and styles.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_10\n\nLANGUAGE: likec4\nCODE:\n```\nview {\n\n  group {\n    include backend\n  }\n\n  // with title\n  group 'Frontend' {\n    include frontend.*\n  }\n\n  // with style\n  group 'Service Bus' {\n    color amber\n    opacity 20%\n    border solid\n\n    include messageBroker.*\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container View in LikeC4\nDESCRIPTION: Creates a container view of the Internet Banking System, including all elements within the system and the customer interaction.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_4\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n  view ibsContainers of internetBankingSystem {\n    title \"Internet Banking System - Containers\"\n\n    include\n      *,\n      -> customer\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scoped Views Definition in LikeC4\nDESCRIPTION: Demonstrates how to define views scoped to specific elements, which inherit the scope of that element.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n\n  view {\n    include api // ⛔️ Error: 'api' is not found\n  }\n\n  view of cloud.backend {\n    include api // ✅ This is OK, resolves to 'cloud.backend.api'\n  }\n\n  view of legacy {\n    include api // ✅ This is OK, resolves to 'legacy.api'\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4View Component\nDESCRIPTION: Example of using the LikeC4View component in a React application.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LikeC4View } from 'likec4:react'\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <LikeC4View viewId=\"index\" />\n  </StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating LikeC4 Model with Changes\nDESCRIPTION: Updates the customer description and adds a new relationship between the customer and the SaaS system.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_7\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer = actor 'Customer' {\n    description 'Our dear customer'\n  }\n\n  saas = system 'Our SaaS' {\n    // ... (previous code)\n  }\n\n  // Customer uses the UI\n  customer -> ui 'opens in browser'\n  customer -> saas 'enjoys our product'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LikeC4View React Component\nDESCRIPTION: Implements the main LikeC4View component that renders a LikeC4 diagram based on the provided viewId. It validates the viewId, conditionally injects styles, and passes properties to the underlying LikeC4Diagram component.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/src/cli/codegen/npm-package/index-template.txt#2025-04-21_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nexport function LikeC4View({\n   viewId,\n   injectStyles = true,\n   ...props\n}: LikeC4ViewProps) {\n  const view = LikeC4Views[viewId]\n  if (!view) {\n    throw new Error(`Invalid viewId: ${viewId}`)\n  }\n  return <>\n    {injectStyles === true && <InjectStyles/>}\n    <LikeC4Diagram view={view} {...props} />\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Elements Between LikeC4 Projects\nDESCRIPTION: Example of how to import and reference elements from other LikeC4 projects. This allows creating relationships between components defined in separate project files.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/projects.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nimport { serviceA } from 'projectA'\n\nmodel {\n  serviceB = service {\n    -> serviceA.api 'calls serviceA'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for LikeC4 Integration\nDESCRIPTION: Demonstrates how to set up the LikeC4 Vite plugin in a Vite configuration file to enable embedding LikeC4 diagrams in web applications.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { LikeC4VitePlugin } from 'likec4/vite-plugin'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    LikeC4VitePlugin({}),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating LikeC4 Astro Component\nDESCRIPTION: This code creates an Astro component that wraps the React LikeC4View component. It allows the use of LikeC4 views in Astro markdown files.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { LikeC4View as ReactLikeC4View, type LikeC4ViewId } from 'likec4:react';\ninterface Props {\n  viewId: LikeC4ViewId;\n}\nconst { viewId } = Astro.props\n---\n\n<ReactLikeC4View viewId={viewId} client:only=\"react\">\n</ReactLikeC4View>\n```\n\n----------------------------------------\n\nTITLE: Creating Ad-hoc Group Elements in LikeC4\nDESCRIPTION: A feature to dynamically create nested groups in views, allowing for flexible organization of elements based on tags or categories\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: zig\nCODE:\n```\nview {\n  group 'Third-parties' {\n    group 'Integrations' {\n      group 'Analytics' {\n        include * where tag is #analytics\n      }\n      group 'Marketing' {\n        include * where tag is #marketing\n      }\n    }\n    group 'Monitoring' {\n      include * where tag is #marketing\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element Size and Text Properties in LikeC4\nDESCRIPTION: Demonstrates how to set the size, padding, and text size of an element using the 'style' block. This example sets a large size and extra-large text size for all elements of a specific kind.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element element {\n    style {\n      size large\n      textSize xl\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mobile App Interaction View with LikeC4\nDESCRIPTION: This snippet demonstrates visualizing interactions with the mobile application using LikeC4. It includes all elements, the internet banking system, the API application, and relationships between the mobile app and the API application components. Styles are applied to highlight the mobile app in green and mute other components.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_9\n\nLANGUAGE: likec4\nCODE:\n```\n```likec4\nviews {\n\n  view mobileApp of mobileApp {\n    include\n      *,\n      internetBankingSystem,\n      internetBankingSystem.apiApplication,\n      mobileApp -> internetBankingSystem.apiApplication.*\n\n    style * {\n      color secondary\n    }\n\n    style apiApplication, internetBankingSystem {\n      color muted\n    }\n\n    style mobileApp {\n      color green\n    }\n  }\n\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting LikeC4 Diagrams to PNG\nDESCRIPTION: Command to export LikeC4 diagrams to PNG format using a local web server and Playwright for screenshots.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 export png -o ./assets\n```\n\n----------------------------------------\n\nTITLE: Using Multiple LikeC4 Projects in React Components\nDESCRIPTION: Demonstrates how to import and use LikeC4View components from multiple different LikeC4 projects in a single React application.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// where `project-a` and `project-b` are the names of your projects\nimport { LikeC4View as ProjectA_LikeC4View } from 'likec4:react/project-a'\nimport { LikeC4View as ProjectB_LikeC4View } from 'likec4:react/project-b'\n\nconst example = () => (\n  <>\n    <ProjectA_LikeC4View viewId='index' />\n    <ProjectB_LikeC4View viewId='index' />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Colors Specification in LikeC4\nDESCRIPTION: Example showing how to define and use custom colors in element specifications.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: zig\nCODE:\n```\nspecification {\n  color custom #6BD731\n\n  element customer {\n    notation \"Person, Customer\"\n    style {\n      shape person\n      color custom\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Statement Blocks of Same Type in LikeC4\nDESCRIPTION: Shows how to create multiple statement blocks of the same type in a LikeC4 file. This example demonstrates using two separate views blocks, which is useful for grouping views that share local styles.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/intro.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\n// Views group 1\nviews {\n}\n\n// Views group 2\nviews {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining System Context View in LikeC4\nDESCRIPTION: Creates a context view of the 'bigbank' system, including specific elements and applying styles. It sets colors for different components.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n  view context of bigbank {\n    title \"Internet Banking System - SystemContext\"\n\n    include\n      bigbank,\n      mainframe,\n      internetBankingSystem,\n      email,\n      customer\n\n    style * {\n      color secondary\n    }\n    style bigbank, internetBankingSystem {\n      color primary\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building LikeC4 Static Website\nDESCRIPTION: Command to build a static website with LikeC4 diagrams, ready for deployment or embedding. Includes options for output directory and base URL configuration.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 build -o ./dist\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4 View in Astro Markdown\nDESCRIPTION: This example shows how to use the LikeC4 view component in an Astro markdown file. It imports the component and renders it with a specific viewId.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Welcome to my docs\n---\n\nimport LikeC4View from '../../components/LikeC4View.astro';\n\n## Introduction\n\nThis is an example of using LikeC4 in your documentation\n\n<LikeC4View viewId=\"index\" />\n```\n\n----------------------------------------\n\nTITLE: Using Fully Qualified Names for Element Extension in LikeC4\nDESCRIPTION: This snippet illustrates the requirement to use fully qualified names when extending elements. It shows a failure case when trying to extend 'service2' directly versus the correct approach of using the fully qualified name 'cloud.service2'.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/extend.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  extend service2       // ⛔️ Error: service2 not found in the global scope\n  extend cloud.service2 // ✅ Resolved by fully qualified name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colors in LikeC4 Specification\nDESCRIPTION: Demonstrates how to define custom colors that extend built-in themes. The example shows how to create hexadecimal color definitions and apply them to element styling, allowing for customized visual representation.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/specification.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  color custom-color #808\n  color another-color #440\n\n  element person {\n    style {\n      color custom-color\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated LikeC4 View Structure\nDESCRIPTION: Example of the structured data generated by the LikeC4 CLI using the 'codegen' command. This data structure contains view definitions with nodes and edges used for rendering diagrams.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport const LikeC4Views = {\n  indexLR: {\n    title: 'Landscape View'\n    nodes: [/* ... */],\n    edges: [/* ... */],\n  },\n  cloud: {\n    title: 'Overview of Cloud'\n    nodes: [/* ... */],\n    edges: [/* ... */],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LikeC4 CLI Scripts in package.json\nDESCRIPTION: Example of how to reference LikeC4 CLI commands directly in the package.json scripts object for development and build processes.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"likec4 dev ...\",\n    \"build\": \"likec4 build ...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation to Relationships in LikeC4\nDESCRIPTION: Demonstrates how to add a 'navigateTo' property to relationships, allowing users to zoom in and see more details about the relationship in a dynamic view.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/relationships.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  webApp -> backend.api {\n    title 'requests data for the dashboard'\n    navigateTo dashboardRequestFlow\n  }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Relationships in LikeC4\nDESCRIPTION: Demonstrates how to define relationships between deployed instances with titles and properties.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_6\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod {\n    vm vm1 {          \n      db = instanceOf database 'Primary DB'\n    }\n    vm vm2 {          \n      db = instanceOf database 'Standby DB'\n    }    \n    vm2.db -> vm1.db 'replicates' \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ambiguous References in LikeC4\nDESCRIPTION: This snippet illustrates how ambiguous references can occur when multiple services have components with the same name. It shows an error case when trying to reference an ambiguous component.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 {\n    component api\n    component frontend\n  }\n  service service2 {\n    component api\n  }\n\n  frontend -> api // ⛔️ Error: 'api' not found\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LikeC4 Plugin with API in Vite\nDESCRIPTION: This example demonstrates how to use the LikeC4 API to initialize the plugin in a Vite configuration. It creates a language service from a source string and passes it to the plugin.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { LikeC4 } from 'likec4'\nimport { LikeC4VitePlugin } from 'likec4/vite-plugin'\n\nconst { languageServices } = await LikeC4.fromSource(`\n  specification {\n    element system\n    element user\n  }\n  model {\n    customer = user 'Customer'\n    cloud = system 'System'\n  }\n  views {\n    view index {\n      include *\n    }\n  }\n`)\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    LikeC4VitePlugin({\n      languageServices,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: LikeC4 Model API Usage\nDESCRIPTION: Demonstrates the usage of LikeC4 model API, showing how to compute models, filter relationships, and access layout data\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LikeC4 } from 'likec4'\n\nconst likec4 = await LikeC4.fromWorkspace()\n\n// Sync and fast\nconst model = likec4.computedModel()\nmodel\n  .element('cloud.backend.api')\n  .incoming() // relationships incoming to the element\n  .filter(r => r.tags.includes('http')) // filter by tags\n  .map(r => r.source) // get source elements\n\n// Async, includes layout data (dimensions, positions...)\nconst diagram = await likec4.layoutedModel().view('index')\n```\n\n----------------------------------------\n\nTITLE: Generating Typed LikeC4 Model in TypeScript\nDESCRIPTION: Command to generate a TypeScript model file from a LikeC4 architecture model. This allows programmatic access to the architecture model with TypeScript type safety.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlikec4 codegen model --outfile ./likec4-model.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro with LikeC4 Vite Plugin\nDESCRIPTION: This snippet shows how to configure an Astro project with the LikeC4 Vite Plugin. It sets up Starlight and adds the LikeC4 plugin to the Vite configuration.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\nimport { LikeC4VitePlugin } from 'likec4/vite-plugin'\n\nexport default defineConfig({\n  integrations: [\n    starlight({\n      title: 'Your architecture docs site',\n    }),\n  ],\n  vite: {\n    plugins: [\n      LikeC4VitePlugin({}),\n    ],\n  },  \n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Relationships Browser in React Component\nDESCRIPTION: Shows how to enable the relationships browser feature in a React component, which allows exploring relationships between elements in the diagram\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LikeC4View } from './likec4.generated'\n\n<LikeC4View\n  viewId=\"index\"\n  enableRelationshipsBrowser\n  />\n```\n\n----------------------------------------\n\nTITLE: Adding Hierarchy to LikeC4 Model\nDESCRIPTION: Expands the model by adding a component element type and defining UI and backend components within the SaaS system.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor\n  element system\n  element component\n}\n\nmodel {\n  customer = actor 'Customer'\n  saas = system 'Our SaaS' {\n    component ui\n    component backend\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'include some._' predicate in LikeC4 view definition\nDESCRIPTION: Example of the new 'include some._' predicate which expands and includes nested elements only if they have in/out relationships, ignoring internal relationships. This differs from 'include some.*' which includes all nested elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: zig\nCODE:\n```\nview {\n   include some._\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Notations in LikeC4 Specification\nDESCRIPTION: Shows how to define global notations for different element kinds within the specification block. Includes examples for customer and staff elements with person shapes and custom colors.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/notations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n\n  element customer {\n    notation \"Person, Customer\"\n    style {\n      shape person\n      color green\n    }\n  }\n\n  element staff {\n    notation \"Person, Staff\"\n    style {\n      shape person\n    }\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Generating Web Component Bundle with LikeC4\nDESCRIPTION: Command to generate a JavaScript bundle containing web components from LikeC4. The output file is specified with the -o parameter.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/webcomponent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncodegen webcomponent -o ./src/likec4-webcomponent.js\n```\n\n----------------------------------------\n\nTITLE: Auto Layout Configuration in LikeC4\nDESCRIPTION: Shows how to adjust auto layout parameters for views, specifying layout direction and spacing between elements\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: zig\nCODE:\n```\nview {\n  include *\n  autoLayout LeftRight 120 110\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent LikeC4 view definition using standard predicates\nDESCRIPTION: A more verbose equivalent to the 'include some._' predicate, showing how it includes the parent element, all nested elements with relationships, but excludes relationships between nested elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: zig\nCODE:\n```\nview {\n  include some\n  include -> some.* ->\n  exclude some.* -> some.*\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Element Properties with Nested Blocks\nDESCRIPTION: Demonstrates how to define element properties using nested blocks, including multiline descriptions.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_2\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  // Only description inside\n  customer = actor 'Customer' {     \n    description: 'Uses the Mobile Application' // ':' is optional, but if you prefer\n  }\n  // All properties inside\n  mobile = application {\n    title 'Mobile Application'\n    description 'Provides services to customers'\n    technology 'React Native'\n  }\n  // Multiline\n  web = application {\n    title 'Web Application'\n    description '\n      Provides services to customers through\n      the web interface.\n    '\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4 View in Next.js\nDESCRIPTION: This code demonstrates how to use a LikeC4 view in a Next.js page component. It imports the LikeC4View from the built library and renders it with a specific viewId.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/index.tsx\nimport { LikeC4View } from '../lib'\n\nexport default function Home() {\n  return (\n    <LikeC4View viewId=\"index\" />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Combining With Statement and Where - LikeC4\nDESCRIPTION: This snippet illustrates how to combine 'with' statements with 'where' to enhance the visualization of elements. It specifies that color attributes should be applied to included elements filtered by a kind predicate.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_7\n\nLANGUAGE: likec4\nCODE:\n```\ninclude *\n  where kind is microservice\n  with {\n    color amber\n  }\n```\n\n----------------------------------------\n\nTITLE: Traversing LikeC4 Model\nDESCRIPTION: Example showing how to traverse and query a LikeC4 model programmatically.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { LikeC4 } from 'likec4'\n\nconst likec4 = await LikeC4.fromSource(`....`)\n\n// Validation errors\nconsole.log(likec4.getErrors())\n\n// Traverse the model\nconst model = likec4.model()\nmodel\n  .element('cloud.backend.api')\n  .incoming() // relationships incoming to the element\n  .filter(r => r.tags.includes('http')) // filter by tags\n  .map(r => r.source) // get source elements\n\n// Layouted views\nconst diagrams = await likec4.diagrams()\n```\n\n----------------------------------------\n\nTITLE: Styling Specific Elements in LikeC4 Model\nDESCRIPTION: Shows how to style a specific element using a nested 'style' block in the model section. This example overrides the color of a 'customer' element while inheriting the shape from its kind.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor {\n    style {\n      shape person\n      color red\n    }\n  }\n}\n\nmodel {\n  customer = actor 'Customer' {\n    style {\n      // inherits shape from kind\n      // and overrides color\n      color green                   \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running LikeC4 with CLI\nDESCRIPTION: This snippet shows how to use the LikeC4 CLI to start the local development server for previewing diagrams. The 'start' command launches the server with live reload capabilities.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlikec4 start\n```\n\n----------------------------------------\n\nTITLE: Exporting to Various Formats\nDESCRIPTION: Commands to export LikeC4 diagrams to Mermaid, Dot, and D2 formats.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 codegen mmd\nlikec4 codegen mermaid\nlikec4 codegen dot\nlikec4 codegen d2\n```\n\n----------------------------------------\n\nTITLE: CLI Help Commands\nDESCRIPTION: Example commands to access LikeC4 CLI help documentation.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 build -h\nlikec4 codegen react -h\n```\n\n----------------------------------------\n\nTITLE: Exporting to PNG\nDESCRIPTION: Command to export LikeC4 diagrams to PNG format using Playwright.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 export png -o ./assets\n```\n\n----------------------------------------\n\nTITLE: Using LikeC4 Web Component in HTML\nDESCRIPTION: HTML code snippet showing how to include the generated web component JavaScript bundle and use the 'likec4-view' component with the 'view-id' attribute.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/webcomponent.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./src/likec4-webcomponent.js\"></script>\n<likec4-view view-id=\"index\"></likec4-view>\n```\n\n----------------------------------------\n\nTITLE: Using Bundled Icons in LikeC4 Model\nDESCRIPTION: Shows how to use bundled icons from various packs (AWS, Azure, GCP, Tech) in LikeC4 diagrams. This example demonstrates icons for Lambda, Kubernetes, and PostgreSQL.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_7\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  fn = service 'Lambda Function' {\n    icon aws:lambda\n  }\n  k8s = service 'K8s Service' {\n    icon gcp:google-kubernetes-engine\n  }\n  pg = storage 'PostgreSQL' {\n    icon tech:postgresql\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions in LikeC4 Projects\nDESCRIPTION: JSON configuration that demonstrates how to exclude specific files or directories from being processed by LikeC4. This example excludes the node_modules directory using a glob pattern.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/projects.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"project-name\",\n  \"exclude\": [\n    \"**/node_modules/**/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Predicate Groups - LikeC4\nDESCRIPTION: This snippet shows how to define a global predicate group to streamline the inclusion and exclusion of certain cloud components based on common conditions, making it easier to reuse predicates across multiple views.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_9\n\nLANGUAGE: likec4\nCODE:\n```\nglobal {\n  predicateGroup microservices {\n    include cloud.*\n      where kind is microservice\n    exclude *\n      where tag is #deprecated\n  }\n}\n\nviews {\n  view of newServices {\n    include cloud.new.*\n    global predicate microservices\n  }\n\n  view of newBackendServices {\n    // Keep in mind that order is significant\n    global predicate microservices\n    include cloud.backend.*\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Deployment Nodes in LikeC4 DSL\nDESCRIPTION: Shows how to extend deployment nodes in the LikeC4 deployment model across multiple files, similar to the logical model extension mechanism.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: zig\nCODE:\n```\n// 'deployments/prod.c4'\ndeployment {\n  environment prod\n}\n\n// 'deployments/prod/zone-eu.c4'\ndeployment {\n  extend prod {\n    zone eu\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered LikeC4View Component\nDESCRIPTION: Example showing how to use the where predicate to filter elements and relationships dynamically.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LikeC4View } from './likec4.generated'\n\n// Keeps elements and relationships where:\n// - tag is not 'legacy'\n// - and \n// - tag is 'v1' or 'v2'\nconst App = () => {\n  return (\n    <div>\n      <LikeC4View\n        viewId=\"index\"\n        where={{\n          and: [\n            { tag: { neq: 'legacy' } },\n            { \n              or: [\n                { tag: { eq: 'v1' } },\n                { tag: { eq: 'v2' } }\n              ] \n            }\n          ]\n        }}/>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: React LikeC4 Component Implementation\nDESCRIPTION: Low-level React component implementation with configurable options for rendering LikeC4 diagrams.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <div>\n      <ReactLikeC4\n        viewId=\"index\"\n        pannable={false}\n        zoomable\n        keepAspectRatio={false}\n        showElementLinks={false}\n        showDiagramTitle={false}\n        onNodeClick={...}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing LikeC4 Web Component Prefix\nDESCRIPTION: Command demonstrating how to generate web components with a custom prefix 'custom-c4' instead of the default 'likec4' prefix.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/webcomponent.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncodegen webcomponent -w custom-c4 -o ./src/likec4-webcomponent.js\n```\n\n----------------------------------------\n\nTITLE: Defining Component Views with Structurizr\nDESCRIPTION: This snippet shows how to define a component view using Structurizr. It includes all elements, defines an animation sequence, enables auto-layout, and provides a description for the view. The resulting diagram is rendered using PlantUML and displayed as an image.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_7\n\nLANGUAGE: structurizr\nCODE:\n```\n```structurizr\nviews {\n\n  component apiApplication \"Components\" {\n    include *\n    animation {\n      singlePageApplication mobileApp database email mainframe\n      signinController securityComponent\n      accountsSummaryController mainframeBankingSystemFacade\n      resetPasswordController emailComponent\n    }\n    autoLayout\n    description \"The component diagram for the API Application.\"\n  }\n\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Deployment Nodes in LikeC4\nDESCRIPTION: Shows how to extend deployment nodes across multiple files using the extend keyword.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\n// 'deployments/prod.c4'\ndeployment {\n  environment prod\n}\n\n// 'deployments/prod/zone-eu.c4'\ndeployment {\n  extend prod {\n    zone eu\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating InjectStyles Utility Component in React\nDESCRIPTION: Defines a React component that handles style injection for LikeC4 diagrams and returns null, allowing for conditional style injection.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/src/cli/codegen/npm-package/index-template.txt#2025-04-21_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nexport function InjectStyles() {\n  useInjectStyles()\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 as a dependency\nDESCRIPTION: Shows how to add the LikeC4 package to your project dependencies using various package managers.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/model-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlikec4\n```\n\n----------------------------------------\n\nTITLE: Defining Element Tags\nDESCRIPTION: Shows how to add tags to elements using the # prefix, demonstrating single and multiple tag definitions.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/model.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  appV1 = application 'App v1' {\n    #deprecated\n    description 'Old version of the application'\n  }\n\n  // multiple tags\n  appV2 = application {\n    #next, #serverless\n    #team2\n    title 'App v2'\n  }\n\n  appV3 = application {        \n    title 'App v3'\n    #team3 // ⛔️ Error: tags must be defined first\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Building a LikeC4 Website with GitHub Actions\nDESCRIPTION: This snippet demonstrates how to use GitHub Actions to build a LikeC4 website. It checks out the repository, builds the LikeC4 website with a custom base URL, and uploads the result as an artifact.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/github.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: actions/checkout@v4\n\n  - name: ⚙️ build\n    uses: likec4/actions@v1\n    with:\n      action: build\n      path: src/likec4\n      output: dist\n      base: /baseurl/\n\n  - name: upload artifacts\n    uses: actions/upload-artifact@v3\n    with:\n      name: likec4\n      path: dist\n```\n\n----------------------------------------\n\nTITLE: Customizing Deployed Instances in LikeC4\nDESCRIPTION: Shows how to override inherited properties and styling for deployed instances.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/Deployment/model.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\ndeployment {\n  environment prod {\n    zone eu { \n      db = instanceOf database {\n        title 'Primary DB'\n        technology 'PostgreSQL with streaming replication'\n        icon tech:postgresql\n        style {\n          color red\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Styles in Views Block\nDESCRIPTION: Demonstrates how to apply shared styles across multiple views within a single views block, with the ability to mute and adjust opacity of elements\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: zig\nCODE:\n```\nviews {\n  // apply to all views in this views block\n  style * {\n    color muted\n    opacity 10%\n  }\n\n  view apiApp of internetBankingSystem.apiApplication {\n    include *\n  }\n\n  view mobileApp of internetBankingSystem.mobileApplication {\n    include *\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icons from @likec4/icons Package in TypeScript\nDESCRIPTION: Demonstrates different ways to import SVG icons from the @likec4/icons library. Shows named imports from the main package, category-specific imports, and individual icon imports with default export syntax. Examples cover tech icons, AWS, and GCP icons.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/icons/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArgoCd, Astro } from '@likec4/icons'\n// or\nimport { ArgoCd, Astro } from '@likec4/icons/tech'\n// or\nimport ArgoCd from '@likec4/icons/tech/argo-cd'\nimport Astro from '@likec4/icons/tech/astro'\n\n// same\nimport { Lambda } from '@likec4/icons/aws'\nimport Lambda from '@likec4/icons/aws/lambda'\n\nimport { DataStudio } from '@likec4/icons/gcp'\nimport DataStudio from '@likec4/icons/gcp/data-studio'\n```\n\n----------------------------------------\n\nTITLE: Defining Container View in Structurizr DSL\nDESCRIPTION: Creates a container view for the Internet Banking System, including all elements, defining an animation sequence, and enabling auto-layout.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_5\n\nLANGUAGE: structurizr\nCODE:\n```\nviews {\n  container internetBankingSystem \"Containers\" {\n    include *\n    animation {\n      customer mainframe email\n      webApplication\n      singlePageApplication\n      mobileApp\n      apiApplication\n      database\n    }\n    autoLayout\n    description \"The container diagram for the Internet Banking System.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LikeC4 Type References in TypeScript\nDESCRIPTION: This code demonstrates how to add type references for LikeC4 in a TypeScript environment. It shows two methods: adding to the vite-env.d.ts file or updating the tsconfig.json.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/vite-plugin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/vite-env.d.ts\n/// <reference types=\"vite/client\" />\n/// <reference types=\"likec4/vite-plugin-modules\" />\n```\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"likec4/vite-plugin-modules\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Ambiguous References in LikeC4\nDESCRIPTION: This example demonstrates how to resolve ambiguous references by moving the relationship declaration to the appropriate scope. It shows how scoping rules apply in LikeC4.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/references.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  service service1 {\n    component api\n    component frontend\n  }\n  service service2 {\n    component api\n\n    frontend -> api // ✅ This is OK,\n                    //    'api' is unique in 'service2'\n                    //    'frontend' is unique in 'model'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for VSCode using JSON\nDESCRIPTION: This JSON configuration file is used to set up the LikeC4 MCP Server in a VSCode environment. The server is configured to run as a Server-Sent Events (SSE) service on localhost at port 33335. Make sure the LikeC4 extension is installed and activated to use this configuration.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/mcp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": {\n    \"likec4\": {\n      \"type\": \"sse\",\n      \"url\": \"http://localhost:33335/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LikeC4 Dependencies in TypeScript\nDESCRIPTION: Imports necessary types and components from the LikeC4 diagram bundle and local views module to support diagram rendering.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/src/cli/codegen/npm-package/index-template.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { LikeC4DiagramProps } from \"@likec4/diagram/bundle\"\nimport type { LikeC4ViewId } from \"./views\"\nimport { LikeC4Diagram, useInjectStyles } from \"@likec4/diagram/bundle\"\nimport { LikeC4Views } from \"./views\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PandaCSS with LikeC4 Style Preset\nDESCRIPTION: Example configuration file for PandaCSS that imports the LikeC4 style preset. The configuration specifies the import map, presets, JSX framework, and which files to include for processing.\nSOURCE: https://github.com/likec4/likec4/blob/main/styled-system/preset/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // Whether to use css reset\n  importMap: '@likec4/styles',\n  presets: [\n    '@likec4/style-preset',\n  ],\n  jsxFramework: 'react',\n  include: [\n    './src/**/*.{js,jsx,ts,tsx}',\n    // TODO: will be replaced with ship info\n    '../diagram/src/**/*.{js,jsx,ts,tsx}',\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Global Style Groups in LikeC4\nDESCRIPTION: A DSL feature that allows defining and applying global style groups across different views, with the ability to mute, color, and adjust opacity of elements\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: zig\nCODE:\n```\nglobal {\n  // Define style group\n  styleGroup common_styles {\n    style * {\n      color muted\n      opacity 10%\n    }\n    style singlePageApplication, mobileApp {\n      color secondary\n    }\n  }\n}\n\nviews {\n  view mobileApp of mobileApplication {\n    include *\n\n    // Apply common styles\n    global style common_styles\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating LikeC4 Diagrams\nDESCRIPTION: Command to validate LikeC4 diagrams, checking for syntax errors and layout drift. Returns a non-zero exit code if errors are found.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 validate\n```\n\n----------------------------------------\n\nTITLE: Programmatic Usage of LikeC4 Language Server in JavaScript\nDESCRIPTION: This code snippet shows how to start the LikeC4 language server programmatically using JavaScript. It imports the startLanguageServer function from the bundled package and handles potential errors.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/language-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { startLanguageServer } from '@likec4/language-server/bundled';\nstartLanguageServer().catch((e) => {\n  console.error(e)\n  process.exit(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 styles and PandaCSS with pnpm\nDESCRIPTION: Command to install the necessary dependencies including @likec4/style-preset, @likec4/styles, and @pandacss/dev using pnpm.\nSOURCE: https://github.com/likec4/likec4/blob/main/styled-system/styles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @likec4/style-preset @likec4/styles @pandacss/dev\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 Package\nDESCRIPTION: Command to install LikeC4 as a development dependency in an npm project.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev likec4\n```\n\n----------------------------------------\n\nTITLE: Defining Element Specifications in LikeC4\nDESCRIPTION: Defines the basic element types (actor and system) used in the architecture diagram.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tutorial.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element actor\n  element system\n}\n```\n\n----------------------------------------\n\nTITLE: Defining System Landscape View in LikeC4\nDESCRIPTION: Creates an 'index' view of the 'bigbank' system, representing the landscape view. It includes all elements and sets the title.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_0\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n  view index of bigbank {\n    title \"Big Bank - Landscape\"\n    include *\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Types and Components in TypeScript\nDESCRIPTION: Exports types and components for external use, including the views module exports, useInjectStyles hook, LikeC4Views collection, and isLikeC4ViewId utility.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/src/cli/codegen/npm-package/index-template.txt#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type * from \"./views\"\nexport { useInjectStyles, LikeC4Views, isLikeC4ViewId }\n```\n\n----------------------------------------\n\nTITLE: Running LikeC4 with NPX\nDESCRIPTION: Command to execute LikeC4 globally using npx command runner.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx likec4 [command]\n```\n\n----------------------------------------\n\nTITLE: Running LikeC4 CLI for Preview\nDESCRIPTION: This snippet demonstrates how to use the LikeC4 CLI to start a preview of the architecture diagrams. It uses npx to run the likec4 command with the 'start' option.\nSOURCE: https://github.com/likec4/likec4/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx likec4 start\n```\n\n----------------------------------------\n\nTITLE: Styling View Components in LikeC4 DSL\nDESCRIPTION: Example showing how to customize the appearance of view components by setting opacity and border styles for compound elements.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: zig\nCODE:\n```\nview {\n   include some._\n\n   style some {\n     opacity 20%\n     border dashed\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Starlight in JSX\nDESCRIPTION: This snippet imports the Card and Aside components from the Starlight component library for use in the markdown file.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/guides/static-website.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Exporting LikeC4 Data to JSON\nDESCRIPTION: Command to export LikeC4 data to a JSON file format.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 export json -o dump.json\n```\n\n----------------------------------------\n\nTITLE: Serving LikeC4 Diagrams\nDESCRIPTION: Commands to preview LikeC4 diagrams using the development server.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 serve\n\n# Aliases:\nlikec4 start\nlikec4 dev\n```\n\n----------------------------------------\n\nTITLE: Global Installation of LikeC4\nDESCRIPTION: Commands to install LikeC4 globally and execute it directly from command line.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global likec4\n\n# Then, you can call `likec4` directly:\nlikec4 [command]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Warning Card Component in JSX\nDESCRIPTION: This code renders a Card component with a warning icon, indicating that the page is under construction.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/guides/static-website.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card title=\"Soon\" icon=\"warning\">\n  This page is under construction.  \n</Card>\n```\n\n----------------------------------------\n\nTITLE: Styling Specific Relationships in LikeC4 Model\nDESCRIPTION: Shows how to style a specific relationship in the model section. This example sets a solid line and amber color for a relationship between 'customer' and 'ui'.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_9\n\nLANGUAGE: likec4\nCODE:\n```\nmodel {\n  customer -> ui 'opens in browser' {\n    style {\n      line solid\n      color amber\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 CLI Globally\nDESCRIPTION: Command to install LikeC4 CLI globally using npm, allowing it to be used in any project without npx.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global likec4\n\n# Then, you can call `likec4` directly:\nlikec4 [command]\n```\n\n----------------------------------------\n\nTITLE: Loading LikeC4 from Workspace\nDESCRIPTION: Code example showing how to load LikeC4 model from a workspace directory.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { LikeC4 } from 'likec4'\n\nconst likec4 = await LikeC4.fromWorkspace('path to workspace', opts)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions in LikeC4 Project\nDESCRIPTION: Shows how to exclude specific files or patterns in the LikeC4 configuration file using glob patterns.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"project-name\",\n  \"exclude\": [\n    \"**/node_modules/**/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 with NPM\nDESCRIPTION: Command to create a new LikeC4 project using NPM package manager. Requires Node.js version 18 or higher.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/create-likec4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create likec4@latest\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Instances of an Element in LikeC4\nDESCRIPTION: Shows how to display an element as multiple instances by setting the 'multiple' property to true in the style block.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_5\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element element {\n    style {\n      multiple true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LikeC4ViewProps Type in TypeScript\nDESCRIPTION: Defines the props type for the LikeC4View component, extending LikeC4DiagramProps while specifying required viewId and optional style injection settings.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/src/cli/codegen/npm-package/index-template.txt#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LikeC4ViewProps = {\n  viewId: LikeC4ViewId\n  /**\n   * @default true\n   */\n  injectStyles?: boolean | undefined\n} & Omit<LikeC4DiagramProps, \"view\">\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page Layout in YAML\nDESCRIPTION: YAML configuration that defines a 404 error page with splash template, hero section containing title, tagline, and a home navigation action\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/404.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: '404'\ndescription: 'Page not found. Check the URL or try using the search bar.'\ntemplate: splash\neditUrl: false\nhero:\n  title: '404'\n  tagline: Page not found. Check the URL or try using the search bar.\n\n  actions:\n    - text: Home\n      link: /tutorial/\n      variant: secondary\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 Package\nDESCRIPTION: Shell commands for installing the LikeC4 package using different package managers.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Aliases\nnpx likec4 generate react -o ./src/likec4.generated.js\nnpx likec4 gen react -o ./src/likec4.generated.js\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 with PNPM\nDESCRIPTION: Command to create a new LikeC4 project using PNPM package manager. Requires Node.js version 18 or higher.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/create-likec4/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create likec4\n```\n\n----------------------------------------\n\nTITLE: Building LikeC4 Dependencies with Turbo\nDESCRIPTION: Command to generate views while ensuring all dependencies are built first, using Turborepo.\nSOURCE: https://github.com/likec4/likec4/blob/main/examples/diagrams-dev/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:turbo\n```\n\n----------------------------------------\n\nTITLE: Setting Element Opacity in LikeC4\nDESCRIPTION: Shows how to set the opacity of an element, which is useful for elements displayed as groups or containers. This example sets the opacity to 10%.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/styling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nspecification {\n  element element {\n    style {\n      opacity 10%\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running LikeC4 CLI\nDESCRIPTION: Command to start the LikeC4 preview server using npx. This command will run the LikeC4 CLI tool and start a local server to preview the architecture diagrams.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/vscode/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx likec4 start\n```\n\n----------------------------------------\n\nTITLE: Previewing LikeC4 Build\nDESCRIPTION: Command to preview the built LikeC4 static website, useful for CI/CD processes or comparing with previous builds.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 preview -o ./dist\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Cursor using JSON\nDESCRIPTION: This JSON configuration sets up the LikeC4 MCP Server for the Cursor environment, pointing to an SSE service on localhost. Ensure your environment supports SSE and the specified URL is accessible.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/mcp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"likec4\": {\n      \"url\": \"http://localhost:33335/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PandaCSS with LikeC4 styles\nDESCRIPTION: Configuration example for panda.config.ts that sets up PandaCSS with LikeC4 style presets. It specifies the import map, presets, JSX framework, and files to include in the styling.\nSOURCE: https://github.com/likec4/likec4/blob/main/styled-system/styles/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // Whether to use css reset\n  importMap: '@likec4/styles',\n  presets: [\n    '@likec4/style-preset',\n  ],\n  jsxFramework: 'react',\n  include: [\n    './src/**/*.{js,jsx,ts,tsx}',\n    // TODO: will be replaced with ship info\n    '../diagram/src/**/*.{js,jsx,ts,tsx}',\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Generate Command for LikeC4 Diagrams\nDESCRIPTION: Command to parse *.c4 files in the src/likec4 directory and generate typed views data for stories.\nSOURCE: https://github.com/likec4/likec4/blob/main/examples/diagrams-dev/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for LikeC4\nDESCRIPTION: Command to run end-to-end tests that package likec4 into a tarball, install it in an isolated workspace, and run tests using Playwright.\nSOURCE: https://github.com/likec4/likec4/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts\nDESCRIPTION: Example of LikeC4 script configuration in package.json for development and build commands.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  scripts: {\n    dev: 'likec4 serve ...',\n    build: 'likec4 build ...'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Loggers in TypeScript with @likec4/log\nDESCRIPTION: Demonstrates two methods of creating a logger instance: using createLogger function directly or getting a child logger from the rootLogger. Both approaches enable modular logging with namespace support.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/log/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogger, loggable, rootLogger } from '@likec4/log'\n\nconst logger = createLogger('module')\n// OR\nconst logger = rootLogger.getChild('module')\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for LikeC4 MCP Server Using a Package\nDESCRIPTION: This JSON configuration is for running the LikeC4 MCP Server using the @likec4/mcp package. It specifies a command to execute via npx, with an environment variable for the workspace folder. Ensure 'npx' and the package are available in your environment.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/mcp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"likec4\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@likec4/mcp\"\n      ],\n      \"env\": {\n        \"LIKEC4_WORKSPACE\": \"${workspaceFolder}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom-Prefixed Web Component in HTML\nDESCRIPTION: HTML code example showing how to use the custom-prefixed component 'custom-c4-view' with the 'view-id' and 'browser' attributes.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/webcomponent.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<custom-c4-view view-id=\"index\" browser=\"true\"></custom-c4-view>\n```\n\n----------------------------------------\n\nTITLE: Integrating PandaCSS with Vite using PostCSS\nDESCRIPTION: Configuration snippet for setting up PandaCSS in a Vite project using PostCSS. This adds the pandaCss plugin to the PostCSS configuration in the Vite config file.\nSOURCE: https://github.com/likec4/likec4/blob/main/styled-system/styles/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport pandaCss from '@pandacss/dev/postcss'\n\n//...\n  css: {\n    postcss: {\n      plugins: [\n        pandaCss(),\n      ],\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings for Logging in TypeScript\nDESCRIPTION: Shows the preferred approach of using template strings with the logger. This allows for cleaner and more efficient logging with interpolated values.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/log/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = 'world'\nlogger.info`Hello, ${name}!`\n```\n\n----------------------------------------\n\nTITLE: Using Export Command with Filters in Shell\nDESCRIPTION: Demonstrates how to use the export command with filter options to selectively export diagrams by ID to PNG format.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 export png --filter=\"team1*\" --filter=\"index\" .\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 Package\nDESCRIPTION: Instructions for adding the LikeC4 package to your project dependencies using various package managers.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/tooling/Code generation/webcomponent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Rendering an Aside Component with CLI Reference in JSX\nDESCRIPTION: This snippet renders an Aside component that directs users to check the CLI documentation for the 'build' command while the main content is unavailable.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/guides/static-website.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Aside title=\"Meanwhile\">\n  Check  [`build`](/tooling/cli/#build-static-website) command in CLI documentation.\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Control in robots.txt\nDESCRIPTION: Standard robots.txt configuration that instructs all web crawlers to not access any content on the site. The wildcard user-agent (*) targets all bots, and the Disallow directive prevents access to the root directory (/) which effectively blocks the entire site.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/app/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation for Relationships in Zig\nDESCRIPTION: Example showing how to configure navigation to dynamic views for relationships between components.\nSOURCE: https://github.com/likec4/likec4/blob/main/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: zig\nCODE:\n```\nmodel {\n  webApp -> backend.api {\n    title 'requests data for the dashboard'\n    navigateTo dashboardRequestFlow\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Components\nDESCRIPTION: Command to generate React components from LikeC4 diagrams.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 codegen react --outfile ./src/likec4.generated.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Starlight Card Component\nDESCRIPTION: Demonstrates importing and implementing a warning card component from Astrojs Starlight to display a construction notice.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/guides/preview-changes-in-pr.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@astrojs/starlight/components';\n\n<Card title=\"Soon\" icon=\"warning\">\n  This page is under construction.  \n</Card>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running LikeC4 Language Server via Command Line\nDESCRIPTION: This snippet demonstrates how to install the LikeC4 language server globally using npm and run it with the stdio option. It also lists other valid arguments for running the server.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/language-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @likec4/language-server\nlikec4-language-server --stdio\n```\n\n----------------------------------------\n\nTITLE: Configuring mcpServers for LikeC4 in JSON\nDESCRIPTION: Configuration snippet for setting up the LikeC4 Message Control Protocol (MCP) server. The configuration specifies using npx to run the @likec4/mcp package and sets the LIKEC4_WORKSPACE environment variable to the current workspace folder.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/mcp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"likec4\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@likec4/mcp\"\n      ],\n      \"env\": {\n        \"LIKEC4_WORKSPACE\": \"${workspaceFolder}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 with Yarn\nDESCRIPTION: Command to create a new LikeC4 project using Yarn package manager. Requires Node.js version 18 or higher.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/create-likec4/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create likec4\n```\n\n----------------------------------------\n\nTITLE: Building Static Website\nDESCRIPTION: Command to build a static website containing LikeC4 diagrams.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/likec4/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nlikec4 build -o ./dist\n```\n\n----------------------------------------\n\nTITLE: Setting Up LikeC4 Development Environment\nDESCRIPTION: Commands for installing dependencies and pre-generating sources to start development on LikeC4.\nSOURCE: https://github.com/likec4/likec4/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing LikeC4 Style Preset with PandaCSS\nDESCRIPTION: Command for installing the required dependencies including the style preset, styles, and PandaCSS developer tools using pnpm package manager.\nSOURCE: https://github.com/likec4/likec4/blob/main/styled-system/preset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @likec4/style-preset @likec4/styles @pandacss/dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with asdf\nDESCRIPTION: Commands to install the required tools and dependencies for LikeC4 development using asdf version manager.\nSOURCE: https://github.com/likec4/likec4/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Defining System Landscape View in Structurizr DSL\nDESCRIPTION: Creates a system landscape view that includes all elements, enables auto-layout, and is titled 'SystemLandscape'.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_1\n\nLANGUAGE: structurizr\nCODE:\n```\nviews {\n  systemlandscape \"SystemLandscape\" {\n    include *\n    autoLayout\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default View Navigation in LikeC4\nDESCRIPTION: Shows how scoped views become the default view for an element, affecting navigation behavior.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/dsl/views.mdx#2025-04-21_snippet_3\n\nLANGUAGE: likec4\nCODE:\n```\nviews {\n\n  view {\n    // on click navigates to 'view1',\n    // because it is default for 'cloud.backend'\n    include cloud.backend\n  }\n\n  view view1 of cloud.backend {\n    include *\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Panda CSS for LikeC4 Playground\nDESCRIPTION: Command to pregenerate Panda CSS styles for the playground using Turbo. This is a prerequisite step before starting local development of the playground application.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/playground/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpx turbo run generate\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Documentation for @likec4/layouts\nDESCRIPTION: Documentation for the @likec4/layouts package that describes its purpose and dependency on Graphviz WASM for layout calculations\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/layouts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@likec4/layouts`\n\nLayout algorithms for views.\\\nAt the moment, delegates to [Graphviz WASM](https://hpcc-systems.github.io/hpcc-js-wasm/) (WASM).\n```\n\n----------------------------------------\n\nTITLE: Installing @likec4/diagram Package via NPM\nDESCRIPTION: Command to install the @likec4/diagram package using npm package manager.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/diagram/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @likec4/diagram\n```\n\n----------------------------------------\n\nTITLE: Starting LikeC4 Development Server\nDESCRIPTION: Command to start the development server with Hot Module Replacement for interactive development.\nSOURCE: https://github.com/likec4/likec4/blob/main/examples/diagrams-dev/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Logging Errors with @likec4/log in TypeScript\nDESCRIPTION: Demonstrates error logging patterns using the loggable helper function. Shows two approaches: wrapping the error with loggable() or passing it as part of an object in the second argument.\nSOURCE: https://github.com/likec4/likec4/blob/main/packages/log/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loggable } from '@likec4/log'\n\ntry {\n  throw new Error('Something went wrong')\n} catch (error) {\n  logger.error(loggable(error))\n  // OR pass as second argument\n  logger.error('An error occurred', { error })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt to Block All Crawlers\nDESCRIPTION: This basic robots.txt configuration instructs all web crawlers to avoid indexing any content on the website. It uses the wildcard User-agent (*) to target all crawlers and the root path Disallow (/) to prevent access to all content.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/playground/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Defining System Context View in Structurizr DSL\nDESCRIPTION: Creates a system context view for the Internet Banking System, including all elements, defining an animation sequence, and setting properties.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/src/content/docs/examples/bigbank.mdx#2025-04-21_snippet_3\n\nLANGUAGE: structurizr\nCODE:\n```\nviews {\n  systemcontext internetBankingSystem \"SystemContext\" {\n    include *\n    animation {\n      internetBankingSystem\n      customer\n      mainframe\n      email\n    }\n    autoLayout\n    description \"The system context diagram for the Internet Banking System.\"\n    properties {\n      structurizr.groups false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: This robots.txt configuration specifies that all web crawlers (*) are disallowed from accessing the /sitemap/ directory. All other directories on the site are implicitly allowed for crawling.\nSOURCE: https://github.com/likec4/likec4/blob/main/apps/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /sitemap/\n```"
  }
]